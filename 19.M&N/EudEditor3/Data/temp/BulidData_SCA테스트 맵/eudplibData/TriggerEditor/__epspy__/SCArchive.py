## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import SCAFlexible as scf;
import SCAFlexible as scf
# (Line 2) import SCATool as sct;
import SCATool as sct
# (Line 5) var Year;
Year = EUDVariable()
# (Line 6) var Month;
Month = EUDVariable()
# (Line 7) var Day;
Day = EUDVariable()
# (Line 8) var Hour;
Hour = EUDVariable()
# (Line 9) var Min;
Min = EUDVariable()
# (Line 21) var Week;
Week = EUDVariable()
# (Line 22) const GlobalData = EUDArray(20);
GlobalData = _CGFW(lambda: [EUDArray(20)], 1)[0]
# (Line 23) function Init(){
@EUDFunc
def Init():
    # (Line 24) scf.Init();
    scf.Init()
    # (Line 25) sct.Init();
    sct.Init()
    # (Line 26) }
    # (Line 28) function Exec(){

@EUDFunc
def Exec():
    # (Line 29) scf.Exec();
    scf.Exec()
    # (Line 30) sct.Exec();
    sct.Exec()
    # (Line 36) }
    # (Line 38) function SetUseDefaultMessage(value){

@EUDFunc
def SetUseDefaultMessage(value):
    # (Line 40) sct.SCAUseUserMessage = value;
    _ATTW(sct, 'SCAUseUserMessage') << (value)
    # (Line 41) }
    # (Line 48) function ConnectStatus(){

@EUDFunc
def ConnectStatus():
    # (Line 49) return sct.ConnectStatus[getcurpl()];
    EUDReturn(sct.ConnectStatus[f_getcurpl()])
    # (Line 50) }
    # (Line 60) function CommandStatus(){

@EUDFunc
def CommandStatus():
    # (Line 61) return sct.SCACommand[getcurpl()];
    EUDReturn(sct.SCACommand[f_getcurpl()])
    # (Line 62) }
    # (Line 78) function GetLastMessage(){

@EUDFunc
def GetLastMessage():
    # (Line 79) return sct.SCALastMessage[getcurpl()];
    EUDReturn(sct.SCALastMessage[f_getcurpl()])
    # (Line 80) }
    # (Line 83) function ResetLastMessage(){

@EUDFunc
def ResetLastMessage():
    # (Line 84) sct.SCALastMessage[getcurpl()] = 0;
    _ARRW(sct.SCALastMessage, f_getcurpl()) << (0)
    # (Line 85) }
    # (Line 87) function LoadTime(){

@EUDFunc
def LoadTime():
    # (Line 88) sct.GetDate();
    sct.GetDate()
    # (Line 89) }
    # (Line 90) function GetTimeLoadMessage(){

@EUDFunc
def GetTimeLoadMessage():
    # (Line 91) return sct.DateLoadStatus[getcurpl()];
    EUDReturn(sct.DateLoadStatus[f_getcurpl()])
    # (Line 92) }
    # (Line 93) function ResetDateTimeMessage(){

@EUDFunc
def ResetDateTimeMessage():
    # (Line 94) sct.DateLoadStatus[getcurpl()] = 0;
    _ARRW(sct.DateLoadStatus, f_getcurpl()) << (0)
    # (Line 95) }
    # (Line 98) function GetGlobalDataLoadMessage(){

@EUDFunc
def GetGlobalDataLoadMessage():
    # (Line 99) return sct.GlobalDataLoadStatus[getcurpl()];
    EUDReturn(sct.GlobalDataLoadStatus[f_getcurpl()])
    # (Line 100) }
    # (Line 101) function ResetGlobalDataLoadMessage(){

@EUDFunc
def ResetGlobalDataLoadMessage():
    # (Line 102) sct.GlobalDataLoadStatus[getcurpl()] = 0;
    _ARRW(sct.GlobalDataLoadStatus, f_getcurpl()) << (0)
    # (Line 103) }
    # (Line 104) function LoadGlobalData(){

@EUDFunc
def LoadGlobalData():
    # (Line 105) sct.LoadGlobalData();
    sct.LoadGlobalData()
    # (Line 106) }
    # (Line 111) function LoadData(Slot){

@EUDFunc
def LoadData(Slot):
    # (Line 112) sct.DataLoad(Slot);
    sct.DataLoad(Slot)
    # (Line 113) }
    # (Line 114) function SaveData(Slot){

@EUDFunc
def SaveData(Slot):
    # (Line 115) sct.DataSave(Slot);
    sct.DataSave(Slot)
    # (Line 116) }
