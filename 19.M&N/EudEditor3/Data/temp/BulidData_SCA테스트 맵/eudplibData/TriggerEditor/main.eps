import SCArchive as sca;
import variable as v;


function onPluginStart(){
	sca.Init();
	//sca.SetUseDefaultMessage(0);
	randomize();
}

const st = StringBuffer(100);
const Status = PVariable();

function NextRound(){
	if(Deaths(CurrentPlayer, AtLeast, 1, "Terran SCV")){
		Status[getcurpl()] += 1;
		PlayWAV("sound\\Misc\\Door\\Door4Cls.wav");
	}
}


const t0 = PVariable();
const t1 = PVariable();
const t2 = PVariable();
const t3 = PVariable();
const t4 = PVariable();
const t5 = PVariable();
const t6 = PVariable();
const t7 = PVariable();
const tarray = EUDArray(80);


const TryCount = PVariable();
function beforeTriggerExec(){
	sca.Exec();
	EUDPlayerLoop()();
	const CP = getcurpl();
	if(CP < 4){
	
	
		switch(sca.ConnectStatus()){
			case 0:
				st.insert(0, "\x06SCArchive 연결 끊김\n\n");
				break;
			case 1:
				st.insert(0, "\x07SCArchive 연결 됨\n\n");
				break;
		}
		
		
		if(sca.ConnectStatus() == 1){
			switch(Status[CP]){
				case 0:
					st.append("\x13\x1FSCA는 시간 정보를 실시간으로 불러 올 수 있습니다.\n\x13\x04시간 정보를 불러오는 중입니다...");
	
					if(sca.GetTimeLoadMessage() == 1){
						sca.ResetDateTimeMessage();
						Status[CP] += 1;
					}else{
						if(sca.CommandStatus() == 0){
							sca.LoadTime();
						}
					}
					break;
				case 1:
					st.append("\x13\x1FSCA는 시간 정보를 실시간으로 불러 올 수 있습니다.\n\x13\x04");
					st.append(sca.Year, "-");
					
					if (sca.Month > 9){
						st.append(sca.Month, "-");
					}else{
						st.append("0" ,sca.Month, "-");
					}
					
					if (sca.Day > 9){
						st.append(sca.Day, " ");
					}else{
						st.append("0" ,sca.Day, " ");
					}
					
					if (sca.Hour > 9){
						st.append(sca.Hour, ":");
					}else{
						st.append("0" ,sca.Hour, ":");
					}
					
					if (sca.Min > 9){
						st.append(sca.Min);
					}else{
						st.append("0" ,sca.Min);
					}
					st.append("\n\x13\x07 A키를 눌러 다음으로 넘어가세요.\0");
					NextRound();
					break;
				case 2:
					st.append("\x13\x1FSCA는 제작자가 실시간으로 데이터를 수정 할 수 있습니다.\n\x13\x04글로벌 데이터를 불러오는 중입니다...");
	
					if(sca.GetGlobalDataLoadMessage() == 1){
						sca.ResetGlobalDataLoadMessage();
						Status[CP] += 1;
					}else{
						if(sca.CommandStatus() == 0){
							sca.LoadGlobalData();
						}
					}
					break;
				case 3:
					st.append("\x13\x1FSCA는 제작자가 실시간으로 데이터를 수정 할 수 있습니다.\n\x13\x04");
					for(var i = 0 ; i < 5 ; i++){
						st.append(i, " : ",sca.GlobalData[i], " ");
					}
					st.append("\n\x13\x07 A키를 눌러 다음으로 넘어가세요.\0");
					NextRound();
					break;
				case 4:
					TryCount[CP] += 1;
				
					t0[CP] = dwrand();
					t1[CP] = dwrand();
					t2[CP] = dwrand();
					t3[CP] = dwrand();
					t4[CP] = dwrand();
					t5[CP] = dwrand();
					t6[CP] = dwrand();
					t7[CP] = dwrand();
					
					const arraylen = tarray.length / 8;
					for(var i = 0 ; i < arraylen ; i++){
						tarray[CP * arraylen + i] = dwrand();
					}
					
					for(var i = 0 ; i < arraylen ; i++){
						v.array1[CP * arraylen + i] = tarray[CP * arraylen + i];
					}
					
					
					v.v1[CP] = t0[CP];
					v.v2[CP] = t1[CP];
					v.v3[CP] = t2[CP];
					v.v4[CP] = t3[CP];
					SetDeaths(CurrentPlayer, SetTo, t4[CP], 0);
					SetDeaths(CurrentPlayer, SetTo, t5[CP], 1);
					SetDeaths(CurrentPlayer, SetTo, t6[CP], 2);
					SetDeaths(CurrentPlayer, SetTo, t7[CP], 3);
					Status[CP] += 1;
					break;
				case 5:
					st.append("\x13\x03저장과 불러오기 안전성 테스트를 진행합니다.\n\x13\x04진행 상황 \x07", TryCount[CP] ,"/30\n\n");
					
					if(sca.GetLastMessage() == 6){
						sca.ResetLastMessage();
						Status[CP] += 1;
					}else if(sca.CommandStatus() == 0){
						sca.SaveData(0);
					}
					
					break;
				case 6:
					st.append("\x13\x03저장과 불러오기 안전성 테스트를 진행합니다.\n\x13\x04진행 상황 \x07", TryCount[CP] ,"/30\n\n");
					if(sca.GetLastMessage() == 4){
						sca.ResetLastMessage();
						Status[CP] += 1;
					}else if(sca.CommandStatus() == 0){
						sca.LoadData(0);
					}
					break;
				case 7:
					{var flag = (v.v1[CP] == t0[CP]) && (v.v2[CP] == t1[CP]) && (v.v3[CP] == t2[CP]) && (v.v4[CP] == t3[CP]) && (dwread_epd(0 * 12 + CP) == t4[CP]) && (dwread_epd(1 * 12 + CP) == t5[CP]) && (dwread_epd(2 * 12 + CP) == t6[CP]) && (dwread_epd(3 * 12 + CP) == t7[CP]);
					
					if (flag == 1){
						const arraylen = tarray.length / 8;
						for(var i = 0 ; i < arraylen ; i++){
							if(v.array1[CP * arraylen + i] != tarray[CP * 10 + i]){
								flag = 0;
							}
						}
					}
				
				
					if(flag){
						if(TryCount[CP] == 30){
							Status[CP] = 9;
						}else{
							Status[CP] = 4;
						}
					}else{
						st.append(v.v1[CP]," " , v.v2[CP]," " , v.v3[CP] ," " ,v.v4[CP],"\n" , dwread_epd(0 * 12 + CP)," " , dwread_epd(1 * 12 + CP)," " , dwread_epd(2 * 12 + CP) ," " ,dwread_epd(3 * 12 + CP), "\n");
						for(var i = 0 ; i < arraylen ; i++){
							st.append(v.array1[CP * arraylen + i], " ");
						}
						st.append("\n");
						
						st.append(t0[CP]," " ,t1[CP]," " ,t2[CP]," " ,t3[CP],"\n" ,t4[CP]," " ,t5[CP]," " ,t6[CP]," " ,t7[CP], "\n");
						
						for(var i = 0 ; i < arraylen ; i++){
							st.append(tarray[CP * arraylen + i], " ");
						}
						st.append("\n");
						st.append("\x13\x06오류 발생! 저장된 값과 불러온 값이 다릅니다!\n\x13\x07A키를 눌러 재시도 하세요.");
						NextRound();
						
					}
					break;}
				case 8:
					v.v1[CP] = t0[CP];
					v.v2[CP] = t1[CP];
					v.v3[CP] = t2[CP];
					v.v4[CP] = t3[CP];
					SetDeaths(CurrentPlayer, SetTo, t4[CP], 0);
					SetDeaths(CurrentPlayer, SetTo, t5[CP], 1);
					SetDeaths(CurrentPlayer, SetTo, t6[CP], 2);
					SetDeaths(CurrentPlayer, SetTo, t7[CP], 3);
					Status[CP] = 4;
					break;
				case 9:
					st.append("\x13\x1F테스트가 종료되었습니다.\n\x13\x07자유롭게 게임을 종료하세요.");
					break;
			}
		}else{
			st.append("\x13\x11SCArchive의 응답을 기다리고 있습니다.\n\x13\x04만약 꺼져있다면 실행해 주세요.");
			if(Status[CP] > 3){
				//Status[CP] = 3;
			}
		}
		st.DisplayAt(0);

	}
	EUDEndPlayerLoop();
}

