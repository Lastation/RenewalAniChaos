## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Variable as v;
import Variable as v
# (Line 3) const s = StringBuffer();
s = _CGFW(lambda: [StringBuffer()], 1)[0]
# (Line 5) function SetDeathValue(cp)
# (Line 6) {
@EUDFunc
def SetDeathValue(cp):
    # (Line 7) if (Deaths(CurrentPlayer, (0), 1000, (210)))
    if EUDIf()(Deaths(CurrentPlayer, (0), 1000, (210))):
        # (Line 8) {
        # (Line 9) v.DeathOre[0] = 250 + v.Level[cp] * 10;
        _ARRW(v.DeathOre, 0) << (250 + v.Level[cp] * 10)
        # (Line 10) v.DeathOre[1] = 250 + v.Level[cp] * 10;
        _ARRW(v.DeathOre, 1) << (250 + v.Level[cp] * 10)
        # (Line 11) v.DeathOre[2] = 250 + v.Level[cp] * 10;
        _ARRW(v.DeathOre, 2) << (250 + v.Level[cp] * 10)
        # (Line 12) v.DeathOre[3] = 250 + v.Level[cp] * 10;
        _ARRW(v.DeathOre, 3) << (250 + v.Level[cp] * 10)
        # (Line 13) v.DeathOre[4] = 250 + v.Level[cp] * 10;
        _ARRW(v.DeathOre, 4) << (250 + v.Level[cp] * 10)
        # (Line 14) v.DeathOre[5] = 250 + v.Level[cp] * 10;
        _ARRW(v.DeathOre, 5) << (250 + v.Level[cp] * 10)
        # (Line 16) CenterView((96));
        # (Line 18) if (cp >= 0 && cp <= 2)
        DoActions(CenterView((96)))
        if EUDIf()(EUDSCAnd()(cp >= 0)(cp <= 2)()):
            # (Line 19) {
            # (Line 20) v.Team_Num[0] = 2;
            _ARRW(v.Team_Num, 0) << (2)
            # (Line 21) v.Team_Num[1] = 2;
            _ARRW(v.Team_Num, 1) << (2)
            # (Line 22) v.Team_Num[2] = 2;
            _ARRW(v.Team_Num, 2) << (2)
            # (Line 23) v.Team_Num[3] = 2;
            _ARRW(v.Team_Num, 3) << (2)
            # (Line 24) v.Team_Num[4] = 2;
            _ARRW(v.Team_Num, 4) << (2)
            # (Line 25) v.Team_Num[5] = 2;
            _ARRW(v.Team_Num, 5) << (2)
            # (Line 27) if (Deaths((0), (10), 15, (172)) || Deaths((1), (10), 15, (172)) || Deaths((2), (10), 15, (172))) { SetSwitch((20), (4)); }
            if EUDIf()(EUDSCOr()(Deaths((0), (10), 15, (172)))(Deaths((1), (10), 15, (172)))(Deaths((2), (10), 15, (172)))()):
                DoActions(SetSwitch((20), (4)))
                # (Line 28) if (Switch((22), (2)))
            EUDEndIf()
            if EUDIf()(Switch((22), (2))):
                # (Line 29) {
                # (Line 30) SetDeaths((13), (7), 12, (210)); SetSwitch((23), (4));
                DoActions(SetDeaths((13), (7), 12, (210)))
                # (Line 31) }
                DoActions(SetSwitch((23), (4)))
                # (Line 32) else { SetDeaths(CurrentPlayer, SetTo, 120 + v.Level[cp] * 12, (210)); }
            if EUDElse()():
                DoActions(SetDeaths(CurrentPlayer, SetTo, 120 + v.Level[cp] * 12, (210)))
                # (Line 34) if (Bring((6), (1), 6, (162), (153))) { SetScore((7), (8), 5, (7)); }
            EUDEndIf()
            if EUDIf()(Bring((6), (1), 6, (162), (153))):
                DoActions(SetScore((7), (8), 5, (7)))
                # (Line 35) SetResources((0), (8), v.DeathOre[cp], (0));
            EUDEndIf()
            # (Line 36) SetResources((1), (8), v.DeathOre[cp], (0));
            DoActions(SetResources((0), (8), v.DeathOre[cp], (0)))
            # (Line 37) SetResources((2), (8), v.DeathOre[cp], (0));
            DoActions(SetResources((1), (8), v.DeathOre[cp], (0)))
            # (Line 38) SetResources((3), (8), v.DeathOre[cp], (0));
            DoActions(SetResources((2), (8), v.DeathOre[cp], (0)))
            # (Line 39) SetResources((4), (8), v.DeathOre[cp], (0));
            DoActions(SetResources((3), (8), v.DeathOre[cp], (0)))
            # (Line 40) SetResources((5), (8), v.DeathOre[cp], (0));
            DoActions(SetResources((4), (8), v.DeathOre[cp], (0)))
            # (Line 41) }
            DoActions(SetResources((5), (8), v.DeathOre[cp], (0)))
            # (Line 42) if (cp >= 3 && cp <= 5)
        EUDEndIf()
        if EUDIf()(EUDSCAnd()(cp >= 3)(cp <= 5)()):
            # (Line 43) {
            # (Line 44) v.Team_Num[0] = 1;
            _ARRW(v.Team_Num, 0) << (1)
            # (Line 45) v.Team_Num[1] = 1;
            _ARRW(v.Team_Num, 1) << (1)
            # (Line 46) v.Team_Num[2] = 1;
            _ARRW(v.Team_Num, 2) << (1)
            # (Line 47) v.Team_Num[3] = 1;
            _ARRW(v.Team_Num, 3) << (1)
            # (Line 48) v.Team_Num[4] = 1;
            _ARRW(v.Team_Num, 4) << (1)
            # (Line 49) v.Team_Num[5] = 1;
            _ARRW(v.Team_Num, 5) << (1)
            # (Line 51) if (Deaths((3), (10), 15, (172)) || Deaths((4), (10), 15, (172)) || Deaths((5), (10), 15, (172))) { SetSwitch((20), (4)); }
            if EUDIf()(EUDSCOr()(Deaths((3), (10), 15, (172)))(Deaths((4), (10), 15, (172)))(Deaths((5), (10), 15, (172)))()):
                DoActions(SetSwitch((20), (4)))
                # (Line 52) if (Switch((22), (2)))
            EUDEndIf()
            if EUDIf()(Switch((22), (2))):
                # (Line 53) {
                # (Line 54) SetDeaths((13), (7), 12, (210)); SetSwitch((23), (4));
                DoActions(SetDeaths((13), (7), 12, (210)))
                # (Line 55) }
                DoActions(SetSwitch((23), (4)))
                # (Line 56) else { SetDeaths(CurrentPlayer, SetTo, 120 + v.Level[cp] * 12, (210)); }
            if EUDElse()():
                DoActions(SetDeaths(CurrentPlayer, SetTo, 120 + v.Level[cp] * 12, (210)))
                # (Line 58) if (Bring((7), (1), 6, (162), (153))) { SetScore((6), (8), 5, (7)); }
            EUDEndIf()
            if EUDIf()(Bring((7), (1), 6, (162), (153))):
                DoActions(SetScore((6), (8), 5, (7)))
                # (Line 59) SetResources((0), (8), v.DeathOre[cp], (0));
            EUDEndIf()
            # (Line 60) SetResources((1), (8), v.DeathOre[cp], (0));
            DoActions(SetResources((0), (8), v.DeathOre[cp], (0)))
            # (Line 61) SetResources((2), (8), v.DeathOre[cp], (0));
            DoActions(SetResources((1), (8), v.DeathOre[cp], (0)))
            # (Line 62) SetResources((3), (8), v.DeathOre[cp], (0));
            DoActions(SetResources((2), (8), v.DeathOre[cp], (0)))
            # (Line 63) SetResources((4), (8), v.DeathOre[cp], (0));
            DoActions(SetResources((3), (8), v.DeathOre[cp], (0)))
            # (Line 64) SetResources((5), (8), v.DeathOre[cp], (0));
            DoActions(SetResources((4), (8), v.DeathOre[cp], (0)))
            # (Line 65) }
            DoActions(SetResources((5), (8), v.DeathOre[cp], (0)))
            # (Line 67) v.DeathOre_Text[cp] = v.DeathOre[cp];
        EUDEndIf()
        _ARRW(v.DeathOre_Text, cp) << (v.DeathOre[cp])
        # (Line 69) v.Death_Score[cp] += 1;
        _ARRW(v.Death_Score, cp).__iadd__(1)
        # (Line 70) }
        # (Line 71) }
    EUDEndIf()
    # (Line 74) function DeathText(cp)

# (Line 75) {
@EUDFunc
def DeathText(cp):
    # (Line 76) if (v.DeathOre_Text[cp] != 0)
    if EUDIf()(v.DeathOre_Text[cp] == 0, neg=True):
        # (Line 77) {
        # (Line 78) const value = dwread_epd(EPD(0x58A364 + 48 * 211 + 4 * cp));
        value = f_dwread_epd(EPD(0x58A364 + 48 * 211 + 4 * cp))
        # (Line 80) s.printAt(1,"\n\x13\x08!! Warning !!\n\x13\x19:: \x17",
        # (Line 81) ptr2s(v.Hero_Name[value]), "\x04이 치명상을 입었습니다. \x19::\n\n\x13\x07",
        # (Line 82) v.Team_Num[cp], "\x04Team \x17+ ",
        # (Line 83) v.DeathOre_Text[cp], " \x04Ore\n");
        s.printAt(1, "\n\x13\x08!! Warning !!\n\x13\x19:: \x17", ptr2s(v.Hero_Name[value]), "\x04이 치명상을 입었습니다. \x19::\n\n\x13\x07", v.Team_Num[cp], "\x04Team \x17+ ", v.DeathOre_Text[cp], " \x04Ore\n")
        # (Line 85) SetDeaths((13), (7), 0, (211));
        # (Line 86) v.DeathOre_Text[cp] = 0;
        DoActions(SetDeaths((13), (7), 0, (211)))
        _ARRW(v.DeathOre_Text, cp) << (0)
        # (Line 87) }
        # (Line 88) }
    EUDEndIf()
    # (Line 90) function SetKillScore(cp)

# (Line 91) {
@EUDFunc
def SetKillScore(cp):
    # (Line 92) if (Kills(CurrentPlayer, AtLeast, 1, 51))	{ v.Kill_Score[cp] += 1; SetKills(CurrentPlayer, Subtract, 1, 51); }
    if EUDIf()(Kills(CurrentPlayer, AtLeast, 1, 51)):
        _ARRW(v.Kill_Score, cp).__iadd__(1)
        DoActions(SetKills(CurrentPlayer, Subtract, 1, 51))
        # (Line 93) if (Kills(CurrentPlayer, AtLeast, 1, 77))	{ v.Kill_Score[cp] += 1; SetKills(CurrentPlayer, Subtract, 1, 77); }
    EUDEndIf()
    if EUDIf()(Kills(CurrentPlayer, AtLeast, 1, 77)):
        _ARRW(v.Kill_Score, cp).__iadd__(1)
        DoActions(SetKills(CurrentPlayer, Subtract, 1, 77))
        # (Line 94) if (Kills(CurrentPlayer, AtLeast, 1, 74))	{ v.Kill_Score[cp] += 1; SetKills(CurrentPlayer, Subtract, 1, 74); }
    EUDEndIf()
    if EUDIf()(Kills(CurrentPlayer, AtLeast, 1, 74)):
        _ARRW(v.Kill_Score, cp).__iadd__(1)
        DoActions(SetKills(CurrentPlayer, Subtract, 1, 74))
        # (Line 95) if (Kills(CurrentPlayer, AtLeast, 1, 16))	{ v.Kill_Score[cp] += 1; SetKills(CurrentPlayer, Subtract, 1, 16); }
    EUDEndIf()
    if EUDIf()(Kills(CurrentPlayer, AtLeast, 1, 16)):
        _ARRW(v.Kill_Score, cp).__iadd__(1)
        DoActions(SetKills(CurrentPlayer, Subtract, 1, 16))
        # (Line 96) if (Kills(CurrentPlayer, AtLeast, 1, 54))	{ v.Kill_Score[cp] += 1; SetKills(CurrentPlayer, Subtract, 1, 54); }
    EUDEndIf()
    if EUDIf()(Kills(CurrentPlayer, AtLeast, 1, 54)):
        _ARRW(v.Kill_Score, cp).__iadd__(1)
        DoActions(SetKills(CurrentPlayer, Subtract, 1, 54))
        # (Line 97) if (Kills(CurrentPlayer, AtLeast, 1, 99))	{ v.Kill_Score[cp] += 1; SetKills(CurrentPlayer, Subtract, 1, 99); }
    EUDEndIf()
    if EUDIf()(Kills(CurrentPlayer, AtLeast, 1, 99)):
        _ARRW(v.Kill_Score, cp).__iadd__(1)
        DoActions(SetKills(CurrentPlayer, Subtract, 1, 99))
        # (Line 98) }
    EUDEndIf()
