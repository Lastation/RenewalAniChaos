## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Angel.Main as am;
from Angel import Main as am
# (Line 2) import Fairy.Main as fm;
from Fairy import Main as fm
# (Line 3) import Princess.Main as pm;
from Princess import Main as pm
# (Line 5) var cp;
cp = EUDVariable()
# (Line 6) var vTime;
vTime = EUDVariable()
# (Line 8) function onPluginStart();
# (Line 9) function beforeTriggerExec();
# (Line 10) function afterTriggerExec();
# (Line 12) function FixedUpdate();
# (Line 14) function onPluginStart()
# (Line 15) {
@EUDFunc
def onPluginStart():
    # (Line 16) am.Init();
    am.Init()
    # (Line 17) fm.Init();
    fm.Init()
    # (Line 18) pm.Init();
    pm.Init()
    # (Line 21) fm.Test_Mode();
    fm.Test_Mode()
    # (Line 24) SetResources(P1, SetTo, 10000, Ore);
    # (Line 25) }
    DoActions(SetResources(P1, SetTo, 10000, Ore))
    # (Line 28) function beforeTriggerExec()

# (Line 29) {
@EUDFunc
def beforeTriggerExec():
    # (Line 30) cp = getcurpl();
    cp << (f_getcurpl())
    # (Line 32) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 34) EUDEndPlayerLoop();
    EUDEndPlayerLoop()
    # (Line 36) vTime += 1;
    vTime.__iadd__(1)
    # (Line 37) if (vTime >= 24)
    if EUDIf()(vTime >= 24):
        # (Line 38) {
        # (Line 39) FixedUpdate();
        FixedUpdate()
        # (Line 40) vTime = 0;
        vTime << (0)
        # (Line 41) }
        # (Line 42) }
    EUDEndIf()
    # (Line 44) function afterTriggerExec()

# (Line 45) {
@EUDFunc
def afterTriggerExec():
    # (Line 47) }
    # (Line 49) function FixedUpdate()
    pass

# (Line 50) {
@EUDFunc
def FixedUpdate():
    # (Line 51) if (Kills(P1, AtLeast, 1, "Terran Bunker"))
    if EUDIf()(Kills(P1, AtLeast, 1, "Terran Bunker")):
        # (Line 52) {
        # (Line 53) SetKills(P1, Subtract, 1, "Terran Bunker");
        # (Line 55) fm.Test();
        DoActions(SetKills(P1, Subtract, 1, "Terran Bunker"))
        fm.Test()
        # (Line 57) }
        # (Line 59) am.FixedUpdate();
    EUDEndIf()
    am.FixedUpdate()
    # (Line 60) fm.FixedUpdate();
    fm.FixedUpdate()
    # (Line 61) pm.FixedUpdate();
    pm.FixedUpdate()
    # (Line 62) }
