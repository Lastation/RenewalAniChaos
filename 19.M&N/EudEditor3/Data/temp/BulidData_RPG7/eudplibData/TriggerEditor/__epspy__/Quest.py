## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Function as func;
import Function as func
# (Line 2) import Variables as v;
import Variables as v
# (Line 3) import Inventory as inv;
import Inventory as inv
# (Line 4) import String as str;
import String as str
# (Line 6) const s = StringBuffer(1000);
s = _CGFW(lambda: [StringBuffer(1000)], 1)[0]
# (Line 8) function onPluginStart()
# (Line 9) {
@EUDFunc
def onPluginStart():
    # (Line 10) CreateUnit(1, "Terran SCV", "Lia", P7);
    # (Line 11) CreateUnit(1, "Terran Civilian", "Siz", P7);
    DoActions(CreateUnit(1, "Terran SCV", "Lia", P7))
    # (Line 12) }
    DoActions(CreateUnit(1, "Terran Civilian", "Siz", P7))
    # (Line 13) function beforeTriggerExec()

# (Line 14) {
@EUDFunc
def beforeTriggerExec():
    # (Line 15) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 17) if(Deaths(CurrentPlayer, Exactly, 8, "Terran Dropship") && func.EPDBring(17, v.user_Character[getcurpl()]))
    if EUDIf()(EUDSCAnd()(Deaths(CurrentPlayer, Exactly, 8, "Terran Dropship"))(func.EPDBring(17, v.user_Character[f_getcurpl()]))()):
        # (Line 18) {
        # (Line 19) if(v.Quest001[getcurpl()] == 0)
        if EUDIf()(v.Quest001[f_getcurpl()] == 0):
            # (Line 20) {
            # (Line 21) func.CloseInven();
            func.CloseInven()
            # (Line 22) v.Quest001[getcurpl()] = 1;
            _ARRW(v.Quest001, f_getcurpl()) << (1)
            # (Line 23) SetDeaths(CurrentPlayer, SetTo, 0, "Terran Dropship");
            # (Line 24) }
            DoActions(SetDeaths(CurrentPlayer, SetTo, 0, "Terran Dropship"))
            # (Line 25) }
        EUDEndIf()
        # (Line 26) if(v.Quest001[getcurpl()] == 1)
    EUDEndIf()
    if EUDIf()(v.Quest001[f_getcurpl()] == 1):
        # (Line 27) {
        # (Line 28) func.UnitStop();
        func.UnitStop()
        # (Line 29) s.printAt(2, "\x13\x1b[ 리아 ]");
        s.printAt(2, "\x13\x1b[ 리아 ]")
        # (Line 30) s.printAt(3, " ");
        s.printAt(3, " ")
        # (Line 31) s.printAt(4, "\x13\x04", str.Lia01);
        s.printAt(4, "\x13\x04", str.Lia01)
        # (Line 32) if(Deaths(CurrentPlayer, Exactly, 8, "Terran Dropship"))
        if EUDIf()(Deaths(CurrentPlayer, Exactly, 8, "Terran Dropship")):
            # (Line 33) {
            # (Line 34) v.Quest001[getcurpl()] += 1;
            _ARRW(v.Quest001, f_getcurpl()).__iadd__(1)
            # (Line 35) func.TextClear();
            func.TextClear()
            # (Line 36) }
            # (Line 37) }
        EUDEndIf()
        # (Line 38) else if(v.Quest001[getcurpl()] == 2)
    if EUDElseIf()(v.Quest001[f_getcurpl()] == 2):
        # (Line 39) {
        # (Line 40) if(Deaths(CurrentPlayer, Exactly, 8, "Terran Dropship") && func.EPDBring(32, v.user_Character[getcurpl()]))
        if EUDIf()(EUDSCAnd()(Deaths(CurrentPlayer, Exactly, 8, "Terran Dropship"))(func.EPDBring(32, v.user_Character[f_getcurpl()]))()):
            # (Line 41) {
            # (Line 42) func.CloseInven();
            func.CloseInven()
            # (Line 43) v.Quest001[getcurpl()] += 1;
            _ARRW(v.Quest001, f_getcurpl()).__iadd__(1)
            # (Line 44) }
            # (Line 45) }
        EUDEndIf()
        # (Line 46) else if(v.Quest001[getcurpl()] == 3)
    if EUDElseIf()(v.Quest001[f_getcurpl()] == 3):
        # (Line 47) {
        # (Line 48) func.UnitStop();
        func.UnitStop()
        # (Line 49) s.printAt(2, "\x13\x04[ 리아 ]");
        s.printAt(2, "\x13\x04[ 리아 ]")
        # (Line 50) s.printAt(3, " ");
        s.printAt(3, " ")
        # (Line 51) s.printAt(4, "\x13\x04ㄳ");
        s.printAt(4, "\x13\x04ㄳ")
        # (Line 52) if(Deaths(CurrentPlayer, Exactly, 8, "Terran Dropship"))
        if EUDIf()(Deaths(CurrentPlayer, Exactly, 8, "Terran Dropship")):
            # (Line 53) {
            # (Line 54) v.Quest001[getcurpl()] += 1;
            _ARRW(v.Quest001, f_getcurpl()).__iadd__(1)
            # (Line 55) func.TextClear();
            func.TextClear()
            # (Line 56) }
            # (Line 57) }
        EUDEndIf()
        # (Line 59) EUDEndPlayerLoop();
    EUDEndIf()
    EUDEndPlayerLoop()
    # (Line 60) }
