## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Variables as n0;
import Variables as n0
# (Line 3) const ws = 0x58F44A;
ws = _CGFW(lambda: [0x58F44A], 1)[0]
# (Line 4) const EntryPointLength = 8;//EntryPointLength
EntryPointLength = _CGFW(lambda: [8], 1)[0]
# (Line 5) const SpaceLength = 100;//DataBufferSize
SpaceLength = _CGFW(lambda: [100], 1)[0]
# (Line 6) const ObjectCount = 8;//ObjectCount
ObjectCount = _CGFW(lambda: [8], 1)[0]
# (Line 8) function Init(){
@EUDFunc
def Init():
    # (Line 9) MPQAddFile('SCARCHIVEMAPCODE', py_open('scakeyfile', 'rb').read());
    MPQAddFile('SCARCHIVEMAPCODE', open('scakeyfile', 'rb').read())
    # (Line 10) MPQAddFile('SCARCHIVEDATA', py_open('scadatafile', 'rb').read());
    MPQAddFile('SCARCHIVEDATA', open('scadatafile', 'rb').read())
    # (Line 12) dwwrite_epd(EPD(ws) + 0, 1613580315);
    f_dwwrite_epd(EPD(ws) + 0, 1613580315)
    # (Line 13) dwwrite_epd(EPD(ws) + 1, 1658854567);
    f_dwwrite_epd(EPD(ws) + 1, 1658854567)
    # (Line 14) dwwrite_epd(EPD(ws) + 2, 1284233074);
    f_dwwrite_epd(EPD(ws) + 2, 1284233074)
    # (Line 15) dwwrite_epd(EPD(ws) + 3, 2277248355);
    f_dwwrite_epd(EPD(ws) + 3, 2277248355)
    # (Line 16) dwwrite_epd(EPD(ws) + 4, 3630918182);
    f_dwwrite_epd(EPD(ws) + 4, 3630918182)
    # (Line 17) dwwrite_epd(EPD(ws) + 5, 3416573449);
    f_dwwrite_epd(EPD(ws) + 5, 3416573449)
    # (Line 18) dwwrite_epd(EPD(ws) + 6, 2175808822);
    f_dwwrite_epd(EPD(ws) + 6, 2175808822)
    # (Line 19) dwwrite_epd(EPD(ws) + 7, 1811076507);
    f_dwwrite_epd(EPD(ws) + 7, 1811076507)
    # (Line 21) }
    # (Line 24) function Exec(){

@EUDFunc
def Exec():
    # (Line 25) Init();
    Init()
    # (Line 26) }
    # (Line 29) function ResetValue(tagNum, index){

@EUDFunc
def ResetValue(tagNum, index):
    # (Line 30) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 31) switch(tagNum){
    EUDSwitch(tagNum)
    # (Line 32) case 0:
    _t1 = EUDSwitchCase()
    # (Line 33) n0.Slot1_Level[cp] = 0;
    if _t1(0):
        _ARRW(n0.Slot1_Level, cp) << (0)
        # (Line 34) break;
        EUDBreak()
        # (Line 35) case 1:
    _t2 = EUDSwitchCase()
    # (Line 36) n0.Slot1_Exp[cp] = 0;
    if _t2(1):
        _ARRW(n0.Slot1_Exp, cp) << (0)
        # (Line 37) break;
        EUDBreak()
        # (Line 38) case 2:
    _t3 = EUDSwitchCase()
    # (Line 39) n0.Slot1_Job[cp] = 0;
    if _t3(2):
        _ARRW(n0.Slot1_Job, cp) << (0)
        # (Line 40) break;
        EUDBreak()
        # (Line 41) case 3:
    _t4 = EUDSwitchCase()
    # (Line 42) n0.Slot2_Level[cp] = 0;
    if _t4(3):
        _ARRW(n0.Slot2_Level, cp) << (0)
        # (Line 43) break;
        EUDBreak()
        # (Line 44) case 4:
    _t5 = EUDSwitchCase()
    # (Line 45) n0.Slot2_Exp[cp] = 0;
    if _t5(4):
        _ARRW(n0.Slot2_Exp, cp) << (0)
        # (Line 46) break;
        EUDBreak()
        # (Line 47) case 5:
    _t6 = EUDSwitchCase()
    # (Line 48) n0.Slot2_Job[cp] = 0;
    if _t6(5):
        _ARRW(n0.Slot2_Job, cp) << (0)
        # (Line 49) break;
        EUDBreak()
        # (Line 50) case 6:
    _t7 = EUDSwitchCase()
    # (Line 51) n0.user_Level[cp] = 0;
    if _t7(6):
        _ARRW(n0.user_Level, cp) << (0)
        # (Line 52) break;
        EUDBreak()
        # (Line 53) case 7:
    _t8 = EUDSwitchCase()
    # (Line 54) n0.user_Exp[cp] = 0;
    if _t8(7):
        _ARRW(n0.user_Exp, cp) << (0)
        # (Line 55) break;
        EUDBreak()
        # (Line 56) }
    # (Line 57) }
    EUDEndSwitch()
    # (Line 60) function SaveValue(tagNum, Value, index){

@EUDFunc
def SaveValue(tagNum, Value, index):
    # (Line 61) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 62) switch(tagNum){
    EUDSwitch(tagNum)
    # (Line 63) case 0:
    _t1 = EUDSwitchCase()
    # (Line 64) n0.Slot1_Level[cp] = Value;
    if _t1(0):
        _ARRW(n0.Slot1_Level, cp) << (Value)
        # (Line 65) break;
        EUDBreak()
        # (Line 66) case 1:
    _t2 = EUDSwitchCase()
    # (Line 67) n0.Slot1_Exp[cp] = Value;
    if _t2(1):
        _ARRW(n0.Slot1_Exp, cp) << (Value)
        # (Line 68) break;
        EUDBreak()
        # (Line 69) case 2:
    _t3 = EUDSwitchCase()
    # (Line 70) n0.Slot1_Job[cp] = Value;
    if _t3(2):
        _ARRW(n0.Slot1_Job, cp) << (Value)
        # (Line 71) break;
        EUDBreak()
        # (Line 72) case 3:
    _t4 = EUDSwitchCase()
    # (Line 73) n0.Slot2_Level[cp] = Value;
    if _t4(3):
        _ARRW(n0.Slot2_Level, cp) << (Value)
        # (Line 74) break;
        EUDBreak()
        # (Line 75) case 4:
    _t5 = EUDSwitchCase()
    # (Line 76) n0.Slot2_Exp[cp] = Value;
    if _t5(4):
        _ARRW(n0.Slot2_Exp, cp) << (Value)
        # (Line 77) break;
        EUDBreak()
        # (Line 78) case 5:
    _t6 = EUDSwitchCase()
    # (Line 79) n0.Slot2_Job[cp] = Value;
    if _t6(5):
        _ARRW(n0.Slot2_Job, cp) << (Value)
        # (Line 80) break;
        EUDBreak()
        # (Line 81) case 6:
    _t7 = EUDSwitchCase()
    # (Line 82) n0.user_Level[cp] = Value;
    if _t7(6):
        _ARRW(n0.user_Level, cp) << (Value)
        # (Line 83) break;
        EUDBreak()
        # (Line 84) case 7:
    _t8 = EUDSwitchCase()
    # (Line 85) n0.user_Exp[cp] = Value;
    if _t8(7):
        _ARRW(n0.user_Exp, cp) << (Value)
        # (Line 86) break;
        EUDBreak()
        # (Line 87) }
    # (Line 88) }
    EUDEndSwitch()
    # (Line 91) function SaveDataWriteValue(tagNum, BaseAddress, index){

@EUDFunc
def SaveDataWriteValue(tagNum, BaseAddress, index):
    # (Line 92) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 93) switch(tagNum){
    EUDSwitch(tagNum)
    # (Line 94) case 0:
    _t1 = EUDSwitchCase()
    # (Line 95) {
    if _t1(0):
        # (Line 96) const objValue = n0.Slot1_Level[cp];
        objValue = n0.Slot1_Level[cp]
        # (Line 97) if(objValue != 0){
        if EUDIf()(objValue == 0, neg=True):
            # (Line 98) if (objValue > 0xFFFF){
            if EUDIf()(objValue <= 0xFFFF, neg=True):
                # (Line 99) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x1000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x1000 + tagNum)
                # (Line 100) index++;
                index.__iadd__(1)
                # (Line 101) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue // 0x10000)
                # (Line 102) index++;
                index.__iadd__(1)
                # (Line 103) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue % 0x10000)
                # (Line 104) index++;
                index.__iadd__(1)
                # (Line 105) }else{
            if EUDElse()():
                # (Line 106) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x2000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x2000 + tagNum)
                # (Line 107) index++;
                index.__iadd__(1)
                # (Line 108) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue)
                # (Line 109) index++;
                index.__iadd__(1)
                # (Line 110) }
                # (Line 111) }
            EUDEndIf()
            # (Line 112) }
        EUDEndIf()
        # (Line 113) break;
        EUDBreak()
        # (Line 114) case 1:
    _t4 = EUDSwitchCase()
    # (Line 115) {
    if _t4(1):
        # (Line 116) const objValue = n0.Slot1_Exp[cp];
        objValue = n0.Slot1_Exp[cp]
        # (Line 117) if(objValue != 0){
        if EUDIf()(objValue == 0, neg=True):
            # (Line 118) if (objValue > 0xFFFF){
            if EUDIf()(objValue <= 0xFFFF, neg=True):
                # (Line 119) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x1000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x1000 + tagNum)
                # (Line 120) index++;
                index.__iadd__(1)
                # (Line 121) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue // 0x10000)
                # (Line 122) index++;
                index.__iadd__(1)
                # (Line 123) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue % 0x10000)
                # (Line 124) index++;
                index.__iadd__(1)
                # (Line 125) }else{
            if EUDElse()():
                # (Line 126) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x2000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x2000 + tagNum)
                # (Line 127) index++;
                index.__iadd__(1)
                # (Line 128) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue)
                # (Line 129) index++;
                index.__iadd__(1)
                # (Line 130) }
                # (Line 131) }
            EUDEndIf()
            # (Line 132) }
        EUDEndIf()
        # (Line 133) break;
        EUDBreak()
        # (Line 134) case 2:
    _t7 = EUDSwitchCase()
    # (Line 135) {
    if _t7(2):
        # (Line 136) const objValue = n0.Slot1_Job[cp];
        objValue = n0.Slot1_Job[cp]
        # (Line 137) if(objValue != 0){
        if EUDIf()(objValue == 0, neg=True):
            # (Line 138) if (objValue > 0xFFFF){
            if EUDIf()(objValue <= 0xFFFF, neg=True):
                # (Line 139) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x1000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x1000 + tagNum)
                # (Line 140) index++;
                index.__iadd__(1)
                # (Line 141) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue // 0x10000)
                # (Line 142) index++;
                index.__iadd__(1)
                # (Line 143) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue % 0x10000)
                # (Line 144) index++;
                index.__iadd__(1)
                # (Line 145) }else{
            if EUDElse()():
                # (Line 146) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x2000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x2000 + tagNum)
                # (Line 147) index++;
                index.__iadd__(1)
                # (Line 148) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue)
                # (Line 149) index++;
                index.__iadd__(1)
                # (Line 150) }
                # (Line 151) }
            EUDEndIf()
            # (Line 152) }
        EUDEndIf()
        # (Line 153) break;
        EUDBreak()
        # (Line 154) case 3:
    _t10 = EUDSwitchCase()
    # (Line 155) {
    if _t10(3):
        # (Line 156) const objValue = n0.Slot2_Level[cp];
        objValue = n0.Slot2_Level[cp]
        # (Line 157) if(objValue != 0){
        if EUDIf()(objValue == 0, neg=True):
            # (Line 158) if (objValue > 0xFFFF){
            if EUDIf()(objValue <= 0xFFFF, neg=True):
                # (Line 159) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x1000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x1000 + tagNum)
                # (Line 160) index++;
                index.__iadd__(1)
                # (Line 161) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue // 0x10000)
                # (Line 162) index++;
                index.__iadd__(1)
                # (Line 163) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue % 0x10000)
                # (Line 164) index++;
                index.__iadd__(1)
                # (Line 165) }else{
            if EUDElse()():
                # (Line 166) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x2000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x2000 + tagNum)
                # (Line 167) index++;
                index.__iadd__(1)
                # (Line 168) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue)
                # (Line 169) index++;
                index.__iadd__(1)
                # (Line 170) }
                # (Line 171) }
            EUDEndIf()
            # (Line 172) }
        EUDEndIf()
        # (Line 173) break;
        EUDBreak()
        # (Line 174) case 4:
    _t13 = EUDSwitchCase()
    # (Line 175) {
    if _t13(4):
        # (Line 176) const objValue = n0.Slot2_Exp[cp];
        objValue = n0.Slot2_Exp[cp]
        # (Line 177) if(objValue != 0){
        if EUDIf()(objValue == 0, neg=True):
            # (Line 178) if (objValue > 0xFFFF){
            if EUDIf()(objValue <= 0xFFFF, neg=True):
                # (Line 179) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x1000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x1000 + tagNum)
                # (Line 180) index++;
                index.__iadd__(1)
                # (Line 181) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue // 0x10000)
                # (Line 182) index++;
                index.__iadd__(1)
                # (Line 183) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue % 0x10000)
                # (Line 184) index++;
                index.__iadd__(1)
                # (Line 185) }else{
            if EUDElse()():
                # (Line 186) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x2000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x2000 + tagNum)
                # (Line 187) index++;
                index.__iadd__(1)
                # (Line 188) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue)
                # (Line 189) index++;
                index.__iadd__(1)
                # (Line 190) }
                # (Line 191) }
            EUDEndIf()
            # (Line 192) }
        EUDEndIf()
        # (Line 193) break;
        EUDBreak()
        # (Line 194) case 5:
    _t16 = EUDSwitchCase()
    # (Line 195) {
    if _t16(5):
        # (Line 196) const objValue = n0.Slot2_Job[cp];
        objValue = n0.Slot2_Job[cp]
        # (Line 197) if(objValue != 0){
        if EUDIf()(objValue == 0, neg=True):
            # (Line 198) if (objValue > 0xFFFF){
            if EUDIf()(objValue <= 0xFFFF, neg=True):
                # (Line 199) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x1000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x1000 + tagNum)
                # (Line 200) index++;
                index.__iadd__(1)
                # (Line 201) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue // 0x10000)
                # (Line 202) index++;
                index.__iadd__(1)
                # (Line 203) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue % 0x10000)
                # (Line 204) index++;
                index.__iadd__(1)
                # (Line 205) }else{
            if EUDElse()():
                # (Line 206) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x2000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x2000 + tagNum)
                # (Line 207) index++;
                index.__iadd__(1)
                # (Line 208) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue)
                # (Line 209) index++;
                index.__iadd__(1)
                # (Line 210) }
                # (Line 211) }
            EUDEndIf()
            # (Line 212) }
        EUDEndIf()
        # (Line 213) break;
        EUDBreak()
        # (Line 214) case 6:
    _t19 = EUDSwitchCase()
    # (Line 215) {
    if _t19(6):
        # (Line 216) const objValue = n0.user_Level[cp];
        objValue = n0.user_Level[cp]
        # (Line 217) if(objValue != 0){
        if EUDIf()(objValue == 0, neg=True):
            # (Line 218) if (objValue > 0xFFFF){
            if EUDIf()(objValue <= 0xFFFF, neg=True):
                # (Line 219) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x1000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x1000 + tagNum)
                # (Line 220) index++;
                index.__iadd__(1)
                # (Line 221) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue // 0x10000)
                # (Line 222) index++;
                index.__iadd__(1)
                # (Line 223) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue % 0x10000)
                # (Line 224) index++;
                index.__iadd__(1)
                # (Line 225) }else{
            if EUDElse()():
                # (Line 226) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x2000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x2000 + tagNum)
                # (Line 227) index++;
                index.__iadd__(1)
                # (Line 228) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue)
                # (Line 229) index++;
                index.__iadd__(1)
                # (Line 230) }
                # (Line 231) }
            EUDEndIf()
            # (Line 232) }
        EUDEndIf()
        # (Line 233) break;
        EUDBreak()
        # (Line 234) case 7:
    _t22 = EUDSwitchCase()
    # (Line 235) {
    if _t22(7):
        # (Line 236) const objValue = n0.user_Exp[cp];
        objValue = n0.user_Exp[cp]
        # (Line 237) if(objValue != 0){
        if EUDIf()(objValue == 0, neg=True):
            # (Line 238) if (objValue > 0xFFFF){
            if EUDIf()(objValue <= 0xFFFF, neg=True):
                # (Line 239) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x1000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x1000 + tagNum)
                # (Line 240) index++;
                index.__iadd__(1)
                # (Line 241) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue // 0x10000)
                # (Line 242) index++;
                index.__iadd__(1)
                # (Line 243) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue % 0x10000)
                # (Line 244) index++;
                index.__iadd__(1)
                # (Line 245) }else{
            if EUDElse()():
                # (Line 246) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x2000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x2000 + tagNum)
                # (Line 247) index++;
                index.__iadd__(1)
                # (Line 248) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue)
                # (Line 249) index++;
                index.__iadd__(1)
                # (Line 250) }
                # (Line 251) }
            EUDEndIf()
            # (Line 252) }
        EUDEndIf()
        # (Line 253) break;
        EUDBreak()
        # (Line 254) }
    # (Line 256) return index;
    EUDEndSwitch()
    EUDReturn(index)
    # (Line 257) }
    # (Line 260) function LoadDataReadValue(BaseAddress, i){

@EUDFunc
def LoadDataReadValue(BaseAddress, i):
    # (Line 261) const indicator = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
    indicator = f_wread_epd(BaseAddress + i // 2, (i % 2) * 2)
    # (Line 263) if (indicator != 0){
    if EUDIf()(indicator == 0, neg=True):
        # (Line 264) const spec = indicator / 0x1000;
        spec = indicator // 0x1000
        # (Line 265) const ObjNum = indicator % 0x1000;
        ObjNum = indicator % 0x1000
        # (Line 266) var vindex = 0;
        vindex = EUDVariable()
        vindex << (0)
        # (Line 267) var value = 0;
        value = EUDVariable()
        value << (0)
        # (Line 268) if (spec == 1){
        if EUDIf()(spec == 1):
            # (Line 270) i++;
            i.__iadd__(1)
            # (Line 271) const value1 = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            value1 = f_wread_epd(BaseAddress + i // 2, (i % 2) * 2)
            # (Line 272) i++;
            i.__iadd__(1)
            # (Line 273) const value2 = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            value2 = f_wread_epd(BaseAddress + i // 2, (i % 2) * 2)
            # (Line 274) value = value1 * 0x10000 + value2;
            value << (value1 * 0x10000 + value2)
            # (Line 275) }else if (spec == 2){
        if EUDElseIf()(spec == 2):
            # (Line 277) i++;
            i.__iadd__(1)
            # (Line 278) value = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            value << (f_wread_epd(BaseAddress + i // 2, (i % 2) * 2))
            # (Line 279) }else if (spec == 3){
        if EUDElseIf()(spec == 3):
            # (Line 281) i++;
            i.__iadd__(1)
            # (Line 282) vindex = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            vindex << (f_wread_epd(BaseAddress + i // 2, (i % 2) * 2))
            # (Line 283) i++;
            i.__iadd__(1)
            # (Line 284) const value1 = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            value1 = f_wread_epd(BaseAddress + i // 2, (i % 2) * 2)
            # (Line 285) i++;
            i.__iadd__(1)
            # (Line 286) const value2 = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            value2 = f_wread_epd(BaseAddress + i // 2, (i % 2) * 2)
            # (Line 287) value = value1 * 0x10000 + value2;
            value << (value1 * 0x10000 + value2)
            # (Line 288) }else if (spec == 4){
        if EUDElseIf()(spec == 4):
            # (Line 290) i++;
            i.__iadd__(1)
            # (Line 291) vindex = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            vindex << (f_wread_epd(BaseAddress + i // 2, (i % 2) * 2))
            # (Line 292) i++;
            i.__iadd__(1)
            # (Line 293) value = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            value << (f_wread_epd(BaseAddress + i // 2, (i % 2) * 2))
            # (Line 294) }
            # (Line 295) SaveValue(ObjNum, value, vindex);
        EUDEndIf()
        SaveValue(ObjNum, value, vindex)
        # (Line 296) }
        # (Line 297) return i;
    EUDEndIf()
    EUDReturn(i)
    # (Line 298) }
