## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Variables as v;
import Variables as v
# (Line 2) import Main as m;
import Main as m
# (Line 3) import Function as func;
import Function as func
# (Line 5) const s = StringBuffer(1000);
s = _CGFW(lambda: [StringBuffer(1000)], 1)[0]
# (Line 6) const InvenName = EUDArray(21*6);
InvenName = _CGFW(lambda: [EUDArray(21 * 6)], 1)[0]
# (Line 7) const InvenAmount = EUDArray(21*6);
InvenAmount = _CGFW(lambda: [EUDArray(21 * 6)], 1)[0]
# (Line 8) const InvenPage = PVariable();
InvenPage = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 9) const InvenSlot = PVariable();
InvenSlot = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 10) const num = PVariable();
num = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 11) const UseItem = PVariable();
UseItem = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 13) function Select(num);
# (Line 14) function Back();
# (Line 16) function beforeTriggerExec() {
@EUDFunc
def beforeTriggerExec():
    # (Line 17) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 18) if(Deaths(CurrentPlayer, Exactly, 1, "Terran Dropship"))
    if EUDIf()(Deaths(CurrentPlayer, Exactly, 1, "Terran Dropship")):
        # (Line 19) {
        # (Line 20) if(v.isInventory[getcurpl()] == 0)
        if EUDIf()(v.isInventory[f_getcurpl()] == 0):
            # (Line 21) {
            # (Line 22) v.isInventory[getcurpl()] = 1;
            _ARRW(v.isInventory, f_getcurpl()) << (1)
            # (Line 23) InvenPage[getcurpl()] = 1;
            _ARRW(InvenPage, f_getcurpl()) << (1)
            # (Line 24) InvenSlot[getcurpl()] = 1;
            _ARRW(InvenSlot, f_getcurpl()) << (1)
            # (Line 25) break;
            EUDBreak()
            # (Line 26) }
            # (Line 27) else if(v.isInventory[getcurpl()] == 1)
        if EUDElseIf()(v.isInventory[f_getcurpl()] == 1):
            # (Line 28) {
            # (Line 29) func.CloseInven();
            func.CloseInven()
            # (Line 30) break;
            EUDBreak()
            # (Line 31) }
            # (Line 32) }
        EUDEndIf()
        # (Line 34) if(v.isInventory[getcurpl()] == 1)
    EUDEndIf()
    if EUDIf()(v.isInventory[f_getcurpl()] == 1):
        # (Line 35) {
        # (Line 36) if(InvenPage[getcurpl()] == 1) num[getcurpl()] = 0;
        if EUDIf()(InvenPage[f_getcurpl()] == 1):
            _ARRW(num, f_getcurpl()) << (0)
            # (Line 37) else if(InvenPage[getcurpl()] == 2) num[getcurpl()] = 7;
        if EUDElseIf()(InvenPage[f_getcurpl()] == 2):
            _ARRW(num, f_getcurpl()) << (7)
            # (Line 38) else if(InvenPage[getcurpl()] == 3) num[getcurpl()] = 14;
        if EUDElseIf()(InvenPage[f_getcurpl()] == 3):
            _ARRW(num, f_getcurpl()) << (14)
            # (Line 40) if(Deaths(CurrentPlayer, Exactly, 2, "Terran Dropship"))
        EUDEndIf()
        if EUDIf()(Deaths(CurrentPlayer, Exactly, 2, "Terran Dropship")):
            # (Line 41) {
            # (Line 42) if(InvenPage[getcurpl()] > 1) InvenPage[getcurpl()] -= 1;
            if EUDIf()(InvenPage[f_getcurpl()] <= 1, neg=True):
                _ARRW(InvenPage, f_getcurpl()).__isub__(1)
                # (Line 43) }
            EUDEndIf()
            # (Line 44) else if(Deaths(CurrentPlayer, Exactly, 4, "Terran Dropship"))
        if EUDElseIf()(Deaths(CurrentPlayer, Exactly, 4, "Terran Dropship")):
            # (Line 45) {
            # (Line 46) if(InvenPage[getcurpl()] < 3) InvenPage[getcurpl()] += 1;
            if EUDIf()(InvenPage[f_getcurpl()] >= 3, neg=True):
                _ARRW(InvenPage, f_getcurpl()).__iadd__(1)
                # (Line 47) }//}
            EUDEndIf()
            # (Line 49) if(UseItem[getcurpl()] == 0)
        EUDEndIf()
        if EUDIf()(UseItem[f_getcurpl()] == 0):
            # (Line 50) {
            # (Line 51) s.printAt(0, "\x13\x07◀  [Z]   \x04INVENTORY [", InvenPage[getcurpl()], ' / 3 ]   \x07▶  [X]');
            s.printAt(0, "\x13\x07◀  [Z]   \x04INVENTORY [", InvenPage[f_getcurpl()], ' / 3 ]   \x07▶  [X]')
            # (Line 53) s.printAt(1, '\x13\x0f[2]  \x04', ptr2s(InvenName[21 * getcurpl() + num[getcurpl()]]), " \x04: ", InvenAmount[21 * getcurpl() + num[getcurpl()]], " \x04개");
            s.printAt(1, '\x13\x0f[2]  \x04', ptr2s(InvenName[21 * f_getcurpl() + num[f_getcurpl()]]), " \x04: ", InvenAmount[21 * f_getcurpl() + num[f_getcurpl()]], " \x04개")
            # (Line 54) s.printAt(2, '\x13\x0f[3]  \x04', ptr2s(InvenName[21 * getcurpl() + num[getcurpl()] + 1]), " \x04: ", InvenAmount[21 * getcurpl() + num[getcurpl()] + 1], " \x04개");
            s.printAt(2, '\x13\x0f[3]  \x04', ptr2s(InvenName[21 * f_getcurpl() + num[f_getcurpl()] + 1]), " \x04: ", InvenAmount[21 * f_getcurpl() + num[f_getcurpl()] + 1], " \x04개")
            # (Line 55) s.printAt(3, '\x13\x0f[4]  \x04', ptr2s(InvenName[21 * getcurpl() + num[getcurpl()] + 2]), " \x04: ", InvenAmount[21 * getcurpl() + num[getcurpl()] + 2], " \x04개");
            s.printAt(3, '\x13\x0f[4]  \x04', ptr2s(InvenName[21 * f_getcurpl() + num[f_getcurpl()] + 2]), " \x04: ", InvenAmount[21 * f_getcurpl() + num[f_getcurpl()] + 2], " \x04개")
            # (Line 56) s.printAt(4, '\x13\x0f[5]  \x04', ptr2s(InvenName[21 * getcurpl() + num[getcurpl()] + 3]), " \x04: ", InvenAmount[21 * getcurpl() + num[getcurpl()] + 3], " \x04개");
            s.printAt(4, '\x13\x0f[5]  \x04', ptr2s(InvenName[21 * f_getcurpl() + num[f_getcurpl()] + 3]), " \x04: ", InvenAmount[21 * f_getcurpl() + num[f_getcurpl()] + 3], " \x04개")
            # (Line 57) s.printAt(5, '\x13\x0f[6]  \x04', ptr2s(InvenName[21 * getcurpl() + num[getcurpl()] + 4]), " \x04: ", InvenAmount[21 * getcurpl() + num[getcurpl()] + 4], " \x04개");
            s.printAt(5, '\x13\x0f[6]  \x04', ptr2s(InvenName[21 * f_getcurpl() + num[f_getcurpl()] + 4]), " \x04: ", InvenAmount[21 * f_getcurpl() + num[f_getcurpl()] + 4], " \x04개")
            # (Line 58) s.printAt(6, '\x13\x0f[7]  \x04', ptr2s(InvenName[21 * getcurpl() + num[getcurpl()] + 5]), " \x04: ", InvenAmount[21 * getcurpl() + num[getcurpl()] + 5], " \x04개");
            s.printAt(6, '\x13\x0f[7]  \x04', ptr2s(InvenName[21 * f_getcurpl() + num[f_getcurpl()] + 5]), " \x04: ", InvenAmount[21 * f_getcurpl() + num[f_getcurpl()] + 5], " \x04개")
            # (Line 59) s.printAt(7, '\x13\x0f[8]  \x04', ptr2s(InvenName[21 * getcurpl() + num[getcurpl()] + 6]), " \x04: ", InvenAmount[21 * getcurpl() + num[getcurpl()] + 6], " \x04개");
            s.printAt(7, '\x13\x0f[8]  \x04', ptr2s(InvenName[21 * f_getcurpl() + num[f_getcurpl()] + 6]), " \x04: ", InvenAmount[21 * f_getcurpl() + num[f_getcurpl()] + 6], " \x04개")
            # (Line 61) if(Deaths(CurrentPlayer, AtLeast, 2, "Cave") && Deaths(CurrentPlayer, AtMost, 8, "Cave"))
            if EUDIf()(EUDSCAnd()(Deaths(CurrentPlayer, AtLeast, 2, "Cave"))(Deaths(CurrentPlayer, AtMost, 8, "Cave"))()):
                # (Line 62) {
                # (Line 63) func.TextClear();
                func.TextClear()
                # (Line 64) Select(dwread_epd(179 * 12 + getcurpl()) + num[getcurpl()] - 2);
                Select(f_dwread_epd(179 * 12 + f_getcurpl()) + num[f_getcurpl()] - 2)
                # (Line 65) }
                # (Line 66) }
            EUDEndIf()
            # (Line 70) switch(UseItem[getcurpl()])
        EUDEndIf()
        EUDSwitch(UseItem[f_getcurpl()])
        # (Line 71) {
        # (Line 72) case 1: // 원목
        _t14 = EUDSwitchCase()
        # (Line 73) s.printAt(0, "\x13\x16[ ", v.UnsawnTimber.name," ]");
        if _t14(1):
            s.printAt(0, "\x13\x16[ ", v.UnsawnTimber.name, " ]")
            # (Line 74) s.printAt(1, " ");
            s.printAt(1, " ")
            # (Line 75) s.printAt(2, "\x13\x0F", v.UnsawnTimber.content);
            s.printAt(2, "\x13\x0F", v.UnsawnTimber.content)
            # (Line 76) s.printAt(3, "\x13\x04수량 : ", v.ITEM_UnsawnTimber[getcurpl()]);
            s.printAt(3, "\x13\x04수량 : ", v.ITEM_UnsawnTimber[f_getcurpl()])
            # (Line 77) s.printAt(4, " ");
            s.printAt(4, " ")
            # (Line 78) s.printAt(5, "\x13\x07[2] \x04버리기");
            s.printAt(5, "\x13\x07[2] \x04버리기")
            # (Line 79) s.printAt(6, "\x13\x07[3] \x04뒤로가기");
            s.printAt(6, "\x13\x07[3] \x04뒤로가기")
            # (Line 80) if(Deaths(CurrentPlayer, Exactly, 2, "Cave")) func.RemoveItem(v.UnsawnTimber.name, 1);
            if EUDIf()(Deaths(CurrentPlayer, Exactly, 2, "Cave")):
                func.RemoveItem(v.UnsawnTimber.name, 1)
                # (Line 81) if(Deaths(CurrentPlayer, Exactly, 3, "Cave")) Back();
            EUDEndIf()
            if EUDIf()(Deaths(CurrentPlayer, Exactly, 3, "Cave")):
                Back()
                # (Line 82) break;
            EUDEndIf()
            EUDBreak()
            # (Line 83) case 2: // 목재
        _t17 = EUDSwitchCase()
        # (Line 84) s.printAt(0, "\x13\x16[ ", v.Timber.name," ]");
        if _t17(2):
            s.printAt(0, "\x13\x16[ ", v.Timber.name, " ]")
            # (Line 85) s.printAt(1, " ");
            s.printAt(1, " ")
            # (Line 86) s.printAt(2, "\x13\x0F", v.Timber.content);
            s.printAt(2, "\x13\x0F", v.Timber.content)
            # (Line 87) s.printAt(3, "\x13\x04수량 : ", v.ITEM_Timber[getcurpl()]);
            s.printAt(3, "\x13\x04수량 : ", v.ITEM_Timber[f_getcurpl()])
            # (Line 88) s.printAt(4, " ");
            s.printAt(4, " ")
            # (Line 89) s.printAt(5, "\x13\x07[2] \x04버리기");
            s.printAt(5, "\x13\x07[2] \x04버리기")
            # (Line 90) s.printAt(6, "\x13\x07[3] \x04뒤로가기");
            s.printAt(6, "\x13\x07[3] \x04뒤로가기")
            # (Line 91) if(Deaths(CurrentPlayer, Exactly, 2, "Cave")) func.RemoveItem(v.Timber.name, 1);
            if EUDIf()(Deaths(CurrentPlayer, Exactly, 2, "Cave")):
                func.RemoveItem(v.Timber.name, 1)
                # (Line 92) if(Deaths(CurrentPlayer, Exactly, 3, "Cave")) Back();
            EUDEndIf()
            if EUDIf()(Deaths(CurrentPlayer, Exactly, 3, "Cave")):
                Back()
                # (Line 93) break;
            EUDEndIf()
            EUDBreak()
            # (Line 94) case 3: // 철광석
        _t20 = EUDSwitchCase()
        # (Line 95) s.printAt(0, "\x13\x16[ ", v.IronOre.name," ]");
        if _t20(3):
            s.printAt(0, "\x13\x16[ ", v.IronOre.name, " ]")
            # (Line 96) s.printAt(1, " ");
            s.printAt(1, " ")
            # (Line 97) s.printAt(2, "\x13\x0F", v.IronOre.content);
            s.printAt(2, "\x13\x0F", v.IronOre.content)
            # (Line 98) s.printAt(3, "\x13\x04수량 : ", v.ITEM_IronOre[getcurpl()]);
            s.printAt(3, "\x13\x04수량 : ", v.ITEM_IronOre[f_getcurpl()])
            # (Line 99) s.printAt(4, " ");
            s.printAt(4, " ")
            # (Line 100) s.printAt(5, "\x13\x07[2] \x04버리기");
            s.printAt(5, "\x13\x07[2] \x04버리기")
            # (Line 101) s.printAt(6, "\x13\x07[3] \x04뒤로가기");
            s.printAt(6, "\x13\x07[3] \x04뒤로가기")
            # (Line 102) if(Deaths(CurrentPlayer, Exactly, 2, "Cave")) func.RemoveItem(v.IronOre.name, 1);
            if EUDIf()(Deaths(CurrentPlayer, Exactly, 2, "Cave")):
                func.RemoveItem(v.IronOre.name, 1)
                # (Line 103) if(Deaths(CurrentPlayer, Exactly, 3, "Cave")) Back();
            EUDEndIf()
            if EUDIf()(Deaths(CurrentPlayer, Exactly, 3, "Cave")):
                Back()
                # (Line 104) break;
            EUDEndIf()
            EUDBreak()
            # (Line 105) case 4: // HP 포션 1
        _t23 = EUDSwitchCase()
        # (Line 106) s.printAt(0, "\x13\x16[ ", v.HPPotion1.name," ]");
        if _t23(4):
            s.printAt(0, "\x13\x16[ ", v.HPPotion1.name, " ]")
            # (Line 107) s.printAt(1, " ");
            s.printAt(1, " ")
            # (Line 108) s.printAt(2, "\x13\x0F", v.HPPotion1.content);
            s.printAt(2, "\x13\x0F", v.HPPotion1.content)
            # (Line 109) s.printAt(3, "\x13\x04수량 : ", v.ITEM_HPPotion1[getcurpl()]);
            s.printAt(3, "\x13\x04수량 : ", v.ITEM_HPPotion1[f_getcurpl()])
            # (Line 110) s.printAt(4, " ");
            s.printAt(4, " ")
            # (Line 111) s.printAt(5, "\x13\x07[2] \x04버리기");
            s.printAt(5, "\x13\x07[2] \x04버리기")
            # (Line 112) s.printAt(6, "\x13\x07[3] \x04뒤로가기");
            s.printAt(6, "\x13\x07[3] \x04뒤로가기")
            # (Line 113) if(Deaths(CurrentPlayer, Exactly, 2, "Cave")) func.RemoveItem(v.HPPotion1.name, 1);
            if EUDIf()(Deaths(CurrentPlayer, Exactly, 2, "Cave")):
                func.RemoveItem(v.HPPotion1.name, 1)
                # (Line 114) if(Deaths(CurrentPlayer, Exactly, 3, "Cave")) Back();
            EUDEndIf()
            if EUDIf()(Deaths(CurrentPlayer, Exactly, 3, "Cave")):
                Back()
                # (Line 115) break;
            EUDEndIf()
            EUDBreak()
            # (Line 116) case 5: // HP 포션 2
        _t26 = EUDSwitchCase()
        # (Line 117) s.printAt(0, "\x13\x16[ ", v.HPPotion2.name," ]");
        if _t26(5):
            s.printAt(0, "\x13\x16[ ", v.HPPotion2.name, " ]")
            # (Line 118) s.printAt(1, " ");
            s.printAt(1, " ")
            # (Line 119) s.printAt(2, "\x13\x0F", v.HPPotion2.content);
            s.printAt(2, "\x13\x0F", v.HPPotion2.content)
            # (Line 120) s.printAt(3, "\x13\x04수량 : ", v.ITEM_HPPotion2[getcurpl()]);
            s.printAt(3, "\x13\x04수량 : ", v.ITEM_HPPotion2[f_getcurpl()])
            # (Line 121) s.printAt(4, " ");
            s.printAt(4, " ")
            # (Line 122) s.printAt(5, "\x13\x07[2] \x04버리기");
            s.printAt(5, "\x13\x07[2] \x04버리기")
            # (Line 123) s.printAt(6, "\x13\x07[3] \x04뒤로가기");
            s.printAt(6, "\x13\x07[3] \x04뒤로가기")
            # (Line 124) if(Deaths(CurrentPlayer, Exactly, 2, "Cave")) func.RemoveItem(v.HPPotion2.name, 1);
            if EUDIf()(Deaths(CurrentPlayer, Exactly, 2, "Cave")):
                func.RemoveItem(v.HPPotion2.name, 1)
                # (Line 125) if(Deaths(CurrentPlayer, Exactly, 3, "Cave")) Back();
            EUDEndIf()
            if EUDIf()(Deaths(CurrentPlayer, Exactly, 3, "Cave")):
                Back()
                # (Line 126) break;
            EUDEndIf()
            EUDBreak()
            # (Line 127) case 6: // HP 포션 3
        _t29 = EUDSwitchCase()
        # (Line 128) s.printAt(0, "\x13\x16[ ", v.HPPotion3.name," ]");
        if _t29(6):
            s.printAt(0, "\x13\x16[ ", v.HPPotion3.name, " ]")
            # (Line 129) s.printAt(1, " ");
            s.printAt(1, " ")
            # (Line 130) s.printAt(2, "\x13\x0F", v.HPPotion3.content);
            s.printAt(2, "\x13\x0F", v.HPPotion3.content)
            # (Line 131) s.printAt(3, "\x13\x04수량 : ", v.ITEM_HPPotion3[getcurpl()]);
            s.printAt(3, "\x13\x04수량 : ", v.ITEM_HPPotion3[f_getcurpl()])
            # (Line 132) s.printAt(4, " ");
            s.printAt(4, " ")
            # (Line 133) s.printAt(5, "\x13\x07[2] \x04버리기");
            s.printAt(5, "\x13\x07[2] \x04버리기")
            # (Line 134) s.printAt(6, "\x13\x07[3] \x04뒤로가기");
            s.printAt(6, "\x13\x07[3] \x04뒤로가기")
            # (Line 135) if(Deaths(CurrentPlayer, Exactly, 2, "Cave")) func.RemoveItem(v.HPPotion3.name, 1);
            if EUDIf()(Deaths(CurrentPlayer, Exactly, 2, "Cave")):
                func.RemoveItem(v.HPPotion3.name, 1)
                # (Line 136) if(Deaths(CurrentPlayer, Exactly, 3, "Cave")) Back();
            EUDEndIf()
            if EUDIf()(Deaths(CurrentPlayer, Exactly, 3, "Cave")):
                Back()
                # (Line 137) break;
            EUDEndIf()
            EUDBreak()
            # (Line 138) case 7: // HP 포션 4
        _t32 = EUDSwitchCase()
        # (Line 139) s.printAt(0, "\x13\x16[ ", v.HPPotion4.name," ]");
        if _t32(7):
            s.printAt(0, "\x13\x16[ ", v.HPPotion4.name, " ]")
            # (Line 140) s.printAt(1, " ");
            s.printAt(1, " ")
            # (Line 141) s.printAt(2, "\x13\x0F", v.HPPotion4.content);
            s.printAt(2, "\x13\x0F", v.HPPotion4.content)
            # (Line 142) s.printAt(3, "\x13\x04수량 : ", v.ITEM_HPPotion4[getcurpl()]);
            s.printAt(3, "\x13\x04수량 : ", v.ITEM_HPPotion4[f_getcurpl()])
            # (Line 143) s.printAt(4, " ");
            s.printAt(4, " ")
            # (Line 144) s.printAt(5, "\x13\x07[2] \x04버리기");
            s.printAt(5, "\x13\x07[2] \x04버리기")
            # (Line 145) s.printAt(6, "\x13\x07[3] \x04뒤로가기");
            s.printAt(6, "\x13\x07[3] \x04뒤로가기")
            # (Line 146) if(Deaths(CurrentPlayer, Exactly, 2, "Cave")) func.RemoveItem(v.HPPotion4.name, 1);
            if EUDIf()(Deaths(CurrentPlayer, Exactly, 2, "Cave")):
                func.RemoveItem(v.HPPotion4.name, 1)
                # (Line 147) if(Deaths(CurrentPlayer, Exactly, 3, "Cave")) Back();
            EUDEndIf()
            if EUDIf()(Deaths(CurrentPlayer, Exactly, 3, "Cave")):
                Back()
                # (Line 148) break;
            EUDEndIf()
            EUDBreak()
            # (Line 149) case 8: // HP 포션 5
        _t35 = EUDSwitchCase()
        # (Line 150) s.printAt(0, "\x13\x16[ ", v.HPPotion5.name," ]");
        if _t35(8):
            s.printAt(0, "\x13\x16[ ", v.HPPotion5.name, " ]")
            # (Line 151) s.printAt(1, " ");
            s.printAt(1, " ")
            # (Line 152) s.printAt(2, "\x13\x0F", v.HPPotion5.content);
            s.printAt(2, "\x13\x0F", v.HPPotion5.content)
            # (Line 153) s.printAt(3, "\x13\x04수량 : ", v.ITEM_HPPotion5[getcurpl()]);
            s.printAt(3, "\x13\x04수량 : ", v.ITEM_HPPotion5[f_getcurpl()])
            # (Line 154) s.printAt(4, " ");
            s.printAt(4, " ")
            # (Line 155) s.printAt(5, "\x13\x07[2] \x04버리기");
            s.printAt(5, "\x13\x07[2] \x04버리기")
            # (Line 156) s.printAt(6, "\x13\x07[3] \x04뒤로가기");
            s.printAt(6, "\x13\x07[3] \x04뒤로가기")
            # (Line 157) if(Deaths(CurrentPlayer, Exactly, 2, "Cave")) func.RemoveItem(v.HPPotion5.name, 1);
            if EUDIf()(Deaths(CurrentPlayer, Exactly, 2, "Cave")):
                func.RemoveItem(v.HPPotion5.name, 1)
                # (Line 158) if(Deaths(CurrentPlayer, Exactly, 3, "Cave")) Back();
            EUDEndIf()
            if EUDIf()(Deaths(CurrentPlayer, Exactly, 3, "Cave")):
                Back()
                # (Line 159) break;
            EUDEndIf()
            EUDBreak()
            # (Line 160) case 9: // 고블린의 이빨
        _t38 = EUDSwitchCase()
        # (Line 161) s.printAt(0, "\x13\x16[ ", v.GoblinTooth.name," ]");
        if _t38(9):
            s.printAt(0, "\x13\x16[ ", v.GoblinTooth.name, " ]")
            # (Line 162) s.printAt(1, " ");
            s.printAt(1, " ")
            # (Line 163) s.printAt(2, "\x13\x0F", v.GoblinTooth.content);
            s.printAt(2, "\x13\x0F", v.GoblinTooth.content)
            # (Line 164) s.printAt(3, "\x13\x04수량 : ", v.ITEM_GoblinTooth[getcurpl()]);
            s.printAt(3, "\x13\x04수량 : ", v.ITEM_GoblinTooth[f_getcurpl()])
            # (Line 165) s.printAt(4, " ");
            s.printAt(4, " ")
            # (Line 166) s.printAt(5, "\x13\x07[2] \x04버리기");
            s.printAt(5, "\x13\x07[2] \x04버리기")
            # (Line 167) s.printAt(6, "\x13\x07[3] \x04뒤로가기");
            s.printAt(6, "\x13\x07[3] \x04뒤로가기")
            # (Line 168) if(Deaths(CurrentPlayer, Exactly, 2, "Cave")) func.RemoveItem(v.GoblinTooth.name, 1);
            if EUDIf()(Deaths(CurrentPlayer, Exactly, 2, "Cave")):
                func.RemoveItem(v.GoblinTooth.name, 1)
                # (Line 169) if(Deaths(CurrentPlayer, Exactly, 3, "Cave")) Back();
            EUDEndIf()
            if EUDIf()(Deaths(CurrentPlayer, Exactly, 3, "Cave")):
                Back()
                # (Line 170) break;
            EUDEndIf()
            EUDBreak()
            # (Line 171) }
        # (Line 173) }
        EUDEndSwitch()
        # (Line 175) EUDEndPlayerLoop();
    EUDEndIf()
    EUDEndPlayerLoop()
    # (Line 177) }
    # (Line 179) function Select(num) {

@EUDFunc
def Select(num_1):
    # (Line 180) if(strcmp(InvenName[21 * getcurpl() + num], v.UnsawnTimber.name) == 0) UseItem[getcurpl()] = 1;
    if EUDIf()(f_strcmp(InvenName[21 * f_getcurpl() + num_1], v.UnsawnTimber.name) == 0):
        _ARRW(UseItem, f_getcurpl()) << (1)
        # (Line 181) else if(strcmp(InvenName[21 * getcurpl() + num], v.Timber.name) == 0) UseItem[getcurpl()] = 2;
    if EUDElseIf()(f_strcmp(InvenName[21 * f_getcurpl() + num_1], v.Timber.name) == 0):
        _ARRW(UseItem, f_getcurpl()) << (2)
        # (Line 182) else if(strcmp(InvenName[21 * getcurpl() + num], v.IronOre.name) == 0) UseItem[getcurpl()] = 3;
    if EUDElseIf()(f_strcmp(InvenName[21 * f_getcurpl() + num_1], v.IronOre.name) == 0):
        _ARRW(UseItem, f_getcurpl()) << (3)
        # (Line 183) else if(strcmp(InvenName[21 * getcurpl() + num], v.HPPotion1.name) == 0) UseItem[getcurpl()] = 4;
    if EUDElseIf()(f_strcmp(InvenName[21 * f_getcurpl() + num_1], v.HPPotion1.name) == 0):
        _ARRW(UseItem, f_getcurpl()) << (4)
        # (Line 184) else if(strcmp(InvenName[21 * getcurpl() + num], v.HPPotion2.name) == 0) UseItem[getcurpl()] = 5;
    if EUDElseIf()(f_strcmp(InvenName[21 * f_getcurpl() + num_1], v.HPPotion2.name) == 0):
        _ARRW(UseItem, f_getcurpl()) << (5)
        # (Line 185) else if(strcmp(InvenName[21 * getcurpl() + num], v.HPPotion3.name) == 0) UseItem[getcurpl()] = 6;
    if EUDElseIf()(f_strcmp(InvenName[21 * f_getcurpl() + num_1], v.HPPotion3.name) == 0):
        _ARRW(UseItem, f_getcurpl()) << (6)
        # (Line 186) else if(strcmp(InvenName[21 * getcurpl() + num], v.HPPotion4.name) == 0) UseItem[getcurpl()] = 7;
    if EUDElseIf()(f_strcmp(InvenName[21 * f_getcurpl() + num_1], v.HPPotion4.name) == 0):
        _ARRW(UseItem, f_getcurpl()) << (7)
        # (Line 187) else if(strcmp(InvenName[21 * getcurpl() + num], v.HPPotion5.name) == 0) UseItem[getcurpl()] = 8;
    if EUDElseIf()(f_strcmp(InvenName[21 * f_getcurpl() + num_1], v.HPPotion5.name) == 0):
        _ARRW(UseItem, f_getcurpl()) << (8)
        # (Line 188) else if(strcmp(InvenName[21 * getcurpl() + num], v.GoblinTooth.name) == 0) UseItem[getcurpl()] = 9;
    if EUDElseIf()(f_strcmp(InvenName[21 * f_getcurpl() + num_1], v.GoblinTooth.name) == 0):
        _ARRW(UseItem, f_getcurpl()) << (9)
        # (Line 189) SetDeaths(CurrentPlayer, SetTo, 0, "Cave");
    EUDEndIf()
    # (Line 190) }
    DoActions(SetDeaths(CurrentPlayer, SetTo, 0, "Cave"))
    # (Line 191) function Back() {

@EUDFunc
def Back():
    # (Line 192) UseItem[getcurpl()] = 0;
    _ARRW(UseItem, f_getcurpl()) << (0)
    # (Line 193) func.TextClear();
    func.TextClear()
    # (Line 194) }
