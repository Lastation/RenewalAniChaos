## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Variables as v;
import Variables as v
# (Line 2) import Function as func;
import Function as func
# (Line 4) const s = StringBuffer(1000);
s = _CGFW(lambda: [StringBuffer(1000)], 1)[0]
# (Line 5) const Siz = PVariable();
Siz = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 7) function beforeTriggerExec()
# (Line 8) {
@EUDFunc
def beforeTriggerExec():
    # (Line 9) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 11) if(Deaths(CurrentPlayer, Exactly, 8, "Terran Dropship") && func.EPDBring(18, v.user_Character[getcurpl()]))
    if EUDIf()(EUDSCAnd()(Deaths(CurrentPlayer, Exactly, 8, "Terran Dropship"))(func.EPDBring(18, v.user_Character[f_getcurpl()]))()):
        # (Line 12) {
        # (Line 13) if(Siz[getcurpl()] == 0)
        if EUDIf()(Siz[f_getcurpl()] == 0):
            # (Line 14) {
            # (Line 15) Siz[getcurpl()] = 1;
            _ARRW(Siz, f_getcurpl()) << (1)
            # (Line 16) func.CloseInven();
            func.CloseInven()
            # (Line 17) }
            # (Line 18) }
        EUDEndIf()
        # (Line 20) if(Siz[getcurpl()] == 1)
    EUDEndIf()
    if EUDIf()(Siz[f_getcurpl()] == 1):
        # (Line 21) {
        # (Line 22) func.UnitStop();
        func.UnitStop()
        # (Line 23) s.printAt(0, "\x13\x1b[ 시즈 ]");
        s.printAt(0, "\x13\x1b[ 시즈 ]")
        # (Line 24) s.printAt(1, " ");
        s.printAt(1, " ")
        # (Line 25) s.printAt(2, "\x13\x1d[ 2 ] \x04구매");
        s.printAt(2, "\x13\x1d[ 2 ] \x04구매")
        # (Line 26) s.printAt(3, "\x13\x1d[ 3 ] \x04판매");
        s.printAt(3, "\x13\x1d[ 3 ] \x04판매")
        # (Line 27) s.printAt(4, "\x13\x1d[ 4 ] \x04나가기");
        s.printAt(4, "\x13\x1d[ 4 ] \x04나가기")
        # (Line 29) if(Deaths(CurrentPlayer, Exactly, 2, "Cave"))
        if EUDIf()(Deaths(CurrentPlayer, Exactly, 2, "Cave")):
            # (Line 30) {
            # (Line 31) Siz[getcurpl()] = 2;
            _ARRW(Siz, f_getcurpl()) << (2)
            # (Line 32) SetDeaths(CurrentPlayer, SetTo, 0, "Cave");
            # (Line 33) } else if(Deaths(CurrentPlayer, Exactly, 3, "Cave")) {
            DoActions(SetDeaths(CurrentPlayer, SetTo, 0, "Cave"))
        if EUDElseIf()(Deaths(CurrentPlayer, Exactly, 3, "Cave")):
            # (Line 34) Siz[getcurpl()] = 3;
            _ARRW(Siz, f_getcurpl()) << (3)
            # (Line 35) SetDeaths(CurrentPlayer, SetTo, 0, "Cave");
            # (Line 36) } else if(Deaths(CurrentPlayer, Exactly, 4, "Cave")) {
            DoActions(SetDeaths(CurrentPlayer, SetTo, 0, "Cave"))
        if EUDElseIf()(Deaths(CurrentPlayer, Exactly, 4, "Cave")):
            # (Line 37) Siz[getcurpl()] = 0;
            _ARRW(Siz, f_getcurpl()) << (0)
            # (Line 38) SetDeaths(CurrentPlayer, SetTo, 0, "Cave");
            # (Line 39) func.TextClear();
            DoActions(SetDeaths(CurrentPlayer, SetTo, 0, "Cave"))
            func.TextClear()
            # (Line 40) }
            # (Line 41) }
        EUDEndIf()
        # (Line 43) if(Siz[getcurpl()] == 2)
    EUDEndIf()
    if EUDIf()(Siz[f_getcurpl()] == 2):
        # (Line 44) {
        # (Line 45) func.UnitStop();
        func.UnitStop()
        # (Line 46) s.printAt(0, "\x13\x1b아이템 구매");
        s.printAt(0, "\x13\x1b아이템 구매")
        # (Line 47) s.printAt(1, " ");
        s.printAt(1, " ")
        # (Line 48) s.printAt(2, "\x13\x1d[ 2 ] \x04최하급 체력 물약");
        s.printAt(2, "\x13\x1d[ 2 ] \x04최하급 체력 물약")
        # (Line 49) s.printAt(3, "\x13\x1d[ 3 ] \x04하급 체력 물약");
        s.printAt(3, "\x13\x1d[ 3 ] \x04하급 체력 물약")
        # (Line 50) s.printAt(4, "\x13\x1d[ 4 ] \x04뒤로가기");
        s.printAt(4, "\x13\x1d[ 4 ] \x04뒤로가기")
        # (Line 52) if(Deaths(CurrentPlayer, Exactly, 2, "Cave"))
        if EUDIf()(Deaths(CurrentPlayer, Exactly, 2, "Cave")):
            # (Line 53) {
            # (Line 54) if(v.user_Gold[getcurpl()] >= v.HPPotion1.price)
            if EUDIf()(v.user_Gold[f_getcurpl()] >= v.HPPotion1.price):
                # (Line 55) {
                # (Line 56) v.user_Gold[getcurpl()] -= v.HPPotion1.price;
                _ARRW(v.user_Gold, f_getcurpl()).__isub__(v.HPPotion1.price)
                # (Line 57) v.user_TotalSpendGold[getcurpl()] += v.HPPotion1.price;
                _ARRW(v.user_TotalSpendGold, f_getcurpl()).__iadd__(v.HPPotion1.price)
                # (Line 58) func.AddItem(100, v.HPPotion1.name, 1);
                func.AddItem(100, v.HPPotion1.name, 1)
                # (Line 59) } else s.print("\x04골드가 부족합니다.");
            if EUDElse()():
                s.print("\x04골드가 부족합니다.")
                # (Line 60) } else if(Deaths(CurrentPlayer, Exactly, 3, "Cave")) {
            EUDEndIf()
        if EUDElseIf()(Deaths(CurrentPlayer, Exactly, 3, "Cave")):
            # (Line 61) if(v.user_Gold[getcurpl()] >= v.HPPotion2.price)
            if EUDIf()(v.user_Gold[f_getcurpl()] >= v.HPPotion2.price):
                # (Line 62) {
                # (Line 63) v.user_Gold[getcurpl()] -= v.HPPotion2.price;
                _ARRW(v.user_Gold, f_getcurpl()).__isub__(v.HPPotion2.price)
                # (Line 64) v.user_TotalSpendGold[getcurpl()] += v.HPPotion2.price;
                _ARRW(v.user_TotalSpendGold, f_getcurpl()).__iadd__(v.HPPotion2.price)
                # (Line 65) func.AddItem(100, v.HPPotion2.name, 1);
                func.AddItem(100, v.HPPotion2.name, 1)
                # (Line 66) } else s.print("\x04골드가 부족합니다.");
            if EUDElse()():
                s.print("\x04골드가 부족합니다.")
                # (Line 67) } else if(Deaths(CurrentPlayer, Exactly, 4, "Cave")) {
            EUDEndIf()
        if EUDElseIf()(Deaths(CurrentPlayer, Exactly, 4, "Cave")):
            # (Line 68) Siz[getcurpl()] = 1;
            _ARRW(Siz, f_getcurpl()) << (1)
            # (Line 69) func.TextClear();
            func.TextClear()
            # (Line 70) }
            # (Line 71) }
        EUDEndIf()
        # (Line 73) EUDEndPlayerLoop();
    EUDEndIf()
    EUDEndPlayerLoop()
    # (Line 74) }
