## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Variables as v;
import Variables as v
# (Line 3) const Logging = Db("(C) 벌목");
Logging = _CGFW(lambda: [Db("(C) 벌목")], 1)[0]
# (Line 4) const WoodProcessing = Db("(C) 가공");
WoodProcessing = _CGFW(lambda: [Db("(C) 가공")], 1)[0]
# (Line 5) const Mining = Db("(C) 채광");
Mining = _CGFW(lambda: [Db("(C) 채광")], 1)[0]
# (Line 7) const HpPotion1 = Db("\x04체력을 30 만큼 회복합니다.");
HpPotion1 = _CGFW(lambda: [Db("\x04체력을 30 만큼 회복합니다.")], 1)[0]
# (Line 8) const HpPotion2 = Db("\x04체력을 100 만큼 회복합니다.");
HpPotion2 = _CGFW(lambda: [Db("\x04체력을 100 만큼 회복합니다.")], 1)[0]
# (Line 9) const HpPotion3 = Db("\x04체력을 250 만큼 회복합니다.");
HpPotion3 = _CGFW(lambda: [Db("\x04체력을 250 만큼 회복합니다.")], 1)[0]
# (Line 10) const HpPotion4 = Db("\x04체력을 600 만큼 회복합니다.");
HpPotion4 = _CGFW(lambda: [Db("\x04체력을 600 만큼 회복합니다.")], 1)[0]
# (Line 11) const HpPotion5 = Db("\x04체력을 1000 만큼 회복합니다.");
HpPotion5 = _CGFW(lambda: [Db("\x04체력을 1000 만큼 회복합니다.")], 1)[0]
# (Line 13) const Lia01 = Db("1");
Lia01 = _CGFW(lambda: [Db("1")], 1)[0]
# (Line 15) const Village01 = Db("루헨");
Village01 = _CGFW(lambda: [Db("루헨")], 1)[0]
# (Line 16) const Village02 = Db("");
Village02 = _CGFW(lambda: [Db("")], 1)[0]
# (Line 18) const Field01 = Db("고블린 서식지");
Field01 = _CGFW(lambda: [Db("고블린 서식지")], 1)[0]
# (Line 19) const Info_Field01 = Db("권장 레벨 1 ~ 3");
Info_Field01 = _CGFW(lambda: [Db("권장 레벨 1 ~ 3")], 1)[0]
# (Line 20) const Field02 = Db("오크 서식지");
Field02 = _CGFW(lambda: [Db("오크 서식지")], 1)[0]
# (Line 21) const Info_Field02 = Db("권장 레벨 3 ~ 6");
Info_Field02 = _CGFW(lambda: [Db("권장 레벨 3 ~ 6")], 1)[0]
# (Line 22) const Field03 = Db("오크 서식지");
Field03 = _CGFW(lambda: [Db("오크 서식지")], 1)[0]
# (Line 23) const Info_Field03 = Db("권장 레벨 3 ~ 6");
Info_Field03 = _CGFW(lambda: [Db("권장 레벨 3 ~ 6")], 1)[0]
