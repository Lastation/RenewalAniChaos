import Variables as v;
import Inventory as inv;
import String as string;
import timeline as tL;
import Crafting as cr;
import Function as func;
import String as str;
import SCArchive as sca;

const s = StringBuffer(1000);

function onPluginStart() {
	sca.Init();
	
	v.user_Loc[0] = $L("Player 1");
	v.user_Loc[1] = $L("Player 2");
	v.user_Loc[3] = $L("Player 3");
	v.user_Loc[4] = $L("Player 4");
	v.user_Loc[5] = $L("Player 5");
	v.user_Loc[6] = $L("Player 6");
	
	KillUnit("Zerg Scourge", P1);
	
	EUDPlayerLoop()();
		//func.CreateCharacter();
		// 인벤토리 초기화 {
		for(var i = 0; i < v.MaxInven; i++)
	    {
	    	if(getcurpl() < 6)
			{
				inv.InvenName[21 * getcurpl() + i] = Db("-");
				inv.InvenAmount[21 * getcurpl() + i] = 0;
			}
	    }
	    //}
	    // 동맹 {
	    if(getcurpl() < 7)
	    {
	    	SetAllianceStatus(P1, Ally);
		    SetAllianceStatus(P2, Ally);
		    SetAllianceStatus(P3, Ally);
		    SetAllianceStatus(P4, Ally);
		    SetAllianceStatus(P5, Ally);
		    SetAllianceStatus(P6, Ally);
		    SetAllianceStatus(P7, Ally);
	    }
	    else if(getcurpl() == 7)
	    {
	   		SetAllianceStatus(P1, Enemy);
		    SetAllianceStatus(P2, Enemy);
		    SetAllianceStatus(P3, Enemy);
		    SetAllianceStatus(P4, Enemy);
		    SetAllianceStatus(P5, Enemy);
		    SetAllianceStatus(P6, Enemy);
		    SetAllianceStatus(P7, Enemy);
	    }//}
  	EUDEndPlayerLoop();
  
  	
  
	dwwrite(0x65FD00 + 9808 + 156 * 4, 10); // 파일런 체력
}

function beforeTriggerExec() {
	sca.Exec();
	
	// tbl {
		settbl2(1303, 8, "\x0D\x0D\x0D\x0D\x0D\x0D");
		settbl2(1303, 8, v.user_Exp[0]);
		settbl2(1303, 19, "\x0D\x0D\x0D\x0D\x0D\x0D");
		settbl2(1303, 19, v.MaxExp[v.user_Level[0] - 1]);
		EUDPlayerLoop()();
			if(getcurpl() < 6) bwrite_epd(v.user_Character[getcurpl()] + 0x08F / 4,  0x08F % 4, v.user_Level[getcurpl()]);
		EUDEndPlayerLoop();
	//}
	/*// 불러오기 {
	EUDPlayerLoop()();
		if(sca.ConnectStatus() == 1 && v.LoadState[getcurpl()] == 0)
		{
			sca.ResetLastMessage();
			sca.LoadData(0);
			v.LoadState[getcurpl()] = 1;
		}
		if(sca.GetLastMessage() == 4 && v.LoadState[getcurpl()] == 1)
		{
			sca.ResetLastMessage();
			v.LoadState[getcurpl()] = 2;
			if(v.ITEM_UnsawnTimber[getcurpl()] > 0)
			{
				v.LoadItem[getcurpl()] = 1;
				func.AddItem(100, v.UnsawnTimber.name, v.ITEM_UnsawnTimber[getcurpl()]);
			}
		}
	EUDEndPlayerLoop();
	//}*/
	// 홀드, 인벤토리 {
	EUDPlayerLoop()();
    	if(v.isHold[getcurpl()] == 1) func.UnitStop();
	EUDEndPlayerLoop();
	//}
	// 플레이어 로케이션 {
	if(v.isSurvive[0] == 1) MoveLocation("Player 1", "Terran Marine", P1, "Anywhere"); 
	//}
	// 플레이어 화면이동 {
	EUDPlayerLoop()();
		if(Deaths(CurrentPlayer, Exactly, 64, "Zerg Overlord") && v.isSurvive[getcurpl()] == 1)
   		{
   			if(getcurpl() == 0) CenterView("Player 1");
   			else if(getcurpl() == 1) CenterView("Player 2");
   			else if(getcurpl() == 2) CenterView("Player 3");
   			else if(getcurpl() == 3) CenterView("Player 4");
   			else if(getcurpl() == 4) CenterView("Player 5");
   			else if(getcurpl() == 5) CenterView("Player 6");
   		}
   	EUDEndPlayerLoop();
	//}
	// 채집 {
		// 나무 생성 {
			foreach(t : tL.Timeline(48))
			{
				if(t == 47)
				{
					var ran;
					ran = (dwrand() % 19) + 1;
					switch(ran)
					{
						case 1:
							setloc(15, 214, 748); // CreateTree 로케이션 16
							break;
						case 2:
							setloc(15, 423, 1042);
							break;
						case 3:
							setloc(15, 287, 1212);
							break;
						case 4:
							setloc(15, 404, 1251);
							break;
						case 5:
							setloc(15, 507, 1121);
							break;
						case 6:
							setloc(15, 360, 1535);
							break;
						case 7:
							setloc(15, 375, 1724);
							break;
						case 8:
							setloc(15, 554, 1698);
							break;
						case 9:
							setloc(15, 734, 1796);
							break;
						case 10:
							setloc(15, 735, 1472);
							break;
						case 11:
							setloc(15, 1136, 919);
							break;
						case 12:
							setloc(15, 1041, 757);
							break;
						case 13:
							setloc(15, 966, 904);
							break;
						case 14:
							setloc(15, 977, 1052);
							break;
						case 15:
							setloc(15, 1105, 1118);
							break;
						case 16:
							setloc(15, 1131, 1202);
							break;
						case 17:
							setloc(15, 1376, 1130);
							break;
						case 18:
							setloc(15, 1510, 993);
							break;
						case 19:
							setloc(15, 1393, 860);
							break;
					}
					// 나무(오버러드) 스프라이트 변경
					ran = (dwrand() % 5) + 1;
					switch(ran)
					{
						case 1:
							wwrite(0x665AC0 + 1696 + 153 * 2, 634);
							break;
						case 2:
							wwrite(0x665AC0 + 1696 + 153 * 2, 626);
							break;
						case 3:
							wwrite(0x665AC0 + 1696 + 153 * 2, 628);
							break;
						case 4:
							wwrite(0x665AC0 + 1696 + 153 * 2, 630);
							break;
						case 5:
							wwrite(0x665AC0 + 1696 + 153 * 2, 624);
							break;
					}
					if(Bring(P7, Exactly, 0, "Zerg Overlord", "CreateTree"))
						CreateUnit(1, "Zerg Overlord", "CreateTree", P7);
				}
			}
		//}
		/*// 철광석 생성 {
			foreach(t : tL.Timeline(24))
			{
				if(t == 23)
				{
					var ran;
					ran = dwrand() % 100;
					if(ran < 20)
					{
						ran = (dwrand() % 2) + 1;
						switch(ran)
						{
							case 1: 
								setloc(16, 327, 1425); // CreateIron 로케이션 17
								break;
							case 2: 
								setloc(16, 274, 1215);
								break;
						}
						if(Bring(P7, Exactly, 0, "Zerg Queen", "CreateIron"))
						{
							CreateUnit(1, "Zerg Queen", "CreateIron", P7);
						}
					}
				}
			}
		//}*/
		EUDPlayerLoop()();
			// 원목 {
			if(v.Crafting[getcurpl()] == 1) cr.Crafting(v.UnsawnTimber.name);
			if(Bring(P7, AtLeast, 1, "Zerg Overlord", v.user_Loc[getcurpl()] + 1))
			{	
				//s.printAt(10, "\x13\x07", str.Logging);
				if(v.ITEM_UnsawnTimber[getcurpl()] == v.MaxUnsawnTimber) s.printAt(9, "\x13\x04더이상 획득할 수 없습니다.");
				else {
					s.printAt(9, " ");
					s.printAt(10, "\x13\x1f ", str.Logging);
				}
				if(Bring(CurrentPlayer, Exactly, 0, "Vulture Spider Mine", "mine 1"))
					CreateUnit(1, "Vulture Spider Mine", "mine 1", CurrentPlayer);
	
				if(Deaths(CurrentPlayer, Exactly, 8, "Terran Dropship") && v.Crafting[getcurpl()] == 0 && v.ITEM_UnsawnTimber[getcurpl()] < v.MaxUnsawnTimber)
				{
					v.Crafting[getcurpl()] = 1;
				} 
			} 
			if(Bring(P7, Exactly, 0, "Zerg Overlord", v.user_Loc[getcurpl()] + 1))
			{
				if(Bring(CurrentPlayer, Exactly, 1, "Vulture Spider Mine", "mine 1"))
				{
					func.TextClear2();
				}
			}
			//}
			// 목재 {
			if(v.Crafting[getcurpl()] == 2) cr.Crafting(v.Timber.name);
			if(func.EPDBring(13, v.user_Character[getcurpl()]))
			{
				if(v.ITEM_Timber[getcurpl()] == (v.MaxTimber - 1)) s.printAt(9, "\x13\x04더이상 획득할 수 없습니다.");
				else {
					s.printAt(8, " ");
					s.printAt(9, "\x13\x04원목 1 > 목재 2");
					s.printAt(10, "\x13\x1f", str.WoodProcessing);
				}
				
				if(Bring(CurrentPlayer, Exactly, 0, "Vulture Spider Mine", "mine 1"))
				{
					CreateUnit(2, "Vulture Spider Mine", "mine 1", CurrentPlayer);
				}
				
				if(v.ITEM_UnsawnTimber[getcurpl()] > 0)
				{
					if(Deaths(CurrentPlayer, Exactly, 8, "Terran Dropship") && v.Crafting[getcurpl()] == 0 && v.ITEM_UnsawnTimber[getcurpl()] > 0 && v.ITEM_Timber[getcurpl()] < (v.MaxTimber - 1)) 
					{
						func.RemoveItem(v.UnsawnTimber.name, 1);
						v.Crafting[getcurpl()] = 2;
					}
				}
			}
			if(Bring(CurrentPlayer, Exactly, 0, "(any unit)", "Sawmill"))
			{
				if(Bring(CurrentPlayer, Exactly, 2, "Vulture Spider Mine", "mine 1"))
				{
					func.TextClear();
					RemoveUnitAt(2, "Vulture Spider Mine", "mine 1", CurrentPlayer);
				}
			}
			//}
			// 철광석 {
			if(v.Crafting[getcurpl()] == 3) cr.Crafting(v.IronOre.name);
			if(Bring(P7, AtLeast, 1, "Zerg Queen", v.user_Loc[getcurpl()] + 1))
			{
				if(v.ITEM_IronOre[getcurpl()] == v.MaxIronOre) s.printAt(9, "\x13\x04더이상 획득할 수 없습니다.");
				else {
					s.printAt(9, " ");
					s.printAt(10, "\x13\x1f", str.Mining);
				}
				if(Bring(CurrentPlayer, Exactly, 0, "Vulture Spider Mine", "mine 1"))
				{
					CreateUnit(3, "Vulture Spider Mine", "mine 1", CurrentPlayer);
				}
				//s.printAt(10, "\x13\x07", str.Mining);
				
				if(Deaths(CurrentPlayer, Exactly, 8, "Terran Dropship") && v.Crafting[getcurpl()] == 0 && v.ITEM_IronOre[getcurpl()] < v.MaxIronOre) 
				{
					v.Crafting[getcurpl()] = 3;
				}
			}
			if(Bring(P7, Exactly, 0, "Zerg Queen", v.user_Loc[getcurpl()] + 1))
			{
				if(Bring(CurrentPlayer, Exactly, 3, "Vulture Spider Mine", "mine 1"))
				{
					func.TextClear();
					RemoveUnitAt(3, "Vulture Spider Mine", "mine 1", CurrentPlayer);
				}
			}
			//}
		EUDEndPlayerLoop();
	//}
	// 레벨 {
	if(getcurpl() < 6)
	{
		if(v.user_Level[getcurpl()] < v.MaxLevel && v.user_Exp[getcurpl()] >= v.MaxExp[v.user_Level[getcurpl()] - 1])
		{
			v.user_Exp[getcurpl()] -= v.MaxExp[v.user_Level[getcurpl()] - 1];
			v.user_Level[getcurpl()] += 1;
			v.user_LevelUpCount[getcurpl()] += 7;
			func.Heal();
		}
	}
	//}
	// 마나 {
	EUDPlayerLoop()();
		if(v.user_MpRecoverTimer[getcurpl()] == 0)
		{
			if(v.user_Mp[getcurpl()] < v.user_MaxMp[getcurpl()])
			{
				v.user_Mp[getcurpl()] += 1;
				v.user_MpRecoverTimer[getcurpl()] = v.user_MpRecovery[getcurpl()];
			}
		}
		else v.user_MpRecoverTimer[getcurpl()] -= 1;
	EUDEndPlayerLoop();
	//}
	/*// 캠무브 {
	EUDPlayerLoop()();
		if(v.isSurvive[getcurpl()] == 1)
		{	
			if(Switch("cammove", Cleared)) 
			{
				SetSwitch("cammove", Set);
			}
			else MoveLocation("pTrace", "Vulture Spider Mine", CurrentPlayer, v.user_Loc[getcurpl()] + 1);
		}
	EUDEndPlayerLoop();
	//}*/
	
	const GameSpeed = 12;
	SetMemory(0x5124F0, SetTo, GameSpeed); // 배속
}

