## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Main as main;
import Main as main
# (Line 2) import Variable as v;
import Variable as v
# (Line 4) const s = StringBuffer(1000);
s = _CGFW(lambda: [StringBuffer(1000)], 1)[0]
# (Line 5) const num = PVariable();
num = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 6) const page = PVariable();
page = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 8) function ResetInventory();
# (Line 9) function OpenInventory();
# (Line 10) function CloseInventory();
# (Line 11) function ShowInventory();
# (Line 13) function ResetInventory()
# (Line 14) {
@EUDFunc
def ResetInventory():
    # (Line 15) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 21) s.print("\x04인벤토리 초기화 완료");
    s.print("\x04인벤토리 초기화 완료")
    # (Line 22) }
    # (Line 24) function OpenInventory()

# (Line 25) {
@EUDFunc
def OpenInventory():
    # (Line 26) main.inv[getcurpl()] = 1;
    _ARRW(main.inv, f_getcurpl()) << (1)
    # (Line 27) }
    # (Line 29) function CloseInventory()

# (Line 30) {
@EUDFunc
def CloseInventory():
    # (Line 31) main.inv[getcurpl()] = 0;
    _ARRW(main.inv, f_getcurpl()) << (0)
    # (Line 32) s.print("\n\n\n\n\n\n\n\n");
    s.print("\n\n\n\n\n\n\n\n")
    # (Line 33) }
    # (Line 35) function ShowInventory()

# (Line 36) {
@EUDFunc
def ShowInventory():
    # (Line 37) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 60) }
