## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Item.ETC as etc;
from Item import ETC as etc
# (Line 2) import Variable as v;
import Variable as v
# (Line 4) const s = StringBuffer(1000);
s = _CGFW(lambda: [StringBuffer(1000)], 1)[0]
# (Line 6) function AddItem(percent, name, amount);
# (Line 7) function PrintGetItem(name, amount);
# (Line 9) function AddItem(percent, name, amount)
# (Line 10) {
@EUDTracedFunc
def AddItem(percent, name, amount):
    # (Line 11) const cp = getcurpl();
    EUDTraceLog(11)
    cp = f_getcurpl()
    # (Line 12) const m = v.maxInventorySlot;
    EUDTraceLog(12)
    m = v.maxInventorySlot
    # (Line 14) for(var i = 0; i < m; i++)
    EUDTraceLog(14)
    i = EUDVariable()
    i << (0)
    _t1 = EUDWhile()
    EUDTraceLog(14)
    if _t1(i >= m, neg=True):
        def _t2():
            EUDTraceLog(14)
            i.__iadd__(1)
        # (Line 15) {
        # (Line 16) if(strcmp(name, v.nameInventory[m * cp + i]) == 0)
        _t3 = EUDIf()
        EUDTraceLog(16)
        if _t3(f_strcmp(name, v.nameInventory[m * cp + i]) == 0):
            # (Line 17) {
            # (Line 18) v.amountInventory[m * cp + i] += amount;
            EUDTraceLog(18)
            _ARRW(v.amountInventory, m * cp + i).__iadd__(amount)
            # (Line 20) return;
            EUDTraceLog(20)
            EUDReturn()
            # (Line 21) }
            # (Line 22) }
        EUDEndIf()
        # (Line 24) for(var i = 0; i < m; i++)
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    EUDTraceLog(24)
    i = EUDVariable()
    i << (0)
    _t4 = EUDWhile()
    EUDTraceLog(24)
    if _t4(i >= m, neg=True):
        def _t5():
            EUDTraceLog(24)
            i.__iadd__(1)
        # (Line 25) {
        # (Line 26) if(v.amountInventory[m * cp + i] == 0)
        _t6 = EUDIf()
        EUDTraceLog(26)
        if _t6(v.amountInventory[m * cp + i] == 0):
            # (Line 27) {
            # (Line 28) v.nameInventory[m * cp + i] = name;
            EUDTraceLog(28)
            _ARRW(v.nameInventory, m * cp + i) << (name)
            # (Line 29) v.amountInventory[m * cp + i] = amount;
            EUDTraceLog(29)
            _ARRW(v.amountInventory, m * cp + i) << (amount)
            # (Line 34) switch(name)
            EUDTraceLog(34)
            EUDSwitch(name)
            # (Line 35) {
            # (Line 36) case etc.itemUnsawnTimber.name:
            _t7 = EUDSwitchCase()
            # (Line 37) etc.UnsawnTimber[cp] += amount;
            EUDTraceLog(36)
            if _t7(etc.itemUnsawnTimber.name):
                EUDTraceLog(37)
                _ARRW(etc.UnsawnTimber, cp).__iadd__(amount)
                # (Line 38) break;
                EUDTraceLog(38)
                EUDBreak()
                # (Line 39) }
            # (Line 40) s.print(etc.UnsawnTimber[cp]);
            EUDEndSwitch()
            EUDTraceLog(40)
            s.print(etc.UnsawnTimber[cp])
            # (Line 41) PrintGetItem(name, amount);
            EUDTraceLog(41)
            PrintGetItem(name, amount)
            # (Line 42) return;
            EUDTraceLog(42)
            EUDReturn()
            # (Line 43) }
            # (Line 44) else s.print("\x17◈ \x04인벤토리가 가득 찼습니다.");
        if EUDElse()():
            EUDTraceLog(44)
            s.print("\x17◈ \x04인벤토리가 가득 찼습니다.")
            # (Line 45) }
        EUDEndIf()
        # (Line 46) }
        EUDSetContinuePoint()
        _t5()
    EUDEndWhile()
    # (Line 48) function PrintGetItem(name, amount)

# (Line 49) {
@EUDTracedFunc
def PrintGetItem(name, amount):
    # (Line 51) s.print("\x0E◈ \x17", ptr2s(name), " \x04+ ", amount);
    EUDTraceLog(51)
    s.print("\x0E◈ \x17", ptr2s(name), " \x04+ ", amount)
    # (Line 52) }
