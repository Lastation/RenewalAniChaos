## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) var spawnLocGoblin 		= 0;
spawnLocGoblin = EUDCreateVariables(1)
_IGVA([spawnLocGoblin], lambda: [0])
# (Line 2) var spawnLocBiter 		= 0;
spawnLocBiter = EUDCreateVariables(1)
_IGVA([spawnLocBiter], lambda: [0])
# (Line 3) var spawnLocOrc 		= 0;
spawnLocOrc = EUDCreateVariables(1)
_IGVA([spawnLocOrc], lambda: [0])
# (Line 4) var spawnLocLamia 		= 0;
spawnLocLamia = EUDCreateVariables(1)
_IGVA([spawnLocLamia], lambda: [0])
# (Line 5) var spawnLocFang 		= 0;
spawnLocFang = EUDCreateVariables(1)
_IGVA([spawnLocFang], lambda: [0])
# (Line 6) var spawnLocOger 		= 0;
spawnLocOger = EUDCreateVariables(1)
_IGVA([spawnLocOger], lambda: [0])
# (Line 7) var spawnLocSkeleton 	= 0;
spawnLocSkeleton = EUDCreateVariables(1)
_IGVA([spawnLocSkeleton], lambda: [0])
# (Line 8) var spawnLocLIch 		= 0;
spawnLocLIch = EUDCreateVariables(1)
_IGVA([spawnLocLIch], lambda: [0])
# (Line 10) const locGoblinX 	= EUDArray(10);
locGoblinX = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 11) const locGoblinY 	= EUDArray(10);
locGoblinY = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 12) const locBiterX 	= EUDArray(10);
locBiterX = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 13) const locBiterY 	= EUDArray(10);
locBiterY = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 14) const locLamiaX 	= EUDArray(10);
locLamiaX = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 15) const locLamiaY 	= EUDArray(10);
locLamiaY = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 16) const locOrcX 		= EUDArray(10);
locOrcX = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 17) const locOrcY 		= EUDArray(10);
locOrcY = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 18) const locFangX 		= EUDArray(10);
locFangX = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 19) const locFangY 		= EUDArray(10);
locFangY = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 20) const locOgerX 		= EUDArray(10);
locOgerX = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 21) const locOgerY 		= EUDArray(10);
locOgerY = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 22) const locSkeletonX 	= EUDArray(10);
locSkeletonX = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 23) const locSkeletonY 	= EUDArray(10);
locSkeletonY = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 24) const locLichX 		= EUDArray(10);
locLichX = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 25) const locLichY	 	= EUDArray(10);
locLichY = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 27) var temp = 0;
temp = EUDCreateVariables(1)
_IGVA([temp], lambda: [0])
# (Line 29) function MobSpawnLocationCheck()
# (Line 30) {
@EUDTracedFunc
def MobSpawnLocationCheck():
    # (Line 32) temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Zerg Drone", "Anywhere")'));
    EUDTraceLog(32)
    temp << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "Zerg Drone", "Anywhere")')))
    # (Line 33) SetVariables(spawnLocGoblin, temp);
    EUDTraceLog(33)
    SetVariables(spawnLocGoblin, temp)
    # (Line 35) temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Zerg Broodling", "Anywhere")'));
    EUDTraceLog(35)
    temp << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "Zerg Broodling", "Anywhere")')))
    # (Line 36) SetVariables(spawnLocBiter, temp);
    EUDTraceLog(36)
    SetVariables(spawnLocBiter, temp)
    # (Line 38) temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Zerg Zergling", "Anywhere")'));
    EUDTraceLog(38)
    temp << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "Zerg Zergling", "Anywhere")')))
    # (Line 39) SetVariables(spawnLocOrc, temp);
    EUDTraceLog(39)
    SetVariables(spawnLocOrc, temp)
    # (Line 41) temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Zerg Hydralisk", "Anywhere")'));
    EUDTraceLog(41)
    temp << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "Zerg Hydralisk", "Anywhere")')))
    # (Line 42) SetVariables(spawnLocLamia, temp);
    EUDTraceLog(42)
    SetVariables(spawnLocLamia, temp)
    # (Line 44) temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Zerg Defiler", "Anywhere")'));
    EUDTraceLog(44)
    temp << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "Zerg Defiler", "Anywhere")')))
    # (Line 45) SetVariables(spawnLocFang, temp);
    EUDTraceLog(45)
    SetVariables(spawnLocFang, temp)
    # (Line 47) temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Devouring One (Zergling)", "Anywhere")'));
    EUDTraceLog(47)
    temp << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "Devouring One (Zergling)", "Anywhere")')))
    # (Line 48) SetVariables(spawnLocOger, temp);
    EUDTraceLog(48)
    SetVariables(spawnLocOger, temp)
    # (Line 50) temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Protoss Zealot", "Anywhere")'));
    EUDTraceLog(50)
    temp << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "Protoss Zealot", "Anywhere")')))
    # (Line 51) SetVariables(spawnLocSkeleton, temp);
    EUDTraceLog(51)
    SetVariables(spawnLocSkeleton, temp)
    # (Line 53) temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Protoss High Templar", "Anywhere")'));
    EUDTraceLog(53)
    temp << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "Protoss High Templar", "Anywhere")')))
    # (Line 54) SetVariables(spawnLocLIch, temp);
    EUDTraceLog(54)
    SetVariables(spawnLocLIch, temp)
    # (Line 56) for(var i = 0; i < spawnLocGoblin; i++)
    EUDTraceLog(56)
    i = EUDVariable()
    i << (0)
    _t1 = EUDWhile()
    EUDTraceLog(56)
    if _t1(i >= spawnLocGoblin, neg=True):
        def _t2():
            EUDTraceLog(56)
            i.__iadd__(1)
        # (Line 57) {
        # (Line 58) if(Bring(P7, Exactly, 0, "Zerg Drone", "Anywhere")) break;
        _t3 = EUDIf()
        EUDTraceLog(58)
        if _t3(Bring(P7, Exactly, 0, "Zerg Drone", "Anywhere")):
            EUDTraceLog(58)
            EUDBreak()
            # (Line 59) MoveLocation("CreateMonster", "Zerg Drone", P7, "Anywhere");
        EUDEndIf()
        # (Line 60) RemoveUnitAt(1, "Zerg Drone", "CreateMonster", P7);
        EUDTraceLog(59)
        DoActions(MoveLocation("CreateMonster", "Zerg Drone", P7, "Anywhere"))
        # (Line 62) var left = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 0);
        EUDTraceLog(60)
        DoActions(RemoveUnitAt(1, "Zerg Drone", "CreateMonster", P7))
        EUDTraceLog(62)
        left = EUDVariable()
        left << (f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 0))
        # (Line 63) var up = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 1);
        EUDTraceLog(63)
        up = EUDVariable()
        up << (f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 1))
        # (Line 64) var right = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 2);
        EUDTraceLog(64)
        right = EUDVariable()
        right << (f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 2))
        # (Line 65) var down = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 3);
        EUDTraceLog(65)
        down = EUDVariable()
        down << (f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 3))
        # (Line 67) locGoblinX[i] = (left + right) / 2;
        EUDTraceLog(67)
        _ARRW(locGoblinX, i) << ((left + right) // 2)
        # (Line 68) locGoblinY[i] = (up + down) / 2;
        EUDTraceLog(68)
        _ARRW(locGoblinY, i) << ((up + down) // 2)
        # (Line 69) }
        # (Line 71) for(var i = 0; i < spawnLocBiter; i++)
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    EUDTraceLog(71)
    i = EUDVariable()
    i << (0)
    _t4 = EUDWhile()
    EUDTraceLog(71)
    if _t4(i >= spawnLocBiter, neg=True):
        def _t5():
            EUDTraceLog(71)
            i.__iadd__(1)
        # (Line 72) {
        # (Line 73) if(Bring(P7, Exactly, 0, "Zerg Broodling", "Anywhere")) break;
        _t6 = EUDIf()
        EUDTraceLog(73)
        if _t6(Bring(P7, Exactly, 0, "Zerg Broodling", "Anywhere")):
            EUDTraceLog(73)
            EUDBreak()
            # (Line 74) MoveLocation("CreateMonster", "Zerg Broodling", P7, "Anywhere");
        EUDEndIf()
        # (Line 75) RemoveUnitAt(1, "Zerg Broodling", "CreateMonster", P7);
        EUDTraceLog(74)
        DoActions(MoveLocation("CreateMonster", "Zerg Broodling", P7, "Anywhere"))
        # (Line 77) const left = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 0);
        EUDTraceLog(75)
        DoActions(RemoveUnitAt(1, "Zerg Broodling", "CreateMonster", P7))
        EUDTraceLog(77)
        left = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 0)
        # (Line 78) const up = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 1);
        EUDTraceLog(78)
        up = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 1)
        # (Line 79) const right = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 2);
        EUDTraceLog(79)
        right = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 2)
        # (Line 80) const down = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 3);
        EUDTraceLog(80)
        down = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 3)
        # (Line 82) locBiterX[i] = (left + right) / 2;
        EUDTraceLog(82)
        _ARRW(locBiterX, i) << ((left + right) // 2)
        # (Line 83) locBiterY[i] = (up + down) / 2;
        EUDTraceLog(83)
        _ARRW(locBiterY, i) << ((up + down) // 2)
        # (Line 84) }
        # (Line 86) for(var i = 0; i < spawnLocOrc; i++)
        EUDSetContinuePoint()
        _t5()
    EUDEndWhile()
    EUDTraceLog(86)
    i = EUDVariable()
    i << (0)
    _t7 = EUDWhile()
    EUDTraceLog(86)
    if _t7(i >= spawnLocOrc, neg=True):
        def _t8():
            EUDTraceLog(86)
            i.__iadd__(1)
        # (Line 87) {
        # (Line 88) if(Bring(P7, Exactly, 0, "Zerg Zergling", "Anywhere")) break;
        _t9 = EUDIf()
        EUDTraceLog(88)
        if _t9(Bring(P7, Exactly, 0, "Zerg Zergling", "Anywhere")):
            EUDTraceLog(88)
            EUDBreak()
            # (Line 89) MoveLocation("CreateMonster", "Zerg Zergling", P7, "Anywhere");
        EUDEndIf()
        # (Line 90) RemoveUnitAt(1, "Zerg Zergling", "CreateMonster", P7);
        EUDTraceLog(89)
        DoActions(MoveLocation("CreateMonster", "Zerg Zergling", P7, "Anywhere"))
        # (Line 92) const left = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 0);
        EUDTraceLog(90)
        DoActions(RemoveUnitAt(1, "Zerg Zergling", "CreateMonster", P7))
        EUDTraceLog(92)
        left = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 0)
        # (Line 93) const up = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 1);
        EUDTraceLog(93)
        up = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 1)
        # (Line 94) const right = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 2);
        EUDTraceLog(94)
        right = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 2)
        # (Line 95) const down = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 3);
        EUDTraceLog(95)
        down = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 3)
        # (Line 97) locOrcX[i] = (left + right) / 2;
        EUDTraceLog(97)
        _ARRW(locOrcX, i) << ((left + right) // 2)
        # (Line 98) locOrcY[i] = (up + down) / 2;
        EUDTraceLog(98)
        _ARRW(locOrcY, i) << ((up + down) // 2)
        # (Line 99) }
        # (Line 101) for(var i = 0; i < spawnLocLamia; i++)
        EUDSetContinuePoint()
        _t8()
    EUDEndWhile()
    EUDTraceLog(101)
    i = EUDVariable()
    i << (0)
    _t10 = EUDWhile()
    EUDTraceLog(101)
    if _t10(i >= spawnLocLamia, neg=True):
        def _t11():
            EUDTraceLog(101)
            i.__iadd__(1)
        # (Line 102) {
        # (Line 103) if(Bring(P7, Exactly, 0, "Zerg Hydralisk", "Anywhere")) break;
        _t12 = EUDIf()
        EUDTraceLog(103)
        if _t12(Bring(P7, Exactly, 0, "Zerg Hydralisk", "Anywhere")):
            EUDTraceLog(103)
            EUDBreak()
            # (Line 104) MoveLocation("CreateMonster", "Zerg Hydralisk", P7, "Anywhere");
        EUDEndIf()
        # (Line 105) RemoveUnitAt(1, "Zerg Hydralisk", "CreateMonster", P7);
        EUDTraceLog(104)
        DoActions(MoveLocation("CreateMonster", "Zerg Hydralisk", P7, "Anywhere"))
        # (Line 107) const left = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 0);
        EUDTraceLog(105)
        DoActions(RemoveUnitAt(1, "Zerg Hydralisk", "CreateMonster", P7))
        EUDTraceLog(107)
        left = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 0)
        # (Line 108) const up = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 1);
        EUDTraceLog(108)
        up = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 1)
        # (Line 109) const right = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 2);
        EUDTraceLog(109)
        right = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 2)
        # (Line 110) const down = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 3);
        EUDTraceLog(110)
        down = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 3)
        # (Line 112) locLamiaX[i] = (left + right) / 2;
        EUDTraceLog(112)
        _ARRW(locLamiaX, i) << ((left + right) // 2)
        # (Line 113) locLamiaY[i] = (up + down) / 2;
        EUDTraceLog(113)
        _ARRW(locLamiaY, i) << ((up + down) // 2)
        # (Line 114) }
        # (Line 116) for(var i = 0; i < spawnLocFang; i++)
        EUDSetContinuePoint()
        _t11()
    EUDEndWhile()
    EUDTraceLog(116)
    i = EUDVariable()
    i << (0)
    _t13 = EUDWhile()
    EUDTraceLog(116)
    if _t13(i >= spawnLocFang, neg=True):
        def _t14():
            EUDTraceLog(116)
            i.__iadd__(1)
        # (Line 117) {
        # (Line 118) if(Bring(P7, Exactly, 0, "Zerg Defiler", "Anywhere")) break;
        _t15 = EUDIf()
        EUDTraceLog(118)
        if _t15(Bring(P7, Exactly, 0, "Zerg Defiler", "Anywhere")):
            EUDTraceLog(118)
            EUDBreak()
            # (Line 119) MoveLocation("CreateMonster", "Zerg Defiler", P7, "Anywhere");
        EUDEndIf()
        # (Line 120) RemoveUnitAt(1, "Zerg Defiler", "CreateMonster", P7);
        EUDTraceLog(119)
        DoActions(MoveLocation("CreateMonster", "Zerg Defiler", P7, "Anywhere"))
        # (Line 122) const left = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 0);
        EUDTraceLog(120)
        DoActions(RemoveUnitAt(1, "Zerg Defiler", "CreateMonster", P7))
        EUDTraceLog(122)
        left = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 0)
        # (Line 123) const up = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 1);
        EUDTraceLog(123)
        up = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 1)
        # (Line 124) const right = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 2);
        EUDTraceLog(124)
        right = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 2)
        # (Line 125) const down = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 3);
        EUDTraceLog(125)
        down = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 3)
        # (Line 127) locFangX[i] = (left + right) / 2;
        EUDTraceLog(127)
        _ARRW(locFangX, i) << ((left + right) // 2)
        # (Line 128) locFangY[i] = (up + down) / 2;
        EUDTraceLog(128)
        _ARRW(locFangY, i) << ((up + down) // 2)
        # (Line 129) }
        # (Line 131) for(var i = 0; i < spawnLocOger; i++)
        EUDSetContinuePoint()
        _t14()
    EUDEndWhile()
    EUDTraceLog(131)
    i = EUDVariable()
    i << (0)
    _t16 = EUDWhile()
    EUDTraceLog(131)
    if _t16(i >= spawnLocOger, neg=True):
        def _t17():
            EUDTraceLog(131)
            i.__iadd__(1)
        # (Line 132) {
        # (Line 133) if(Bring(P7, Exactly, 0, "Devouring One (Zergling)", "Anywhere")) break;
        _t18 = EUDIf()
        EUDTraceLog(133)
        if _t18(Bring(P7, Exactly, 0, "Devouring One (Zergling)", "Anywhere")):
            EUDTraceLog(133)
            EUDBreak()
            # (Line 134) MoveLocation("CreateMonster", "Devouring One (Zergling)", P7, "Anywhere");
        EUDEndIf()
        # (Line 135) RemoveUnitAt(1, "Devouring One (Zergling)", "CreateMonster", P7);
        EUDTraceLog(134)
        DoActions(MoveLocation("CreateMonster", "Devouring One (Zergling)", P7, "Anywhere"))
        # (Line 137) const left = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 0);
        EUDTraceLog(135)
        DoActions(RemoveUnitAt(1, "Devouring One (Zergling)", "CreateMonster", P7))
        EUDTraceLog(137)
        left = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 0)
        # (Line 138) const up = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 1);
        EUDTraceLog(138)
        up = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 1)
        # (Line 139) const right = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 2);
        EUDTraceLog(139)
        right = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 2)
        # (Line 140) const down = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 3);
        EUDTraceLog(140)
        down = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 3)
        # (Line 142) locOgerX[i] = (left + right) / 2;
        EUDTraceLog(142)
        _ARRW(locOgerX, i) << ((left + right) // 2)
        # (Line 143) locOgerY[i] = (up + down) / 2;
        EUDTraceLog(143)
        _ARRW(locOgerY, i) << ((up + down) // 2)
        # (Line 144) }
        # (Line 146) for(var i = 0; i < spawnLocSkeleton; i++)
        EUDSetContinuePoint()
        _t17()
    EUDEndWhile()
    EUDTraceLog(146)
    i = EUDVariable()
    i << (0)
    _t19 = EUDWhile()
    EUDTraceLog(146)
    if _t19(i >= spawnLocSkeleton, neg=True):
        def _t20():
            EUDTraceLog(146)
            i.__iadd__(1)
        # (Line 147) {
        # (Line 148) if(Bring(P7, Exactly, 0, "Protoss Zealot", "Anywhere")) break;
        _t21 = EUDIf()
        EUDTraceLog(148)
        if _t21(Bring(P7, Exactly, 0, "Protoss Zealot", "Anywhere")):
            EUDTraceLog(148)
            EUDBreak()
            # (Line 149) MoveLocation("CreateMonster", "Protoss Zealot", P7, "Anywhere");
        EUDEndIf()
        # (Line 150) RemoveUnitAt(1, "Protoss Zealot", "CreateMonster", P7);
        EUDTraceLog(149)
        DoActions(MoveLocation("CreateMonster", "Protoss Zealot", P7, "Anywhere"))
        # (Line 152) const left = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 0);
        EUDTraceLog(150)
        DoActions(RemoveUnitAt(1, "Protoss Zealot", "CreateMonster", P7))
        EUDTraceLog(152)
        left = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 0)
        # (Line 153) const up = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 1);
        EUDTraceLog(153)
        up = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 1)
        # (Line 154) const right = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 2);
        EUDTraceLog(154)
        right = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 2)
        # (Line 155) const down = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 3);
        EUDTraceLog(155)
        down = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 3)
        # (Line 157) locSkeletonX[i] = (left + right) / 2;
        EUDTraceLog(157)
        _ARRW(locSkeletonX, i) << ((left + right) // 2)
        # (Line 158) locSkeletonY[i] = (up + down) / 2;
        EUDTraceLog(158)
        _ARRW(locSkeletonY, i) << ((up + down) // 2)
        # (Line 159) }
        # (Line 161) for(var i = 0; i < spawnLocLIch; i++)
        EUDSetContinuePoint()
        _t20()
    EUDEndWhile()
    EUDTraceLog(161)
    i = EUDVariable()
    i << (0)
    _t22 = EUDWhile()
    EUDTraceLog(161)
    if _t22(i >= spawnLocLIch, neg=True):
        def _t23():
            EUDTraceLog(161)
            i.__iadd__(1)
        # (Line 162) {
        # (Line 163) if(Bring(P7, Exactly, 0, "Protoss High Templar", "Anywhere")) break;
        _t24 = EUDIf()
        EUDTraceLog(163)
        if _t24(Bring(P7, Exactly, 0, "Protoss High Templar", "Anywhere")):
            EUDTraceLog(163)
            EUDBreak()
            # (Line 164) MoveLocation("CreateMonster", "Protoss High Templar", P7, "Anywhere");
        EUDEndIf()
        # (Line 165) RemoveUnitAt(1, "Protoss High Templar", "CreateMonster", P7);
        EUDTraceLog(164)
        DoActions(MoveLocation("CreateMonster", "Protoss High Templar", P7, "Anywhere"))
        # (Line 167) const left = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 0);
        EUDTraceLog(165)
        DoActions(RemoveUnitAt(1, "Protoss High Templar", "CreateMonster", P7))
        EUDTraceLog(167)
        left = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 0)
        # (Line 168) const up = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 1);
        EUDTraceLog(168)
        up = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 1)
        # (Line 169) const right = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 2);
        EUDTraceLog(169)
        right = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 2)
        # (Line 170) const down = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 3);
        EUDTraceLog(170)
        down = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 3)
        # (Line 172) locLichX[i] = (left + right) / 2;
        EUDTraceLog(172)
        _ARRW(locLichX, i) << ((left + right) // 2)
        # (Line 173) locLichY[i] = (up + down) / 2;
        EUDTraceLog(173)
        _ARRW(locLichY, i) << ((up + down) // 2)
        # (Line 174) }
        # (Line 175) }
        EUDSetContinuePoint()
        _t23()
    EUDEndWhile()
