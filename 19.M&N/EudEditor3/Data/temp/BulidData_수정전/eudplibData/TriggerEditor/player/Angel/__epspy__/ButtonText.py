## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Angel.Variable as v;
from Angel import Variable as v
# (Line 3) function Init_ButtonText();
# (Line 4) function Set_Dear_ButtonText(id);
# (Line 5) function Set_Album_ButtonText(id);
# (Line 7) function Add_DearNow(id, value);
# (Line 8) function Add_AlbumNow(id, value);
# (Line 10) function Set_DearLevel(id);
# (Line 11) function Set_AlbumLevel(id);
# (Line 13) function Update_ButtomText(cp)
# (Line 14) {
@EUDFunc
def Update_ButtomText(cp):
    # (Line 15) if (Kills(cp, AtLeast, 1, "Terran Bunker"))
    if EUDIf()(Kills(cp, AtLeast, 1, "Terran Bunker")):
        # (Line 16) {
        # (Line 17) SetKills(cp, Subtract, 1, "Terran Bunker");
        # (Line 19) for (var i = 0; i < 6; i++)
        DoActions(SetKills(cp, Subtract, 1, "Terran Bunker"))
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i >= 6, neg=True):
            def _t3():
                i.__iadd__(1)
            # (Line 20) {
            # (Line 21) Add_DearNow(i, 100);
            Add_DearNow(i, 100)
            # (Line 22) Add_AlbumNow(i, 1);
            Add_AlbumNow(i, 1)
            # (Line 23) }
            # (Line 24) }
            EUDSetContinuePoint()
            _t3()
        EUDEndWhile()
        # (Line 25) }
    EUDEndIf()
    # (Line 27) function Init_ButtonText()

# (Line 28) {
@EUDFunc
def Init_ButtonText():
    # (Line 29) for (var i = 0; i < 6; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 6, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 30) {
        # (Line 31) CreateUnit(1, v.Unit_ID[i], "Player1", P1);
        # (Line 33) Set_Dear_ButtonText(i);
        DoActions(CreateUnit(1, v.Unit_ID[i], "Player1", P1))
        Set_Dear_ButtonText(i)
        # (Line 34) Set_Album_ButtonText(i);
        Set_Album_ButtonText(i)
        # (Line 35) }
        # (Line 36) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 38) function Set_Dear_ButtonText(id)

# (Line 39) {
@EUDFunc
def Set_Dear_ButtonText(id):
    # (Line 40) if (v.Dear_Level[id] < 10)
    if EUDIf()(v.Dear_Level[id] >= 10, neg=True):
        # (Line 41) {
        # (Line 42) settbl(1048 + id * 2, 10, v.Dear_Now[id], "/", v.Dear_Need[v.Dear_Level[id]],
        # (Line 43) "\n\x19", ptr2s(v.Dear_Text[id])," Lv.", v.Dear_Level[id],
        # (Line 44) "\n\x04", ptr2s(v.Dear_SubText[v.Dear_Ablity[id]]), " \x19", v.Dear_Level[id] * v.Dear_Multiply[id], ptr2s(v.Dear_EndText[v.Dear_Ablity[id]]));
        f_settbl(1048 + id * 2, 10, v.Dear_Now[id], "/", v.Dear_Need[v.Dear_Level[id]], "\n\x19", ptr2s(v.Dear_Text[id]), " Lv.", v.Dear_Level[id], "\n\x04", ptr2s(v.Dear_SubText[v.Dear_Ablity[id]]), " \x19", v.Dear_Level[id] * v.Dear_Multiply[id], ptr2s(v.Dear_EndText[v.Dear_Ablity[id]]))
        # (Line 45) }
        # (Line 46) else
        # (Line 47) {
    if EUDElse()():
        # (Line 48) settbl(1048 + id * 2, 10, v.Dear_Now[id],
        # (Line 49) "\n\x19", ptr2s(v.Dear_Text[id])," Lv. Max",
        # (Line 50) "\n\x04", ptr2s(v.Dear_SubText[v.Dear_Ablity[id]]), " \x19", v.Dear_Level[id] * v.Dear_Multiply[id], ptr2s(v.Dear_EndText[v.Dear_Ablity[id]]));
        f_settbl(1048 + id * 2, 10, v.Dear_Now[id], "\n\x19", ptr2s(v.Dear_Text[id]), " Lv. Max", "\n\x04", ptr2s(v.Dear_SubText[v.Dear_Ablity[id]]), " \x19", v.Dear_Level[id] * v.Dear_Multiply[id], ptr2s(v.Dear_EndText[v.Dear_Ablity[id]]))
        # (Line 51) }
        # (Line 52) }
    EUDEndIf()
    # (Line 54) function Set_Album_ButtonText(id)

# (Line 55) {
@EUDFunc
def Set_Album_ButtonText(id):
    # (Line 56) if (v.Album_Level[id] < 10)
    if EUDIf()(v.Album_Level[id] >= 10, neg=True):
        # (Line 57) {
        # (Line 58) settbl(1049 + id * 2, 8, v.Album_Now[id], "/", v.Album_Need[v.Album_Level[id]],
        # (Line 59) "\n\x19", ptr2s(v.Album_Text[id])," Lv.", v.Album_Level[id],
        # (Line 60) "\n\x04", ptr2s(v.Album_SubText[id]), " \x19", v.Album_Level[id] * v.Album_Multiply[id], ptr2s(v.Album_EndText[v.Album_Ablity[id]]));
        f_settbl(1049 + id * 2, 8, v.Album_Now[id], "/", v.Album_Need[v.Album_Level[id]], "\n\x19", ptr2s(v.Album_Text[id]), " Lv.", v.Album_Level[id], "\n\x04", ptr2s(v.Album_SubText[id]), " \x19", v.Album_Level[id] * v.Album_Multiply[id], ptr2s(v.Album_EndText[v.Album_Ablity[id]]))
        # (Line 61) }
        # (Line 62) else
        # (Line 63) {
    if EUDElse()():
        # (Line 64) settbl(1049 + id * 2, 8, v.Album_Now[id],
        # (Line 65) "\n\x19", ptr2s(v.Album_Text[id])," Lv. Max",
        # (Line 66) "\n\x04", ptr2s(v.Album_SubText[id]), " \x19", v.Album_Level[id] * v.Album_Multiply[id], ptr2s(v.Album_EndText[v.Album_Ablity[id]]));
        f_settbl(1049 + id * 2, 8, v.Album_Now[id], "\n\x19", ptr2s(v.Album_Text[id]), " Lv. Max", "\n\x04", ptr2s(v.Album_SubText[id]), " \x19", v.Album_Level[id] * v.Album_Multiply[id], ptr2s(v.Album_EndText[v.Album_Ablity[id]]))
        # (Line 67) }
        # (Line 68) }
    EUDEndIf()
    # (Line 70) function Add_DearNow(id, value)

# (Line 71) {
@EUDFunc
def Add_DearNow(id, value):
    # (Line 72) v.Dear_Now[id] += value;
    _ARRW(v.Dear_Now, id).__iadd__(value)
    # (Line 73) Set_DearLevel(id);
    Set_DearLevel(id)
    # (Line 74) }
    # (Line 76) function Add_AlbumNow(id, value)

# (Line 77) {
@EUDFunc
def Add_AlbumNow(id, value):
    # (Line 78) v.Album_Now[id] += value;
    _ARRW(v.Album_Now, id).__iadd__(value)
    # (Line 79) Set_AlbumLevel(id);
    Set_AlbumLevel(id)
    # (Line 80) }
    # (Line 82) function Set_DearLevel(id)

# (Line 83) {
@EUDFunc
def Set_DearLevel(id):
    # (Line 84) if (v.Dear_Now[id] >= v.Dear_Need[v.Dear_Level[id]] && v.Dear_Level[id] < 10)
    if EUDIf()(EUDSCAnd()(v.Dear_Now[id] >= v.Dear_Need[v.Dear_Level[id]])(v.Dear_Level[id] >= 10, neg=True)()):
        # (Line 85) {
        # (Line 86) v.Dear_Level[id] += 1;
        _ARRW(v.Dear_Level, id).__iadd__(1)
        # (Line 87) Set_Dear_ButtonText(id);
        Set_Dear_ButtonText(id)
        # (Line 88) }
        # (Line 89) else
        # (Line 90) { Set_Dear_ButtonText(id); }
    if EUDElse()():
        Set_Dear_ButtonText(id)
        # (Line 91) }
    EUDEndIf()
    # (Line 93) function Set_AlbumLevel(id)

# (Line 94) {
@EUDFunc
def Set_AlbumLevel(id):
    # (Line 95) if (v.Album_Now[id] >= v.Album_Need[v.Album_Level[id]] && v.Album_Level[id] < 10)
    if EUDIf()(EUDSCAnd()(v.Album_Now[id] >= v.Album_Need[v.Album_Level[id]])(v.Album_Level[id] >= 10, neg=True)()):
        # (Line 96) {
        # (Line 97) v.Album_Level[id] += 1;
        _ARRW(v.Album_Level, id).__iadd__(1)
        # (Line 98) Set_Album_ButtonText(id);
        Set_Album_ButtonText(id)
        # (Line 99) }
        # (Line 100) else
        # (Line 101) { Set_Album_ButtonText(id); }
    if EUDElse()():
        Set_Album_ButtonText(id)
        # (Line 102) }
    EUDEndIf()
