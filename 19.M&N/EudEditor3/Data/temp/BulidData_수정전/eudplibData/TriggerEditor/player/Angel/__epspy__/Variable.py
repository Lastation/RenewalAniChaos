## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) const Unit_ID		= [54, 5, 100, 16, 76, 55, 44];
Unit_ID = _CGFW(lambda: [_ARR(FlattenList([54, 5, 100, 16, 76, 55, 44]))], 1)[0]
# (Line 3) const Dear_Level		= EUDArray(13);
Dear_Level = _CGFW(lambda: [EUDArray(13)], 1)[0]
# (Line 4) const Dear_Now			= EUDArray(13);
Dear_Now = _CGFW(lambda: [EUDArray(13)], 1)[0]
# (Line 5) const Dear_Need		= [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000];
Dear_Need = _CGFW(lambda: [_ARR(FlattenList([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]))], 1)[0]
# (Line 6) const Dear_Ablity		= [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
Dear_Ablity = _CGFW(lambda: [_ARR(FlattenList([0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))], 1)[0]
# (Line 7) const Dear_Multiply		= [20, 4, 10, 20, 10, 10, 10, 0, 0, 0, 0, 0, 0];
Dear_Multiply = _CGFW(lambda: [_ARR(FlattenList([20, 4, 10, 20, 10, 10, 10, 0, 0, 0, 0, 0, 0]))], 1)[0]
# (Line 8) const Dear_Text 			=
# (Line 9) [Db(u2b("Wake up_rabbit!")),
# (Line 10) Db(u2b("숙녀의 소양")),
# (Line 11) Db(u2b("반짝반짝 쇼타임")),
# (Line 12) Db(u2b("어른의 매력")),
# (Line 13) Db(u2b("정성을 담아서")),
# (Line 14) Db(u2b("리버시 헌팅")),
# (Line 15) Db(u2b("짠 하고 등장!")),
# (Line 16) Db(u2b("0")),
# (Line 17) Db(u2b("0")),
# (Line 18) Db(u2b("0")),
# (Line 19) Db(u2b("0")),
# (Line 20) Db(u2b("0")),
# (Line 21) Db(u2b("0"))];
Dear_Text = _CGFW(lambda: [_ARR(FlattenList([Db(u2b("Wake up_rabbit!")), Db(u2b("숙녀의 소양")), Db(u2b("반짝반짝 쇼타임")), Db(u2b("어른의 매력")), Db(u2b("정성을 담아서")), Db(u2b("리버시 헌팅")), Db(u2b("짠 하고 등장!")), Db(u2b("0")), Db(u2b("0")), Db(u2b("0")), Db(u2b("0")), Db(u2b("0")), Db(u2b("0"))]))], 1)[0]
# (Line 22) const Dear_SubText			=
# (Line 23) [Db(u2b("기본 공격력이")),
# (Line 24) Db(u2b("범위공격 범위가")),
# (Line 25) Db(u2b("공격속도가"))];
Dear_SubText = _CGFW(lambda: [_ARR(FlattenList([Db(u2b("기본 공격력이")), Db(u2b("범위공격 범위가")), Db(u2b("공격속도가"))]))], 1)[0]
# (Line 26) const Dear_EndText 			=
# (Line 27) [Db(u2b("% \x04증가합니다.")),
# (Line 28) Db(u2b(" \x04증가합니다.")),
# (Line 29) Db(u2b("% \x04증가합니다."))];
Dear_EndText = _CGFW(lambda: [_ARR(FlattenList([Db(u2b("% \x04증가합니다.")), Db(u2b(" \x04증가합니다.")), Db(u2b("% \x04증가합니다."))]))], 1)[0]
# (Line 31) const Album_Level 		= EUDArray(13);
Album_Level = _CGFW(lambda: [EUDArray(13)], 1)[0]
# (Line 32) const Album_Now 		= EUDArray(13);
Album_Now = _CGFW(lambda: [EUDArray(13)], 1)[0]
# (Line 33) const Album_Need 		= [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
Album_Need = _CGFW(lambda: [_ARR(FlattenList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))], 1)[0]
# (Line 34) const Album_Ablity		= [0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0];
Album_Ablity = _CGFW(lambda: [_ARR(FlattenList([0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]))], 1)[0]
# (Line 35) const Album_Multiply	= [20, 50, 40, 5, 5, 1, 20, 0, 0, 0, 0, 0, 0];
Album_Multiply = _CGFW(lambda: [_ARR(FlattenList([20, 50, 40, 5, 5, 1, 20, 0, 0, 0, 0, 0, 0]))], 1)[0]
# (Line 36) const Album_Text		=
# (Line 37) [Db(u2b("비빗또 이쿠요!")),			// 안나
# (Line 38) Db(u2b("정의여, 전율하라")),       		// 카오리
# (Line 39) Db(u2b("해피니스 클로버")),        		// 세리카
# (Line 40) Db(u2b("엔젤 코디")),               		// 코노미
# (Line 41) Db(u2b("엔젤 하모니")),            		// 미야
# (Line 42) Db(u2b("엔젤 샤인")),               		// 츠바사
# (Line 43) Db(u2b("강한, 소망")),               		// 레이카
# (Line 44) Db(u2b("")),
# (Line 45) Db(u2b("")),
# (Line 46) Db(u2b("")),
# (Line 47) Db(u2b("")),
# (Line 48) Db(u2b("")),
# (Line 49) Db(u2b(""))];
Album_Text = _CGFW(lambda: [_ARR(FlattenList([Db(u2b("비빗또 이쿠요!")), Db(u2b("정의여, 전율하라")), Db(u2b("해피니스 클로버")), Db(u2b("엔젤 코디")), Db(u2b("엔젤 하모니")), Db(u2b("엔젤 샤인")), Db(u2b("강한, 소망")), Db(u2b("")), Db(u2b("")), Db(u2b("")), Db(u2b("")), Db(u2b("")), Db(u2b(""))]))], 1)[0]
# (Line 50) const Album_SubText			=
# (Line 51) [Db(u2b("1분마다 10초간 공격속도가")),
# (Line 52) Db(u2b("1분마다 5초간 공격력이")),
# (Line 53) Db(u2b("1분마다")),
# (Line 54) Db(u2b("엔젤 타입의 비주얼 어필이")),
# (Line 55) Db(u2b("엔젤 타입의 보컬 어필이")),
# (Line 56) Db(u2b("엔젤 타입의 모든 어필이")),
# (Line 57) Db(u2b("")),
# (Line 58) Db(u2b("")),
# (Line 59) Db(u2b("")),
# (Line 60) Db(u2b("")),
# (Line 61) Db(u2b("")),
# (Line 62) Db(u2b("")),
# (Line 63) Db(u2b(""))];
Album_SubText = _CGFW(lambda: [_ARR(FlattenList([Db(u2b("1분마다 10초간 공격속도가")), Db(u2b("1분마다 5초간 공격력이")), Db(u2b("1분마다")), Db(u2b("엔젤 타입의 비주얼 어필이")), Db(u2b("엔젤 타입의 보컬 어필이")), Db(u2b("엔젤 타입의 모든 어필이")), Db(u2b("")), Db(u2b("")), Db(u2b("")), Db(u2b("")), Db(u2b("")), Db(u2b("")), Db(u2b(""))]))], 1)[0]
# (Line 64) const Album_EndText 			=
# (Line 65) [Db(u2b("% \x04증가합니다.")),
# (Line 66) Db(u2b("골드\x04를 얻습니다.")),
# (Line 67) Db(u2b("\x04초마다 비쥬얼 스케줄의 체력을 1%로 만듭니다.")),];
Album_EndText = _CGFW(lambda: [_ARR(FlattenList([Db(u2b("% \x04증가합니다.")), Db(u2b("골드\x04를 얻습니다.")), Db(u2b("\x04초마다 비쥬얼 스케줄의 체력을 1%로 만듭니다."))]))], 1)[0]
