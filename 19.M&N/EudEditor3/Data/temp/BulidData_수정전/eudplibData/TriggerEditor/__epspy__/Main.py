## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 2) import monster.SpawnLocation as ms;
from monster import SpawnLocation as ms
# (Line 3) import player.Status as ps;
from player import Status as ps
# (Line 4) import map.Potal as potal;
from map import Potal as potal
# (Line 5) import Item.ETC as ietc;
from Item import ETC as ietc
# (Line 6) import Variable as v;
import Variable as v
# (Line 7) import Alliance as ally;
import Alliance as ally
# (Line 8) import monster.Spawn as mob;
from monster import Spawn as mob
# (Line 9) import monster.Kill as mk;
from monster import Kill as mk
# (Line 10) import player.Inventory as inven;
from player import Inventory as inven
# (Line 11) import player.Key as key;
from player import Key as key
# (Line 12) import Item.AddItem as item;
from Item import AddItem as item
# (Line 13) import player.NewCharacter as nc;
from player import NewCharacter as nc
# (Line 14) import SCArchive as sca;
import SCArchive as sca
# (Line 16) const s = StringBuffer(1000);
s = _CGFW(lambda: [StringBuffer(1000)], 1)[0]
# (Line 18) function onPluginStart()
# (Line 19) {
@EUDTracedFunc
def onPluginStart():
    # (Line 20) sca.Init();
    EUDTraceLog(20)
    sca.Init()
    # (Line 23) inven.ResetInventory();
    EUDTraceLog(23)
    inven.ResetInventory()
    # (Line 25) KillUnit("Zerg Scourge", P1);
    # (Line 27) ms.MobSpawnLocationCheck();
    EUDTraceLog(25)
    DoActions(KillUnit("Zerg Scourge", P1))
    EUDTraceLog(27)
    ms.MobSpawnLocationCheck()
    # (Line 29) potal.CreatePotal();
    EUDTraceLog(29)
    potal.CreatePotal()
    # (Line 31) ietc.SetEtcItemInfo();
    EUDTraceLog(31)
    ietc.SetEtcItemInfo()
    # (Line 33) EUDPlayerLoop()();
    EUDTraceLog(33)
    EUDPlayerLoop()()
    # (Line 38) nc.NewCharacter();
    EUDTraceLog(38)
    nc.NewCharacter()
    # (Line 41) EUDEndPlayerLoop();
    EUDTraceLog(41)
    EUDEndPlayerLoop()
    # (Line 42) }
    # (Line 44) function beforeTriggerExec()

# (Line 45) {
@EUDTracedFunc
def beforeTriggerExec():
    # (Line 47) sca.Exec();
    EUDTraceLog(47)
    sca.Exec()
    # (Line 49) EUDPlayerLoop()();
    EUDTraceLog(49)
    EUDPlayerLoop()()
    # (Line 51) eprintln("레벨 : ", v.userLevel[getcurpl()], " 경험치 : ", v.userExp[getcurpl()], " / ", v.MaxExp[v.userLevel[getcurpl()]]);
    EUDTraceLog(51)
    f_eprintln("레벨 : ", v.userLevel[f_getcurpl()], " 경험치 : ", v.userExp[f_getcurpl()], " / ", v.MaxExp[v.userLevel[f_getcurpl()]])
    # (Line 65) EUDEndPlayerLoop();
    EUDTraceLog(65)
    EUDEndPlayerLoop()
    # (Line 67) SetMemory(0x5124F0, SetTo, 21);
    # (Line 68) }
    EUDTraceLog(67)
    DoActions(SetMemory(0x5124F0, SetTo, 21))
