## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import customText as tct;
import customText as tct
# (Line 2) import Variable as v;
import Variable as v
# (Line 3) import Setting.Answer as ans;
from Setting import Answer as ans
# (Line 4) import SCArchive as sca;
import SCArchive as sca
# (Line 6) var txtPtr, btnPtr, btnPos, oldCP;
txtPtr, btnPtr, btnPos, oldCP = EUDCreateVariables(4)
# (Line 7) const trgk = $T('Artanis & safhfh');
trgk = _CGFW(lambda: [GetStringIndex('Artanis & safhfh')], 1)[0]
# (Line 9) const ClassicTriggerExecTimer0 = [0, 0, 0, 0, 0, 0, 0, 0];
ClassicTriggerExecTimer0 = _CGFW(lambda: [_ARR(FlattenList([0, 0, 0, 0, 0, 0, 0, 0]))], 1)[0]
# (Line 10) function ClassicTriggerExec0() {
@EUDFunc
def ClassicTriggerExec0():
    # (Line 11) if (ClassicTriggerExecTimer0[getcurpl()] == 1) {
    if EUDIf()(ClassicTriggerExecTimer0[f_getcurpl()] == 1):
        # (Line 12) v.Remain_Music[getcurpl()] = dwread_epd(EPD(0x58A364 + 48 * 180 + 4 * getcurpl()));
        _ARRW(v.Remain_Music, f_getcurpl()) << (f_dwread_epd(EPD(0x58A364 + 48 * 180 + 4 * f_getcurpl())))
        # (Line 13) PreserveTrigger();
        # (Line 14) ClassicTriggerExecTimer0[getcurpl()] = 0;
        DoActions(PreserveTrigger())
        _ARRW(ClassicTriggerExecTimer0, f_getcurpl()) << (0)
        # (Line 15) }
        # (Line 16) if (ClassicTriggerExecTimer0[getcurpl()] > 0) {
    EUDEndIf()
    if EUDIf()(ClassicTriggerExecTimer0[f_getcurpl()] <= 0, neg=True):
        # (Line 17) ClassicTriggerExecTimer0[getcurpl()] += 1;
        _ARRW(ClassicTriggerExecTimer0, f_getcurpl()).__iadd__(1)
        # (Line 18) }
        # (Line 20) }
    EUDEndIf()
    # (Line 21) const ClassicTriggerExecTimer1 = [0, 0, 0, 0, 0, 0, 0, 0];

ClassicTriggerExecTimer1 = _CGFW(lambda: [_ARR(FlattenList([0, 0, 0, 0, 0, 0, 0, 0]))], 1)[0]
# (Line 22) function ClassicTriggerExec1() {
@EUDFunc
def ClassicTriggerExec1():
    # (Line 23) if (ClassicTriggerExecTimer1[getcurpl()] == 1) {
    if EUDIf()(ClassicTriggerExecTimer1[f_getcurpl()] == 1):
        # (Line 24) v.Track_Info[getcurpl()] = dwread_epd(EPD(0x58A364 + 48 * 187 + 4 * getcurpl()));
        _ARRW(v.Track_Info, f_getcurpl()) << (f_dwread_epd(EPD(0x58A364 + 48 * 187 + 4 * f_getcurpl())))
        # (Line 25) PreserveTrigger();
        # (Line 26) ClassicTriggerExecTimer1[getcurpl()] = 0;
        DoActions(PreserveTrigger())
        _ARRW(ClassicTriggerExecTimer1, f_getcurpl()) << (0)
        # (Line 27) }
        # (Line 28) if (ClassicTriggerExecTimer1[getcurpl()] > 0) {
    EUDEndIf()
    if EUDIf()(ClassicTriggerExecTimer1[f_getcurpl()] <= 0, neg=True):
        # (Line 29) ClassicTriggerExecTimer1[getcurpl()] += 1;
        _ARRW(ClassicTriggerExecTimer1, f_getcurpl()).__iadd__(1)
        # (Line 30) }
        # (Line 32) }
    EUDEndIf()
    # (Line 33) const ClassicTriggerExecTimer2 = [0, 0, 0, 0, 0, 0, 0, 0];

ClassicTriggerExecTimer2 = _CGFW(lambda: [_ARR(FlattenList([0, 0, 0, 0, 0, 0, 0, 0]))], 1)[0]
# (Line 34) function ClassicTriggerExec2() {
@EUDFunc
def ClassicTriggerExec2():
    # (Line 35) if (ClassicTriggerExecTimer2[getcurpl()] == 1) {
    if EUDIf()(ClassicTriggerExecTimer2[f_getcurpl()] == 1):
        # (Line 36) v.Music_Name[getcurpl()] = dwread_epd(EPD(0x58A364 + 48 * 182 + 4 * getcurpl()));
        _ARRW(v.Music_Name, f_getcurpl()) << (f_dwread_epd(EPD(0x58A364 + 48 * 182 + 4 * f_getcurpl())))
        # (Line 37) v.Remain_Sec[getcurpl()] = 0;
        _ARRW(v.Remain_Sec, f_getcurpl()) << (0)
        # (Line 38) PreserveTrigger();
        # (Line 39) ClassicTriggerExecTimer2[getcurpl()] = 0;
        DoActions(PreserveTrigger())
        _ARRW(ClassicTriggerExecTimer2, f_getcurpl()) << (0)
        # (Line 40) }
        # (Line 41) if (ClassicTriggerExecTimer2[getcurpl()] > 0) {
    EUDEndIf()
    if EUDIf()(ClassicTriggerExecTimer2[f_getcurpl()] <= 0, neg=True):
        # (Line 42) ClassicTriggerExecTimer2[getcurpl()] += 1;
        _ARRW(ClassicTriggerExecTimer2, f_getcurpl()).__iadd__(1)
        # (Line 43) }
        # (Line 45) }
    EUDEndIf()
    # (Line 46) const ClassicTriggerExecTimer3 = [0, 0, 0, 0, 0, 0, 0, 0];

ClassicTriggerExecTimer3 = _CGFW(lambda: [_ARR(FlattenList([0, 0, 0, 0, 0, 0, 0, 0]))], 1)[0]
# (Line 47) function ClassicTriggerExec3() {
@EUDFunc
def ClassicTriggerExec3():
    # (Line 48) if (ClassicTriggerExecTimer3[getcurpl()] == 1) {
    if EUDIf()(ClassicTriggerExecTimer3[f_getcurpl()] == 1):
        # (Line 49) PreserveTrigger();
        # (Line 50) const Track_Name = dwread_epd(EPD(0x58A364 + 48 * 187 + 4 * getcurpl()));
        DoActions(PreserveTrigger())
        Track_Name = f_dwread_epd(EPD(0x58A364 + 48 * 187 + 4 * f_getcurpl()))
        # (Line 51) const Music_Remain = dwread_epd(EPD(0x58A364 + 48 * 180 + 4 * 7));
        Music_Remain = f_dwread_epd(EPD(0x58A364 + 48 * 180 + 4 * 7))
        # (Line 53) v.Remain_Sec[getcurpl()] = dwread_epd(EPD(0x58A364 + 48 * 181 + 4 * getcurpl()));
        _ARRW(v.Remain_Sec, f_getcurpl()) << (f_dwread_epd(EPD(0x58A364 + 48 * 181 + 4 * f_getcurpl())))
        # (Line 54) if(v.Remain_Sec[getcurpl()] <= 69 && v.Remain_Sec[getcurpl()] >= 60)
        if EUDIf()(EUDSCAnd()(v.Remain_Sec[f_getcurpl()] <= 69)(v.Remain_Sec[f_getcurpl()] >= 60)()):
            # (Line 55) {
            # (Line 56) v.Remain_Div[getcurpl()] = v.Remain_Sec[getcurpl()] - 60;
            _ARRW(v.Remain_Div, f_getcurpl()) << (v.Remain_Sec[f_getcurpl()] - 60)
            # (Line 57) tct.chatAnnouncement("\x1F# T\x04rack - \x04 ", ptr2s(v.Track_Info_Name[Track_Name]), "　\x041:", v.Remain_Div[getcurpl()], "　\x04남은 곡 : ", Music_Remain);
            tct.f_chatAnnouncement("\x1F# T\x04rack - \x04 ", ptr2s(v.Track_Info_Name[Track_Name]), "　\x041:", v.Remain_Div[f_getcurpl()], "　\x04남은 곡 : ", Music_Remain)
            # (Line 58) }
            # (Line 59) if(v.Remain_Sec[getcurpl()] <= 69 && v.Remain_Sec[getcurpl()] >= 60)
        EUDEndIf()
        if EUDIf()(EUDSCAnd()(v.Remain_Sec[f_getcurpl()] <= 69)(v.Remain_Sec[f_getcurpl()] >= 60)()):
            # (Line 60) {
            # (Line 61) v.Remain_Div[getcurpl()] = v.Remain_Sec[getcurpl()] - 60;
            _ARRW(v.Remain_Div, f_getcurpl()) << (v.Remain_Sec[f_getcurpl()] - 60)
            # (Line 62) tct.chatAnnouncement("\x1F# T\x04rack - \x04", ptr2s(v.Track_Info_Name[Track_Name]), "　\x041:0", v.Remain_Div[getcurpl()], "　\x04남은 곡 : ", Music_Remain);
            tct.f_chatAnnouncement("\x1F# T\x04rack - \x04", ptr2s(v.Track_Info_Name[Track_Name]), "　\x041:0", v.Remain_Div[f_getcurpl()], "　\x04남은 곡 : ", Music_Remain)
            # (Line 63) }
            # (Line 64) if(v.Remain_Sec[getcurpl()] <= 59 && v.Remain_Sec[getcurpl()] >= 10)
        EUDEndIf()
        if EUDIf()(EUDSCAnd()(v.Remain_Sec[f_getcurpl()] <= 59)(v.Remain_Sec[f_getcurpl()] >= 10)()):
            # (Line 65) {
            # (Line 66) tct.chatAnnouncement("\x1F# T\x04rack - \x04", ptr2s(v.Track_Info_Name[Track_Name]), " 　\x040:", v.Remain_Sec[getcurpl()], "　\x04남은 곡 : ", Music_Remain);
            tct.f_chatAnnouncement("\x1F# T\x04rack - \x04", ptr2s(v.Track_Info_Name[Track_Name]), " 　\x040:", v.Remain_Sec[f_getcurpl()], "　\x04남은 곡 : ", Music_Remain)
            # (Line 67) }
            # (Line 68) if(v.Remain_Sec[getcurpl()] <= 9){
        EUDEndIf()
        if EUDIf()(v.Remain_Sec[f_getcurpl()] <= 9):
            # (Line 69) tct.chatAnnouncement("\x1F# T\x04rack - \x04",ptr2s(v.Track_Info_Name[Track_Name]), " 　\x040:0", v.Remain_Sec[getcurpl()], "　\x04남은 곡 : ", Music_Remain);
            tct.f_chatAnnouncement("\x1F# T\x04rack - \x04", ptr2s(v.Track_Info_Name[Track_Name]), " 　\x040:0", v.Remain_Sec[f_getcurpl()], "　\x04남은 곡 : ", Music_Remain)
            # (Line 70) }
            # (Line 71) ClassicTriggerExecTimer3[getcurpl()] = 0;
        EUDEndIf()
        _ARRW(ClassicTriggerExecTimer3, f_getcurpl()) << (0)
        # (Line 72) }
        # (Line 73) if (ClassicTriggerExecTimer3[getcurpl()] > 0) {
    EUDEndIf()
    if EUDIf()(ClassicTriggerExecTimer3[f_getcurpl()] <= 0, neg=True):
        # (Line 74) ClassicTriggerExecTimer3[getcurpl()] += 1;
        _ARRW(ClassicTriggerExecTimer3, f_getcurpl()).__iadd__(1)
        # (Line 75) }
        # (Line 77) }
    EUDEndIf()
    # (Line 78) const ClassicTriggerExecTimer4 = [0, 0, 0, 0, 0, 0, 0, 0];

ClassicTriggerExecTimer4 = _CGFW(lambda: [_ARR(FlattenList([0, 0, 0, 0, 0, 0, 0, 0]))], 1)[0]
# (Line 79) function ClassicTriggerExec4() {
@EUDFunc
def ClassicTriggerExec4():
    # (Line 80) if (ClassicTriggerExecTimer4[getcurpl()] == 1) {
    if EUDIf()(ClassicTriggerExecTimer4[f_getcurpl()] == 1):
        # (Line 81) PreserveTrigger();
        # (Line 82) v.Remain_Sec[getcurpl()] = dwread_epd(EPD(0x58A364 + 48 * 181 + 4 * getcurpl()));
        DoActions(PreserveTrigger())
        _ARRW(v.Remain_Sec, f_getcurpl()) << (f_dwread_epd(EPD(0x58A364 + 48 * 181 + 4 * f_getcurpl())))
        # (Line 84) const Name = dwread_epd(EPD(0x58A364 + 48 * 182 + 4 * getcurpl()));
        Name = f_dwread_epd(EPD(0x58A364 + 48 * 182 + 4 * f_getcurpl()))
        # (Line 85) const Music_Remain = dwread_epd(EPD(0x58A364 + 48 * 180 + 4 * 7));
        Music_Remain = f_dwread_epd(EPD(0x58A364 + 48 * 180 + 4 * 7))
        # (Line 87) if(
        _t2 = EUDIf()
        # (Line 88) v.Remain_Sec[getcurpl()] >= 60
        # (Line 89) ){
        if _t2(v.Remain_Sec[f_getcurpl()] >= 60):
            # (Line 90) v.Remain_Div[getcurpl()] = v.Remain_Sec[getcurpl()] - 60;
            _ARRW(v.Remain_Div, f_getcurpl()) << (v.Remain_Sec[f_getcurpl()] - 60)
            # (Line 91) tct.chatAnnouncement("\x1F# N\x04ow Playing - ", tct.ptr2s(tct.strptr(wread(0x660260 + 2 * Name))), "　\x041:0", v.Remain_Div[getcurpl()], "　\x04남은 곡 : ", Music_Remain);
            tct.f_chatAnnouncement("\x1F# N\x04ow Playing - ", tct.ptr2s(tct.f_strptr(f_wread(0x660260 + 2 * Name))), "　\x041:0", v.Remain_Div[f_getcurpl()], "　\x04남은 곡 : ", Music_Remain)
            # (Line 92) }
            # (Line 93) if(
        EUDEndIf()
        _t3 = EUDIf()
        # (Line 94) v.Remain_Sec[getcurpl()] <= 59 &&
        # (Line 95) v.Remain_Sec[getcurpl()] >= 10
        # (Line 96) ){
        if _t3(EUDSCAnd()(v.Remain_Sec[f_getcurpl()] <= 59)(v.Remain_Sec[f_getcurpl()] >= 10)()):
            # (Line 97) tct.chatAnnouncement("\x1F# N\x04ow Playing - ", tct.ptr2s(tct.strptr(wread(0x660260 + 2 * Name))), "　\x040:", v.Remain_Sec[getcurpl()], "　\x04남은 곡 : ", Music_Remain);
            tct.f_chatAnnouncement("\x1F# N\x04ow Playing - ", tct.ptr2s(tct.f_strptr(f_wread(0x660260 + 2 * Name))), "　\x040:", v.Remain_Sec[f_getcurpl()], "　\x04남은 곡 : ", Music_Remain)
            # (Line 98) }
            # (Line 99) if(
        EUDEndIf()
        _t4 = EUDIf()
        # (Line 100) v.Remain_Sec[getcurpl()] <= 9
        # (Line 101) ){
        if _t4(v.Remain_Sec[f_getcurpl()] <= 9):
            # (Line 102) tct.chatAnnouncement("\x1F# N\x04ow Playing - ", tct.ptr2s(tct.strptr(wread(0x660260 + 2 * Name))), "　\x060:0", v.Remain_Sec[getcurpl()], "　\x04남은 곡 : ", Music_Remain);
            tct.f_chatAnnouncement("\x1F# N\x04ow Playing - ", tct.ptr2s(tct.f_strptr(f_wread(0x660260 + 2 * Name))), "　\x060:0", v.Remain_Sec[f_getcurpl()], "　\x04남은 곡 : ", Music_Remain)
            # (Line 103) }
            # (Line 104) ClassicTriggerExecTimer4[getcurpl()] = 0;
        EUDEndIf()
        _ARRW(ClassicTriggerExecTimer4, f_getcurpl()) << (0)
        # (Line 105) }
        # (Line 106) if (ClassicTriggerExecTimer4[getcurpl()] > 0) {
    EUDEndIf()
    if EUDIf()(ClassicTriggerExecTimer4[f_getcurpl()] <= 0, neg=True):
        # (Line 107) ClassicTriggerExecTimer4[getcurpl()] += 1;
        _ARRW(ClassicTriggerExecTimer4, f_getcurpl()).__iadd__(1)
        # (Line 108) }
        # (Line 110) }
    EUDEndIf()
    # (Line 112) function ClassicTriggerStarter0() {

@EUDFunc
def ClassicTriggerStarter0():
    # (Line 113) if(
    _t1 = EUDIf()
    # (Line 114) v.Remain_Music[getcurpl()] != dwread_epd(EPD(0x58A364 + 48 * 180 + 4 * getcurpl()))
    # (Line 115) ){
    if _t1(v.Remain_Music[f_getcurpl()] == f_dwread_epd(EPD(0x58A364 + 48 * 180 + 4 * f_getcurpl())), neg=True):
        # (Line 116) if (ClassicTriggerExecTimer0[getcurpl()] == 0){
        if EUDIf()(ClassicTriggerExecTimer0[f_getcurpl()] == 0):
            # (Line 117) ClassicTriggerExecTimer0[getcurpl()] = 1;
            _ARRW(ClassicTriggerExecTimer0, f_getcurpl()) << (1)
            # (Line 118) ClassicTriggerExec0();
            ClassicTriggerExec0()
            # (Line 119) }
            # (Line 120) }
        EUDEndIf()
        # (Line 121) }
    EUDEndIf()
    # (Line 122) function ClassicTriggerStarter1() {

@EUDFunc
def ClassicTriggerStarter1():
    # (Line 123) if(
    _t1 = EUDIf()
    # (Line 124) v.Track_Info[getcurpl()] != dwread_epd(EPD(0x58A364 + 48 * 187 + 4 * getcurpl()))
    # (Line 125) ){
    if _t1(v.Track_Info[f_getcurpl()] == f_dwread_epd(EPD(0x58A364 + 48 * 187 + 4 * f_getcurpl())), neg=True):
        # (Line 126) if (ClassicTriggerExecTimer1[getcurpl()] == 0){
        if EUDIf()(ClassicTriggerExecTimer1[f_getcurpl()] == 0):
            # (Line 127) ClassicTriggerExecTimer1[getcurpl()] = 1;
            _ARRW(ClassicTriggerExecTimer1, f_getcurpl()) << (1)
            # (Line 128) ClassicTriggerExec1();
            ClassicTriggerExec1()
            # (Line 129) }
            # (Line 130) }
        EUDEndIf()
        # (Line 131) }
    EUDEndIf()
    # (Line 132) function ClassicTriggerStarter2() {

@EUDFunc
def ClassicTriggerStarter2():
    # (Line 133) if(
    _t1 = EUDIf()
    # (Line 134) v.Music_Name[getcurpl()] != dwread_epd(EPD(0x58A364 + 48 * 182 + 4 * getcurpl()))
    # (Line 135) ){
    if _t1(v.Music_Name[f_getcurpl()] == f_dwread_epd(EPD(0x58A364 + 48 * 182 + 4 * f_getcurpl())), neg=True):
        # (Line 136) if (ClassicTriggerExecTimer2[getcurpl()] == 0){
        if EUDIf()(ClassicTriggerExecTimer2[f_getcurpl()] == 0):
            # (Line 137) ClassicTriggerExecTimer2[getcurpl()] = 1;
            _ARRW(ClassicTriggerExecTimer2, f_getcurpl()) << (1)
            # (Line 138) ClassicTriggerExec2();
            ClassicTriggerExec2()
            # (Line 139) }
            # (Line 140) }
        EUDEndIf()
        # (Line 141) }
    EUDEndIf()
    # (Line 142) function ClassicTriggerStarter3() {

@EUDFunc
def ClassicTriggerStarter3():
    # (Line 143) if(
    _t1 = EUDIf()
    # (Line 144) v.Music_Name[getcurpl()] == 0 &&
    # (Line 145) v.Remain_Sec[getcurpl()] != dwread_epd(EPD(0x58A364 + 48 * 181 + 4 * getcurpl()))
    # (Line 146) ){
    if _t1(EUDSCAnd()(v.Music_Name[f_getcurpl()] == 0)(v.Remain_Sec[f_getcurpl()] == f_dwread_epd(EPD(0x58A364 + 48 * 181 + 4 * f_getcurpl())), neg=True)()):
        # (Line 147) if (ClassicTriggerExecTimer3[getcurpl()] == 0){
        if EUDIf()(ClassicTriggerExecTimer3[f_getcurpl()] == 0):
            # (Line 148) ClassicTriggerExecTimer3[getcurpl()] = 1;
            _ARRW(ClassicTriggerExecTimer3, f_getcurpl()) << (1)
            # (Line 149) ClassicTriggerExec3();
            ClassicTriggerExec3()
            # (Line 150) }
            # (Line 151) }
        EUDEndIf()
        # (Line 152) }
    EUDEndIf()
    # (Line 153) function ClassicTriggerStarter4() {

@EUDFunc
def ClassicTriggerStarter4():
    # (Line 154) if(
    _t1 = EUDIf()
    # (Line 155) v.Music_Name[getcurpl()] >= 1 &&
    # (Line 156) v.Remain_Sec[getcurpl()] != dwread_epd(EPD(0x58A364 + 48 * 181 + 4 * getcurpl()))
    # (Line 157) ){
    if _t1(EUDSCAnd()(v.Music_Name[f_getcurpl()] >= 1)(v.Remain_Sec[f_getcurpl()] == f_dwread_epd(EPD(0x58A364 + 48 * 181 + 4 * f_getcurpl())), neg=True)()):
        # (Line 158) if (ClassicTriggerExecTimer4[getcurpl()] == 0){
        if EUDIf()(ClassicTriggerExecTimer4[f_getcurpl()] == 0):
            # (Line 159) ClassicTriggerExecTimer4[getcurpl()] = 1;
            _ARRW(ClassicTriggerExecTimer4, f_getcurpl()) << (1)
            # (Line 160) ClassicTriggerExec4();
            ClassicTriggerExec4()
            # (Line 161) }
            # (Line 162) }
        EUDEndIf()
        # (Line 163) }
    EUDEndIf()
    # (Line 165) function ClassicTriggerExec() {

@EUDFunc
def ClassicTriggerExec():
    # (Line 166) ClassicTriggerExec0();
    ClassicTriggerExec0()
    # (Line 167) ClassicTriggerExec1();
    ClassicTriggerExec1()
    # (Line 168) ClassicTriggerExec2();
    ClassicTriggerExec2()
    # (Line 169) ClassicTriggerExec3();
    ClassicTriggerExec3()
    # (Line 170) ClassicTriggerExec4();
    ClassicTriggerExec4()
    # (Line 171) ans.AnswerExec();
    ans.AnswerExec()
    # (Line 172) }
    # (Line 173) function ClassicTriggerStarter() {

@EUDFunc
def ClassicTriggerStarter():
    # (Line 175) if (playerexist(0)){
    if EUDIf()(f_playerexist(0)):
        # (Line 176) setcurpl(0);
        f_setcurpl(0)
        # (Line 177) ClassicTriggerStarter0();
        ClassicTriggerStarter0()
        # (Line 178) ClassicTriggerStarter1();
        ClassicTriggerStarter1()
        # (Line 179) ClassicTriggerStarter2();
        ClassicTriggerStarter2()
        # (Line 180) ClassicTriggerStarter3();
        ClassicTriggerStarter3()
        # (Line 181) ClassicTriggerStarter4();
        ClassicTriggerStarter4()
        # (Line 182) ans.AnswerStart();
        ans.AnswerStart()
        # (Line 183) }
        # (Line 185) if (playerexist(1)){
    EUDEndIf()
    if EUDIf()(f_playerexist(1)):
        # (Line 186) setcurpl(1);
        f_setcurpl(1)
        # (Line 187) ClassicTriggerStarter0();
        ClassicTriggerStarter0()
        # (Line 188) ClassicTriggerStarter1();
        ClassicTriggerStarter1()
        # (Line 189) ClassicTriggerStarter2();
        ClassicTriggerStarter2()
        # (Line 190) ClassicTriggerStarter3();
        ClassicTriggerStarter3()
        # (Line 191) ClassicTriggerStarter4();
        ClassicTriggerStarter4()
        # (Line 192) ans.AnswerStart();
        ans.AnswerStart()
        # (Line 193) }
        # (Line 195) if (playerexist(2)){
    EUDEndIf()
    if EUDIf()(f_playerexist(2)):
        # (Line 196) setcurpl(2);
        f_setcurpl(2)
        # (Line 197) ClassicTriggerStarter0();
        ClassicTriggerStarter0()
        # (Line 198) ClassicTriggerStarter1();
        ClassicTriggerStarter1()
        # (Line 199) ClassicTriggerStarter2();
        ClassicTriggerStarter2()
        # (Line 200) ClassicTriggerStarter3();
        ClassicTriggerStarter3()
        # (Line 201) ClassicTriggerStarter4();
        ClassicTriggerStarter4()
        # (Line 202) ans.AnswerStart();
        ans.AnswerStart()
        # (Line 203) }
        # (Line 205) if (playerexist(3)){
    EUDEndIf()
    if EUDIf()(f_playerexist(3)):
        # (Line 206) setcurpl(3);
        f_setcurpl(3)
        # (Line 207) ClassicTriggerStarter0();
        ClassicTriggerStarter0()
        # (Line 208) ClassicTriggerStarter1();
        ClassicTriggerStarter1()
        # (Line 209) ClassicTriggerStarter2();
        ClassicTriggerStarter2()
        # (Line 210) ClassicTriggerStarter3();
        ClassicTriggerStarter3()
        # (Line 211) ClassicTriggerStarter4();
        ClassicTriggerStarter4()
        # (Line 212) ans.AnswerStart();
        ans.AnswerStart()
        # (Line 213) }
        # (Line 215) if (playerexist(4)){
    EUDEndIf()
    if EUDIf()(f_playerexist(4)):
        # (Line 216) setcurpl(4);
        f_setcurpl(4)
        # (Line 217) ClassicTriggerStarter0();
        ClassicTriggerStarter0()
        # (Line 218) ClassicTriggerStarter1();
        ClassicTriggerStarter1()
        # (Line 219) ClassicTriggerStarter2();
        ClassicTriggerStarter2()
        # (Line 220) ClassicTriggerStarter3();
        ClassicTriggerStarter3()
        # (Line 221) ClassicTriggerStarter4();
        ClassicTriggerStarter4()
        # (Line 222) ans.AnswerStart();
        ans.AnswerStart()
        # (Line 223) }
        # (Line 225) if (playerexist(5)){
    EUDEndIf()
    if EUDIf()(f_playerexist(5)):
        # (Line 226) setcurpl(5);
        f_setcurpl(5)
        # (Line 227) ClassicTriggerStarter0();
        ClassicTriggerStarter0()
        # (Line 228) ClassicTriggerStarter1();
        ClassicTriggerStarter1()
        # (Line 229) ClassicTriggerStarter2();
        ClassicTriggerStarter2()
        # (Line 230) ClassicTriggerStarter3();
        ClassicTriggerStarter3()
        # (Line 231) ClassicTriggerStarter4();
        ClassicTriggerStarter4()
        # (Line 232) ans.AnswerStart();
        ans.AnswerStart()
        # (Line 233) }
        # (Line 235) if (playerexist(6)){
    EUDEndIf()
    if EUDIf()(f_playerexist(6)):
        # (Line 236) setcurpl(6);
        f_setcurpl(6)
        # (Line 237) }
        # (Line 239) if (playerexist(7)){
    EUDEndIf()
    if EUDIf()(f_playerexist(7)):
        # (Line 240) setcurpl(7);
        f_setcurpl(7)
        # (Line 241) }
        # (Line 242) }
    EUDEndIf()
    # (Line 243) function onPluginStart() {

@EUDFunc
def onPluginStart():
    # (Line 244) randomize();
    f_randomize()
    # (Line 245) sca.Init();
    sca.Init()
    # (Line 246) }
    # (Line 247) function beforeTriggerExec()

# (Line 248) {
@EUDFunc
def beforeTriggerExec():
    # (Line 249) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 250) ClassicTriggerExec();
    ClassicTriggerExec()
    # (Line 252) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 254) EUDEndPlayerLoop();
    EUDEndPlayerLoop()
    # (Line 255) ClassicTriggerStarter();
    ClassicTriggerStarter()
    # (Line 256) }
    # (Line 257) function afterTriggerExec()

# (Line 258) {
@EUDFunc
def afterTriggerExec():
    # (Line 260) }
    pass
