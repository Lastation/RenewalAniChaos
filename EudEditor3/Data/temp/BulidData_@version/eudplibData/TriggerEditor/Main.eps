import customText as tct;
import Variable as v;
import Setting.Answer as ans;
import SCArchive as sca;

var txtPtr, btnPtr, btnPos, oldCP;
const trgk = $T('Artanis & safhfh');

const ClassicTriggerExecTimer0 = [0, 0, 0, 0, 0, 0, 0, 0];
function ClassicTriggerExec0() {
    if (ClassicTriggerExecTimer0[getcurpl()] == 1) {
        v.Remain_Music[getcurpl()] = dwread_epd(EPD(0x58A364 + 48 * 180 + 4 * getcurpl()));
        PreserveTrigger();
        ClassicTriggerExecTimer0[getcurpl()] = 0;
    }
    if (ClassicTriggerExecTimer0[getcurpl()] > 0) {
        ClassicTriggerExecTimer0[getcurpl()] += 1;
    }

}
const ClassicTriggerExecTimer1 = [0, 0, 0, 0, 0, 0, 0, 0];
function ClassicTriggerExec1() {
    if (ClassicTriggerExecTimer1[getcurpl()] == 1) {
        v.Track_Info[getcurpl()] = dwread_epd(EPD(0x58A364 + 48 * 187 + 4 * getcurpl()));
        PreserveTrigger();
        ClassicTriggerExecTimer1[getcurpl()] = 0;
    }
    if (ClassicTriggerExecTimer1[getcurpl()] > 0) {
        ClassicTriggerExecTimer1[getcurpl()] += 1;
    }

}
const ClassicTriggerExecTimer2 = [0, 0, 0, 0, 0, 0, 0, 0];
function ClassicTriggerExec2() {
    if (ClassicTriggerExecTimer2[getcurpl()] == 1) {
        v.Music_Name[getcurpl()] = dwread_epd(EPD(0x58A364 + 48 * 182 + 4 * getcurpl()));
        v.Remain_Sec[getcurpl()] = 0;
        PreserveTrigger();
        ClassicTriggerExecTimer2[getcurpl()] = 0;
    }
    if (ClassicTriggerExecTimer2[getcurpl()] > 0) {
        ClassicTriggerExecTimer2[getcurpl()] += 1;
    }

}
const ClassicTriggerExecTimer3 = [0, 0, 0, 0, 0, 0, 0, 0];
function ClassicTriggerExec3() {
    if (ClassicTriggerExecTimer3[getcurpl()] == 1) {
       PreserveTrigger();
       const Track_Name = dwread_epd(EPD(0x58A364 + 48 * 187 + 4 * getcurpl()));
       const Music_Remain = dwread_epd(EPD(0x58A364 + 48 * 180 + 4 * 7));

       v.Remain_Sec[getcurpl()] = dwread_epd(EPD(0x58A364 + 48 * 181 + 4 * getcurpl()));
       if(v.Remain_Sec[getcurpl()] <= 69 && v.Remain_Sec[getcurpl()] >= 60)
       {
       	v.Remain_Div[getcurpl()] = v.Remain_Sec[getcurpl()] - 60;
  		tct.chatAnnouncement("\x1F# T\x04rack - \x04 ", ptr2s(v.Track_Info_Name[Track_Name]), "　\x041:", v.Remain_Div[getcurpl()], "　\x04남은 곡 : ", Music_Remain);
       }
       if(v.Remain_Sec[getcurpl()] <= 69 && v.Remain_Sec[getcurpl()] >= 60)
       {
		v.Remain_Div[getcurpl()] = v.Remain_Sec[getcurpl()] - 60;
  		tct.chatAnnouncement("\x1F# T\x04rack - \x04", ptr2s(v.Track_Info_Name[Track_Name]), "　\x041:0", v.Remain_Div[getcurpl()], "　\x04남은 곡 : ", Music_Remain);
      	}
       if(v.Remain_Sec[getcurpl()] <= 59 && v.Remain_Sec[getcurpl()] >= 10)
   	{
           	tct.chatAnnouncement("\x1F# T\x04rack - \x04", ptr2s(v.Track_Info_Name[Track_Name]), " 　\x040:", v.Remain_Sec[getcurpl()], "　\x04남은 곡 : ", Music_Remain);
      	}
      	if(v.Remain_Sec[getcurpl()] <= 9){
           	tct.chatAnnouncement("\x1F# T\x04rack - \x04",ptr2s(v.Track_Info_Name[Track_Name]), " 　\x040:0", v.Remain_Sec[getcurpl()], "　\x04남은 곡 : ", Music_Remain);
      	}
        ClassicTriggerExecTimer3[getcurpl()] = 0;
    }
    if (ClassicTriggerExecTimer3[getcurpl()] > 0) {
        ClassicTriggerExecTimer3[getcurpl()] += 1;
    }

}
const ClassicTriggerExecTimer4 = [0, 0, 0, 0, 0, 0, 0, 0];
function ClassicTriggerExec4() {
    if (ClassicTriggerExecTimer4[getcurpl()] == 1) {
        PreserveTrigger();
        v.Remain_Sec[getcurpl()] = dwread_epd(EPD(0x58A364 + 48 * 181 + 4 * getcurpl()));
        
        const Name = dwread_epd(EPD(0x58A364 + 48 * 182 + 4 * getcurpl()));
        const Music_Remain = dwread_epd(EPD(0x58A364 + 48 * 180 + 4 * 7));
        
        if(
            v.Remain_Sec[getcurpl()] >= 60
        ){
            v.Remain_Div[getcurpl()] = v.Remain_Sec[getcurpl()] - 60;
            tct.chatAnnouncement("\x1F# N\x04ow Playing - ", tct.ptr2s(tct.strptr(wread(0x660260 + 2 * Name))), "　\x041:0", v.Remain_Div[getcurpl()], "　\x04남은 곡 : ", Music_Remain);
        }
        if(
            v.Remain_Sec[getcurpl()] <= 59 && 
            v.Remain_Sec[getcurpl()] >= 10
        ){
            tct.chatAnnouncement("\x1F# N\x04ow Playing - ", tct.ptr2s(tct.strptr(wread(0x660260 + 2 * Name))), "　\x040:", v.Remain_Sec[getcurpl()], "　\x04남은 곡 : ", Music_Remain);
        }
        if(
            v.Remain_Sec[getcurpl()] <= 9
        ){
            tct.chatAnnouncement("\x1F# N\x04ow Playing - ", tct.ptr2s(tct.strptr(wread(0x660260 + 2 * Name))), "　\x060:0", v.Remain_Sec[getcurpl()], "　\x04남은 곡 : ", Music_Remain);
        }
        ClassicTriggerExecTimer4[getcurpl()] = 0;
    }
    if (ClassicTriggerExecTimer4[getcurpl()] > 0) {
        ClassicTriggerExecTimer4[getcurpl()] += 1;
    }

}

function ClassicTriggerStarter0() {
    if(
        v.Remain_Music[getcurpl()] != dwread_epd(EPD(0x58A364 + 48 * 180 + 4 * getcurpl()))
    ){
        if (ClassicTriggerExecTimer0[getcurpl()] == 0){
            ClassicTriggerExecTimer0[getcurpl()] = 1;
            ClassicTriggerExec0();
        }
    }
}
function ClassicTriggerStarter1() {
    if(
        v.Track_Info[getcurpl()] != dwread_epd(EPD(0x58A364 + 48 * 187 + 4 * getcurpl()))
    ){
        if (ClassicTriggerExecTimer1[getcurpl()] == 0){
            ClassicTriggerExecTimer1[getcurpl()] = 1;
            ClassicTriggerExec1();
        }
    }
}
function ClassicTriggerStarter2() {
    if(
        v.Music_Name[getcurpl()] != dwread_epd(EPD(0x58A364 + 48 * 182 + 4 * getcurpl()))
    ){
        if (ClassicTriggerExecTimer2[getcurpl()] == 0){
            ClassicTriggerExecTimer2[getcurpl()] = 1;
            ClassicTriggerExec2();
        }
    }
}
function ClassicTriggerStarter3() {
    if(
    	v.Music_Name[getcurpl()] == 0 &&
	v.Remain_Sec[getcurpl()] != dwread_epd(EPD(0x58A364 + 48 * 181 + 4 * getcurpl()))
    ){
        if (ClassicTriggerExecTimer3[getcurpl()] == 0){
            ClassicTriggerExecTimer3[getcurpl()] = 1;
            ClassicTriggerExec3();
        }
    }
}
function ClassicTriggerStarter4() {
    if(
    	 v.Music_Name[getcurpl()] >= 1 &&
        v.Remain_Sec[getcurpl()] != dwread_epd(EPD(0x58A364 + 48 * 181 + 4 * getcurpl()))
    ){
        if (ClassicTriggerExecTimer4[getcurpl()] == 0){
            ClassicTriggerExecTimer4[getcurpl()] = 1;
            ClassicTriggerExec4();
        }
    }
}

function ClassicTriggerExec() {
    ClassicTriggerExec0();
    ClassicTriggerExec1();
    ClassicTriggerExec2();
    ClassicTriggerExec3();
    ClassicTriggerExec4();
    ans.AnswerExec();
}
function ClassicTriggerStarter() {
    //플레이어 1
    if (playerexist(0)){
        setcurpl(0);
        ClassicTriggerStarter0();
        ClassicTriggerStarter1();
        ClassicTriggerStarter2();
        ClassicTriggerStarter3();
        ClassicTriggerStarter4();
        ans.AnswerStart();
    }
    //플레이어 2
    if (playerexist(1)){
        setcurpl(1);
        ClassicTriggerStarter0();
        ClassicTriggerStarter1();
        ClassicTriggerStarter2();
        ClassicTriggerStarter3();
        ClassicTriggerStarter4();
        ans.AnswerStart();
    }
    //플레이어 3
    if (playerexist(2)){
        setcurpl(2);
        ClassicTriggerStarter0();
        ClassicTriggerStarter1();
        ClassicTriggerStarter2();
        ClassicTriggerStarter3();
        ClassicTriggerStarter4();
        ans.AnswerStart();
    }
    //플레이어 4
    if (playerexist(3)){
        setcurpl(3);
        ClassicTriggerStarter0();
        ClassicTriggerStarter1();
        ClassicTriggerStarter2();
        ClassicTriggerStarter3();
        ClassicTriggerStarter4();
        ans.AnswerStart();
    }
    //플레이어 5
    if (playerexist(4)){
        setcurpl(4);
        ClassicTriggerStarter0();
        ClassicTriggerStarter1();
        ClassicTriggerStarter2();
        ClassicTriggerStarter3();
        ClassicTriggerStarter4();
        ans.AnswerStart();
    }
    //플레이어 6
    if (playerexist(5)){
        setcurpl(5);
        ClassicTriggerStarter0();
        ClassicTriggerStarter1();
        ClassicTriggerStarter2();
        ClassicTriggerStarter3();
        ClassicTriggerStarter4();
        ans.AnswerStart();
    }
    //플레이어 7
    if (playerexist(6)){
        setcurpl(6);
    }
    //플레이어 8
    if (playerexist(7)){
        setcurpl(7);
    }
}
function WaitableTriggerExec() {
}
function onPluginStart() {
    	randomize();
	sca.Init();
}
function beforeTriggerExec() 
{
   	EUDPlayerLoop()();
      	WaitableTriggerExec();
       ClassicTriggerExec();
       
       const cp = getcurpl();

	sca.Exec();
	
	switch(sca.ConnectStatus())
	{
	case 0:
		tct.print("\x13\x04런처와 연결이 끊겼습니다.");
		break;
	case 1:
		tct.print("\x13\x04런처와 연결되었습니다.");
		break;
	}
	
	switch(sca.GetLastMessage())
	{
		case 1:
			tct.print(v.Player_EXP[cp], "");
			sca.SaveData(0);
			v.Player_EXP[cp] = 0;
			break;
		case 2:
			tct.print("\x13\x04연결이 끊어졌습니다.");
			break;
		case 5:
			tct.print("\x13\x04Player_EXP의 정보를 저장중입니다.");
			break;
		case 6:
			tct.print("\x13\x04Player_EXP의 저장을 완료하였습니다.");
			break;
		case 7:
			tct.print("\x13\x04런처를 연결해 주세요.");
			break;
		case 9:
			tct.print("\x13\x04런처연결에 실패하였습니다.");
			break;
		default:
			tct.print("\x13\x04런처연결에 실패하였습니다.");
			sca.ResetLastMessage();
			break;
	}
       
    	EUDEndPlayerLoop();
   	ClassicTriggerStarter();
}
function afterTriggerExec() 
{
	
}