## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) function SetAlliance()
# (Line 2) {
@EUDTracedFunc
def SetAlliance():
    # (Line 3) if(getcurpl() < 6)
    _t1 = EUDIf()
    EUDTraceLog(3)
    if _t1(f_getcurpl() >= 6, neg=True):
        # (Line 4) {
        # (Line 5) SetAllianceStatus(P1, Ally);
        # (Line 6) SetAllianceStatus(P2, Ally);
        EUDTraceLog(5)
        DoActions(SetAllianceStatus(P1, Ally))
        # (Line 7) SetAllianceStatus(P3, Ally);
        EUDTraceLog(6)
        DoActions(SetAllianceStatus(P2, Ally))
        # (Line 8) SetAllianceStatus(P4, Ally);
        EUDTraceLog(7)
        DoActions(SetAllianceStatus(P3, Ally))
        # (Line 9) SetAllianceStatus(P5, Ally);
        EUDTraceLog(8)
        DoActions(SetAllianceStatus(P4, Ally))
        # (Line 10) SetAllianceStatus(P6, Ally);
        EUDTraceLog(9)
        DoActions(SetAllianceStatus(P5, Ally))
        # (Line 11) SetAllianceStatus(P7, Ally);
        EUDTraceLog(10)
        DoActions(SetAllianceStatus(P6, Ally))
        # (Line 12) }
        EUDTraceLog(11)
        DoActions(SetAllianceStatus(P7, Ally))
        # (Line 13) if(getcurpl() == 6)
    EUDEndIf()
    _t2 = EUDIf()
    EUDTraceLog(13)
    if _t2(f_getcurpl() == 6):
        # (Line 14) {
        # (Line 15) SetAllianceStatus(P1, Ally);
        # (Line 16) SetAllianceStatus(P2, Ally);
        EUDTraceLog(15)
        DoActions(SetAllianceStatus(P1, Ally))
        # (Line 17) SetAllianceStatus(P3, Ally);
        EUDTraceLog(16)
        DoActions(SetAllianceStatus(P2, Ally))
        # (Line 18) SetAllianceStatus(P4, Ally);
        EUDTraceLog(17)
        DoActions(SetAllianceStatus(P3, Ally))
        # (Line 19) SetAllianceStatus(P5, Ally);
        EUDTraceLog(18)
        DoActions(SetAllianceStatus(P4, Ally))
        # (Line 20) SetAllianceStatus(P6, Ally);
        EUDTraceLog(19)
        DoActions(SetAllianceStatus(P5, Ally))
        # (Line 21) SetAllianceStatus(P8, Ally);
        EUDTraceLog(20)
        DoActions(SetAllianceStatus(P6, Ally))
        # (Line 22) }
        EUDTraceLog(21)
        DoActions(SetAllianceStatus(P8, Ally))
        # (Line 23) if(getcurpl() == 7)
    EUDEndIf()
    _t3 = EUDIf()
    EUDTraceLog(23)
    if _t3(f_getcurpl() == 7):
        # (Line 24) {
        # (Line 25) SetAllianceStatus(P7, Ally);
        # (Line 26) }
        EUDTraceLog(25)
        DoActions(SetAllianceStatus(P7, Ally))
        # (Line 27) }
    EUDEndIf()
