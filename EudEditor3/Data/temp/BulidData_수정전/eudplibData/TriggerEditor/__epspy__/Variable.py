## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) const nameInventory = EUDArray(24 * 6);
nameInventory = _CGFW(lambda: [EUDArray(24 * 6)], 1)[0]
# (Line 2) const amountInventory = EUDArray(24 * 6);
amountInventory = _CGFW(lambda: [EUDArray(24 * 6)], 1)[0]
# (Line 4) const userCharacter = PVariable();
userCharacter = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 5) const userLevel 	= PVariable();
userLevel = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 6) const userExp 		= PVariable();
userExp = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 7) const userJob		= PVariable();
userJob = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 8) const userGold 		= PVariable();
userGold = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 9) const userMaxHp		= PVariable();
userMaxHp = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 10) const userMaxMP		= PVariable();
userMaxMP = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 11) const userCurMP		= PVariable();
userCurMP = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 12) const userAtk		= PVariable();
userAtk = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 13) const userDef		= PVariable();
userDef = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 14) const userWeapon	= PVariable();
userWeapon = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 15) const userArmor 	= PVariable();
userArmor = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 16) const userUseHPptn	= PVariable();
userUseHPptn = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 17) const userUesMPptn	= PVariable();
userUesMPptn = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 18) const userError 	= PVariable();
userError = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 20) const isAlive 		= PVariable();
isAlive = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 22) const openedInven 	= PVariable();
openedInven = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 23) const openedSetting = PVariable();
openedSetting = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 24) const openedQuest 	= PVariable();
openedQuest = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 26) const MaxExp = [10, 20, 30, 40, 50, 60, 70, 80, 90];
MaxExp = _CGFW(lambda: [_ARR(FlattenList([10, 20, 30, 40, 50, 60, 70, 80, 90]))], 1)[0]
# (Line 28) const maxInventorySlot = 24;
maxInventorySlot = _CGFW(lambda: [24], 1)[0]
