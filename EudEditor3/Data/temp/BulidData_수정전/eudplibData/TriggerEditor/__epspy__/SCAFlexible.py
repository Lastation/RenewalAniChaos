## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 2) const ws = 0x58F44A;
ws = _CGFW(lambda: [0x58F44A], 1)[0]
# (Line 3) const EntryPointLength = 8;//EntryPointLength
EntryPointLength = _CGFW(lambda: [8], 1)[0]
# (Line 4) const SpaceLength = 300;//DataBufferSize
SpaceLength = _CGFW(lambda: [300], 1)[0]
# (Line 5) const ObjectCount = 1;//ObjectCount
ObjectCount = _CGFW(lambda: [1], 1)[0]
# (Line 7) function Init(){
@EUDTracedFunc
def Init():
    # (Line 8) MPQAddFile('SCARCHIVEMAPCODE', py_open('scakeyfile', 'rb').read());
    EUDTraceLog(8)
    MPQAddFile('SCARCHIVEMAPCODE', open('scakeyfile', 'rb').read())
    # (Line 9) MPQAddFile('SCARCHIVEDATA', py_open('scadatafile', 'rb').read());
    EUDTraceLog(9)
    MPQAddFile('SCARCHIVEDATA', open('scadatafile', 'rb').read())
    # (Line 11) dwwrite_epd(EPD(ws) + 0, 3237427278);
    EUDTraceLog(11)
    f_dwwrite_epd(EPD(ws) + 0, 3237427278)
    # (Line 12) dwwrite_epd(EPD(ws) + 1, 2497022157);
    EUDTraceLog(12)
    f_dwwrite_epd(EPD(ws) + 1, 2497022157)
    # (Line 13) dwwrite_epd(EPD(ws) + 2, 1216961635);
    EUDTraceLog(13)
    f_dwwrite_epd(EPD(ws) + 2, 1216961635)
    # (Line 14) dwwrite_epd(EPD(ws) + 3, 1616179460);
    EUDTraceLog(14)
    f_dwwrite_epd(EPD(ws) + 3, 1616179460)
    # (Line 15) dwwrite_epd(EPD(ws) + 4, 1981214894);
    EUDTraceLog(15)
    f_dwwrite_epd(EPD(ws) + 4, 1981214894)
    # (Line 16) dwwrite_epd(EPD(ws) + 5, 1167246478);
    EUDTraceLog(16)
    f_dwwrite_epd(EPD(ws) + 5, 1167246478)
    # (Line 17) dwwrite_epd(EPD(ws) + 6, 3460446435);
    EUDTraceLog(17)
    f_dwwrite_epd(EPD(ws) + 6, 3460446435)
    # (Line 18) dwwrite_epd(EPD(ws) + 7, 159117470);
    EUDTraceLog(18)
    f_dwwrite_epd(EPD(ws) + 7, 159117470)
    # (Line 20) }
    # (Line 23) function Exec(){

@EUDTracedFunc
def Exec():
    # (Line 24) Init();
    EUDTraceLog(24)
    Init()
    # (Line 25) }
    # (Line 28) function ResetValue(tagNum, index){

@EUDTracedFunc
def ResetValue(tagNum, index):
    # (Line 29) const cp = getcurpl();
    EUDTraceLog(29)
    cp = f_getcurpl()
    # (Line 30) switch(tagNum){
    EUDTraceLog(30)
    EUDSwitch(tagNum)
    # (Line 31) case 0:
    _t1 = EUDSwitchCase()
    # (Line 32) SetDeaths(CurrentPlayer, SetTo, 0, 0);
    EUDTraceLog(31)
    if _t1(0):
        # (Line 33) break;
        EUDTraceLog(32)
        DoActions(SetDeaths(CurrentPlayer, SetTo, 0, 0))
        EUDTraceLog(33)
        EUDBreak()
        # (Line 34) }
    # (Line 35) }
    EUDEndSwitch()
    # (Line 38) function SaveValue(tagNum, Value, index){

@EUDTracedFunc
def SaveValue(tagNum, Value, index):
    # (Line 39) const cp = getcurpl();
    EUDTraceLog(39)
    cp = f_getcurpl()
    # (Line 40) switch(tagNum){
    EUDTraceLog(40)
    EUDSwitch(tagNum)
    # (Line 41) case 0:
    _t1 = EUDSwitchCase()
    # (Line 42) SetDeaths(CurrentPlayer, SetTo, Value, 0);
    EUDTraceLog(41)
    if _t1(0):
        # (Line 43) break;
        EUDTraceLog(42)
        DoActions(SetDeaths(CurrentPlayer, SetTo, Value, 0))
        EUDTraceLog(43)
        EUDBreak()
        # (Line 44) }
    # (Line 45) }
    EUDEndSwitch()
    # (Line 48) function SaveDataWriteValue(tagNum, BaseAddress, index){

@EUDTracedFunc
def SaveDataWriteValue(tagNum, BaseAddress, index):
    # (Line 49) const cp = getcurpl();
    EUDTraceLog(49)
    cp = f_getcurpl()
    # (Line 50) switch(tagNum){
    EUDTraceLog(50)
    EUDSwitch(tagNum)
    # (Line 51) case 0:
    _t1 = EUDSwitchCase()
    # (Line 52) {
    EUDTraceLog(51)
    if _t1(0):
        # (Line 53) const objValue = dwread_epd(0 * 12 + cp);
        EUDTraceLog(53)
        objValue = f_dwread_epd(0 * 12 + cp)
        # (Line 54) if(objValue != 0){
        _t2 = EUDIf()
        EUDTraceLog(54)
        if _t2(objValue == 0, neg=True):
            # (Line 55) if (objValue > 0xFFFF){
            _t3 = EUDIf()
            EUDTraceLog(55)
            if _t3(objValue <= 0xFFFF, neg=True):
                # (Line 56) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x1000 + tagNum);
                EUDTraceLog(56)
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x1000 + tagNum)
                # (Line 57) index++;
                EUDTraceLog(57)
                index.__iadd__(1)
                # (Line 58) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                EUDTraceLog(58)
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue // 0x10000)
                # (Line 59) index++;
                EUDTraceLog(59)
                index.__iadd__(1)
                # (Line 60) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                EUDTraceLog(60)
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue % 0x10000)
                # (Line 61) index++;
                EUDTraceLog(61)
                index.__iadd__(1)
                # (Line 62) }else{
            if EUDElse()():
                # (Line 63) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x2000 + tagNum);
                EUDTraceLog(63)
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x2000 + tagNum)
                # (Line 64) index++;
                EUDTraceLog(64)
                index.__iadd__(1)
                # (Line 65) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                EUDTraceLog(65)
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue)
                # (Line 66) index++;
                EUDTraceLog(66)
                index.__iadd__(1)
                # (Line 67) }
                # (Line 68) }
            EUDEndIf()
            # (Line 69) }
        EUDEndIf()
        # (Line 70) break;
        EUDTraceLog(70)
        EUDBreak()
        # (Line 71) }
    # (Line 73) return index;
    EUDEndSwitch()
    EUDTraceLog(73)
    EUDReturn(index)
    # (Line 74) }
    # (Line 77) function LoadDataReadValue(BaseAddress, i){

@EUDTracedFunc
def LoadDataReadValue(BaseAddress, i):
    # (Line 78) const indicator = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
    EUDTraceLog(78)
    indicator = f_wread_epd(BaseAddress + i // 2, (i % 2) * 2)
    # (Line 80) if (indicator != 0){
    _t1 = EUDIf()
    EUDTraceLog(80)
    if _t1(indicator == 0, neg=True):
        # (Line 81) const spec = indicator / 0x1000;
        EUDTraceLog(81)
        spec = indicator // 0x1000
        # (Line 82) const ObjNum = indicator % 0x1000;
        EUDTraceLog(82)
        ObjNum = indicator % 0x1000
        # (Line 83) var vindex = 0;
        EUDTraceLog(83)
        vindex = EUDVariable()
        vindex << (0)
        # (Line 84) var value = 0;
        EUDTraceLog(84)
        value = EUDVariable()
        value << (0)
        # (Line 85) if (spec == 1){
        _t2 = EUDIf()
        EUDTraceLog(85)
        if _t2(spec == 1):
            # (Line 87) i++;
            EUDTraceLog(87)
            i.__iadd__(1)
            # (Line 88) const value1 = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            EUDTraceLog(88)
            value1 = f_wread_epd(BaseAddress + i // 2, (i % 2) * 2)
            # (Line 89) i++;
            EUDTraceLog(89)
            i.__iadd__(1)
            # (Line 90) const value2 = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            EUDTraceLog(90)
            value2 = f_wread_epd(BaseAddress + i // 2, (i % 2) * 2)
            # (Line 91) value = value1 * 0x10000 + value2;
            EUDTraceLog(91)
            value << (value1 * 0x10000 + value2)
            # (Line 92) }else if (spec == 2){
        _t3 = EUDElseIf()
        EUDTraceLog(92)
        if _t3(spec == 2):
            # (Line 94) i++;
            EUDTraceLog(94)
            i.__iadd__(1)
            # (Line 95) value = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            EUDTraceLog(95)
            value << (f_wread_epd(BaseAddress + i // 2, (i % 2) * 2))
            # (Line 96) }else if (spec == 3){
        _t4 = EUDElseIf()
        EUDTraceLog(96)
        if _t4(spec == 3):
            # (Line 98) i++;
            EUDTraceLog(98)
            i.__iadd__(1)
            # (Line 99) vindex = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            EUDTraceLog(99)
            vindex << (f_wread_epd(BaseAddress + i // 2, (i % 2) * 2))
            # (Line 100) i++;
            EUDTraceLog(100)
            i.__iadd__(1)
            # (Line 101) const value1 = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            EUDTraceLog(101)
            value1 = f_wread_epd(BaseAddress + i // 2, (i % 2) * 2)
            # (Line 102) i++;
            EUDTraceLog(102)
            i.__iadd__(1)
            # (Line 103) const value2 = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            EUDTraceLog(103)
            value2 = f_wread_epd(BaseAddress + i // 2, (i % 2) * 2)
            # (Line 104) value = value1 * 0x10000 + value2;
            EUDTraceLog(104)
            value << (value1 * 0x10000 + value2)
            # (Line 105) }else if (spec == 4){
        _t5 = EUDElseIf()
        EUDTraceLog(105)
        if _t5(spec == 4):
            # (Line 107) i++;
            EUDTraceLog(107)
            i.__iadd__(1)
            # (Line 108) vindex = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            EUDTraceLog(108)
            vindex << (f_wread_epd(BaseAddress + i // 2, (i % 2) * 2))
            # (Line 109) i++;
            EUDTraceLog(109)
            i.__iadd__(1)
            # (Line 110) value = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            EUDTraceLog(110)
            value << (f_wread_epd(BaseAddress + i // 2, (i % 2) * 2))
            # (Line 111) }
            # (Line 112) SaveValue(ObjNum, value, vindex);
        EUDEndIf()
        EUDTraceLog(112)
        SaveValue(ObjNum, value, vindex)
        # (Line 113) }
        # (Line 114) return i;
    EUDEndIf()
    EUDTraceLog(114)
    EUDReturn(i)
    # (Line 115) }
