## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 3) const Goblin = EUDArray(5);
Goblin = _CGFW(lambda: [EUDArray(5)], 1)[0]
# (Line 5) function GoblinSpawn()
# (Line 6) {
@EUDTracedFunc
def GoblinSpawn():
    # (Line 7) for(var i = 0; i < 5; i++)
    EUDTraceLog(7)
    i = EUDVariable()
    i << (0)
    _t1 = EUDWhile()
    EUDTraceLog(7)
    if _t1(i >= 5, neg=True):
        def _t2():
            EUDTraceLog(7)
            i.__iadd__(1)
        # (Line 8) {
        # (Line 9) if(Goblin[i] == 0)
        _t3 = EUDIf()
        EUDTraceLog(9)
        if _t3(Goblin[i] == 0):
            # (Line 10) {
            # (Line 11) Goblin[i] = epdread_epd(EPD(0x628438));
            EUDTraceLog(11)
            _ARRW(Goblin, i) << (f_epdread_epd(EPD(0x628438)))
            # (Line 12) CreateUnit(1, "Zerg Zergling", "Start", P1);
            # (Line 13) }
            EUDTraceLog(12)
            DoActions(CreateUnit(1, "Zerg Zergling", "Start", P1))
            # (Line 15) if(bread_epd(Goblin[i] + 0x04D / 4,  0x04D % 4) == 0)
        EUDEndIf()
        _t4 = EUDIf()
        EUDTraceLog(15)
        if _t4(f_bread_epd(Goblin[i] + 0x04D // 4, 0x04D % 4) == 0):
            # (Line 16) {
            # (Line 17) Goblin[i] = 0;
            EUDTraceLog(17)
            _ARRW(Goblin, i) << (0)
            # (Line 18) }
            # (Line 19) }
        EUDEndIf()
        # (Line 20) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
