## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Variable as v;
import Variable as v
# (Line 3) const s = StringBuffer(1000);
s = _CGFW(lambda: [StringBuffer(1000)], 1)[0]
# (Line 4) const num = PVariable();
num = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 5) const page = PVariable();
page = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 7) function ResetInventory();
# (Line 8) function OpenInventory();
# (Line 9) function CloseInventory();
# (Line 10) function ShowInventory();
# (Line 12) function ResetInventory()
# (Line 13) {
@EUDTracedFunc
def ResetInventory():
    # (Line 14) const cp = getcurpl();
    EUDTraceLog(14)
    cp = f_getcurpl()
    # (Line 15) for(var i = 0; i < 24; i++)
    EUDTraceLog(15)
    i = EUDVariable()
    i << (0)
    _t1 = EUDWhile()
    EUDTraceLog(15)
    if _t1(i >= 24, neg=True):
        def _t2():
            EUDTraceLog(15)
            i.__iadd__(1)
        # (Line 16) {
        # (Line 17) v.nameInventory[v.maxInventorySlot * getcurpl() + i] = Db("-");
        EUDTraceLog(17)
        _ARRW(v.nameInventory, v.maxInventorySlot * f_getcurpl() + i) << (Db("-"))
        # (Line 18) v.amountInventory[v.maxInventorySlot * getcurpl() + i] = 0;
        EUDTraceLog(18)
        _ARRW(v.amountInventory, v.maxInventorySlot * f_getcurpl() + i) << (0)
        # (Line 19) }
        # (Line 20) s.print("\x04인벤토리 초기화 완료");
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    EUDTraceLog(20)
    s.print("\x04인벤토리 초기화 완료")
    # (Line 21) }
    # (Line 23) function OpenInventory()

# (Line 24) {
@EUDTracedFunc
def OpenInventory():
    # (Line 25) v.openedInven[getcurpl()] = 1;
    EUDTraceLog(25)
    _ARRW(v.openedInven, f_getcurpl()) << (1)
    # (Line 26) }
    # (Line 28) function ShowInventory()

# (Line 29) {
@EUDTracedFunc
def ShowInventory():
    # (Line 30) const cp = getcurpl();
    EUDTraceLog(30)
    cp = f_getcurpl()
    # (Line 32) if(v.openedInven[cp] == 1)
    _t1 = EUDIf()
    EUDTraceLog(32)
    if _t1(v.openedInven[cp] == 1):
        # (Line 33) {
        # (Line 34) if(page[cp] == 1) num[cp] = 0;
        _t2 = EUDIf()
        EUDTraceLog(34)
        if _t2(page[cp] == 1):
            EUDTraceLog(34)
            _ARRW(num, cp) << (0)
            # (Line 35) else if(page[cp] == 2) num[cp] = 7;
        _t3 = EUDElseIf()
        EUDTraceLog(35)
        if _t3(page[cp] == 2):
            EUDTraceLog(35)
            _ARRW(num, cp) << (7)
            # (Line 36) else if(page[cp] == 3) num[cp] = 14;
        _t4 = EUDElseIf()
        EUDTraceLog(36)
        if _t4(page[cp] == 3):
            EUDTraceLog(36)
            _ARRW(num, cp) << (14)
            # (Line 37) else if(page[cp] == 4) num[cp] = 24;
        _t5 = EUDElseIf()
        EUDTraceLog(37)
        if _t5(page[cp] == 4):
            EUDTraceLog(37)
            _ARRW(num, cp) << (24)
            # (Line 39) if(Deaths(CurrentPlayer, Exactly, 2, "Terran Dropship") && page[cp] > 1) page[cp] -= 1;
        EUDEndIf()
        _t6 = EUDIf()
        EUDTraceLog(39)
        if _t6(EUDSCAnd()(Deaths(CurrentPlayer, Exactly, 2, "Terran Dropship"))(page[cp] <= 1, neg=True)()):
            EUDTraceLog(39)
            _ARRW(page, cp).__isub__(1)
            # (Line 40) else if(Deaths(CurrentPlayer, Exactly, 4, "Terran Dropship") && page[cp] < 4) page[cp] += 1;
        _t7 = EUDElseIf()
        EUDTraceLog(40)
        if _t7(EUDSCAnd()(Deaths(CurrentPlayer, Exactly, 4, "Terran Dropship"))(page[cp] >= 4, neg=True)()):
            EUDTraceLog(40)
            _ARRW(page, cp).__iadd__(1)
            # (Line 42) s.printAt(0, "  \x1cINVENTORY \x1d", page[cp], " page");
        EUDEndIf()
        EUDTraceLog(42)
        s.printAt(0, "  \x1cINVENTORY \x1d", page[cp], " page")
        # (Line 43) if(v.amountInventory[24 * cp + num[cp]] != 0)
        _t8 = EUDIf()
        EUDTraceLog(43)
        if _t8(v.amountInventory[24 * cp + num[cp]] == 0, neg=True):
            # (Line 44) s.printAt(1, "  \x0f[2]  \x04", ptr2s(v.nameInventory[24 * cp + num[cp]]), " \x04 ", v.amountInventory[24 * cp + num[cp]], "\x04개");
            EUDTraceLog(44)
            s.printAt(1, "  \x0f[2]  \x04", ptr2s(v.nameInventory[24 * cp + num[cp]]), " \x04 ", v.amountInventory[24 * cp + num[cp]], "\x04개")
            # (Line 45) else s.printAt(1, "  \x0f[2]  \x05비어 있음");
        if EUDElse()():
            EUDTraceLog(45)
            s.printAt(1, "  \x0f[2]  \x05비어 있음")
            # (Line 46) if(v.amountInventory[24 * cp + num[cp] + 1] != 0)
        EUDEndIf()
        _t9 = EUDIf()
        EUDTraceLog(46)
        if _t9(v.amountInventory[24 * cp + num[cp] + 1] == 0, neg=True):
            # (Line 47) s.printAt(2, "  \x0f[3]  \x04", ptr2s(v.nameInventory[24 * cp + num[cp] + 1]), " \x04 ", v.amountInventory[24 * cp + num[cp] + 1], "\x04개");
            EUDTraceLog(47)
            s.printAt(2, "  \x0f[3]  \x04", ptr2s(v.nameInventory[24 * cp + num[cp] + 1]), " \x04 ", v.amountInventory[24 * cp + num[cp] + 1], "\x04개")
            # (Line 48) else s.printAt(2, "  \x0f[3]  \x05비어 있음");
        if EUDElse()():
            EUDTraceLog(48)
            s.printAt(2, "  \x0f[3]  \x05비어 있음")
            # (Line 49) if(v.amountInventory[24 * cp + num[cp] + 2] != 0)
        EUDEndIf()
        _t10 = EUDIf()
        EUDTraceLog(49)
        if _t10(v.amountInventory[24 * cp + num[cp] + 2] == 0, neg=True):
            # (Line 50) s.printAt(3, "  \x0f[4]  \x04", ptr2s(v.nameInventory[24 * cp + num[cp] + 2]), " \x04 ", v.amountInventory[24 * cp + num[cp] + 2], "\x04개");
            EUDTraceLog(50)
            s.printAt(3, "  \x0f[4]  \x04", ptr2s(v.nameInventory[24 * cp + num[cp] + 2]), " \x04 ", v.amountInventory[24 * cp + num[cp] + 2], "\x04개")
            # (Line 51) else s.printAt(3, "  \x0f[4]  \x05비어 있음");
        if EUDElse()():
            EUDTraceLog(51)
            s.printAt(3, "  \x0f[4]  \x05비어 있음")
            # (Line 52) if(v.amountInventory[24 * cp + num[cp] + 3] != 0)
        EUDEndIf()
        _t11 = EUDIf()
        EUDTraceLog(52)
        if _t11(v.amountInventory[24 * cp + num[cp] + 3] == 0, neg=True):
            # (Line 53) s.printAt(4, "  \x0f[5]  \x04", ptr2s(v.nameInventory[24 * cp + num[cp] + 3]), " \x04 ", v.amountInventory[24 * cp + num[cp] + 3], "\x04개");
            EUDTraceLog(53)
            s.printAt(4, "  \x0f[5]  \x04", ptr2s(v.nameInventory[24 * cp + num[cp] + 3]), " \x04 ", v.amountInventory[24 * cp + num[cp] + 3], "\x04개")
            # (Line 54) else s.printAt(4, "  \x0f[5]  \x05비어 있음");
        if EUDElse()():
            EUDTraceLog(54)
            s.printAt(4, "  \x0f[5]  \x05비어 있음")
            # (Line 55) if(v.amountInventory[24 * cp + num[cp] + 4] != 0)
        EUDEndIf()
        _t12 = EUDIf()
        EUDTraceLog(55)
        if _t12(v.amountInventory[24 * cp + num[cp] + 4] == 0, neg=True):
            # (Line 56) s.printAt(5, "  \x0f[6]  \x04", ptr2s(v.nameInventory[24 * cp + num[cp] + 4]), " \x04 ", v.amountInventory[24 * cp + num[cp] + 4], "\x04개");
            EUDTraceLog(56)
            s.printAt(5, "  \x0f[6]  \x04", ptr2s(v.nameInventory[24 * cp + num[cp] + 4]), " \x04 ", v.amountInventory[24 * cp + num[cp] + 4], "\x04개")
            # (Line 57) else s.printAt(5, "  \x0f[6]  \x05비어 있음");
        if EUDElse()():
            EUDTraceLog(57)
            s.printAt(5, "  \x0f[6]  \x05비어 있음")
            # (Line 58) if(v.amountInventory[24 * cp + num[cp] + 5] != 0)
        EUDEndIf()
        _t13 = EUDIf()
        EUDTraceLog(58)
        if _t13(v.amountInventory[24 * cp + num[cp] + 5] == 0, neg=True):
            # (Line 59) s.printAt(6, "  \x0f[7]  \x04", ptr2s(v.nameInventory[24 * cp + num[cp] + 5]), " \x04 ", v.amountInventory[24 * cp + num[cp] + 5], "\x04개");
            EUDTraceLog(59)
            s.printAt(6, "  \x0f[7]  \x04", ptr2s(v.nameInventory[24 * cp + num[cp] + 5]), " \x04 ", v.amountInventory[24 * cp + num[cp] + 5], "\x04개")
            # (Line 60) else s.printAt(6, "  \x0f[7]  \x05비어 있음");
        if EUDElse()():
            EUDTraceLog(60)
            s.printAt(6, "  \x0f[7]  \x05비어 있음")
            # (Line 61) }
        EUDEndIf()
        # (Line 62) }
    EUDEndIf()
    # (Line 64) function CloseInventory()

# (Line 65) {
@EUDTracedFunc
def CloseInventory():
    # (Line 66) v.openedInven[getcurpl()] = 0;
    EUDTraceLog(66)
    _ARRW(v.openedInven, f_getcurpl()) << (0)
    # (Line 67) s.print("\n\n\n\n\n\n\n\n");
    EUDTraceLog(67)
    s.print("\n\n\n\n\n\n\n\n")
    # (Line 68) }
