## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Variable as v;
import Variable as v
# (Line 3) const s = StringBuffer(1000);
s = _CGFW(lambda: [StringBuffer(1000)], 1)[0]
# (Line 5) function SetHealth(Cunit, modify: TrgModifier, val);
# (Line 6) function Heal();
# (Line 9) function SetHealth(Cunit, modify: TrgModifier, val)
# (Line 10) {
@EUDTracedTypedFunc([None, TrgModifier, None])
def SetHealth(Cunit, modify, val):
    # (Line 11) const cp = getcurpl();
    EUDTraceLog(11)
    cp = f_getcurpl()
    # (Line 12) SetMemoryEPD(v.userCharacter[cp] + 0x008 / 4, modify, val * 256);
    # (Line 14) if(MemoryEPD(v.userCharacter[cp] + 0x008 / 4, AtLeast, v.userMaxHp[cp] * 256))
    EUDTraceLog(12)
    DoActions(SetMemoryEPD(v.userCharacter[cp] + 0x008 // 4, modify, val * 256))
    _t1 = EUDIf()
    EUDTraceLog(14)
    if _t1(MemoryEPD(v.userCharacter[cp] + 0x008 // 4, AtLeast, v.userMaxHp[cp] * 256)):
        # (Line 15) {
        # (Line 16) SetMemoryEPD(v.userCharacter[cp] + 0x008 / 4, SetTo, v.userMaxHp[cp] * 256);
        # (Line 17) }
        EUDTraceLog(16)
        DoActions(SetMemoryEPD(v.userCharacter[cp] + 0x008 // 4, SetTo, v.userMaxHp[cp] * 256))
        # (Line 18) }
    EUDEndIf()
    # (Line 20) function Heal() {

@EUDTracedFunc
def Heal():
    # (Line 21) const cp = getcurpl();
    EUDTraceLog(21)
    cp = f_getcurpl()
    # (Line 22) SetMemoryEPD(v.userCharacter[cp] + 0x008 / 4, SetTo, v.userMaxHp[cp] * 256);
    # (Line 23) }
    EUDTraceLog(22)
    DoActions(SetMemoryEPD(v.userCharacter[cp] + 0x008 // 4, SetTo, v.userMaxHp[cp] * 256))
    # (Line 25) function LevelCheck()

# (Line 26) {
@EUDTracedFunc
def LevelCheck():
    # (Line 27) const cp = getcurpl();
    EUDTraceLog(27)
    cp = f_getcurpl()
    # (Line 28) if(v.userExp[cp] >= v.MaxExp[v.userLevel[cp] - 1] && v.userLevel[cp] < 100)
    _t1 = EUDIf()
    EUDTraceLog(28)
    if _t1(EUDSCAnd()(v.userExp[cp] >= v.MaxExp[v.userLevel[cp] - 1])(v.userLevel[cp] >= 100, neg=True)()):
        # (Line 29) {
        # (Line 30) v.userExp[cp] -= v.MaxExp[v.userLevel[cp] - 1];
        EUDTraceLog(30)
        _ARRW(v.userExp, cp).__isub__(v.MaxExp[v.userLevel[cp] - 1])
        # (Line 31) v.userLevel[cp] += 1;
        EUDTraceLog(31)
        _ARRW(v.userLevel, cp).__iadd__(1)
        # (Line 32) }
        # (Line 33) }
    EUDEndIf()
