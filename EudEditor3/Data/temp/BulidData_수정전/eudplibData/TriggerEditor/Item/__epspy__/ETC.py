## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) object Item {
# (Line 2) var name;
class Item(EUDStruct):
    # (Line 3) var price;
    # (Line 4) var content;
    # (Line 5) var max;
    # (Line 6) };
    # (Line 8) const itemUnsawnTimber 	= Item();
    _fields_ = [
        'name',
        'price',
        'content',
        'max',
    ]

itemUnsawnTimber = _CGFW(lambda: [Item()], 1)[0]
# (Line 9) const itemTimber 		= Item();
itemTimber = _CGFW(lambda: [Item()], 1)[0]
# (Line 10) const itemIronOre 		= Item();
itemIronOre = _CGFW(lambda: [Item()], 1)[0]
# (Line 12) const UnsawnTimber 	= PVariable();
UnsawnTimber = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 13) const Timber 		= PVariable();
Timber = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 14) const IronOre 		= PVariable();
IronOre = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 16) function SetEtcItemInfo()
# (Line 17) {
@EUDTracedFunc
def SetEtcItemInfo():
    # (Line 18) itemUnsawnTimber.name 		= Db("원목");
    EUDTraceLog(18)
    _ATTW(itemUnsawnTimber, 'name') << (Db("원목"))
    # (Line 19) itemUnsawnTimber.price 		= 20;
    EUDTraceLog(19)
    _ATTW(itemUnsawnTimber, 'price') << (20)
    # (Line 20) itemUnsawnTimber.content 	= Db("");
    EUDTraceLog(20)
    _ATTW(itemUnsawnTimber, 'content') << (Db(""))
    # (Line 21) itemUnsawnTimber.max 		= 50;
    EUDTraceLog(21)
    _ATTW(itemUnsawnTimber, 'max') << (50)
    # (Line 23) itemTimber.name 			= Db("목재");
    EUDTraceLog(23)
    _ATTW(itemTimber, 'name') << (Db("목재"))
    # (Line 24) itemTimber.price 			= 20;
    EUDTraceLog(24)
    _ATTW(itemTimber, 'price') << (20)
    # (Line 25) itemTimber.content 			= Db("");
    EUDTraceLog(25)
    _ATTW(itemTimber, 'content') << (Db(""))
    # (Line 26) itemTimber.max				= 50;
    EUDTraceLog(26)
    _ATTW(itemTimber, 'max') << (50)
    # (Line 28) itemIronOre.name 			= Db("철광석");
    EUDTraceLog(28)
    _ATTW(itemIronOre, 'name') << (Db("철광석"))
    # (Line 29) itemIronOre.price 			= 20;
    EUDTraceLog(29)
    _ATTW(itemIronOre, 'price') << (20)
    # (Line 30) itemIronOre.content 		= Db("");
    EUDTraceLog(30)
    _ATTW(itemIronOre, 'content') << (Db(""))
    # (Line 31) itemIronOre.max				= 99;
    EUDTraceLog(31)
    _ATTW(itemIronOre, 'max') << (99)
    # (Line 32) }
