## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import player.NewCharacter as nc;
from player import NewCharacter as nc
# (Line 2) import player.Inventory as inven;
from player import Inventory as inven
# (Line 3) import Variable as v;
import Variable as v
# (Line 4) const GameSpeed = 21;
GameSpeed = _CGFW(lambda: [21], 1)[0]
# (Line 5) const inv = PVariable();
inv = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 7) function onPluginStart()
# (Line 8) {
@EUDFunc
def onPluginStart():
    # (Line 9) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 11) nc.CreateCharacter();
    nc.CreateCharacter()
    # (Line 12) inven.ResetInventory();
    inven.ResetInventory()
    # (Line 14) EUDEndPlayerLoop();
    EUDEndPlayerLoop()
    # (Line 15) }
    # (Line 17) function beforeTriggerExec()

# (Line 18) {
@EUDFunc
def beforeTriggerExec():
    # (Line 19) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 25) if(Deaths(CurrentPlayer, Exactly, 4, "Terran Dropship"))
    if EUDIf()(Deaths(CurrentPlayer, Exactly, 4, "Terran Dropship")):
        # (Line 26) {
        # (Line 27) if(inv[getcurpl()] == 0) inven.OpenInventory();
        if EUDIf()(inv[f_getcurpl()] == 0):
            inven.OpenInventory()
            # (Line 28) else inven.CloseInventory();
        if EUDElse()():
            inven.CloseInventory()
            # (Line 29) }
        EUDEndIf()
        # (Line 30) if(inv[getcurpl()] == 1) inven.ShowInventory();
    EUDEndIf()
    if EUDIf()(inv[f_getcurpl()] == 1):
        inven.ShowInventory()
        # (Line 31) EUDEndPlayerLoop();
    EUDEndIf()
    EUDEndPlayerLoop()
    # (Line 32) }
    # (Line 34) function afterTriggerExec()

# (Line 35) {
@EUDFunc
def afterTriggerExec():
    # (Line 36) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 37) eprintln(inv[getcurpl()]);
    f_eprintln(inv[f_getcurpl()])
    # (Line 38) EUDEndPlayerLoop();
    EUDEndPlayerLoop()
    # (Line 39) SetMemory(0x5124F0, SetTo, GameSpeed);
    # (Line 40) }
    DoActions(SetMemory(0x5124F0, SetTo, GameSpeed))
