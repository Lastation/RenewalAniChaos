## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) const s = StringBuffer();
s = _CGFW(lambda: [StringBuffer()], 1)[0]
# (Line 3) function Answer_Text()
# (Line 4) {
@EUDFunc
def Answer_Text():
    # (Line 5) const now_music = dwread_epd(EPD(0x58A364 + 48 * 179 + 4 * 7));
    now_music = f_dwread_epd(EPD(0x58A364 + 48 * 179 + 4 * 7))
    # (Line 7) switch(now_music)
    EUDSwitch(now_music)
    # (Line 8) {
    # (Line 9) case 0:
    _t1 = EUDSwitchCase()
    # (Line 10) s.printAt(0, "\x13\x04 AniSong \x032010 - \x0112020 \x08by.Kurokumo");
    if _t1(0):
        s.printAt(0, "\x13\x04 AniSong \x032010 - \x0112020 \x08by.Kurokumo")
        # (Line 11) break;
        EUDBreak()
        # (Line 12) case 1:
    _t2 = EUDSwitchCase()
    # (Line 13) s.printAt(0, "\x13\x04우리들의 LIVE 너와의 LIFE\n\x13\x03Artist : \x08μ's");
    if _t2(1):
        s.printAt(0, "\x13\x04우리들의 LIVE 너와의 LIFE\n\x13\x03Artist : \x08μ's")
        # (Line 14) break;
        EUDBreak()
        # (Line 15) case 2:
    _t3 = EUDSwitchCase()
    # (Line 16) s.printAt(0, "\x13\x04우정 노 체인지\n\x13\x03Artist : \x08μ's");
    if _t3(2):
        s.printAt(0, "\x13\x04우정 노 체인지\n\x13\x03Artist : \x08μ's")
        # (Line 17) break;
        EUDBreak()
        # (Line 18) case 3:
    _t4 = EUDSwitchCase()
    # (Line 19) s.printAt(0, "\x13\x04Snow Halation\n\x13\x03Artist : \x08μ's");
    if _t4(3):
        s.printAt(0, "\x13\x04Snow Halation\n\x13\x03Artist : \x08μ's")
        # (Line 20) break;
        EUDBreak()
        # (Line 21) case 4:
    _t5 = EUDSwitchCase()
    # (Line 22) s.printAt(0, "\x13\x04baby maybe 사랑의버튼\n\x13\x03Artist : \x08μ's");
    if _t5(4):
        s.printAt(0, "\x13\x04baby maybe 사랑의버튼\n\x13\x03Artist : \x08μ's")
        # (Line 23) break;
        EUDBreak()
        # (Line 24) case 5:
    _t6 = EUDSwitchCase()
    # (Line 25) s.printAt(0, "\x13\x04여름빛 미소로 1,2,Jump\n\x13\x03Artist : \x08μ's");
    if _t6(5):
        s.printAt(0, "\x13\x04여름빛 미소로 1,2,Jump\n\x13\x03Artist : \x08μ's")
        # (Line 26) break;
        EUDBreak()
        # (Line 27) case 6:
    _t7 = EUDSwitchCase()
    # (Line 28) s.printAt(0, "\x13\x04꼬옥'love'로 접근중 !\n\x13\x03Artist : \x08μ's");
    if _t7(6):
        s.printAt(0, "\x13\x04꼬옥'love'로 접근중 !\n\x13\x03Artist : \x08μ's")
        # (Line 29) break;
        EUDBreak()
        # (Line 30) case 7:
    _t8 = EUDSwitchCase()
    # (Line 31) s.printAt(0, "\x13\x04사랑해 만세\n\x13\x03Artist : \x08μ's");
    if _t8(7):
        s.printAt(0, "\x13\x04사랑해 만세\n\x13\x03Artist : \x08μ's")
        # (Line 32) break;
        EUDBreak()
        # (Line 33) }
    # (Line 34) }
    EUDEndSwitch()
