## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import variable as n0;
import variable as n0
# (Line 3) const ws = 0x58F44A;
ws = _CGFW(lambda: [0x58F44A], 1)[0]
# (Line 4) const EntryPointLength = 8;//EntryPointLength
EntryPointLength = _CGFW(lambda: [8], 1)[0]
# (Line 5) const SpaceLength = 200;//DataBufferSize
SpaceLength = _CGFW(lambda: [200], 1)[0]
# (Line 6) const ObjectCount = 9;//ObjectCount
ObjectCount = _CGFW(lambda: [9], 1)[0]
# (Line 8) function Init(){
@EUDFunc
def Init():
    # (Line 9) MPQAddFile('SCARCHIVEMAPCODE', py_open('scakeyfile', 'rb').read());
    MPQAddFile('SCARCHIVEMAPCODE', open('scakeyfile', 'rb').read())
    # (Line 10) MPQAddFile('SCARCHIVEDATA', py_open('scadatafile', 'rb').read());
    MPQAddFile('SCARCHIVEDATA', open('scadatafile', 'rb').read())
    # (Line 12) dwwrite_epd(EPD(ws) + 0, 2968250430);
    f_dwwrite_epd(EPD(ws) + 0, 2968250430)
    # (Line 13) dwwrite_epd(EPD(ws) + 1, 2104957647);
    f_dwwrite_epd(EPD(ws) + 1, 2104957647)
    # (Line 14) dwwrite_epd(EPD(ws) + 2, 1536203667);
    f_dwwrite_epd(EPD(ws) + 2, 1536203667)
    # (Line 15) dwwrite_epd(EPD(ws) + 3, 2636220041);
    f_dwwrite_epd(EPD(ws) + 3, 2636220041)
    # (Line 16) dwwrite_epd(EPD(ws) + 4, 1267262437);
    f_dwwrite_epd(EPD(ws) + 4, 1267262437)
    # (Line 17) dwwrite_epd(EPD(ws) + 5, 1927728667);
    f_dwwrite_epd(EPD(ws) + 5, 1927728667)
    # (Line 18) dwwrite_epd(EPD(ws) + 6, 1897467734);
    f_dwwrite_epd(EPD(ws) + 6, 1897467734)
    # (Line 19) dwwrite_epd(EPD(ws) + 7, 1426524437);
    f_dwwrite_epd(EPD(ws) + 7, 1426524437)
    # (Line 21) }
    # (Line 24) function Exec(){

@EUDFunc
def Exec():
    # (Line 25) Init();
    Init()
    # (Line 26) }
    # (Line 29) function ResetValue(tagNum, index){

@EUDFunc
def ResetValue(tagNum, index):
    # (Line 30) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 31) switch(tagNum){
    EUDSwitch(tagNum)
    # (Line 32) case 0:
    _t1 = EUDSwitchCase()
    # (Line 33) n0.v1[cp] = 0;
    if _t1(0):
        _ARRW(n0.v1, cp) << (0)
        # (Line 34) break;
        EUDBreak()
        # (Line 35) case 1:
    _t2 = EUDSwitchCase()
    # (Line 36) n0.v2[cp] = 0;
    if _t2(1):
        _ARRW(n0.v2, cp) << (0)
        # (Line 37) break;
        EUDBreak()
        # (Line 38) case 2:
    _t3 = EUDSwitchCase()
    # (Line 39) n0.v3[cp] = 0;
    if _t3(2):
        _ARRW(n0.v3, cp) << (0)
        # (Line 40) break;
        EUDBreak()
        # (Line 41) case 3:
    _t4 = EUDSwitchCase()
    # (Line 42) n0.v4[cp] = 0;
    if _t4(3):
        _ARRW(n0.v4, cp) << (0)
        # (Line 43) break;
        EUDBreak()
        # (Line 44) case 4:
    _t5 = EUDSwitchCase()
    # (Line 45) SetDeaths(CurrentPlayer, SetTo, 0, 0);
    if _t5(4):
        # (Line 46) break;
        DoActions(SetDeaths(CurrentPlayer, SetTo, 0, 0))
        EUDBreak()
        # (Line 47) case 5:
    _t6 = EUDSwitchCase()
    # (Line 48) SetDeaths(CurrentPlayer, SetTo, 0, 1);
    if _t6(5):
        # (Line 49) break;
        DoActions(SetDeaths(CurrentPlayer, SetTo, 0, 1))
        EUDBreak()
        # (Line 50) case 6:
    _t7 = EUDSwitchCase()
    # (Line 51) SetDeaths(CurrentPlayer, SetTo, 0, 2);
    if _t7(6):
        # (Line 52) break;
        DoActions(SetDeaths(CurrentPlayer, SetTo, 0, 2))
        EUDBreak()
        # (Line 53) case 7:
    _t8 = EUDSwitchCase()
    # (Line 54) SetDeaths(CurrentPlayer, SetTo, 0, 3);
    if _t8(7):
        # (Line 55) break;
        DoActions(SetDeaths(CurrentPlayer, SetTo, 0, 3))
        EUDBreak()
        # (Line 56) case 8:
    _t9 = EUDSwitchCase()
    # (Line 57) const alen = n0.array1.length / 8;
    if _t9(8):
        alen = n0.array1.length // 8
        # (Line 58) for(var i = 0 ; i < alen; i++){
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i >= alen, neg=True):
            def _t11():
                i.__iadd__(1)
            # (Line 59) n0.array1[alen * cp + i] = 0;
            _ARRW(n0.array1, alen * cp + i) << (0)
            # (Line 60) }
            # (Line 61) break;
            EUDSetContinuePoint()
            _t11()
        EUDEndWhile()
        EUDBreak()
        # (Line 62) }
    # (Line 63) }
    EUDEndSwitch()
    # (Line 66) function SaveValue(tagNum, Value, index){

@EUDFunc
def SaveValue(tagNum, Value, index):
    # (Line 67) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 68) switch(tagNum){
    EUDSwitch(tagNum)
    # (Line 69) case 0:
    _t1 = EUDSwitchCase()
    # (Line 70) n0.v1[cp] = Value;
    if _t1(0):
        _ARRW(n0.v1, cp) << (Value)
        # (Line 71) break;
        EUDBreak()
        # (Line 72) case 1:
    _t2 = EUDSwitchCase()
    # (Line 73) n0.v2[cp] = Value;
    if _t2(1):
        _ARRW(n0.v2, cp) << (Value)
        # (Line 74) break;
        EUDBreak()
        # (Line 75) case 2:
    _t3 = EUDSwitchCase()
    # (Line 76) n0.v3[cp] = Value;
    if _t3(2):
        _ARRW(n0.v3, cp) << (Value)
        # (Line 77) break;
        EUDBreak()
        # (Line 78) case 3:
    _t4 = EUDSwitchCase()
    # (Line 79) n0.v4[cp] = Value;
    if _t4(3):
        _ARRW(n0.v4, cp) << (Value)
        # (Line 80) break;
        EUDBreak()
        # (Line 81) case 4:
    _t5 = EUDSwitchCase()
    # (Line 82) SetDeaths(CurrentPlayer, SetTo, Value, 0);
    if _t5(4):
        # (Line 83) break;
        DoActions(SetDeaths(CurrentPlayer, SetTo, Value, 0))
        EUDBreak()
        # (Line 84) case 5:
    _t6 = EUDSwitchCase()
    # (Line 85) SetDeaths(CurrentPlayer, SetTo, Value, 1);
    if _t6(5):
        # (Line 86) break;
        DoActions(SetDeaths(CurrentPlayer, SetTo, Value, 1))
        EUDBreak()
        # (Line 87) case 6:
    _t7 = EUDSwitchCase()
    # (Line 88) SetDeaths(CurrentPlayer, SetTo, Value, 2);
    if _t7(6):
        # (Line 89) break;
        DoActions(SetDeaths(CurrentPlayer, SetTo, Value, 2))
        EUDBreak()
        # (Line 90) case 7:
    _t8 = EUDSwitchCase()
    # (Line 91) SetDeaths(CurrentPlayer, SetTo, Value, 3);
    if _t8(7):
        # (Line 92) break;
        DoActions(SetDeaths(CurrentPlayer, SetTo, Value, 3))
        EUDBreak()
        # (Line 93) case 8:
    _t9 = EUDSwitchCase()
    # (Line 94) const alen = n0.array1.length / 8;
    if _t9(8):
        alen = n0.array1.length // 8
        # (Line 95) n0.array1[alen * cp + index] = Value;
        _ARRW(n0.array1, alen * cp + index) << (Value)
        # (Line 96) break;
        EUDBreak()
        # (Line 97) }
    # (Line 98) }
    EUDEndSwitch()
    # (Line 101) function SaveDataWriteValue(tagNum, BaseAddress, index){

@EUDFunc
def SaveDataWriteValue(tagNum, BaseAddress, index):
    # (Line 102) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 103) switch(tagNum){
    EUDSwitch(tagNum)
    # (Line 104) case 0:
    _t1 = EUDSwitchCase()
    # (Line 105) {
    if _t1(0):
        # (Line 106) const objValue = n0.v1[cp];
        objValue = n0.v1[cp]
        # (Line 107) if(objValue != 0){
        if EUDIf()(objValue == 0, neg=True):
            # (Line 108) if (objValue > 0xFFFF){
            if EUDIf()(objValue <= 0xFFFF, neg=True):
                # (Line 109) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x1000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x1000 + tagNum)
                # (Line 110) index++;
                index.__iadd__(1)
                # (Line 111) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue // 0x10000)
                # (Line 112) index++;
                index.__iadd__(1)
                # (Line 113) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue % 0x10000)
                # (Line 114) index++;
                index.__iadd__(1)
                # (Line 115) }else{
            if EUDElse()():
                # (Line 116) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x2000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x2000 + tagNum)
                # (Line 117) index++;
                index.__iadd__(1)
                # (Line 118) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue)
                # (Line 119) index++;
                index.__iadd__(1)
                # (Line 120) }
                # (Line 121) }
            EUDEndIf()
            # (Line 122) }
        EUDEndIf()
        # (Line 123) break;
        EUDBreak()
        # (Line 124) case 1:
    _t4 = EUDSwitchCase()
    # (Line 125) {
    if _t4(1):
        # (Line 126) const objValue = n0.v2[cp];
        objValue = n0.v2[cp]
        # (Line 127) if(objValue != 0){
        if EUDIf()(objValue == 0, neg=True):
            # (Line 128) if (objValue > 0xFFFF){
            if EUDIf()(objValue <= 0xFFFF, neg=True):
                # (Line 129) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x1000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x1000 + tagNum)
                # (Line 130) index++;
                index.__iadd__(1)
                # (Line 131) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue // 0x10000)
                # (Line 132) index++;
                index.__iadd__(1)
                # (Line 133) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue % 0x10000)
                # (Line 134) index++;
                index.__iadd__(1)
                # (Line 135) }else{
            if EUDElse()():
                # (Line 136) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x2000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x2000 + tagNum)
                # (Line 137) index++;
                index.__iadd__(1)
                # (Line 138) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue)
                # (Line 139) index++;
                index.__iadd__(1)
                # (Line 140) }
                # (Line 141) }
            EUDEndIf()
            # (Line 142) }
        EUDEndIf()
        # (Line 143) break;
        EUDBreak()
        # (Line 144) case 2:
    _t7 = EUDSwitchCase()
    # (Line 145) {
    if _t7(2):
        # (Line 146) const objValue = n0.v3[cp];
        objValue = n0.v3[cp]
        # (Line 147) if(objValue != 0){
        if EUDIf()(objValue == 0, neg=True):
            # (Line 148) if (objValue > 0xFFFF){
            if EUDIf()(objValue <= 0xFFFF, neg=True):
                # (Line 149) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x1000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x1000 + tagNum)
                # (Line 150) index++;
                index.__iadd__(1)
                # (Line 151) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue // 0x10000)
                # (Line 152) index++;
                index.__iadd__(1)
                # (Line 153) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue % 0x10000)
                # (Line 154) index++;
                index.__iadd__(1)
                # (Line 155) }else{
            if EUDElse()():
                # (Line 156) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x2000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x2000 + tagNum)
                # (Line 157) index++;
                index.__iadd__(1)
                # (Line 158) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue)
                # (Line 159) index++;
                index.__iadd__(1)
                # (Line 160) }
                # (Line 161) }
            EUDEndIf()
            # (Line 162) }
        EUDEndIf()
        # (Line 163) break;
        EUDBreak()
        # (Line 164) case 3:
    _t10 = EUDSwitchCase()
    # (Line 165) {
    if _t10(3):
        # (Line 166) const objValue = n0.v4[cp];
        objValue = n0.v4[cp]
        # (Line 167) if(objValue != 0){
        if EUDIf()(objValue == 0, neg=True):
            # (Line 168) if (objValue > 0xFFFF){
            if EUDIf()(objValue <= 0xFFFF, neg=True):
                # (Line 169) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x1000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x1000 + tagNum)
                # (Line 170) index++;
                index.__iadd__(1)
                # (Line 171) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue // 0x10000)
                # (Line 172) index++;
                index.__iadd__(1)
                # (Line 173) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue % 0x10000)
                # (Line 174) index++;
                index.__iadd__(1)
                # (Line 175) }else{
            if EUDElse()():
                # (Line 176) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x2000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x2000 + tagNum)
                # (Line 177) index++;
                index.__iadd__(1)
                # (Line 178) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue)
                # (Line 179) index++;
                index.__iadd__(1)
                # (Line 180) }
                # (Line 181) }
            EUDEndIf()
            # (Line 182) }
        EUDEndIf()
        # (Line 183) break;
        EUDBreak()
        # (Line 184) case 4:
    _t13 = EUDSwitchCase()
    # (Line 185) {
    if _t13(4):
        # (Line 186) const objValue = dwread_epd(0 * 12 + cp);
        objValue = f_dwread_epd(0 * 12 + cp)
        # (Line 187) if(objValue != 0){
        if EUDIf()(objValue == 0, neg=True):
            # (Line 188) if (objValue > 0xFFFF){
            if EUDIf()(objValue <= 0xFFFF, neg=True):
                # (Line 189) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x1000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x1000 + tagNum)
                # (Line 190) index++;
                index.__iadd__(1)
                # (Line 191) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue // 0x10000)
                # (Line 192) index++;
                index.__iadd__(1)
                # (Line 193) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue % 0x10000)
                # (Line 194) index++;
                index.__iadd__(1)
                # (Line 195) }else{
            if EUDElse()():
                # (Line 196) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x2000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x2000 + tagNum)
                # (Line 197) index++;
                index.__iadd__(1)
                # (Line 198) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue)
                # (Line 199) index++;
                index.__iadd__(1)
                # (Line 200) }
                # (Line 201) }
            EUDEndIf()
            # (Line 202) }
        EUDEndIf()
        # (Line 203) break;
        EUDBreak()
        # (Line 204) case 5:
    _t16 = EUDSwitchCase()
    # (Line 205) {
    if _t16(5):
        # (Line 206) const objValue = dwread_epd(1 * 12 + cp);
        objValue = f_dwread_epd(1 * 12 + cp)
        # (Line 207) if(objValue != 0){
        if EUDIf()(objValue == 0, neg=True):
            # (Line 208) if (objValue > 0xFFFF){
            if EUDIf()(objValue <= 0xFFFF, neg=True):
                # (Line 209) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x1000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x1000 + tagNum)
                # (Line 210) index++;
                index.__iadd__(1)
                # (Line 211) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue // 0x10000)
                # (Line 212) index++;
                index.__iadd__(1)
                # (Line 213) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue % 0x10000)
                # (Line 214) index++;
                index.__iadd__(1)
                # (Line 215) }else{
            if EUDElse()():
                # (Line 216) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x2000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x2000 + tagNum)
                # (Line 217) index++;
                index.__iadd__(1)
                # (Line 218) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue)
                # (Line 219) index++;
                index.__iadd__(1)
                # (Line 220) }
                # (Line 221) }
            EUDEndIf()
            # (Line 222) }
        EUDEndIf()
        # (Line 223) break;
        EUDBreak()
        # (Line 224) case 6:
    _t19 = EUDSwitchCase()
    # (Line 225) {
    if _t19(6):
        # (Line 226) const objValue = dwread_epd(2 * 12 + cp);
        objValue = f_dwread_epd(2 * 12 + cp)
        # (Line 227) if(objValue != 0){
        if EUDIf()(objValue == 0, neg=True):
            # (Line 228) if (objValue > 0xFFFF){
            if EUDIf()(objValue <= 0xFFFF, neg=True):
                # (Line 229) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x1000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x1000 + tagNum)
                # (Line 230) index++;
                index.__iadd__(1)
                # (Line 231) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue // 0x10000)
                # (Line 232) index++;
                index.__iadd__(1)
                # (Line 233) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue % 0x10000)
                # (Line 234) index++;
                index.__iadd__(1)
                # (Line 235) }else{
            if EUDElse()():
                # (Line 236) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x2000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x2000 + tagNum)
                # (Line 237) index++;
                index.__iadd__(1)
                # (Line 238) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue)
                # (Line 239) index++;
                index.__iadd__(1)
                # (Line 240) }
                # (Line 241) }
            EUDEndIf()
            # (Line 242) }
        EUDEndIf()
        # (Line 243) break;
        EUDBreak()
        # (Line 244) case 7:
    _t22 = EUDSwitchCase()
    # (Line 245) {
    if _t22(7):
        # (Line 246) const objValue = dwread_epd(3 * 12 + cp);
        objValue = f_dwread_epd(3 * 12 + cp)
        # (Line 247) if(objValue != 0){
        if EUDIf()(objValue == 0, neg=True):
            # (Line 248) if (objValue > 0xFFFF){
            if EUDIf()(objValue <= 0xFFFF, neg=True):
                # (Line 249) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x1000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x1000 + tagNum)
                # (Line 250) index++;
                index.__iadd__(1)
                # (Line 251) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue // 0x10000)
                # (Line 252) index++;
                index.__iadd__(1)
                # (Line 253) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue % 0x10000)
                # (Line 254) index++;
                index.__iadd__(1)
                # (Line 255) }else{
            if EUDElse()():
                # (Line 256) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x2000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x2000 + tagNum)
                # (Line 257) index++;
                index.__iadd__(1)
                # (Line 258) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue)
                # (Line 259) index++;
                index.__iadd__(1)
                # (Line 260) }
                # (Line 261) }
            EUDEndIf()
            # (Line 262) }
        EUDEndIf()
        # (Line 263) break;
        EUDBreak()
        # (Line 264) case 8:
    _t25 = EUDSwitchCase()
    # (Line 265) {
    if _t25(8):
        # (Line 266) const alen = n0.array1.length / 8;
        alen = n0.array1.length // 8
        # (Line 267) for(var i = 0 ; i < alen ; i ++){
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i >= alen, neg=True):
            def _t27():
                i.__iadd__(1)
            # (Line 268) const objValue = n0.array1[alen * cp + i];
            objValue = n0.array1[alen * cp + i]
            # (Line 269) if(objValue != 0){
            if EUDIf()(objValue == 0, neg=True):
                # (Line 270) if (objValue > 0xFFFF){
                if EUDIf()(objValue <= 0xFFFF, neg=True):
                    # (Line 271) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x3000 + tagNum);
                    f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x3000 + tagNum)
                    # (Line 272) index++;
                    index.__iadd__(1)
                    # (Line 273) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, i);
                    f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, i)
                    # (Line 274) index++;
                    index.__iadd__(1)
                    # (Line 275) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                    f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue // 0x10000)
                    # (Line 276) index++;
                    index.__iadd__(1)
                    # (Line 277) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                    f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue % 0x10000)
                    # (Line 278) index++;
                    index.__iadd__(1)
                    # (Line 279) }else{
                if EUDElse()():
                    # (Line 280) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x4000 + tagNum);
                    f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x4000 + tagNum)
                    # (Line 281) index++;
                    index.__iadd__(1)
                    # (Line 282) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, i);
                    f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, i)
                    # (Line 283) index++;
                    index.__iadd__(1)
                    # (Line 284) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                    f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue)
                    # (Line 285) index++;
                    index.__iadd__(1)
                    # (Line 286) }
                    # (Line 287) }
                EUDEndIf()
                # (Line 288) }
            EUDEndIf()
            # (Line 289) }
            EUDSetContinuePoint()
            _t27()
        EUDEndWhile()
        # (Line 290) break;
        EUDBreak()
        # (Line 291) }
    # (Line 293) return index;
    EUDEndSwitch()
    EUDReturn(index)
    # (Line 294) }
    # (Line 297) function LoadDataReadValue(BaseAddress, i){

@EUDFunc
def LoadDataReadValue(BaseAddress, i):
    # (Line 298) const indicator = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
    indicator = f_wread_epd(BaseAddress + i // 2, (i % 2) * 2)
    # (Line 300) if (indicator != 0){
    if EUDIf()(indicator == 0, neg=True):
        # (Line 301) const spec = indicator / 0x1000;
        spec = indicator // 0x1000
        # (Line 302) const ObjNum = indicator % 0x1000;
        ObjNum = indicator % 0x1000
        # (Line 303) var vindex = 0;
        vindex = EUDVariable()
        vindex << (0)
        # (Line 304) var value = 0;
        value = EUDVariable()
        value << (0)
        # (Line 305) if (spec == 1){
        if EUDIf()(spec == 1):
            # (Line 307) i++;
            i.__iadd__(1)
            # (Line 308) const value1 = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            value1 = f_wread_epd(BaseAddress + i // 2, (i % 2) * 2)
            # (Line 309) i++;
            i.__iadd__(1)
            # (Line 310) const value2 = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            value2 = f_wread_epd(BaseAddress + i // 2, (i % 2) * 2)
            # (Line 311) value = value1 * 0x10000 + value2;
            value << (value1 * 0x10000 + value2)
            # (Line 312) }else if (spec == 2){
        if EUDElseIf()(spec == 2):
            # (Line 314) i++;
            i.__iadd__(1)
            # (Line 315) value = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            value << (f_wread_epd(BaseAddress + i // 2, (i % 2) * 2))
            # (Line 316) }else if (spec == 3){
        if EUDElseIf()(spec == 3):
            # (Line 318) i++;
            i.__iadd__(1)
            # (Line 319) vindex = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            vindex << (f_wread_epd(BaseAddress + i // 2, (i % 2) * 2))
            # (Line 320) i++;
            i.__iadd__(1)
            # (Line 321) const value1 = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            value1 = f_wread_epd(BaseAddress + i // 2, (i % 2) * 2)
            # (Line 322) i++;
            i.__iadd__(1)
            # (Line 323) const value2 = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            value2 = f_wread_epd(BaseAddress + i // 2, (i % 2) * 2)
            # (Line 324) value = value1 * 0x10000 + value2;
            value << (value1 * 0x10000 + value2)
            # (Line 325) }else if (spec == 4){
        if EUDElseIf()(spec == 4):
            # (Line 327) i++;
            i.__iadd__(1)
            # (Line 328) vindex = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            vindex << (f_wread_epd(BaseAddress + i // 2, (i % 2) * 2))
            # (Line 329) i++;
            i.__iadd__(1)
            # (Line 330) value = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            value << (f_wread_epd(BaseAddress + i // 2, (i % 2) * 2))
            # (Line 331) }
            # (Line 332) SaveValue(ObjNum, value, vindex);
        EUDEndIf()
        SaveValue(ObjNum, value, vindex)
        # (Line 333) }
        # (Line 334) return i;
    EUDEndIf()
    EUDReturn(i)
    # (Line 335) }
