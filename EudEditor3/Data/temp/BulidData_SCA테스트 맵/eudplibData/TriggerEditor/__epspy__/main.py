## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import SCArchive as sca;
import SCArchive as sca
# (Line 2) import variable as v;
import variable as v
# (Line 5) function onPluginStart(){
@EUDFunc
def onPluginStart():
    # (Line 6) sca.Init();
    sca.Init()
    # (Line 8) randomize();
    f_randomize()
    # (Line 9) }
    # (Line 11) const st = StringBuffer(100);

st = _CGFW(lambda: [StringBuffer(100)], 1)[0]
# (Line 12) const Status = PVariable();
Status = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 14) function NextRound(){
@EUDFunc
def NextRound():
    # (Line 15) if(Deaths(CurrentPlayer, AtLeast, 1, "Terran SCV")){
    if EUDIf()(Deaths(CurrentPlayer, AtLeast, 1, "Terran SCV")):
        # (Line 16) Status[getcurpl()] += 1;
        _ARRW(Status, f_getcurpl()).__iadd__(1)
        # (Line 17) PlayWAV("sound\\Misc\\Door\\Door4Cls.wav");
        # (Line 18) }
        DoActions(PlayWAV("sound\\Misc\\Door\\Door4Cls.wav"))
        # (Line 19) }
    EUDEndIf()
    # (Line 22) const t0 = PVariable();

t0 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 23) const t1 = PVariable();
t1 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 24) const t2 = PVariable();
t2 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 25) const t3 = PVariable();
t3 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 26) const t4 = PVariable();
t4 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 27) const t5 = PVariable();
t5 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 28) const t6 = PVariable();
t6 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 29) const t7 = PVariable();
t7 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 30) const tarray = EUDArray(80);
tarray = _CGFW(lambda: [EUDArray(80)], 1)[0]
# (Line 33) const TryCount = PVariable();
TryCount = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 34) function beforeTriggerExec(){
@EUDFunc
def beforeTriggerExec():
    # (Line 35) sca.Exec();
    sca.Exec()
    # (Line 36) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 37) const CP = getcurpl();
    CP = f_getcurpl()
    # (Line 38) if(CP < 4){
    if EUDIf()(CP >= 4, neg=True):
        # (Line 41) switch(sca.ConnectStatus()){
        EUDSwitch(sca.ConnectStatus())
        # (Line 42) case 0:
        _t2 = EUDSwitchCase()
        # (Line 43) st.insert(0, "\x06SCArchive 연결 끊김\n\n");
        if _t2(0):
            st.insert(0, "\x06SCArchive 연결 끊김\n\n")
            # (Line 44) break;
            EUDBreak()
            # (Line 45) case 1:
        _t3 = EUDSwitchCase()
        # (Line 46) st.insert(0, "\x07SCArchive 연결 됨\n\n");
        if _t3(1):
            st.insert(0, "\x07SCArchive 연결 됨\n\n")
            # (Line 47) break;
            EUDBreak()
            # (Line 48) }
        # (Line 51) if(sca.ConnectStatus() == 1){
        EUDEndSwitch()
        if EUDIf()(sca.ConnectStatus() == 1):
            # (Line 52) switch(Status[CP]){
            EUDSwitch(Status[CP])
            # (Line 53) case 0:
            _t5 = EUDSwitchCase()
            # (Line 54) st.append("\x13\x1FSCA는 시간 정보를 실시간으로 불러 올 수 있습니다.\n\x13\x04시간 정보를 불러오는 중입니다...");
            if _t5(0):
                st.append("\x13\x1FSCA는 시간 정보를 실시간으로 불러 올 수 있습니다.\n\x13\x04시간 정보를 불러오는 중입니다...")
                # (Line 56) if(sca.GetTimeLoadMessage() == 1){
                if EUDIf()(sca.GetTimeLoadMessage() == 1):
                    # (Line 57) sca.ResetDateTimeMessage();
                    sca.ResetDateTimeMessage()
                    # (Line 58) Status[CP] += 1;
                    _ARRW(Status, CP).__iadd__(1)
                    # (Line 59) }else{
                if EUDElse()():
                    # (Line 60) if(sca.CommandStatus() == 0){
                    if EUDIf()(sca.CommandStatus() == 0):
                        # (Line 61) sca.LoadTime();
                        sca.LoadTime()
                        # (Line 62) }
                        # (Line 63) }
                    EUDEndIf()
                    # (Line 64) break;
                EUDEndIf()
                EUDBreak()
                # (Line 65) case 1:
            _t8 = EUDSwitchCase()
            # (Line 66) st.append("\x13\x1FSCA는 시간 정보를 실시간으로 불러 올 수 있습니다.\n\x13\x04");
            if _t8(1):
                st.append("\x13\x1FSCA는 시간 정보를 실시간으로 불러 올 수 있습니다.\n\x13\x04")
                # (Line 67) st.append(sca.Year, "-");
                st.append(sca.Year, "-")
                # (Line 69) if (sca.Month > 9){
                if EUDIf()(sca.Month <= 9, neg=True):
                    # (Line 70) st.append(sca.Month, "-");
                    st.append(sca.Month, "-")
                    # (Line 71) }else{
                if EUDElse()():
                    # (Line 72) st.append("0" ,sca.Month, "-");
                    st.append("0", sca.Month, "-")
                    # (Line 73) }
                    # (Line 75) if (sca.Day > 9){
                EUDEndIf()
                if EUDIf()(sca.Day <= 9, neg=True):
                    # (Line 76) st.append(sca.Day, " ");
                    st.append(sca.Day, " ")
                    # (Line 77) }else{
                if EUDElse()():
                    # (Line 78) st.append("0" ,sca.Day, " ");
                    st.append("0", sca.Day, " ")
                    # (Line 79) }
                    # (Line 81) if (sca.Hour > 9){
                EUDEndIf()
                if EUDIf()(sca.Hour <= 9, neg=True):
                    # (Line 82) st.append(sca.Hour, ":");
                    st.append(sca.Hour, ":")
                    # (Line 83) }else{
                if EUDElse()():
                    # (Line 84) st.append("0" ,sca.Hour, ":");
                    st.append("0", sca.Hour, ":")
                    # (Line 85) }
                    # (Line 87) if (sca.Min > 9){
                EUDEndIf()
                if EUDIf()(sca.Min <= 9, neg=True):
                    # (Line 88) st.append(sca.Min);
                    st.append(sca.Min)
                    # (Line 89) }else{
                if EUDElse()():
                    # (Line 90) st.append("0" ,sca.Min);
                    st.append("0", sca.Min)
                    # (Line 91) }
                    # (Line 92) st.append("\n\x13\x07 A키를 눌러 다음으로 넘어가세요.\0");
                EUDEndIf()
                st.append("\n\x13\x07 A키를 눌러 다음으로 넘어가세요.\0")
                # (Line 93) NextRound();
                NextRound()
                # (Line 94) break;
                EUDBreak()
                # (Line 95) case 2:
            _t13 = EUDSwitchCase()
            # (Line 96) st.append("\x13\x1FSCA는 제작자가 실시간으로 데이터를 수정 할 수 있습니다.\n\x13\x04글로벌 데이터를 불러오는 중입니다...");
            if _t13(2):
                st.append("\x13\x1FSCA는 제작자가 실시간으로 데이터를 수정 할 수 있습니다.\n\x13\x04글로벌 데이터를 불러오는 중입니다...")
                # (Line 98) if(sca.GetGlobalDataLoadMessage() == 1){
                if EUDIf()(sca.GetGlobalDataLoadMessage() == 1):
                    # (Line 99) sca.ResetGlobalDataLoadMessage();
                    sca.ResetGlobalDataLoadMessage()
                    # (Line 100) Status[CP] += 1;
                    _ARRW(Status, CP).__iadd__(1)
                    # (Line 101) }else{
                if EUDElse()():
                    # (Line 102) if(sca.CommandStatus() == 0){
                    if EUDIf()(sca.CommandStatus() == 0):
                        # (Line 103) sca.LoadGlobalData();
                        sca.LoadGlobalData()
                        # (Line 104) }
                        # (Line 105) }
                    EUDEndIf()
                    # (Line 106) break;
                EUDEndIf()
                EUDBreak()
                # (Line 107) case 3:
            _t16 = EUDSwitchCase()
            # (Line 108) st.append("\x13\x1FSCA는 제작자가 실시간으로 데이터를 수정 할 수 있습니다.\n\x13\x04");
            if _t16(3):
                st.append("\x13\x1FSCA는 제작자가 실시간으로 데이터를 수정 할 수 있습니다.\n\x13\x04")
                # (Line 109) for(var i = 0 ; i < 5 ; i++){
                i = EUDVariable()
                i << (0)
                if EUDWhile()(i >= 5, neg=True):
                    def _t18():
                        i.__iadd__(1)
                    # (Line 110) st.append(i, " : ",sca.GlobalData[i], " ");
                    st.append(i, " : ", sca.GlobalData[i], " ")
                    # (Line 111) }
                    # (Line 112) st.append("\n\x13\x07 A키를 눌러 다음으로 넘어가세요.\0");
                    EUDSetContinuePoint()
                    _t18()
                EUDEndWhile()
                st.append("\n\x13\x07 A키를 눌러 다음으로 넘어가세요.\0")
                # (Line 113) NextRound();
                NextRound()
                # (Line 114) break;
                EUDBreak()
                # (Line 115) case 4:
            _t19 = EUDSwitchCase()
            # (Line 116) TryCount[CP] += 1;
            if _t19(4):
                _ARRW(TryCount, CP).__iadd__(1)
                # (Line 118) t0[CP] = dwrand();
                _ARRW(t0, CP) << (f_dwrand())
                # (Line 119) t1[CP] = dwrand();
                _ARRW(t1, CP) << (f_dwrand())
                # (Line 120) t2[CP] = dwrand();
                _ARRW(t2, CP) << (f_dwrand())
                # (Line 121) t3[CP] = dwrand();
                _ARRW(t3, CP) << (f_dwrand())
                # (Line 122) t4[CP] = dwrand();
                _ARRW(t4, CP) << (f_dwrand())
                # (Line 123) t5[CP] = dwrand();
                _ARRW(t5, CP) << (f_dwrand())
                # (Line 124) t6[CP] = dwrand();
                _ARRW(t6, CP) << (f_dwrand())
                # (Line 125) t7[CP] = dwrand();
                _ARRW(t7, CP) << (f_dwrand())
                # (Line 127) const arraylen = tarray.length / 8;
                arraylen = tarray.length // 8
                # (Line 128) for(var i = 0 ; i < arraylen ; i++){
                i = EUDVariable()
                i << (0)
                if EUDWhile()(i >= arraylen, neg=True):
                    def _t21():
                        i.__iadd__(1)
                    # (Line 129) tarray[CP * arraylen + i] = dwrand();
                    _ARRW(tarray, CP * arraylen + i) << (f_dwrand())
                    # (Line 130) }
                    # (Line 132) for(var i = 0 ; i < arraylen ; i++){
                    EUDSetContinuePoint()
                    _t21()
                EUDEndWhile()
                i = EUDVariable()
                i << (0)
                if EUDWhile()(i >= arraylen, neg=True):
                    def _t23():
                        i.__iadd__(1)
                    # (Line 133) v.array1[CP * arraylen + i] = tarray[CP * arraylen + i];
                    _ARRW(v.array1, CP * arraylen + i) << (tarray[CP * arraylen + i])
                    # (Line 134) }
                    # (Line 137) v.v1[CP] = t0[CP];
                    EUDSetContinuePoint()
                    _t23()
                EUDEndWhile()
                _ARRW(v.v1, CP) << (t0[CP])
                # (Line 138) v.v2[CP] = t1[CP];
                _ARRW(v.v2, CP) << (t1[CP])
                # (Line 139) v.v3[CP] = t2[CP];
                _ARRW(v.v3, CP) << (t2[CP])
                # (Line 140) v.v4[CP] = t3[CP];
                _ARRW(v.v4, CP) << (t3[CP])
                # (Line 141) SetDeaths(CurrentPlayer, SetTo, t4[CP], 0);
                # (Line 142) SetDeaths(CurrentPlayer, SetTo, t5[CP], 1);
                DoActions(SetDeaths(CurrentPlayer, SetTo, t4[CP], 0))
                # (Line 143) SetDeaths(CurrentPlayer, SetTo, t6[CP], 2);
                DoActions(SetDeaths(CurrentPlayer, SetTo, t5[CP], 1))
                # (Line 144) SetDeaths(CurrentPlayer, SetTo, t7[CP], 3);
                DoActions(SetDeaths(CurrentPlayer, SetTo, t6[CP], 2))
                # (Line 145) Status[CP] += 1;
                DoActions(SetDeaths(CurrentPlayer, SetTo, t7[CP], 3))
                _ARRW(Status, CP).__iadd__(1)
                # (Line 146) break;
                EUDBreak()
                # (Line 147) case 5:
            _t24 = EUDSwitchCase()
            # (Line 148) st.append("\x13\x03저장과 불러오기 안전성 테스트를 진행합니다.\n\x13\x04진행 상황 \x07", TryCount[CP] ,"/30\n\n");
            if _t24(5):
                st.append("\x13\x03저장과 불러오기 안전성 테스트를 진행합니다.\n\x13\x04진행 상황 \x07", TryCount[CP], "/30\n\n")
                # (Line 150) if(sca.GetLastMessage() == 6){
                if EUDIf()(sca.GetLastMessage() == 6):
                    # (Line 151) sca.ResetLastMessage();
                    sca.ResetLastMessage()
                    # (Line 152) Status[CP] += 1;
                    _ARRW(Status, CP).__iadd__(1)
                    # (Line 153) }else if(sca.CommandStatus() == 0){
                if EUDElseIf()(sca.CommandStatus() == 0):
                    # (Line 154) sca.SaveData(0);
                    sca.SaveData(0)
                    # (Line 155) }
                    # (Line 157) break;
                EUDEndIf()
                EUDBreak()
                # (Line 158) case 6:
            _t27 = EUDSwitchCase()
            # (Line 159) st.append("\x13\x03저장과 불러오기 안전성 테스트를 진행합니다.\n\x13\x04진행 상황 \x07", TryCount[CP] ,"/30\n\n");
            if _t27(6):
                st.append("\x13\x03저장과 불러오기 안전성 테스트를 진행합니다.\n\x13\x04진행 상황 \x07", TryCount[CP], "/30\n\n")
                # (Line 160) if(sca.GetLastMessage() == 4){
                if EUDIf()(sca.GetLastMessage() == 4):
                    # (Line 161) sca.ResetLastMessage();
                    sca.ResetLastMessage()
                    # (Line 162) Status[CP] += 1;
                    _ARRW(Status, CP).__iadd__(1)
                    # (Line 163) }else if(sca.CommandStatus() == 0){
                if EUDElseIf()(sca.CommandStatus() == 0):
                    # (Line 164) sca.LoadData(0);
                    sca.LoadData(0)
                    # (Line 165) }
                    # (Line 166) break;
                EUDEndIf()
                EUDBreak()
                # (Line 167) case 7:
            _t30 = EUDSwitchCase()
            # (Line 168) {var flag = (v.v1[CP] == t0[CP]) && (v.v2[CP] == t1[CP]) && (v.v3[CP] == t2[CP]) && (v.v4[CP] == t3[CP]) && (dwread_epd(0 * 12 + CP) == t4[CP]) && (dwread_epd(1 * 12 + CP) == t5[CP]) && (dwread_epd(2 * 12 + CP) == t6[CP]) && (dwread_epd(3 * 12 + CP) == t7[CP]);
            if _t30(7):
                flag = EUDVariable()
                flag << (EUDSCAnd()((v.v1[CP] == t0[CP]))((v.v2[CP] == t1[CP]))((v.v3[CP] == t2[CP]))((v.v4[CP] == t3[CP]))((f_dwread_epd(0 * 12 + CP) == t4[CP]))((f_dwread_epd(1 * 12 + CP) == t5[CP]))((f_dwread_epd(2 * 12 + CP) == t6[CP]))((f_dwread_epd(3 * 12 + CP) == t7[CP]))())
                # (Line 170) if (flag == 1){
                if EUDIf()(flag == 1):
                    # (Line 171) const arraylen = tarray.length / 8;
                    arraylen_1 = tarray.length // 8
                    # (Line 172) for(var i = 0 ; i < arraylen ; i++){
                    i = EUDVariable()
                    i << (0)
                    if EUDWhile()(i >= arraylen_1, neg=True):
                        def _t33():
                            i.__iadd__(1)
                        # (Line 173) if(v.array1[CP * arraylen + i] != tarray[CP * 10 + i]){
                        if EUDIf()(v.array1[CP * arraylen_1 + i] == tarray[CP * 10 + i], neg=True):
                            # (Line 174) flag = 0;
                            flag << (0)
                            # (Line 175) }
                            # (Line 176) }
                        EUDEndIf()
                        # (Line 177) }
                        EUDSetContinuePoint()
                        _t33()
                    EUDEndWhile()
                    # (Line 180) if(flag){
                EUDEndIf()
                if EUDIf()(flag):
                    # (Line 181) if(TryCount[CP] == 30){
                    if EUDIf()(TryCount[CP] == 30):
                        # (Line 182) Status[CP] = 9;
                        _ARRW(Status, CP) << (9)
                        # (Line 183) }else{
                    if EUDElse()():
                        # (Line 184) Status[CP] = 4;
                        _ARRW(Status, CP) << (4)
                        # (Line 185) }
                        # (Line 186) }else{
                    EUDEndIf()
                if EUDElse()():
                    # (Line 187) st.append(v.v1[CP]," " , v.v2[CP]," " , v.v3[CP] ," " ,v.v4[CP],"\n" , dwread_epd(0 * 12 + CP)," " , dwread_epd(1 * 12 + CP)," " , dwread_epd(2 * 12 + CP) ," " ,dwread_epd(3 * 12 + CP), "\n");
                    st.append(v.v1[CP], " ", v.v2[CP], " ", v.v3[CP], " ", v.v4[CP], "\n", f_dwread_epd(0 * 12 + CP), " ", f_dwread_epd(1 * 12 + CP), " ", f_dwread_epd(2 * 12 + CP), " ", f_dwread_epd(3 * 12 + CP), "\n")
                    # (Line 188) for(var i = 0 ; i < arraylen ; i++){
                    i = EUDVariable()
                    i << (0)
                    if EUDWhile()(i >= arraylen, neg=True):
                        def _t38():
                            i.__iadd__(1)
                        # (Line 189) st.append(v.array1[CP * arraylen + i], " ");
                        st.append(v.array1[CP * arraylen + i], " ")
                        # (Line 190) }
                        # (Line 191) st.append("\n");
                        EUDSetContinuePoint()
                        _t38()
                    EUDEndWhile()
                    st.append("\n")
                    # (Line 193) st.append(t0[CP]," " ,t1[CP]," " ,t2[CP]," " ,t3[CP],"\n" ,t4[CP]," " ,t5[CP]," " ,t6[CP]," " ,t7[CP], "\n");
                    st.append(t0[CP], " ", t1[CP], " ", t2[CP], " ", t3[CP], "\n", t4[CP], " ", t5[CP], " ", t6[CP], " ", t7[CP], "\n")
                    # (Line 195) for(var i = 0 ; i < arraylen ; i++){
                    i = EUDVariable()
                    i << (0)
                    if EUDWhile()(i >= arraylen, neg=True):
                        def _t40():
                            i.__iadd__(1)
                        # (Line 196) st.append(tarray[CP * arraylen + i], " ");
                        st.append(tarray[CP * arraylen + i], " ")
                        # (Line 197) }
                        # (Line 198) st.append("\n");
                        EUDSetContinuePoint()
                        _t40()
                    EUDEndWhile()
                    st.append("\n")
                    # (Line 199) st.append("\x13\x06오류 발생! 저장된 값과 불러온 값이 다릅니다!\n\x13\x07A키를 눌러 재시도 하세요.");
                    st.append("\x13\x06오류 발생! 저장된 값과 불러온 값이 다릅니다!\n\x13\x07A키를 눌러 재시도 하세요.")
                    # (Line 200) NextRound();
                    NextRound()
                    # (Line 202) }
                    # (Line 203) break;}
                EUDEndIf()
                EUDBreak()
                # (Line 204) case 8:
            _t41 = EUDSwitchCase()
            # (Line 205) v.v1[CP] = t0[CP];
            if _t41(8):
                _ARRW(v.v1, CP) << (t0[CP])
                # (Line 206) v.v2[CP] = t1[CP];
                _ARRW(v.v2, CP) << (t1[CP])
                # (Line 207) v.v3[CP] = t2[CP];
                _ARRW(v.v3, CP) << (t2[CP])
                # (Line 208) v.v4[CP] = t3[CP];
                _ARRW(v.v4, CP) << (t3[CP])
                # (Line 209) SetDeaths(CurrentPlayer, SetTo, t4[CP], 0);
                # (Line 210) SetDeaths(CurrentPlayer, SetTo, t5[CP], 1);
                DoActions(SetDeaths(CurrentPlayer, SetTo, t4[CP], 0))
                # (Line 211) SetDeaths(CurrentPlayer, SetTo, t6[CP], 2);
                DoActions(SetDeaths(CurrentPlayer, SetTo, t5[CP], 1))
                # (Line 212) SetDeaths(CurrentPlayer, SetTo, t7[CP], 3);
                DoActions(SetDeaths(CurrentPlayer, SetTo, t6[CP], 2))
                # (Line 213) Status[CP] = 4;
                DoActions(SetDeaths(CurrentPlayer, SetTo, t7[CP], 3))
                _ARRW(Status, CP) << (4)
                # (Line 214) break;
                EUDBreak()
                # (Line 215) case 9:
            _t42 = EUDSwitchCase()
            # (Line 216) st.append("\x13\x1F테스트가 종료되었습니다.\n\x13\x07자유롭게 게임을 종료하세요.");
            if _t42(9):
                st.append("\x13\x1F테스트가 종료되었습니다.\n\x13\x07자유롭게 게임을 종료하세요.")
                # (Line 217) break;
                EUDBreak()
                # (Line 218) }
            # (Line 219) }else{
            EUDEndSwitch()
        if EUDElse()():
            # (Line 220) st.append("\x13\x11SCArchive의 응답을 기다리고 있습니다.\n\x13\x04만약 꺼져있다면 실행해 주세요.");
            st.append("\x13\x11SCArchive의 응답을 기다리고 있습니다.\n\x13\x04만약 꺼져있다면 실행해 주세요.")
            # (Line 221) if(Status[CP] > 3){
            if EUDIf()(Status[CP] <= 3, neg=True):
                # (Line 223) }
                # (Line 224) }
                pass
            EUDEndIf()
            # (Line 225) st.DisplayAt(0);
        EUDEndIf()
        st.DisplayAt(0)
        # (Line 227) }
        # (Line 228) EUDEndPlayerLoop();
    EUDEndIf()
    EUDEndPlayerLoop()
    # (Line 229) }
