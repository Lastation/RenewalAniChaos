## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Variables as v;
import Variables as v
# (Line 2) import Inventory as inv;
import Inventory as inv
# (Line 3) import String as string;
import String as string
# (Line 4) import timeline as tL;
import timeline as tL
# (Line 5) import Crafting as cr;
import Crafting as cr
# (Line 6) import Main as m;
import Main as m
# (Line 8) const s = StringBuffer(1000);
s = _CGFW(lambda: [StringBuffer(1000)], 1)[0]
# (Line 9) const k = PVariable();
k = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 10) function SortInven();
# (Line 12) function AddItem(percent, item, amount) {
@EUDFunc
def AddItem(percent, item, amount):
    # (Line 13) var random = 0;
    random = EUDVariable()
    random << (0)
    # (Line 14) var temp = 0;
    temp = EUDVariable()
    temp << (0)
    # (Line 15) random = dwrand() % 101;
    random << (f_dwrand() % 101)
    # (Line 17) if(random <= percent)
    if EUDIf()(random <= percent):
        # (Line 18) {
        # (Line 19) for(var i = 0; i < v.MaxInven; i++)
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i >= v.MaxInven, neg=True):
            def _t3():
                i.__iadd__(1)
            # (Line 20) {
            # (Line 21) if(strcmp(inv.InvenName[21 * getcurpl() + i], item) == 0)
            if EUDIf()(f_strcmp(inv.InvenName[21 * f_getcurpl() + i], item) == 0):
                # (Line 22) {
                # (Line 23) inv.InvenAmount[21 * getcurpl() + i] += amount;
                _ARRW(inv.InvenAmount, 21 * f_getcurpl() + i).__iadd__(amount)
                # (Line 24) if(strcmp(item, v.UnsawnTimber.name) == 0)
                if EUDIf()(f_strcmp(item, v.UnsawnTimber.name) == 0):
                    # (Line 25) v.ITEM_UnsawnTimber[getcurpl()] += amount;
                    _ARRW(v.ITEM_UnsawnTimber, f_getcurpl()).__iadd__(amount)
                    # (Line 26) else if(strcmp(item, v.Timber.name) == 0)
                if EUDElseIf()(f_strcmp(item, v.Timber.name) == 0):
                    # (Line 27) v.ITEM_Timber[getcurpl()] += amount;
                    _ARRW(v.ITEM_Timber, f_getcurpl()).__iadd__(amount)
                    # (Line 28) else if(strcmp(item, v.IronOre.name) == 0)
                if EUDElseIf()(f_strcmp(item, v.IronOre.name) == 0):
                    # (Line 29) v.ITEM_IronOre[getcurpl()] += amount;
                    _ARRW(v.ITEM_IronOre, f_getcurpl()).__iadd__(amount)
                    # (Line 30) else if(strcmp(item, v.HPPotion1.name) == 0)
                if EUDElseIf()(f_strcmp(item, v.HPPotion1.name) == 0):
                    # (Line 31) v.ITEM_HPPotion1[getcurpl()] += amount;
                    _ARRW(v.ITEM_HPPotion1, f_getcurpl()).__iadd__(amount)
                    # (Line 32) else if(strcmp(item, v.HPPotion2.name) == 0)
                if EUDElseIf()(f_strcmp(item, v.HPPotion2.name) == 0):
                    # (Line 33) v.ITEM_HPPotion2[getcurpl()] += amount;
                    _ARRW(v.ITEM_HPPotion2, f_getcurpl()).__iadd__(amount)
                    # (Line 34) else if(strcmp(item, v.HPPotion3.name) == 0)
                if EUDElseIf()(f_strcmp(item, v.HPPotion3.name) == 0):
                    # (Line 35) v.ITEM_HPPotion3[getcurpl()] += amount;
                    _ARRW(v.ITEM_HPPotion3, f_getcurpl()).__iadd__(amount)
                    # (Line 36) else if(strcmp(item, v.HPPotion4.name) == 0)
                if EUDElseIf()(f_strcmp(item, v.HPPotion4.name) == 0):
                    # (Line 37) v.ITEM_HPPotion4[getcurpl()] += amount;
                    _ARRW(v.ITEM_HPPotion4, f_getcurpl()).__iadd__(amount)
                    # (Line 38) else if(strcmp(item, v.HPPotion5.name) == 0)
                if EUDElseIf()(f_strcmp(item, v.HPPotion5.name) == 0):
                    # (Line 39) v.ITEM_HPPotion5[getcurpl()] += amount;
                    _ARRW(v.ITEM_HPPotion5, f_getcurpl()).__iadd__(amount)
                    # (Line 40) else if(strcmp(item, v.GoblinTooth.name) == 0)
                if EUDElseIf()(f_strcmp(item, v.GoblinTooth.name) == 0):
                    # (Line 41) v.ITEM_GoblinTooth[getcurpl()] += amount;
                    _ARRW(v.ITEM_GoblinTooth, f_getcurpl()).__iadd__(amount)
                    # (Line 42) k[getcurpl()] = 1;
                EUDEndIf()
                _ARRW(k, f_getcurpl()) << (1)
                # (Line 43) }
                # (Line 44) else if(k[getcurpl()] == 0 && inv.InvenAmount[21 * getcurpl() + i] == 0)
            if EUDElseIf()(EUDSCAnd()(k[f_getcurpl()] == 0)(inv.InvenAmount[21 * f_getcurpl() + i] == 0)()):
                # (Line 45) {
                # (Line 46) if(strcmp(item, v.UnsawnTimber.name) == 0)
                if EUDIf()(f_strcmp(item, v.UnsawnTimber.name) == 0):
                    # (Line 47) {
                    # (Line 48) inv.InvenName[21 * getcurpl() + i] = v.UnsawnTimber.name;
                    _ARRW(inv.InvenName, 21 * f_getcurpl() + i) << (v.UnsawnTimber.name)
                    # (Line 49) if(v.LoadItem[getcurpl()] == 0) v.ITEM_UnsawnTimber[getcurpl()] += amount;
                    if EUDIf()(v.LoadItem[f_getcurpl()] == 0):
                        _ARRW(v.ITEM_UnsawnTimber, f_getcurpl()).__iadd__(amount)
                        # (Line 50) v.LoadItem[getcurpl()] = 0;
                    EUDEndIf()
                    _ARRW(v.LoadItem, f_getcurpl()) << (0)
                    # (Line 51) }
                    # (Line 52) else if(strcmp(item, v.Timber.name) == 0)
                if EUDElseIf()(f_strcmp(item, v.Timber.name) == 0):
                    # (Line 53) {
                    # (Line 54) inv.InvenName[21 * getcurpl() + i] = v.Timber.name;
                    _ARRW(inv.InvenName, 21 * f_getcurpl() + i) << (v.Timber.name)
                    # (Line 55) v.ITEM_Timber[getcurpl()] += amount;
                    _ARRW(v.ITEM_Timber, f_getcurpl()).__iadd__(amount)
                    # (Line 56) }
                    # (Line 57) else if(strcmp(item, v.IronOre.name) == 0)
                if EUDElseIf()(f_strcmp(item, v.IronOre.name) == 0):
                    # (Line 58) {
                    # (Line 59) inv.InvenName[21 * getcurpl() + i] = v.IronOre.name;
                    _ARRW(inv.InvenName, 21 * f_getcurpl() + i) << (v.IronOre.name)
                    # (Line 60) v.ITEM_IronOre[getcurpl()] += amount;
                    _ARRW(v.ITEM_IronOre, f_getcurpl()).__iadd__(amount)
                    # (Line 61) }
                    # (Line 62) else if(strcmp(item, v.HPPotion1.name) == 0)
                if EUDElseIf()(f_strcmp(item, v.HPPotion1.name) == 0):
                    # (Line 63) {
                    # (Line 64) inv.InvenName[21 * getcurpl() + i] = v.HPPotion1.name;
                    _ARRW(inv.InvenName, 21 * f_getcurpl() + i) << (v.HPPotion1.name)
                    # (Line 65) v.ITEM_HPPotion1[getcurpl()] += amount;
                    _ARRW(v.ITEM_HPPotion1, f_getcurpl()).__iadd__(amount)
                    # (Line 66) }
                    # (Line 67) else if(strcmp(item, v.HPPotion2.name) == 0)
                if EUDElseIf()(f_strcmp(item, v.HPPotion2.name) == 0):
                    # (Line 68) {
                    # (Line 69) inv.InvenName[21 * getcurpl() + i] = v.HPPotion2.name;
                    _ARRW(inv.InvenName, 21 * f_getcurpl() + i) << (v.HPPotion2.name)
                    # (Line 70) v.ITEM_HPPotion2[getcurpl()] += amount;
                    _ARRW(v.ITEM_HPPotion2, f_getcurpl()).__iadd__(amount)
                    # (Line 71) }
                    # (Line 72) else if(strcmp(item, v.HPPotion3.name) == 0)
                if EUDElseIf()(f_strcmp(item, v.HPPotion3.name) == 0):
                    # (Line 73) {
                    # (Line 74) inv.InvenName[21 * getcurpl() + i] = v.HPPotion3.name;
                    _ARRW(inv.InvenName, 21 * f_getcurpl() + i) << (v.HPPotion3.name)
                    # (Line 75) v.ITEM_HPPotion3[getcurpl()] += amount;
                    _ARRW(v.ITEM_HPPotion3, f_getcurpl()).__iadd__(amount)
                    # (Line 76) }
                    # (Line 77) else if(strcmp(item, v.HPPotion4.name) == 0)
                if EUDElseIf()(f_strcmp(item, v.HPPotion4.name) == 0):
                    # (Line 78) {
                    # (Line 79) inv.InvenName[21 * getcurpl() + i] = v.HPPotion4.name;
                    _ARRW(inv.InvenName, 21 * f_getcurpl() + i) << (v.HPPotion4.name)
                    # (Line 80) v.ITEM_HPPotion4[getcurpl()] += amount;
                    _ARRW(v.ITEM_HPPotion4, f_getcurpl()).__iadd__(amount)
                    # (Line 81) }
                    # (Line 82) else if(strcmp(item, v.HPPotion5.name) == 0)
                if EUDElseIf()(f_strcmp(item, v.HPPotion5.name) == 0):
                    # (Line 83) {
                    # (Line 84) inv.InvenName[21 * getcurpl() + i] = v.HPPotion5.name;
                    _ARRW(inv.InvenName, 21 * f_getcurpl() + i) << (v.HPPotion5.name)
                    # (Line 85) v.ITEM_HPPotion5[getcurpl()] += amount;
                    _ARRW(v.ITEM_HPPotion5, f_getcurpl()).__iadd__(amount)
                    # (Line 86) }
                    # (Line 87) else if(strcmp(item, v.GoblinTooth.name) == 0)
                if EUDElseIf()(f_strcmp(item, v.GoblinTooth.name) == 0):
                    # (Line 88) {
                    # (Line 89) inv.InvenName[21 * getcurpl() + i] = v.GoblinTooth.name;
                    _ARRW(inv.InvenName, 21 * f_getcurpl() + i) << (v.GoblinTooth.name)
                    # (Line 90) v.ITEM_GoblinTooth[getcurpl()] += amount;
                    _ARRW(v.ITEM_GoblinTooth, f_getcurpl()).__iadd__(amount)
                    # (Line 91) }
                    # (Line 92) inv.InvenAmount[21 * getcurpl() + i] += amount;
                EUDEndIf()
                _ARRW(inv.InvenAmount, 21 * f_getcurpl() + i).__iadd__(amount)
                # (Line 93) k[getcurpl()] = 1;
                _ARRW(k, f_getcurpl()) << (1)
                # (Line 94) }
                # (Line 95) }
            EUDEndIf()
            # (Line 96) if(k[getcurpl()] == 1) s.print("\x11[",ptr2s(item), "]\x04을 \x11[", amount, "]\x04개 획득했습니다.");
            EUDSetContinuePoint()
            _t3()
        EUDEndWhile()
        if EUDIf()(k[f_getcurpl()] == 1):
            s.print("\x11[", ptr2s(item), "]\x04을 \x11[", amount, "]\x04개 획득했습니다.")
            # (Line 97) k[getcurpl()] = 0;
        EUDEndIf()
        _ARRW(k, f_getcurpl()) << (0)
        # (Line 98) }
        # (Line 99) }
    EUDEndIf()
    # (Line 100) function RemoveItem(item, amount) {

@EUDFunc
def RemoveItem(item, amount):
    # (Line 101) for(var i = 0; i < v.MaxInven; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= v.MaxInven, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 102) {
        # (Line 103) if(strcmp(item, inv.InvenName[21 * getcurpl() + i]) == 0)
        if EUDIf()(f_strcmp(item, inv.InvenName[21 * f_getcurpl() + i]) == 0):
            # (Line 104) {
            # (Line 105) inv.InvenAmount[21 * getcurpl() + i] -= 1;
            _ARRW(inv.InvenAmount, 21 * f_getcurpl() + i).__isub__(1)
            # (Line 106) if(strcmp(item, v.UnsawnTimber.name) == 0) v.ITEM_UnsawnTimber[getcurpl()] -= 1;
            if EUDIf()(f_strcmp(item, v.UnsawnTimber.name) == 0):
                _ARRW(v.ITEM_UnsawnTimber, f_getcurpl()).__isub__(1)
                # (Line 107) else if(strcmp(item, v.Timber.name) == 0) v.ITEM_Timber[getcurpl()] -= 1;
            if EUDElseIf()(f_strcmp(item, v.Timber.name) == 0):
                _ARRW(v.ITEM_Timber, f_getcurpl()).__isub__(1)
                # (Line 108) else if(strcmp(item, v.IronOre.name) == 0) v.ITEM_IronOre[getcurpl()] -= 1;
            if EUDElseIf()(f_strcmp(item, v.IronOre.name) == 0):
                _ARRW(v.ITEM_IronOre, f_getcurpl()).__isub__(1)
                # (Line 109) else if(strcmp(item, v.HPPotion1.name) == 0) v.ITEM_HPPotion1[getcurpl()] -= 1;
            if EUDElseIf()(f_strcmp(item, v.HPPotion1.name) == 0):
                _ARRW(v.ITEM_HPPotion1, f_getcurpl()).__isub__(1)
                # (Line 110) else if(strcmp(item, v.HPPotion2.name) == 0) v.ITEM_HPPotion2[getcurpl()] -= 1;
            if EUDElseIf()(f_strcmp(item, v.HPPotion2.name) == 0):
                _ARRW(v.ITEM_HPPotion2, f_getcurpl()).__isub__(1)
                # (Line 111) else if(strcmp(item, v.HPPotion3.name) == 0) v.ITEM_HPPotion3[getcurpl()] -= 1;
            if EUDElseIf()(f_strcmp(item, v.HPPotion3.name) == 0):
                _ARRW(v.ITEM_HPPotion3, f_getcurpl()).__isub__(1)
                # (Line 112) else if(strcmp(item, v.HPPotion4.name) == 0) v.ITEM_HPPotion4[getcurpl()] -= 1;
            if EUDElseIf()(f_strcmp(item, v.HPPotion4.name) == 0):
                _ARRW(v.ITEM_HPPotion4, f_getcurpl()).__isub__(1)
                # (Line 113) else if(strcmp(item, v.HPPotion5.name) == 0) v.ITEM_HPPotion5[getcurpl()] -= 1;
            if EUDElseIf()(f_strcmp(item, v.HPPotion5.name) == 0):
                _ARRW(v.ITEM_HPPotion5, f_getcurpl()).__isub__(1)
                # (Line 114) else if(strcmp(item, v.GoblinTooth.name) == 0) v.ITEM_GoblinTooth[getcurpl()] -= 1;
            if EUDElseIf()(f_strcmp(item, v.GoblinTooth.name) == 0):
                _ARRW(v.ITEM_GoblinTooth, f_getcurpl()).__isub__(1)
                # (Line 116) if(inv.InvenAmount[21 * getcurpl() + i] == 0)
            EUDEndIf()
            if EUDIf()(inv.InvenAmount[21 * f_getcurpl() + i] == 0):
                # (Line 117) {
                # (Line 118) inv.InvenName[21 * getcurpl() + i] = Db("\x04-");
                _ARRW(inv.InvenName, 21 * f_getcurpl() + i) << (Db("\x04-"))
                # (Line 119) inv.UseItem[getcurpl()] = 0;
                _ARRW(inv.UseItem, f_getcurpl()) << (0)
                # (Line 120) SortInven();
                SortInven()
                # (Line 121) }
                # (Line 122) }
            EUDEndIf()
            # (Line 123) }
        EUDEndIf()
        # (Line 124) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 125) function SortInven() {

@EUDFunc
def SortInven():
    # (Line 126) for(var i = 0; i < (v.MaxInven - 1); i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= (v.MaxInven - 1), neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 127) {
        # (Line 128) if(inv.InvenAmount[21 * getcurpl() + i] == 0)
        if EUDIf()(inv.InvenAmount[21 * f_getcurpl() + i] == 0):
            # (Line 129) {
            # (Line 130) inv.InvenName[21 * getcurpl() + i] = inv.InvenName[21 * getcurpl() + i + 1];
            _ARRW(inv.InvenName, 21 * f_getcurpl() + i) << (inv.InvenName[21 * f_getcurpl() + i + 1])
            # (Line 131) inv.InvenAmount[21 * getcurpl() + i] = inv.InvenAmount[21 * getcurpl() + i + 1];
            _ARRW(inv.InvenAmount, 21 * f_getcurpl() + i) << (inv.InvenAmount[21 * f_getcurpl() + i + 1])
            # (Line 132) inv.InvenName[21 * getcurpl() + i + 1] = Db("\x04-");
            _ARRW(inv.InvenName, 21 * f_getcurpl() + i + 1) << (Db("\x04-"))
            # (Line 133) inv.InvenAmount[21 * getcurpl() + i + 1] = 0;
            _ARRW(inv.InvenAmount, 21 * f_getcurpl() + i + 1) << (0)
            # (Line 134) }
            # (Line 135) }
        EUDEndIf()
        # (Line 136) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 137) function hotkeyUnitEPD(epd ,player ,hotkey ,slot) {

@EUDFunc
def f_hotkeyUnitEPD(epd, player, hotkey, slot):
    # (Line 138) const targetOrderSpecial = dwread_epd(epd + 0xA5 / 4) & 0xFF00;
    targetOrderSpecial = f_dwread_epd(epd + 0xA5 // 4) & 0xFF00
    # (Line 139) var alphaID = 0;
    alphaID = EUDVariable()
    alphaID << (0)
    # (Line 140) if(epd == 19025)
    if EUDIf()(epd == 19025):
        # (Line 141) {
        # (Line 142) alphaID = 1 + targetOrderSpecial * 8;
        alphaID << (1 + targetOrderSpecial * 8)
        # (Line 143) }
        # (Line 144) else{
    if EUDElse()():
        # (Line 145) alphaID = 1701 - (0x27821 - epd) / 0x54 + targetOrderSpecial * 8;
        alphaID << (1701 - (0x27821 - epd) // 0x54 + targetOrderSpecial * 8)
        # (Line 146) }
        # (Line 147) SetMemoryEPD(EPD(0x57FE60) + 2121 * player + 12 * hotkey + slot, SetTo, alphaID);
    EUDEndIf()
    # (Line 148) }
    DoActions(SetMemoryEPD(EPD(0x57FE60) + 2121 * player + 12 * hotkey + slot, SetTo, alphaID))
    # (Line 149) function UnitStop() {

@EUDFunc
def UnitStop():
    # (Line 150) if(getcurpl() == 0 ) MoveUnit(1, "Terran Marine", CurrentPlayer, "Anywhere", "stop");
    if EUDIf()(f_getcurpl() == 0):
        # (Line 151) }
        DoActions(MoveUnit(1, "Terran Marine", CurrentPlayer, "Anywhere", "stop"))
    EUDEndIf()
    # (Line 152) function EPDBring(Location, UnitEPD) {

@EUDFunc
def EPDBring(Location, UnitEPD):
    # (Line 153) const posUnitX, posUnitY = dwbreak(dwread_epd(UnitEPD + 0x28 / 4))[[0,1]];
    posUnitX, posUnitY = List2Assignable([_SRET(f_dwbreak(f_dwread_epd(UnitEPD + 0x28 // 4)), [0, 1])])
    # (Line 155) const LocEPD = Location * 5 +EPD(0x58DC60);
    LocEPD = Location * 5 + EPD(0x58DC60)
    # (Line 156) if(
    _t1 = EUDIf()
    # (Line 157) MemoryEPD(LocEPD, AtMost, posUnitX) &&
    # (Line 158) MemoryEPD(LocEPD + 2, AtLeast, posUnitX) &&
    # (Line 159) MemoryEPD(LocEPD + 1, AtMost, posUnitY) &&
    # (Line 160) MemoryEPD(LocEPD + 3, AtLeast, posUnitY)
    # (Line 161) ){
    if _t1(EUDSCAnd()(MemoryEPD(LocEPD, AtMost, posUnitX))(MemoryEPD(LocEPD + 2, AtLeast, posUnitX))(MemoryEPD(LocEPD + 1, AtMost, posUnitY))(MemoryEPD(LocEPD + 3, AtLeast, posUnitY))()):
        # (Line 162) return True;
        EUDReturn(True)
        # (Line 163) }
        # (Line 164) return False;
    EUDEndIf()
    EUDReturn(False)
    # (Line 165) }
    # (Line 166) function TextClear() {

@EUDFunc
def TextClear():
    # (Line 167) s.printAt(0," ");
    s.printAt(0, " ")
    # (Line 168) s.printAt(1," ");
    s.printAt(1, " ")
    # (Line 169) s.printAt(2," ");
    s.printAt(2, " ")
    # (Line 170) s.printAt(3," ");
    s.printAt(3, " ")
    # (Line 171) s.printAt(4," ");
    s.printAt(4, " ")
    # (Line 172) s.printAt(5," ");
    s.printAt(5, " ")
    # (Line 173) s.printAt(6," ");
    s.printAt(6, " ")
    # (Line 174) s.printAt(7," ");
    s.printAt(7, " ")
    # (Line 175) s.printAt(8," ");
    s.printAt(8, " ")
    # (Line 176) s.printAt(9," ");
    s.printAt(9, " ")
    # (Line 177) s.printAt(10," ");
    s.printAt(10, " ")
    # (Line 178) s.print("\n\n\n\n\n\n\n\n\n\n");
    s.print("\n\n\n\n\n\n\n\n\n\n")
    # (Line 179) }
    # (Line 180) function Heal() {

@EUDFunc
def Heal():
    # (Line 181) if(getcurpl() == 0) ModifyUnitHitPoints(1, "Terran Marine", P1, "Anywhere", 100);
    if EUDIf()(f_getcurpl() == 0):
        # (Line 182) else if(getcurpl() == 1) ModifyUnitHitPoints(1, "Terran Ghost", P2, "Anywhere", 100);
        DoActions(ModifyUnitHitPoints(1, "Terran Marine", P1, "Anywhere", 100))
    if EUDElseIf()(f_getcurpl() == 1):
        # (Line 183) else if(getcurpl() == 2) ModifyUnitHitPoints(1, "Terran Vulture", P3, "Anywhere", 100);
        DoActions(ModifyUnitHitPoints(1, "Terran Ghost", P2, "Anywhere", 100))
    if EUDElseIf()(f_getcurpl() == 2):
        # (Line 184) else if(getcurpl() == 3) ModifyUnitHitPoints(1, 61, P4, "Anywhere", 100);
        DoActions(ModifyUnitHitPoints(1, "Terran Vulture", P3, "Anywhere", 100))
    if EUDElseIf()(f_getcurpl() == 3):
        # (Line 185) else if(getcurpl() == 4) ModifyUnitHitPoints(1, 74, P5, "Anywhere", 100);
        DoActions(ModifyUnitHitPoints(1, 61, P4, "Anywhere", 100))
    if EUDElseIf()(f_getcurpl() == 4):
        # (Line 186) else if(getcurpl() == 5) ModifyUnitHitPoints(1, 16, P6, "Anywhere", 100);
        DoActions(ModifyUnitHitPoints(1, 74, P5, "Anywhere", 100))
    if EUDElseIf()(f_getcurpl() == 5):
        # (Line 187) }
        DoActions(ModifyUnitHitPoints(1, 16, P6, "Anywhere", 100))
    EUDEndIf()
    # (Line 188) function CreateCharacter() {

@EUDFunc
def CreateCharacter():
    # (Line 190) if(getcurpl() == 0)
    if EUDIf()(f_getcurpl() == 0):
        # (Line 191) {
        # (Line 197) const WireOffset = f_dwread_epd(EPD(0x68C204));
        WireOffset = f_dwread_epd(EPD(0x68C204))
        # (Line 198) SetMemory(WireOffset + 4, SetTo, 51183680);
        # (Line 199) SetMemory(WireOffset + 8, SetTo, 1717648419);
        DoActions(SetMemory(WireOffset + 4, SetTo, 51183680))
        # (Line 200) SetMemory(WireOffset + 12, SetTo, 34013184);
        DoActions(SetMemory(WireOffset + 8, SetTo, 1717648419))
        # (Line 201) const GrpOffset = f_dwread_epd(EPD(0x68C1FC));
        DoActions(SetMemory(WireOffset + 12, SetTo, 34013184))
        GrpOffset = f_dwread_epd(EPD(0x68C1FC))
        # (Line 202) SetMemory(GrpOffset + 4, SetTo, 33947680);
        # (Line 203) SetMemory(GrpOffset + 8, SetTo, 679157266);
        DoActions(SetMemory(GrpOffset + 4, SetTo, 33947680))
        # (Line 204) SetMemory(GrpOffset + 12, SetTo, 16973824);
        DoActions(SetMemory(GrpOffset + 8, SetTo, 679157266))
        # (Line 206) dwwrite(0x65FD00 + 9808 + 0 * 4, v.user_MaxHp[0] * 256); // 마린 체력
        DoActions(SetMemory(GrpOffset + 12, SetTo, 16973824))
        f_dwwrite(0x65FD00 + 9808 + 0 * 4, v.user_MaxHp[0] * 256)
        # (Line 208) v.user_Character[0] = epdread_epd(EPD(0x628438));
        _ARRW(v.user_Character, 0) << (f_epdread_epd(EPD(0x628438)))
        # (Line 209) CreateUnit(1, "Terran Marine", "Start", P1);
        # (Line 211) v.isSurvive[0] = 1;
        DoActions(CreateUnit(1, "Terran Marine", "Start", P1))
        _ARRW(v.isSurvive, 0) << (1)
        # (Line 212) v.print[0] = 1;
        _ARRW(v.print, 0) << (1)
        # (Line 213) hotkeyUnitEPD(v.user_Character[0], 0, 1, 0);
        f_hotkeyUnitEPD(v.user_Character[0], 0, 1, 0)
        # (Line 214) }
        # (Line 215) }
    EUDEndIf()
    # (Line 216) function CloseInven() {

@EUDFunc
def CloseInven():
    # (Line 218) TextClear();
    TextClear()
    # (Line 219) v.isInventory[getcurpl()] = 0;
    _ARRW(v.isInventory, f_getcurpl()) << (0)
    # (Line 220) inv.InvenPage[getcurpl()] = 1;
    _ARRW(inv.InvenPage, f_getcurpl()) << (1)
    # (Line 221) inv.InvenSlot[getcurpl()] = 1;
    _ARRW(inv.InvenSlot, f_getcurpl()) << (1)
    # (Line 222) }
    # (Line 223) function TextClear2() {

@EUDFunc
def TextClear2():
    # (Line 225) TextClear();
    TextClear()
    # (Line 226) RemoveUnitAt(0, "Vulture Spider Mine", "mine 1", CurrentPlayer);
    # (Line 227) RemoveUnitAt(0, "Protoss Observer", "mine 1", CurrentPlayer);
    DoActions(RemoveUnitAt(0, "Vulture Spider Mine", "mine 1", CurrentPlayer))
    # (Line 228) }
    DoActions(RemoveUnitAt(0, "Protoss Observer", "mine 1", CurrentPlayer))
