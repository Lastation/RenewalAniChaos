## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Variables as v;
import Variables as v
# (Line 3) import Function as func;
import Function as func
# (Line 5) const s = StringBuffer(1000);
s = _CGFW(lambda: [StringBuffer(1000)], 1)[0]
# (Line 7) function onPluginStart()
# (Line 8) {
@EUDFunc
def onPluginStart():
    # (Line 9) SetMemoryEPD(epdread_epd(EPD(0x5187EC) + 0) + 5 * 0, SetTo, 14942209);
    # (Line 10) SetMemoryEPD(epdread_epd(EPD(0x5187EC) + 0) + 5 * 0 + 1, SetTo, 4358864);
    DoActions(SetMemoryEPD(f_epdread_epd(EPD(0x5187EC) + 0) + 5 * 0, SetTo, 14942209))
    # (Line 11) SetMemoryEPD(epdread_epd(EPD(0x5187EC) + 0) + 5 * 0 + 2, SetTo, 4342848);
    DoActions(SetMemoryEPD(f_epdread_epd(EPD(0x5187EC) + 0) + 5 * 0 + 1, SetTo, 4358864))
    # (Line 12) SetMemoryEPD(epdread_epd(EPD(0x5187EC) + 0) + 5 * 0 + 3, SetTo, 0);
    DoActions(SetMemoryEPD(f_epdread_epd(EPD(0x5187EC) + 0) + 5 * 0 + 2, SetTo, 4342848))
    # (Line 13) SetMemoryEPD(epdread_epd(EPD(0x5187EC) + 0) + 5 * 0 + 4, SetTo, 664);
    DoActions(SetMemoryEPD(f_epdread_epd(EPD(0x5187EC) + 0) + 5 * 0 + 3, SetTo, 0))
    # (Line 14) SetMemoryEPD(EPD(0x5187EC), Add, 0);
    DoActions(SetMemoryEPD(f_epdread_epd(EPD(0x5187EC) + 0) + 5 * 0 + 4, SetTo, 664))
    # (Line 15) }
    DoActions(SetMemoryEPD(EPD(0x5187EC), Add, 0))
    # (Line 16) function beforeTriggerExec()

# (Line 17) {
@EUDFunc
def beforeTriggerExec():
    # (Line 18) const count1 = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Zerg Overlord", "Anywhere")'));
    count1 = EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "Zerg Overlord", "Anywhere")'))
    # (Line 20) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 21) if(Deaths(CurrentPlayer, Exactly, 16, "Cave"))
    if EUDIf()(Deaths(CurrentPlayer, Exactly, 16, "Cave")):
        # (Line 22) {
        # (Line 23) CreateUnit(1, "Zerg Drone", "Start", P8);
        # (Line 24) }
        DoActions(CreateUnit(1, "Zerg Drone", "Start", P8))
        # (Line 25) if(v.print[getcurpl()] == 0) eprintln(" ");
    EUDEndIf()
    if EUDIf()(v.print[f_getcurpl()] == 0):
        f_eprintln(" ")
        # (Line 26) else if(v.print[getcurpl()] == 1) eprintln("\x17GOLD \x04: ", v.user_Gold[getcurpl()], "     \x1cMP \x04: ", v.user_Mp[getcurpl()], " / ", v.user_MaxMp[getcurpl()]);
    if EUDElseIf()(v.print[f_getcurpl()] == 1):
        f_eprintln("\x17GOLD \x04: ", v.user_Gold[f_getcurpl()], "     \x1cMP \x04: ", v.user_Mp[f_getcurpl()], " / ", v.user_MaxMp[f_getcurpl()])
        # (Line 27) else if(v.print[getcurpl()] == 2) eprintln(v.ITEM_UnsawnTimber[getcurpl()], " ", v.ITEM_Timber[getcurpl()]);
    if EUDElseIf()(v.print[f_getcurpl()] == 2):
        f_eprintln(v.ITEM_UnsawnTimber[f_getcurpl()], " ", v.ITEM_Timber[f_getcurpl()])
        # (Line 30) if(v.user_TotalAcquireGold[getcurpl()] != (v.user_Gold[getcurpl()] + v.user_TotalSpendGold[getcurpl()]))
    EUDEndIf()
    if EUDIf()(v.user_TotalAcquireGold[f_getcurpl()] == (v.user_Gold[f_getcurpl()] + v.user_TotalSpendGold[f_getcurpl()]), neg=True):
        # (Line 31) {
        # (Line 32) s.print("ㅋㅋ");
        s.print("ㅋㅋ")
        # (Line 33) }
        # (Line 37) if(Deaths(CurrentPlayer, Exactly, 33, "Cave"))
    EUDEndIf()
    if EUDIf()(Deaths(CurrentPlayer, Exactly, 33, "Cave")):
        # (Line 38) {
        # (Line 39) if(v.isDebug[getcurpl()] == 0) v.isDebug[getcurpl()] = 1;
        if EUDIf()(v.isDebug[f_getcurpl()] == 0):
            _ARRW(v.isDebug, f_getcurpl()) << (1)
            # (Line 40) else {
        if EUDElse()():
            # (Line 41) v.isDebug[getcurpl()] = 0;
            _ARRW(v.isDebug, f_getcurpl()) << (0)
            # (Line 42) func.TextClear();
            func.TextClear()
            # (Line 43) }
            # (Line 44) }
        EUDEndIf()
        # (Line 46) if(v.isDebug[getcurpl()] == 1)
    EUDEndIf()
    if EUDIf()(v.isDebug[f_getcurpl()] == 1):
        # (Line 47) {
        # (Line 48) s.printAt(0, "\x13\x04총 획득 골드 : ", v.user_TotalAcquireGold[getcurpl()]);
        s.printAt(0, "\x13\x04총 획득 골드 : ", v.user_TotalAcquireGold[f_getcurpl()])
        # (Line 49) s.printAt(1, "\x13\x04총 사용 골드 : ", v.user_TotalSpendGold[getcurpl()]);
        s.printAt(1, "\x13\x04총 사용 골드 : ", v.user_TotalSpendGold[f_getcurpl()])
        # (Line 50) s.printAt(2, "\x13\x04레벨업 한 횟수 : ", v.user_LevelUpCount[getcurpl()]);
        s.printAt(2, "\x13\x04레벨업 한 횟수 : ", v.user_LevelUpCount[f_getcurpl()])
        # (Line 51) s.printAt(3, "\x13\x04고블린 처치 수 : ", v.GoblinKills[getcurpl()]);
        s.printAt(3, "\x13\x04고블린 처치 수 : ", v.GoblinKills[f_getcurpl()])
        # (Line 52) s.printAt(4, "\x13\x04오크 처치 수 : ", v.OrcKills[getcurpl()]);
        s.printAt(4, "\x13\x04오크 처치 수 : ", v.OrcKills[f_getcurpl()])
        # (Line 53) s.printAt(5, "\x13\x04라미아 처치 수 : ", v.LamiaKills[getcurpl()]);
        s.printAt(5, "\x13\x04라미아 처치 수 : ", v.LamiaKills[f_getcurpl()])
        # (Line 54) s.printAt(6, "\x13\x04처치수 : ", v.PengKills[getcurpl()]);
        s.printAt(6, "\x13\x04처치수 : ", v.PengKills[f_getcurpl()])
        # (Line 55) }
        # (Line 59) if(Deaths(CurrentPlayer, Exactly, 34, "Cave"))
    EUDEndIf()
    if EUDIf()(Deaths(CurrentPlayer, Exactly, 34, "Cave")):
        # (Line 60) {
        # (Line 61) v.user_Exp[getcurpl()] += 10;
        _ARRW(v.user_Exp, f_getcurpl()).__iadd__(10)
        # (Line 62) }
        # (Line 68) EUDPlayerLoop()();
    EUDEndIf()
    EUDPlayerLoop()()
    # (Line 69) var btntemp1;
    btntemp1 = EUDVariable()
    # (Line 70) var btntemp2;
    btntemp2 = EUDVariable()
    # (Line 71) btntemp1 = wread(0x65FD00 + 6168 + 73 * 2);
    btntemp1 << (f_wread(0x65FD00 + 6168 + 73 * 2))
    # (Line 72) wwrite(0x65FD00 + 6168 + 73 * 2, 2);
    f_wwrite(0x65FD00 + 6168 + 73 * 2, 2)
    # (Line 73) btntemp2 = dwread_epd(EPD(0x628438));
    btntemp2 << (f_dwread_epd(EPD(0x628438)))
    # (Line 74) CreateUnit(1, 73, 64, 7);
    # (Line 75) wwrite(btntemp2 + 0x110, 1);
    DoActions(CreateUnit(1, 73, 64, 7))
    f_wwrite(btntemp2 + 0x110, 1)
    # (Line 76) wwrite(0x65FD00 + 6168 + 73 * 2, btntemp1);
    f_wwrite(0x65FD00 + 6168 + 73 * 2, btntemp1)
    # (Line 78) EUDEndPlayerLoop();
    EUDEndPlayerLoop()
    # (Line 81) EUDEndPlayerLoop();
    EUDEndPlayerLoop()
    # (Line 82) }
