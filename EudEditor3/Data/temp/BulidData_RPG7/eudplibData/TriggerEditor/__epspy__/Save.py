## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Variables as v;
import Variables as v
# (Line 2) import SCArchive as sca;
import SCArchive as sca
# (Line 3) import Function as func;
import Function as func
# (Line 5) const s = StringBuffer(1000);
s = _CGFW(lambda: [StringBuffer(1000)], 1)[0]
# (Line 6) const SaveTimer = PVariable();
SaveTimer = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 8) function onPluginStart()
# (Line 9) {
@EUDFunc
def onPluginStart():
    # (Line 11) }
    # (Line 12) function beforeTriggerExec()
    pass

# (Line 13) {
@EUDFunc
def beforeTriggerExec():
    # (Line 14) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 16) if(getcurpl() < 6)
    if EUDIf()(f_getcurpl() >= 6, neg=True):
        # (Line 17) {
        # (Line 18) if(v.LoadState[getcurpl()] == 0)
        if EUDIf()(v.LoadState[f_getcurpl()] == 0):
            # (Line 19) {
            # (Line 20) if(sca.ConnectStatus() == 1)
            if EUDIf()(sca.ConnectStatus() == 1):
                # (Line 21) {
                # (Line 22) v.LoadState[getcurpl()] = 1;
                _ARRW(v.LoadState, f_getcurpl()) << (1)
                # (Line 23) sca.LoadData(0);
                sca.LoadData(0)
                # (Line 24) }
                # (Line 25) else
                # (Line 26) {
            if EUDElse()():
                # (Line 27) s.printAt(0, " ");
                s.printAt(0, " ")
                # (Line 28) s.printAt(1, " ");
                s.printAt(1, " ")
                # (Line 29) s.printAt(2, "\x13\x04SCArchive 연결을 기다리는 중입니다.");
                s.printAt(2, "\x13\x04SCArchive 연결을 기다리는 중입니다.")
                # (Line 30) }
                # (Line 32) }
            EUDEndIf()
            # (Line 34) if(v.LoadState[getcurpl()] == 1)
        EUDEndIf()
        if EUDIf()(v.LoadState[f_getcurpl()] == 1):
            # (Line 35) {
            # (Line 36) s.printAt(0, "\x13\x1d[1] \x17Level \x04: ", v.Slot1_Level[getcurpl()], " \x17Exp \x04: ", v.Slot1_Exp[getcurpl()]);
            s.printAt(0, "\x13\x1d[1] \x17Level \x04: ", v.Slot1_Level[f_getcurpl()], " \x17Exp \x04: ", v.Slot1_Exp[f_getcurpl()])
            # (Line 37) s.printAt(1, "\x13\x1d[2] \x17Level \x04: ", v.Slot2_Level[getcurpl()], " \x17Exp \x04: ", v.Slot2_Exp[getcurpl()]);
            s.printAt(1, "\x13\x1d[2] \x17Level \x04: ", v.Slot2_Level[f_getcurpl()], " \x17Exp \x04: ", v.Slot2_Exp[f_getcurpl()])
            # (Line 38) s.printAt(2, "\x13\x1d[3] \x17Level \x04: ", v.Slot3_Level[getcurpl()], " \x17Exp \x04: ", v.Slot3_Exp[getcurpl()]);
            s.printAt(2, "\x13\x1d[3] \x17Level \x04: ", v.Slot3_Level[f_getcurpl()], " \x17Exp \x04: ", v.Slot3_Exp[f_getcurpl()])
            # (Line 39) s.printAt(3, "\x13\x1d[4] \x17Level \x04: ", v.Slot4_Level[getcurpl()], " \x17Exp \x04: ", v.Slot4_Exp[getcurpl()]);
            s.printAt(3, "\x13\x1d[4] \x17Level \x04: ", v.Slot4_Level[f_getcurpl()], " \x17Exp \x04: ", v.Slot4_Exp[f_getcurpl()])
            # (Line 40) s.printAt(4, "\x13\x1d[5] \x17Level \x04: ", v.Slot5_Level[getcurpl()], " \x17Exp \x04: ", v.Slot5_Exp[getcurpl()]);
            s.printAt(4, "\x13\x1d[5] \x17Level \x04: ", v.Slot5_Level[f_getcurpl()], " \x17Exp \x04: ", v.Slot5_Exp[f_getcurpl()])
            # (Line 41) s.printAt(5, " ");
            s.printAt(5, " ")
            # (Line 42) s.printAt(6, "\x13\x1f키보드 숫자키를 이용");
            s.printAt(6, "\x13\x1f키보드 숫자키를 이용")
            # (Line 45) if(Deaths(CurrentPlayer, Exactly, 1, "Cave") && sca.GetLastMessage() == 4)
            if EUDIf()(EUDSCAnd()(Deaths(CurrentPlayer, Exactly, 1, "Cave"))(sca.GetLastMessage() == 4)()):
                # (Line 46) {
                # (Line 47) if(v.Slot1_Level[getcurpl()] == 0)
                if EUDIf()(v.Slot1_Level[f_getcurpl()] == 0):
                    # (Line 48) {
                    # (Line 49) v.LoadState[getcurpl()] = 2;
                    _ARRW(v.LoadState, f_getcurpl()) << (2)
                    # (Line 50) v.user_Slot[getcurpl()] = 1;
                    _ARRW(v.user_Slot, f_getcurpl()) << (1)
                    # (Line 51) v.user_Level[0] = 1;
                    _ARRW(v.user_Level, 0) << (1)
                    # (Line 52) v.user_MaxHp[0] = 1000;
                    _ARRW(v.user_MaxHp, 0) << (1000)
                    # (Line 53) v.user_MaxMp[0] = 100;
                    _ARRW(v.user_MaxMp, 0) << (100)
                    # (Line 54) v.user_MpRecovery[0] = 20;
                    _ARRW(v.user_MpRecovery, 0) << (20)
                    # (Line 55) func.CreateCharacter();
                    func.CreateCharacter()
                    # (Line 56) sca.ResetLastMessage();
                    sca.ResetLastMessage()
                    # (Line 57) func.TextClear();
                    func.TextClear()
                    # (Line 58) }
                    # (Line 59) else
                    # (Line 60) {
                if EUDElse()():
                    # (Line 61) v.user_Slot[getcurpl()] = 1;
                    _ARRW(v.user_Slot, f_getcurpl()) << (1)
                    # (Line 62) v.LoadState[getcurpl()] = 3;
                    _ARRW(v.LoadState, f_getcurpl()) << (3)
                    # (Line 63) sca.LoadData(1);
                    sca.LoadData(1)
                    # (Line 64) func.TextClear();
                    func.TextClear()
                    # (Line 65) sca.ResetLastMessage();
                    sca.ResetLastMessage()
                    # (Line 66) }
                    # (Line 67) }
                EUDEndIf()
                # (Line 70) if(Deaths(CurrentPlayer, Exactly, 2, "Cave") && sca.GetLastMessage() == 4)
            EUDEndIf()
            if EUDIf()(EUDSCAnd()(Deaths(CurrentPlayer, Exactly, 2, "Cave"))(sca.GetLastMessage() == 4)()):
                # (Line 71) {
                # (Line 72) if(v.Slot1_Level[getcurpl()] == 0)
                if EUDIf()(v.Slot1_Level[f_getcurpl()] == 0):
                    # (Line 73) {
                    # (Line 74) v.LoadState[getcurpl()] = 2;
                    _ARRW(v.LoadState, f_getcurpl()) << (2)
                    # (Line 75) v.user_Slot[getcurpl()] = 2;
                    _ARRW(v.user_Slot, f_getcurpl()) << (2)
                    # (Line 76) v.user_Level[0] = 1;
                    _ARRW(v.user_Level, 0) << (1)
                    # (Line 77) v.user_MaxHp[0] = 1000;
                    _ARRW(v.user_MaxHp, 0) << (1000)
                    # (Line 78) v.user_MaxMp[0] = 100;
                    _ARRW(v.user_MaxMp, 0) << (100)
                    # (Line 79) v.user_MpRecovery[0] = 20;
                    _ARRW(v.user_MpRecovery, 0) << (20)
                    # (Line 80) func.CreateCharacter();
                    func.CreateCharacter()
                    # (Line 81) sca.ResetLastMessage();
                    sca.ResetLastMessage()
                    # (Line 82) func.TextClear();
                    func.TextClear()
                    # (Line 83) }
                    # (Line 84) else
                    # (Line 85) {
                if EUDElse()():
                    # (Line 86) v.user_Slot[getcurpl()] = 2;
                    _ARRW(v.user_Slot, f_getcurpl()) << (2)
                    # (Line 87) v.LoadState[getcurpl()] = 3;
                    _ARRW(v.LoadState, f_getcurpl()) << (3)
                    # (Line 88) sca.LoadData(1);
                    sca.LoadData(1)
                    # (Line 89) func.TextClear();
                    func.TextClear()
                    # (Line 90) sca.ResetLastMessage();
                    sca.ResetLastMessage()
                    # (Line 91) }
                    # (Line 92) }
                EUDEndIf()
                # (Line 96) }
            EUDEndIf()
            # (Line 98) if(v.LoadState[getcurpl()] == 3 && sca.GetLastMessage() == 4)
        EUDEndIf()
        if EUDIf()(EUDSCAnd()(v.LoadState[f_getcurpl()] == 3)(sca.GetLastMessage() == 4)()):
            # (Line 99) {
            # (Line 100) sca.ResetLastMessage();
            sca.ResetLastMessage()
            # (Line 101) func.CreateCharacter();
            func.CreateCharacter()
            # (Line 102) v.LoadState[getcurpl()] = 4;
            _ARRW(v.LoadState, f_getcurpl()) << (4)
            # (Line 103) }
            # (Line 104) }
        EUDEndIf()
        # (Line 106) if(v.SaveState[getcurpl()] == 1 && sca.GetLastMessage() == 6)
    EUDEndIf()
    if EUDIf()(EUDSCAnd()(v.SaveState[f_getcurpl()] == 1)(sca.GetLastMessage() == 6)()):
        # (Line 107) {
        # (Line 108) sca.ResetLastMessage();
        sca.ResetLastMessage()
        # (Line 109) SaveTimer[getcurpl()] = 500;
        _ARRW(SaveTimer, f_getcurpl()) << (500)
        # (Line 111) }
        # (Line 112) if(SaveTimer[getcurpl()] > 0) SaveTimer[getcurpl()] -= 1;
    EUDEndIf()
    if EUDIf()(SaveTimer[f_getcurpl()] <= 0, neg=True):
        _ARRW(SaveTimer, f_getcurpl()).__isub__(1)
        # (Line 113) if(SaveTimer[getcurpl()] == 1)
    EUDEndIf()
    if EUDIf()(SaveTimer[f_getcurpl()] == 1):
        # (Line 114) {
        # (Line 115) s.print("\x04", v.user_Slot[getcurpl()], "번 슬롯에 저장합니다");
        s.print("\x04", v.user_Slot[f_getcurpl()], "번 슬롯에 저장합니다")
        # (Line 116) sca.SaveData(v.user_Slot[getcurpl()]);
        sca.SaveData(v.user_Slot[f_getcurpl()])
        # (Line 117) v.SaveState[getcurpl()] = 2;
        _ARRW(v.SaveState, f_getcurpl()) << (2)
        # (Line 118) }
        # (Line 119) if(getcurpl() < 6)
    EUDEndIf()
    if EUDIf()(f_getcurpl() >= 6, neg=True):
        # (Line 120) {
        # (Line 122) if(Deaths(CurrentPlayer, Exactly, 2, "Terran SCV") && sca.ConnectStatus() == 1) // save 채팅인식
        if EUDIf()(EUDSCAnd()(Deaths(CurrentPlayer, Exactly, 2, "Terran SCV"))(sca.ConnectStatus() == 1)()):
            # (Line 123) {
            # (Line 124) if(v.user_Slot[getcurpl()] == 1)
            if EUDIf()(v.user_Slot[f_getcurpl()] == 1):
                # (Line 125) {
                # (Line 126) v.Slot1_Level[getcurpl()] = v.user_Level[getcurpl()];
                _ARRW(v.Slot1_Level, f_getcurpl()) << (v.user_Level[f_getcurpl()])
                # (Line 127) v.Slot1_Exp[getcurpl()] = v.user_Exp[getcurpl()];
                _ARRW(v.Slot1_Exp, f_getcurpl()) << (v.user_Exp[f_getcurpl()])
                # (Line 128) sca.SaveData(0);
                sca.SaveData(0)
                # (Line 129) v.SaveState[getcurpl()] = 1;
                _ARRW(v.SaveState, f_getcurpl()) << (1)
                # (Line 130) }
                # (Line 131) else if(v.user_Slot[getcurpl()] == 2)
            if EUDElseIf()(v.user_Slot[f_getcurpl()] == 2):
                # (Line 132) {
                # (Line 133) v.Slot2_Level[getcurpl()] = v.user_Level[getcurpl()];
                _ARRW(v.Slot2_Level, f_getcurpl()) << (v.user_Level[f_getcurpl()])
                # (Line 134) v.Slot2_Exp[getcurpl()] = v.user_Exp[getcurpl()];
                _ARRW(v.Slot2_Exp, f_getcurpl()) << (v.user_Exp[f_getcurpl()])
                # (Line 135) sca.SaveData(0);
                sca.SaveData(0)
                # (Line 136) v.SaveState[getcurpl()] = 1;
                _ARRW(v.SaveState, f_getcurpl()) << (1)
                # (Line 137) }
                # (Line 139) }
            EUDEndIf()
            # (Line 142) if(Deaths(CurrentPlayer, Exactly, 3, "Terran SCV"))
        EUDEndIf()
        if EUDIf()(Deaths(CurrentPlayer, Exactly, 3, "Terran SCV")):
            # (Line 143) {
            # (Line 144) v.LoadState[getcurpl()] = 0;
            _ARRW(v.LoadState, f_getcurpl()) << (0)
            # (Line 145) RemoveUnit("(any unit)", CurrentPlayer);
            # (Line 146) }
            DoActions(RemoveUnit("(any unit)", CurrentPlayer))
            # (Line 148) if(Deaths(CurrentPlayer, Exactly, 4, "Terran SCV"))
        EUDEndIf()
        if EUDIf()(Deaths(CurrentPlayer, Exactly, 4, "Terran SCV")):
            # (Line 149) {
            # (Line 151) }
            # (Line 152) }
            pass
        EUDEndIf()
        # (Line 153) EUDEndPlayerLoop();
    EUDEndIf()
    EUDEndPlayerLoop()
    # (Line 154) }
