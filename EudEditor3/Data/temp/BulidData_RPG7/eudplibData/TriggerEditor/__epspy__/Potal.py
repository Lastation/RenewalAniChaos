## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Function as func;
import Function as func
# (Line 2) import Variables as v;
import Variables as v
# (Line 3) import String as str;
import String as str
# (Line 5) const s = StringBuffer(1000);
s = _CGFW(lambda: [StringBuffer(1000)], 1)[0]
# (Line 7) function onPluginStart()
# (Line 8) {
@EUDFunc
def onPluginStart():
    # (Line 9) CreateUnit(1, "Terran Beacon", "Potal 01", P7);
    # (Line 10) CreateUnit(1, "Terran Beacon", "Potal 02", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 01", P7))
    # (Line 11) CreateUnit(1, "Terran Beacon", "Potal 03", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 02", P7))
    # (Line 12) CreateUnit(1, "Terran Beacon", "Potal 04", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 03", P7))
    # (Line 13) CreateUnit(1, "Terran Beacon", "Potal 05", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 04", P7))
    # (Line 14) CreateUnit(1, "Terran Beacon", "Potal 06", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 05", P7))
    # (Line 15) CreateUnit(1, "Terran Beacon", "Potal 07", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 06", P7))
    # (Line 17) }
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 07", P7))
    # (Line 19) function beforeTriggerExec()

# (Line 20) {
@EUDFunc
def beforeTriggerExec():
    # (Line 21) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 22) if(getcurpl() < 6)
    if EUDIf()(f_getcurpl() >= 6, neg=True):
        # (Line 23) {
        # (Line 24) if(Deaths(CurrentPlayer, Exactly, 8, "Terran Dropship"))
        if EUDIf()(Deaths(CurrentPlayer, Exactly, 8, "Terran Dropship")):
            # (Line 25) {
            # (Line 26) if(func.EPDBring(23, v.user_Character[getcurpl()])) {
            if EUDIf()(func.EPDBring(23, v.user_Character[f_getcurpl()])):
                # (Line 28) MoveUnit(0, "(any unit)", CurrentPlayer, "Potal 01", "Potal 02");
                # (Line 29) } else if(func.EPDBring(24, v.user_Character[getcurpl()])) {
                DoActions(MoveUnit(0, "(any unit)", CurrentPlayer, "Potal 01", "Potal 02"))
            if EUDElseIf()(func.EPDBring(24, v.user_Character[f_getcurpl()])):
                # (Line 31) MoveUnit(0, "(any unit)", CurrentPlayer, "Potal 02", "Potal 01");
                # (Line 32) } else if(func.EPDBring(25, v.user_Character[getcurpl()])) {
                DoActions(MoveUnit(0, "(any unit)", CurrentPlayer, "Potal 02", "Potal 01"))
            if EUDElseIf()(func.EPDBring(25, v.user_Character[f_getcurpl()])):
                # (Line 34) MoveUnit(0, "(any unit)", CurrentPlayer, "Potal 03", "Potal 04");
                # (Line 35) } else if(func.EPDBring(26, v.user_Character[getcurpl()])) {
                DoActions(MoveUnit(0, "(any unit)", CurrentPlayer, "Potal 03", "Potal 04"))
            if EUDElseIf()(func.EPDBring(26, v.user_Character[f_getcurpl()])):
                # (Line 37) MoveUnit(0, "(any unit)", CurrentPlayer, "Potal 04", "Potal 03");
                # (Line 38) } else if(func.EPDBring(27, v.user_Character[getcurpl()])) {
                DoActions(MoveUnit(0, "(any unit)", CurrentPlayer, "Potal 04", "Potal 03"))
            if EUDElseIf()(func.EPDBring(27, v.user_Character[f_getcurpl()])):
                # (Line 40) MoveUnit(0, "(any unit)", CurrentPlayer, "Potal 05", "Potal 06");
                # (Line 41) } else if(func.EPDBring(28, v.user_Character[getcurpl()])) {
                DoActions(MoveUnit(0, "(any unit)", CurrentPlayer, "Potal 05", "Potal 06"))
            if EUDElseIf()(func.EPDBring(28, v.user_Character[f_getcurpl()])):
                # (Line 43) MoveUnit(0, "(any unit)", CurrentPlayer, "Potal 06", "Potal 05");
                # (Line 44) }
                DoActions(MoveUnit(0, "(any unit)", CurrentPlayer, "Potal 06", "Potal 05"))
                # (Line 45) }
            EUDEndIf()
            # (Line 47) if(func.EPDBring(23, v.user_Character[getcurpl()]))// Potal 01 (24)
        EUDEndIf()
        if EUDIf()(func.EPDBring(23, v.user_Character[f_getcurpl()])):
            # (Line 48) {
            # (Line 49) s.printAt(8, " ");
            s.printAt(8, " ")
            # (Line 50) s.printAt(9, "\x13\x17= ", str.Field01, " =");
            s.printAt(9, "\x13\x17= ", str.Field01, " =")
            # (Line 51) s.printAt(10, "\x13\x04", str.Info_Field01);
            s.printAt(10, "\x13\x04", str.Info_Field01)
            # (Line 52) if(Bring(CurrentPlayer, Exactly, 0, "Protoss Observer", "mine 1"))
            if EUDIf()(Bring(CurrentPlayer, Exactly, 0, "Protoss Observer", "mine 1")):
                # (Line 53) CreateUnit(1, "Protoss Observer", "mine 1", CurrentPlayer);
                # (Line 54) } else if(Bring(CurrentPlayer, Exactly, 1, "Protoss Observer", "mine 1")) {
                DoActions(CreateUnit(1, "Protoss Observer", "mine 1", CurrentPlayer))
            EUDEndIf()
        if EUDElseIf()(Bring(CurrentPlayer, Exactly, 1, "Protoss Observer", "mine 1")):
            # (Line 55) RemoveUnitAt(1, "Protoss Observer", "mine 1", CurrentPlayer);
            # (Line 56) func.TextClear();
            DoActions(RemoveUnitAt(1, "Protoss Observer", "mine 1", CurrentPlayer))
            func.TextClear()
            # (Line 57) }
            # (Line 59) if(func.EPDBring(24, v.user_Character[getcurpl()])) // Potal 02 (25)
        EUDEndIf()
        if EUDIf()(func.EPDBring(24, v.user_Character[f_getcurpl()])):
            # (Line 60) {
            # (Line 61) s.printAt(9, " ");
            s.printAt(9, " ")
            # (Line 62) s.printAt(10, "\x13\x17= ", str.Village01, " =");
            s.printAt(10, "\x13\x17= ", str.Village01, " =")
            # (Line 63) if(Bring(CurrentPlayer, Exactly, 0, "Protoss Observer", "mine 1"))
            if EUDIf()(Bring(CurrentPlayer, Exactly, 0, "Protoss Observer", "mine 1")):
                # (Line 64) CreateUnit(2, "Protoss Observer", "mine 1", CurrentPlayer);
                # (Line 65) } else if(Bring(CurrentPlayer, Exactly, 2, "Protoss Observer", "mine 1")) {
                DoActions(CreateUnit(2, "Protoss Observer", "mine 1", CurrentPlayer))
            EUDEndIf()
        if EUDElseIf()(Bring(CurrentPlayer, Exactly, 2, "Protoss Observer", "mine 1")):
            # (Line 66) RemoveUnitAt(2, "Protoss Observer", "mine 1", CurrentPlayer);
            # (Line 67) func.TextClear();
            DoActions(RemoveUnitAt(2, "Protoss Observer", "mine 1", CurrentPlayer))
            func.TextClear()
            # (Line 68) }
            # (Line 70) if(func.EPDBring(25, v.user_Character[getcurpl()])) // Potal 03 (26)
        EUDEndIf()
        if EUDIf()(func.EPDBring(25, v.user_Character[f_getcurpl()])):
            # (Line 71) {
            # (Line 72) s.printAt(8, " ");
            s.printAt(8, " ")
            # (Line 73) s.printAt(9, "\x13\x17= ", str.Field02, " =");
            s.printAt(9, "\x13\x17= ", str.Field02, " =")
            # (Line 74) s.printAt(10, "\x13\x04", str.Info_Field02);
            s.printAt(10, "\x13\x04", str.Info_Field02)
            # (Line 75) if(Bring(CurrentPlayer, Exactly, 0, "Protoss Observer", "mine 1"))
            if EUDIf()(Bring(CurrentPlayer, Exactly, 0, "Protoss Observer", "mine 1")):
                # (Line 76) CreateUnit(3, "Protoss Observer", "mine 1", CurrentPlayer);
                # (Line 77) } else if(Bring(CurrentPlayer, Exactly, 3, "Protoss Observer", "mine 1")) {
                DoActions(CreateUnit(3, "Protoss Observer", "mine 1", CurrentPlayer))
            EUDEndIf()
        if EUDElseIf()(Bring(CurrentPlayer, Exactly, 3, "Protoss Observer", "mine 1")):
            # (Line 78) RemoveUnitAt(3, "Protoss Observer", "mine 1", CurrentPlayer);
            # (Line 79) func.TextClear();
            DoActions(RemoveUnitAt(3, "Protoss Observer", "mine 1", CurrentPlayer))
            func.TextClear()
            # (Line 80) }
            # (Line 82) if(func.EPDBring(26, v.user_Character[getcurpl()])) // Potal 04 (27)
        EUDEndIf()
        if EUDIf()(func.EPDBring(26, v.user_Character[f_getcurpl()])):
            # (Line 83) {
            # (Line 84) s.printAt(8, " ");
            s.printAt(8, " ")
            # (Line 85) s.printAt(9, "\x13\x17= ", str.Field01, " =");
            s.printAt(9, "\x13\x17= ", str.Field01, " =")
            # (Line 86) s.printAt(10, "\x13\x04", str.Info_Field01);
            s.printAt(10, "\x13\x04", str.Info_Field01)
            # (Line 87) if(Bring(CurrentPlayer, Exactly, 0, "Protoss Observer", "mine 1"))
            if EUDIf()(Bring(CurrentPlayer, Exactly, 0, "Protoss Observer", "mine 1")):
                # (Line 88) CreateUnit(4, "Protoss Observer", "mine 1", CurrentPlayer);
                # (Line 89) } else if(Bring(CurrentPlayer, Exactly, 4, "Protoss Observer", "mine 1")) {
                DoActions(CreateUnit(4, "Protoss Observer", "mine 1", CurrentPlayer))
            EUDEndIf()
        if EUDElseIf()(Bring(CurrentPlayer, Exactly, 4, "Protoss Observer", "mine 1")):
            # (Line 90) RemoveUnitAt(4, "Protoss Observer", "mine 1", CurrentPlayer);
            # (Line 91) func.TextClear();
            DoActions(RemoveUnitAt(4, "Protoss Observer", "mine 1", CurrentPlayer))
            func.TextClear()
            # (Line 92) }
            # (Line 94) if(func.EPDBring(27, v.user_Character[getcurpl()])) // Potal 05 (28)
        EUDEndIf()
        if EUDIf()(func.EPDBring(27, v.user_Character[f_getcurpl()])):
            # (Line 95) {
            # (Line 96) s.printAt(8, " ");
            s.printAt(8, " ")
            # (Line 97) s.printAt(9, "\x13\x17= ", str.Field03, " =");
            s.printAt(9, "\x13\x17= ", str.Field03, " =")
            # (Line 98) s.printAt(10, "\x13\x04", str.Info_Field03);
            s.printAt(10, "\x13\x04", str.Info_Field03)
            # (Line 99) if(Bring(CurrentPlayer, Exactly, 0, "Protoss Observer", "mine 1"))
            if EUDIf()(Bring(CurrentPlayer, Exactly, 0, "Protoss Observer", "mine 1")):
                # (Line 100) CreateUnit(5, "Protoss Observer", "mine 1", CurrentPlayer);
                # (Line 101) } else if(Bring(CurrentPlayer, Exactly, 5, "Protoss Observer", "mine 1")) {
                DoActions(CreateUnit(5, "Protoss Observer", "mine 1", CurrentPlayer))
            EUDEndIf()
        if EUDElseIf()(Bring(CurrentPlayer, Exactly, 5, "Protoss Observer", "mine 1")):
            # (Line 102) RemoveUnitAt(5, "Protoss Observer", "mine 1", CurrentPlayer);
            # (Line 103) func.TextClear();
            DoActions(RemoveUnitAt(5, "Protoss Observer", "mine 1", CurrentPlayer))
            func.TextClear()
            # (Line 104) }
            # (Line 105) }
        EUDEndIf()
        # (Line 106) EUDEndPlayerLoop();
    EUDEndIf()
    EUDEndPlayerLoop()
    # (Line 107) }
