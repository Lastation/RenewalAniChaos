## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Variables as v;
import Variables as v
# (Line 2) import Main as m;
import Main as m
# (Line 3) import Inventory as inv;
import Inventory as inv
# (Line 4) import Function as func;
import Function as func
# (Line 6) const CraftingTimer = PVariable();
CraftingTimer = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 7) const s = StringBuffer(1000);
s = _CGFW(lambda: [StringBuffer(1000)], 1)[0]
# (Line 8) function Crafting(item)
# (Line 9) {
@EUDFunc
def Crafting(item):
    # (Line 10) if(CraftingTimer[getcurpl()] >= 0)
    if EUDIf()(CraftingTimer[f_getcurpl()] >= 0):
        # (Line 11) {
        # (Line 12) v.print[getcurpl()] = 2;
        _ARRW(v.print, f_getcurpl()) << (2)
        # (Line 13) if(CraftingTimer[getcurpl()] == 1 * 14 / 10)
        if EUDIf()(CraftingTimer[f_getcurpl()] == 1 * 14 // 10):
            # (Line 14) {
            # (Line 15) if(v.Crafting[getcurpl()] == 1) PlayWAV("staredit\\wav\\UnsawnTimber.ogg");
            if EUDIf()(v.Crafting[f_getcurpl()] == 1):
                # (Line 16) else if(v.Crafting[getcurpl()] == 2) PlayWAV("staredit\\wav\\sawmill.ogg");
                DoActions(PlayWAV("staredit\\wav\\UnsawnTimber.ogg"))
            if EUDElseIf()(v.Crafting[f_getcurpl()] == 2):
                # (Line 17) else if(v.Crafting[getcurpl()] == 3) PlayWAV("staredit\\wav\\mining.ogg");
                DoActions(PlayWAV("staredit\\wav\\sawmill.ogg"))
            if EUDElseIf()(v.Crafting[f_getcurpl()] == 3):
                # (Line 18) v.isHold[getcurpl()] = 1;
                DoActions(PlayWAV("staredit\\wav\\mining.ogg"))
            EUDEndIf()
            _ARRW(v.isHold, f_getcurpl()) << (1)
            # (Line 19) } else if(CraftingTimer[getcurpl()] < 3 * 14 / 10) {
        if EUDElseIf()(CraftingTimer[f_getcurpl()] >= 3 * 14 // 10, neg=True):
            # (Line 20) eprintln("\x1d□□□□□□□□□□");
            f_eprintln("\x1d□□□□□□□□□□")
            # (Line 21) } else if(CraftingTimer[getcurpl()] < 10 * 14 / 10) {
        if EUDElseIf()(CraftingTimer[f_getcurpl()] >= 10 * 14 // 10, neg=True):
            # (Line 22) eprintln("\x1d■□□□□□□□□□");
            f_eprintln("\x1d■□□□□□□□□□")
            # (Line 23) } else if(CraftingTimer[getcurpl()] < 20 * 14 / 10) {
        if EUDElseIf()(CraftingTimer[f_getcurpl()] >= 20 * 14 // 10, neg=True):
            # (Line 24) eprintln("\x1d■■□□□□□□□□");
            f_eprintln("\x1d■■□□□□□□□□")
            # (Line 25) } else if(CraftingTimer[getcurpl()] < 30 * 14 / 10) {
        if EUDElseIf()(CraftingTimer[f_getcurpl()] >= 30 * 14 // 10, neg=True):
            # (Line 26) eprintln("\x1d■■■□□□□□□□");
            f_eprintln("\x1d■■■□□□□□□□")
            # (Line 27) } else if(CraftingTimer[getcurpl()] < 40 * 14 / 10) {
        if EUDElseIf()(CraftingTimer[f_getcurpl()] >= 40 * 14 // 10, neg=True):
            # (Line 28) eprintln("\x1d■■■■□□□□□□");
            f_eprintln("\x1d■■■■□□□□□□")
            # (Line 29) } else if(CraftingTimer[getcurpl()] < 50 * 14 / 10) {
        if EUDElseIf()(CraftingTimer[f_getcurpl()] >= 50 * 14 // 10, neg=True):
            # (Line 30) eprintln("\x1d■■■■■□□□□□");
            f_eprintln("\x1d■■■■■□□□□□")
            # (Line 31) } else if(CraftingTimer[getcurpl()] < 60 * 14 / 10) {
        if EUDElseIf()(CraftingTimer[f_getcurpl()] >= 60 * 14 // 10, neg=True):
            # (Line 32) eprintln("\x1d■■■■■■□□□□");
            f_eprintln("\x1d■■■■■■□□□□")
            # (Line 33) } else if(CraftingTimer[getcurpl()] < 70 * 14 / 10) {
        if EUDElseIf()(CraftingTimer[f_getcurpl()] >= 70 * 14 // 10, neg=True):
            # (Line 34) eprintln("\x1d■■■■■■■□□□");
            f_eprintln("\x1d■■■■■■■□□□")
            # (Line 35) } else if(CraftingTimer[getcurpl()] < 80 * 14 / 10) {
        if EUDElseIf()(CraftingTimer[f_getcurpl()] >= 80 * 14 // 10, neg=True):
            # (Line 36) eprintln("\x1d■■■■■■■■□□");
            f_eprintln("\x1d■■■■■■■■□□")
            # (Line 37) } else if(CraftingTimer[getcurpl()] < 90 * 14 / 10) {
        if EUDElseIf()(CraftingTimer[f_getcurpl()] >= 90 * 14 // 10, neg=True):
            # (Line 38) eprintln("\x1d■■■■■■■■■□");
            f_eprintln("\x1d■■■■■■■■■□")
            # (Line 39) } else if(CraftingTimer[getcurpl()] < 100 * 14 / 10) {
        if EUDElseIf()(CraftingTimer[f_getcurpl()] >= 100 * 14 // 10, neg=True):
            # (Line 40) eprintln("\x1d■■■■■■■■■■");
            f_eprintln("\x1d■■■■■■■■■■")
            # (Line 41) } else if(CraftingTimer[getcurpl()] == 100 * 14 / 10) {
        if EUDElseIf()(CraftingTimer[f_getcurpl()] == 100 * 14 // 10):
            # (Line 42) v.Crafting[getcurpl()] = 0;
            _ARRW(v.Crafting, f_getcurpl()) << (0)
            # (Line 43) CraftingTimer[getcurpl()] = 0;
            _ARRW(CraftingTimer, f_getcurpl()) << (0)
            # (Line 44) v.print[getcurpl()] = 1;
            _ARRW(v.print, f_getcurpl()) << (1)
            # (Line 45) v.isHold[getcurpl()] = 0;
            _ARRW(v.isHold, f_getcurpl()) << (0)
            # (Line 46) if(strcmp(item, v.UnsawnTimber.name) == 0)
            if EUDIf()(f_strcmp(item, v.UnsawnTimber.name) == 0):
                # (Line 47) {
                # (Line 48) RemoveUnitAt(1, "Zerg Overlord", v.user_Loc[getcurpl()] + 1, P7);
                # (Line 49) func.TextClear2();
                DoActions(RemoveUnitAt(1, "Zerg Overlord", v.user_Loc[f_getcurpl()] + 1, P7))
                func.TextClear2()
                # (Line 50) func.AddItem(100, v.UnsawnTimber.name, 1);
                func.AddItem(100, v.UnsawnTimber.name, 1)
                # (Line 51) } else if(strcmp(item, v.Timber.name) == 0) {
            if EUDElseIf()(f_strcmp(item, v.Timber.name) == 0):
                # (Line 52) func.AddItem(100, v.Timber.name, 2);
                func.AddItem(100, v.Timber.name, 2)
                # (Line 53) } else if(strcmp(item, v.IronOre.name) == 0) {
            if EUDElseIf()(f_strcmp(item, v.IronOre.name) == 0):
                # (Line 54) RemoveUnitAt(1, "Zerg Queen", v.user_Loc[getcurpl()] + 1, P7);
                # (Line 55) func.AddItem(100, v.IronOre.name, 1);
                DoActions(RemoveUnitAt(1, "Zerg Queen", v.user_Loc[f_getcurpl()] + 1, P7))
                func.AddItem(100, v.IronOre.name, 1)
                # (Line 56) }
                # (Line 57) }
            EUDEndIf()
            # (Line 58) CraftingTimer[getcurpl()] += 1;
        EUDEndIf()
        _ARRW(CraftingTimer, f_getcurpl()).__iadd__(1)
        # (Line 59) }
        # (Line 60) }
    EUDEndIf()
