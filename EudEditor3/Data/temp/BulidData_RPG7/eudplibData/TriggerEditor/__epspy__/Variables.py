## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import String as str;
import String as str
# (Line 4) const user_Slot = PVariable();
user_Slot = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 5) const user_Level = PVariable();
user_Level = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 6) const user_Character = PVariable();
user_Character = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 7) const user_Id = PVariable();
user_Id = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 8) const user_Mp = PVariable();
user_Mp = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 9) const user_MpRecovery = PVariable();
user_MpRecovery = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 10) const user_MpRecoverTimer = PVariable();
user_MpRecoverTimer = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 11) const user_MaxHp = PVariable();
user_MaxHp = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 12) const user_MaxMp = PVariable();
user_MaxMp = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 13) const user_Exp = PVariable();
user_Exp = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 14) const user_Gold = PVariable();
user_Gold = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 15) const user_Loc = PVariable();
user_Loc = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 16) const user_LevelUpCount = PVariable();
user_LevelUpCount = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 17) const user_TotalAcquireGold = PVariable();
user_TotalAcquireGold = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 18) const user_TotalSpendGold = PVariable();
user_TotalSpendGold = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 19) const user_Job = PVariable();
user_Job = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 21) const Slot1_Level = PVariable();
Slot1_Level = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 22) const Slot1_Exp = PVariable();
Slot1_Exp = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 23) const Slot1_Job = PVariable();
Slot1_Job = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 24) const Slot2_Level = PVariable();
Slot2_Level = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 25) const Slot2_Exp = PVariable();
Slot2_Exp = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 26) const Slot2_Job = PVariable();
Slot2_Job = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 27) const Slot3_Level = PVariable();
Slot3_Level = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 28) const Slot3_Exp = PVariable();
Slot3_Exp = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 29) const Slot3_Job = PVariable();
Slot3_Job = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 30) const Slot4_Level = PVariable();
Slot4_Level = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 31) const Slot4_Exp = PVariable();
Slot4_Exp = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 32) const Slot4_Job = PVariable();
Slot4_Job = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 33) const Slot5_Level = PVariable();
Slot5_Level = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 34) const Slot5_Exp = PVariable();
Slot5_Exp = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 35) const Slot5_Job = PVariable();
Slot5_Job = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 37) const SaveState = PVariable();
SaveState = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 38) const LoadState = PVariable();
LoadState = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 39) const print = PVariable();
print = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 40) const LoadItem = PVariable();
LoadItem = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 43) const isSurvive = PVariable();
isSurvive = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 44) const isHold = PVariable();
isHold = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 45) const isInvincible = PVariable();
isInvincible = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 46) const isInventory = PVariable();
isInventory = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 47) const isDebug = PVariable();
isDebug = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 48) const isFullInven = PVariable();
isFullInven = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 50) const MaxLevel = 3;
MaxLevel = _CGFW(lambda: [3], 1)[0]
# (Line 51) const MaxInven = 21;
MaxInven = _CGFW(lambda: [21], 1)[0]
# (Line 52) const Crafting = PVariable();
Crafting = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 53) const s = StringBuffer(1000);
s = _CGFW(lambda: [StringBuffer(1000)], 1)[0]
# (Line 55) const MaxUnsawnTimber = 4;
MaxUnsawnTimber = _CGFW(lambda: [4], 1)[0]
# (Line 56) const MaxTimber = 4;
MaxTimber = _CGFW(lambda: [4], 1)[0]
# (Line 57) const MaxIronOre = 4;
MaxIronOre = _CGFW(lambda: [4], 1)[0]
# (Line 59) const Potal = PVariable();
Potal = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 60) const Quest001 = PVariable();
Quest001 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 63) const hour = 0;
hour = _CGFW(lambda: [0], 1)[0]
# (Line 64) const minute = 0;
minute = _CGFW(lambda: [0], 1)[0]
# (Line 65) var second = 0;
second = EUDCreateVariables(1)
_IGVA([second], lambda: [0])
# (Line 67) const MonsterTemp = 0;
MonsterTemp = _CGFW(lambda: [0], 1)[0]
# (Line 70) object Item {
# (Line 71) var name;
class Item(EUDStruct):
    # (Line 72) var dmg;
    # (Line 73) var lv;
    # (Line 74) var price;
    # (Line 75) var sell_pirce;
    # (Line 76) var content;
    # (Line 77) };
    # (Line 80) const UnsawnTimber = Item();
    _fields_ = [
        'name',
        'dmg',
        'lv',
        'price',
        'sell_pirce',
        'content',
    ]

UnsawnTimber = _CGFW(lambda: [Item()], 1)[0]
# (Line 81) const Timber = Item();
Timber = _CGFW(lambda: [Item()], 1)[0]
# (Line 82) const IronOre = Item();
IronOre = _CGFW(lambda: [Item()], 1)[0]
# (Line 84) const ITEM_UnsawnTimber = PVariable();
ITEM_UnsawnTimber = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 85) const ITEM_Timber = PVariable();
ITEM_Timber = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 86) const ITEM_IronOre = PVariable();
ITEM_IronOre = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 90) const HPPotion1 = Item();
HPPotion1 = _CGFW(lambda: [Item()], 1)[0]
# (Line 91) const HPPotion2 = Item();
HPPotion2 = _CGFW(lambda: [Item()], 1)[0]
# (Line 92) const HPPotion3 = Item();
HPPotion3 = _CGFW(lambda: [Item()], 1)[0]
# (Line 93) const HPPotion4 = Item();
HPPotion4 = _CGFW(lambda: [Item()], 1)[0]
# (Line 94) const HPPotion5 = Item();
HPPotion5 = _CGFW(lambda: [Item()], 1)[0]
# (Line 96) const ITEM_HPPotion1 = PVariable();
ITEM_HPPotion1 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 97) const ITEM_HPPotion2 = PVariable();
ITEM_HPPotion2 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 98) const ITEM_HPPotion3 = PVariable();
ITEM_HPPotion3 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 99) const ITEM_HPPotion4 = PVariable();
ITEM_HPPotion4 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 100) const ITEM_HPPotion5 = PVariable();
ITEM_HPPotion5 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 104) const GoblinTooth = Item();
GoblinTooth = _CGFW(lambda: [Item()], 1)[0]
# (Line 106) const ITEM_GoblinTooth = PVariable();
ITEM_GoblinTooth = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 111) const GoblinKills = PVariable();
GoblinKills = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 112) const OrcKills = PVariable();
OrcKills = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 113) const LamiaKills = PVariable();
LamiaKills = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 114) const PengKills = PVariable();
PengKills = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 115) const BiterKills = PVariable();
BiterKills = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 118) const MaxExp = [10, 20, 30];
MaxExp = _CGFW(lambda: [_ARR(FlattenList([10, 20, 30]))], 1)[0]
# (Line 120) function onPluginStart()
# (Line 121) {
@EUDFunc
def onPluginStart():
    # (Line 122) UnsawnTimber.name = Db("\x04원목");
    _ATTW(UnsawnTimber, 'name') << (Db("\x04원목"))
    # (Line 123) UnsawnTimber.dmg = 0;
    _ATTW(UnsawnTimber, 'dmg') << (0)
    # (Line 124) UnsawnTimber.lv = 0;
    _ATTW(UnsawnTimber, 'lv') << (0)
    # (Line 125) UnsawnTimber.price = 45;
    _ATTW(UnsawnTimber, 'price') << (45)
    # (Line 126) UnsawnTimber.sell_pirce = 20;
    _ATTW(UnsawnTimber, 'sell_pirce') << (20)
    # (Line 127) UnsawnTimber.content = Db("제재소에서 가공이 필요한 원목이다.");
    _ATTW(UnsawnTimber, 'content') << (Db("제재소에서 가공이 필요한 원목이다."))
    # (Line 129) Timber.name = Db("\x04목재");
    _ATTW(Timber, 'name') << (Db("\x04목재"))
    # (Line 130) Timber.dmg = 0;
    _ATTW(Timber, 'dmg') << (0)
    # (Line 131) Timber.lv = 0;
    _ATTW(Timber, 'lv') << (0)
    # (Line 132) Timber.price = 45;
    _ATTW(Timber, 'price') << (45)
    # (Line 133) Timber.sell_pirce = 20;
    _ATTW(Timber, 'sell_pirce') << (20)
    # (Line 134) Timber.content = Db("각종 무기와 방어구 및 다양한 아이템의 제작 재료로 사용된다.");
    _ATTW(Timber, 'content') << (Db("각종 무기와 방어구 및 다양한 아이템의 제작 재료로 사용된다."))
    # (Line 136) IronOre.name = Db("\x04철광석");
    _ATTW(IronOre, 'name') << (Db("\x04철광석"))
    # (Line 137) IronOre.dmg = 0;
    _ATTW(IronOre, 'dmg') << (0)
    # (Line 138) IronOre.lv = 0;
    _ATTW(IronOre, 'lv') << (0)
    # (Line 139) IronOre.price = 45;
    _ATTW(IronOre, 'price') << (45)
    # (Line 140) IronOre.sell_pirce = 20;
    _ATTW(IronOre, 'sell_pirce') << (20)
    # (Line 141) IronOre.content = Db("각종 무기와 방어구 및 다양한 아이템의 제작 재료로 사용된다.");
    _ATTW(IronOre, 'content') << (Db("각종 무기와 방어구 및 다양한 아이템의 제작 재료로 사용된다."))
    # (Line 144) HPPotion1.name = Db("HP 회복 물약 1");
    _ATTW(HPPotion1, 'name') << (Db("HP 회복 물약 1"))
    # (Line 145) HPPotion1.dmg = 20;
    _ATTW(HPPotion1, 'dmg') << (20)
    # (Line 146) HPPotion1.lv = 0;
    _ATTW(HPPotion1, 'lv') << (0)
    # (Line 147) HPPotion1.price = 20;
    _ATTW(HPPotion1, 'price') << (20)
    # (Line 148) HPPotion1.sell_pirce = 20;
    _ATTW(HPPotion1, 'sell_pirce') << (20)
    # (Line 149) HPPotion1.content = str.HpPotion1;
    _ATTW(HPPotion1, 'content') << (str.HpPotion1)
    # (Line 151) HPPotion2.name = Db("HP 회복 물약 2");
    _ATTW(HPPotion2, 'name') << (Db("HP 회복 물약 2"))
    # (Line 152) HPPotion2.dmg = 0;
    _ATTW(HPPotion2, 'dmg') << (0)
    # (Line 153) HPPotion2.lv = 0;
    _ATTW(HPPotion2, 'lv') << (0)
    # (Line 154) HPPotion2.price = 35;
    _ATTW(HPPotion2, 'price') << (35)
    # (Line 155) HPPotion2.sell_pirce = 20;
    _ATTW(HPPotion2, 'sell_pirce') << (20)
    # (Line 156) HPPotion2.content = str.HpPotion2;
    _ATTW(HPPotion2, 'content') << (str.HpPotion2)
    # (Line 158) HPPotion3.name = Db("HP 회복 물약 3");
    _ATTW(HPPotion3, 'name') << (Db("HP 회복 물약 3"))
    # (Line 159) HPPotion3.dmg = 0;
    _ATTW(HPPotion3, 'dmg') << (0)
    # (Line 160) HPPotion3.lv = 0;
    _ATTW(HPPotion3, 'lv') << (0)
    # (Line 161) HPPotion3.price = 35;
    _ATTW(HPPotion3, 'price') << (35)
    # (Line 162) HPPotion3.sell_pirce = 20;
    _ATTW(HPPotion3, 'sell_pirce') << (20)
    # (Line 163) HPPotion3.content = str.HpPotion3;
    _ATTW(HPPotion3, 'content') << (str.HpPotion3)
    # (Line 165) HPPotion4.name = Db("HP 회복 물약 4");
    _ATTW(HPPotion4, 'name') << (Db("HP 회복 물약 4"))
    # (Line 166) HPPotion4.dmg = 0;
    _ATTW(HPPotion4, 'dmg') << (0)
    # (Line 167) HPPotion4.lv = 0;
    _ATTW(HPPotion4, 'lv') << (0)
    # (Line 168) HPPotion4.price = 35;
    _ATTW(HPPotion4, 'price') << (35)
    # (Line 169) HPPotion4.sell_pirce = 20;
    _ATTW(HPPotion4, 'sell_pirce') << (20)
    # (Line 170) HPPotion4.content = str.HpPotion4;
    _ATTW(HPPotion4, 'content') << (str.HpPotion4)
    # (Line 172) HPPotion5.name = Db("HP 회복 물약 4");
    _ATTW(HPPotion5, 'name') << (Db("HP 회복 물약 4"))
    # (Line 173) HPPotion5.dmg = 0;
    _ATTW(HPPotion5, 'dmg') << (0)
    # (Line 174) HPPotion5.lv = 0;
    _ATTW(HPPotion5, 'lv') << (0)
    # (Line 175) HPPotion5.price = 35;
    _ATTW(HPPotion5, 'price') << (35)
    # (Line 176) HPPotion5.sell_pirce = 20;
    _ATTW(HPPotion5, 'sell_pirce') << (20)
    # (Line 177) HPPotion5.content = str.HpPotion5;
    _ATTW(HPPotion5, 'content') << (str.HpPotion5)
    # (Line 180) GoblinTooth.name = Db("고블린의 이빨");
    _ATTW(GoblinTooth, 'name') << (Db("고블린의 이빨"))
    # (Line 181) GoblinTooth.dmg = 0;
    _ATTW(GoblinTooth, 'dmg') << (0)
    # (Line 182) GoblinTooth.lv = 0;
    _ATTW(GoblinTooth, 'lv') << (0)
    # (Line 183) GoblinTooth.price = 45;
    _ATTW(GoblinTooth, 'price') << (45)
    # (Line 184) GoblinTooth.sell_pirce = 20;
    _ATTW(GoblinTooth, 'sell_pirce') << (20)
    # (Line 185) GoblinTooth.content = Db("고블린을 처치시 얻을 수 있는 전리품");
    _ATTW(GoblinTooth, 'content') << (Db("고블린을 처치시 얻을 수 있는 전리품"))
    # (Line 188) }
