## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Variables as v;
import Variables as v
# (Line 2) import Inventory as inv;
import Inventory as inv
# (Line 3) import String as string;
import String as string
# (Line 4) import timeline as tL;
import timeline as tL
# (Line 5) import Crafting as cr;
import Crafting as cr
# (Line 6) import Function as func;
import Function as func
# (Line 7) import String as str;
import String as str
# (Line 8) import SCArchive as sca;
import SCArchive as sca
# (Line 10) const s = StringBuffer(1000);
s = _CGFW(lambda: [StringBuffer(1000)], 1)[0]
# (Line 12) function onPluginStart() {
@EUDFunc
def onPluginStart():
    # (Line 13) sca.Init();
    sca.Init()
    # (Line 15) v.user_Loc[0] = $L("Player 1");
    _ARRW(v.user_Loc, 0) << (GetLocationIndex("Player 1"))
    # (Line 16) v.user_Loc[1] = $L("Player 2");
    _ARRW(v.user_Loc, 1) << (GetLocationIndex("Player 2"))
    # (Line 17) v.user_Loc[3] = $L("Player 3");
    _ARRW(v.user_Loc, 3) << (GetLocationIndex("Player 3"))
    # (Line 18) v.user_Loc[4] = $L("Player 4");
    _ARRW(v.user_Loc, 4) << (GetLocationIndex("Player 4"))
    # (Line 19) v.user_Loc[5] = $L("Player 5");
    _ARRW(v.user_Loc, 5) << (GetLocationIndex("Player 5"))
    # (Line 20) v.user_Loc[6] = $L("Player 6");
    _ARRW(v.user_Loc, 6) << (GetLocationIndex("Player 6"))
    # (Line 22) KillUnit("Zerg Scourge", P1);
    # (Line 24) EUDPlayerLoop()();
    DoActions(KillUnit("Zerg Scourge", P1))
    EUDPlayerLoop()()
    # (Line 27) for(var i = 0; i < v.MaxInven; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= v.MaxInven, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 28) {
        # (Line 29) if(getcurpl() < 6)
        if EUDIf()(f_getcurpl() >= 6, neg=True):
            # (Line 30) {
            # (Line 31) inv.InvenName[21 * getcurpl() + i] = Db("-");
            _ARRW(inv.InvenName, 21 * f_getcurpl() + i) << (Db("-"))
            # (Line 32) inv.InvenAmount[21 * getcurpl() + i] = 0;
            _ARRW(inv.InvenAmount, 21 * f_getcurpl() + i) << (0)
            # (Line 33) }
            # (Line 34) }
        EUDEndIf()
        # (Line 37) if(getcurpl() < 7)
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    if EUDIf()(f_getcurpl() >= 7, neg=True):
        # (Line 38) {
        # (Line 39) SetAllianceStatus(P1, Ally);
        # (Line 40) SetAllianceStatus(P2, Ally);
        DoActions(SetAllianceStatus(P1, Ally))
        # (Line 41) SetAllianceStatus(P3, Ally);
        DoActions(SetAllianceStatus(P2, Ally))
        # (Line 42) SetAllianceStatus(P4, Ally);
        DoActions(SetAllianceStatus(P3, Ally))
        # (Line 43) SetAllianceStatus(P5, Ally);
        DoActions(SetAllianceStatus(P4, Ally))
        # (Line 44) SetAllianceStatus(P6, Ally);
        DoActions(SetAllianceStatus(P5, Ally))
        # (Line 45) SetAllianceStatus(P7, Ally);
        DoActions(SetAllianceStatus(P6, Ally))
        # (Line 46) }
        DoActions(SetAllianceStatus(P7, Ally))
        # (Line 47) else if(getcurpl() == 7)
    if EUDElseIf()(f_getcurpl() == 7):
        # (Line 48) {
        # (Line 49) SetAllianceStatus(P1, Enemy);
        # (Line 50) SetAllianceStatus(P2, Enemy);
        DoActions(SetAllianceStatus(P1, Enemy))
        # (Line 51) SetAllianceStatus(P3, Enemy);
        DoActions(SetAllianceStatus(P2, Enemy))
        # (Line 52) SetAllianceStatus(P4, Enemy);
        DoActions(SetAllianceStatus(P3, Enemy))
        # (Line 53) SetAllianceStatus(P5, Enemy);
        DoActions(SetAllianceStatus(P4, Enemy))
        # (Line 54) SetAllianceStatus(P6, Enemy);
        DoActions(SetAllianceStatus(P5, Enemy))
        # (Line 55) SetAllianceStatus(P7, Enemy);
        DoActions(SetAllianceStatus(P6, Enemy))
        # (Line 56) }//}
        DoActions(SetAllianceStatus(P7, Enemy))
        # (Line 57) EUDEndPlayerLoop();
    EUDEndIf()
    EUDEndPlayerLoop()
    # (Line 61) dwwrite(0x65FD00 + 9808 + 156 * 4, 10); // 파일런 체력
    f_dwwrite(0x65FD00 + 9808 + 156 * 4, 10)
    # (Line 62) }
    # (Line 64) function beforeTriggerExec() {

@EUDFunc
def beforeTriggerExec():
    # (Line 65) sca.Exec();
    sca.Exec()
    # (Line 68) settbl2(1303, 8, "\x0D\x0D\x0D\x0D\x0D\x0D");
    f_settbl2(1303, 8, "\x0D\x0D\x0D\x0D\x0D\x0D")
    # (Line 69) settbl2(1303, 8, v.user_Exp[0]);
    f_settbl2(1303, 8, v.user_Exp[0])
    # (Line 70) settbl2(1303, 19, "\x0D\x0D\x0D\x0D\x0D\x0D");
    f_settbl2(1303, 19, "\x0D\x0D\x0D\x0D\x0D\x0D")
    # (Line 71) settbl2(1303, 19, v.MaxExp[v.user_Level[0] - 1]);
    f_settbl2(1303, 19, v.MaxExp[v.user_Level[0] - 1])
    # (Line 72) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 73) if(getcurpl() < 6) bwrite_epd(v.user_Character[getcurpl()] + 0x08F / 4,  0x08F % 4, v.user_Level[getcurpl()]);
    if EUDIf()(f_getcurpl() >= 6, neg=True):
        f_bwrite_epd(v.user_Character[f_getcurpl()] + 0x08F // 4, 0x08F % 4, v.user_Level[f_getcurpl()])
        # (Line 74) EUDEndPlayerLoop();
    EUDEndIf()
    EUDEndPlayerLoop()
    # (Line 97) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 98) if(v.isHold[getcurpl()] == 1) func.UnitStop();
    if EUDIf()(v.isHold[f_getcurpl()] == 1):
        func.UnitStop()
        # (Line 99) EUDEndPlayerLoop();
    EUDEndIf()
    EUDEndPlayerLoop()
    # (Line 102) if(v.isSurvive[0] == 1) MoveLocation("Player 1", "Terran Marine", P1, "Anywhere");
    if EUDIf()(v.isSurvive[0] == 1):
        # (Line 105) EUDPlayerLoop()();
        DoActions(MoveLocation("Player 1", "Terran Marine", P1, "Anywhere"))
    EUDEndIf()
    EUDPlayerLoop()()
    # (Line 106) if(Deaths(CurrentPlayer, Exactly, 64, "Zerg Overlord") && v.isSurvive[getcurpl()] == 1)
    if EUDIf()(EUDSCAnd()(Deaths(CurrentPlayer, Exactly, 64, "Zerg Overlord"))(v.isSurvive[f_getcurpl()] == 1)()):
        # (Line 107) {
        # (Line 108) if(getcurpl() == 0) CenterView("Player 1");
        if EUDIf()(f_getcurpl() == 0):
            # (Line 109) else if(getcurpl() == 1) CenterView("Player 2");
            DoActions(CenterView("Player 1"))
        if EUDElseIf()(f_getcurpl() == 1):
            # (Line 110) else if(getcurpl() == 2) CenterView("Player 3");
            DoActions(CenterView("Player 2"))
        if EUDElseIf()(f_getcurpl() == 2):
            # (Line 111) else if(getcurpl() == 3) CenterView("Player 4");
            DoActions(CenterView("Player 3"))
        if EUDElseIf()(f_getcurpl() == 3):
            # (Line 112) else if(getcurpl() == 4) CenterView("Player 5");
            DoActions(CenterView("Player 4"))
        if EUDElseIf()(f_getcurpl() == 4):
            # (Line 113) else if(getcurpl() == 5) CenterView("Player 6");
            DoActions(CenterView("Player 5"))
        if EUDElseIf()(f_getcurpl() == 5):
            # (Line 114) }
            DoActions(CenterView("Player 6"))
        EUDEndIf()
        # (Line 115) EUDEndPlayerLoop();
    EUDEndIf()
    EUDEndPlayerLoop()
    # (Line 119) foreach(t : tL.Timeline(48))
    for t in tL.Timeline(48):
        # (Line 120) {
        # (Line 121) if(t == 47)
        if EUDIf()(t == 47):
            # (Line 122) {
            # (Line 123) var ran;
            ran = EUDVariable()
            # (Line 124) ran = (dwrand() % 19) + 1;
            ran << ((f_dwrand() % 19) + 1)
            # (Line 125) switch(ran)
            EUDSwitch(ran)
            # (Line 126) {
            # (Line 127) case 1:
            _t12 = EUDSwitchCase()
            # (Line 128) setloc(15, 214, 748); // CreateTree 로케이션 16
            if _t12(1):
                f_setloc(15, 214, 748)
                # (Line 129) break;
                EUDBreak()
                # (Line 130) case 2:
            _t13 = EUDSwitchCase()
            # (Line 131) setloc(15, 423, 1042);
            if _t13(2):
                f_setloc(15, 423, 1042)
                # (Line 132) break;
                EUDBreak()
                # (Line 133) case 3:
            _t14 = EUDSwitchCase()
            # (Line 134) setloc(15, 287, 1212);
            if _t14(3):
                f_setloc(15, 287, 1212)
                # (Line 135) break;
                EUDBreak()
                # (Line 136) case 4:
            _t15 = EUDSwitchCase()
            # (Line 137) setloc(15, 404, 1251);
            if _t15(4):
                f_setloc(15, 404, 1251)
                # (Line 138) break;
                EUDBreak()
                # (Line 139) case 5:
            _t16 = EUDSwitchCase()
            # (Line 140) setloc(15, 507, 1121);
            if _t16(5):
                f_setloc(15, 507, 1121)
                # (Line 141) break;
                EUDBreak()
                # (Line 142) case 6:
            _t17 = EUDSwitchCase()
            # (Line 143) setloc(15, 360, 1535);
            if _t17(6):
                f_setloc(15, 360, 1535)
                # (Line 144) break;
                EUDBreak()
                # (Line 145) case 7:
            _t18 = EUDSwitchCase()
            # (Line 146) setloc(15, 375, 1724);
            if _t18(7):
                f_setloc(15, 375, 1724)
                # (Line 147) break;
                EUDBreak()
                # (Line 148) case 8:
            _t19 = EUDSwitchCase()
            # (Line 149) setloc(15, 554, 1698);
            if _t19(8):
                f_setloc(15, 554, 1698)
                # (Line 150) break;
                EUDBreak()
                # (Line 151) case 9:
            _t20 = EUDSwitchCase()
            # (Line 152) setloc(15, 734, 1796);
            if _t20(9):
                f_setloc(15, 734, 1796)
                # (Line 153) break;
                EUDBreak()
                # (Line 154) case 10:
            _t21 = EUDSwitchCase()
            # (Line 155) setloc(15, 735, 1472);
            if _t21(10):
                f_setloc(15, 735, 1472)
                # (Line 156) break;
                EUDBreak()
                # (Line 157) case 11:
            _t22 = EUDSwitchCase()
            # (Line 158) setloc(15, 1136, 919);
            if _t22(11):
                f_setloc(15, 1136, 919)
                # (Line 159) break;
                EUDBreak()
                # (Line 160) case 12:
            _t23 = EUDSwitchCase()
            # (Line 161) setloc(15, 1041, 757);
            if _t23(12):
                f_setloc(15, 1041, 757)
                # (Line 162) break;
                EUDBreak()
                # (Line 163) case 13:
            _t24 = EUDSwitchCase()
            # (Line 164) setloc(15, 966, 904);
            if _t24(13):
                f_setloc(15, 966, 904)
                # (Line 165) break;
                EUDBreak()
                # (Line 166) case 14:
            _t25 = EUDSwitchCase()
            # (Line 167) setloc(15, 977, 1052);
            if _t25(14):
                f_setloc(15, 977, 1052)
                # (Line 168) break;
                EUDBreak()
                # (Line 169) case 15:
            _t26 = EUDSwitchCase()
            # (Line 170) setloc(15, 1105, 1118);
            if _t26(15):
                f_setloc(15, 1105, 1118)
                # (Line 171) break;
                EUDBreak()
                # (Line 172) case 16:
            _t27 = EUDSwitchCase()
            # (Line 173) setloc(15, 1131, 1202);
            if _t27(16):
                f_setloc(15, 1131, 1202)
                # (Line 174) break;
                EUDBreak()
                # (Line 175) case 17:
            _t28 = EUDSwitchCase()
            # (Line 176) setloc(15, 1376, 1130);
            if _t28(17):
                f_setloc(15, 1376, 1130)
                # (Line 177) break;
                EUDBreak()
                # (Line 178) case 18:
            _t29 = EUDSwitchCase()
            # (Line 179) setloc(15, 1510, 993);
            if _t29(18):
                f_setloc(15, 1510, 993)
                # (Line 180) break;
                EUDBreak()
                # (Line 181) case 19:
            _t30 = EUDSwitchCase()
            # (Line 182) setloc(15, 1393, 860);
            if _t30(19):
                f_setloc(15, 1393, 860)
                # (Line 183) break;
                EUDBreak()
                # (Line 184) }
            # (Line 186) ran = (dwrand() % 5) + 1;
            EUDEndSwitch()
            ran << ((f_dwrand() % 5) + 1)
            # (Line 187) switch(ran)
            EUDSwitch(ran)
            # (Line 188) {
            # (Line 189) case 1:
            _t31 = EUDSwitchCase()
            # (Line 190) wwrite(0x665AC0 + 1696 + 153 * 2, 634);
            if _t31(1):
                f_wwrite(0x665AC0 + 1696 + 153 * 2, 634)
                # (Line 191) break;
                EUDBreak()
                # (Line 192) case 2:
            _t32 = EUDSwitchCase()
            # (Line 193) wwrite(0x665AC0 + 1696 + 153 * 2, 626);
            if _t32(2):
                f_wwrite(0x665AC0 + 1696 + 153 * 2, 626)
                # (Line 194) break;
                EUDBreak()
                # (Line 195) case 3:
            _t33 = EUDSwitchCase()
            # (Line 196) wwrite(0x665AC0 + 1696 + 153 * 2, 628);
            if _t33(3):
                f_wwrite(0x665AC0 + 1696 + 153 * 2, 628)
                # (Line 197) break;
                EUDBreak()
                # (Line 198) case 4:
            _t34 = EUDSwitchCase()
            # (Line 199) wwrite(0x665AC0 + 1696 + 153 * 2, 630);
            if _t34(4):
                f_wwrite(0x665AC0 + 1696 + 153 * 2, 630)
                # (Line 200) break;
                EUDBreak()
                # (Line 201) case 5:
            _t35 = EUDSwitchCase()
            # (Line 202) wwrite(0x665AC0 + 1696 + 153 * 2, 624);
            if _t35(5):
                f_wwrite(0x665AC0 + 1696 + 153 * 2, 624)
                # (Line 203) break;
                EUDBreak()
                # (Line 204) }
            # (Line 205) if(Bring(P7, Exactly, 0, "Zerg Overlord", "CreateTree"))
            EUDEndSwitch()
            if EUDIf()(Bring(P7, Exactly, 0, "Zerg Overlord", "CreateTree")):
                # (Line 206) CreateUnit(1, "Zerg Overlord", "CreateTree", P7);
                # (Line 207) }
                DoActions(CreateUnit(1, "Zerg Overlord", "CreateTree", P7))
            EUDEndIf()
            # (Line 208) }
        EUDEndIf()
        # (Line 237) EUDPlayerLoop()();

    EUDPlayerLoop()()
    # (Line 239) if(v.Crafting[getcurpl()] == 1) cr.Crafting(v.UnsawnTimber.name);
    if EUDIf()(v.Crafting[f_getcurpl()] == 1):
        cr.Crafting(v.UnsawnTimber.name)
        # (Line 240) if(Bring(P7, AtLeast, 1, "Zerg Overlord", v.user_Loc[getcurpl()] + 1))
    EUDEndIf()
    if EUDIf()(Bring(P7, AtLeast, 1, "Zerg Overlord", v.user_Loc[f_getcurpl()] + 1)):
        # (Line 241) {
        # (Line 243) if(v.ITEM_UnsawnTimber[getcurpl()] == v.MaxUnsawnTimber) s.printAt(9, "\x13\x04더이상 획득할 수 없습니다.");
        if EUDIf()(v.ITEM_UnsawnTimber[f_getcurpl()] == v.MaxUnsawnTimber):
            s.printAt(9, "\x13\x04더이상 획득할 수 없습니다.")
            # (Line 244) else {
        if EUDElse()():
            # (Line 245) s.printAt(9, " ");
            s.printAt(9, " ")
            # (Line 246) s.printAt(10, "\x13\x1f ", str.Logging);
            s.printAt(10, "\x13\x1f ", str.Logging)
            # (Line 247) }
            # (Line 248) if(Bring(CurrentPlayer, Exactly, 0, "Vulture Spider Mine", "mine 1"))
        EUDEndIf()
        if EUDIf()(Bring(CurrentPlayer, Exactly, 0, "Vulture Spider Mine", "mine 1")):
            # (Line 249) CreateUnit(1, "Vulture Spider Mine", "mine 1", CurrentPlayer);
            # (Line 251) if(Deaths(CurrentPlayer, Exactly, 8, "Terran Dropship") && v.Crafting[getcurpl()] == 0 && v.ITEM_UnsawnTimber[getcurpl()] < v.MaxUnsawnTimber)
            DoActions(CreateUnit(1, "Vulture Spider Mine", "mine 1", CurrentPlayer))
        EUDEndIf()
        if EUDIf()(EUDSCAnd()(Deaths(CurrentPlayer, Exactly, 8, "Terran Dropship"))(v.Crafting[f_getcurpl()] == 0)(v.ITEM_UnsawnTimber[f_getcurpl()] >= v.MaxUnsawnTimber, neg=True)()):
            # (Line 252) {
            # (Line 253) v.Crafting[getcurpl()] = 1;
            _ARRW(v.Crafting, f_getcurpl()) << (1)
            # (Line 254) }
            # (Line 255) }
        EUDEndIf()
        # (Line 256) if(Bring(P7, Exactly, 0, "Zerg Overlord", v.user_Loc[getcurpl()] + 1))
    EUDEndIf()
    if EUDIf()(Bring(P7, Exactly, 0, "Zerg Overlord", v.user_Loc[f_getcurpl()] + 1)):
        # (Line 257) {
        # (Line 258) if(Bring(CurrentPlayer, Exactly, 1, "Vulture Spider Mine", "mine 1"))
        if EUDIf()(Bring(CurrentPlayer, Exactly, 1, "Vulture Spider Mine", "mine 1")):
            # (Line 259) {
            # (Line 260) func.TextClear2();
            func.TextClear2()
            # (Line 261) }
            # (Line 262) }
        EUDEndIf()
        # (Line 265) if(v.Crafting[getcurpl()] == 2) cr.Crafting(v.Timber.name);
    EUDEndIf()
    if EUDIf()(v.Crafting[f_getcurpl()] == 2):
        cr.Crafting(v.Timber.name)
        # (Line 266) if(func.EPDBring(13, v.user_Character[getcurpl()]))
    EUDEndIf()
    if EUDIf()(func.EPDBring(13, v.user_Character[f_getcurpl()])):
        # (Line 267) {
        # (Line 268) if(v.ITEM_Timber[getcurpl()] == (v.MaxTimber - 1)) s.printAt(9, "\x13\x04더이상 획득할 수 없습니다.");
        if EUDIf()(v.ITEM_Timber[f_getcurpl()] == (v.MaxTimber - 1)):
            s.printAt(9, "\x13\x04더이상 획득할 수 없습니다.")
            # (Line 269) else {
        if EUDElse()():
            # (Line 270) s.printAt(8, " ");
            s.printAt(8, " ")
            # (Line 271) s.printAt(9, "\x13\x04원목 1 > 목재 2");
            s.printAt(9, "\x13\x04원목 1 > 목재 2")
            # (Line 272) s.printAt(10, "\x13\x1f", str.WoodProcessing);
            s.printAt(10, "\x13\x1f", str.WoodProcessing)
            # (Line 273) }
            # (Line 275) if(Bring(CurrentPlayer, Exactly, 0, "Vulture Spider Mine", "mine 1"))
        EUDEndIf()
        if EUDIf()(Bring(CurrentPlayer, Exactly, 0, "Vulture Spider Mine", "mine 1")):
            # (Line 276) {
            # (Line 277) CreateUnit(2, "Vulture Spider Mine", "mine 1", CurrentPlayer);
            # (Line 278) }
            DoActions(CreateUnit(2, "Vulture Spider Mine", "mine 1", CurrentPlayer))
            # (Line 280) if(v.ITEM_UnsawnTimber[getcurpl()] > 0)
        EUDEndIf()
        if EUDIf()(v.ITEM_UnsawnTimber[f_getcurpl()] <= 0, neg=True):
            # (Line 281) {
            # (Line 282) if(Deaths(CurrentPlayer, Exactly, 8, "Terran Dropship") && v.Crafting[getcurpl()] == 0 && v.ITEM_UnsawnTimber[getcurpl()] > 0 && v.ITEM_Timber[getcurpl()] < (v.MaxTimber - 1))
            if EUDIf()(EUDSCAnd()(Deaths(CurrentPlayer, Exactly, 8, "Terran Dropship"))(v.Crafting[f_getcurpl()] == 0)(v.ITEM_UnsawnTimber[f_getcurpl()] <= 0, neg=True)(v.ITEM_Timber[f_getcurpl()] >= (v.MaxTimber - 1), neg=True)()):
                # (Line 283) {
                # (Line 284) func.RemoveItem(v.UnsawnTimber.name, 1);
                func.RemoveItem(v.UnsawnTimber.name, 1)
                # (Line 285) v.Crafting[getcurpl()] = 2;
                _ARRW(v.Crafting, f_getcurpl()) << (2)
                # (Line 286) }
                # (Line 287) }
            EUDEndIf()
            # (Line 288) }
        EUDEndIf()
        # (Line 289) if(Bring(CurrentPlayer, Exactly, 0, "(any unit)", "Sawmill"))
    EUDEndIf()
    if EUDIf()(Bring(CurrentPlayer, Exactly, 0, "(any unit)", "Sawmill")):
        # (Line 290) {
        # (Line 291) if(Bring(CurrentPlayer, Exactly, 2, "Vulture Spider Mine", "mine 1"))
        if EUDIf()(Bring(CurrentPlayer, Exactly, 2, "Vulture Spider Mine", "mine 1")):
            # (Line 292) {
            # (Line 293) func.TextClear();
            func.TextClear()
            # (Line 294) RemoveUnitAt(2, "Vulture Spider Mine", "mine 1", CurrentPlayer);
            # (Line 295) }
            DoActions(RemoveUnitAt(2, "Vulture Spider Mine", "mine 1", CurrentPlayer))
            # (Line 296) }
        EUDEndIf()
        # (Line 299) if(v.Crafting[getcurpl()] == 3) cr.Crafting(v.IronOre.name);
    EUDEndIf()
    if EUDIf()(v.Crafting[f_getcurpl()] == 3):
        cr.Crafting(v.IronOre.name)
        # (Line 300) if(Bring(P7, AtLeast, 1, "Zerg Queen", v.user_Loc[getcurpl()] + 1))
    EUDEndIf()
    if EUDIf()(Bring(P7, AtLeast, 1, "Zerg Queen", v.user_Loc[f_getcurpl()] + 1)):
        # (Line 301) {
        # (Line 302) if(v.ITEM_IronOre[getcurpl()] == v.MaxIronOre) s.printAt(9, "\x13\x04더이상 획득할 수 없습니다.");
        if EUDIf()(v.ITEM_IronOre[f_getcurpl()] == v.MaxIronOre):
            s.printAt(9, "\x13\x04더이상 획득할 수 없습니다.")
            # (Line 303) else {
        if EUDElse()():
            # (Line 304) s.printAt(9, " ");
            s.printAt(9, " ")
            # (Line 305) s.printAt(10, "\x13\x1f", str.Mining);
            s.printAt(10, "\x13\x1f", str.Mining)
            # (Line 306) }
            # (Line 307) if(Bring(CurrentPlayer, Exactly, 0, "Vulture Spider Mine", "mine 1"))
        EUDEndIf()
        if EUDIf()(Bring(CurrentPlayer, Exactly, 0, "Vulture Spider Mine", "mine 1")):
            # (Line 308) {
            # (Line 309) CreateUnit(3, "Vulture Spider Mine", "mine 1", CurrentPlayer);
            # (Line 310) }
            DoActions(CreateUnit(3, "Vulture Spider Mine", "mine 1", CurrentPlayer))
            # (Line 313) if(Deaths(CurrentPlayer, Exactly, 8, "Terran Dropship") && v.Crafting[getcurpl()] == 0 && v.ITEM_IronOre[getcurpl()] < v.MaxIronOre)
        EUDEndIf()
        if EUDIf()(EUDSCAnd()(Deaths(CurrentPlayer, Exactly, 8, "Terran Dropship"))(v.Crafting[f_getcurpl()] == 0)(v.ITEM_IronOre[f_getcurpl()] >= v.MaxIronOre, neg=True)()):
            # (Line 314) {
            # (Line 315) v.Crafting[getcurpl()] = 3;
            _ARRW(v.Crafting, f_getcurpl()) << (3)
            # (Line 316) }
            # (Line 317) }
        EUDEndIf()
        # (Line 318) if(Bring(P7, Exactly, 0, "Zerg Queen", v.user_Loc[getcurpl()] + 1))
    EUDEndIf()
    if EUDIf()(Bring(P7, Exactly, 0, "Zerg Queen", v.user_Loc[f_getcurpl()] + 1)):
        # (Line 319) {
        # (Line 320) if(Bring(CurrentPlayer, Exactly, 3, "Vulture Spider Mine", "mine 1"))
        if EUDIf()(Bring(CurrentPlayer, Exactly, 3, "Vulture Spider Mine", "mine 1")):
            # (Line 321) {
            # (Line 322) func.TextClear();
            func.TextClear()
            # (Line 323) RemoveUnitAt(3, "Vulture Spider Mine", "mine 1", CurrentPlayer);
            # (Line 324) }
            DoActions(RemoveUnitAt(3, "Vulture Spider Mine", "mine 1", CurrentPlayer))
            # (Line 325) }
        EUDEndIf()
        # (Line 327) EUDEndPlayerLoop();
    EUDEndIf()
    EUDEndPlayerLoop()
    # (Line 330) if(getcurpl() < 6)
    if EUDIf()(f_getcurpl() >= 6, neg=True):
        # (Line 331) {
        # (Line 332) if(v.user_Level[getcurpl()] < v.MaxLevel && v.user_Exp[getcurpl()] >= v.MaxExp[v.user_Level[getcurpl()] - 1])
        if EUDIf()(EUDSCAnd()(v.user_Level[f_getcurpl()] >= v.MaxLevel, neg=True)(v.user_Exp[f_getcurpl()] >= v.MaxExp[v.user_Level[f_getcurpl()] - 1])()):
            # (Line 333) {
            # (Line 334) v.user_Exp[getcurpl()] -= v.MaxExp[v.user_Level[getcurpl()] - 1];
            _ARRW(v.user_Exp, f_getcurpl()).__isub__(v.MaxExp[v.user_Level[f_getcurpl()] - 1])
            # (Line 335) v.user_Level[getcurpl()] += 1;
            _ARRW(v.user_Level, f_getcurpl()).__iadd__(1)
            # (Line 336) v.user_LevelUpCount[getcurpl()] += 7;
            _ARRW(v.user_LevelUpCount, f_getcurpl()).__iadd__(7)
            # (Line 337) func.Heal();
            func.Heal()
            # (Line 338) }
            # (Line 339) }
        EUDEndIf()
        # (Line 342) EUDPlayerLoop()();
    EUDEndIf()
    EUDPlayerLoop()()
    # (Line 343) if(v.user_MpRecoverTimer[getcurpl()] == 0)
    if EUDIf()(v.user_MpRecoverTimer[f_getcurpl()] == 0):
        # (Line 344) {
        # (Line 345) if(v.user_Mp[getcurpl()] < v.user_MaxMp[getcurpl()])
        if EUDIf()(v.user_Mp[f_getcurpl()] >= v.user_MaxMp[f_getcurpl()], neg=True):
            # (Line 346) {
            # (Line 347) v.user_Mp[getcurpl()] += 1;
            _ARRW(v.user_Mp, f_getcurpl()).__iadd__(1)
            # (Line 348) v.user_MpRecoverTimer[getcurpl()] = v.user_MpRecovery[getcurpl()];
            _ARRW(v.user_MpRecoverTimer, f_getcurpl()) << (v.user_MpRecovery[f_getcurpl()])
            # (Line 349) }
            # (Line 350) }
        EUDEndIf()
        # (Line 351) else v.user_MpRecoverTimer[getcurpl()] -= 1;
    if EUDElse()():
        _ARRW(v.user_MpRecoverTimer, f_getcurpl()).__isub__(1)
        # (Line 352) EUDEndPlayerLoop();
    EUDEndIf()
    EUDEndPlayerLoop()
    # (Line 367) const GameSpeed = 12;
    GameSpeed = 12
    # (Line 368) SetMemory(0x5124F0, SetTo, GameSpeed); // 배속
    # (Line 369) }
    DoActions(SetMemory(0x5124F0, SetTo, GameSpeed))
