## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import variable_round as vr;
import variable_round as vr
# (Line 3) function Event_Announcement(cp)
# (Line 4) {
@EUDFunc
def Event_Announcement(cp):
    # (Line 5) switch (cp)
    EUDSwitch(cp)
    # (Line 6) {
    # (Line 7) case 0:
    _t1 = EUDSwitchCase()
    # (Line 8) vr.round_Now[cp] = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "(any unit)", "Player1")'));
    if _t1(0):
        _ARRW(vr.round_Now, cp) << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "(any unit)", "Player1")')))
        # (Line 9) break;
        EUDBreak()
        # (Line 10) case 1:
    _t2 = EUDSwitchCase()
    # (Line 11) vr.round_Now[cp] = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "(any unit)", "Player2")'));
    if _t2(1):
        _ARRW(vr.round_Now, cp) << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "(any unit)", "Player2")')))
        # (Line 12) break;
        EUDBreak()
        # (Line 13) case 2:
    _t3 = EUDSwitchCase()
    # (Line 14) vr.round_Now[cp] = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "(any unit)", "Player3")'));
    if _t3(2):
        _ARRW(vr.round_Now, cp) << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "(any unit)", "Player3")')))
        # (Line 15) break;
        EUDBreak()
        # (Line 16) case 3:
    _t4 = EUDSwitchCase()
    # (Line 17) vr.round_Now[cp] = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "(any unit)", "Player4")'));
    if _t4(3):
        _ARRW(vr.round_Now, cp) << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "(any unit)", "Player4")')))
        # (Line 18) break;
        EUDBreak()
        # (Line 19) case 4:
    _t5 = EUDSwitchCase()
    # (Line 20) vr.round_Now[cp] = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "(any unit)", "Player5")'));
    if _t5(4):
        _ARRW(vr.round_Now, cp) << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "(any unit)", "Player5")')))
        # (Line 21) break;
        EUDBreak()
        # (Line 22) }
    # (Line 24) f_eprintln("\x04", dwread_epd(185 * 12 + 6), " \x1F주차 타입 ", ptr2s(vr.unit_Type[vr.round_type]),
    EUDEndSwitch()
    # (Line 25) " \x17진행도 \x04", dwread_epd(204 * 12 + 6), "/60 ",
    # (Line 26) "\x08 라인 \x04", vr.round_Now[cp], "/", vr.round_Max);
    f_eprintln("\x04", f_dwread_epd(185 * 12 + 6), " \x1F주차 타입 ", ptr2s(vr.unit_Type[vr.round_type]), " \x17진행도 \x04", f_dwread_epd(204 * 12 + 6), "/60 ", "\x08 라인 \x04", vr.round_Now[cp], "/", vr.round_Max)
    # (Line 28) if (Deaths(P6, Exactly, 1, "Round"))
    if EUDIf()(Deaths(P6, Exactly, 1, "Round")):
        # (Line 29) {
        # (Line 30) f_eprintln("\x04이벤트가 진행중입니다.");
        f_eprintln("\x04이벤트가 진행중입니다.")
        # (Line 31) }
        # (Line 32) }
    EUDEndIf()
