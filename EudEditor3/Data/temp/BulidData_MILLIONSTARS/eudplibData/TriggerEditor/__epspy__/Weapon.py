## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) function Set_Label(id, value)
# (Line 2) {
@EUDFunc
def Set_Label(id, value):
    # (Line 3) wwrite(0x6564E0 + 3584 	+ id * 2, value);
    f_wwrite(0x6564E0 + 3584 + id * 2, value)
    # (Line 4) }
    # (Line 6) function Set_Atk(id, value)

# (Line 7) {
@EUDFunc
def Set_Atk(id, value):
    # (Line 8) wwrite(0x6564E0 + 2512 	+ id * 2, value);
    f_wwrite(0x6564E0 + 2512 + id * 2, value)
    # (Line 9) }
    # (Line 11) function Set_AtkBouns(id, value)

# (Line 12) {
@EUDFunc
def Set_AtkBouns(id, value):
    # (Line 13) wwrite(0x6564E0 + 4504 	+ id * 2, value);
    f_wwrite(0x6564E0 + 4504 + id * 2, value)
    # (Line 14) }
    # (Line 16) function Set_AtkSpeed(id, value)

# (Line 17) {
@EUDFunc
def Set_AtkSpeed(id, value):
    # (Line 18) bwrite(0x6564E0 + 2776 		+ id * 1, value);
    f_bwrite(0x6564E0 + 2776 + id * 1, value)
    # (Line 19) }
    # (Line 21) function Set_AtkType(id, value)

# (Line 22) {
@EUDFunc
def Set_AtkType(id, value):
    # (Line 23) bwrite(0x6564E0 + 3448 		+ id * 1, value);
    f_bwrite(0x6564E0 + 3448 + id * 1, value)
    # (Line 24) bwrite(0x6564E0 + 3312 		+ id * 1, 2 +value);
    f_bwrite(0x6564E0 + 3312 + id * 1, 2 + value)
    # (Line 25) }
    # (Line 27) function Set_AtkExplosion(id, value)

# (Line 28) {
@EUDFunc
def Set_AtkExplosion(id, value):
    # (Line 29) bwrite(0x6564E0 + 536 		+ id * 1, value);
    f_bwrite(0x6564E0 + 536 + id * 1, value)
    # (Line 30) }
    # (Line 32) function Set_AtkSplash(id, value)

# (Line 33) {
@EUDFunc
def Set_AtkSplash(id, value):
    # (Line 34) wwrite(0x6564E0 + 936 		+ id * 2, value / 4);
    f_wwrite(0x6564E0 + 936 + id * 2, value // 4)
    # (Line 35) wwrite(0x6564E0 + 3048 	+ id * 2, value / 2);
    f_wwrite(0x6564E0 + 3048 + id * 2, value // 2)
    # (Line 36) wwrite(0x6564E0 + 4768 	+ id * 2, value);
    f_wwrite(0x6564E0 + 4768 + id * 2, value)
    # (Line 37) }
    # (Line 39) function Set_AtkRange(id, value)

# (Line 40) {
@EUDFunc
def Set_AtkRange(id, value):
    # (Line 41) dwwrite(0x6564E0 + 1336 + id * 4, 0);
    f_dwwrite(0x6564E0 + 1336 + id * 4, 0)
    # (Line 42) dwwrite(0x6564E0 + 3984 + id * 4, value * 32);
    f_dwwrite(0x6564E0 + 3984 + id * 4, value * 32)
    # (Line 43) }
    # (Line 45) function Set_UnitRange(id, value)

# (Line 46) {
@EUDFunc
def Set_UnitRange(id, value):
    # (Line 47) bwrite(0x65FD00 + 12472 + id * 1, value);
    f_bwrite(0x65FD00 + 12472 + id * 1, value)
    # (Line 48) }
    # (Line 50) function Set_Rank(id, value)

# (Line 51) {
@EUDFunc
def Set_Rank(id, value):
    # (Line 52) bwrite(0x65FD00 + 16592 + id * 1, value);
    f_bwrite(0x65FD00 + 16592 + id * 1, value)
    # (Line 53) }
    # (Line 57) function Get_Atk(id)

# (Line 58) {
@EUDFunc
def Get_Atk(id):
    # (Line 59) id = wread(0x6564E0 + 2512 + id * 2);
    id << (f_wread(0x6564E0 + 2512 + id * 2))
    # (Line 60) }
    # (Line 62) function Get_AtkBouns(id)

# (Line 63) {
@EUDFunc
def Get_AtkBouns(id):
    # (Line 64) id = wread(0x6564E0 + 4504 + id * 2);
    id << (f_wread(0x6564E0 + 4504 + id * 2))
    # (Line 65) }
    # (Line 67) function Get_AtkSpeed(id)

# (Line 68) {
@EUDFunc
def Get_AtkSpeed(id):
    # (Line 69) id = bread(0x6564E0 + 2776 + id * 1);
    id << (f_bread(0x6564E0 + 2776 + id * 1))
    # (Line 70) }
    # (Line 72) function Get_AtkType(id)

# (Line 73) {
@EUDFunc
def Get_AtkType(id):
    # (Line 74) id = bread(0x6564E0 + 3448 + id * 1);
    id << (f_bread(0x6564E0 + 3448 + id * 1))
    # (Line 75) }
    # (Line 77) function Get_AtkExplosion(id, value)

# (Line 78) {
@EUDFunc
def Get_AtkExplosion(id, value):
    # (Line 79) id = bread(0x6564E0 + 536 	+ id * 1);
    id << (f_bread(0x6564E0 + 536 + id * 1))
    # (Line 80) }
    # (Line 82) function Get_AtkSplash(id)

# (Line 83) {
@EUDFunc
def Get_AtkSplash(id):
    # (Line 84) id = wread(0x6564E0 + 936 	+ id * 2);
    id << (f_wread(0x6564E0 + 936 + id * 2))
    # (Line 85) id = wread(0x6564E0 + 3048 + id * 2);
    id << (f_wread(0x6564E0 + 3048 + id * 2))
    # (Line 86) id = wread(0x6564E0 + 4768 + id * 2);
    id << (f_wread(0x6564E0 + 4768 + id * 2))
    # (Line 87) }
    # (Line 89) function Get_Rank(id)

# (Line 90) {
@EUDFunc
def Get_Rank(id):
    # (Line 91) id = bread(0x65FD00 + 16592 + id * 1);
    id << (f_bread(0x65FD00 + 16592 + id * 1))
    # (Line 92) }
