## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 2) const Base_Unit_Sight			= [7, 3, 3, 5, 7, 4, 5, 4, 3, 4, 5, 3, 4];
Base_Unit_Sight = _CGFW(lambda: [_ARR(FlattenList([7, 3, 3, 5, 7, 4, 5, 4, 3, 4, 5, 3, 4]))], 1)[0]
# (Line 4) const Princess_Unit_Index		= [61, 65, 66, 67, 68, 70, 71, 74, 75, 76, 77, 78, 79];
Princess_Unit_Index = _CGFW(lambda: [_ARR(FlattenList([61, 65, 66, 67, 68, 70, 71, 74, 75, 76, 77, 78, 79]))], 1)[0]
# (Line 5) const Fariy_Unit_Index			= [39, 40, 43, 44, 46, 48, 51, 52, 53, 54, 55, 56, 60];
Fariy_Unit_Index = _CGFW(lambda: [_ARR(FlattenList([39, 40, 43, 44, 46, 48, 51, 52, 53, 54, 55, 56, 60]))], 1)[0]
# (Line 6) const Angel_Unit_Index 			= [0, 1, 2, 8, 9, 10, 12, 16, 19, 20, 21, 37, 38];
Angel_Unit_Index = _CGFW(lambda: [_ARR(FlattenList([0, 1, 2, 8, 9, 10, 12, 16, 19, 20, 21, 37, 38]))], 1)[0]
# (Line 9) const Base_Weapon_Damage	= [17, 6, 9, 15, 10, 19, 16, 7, 15, 9, 11, 10, 8];
Base_Weapon_Damage = _CGFW(lambda: [_ARR(FlattenList([17, 6, 9, 15, 10, 19, 16, 7, 15, 9, 11, 10, 8]))], 1)[0]
# (Line 10) const Base_Weapon_Increase 	= [5, 3, 3, 4, 5, 4, 4, 3, 2, 3, 2, 1, 1];
Base_Weapon_Increase = _CGFW(lambda: [_ARR(FlattenList([5, 3, 3, 4, 5, 4, 4, 3, 2, 3, 2, 1, 1]))], 1)[0]
# (Line 11) const Base_Weapon_Speed 		= [18, 12, 12, 18, 24, 24, 18, 12, 36, 24, 18, 36, 30];
Base_Weapon_Speed = _CGFW(lambda: [_ARR(FlattenList([18, 12, 12, 18, 24, 24, 18, 12, 36, 24, 18, 36, 30]))], 1)[0]
# (Line 12) const Base_Weapon_Splash 		= [36, 0, 0, 0, 24, 36, 0, 0, 24, 0, 0, 0, 0];
Base_Weapon_Splash = _CGFW(lambda: [_ARR(FlattenList([36, 0, 0, 0, 24, 36, 0, 0, 24, 0, 0, 0, 0]))], 1)[0]
# (Line 13) const Base_Weapon_Range 		= [224, 96, 96, 160, 224, 128, 160, 128, 96, 128, 160, 96, 128];
Base_Weapon_Range = _CGFW(lambda: [_ARR(FlattenList([224, 96, 96, 160, 224, 128, 160, 128, 96, 128, 160, 96, 128]))], 1)[0]
# (Line 15) const Princess_Weapon_Index	= [38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52 ,53];
Princess_Weapon_Index = _CGFW(lambda: [_ARR(FlattenList([38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53]))], 1)[0]
# (Line 16) const Fairy_Weapon_Index		= [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 36, 37];
Fairy_Weapon_Index = _CGFW(lambda: [_ARR(FlattenList([20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 36, 37]))], 1)[0]
# (Line 17) const Angel_Weapon_Index		= [0, 1, 2, 3, 4, 5, 7, 9, 11, 12, 16, 18, 19];
Angel_Weapon_Index = _CGFW(lambda: [_ARR(FlattenList([0, 1, 2, 3, 4, 5, 7, 9, 11, 12, 16, 18, 19]))], 1)[0]
