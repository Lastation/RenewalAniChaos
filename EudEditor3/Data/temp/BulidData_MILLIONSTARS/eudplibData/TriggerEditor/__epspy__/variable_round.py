## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) var round;									// 현재 라운드
round = EUDVariable()
# (Line 2) const round_Now 	= PVariable();			// 현재 라인 유닛
round_Now = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 3) const Unit_Count 	= PVariable();			// 유닛 갯수
Unit_Count = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 4) var event 			= 0;						// 이벤트 번호
event = EUDCreateVariables(1)
_IGVA([event], lambda: [0])
# (Line 7) const round_hp =
# (Line 8) [8, 10, 19, 27, 35, 42, 51, 60, 70, 82, 3,
# (Line 9) 112, 131, 154, 180, 210, 245, 284, 329, 379, 6,
# (Line 10) 498, 568, 645, 729, 822, 923, 1033, 1152, 1281, 9,
# (Line 11) 1569, 1729, 1900, 2083, 2278, 2485, 2705, 2939, 3186, 12,
# (Line 12) 3723, 4013, 4319, 4640, 4978, 5331, 5702, 6090, 6495, 15,
# (Line 13) 7361, 7822, 8302, 8802, 9321, 9862, 10423, 11005, 11609, 18,
# (Line 14) 12883, 13554, 14249, 14967, 15709, 16476, 17267, 18084, 18926, 21,
# (Line 15) 20689, 21611, 22560, 23536, 24541, 25574, 26636, 27727, 28848, 30];
round_hp = _CGFW(lambda: [_ARR(FlattenList([8, 10, 19, 27, 35, 42, 51, 60, 70, 82, 3, 112, 131, 154, 180, 210, 245, 284, 329, 379, 6, 498, 568, 645, 729, 822, 923, 1033, 1152, 1281, 9, 1569, 1729, 1900, 2083, 2278, 2485, 2705, 2939, 3186, 12, 3723, 4013, 4319, 4640, 4978, 5331, 5702, 6090, 6495, 15, 7361, 7822, 8302, 8802, 9321, 9862, 10423, 11005, 11609, 18, 12883, 13554, 14249, 14967, 15709, 16476, 17267, 18084, 18926, 21, 20689, 21611, 22560, 23536, 24541, 25574, 26636, 27727, 28848, 30]))], 1)[0]
# (Line 17) const unit_Type =
# (Line 18) [Db("\x1B댄스 [프린세스]"),
# (Line 19) Db("\x1C보컬 [페어리]"),
# (Line 20) Db("\x19비쥬얼 [엔젤]"),
# (Line 21) Db("\x0FAllType [모든 타입]")];
unit_Type = _CGFW(lambda: [_ARR(FlattenList([Db("\x1B댄스 [프린세스]"), Db("\x1C보컬 [페어리]"), Db("\x19비쥬얼 [엔젤]"), Db("\x0FAllType [모든 타입]")]))], 1)[0]
# (Line 23) const event_hp =
# (Line 24) [100, 200, 400, 700, 1000, 1500, 3000];
event_hp = _CGFW(lambda: [_ARR(FlattenList([100, 200, 400, 700, 1000, 1500, 3000]))], 1)[0]
# (Line 26) const event_name =
# (Line 27) [Db(u2b("\x04#REF")),
# (Line 28) Db(u2b("\x19Justice \x1BOR \x1CVoice")),
# (Line 29) Db(u2b("\x1CEternal Harmony")),
# (Line 30) Db(u2b("\x1C기다림의 Lacrima")),
# (Line 31) Db(u2b("\x19러\x04닝 \x19하잇")),
# (Line 32) Db(u2b("\x19White \x0FVows")),
# (Line 33) Db(u2b("\x08협기난무")),
# (Line 34) Db(u2b("\x1BCherry Colored Love")),
# (Line 35) Db(u2b("\x08H\x04OME, \x19S\x04WEET \x11F\x10R\x1BI\x04ENDS\x08H\x04IP")),
# (Line 36) Db(u2b("\x1Fbrave HARMONY")),
# (Line 37) Db(u2b("\x04Su\x1Dper \x1CDup\x04er")),
# (Line 38) Db(u2b("\x1B메멘토? \x0F모멘트♪ \x11루루루루루☆")),
# (Line 39) Db(u2b("\x15dans l'obscurite")),
# (Line 40) Db(u2b("\x1CBonnes! Bonnes!! Vacances!!!")),
# (Line 41) Db(u2b("\x19Angelic Parade♪")),
# (Line 42) Db(u2b("\x1C프리뮬러")),
# (Line 43) Db(u2b("\x04STANDING ALIVE")),
# (Line 44) Db(u2b("\x11선 리듬 오케스트라♪")),
# (Line 45) Db(u2b("\x10P\x1BR\x1FETTY \x10D\x0FRE\x10A\x0FME\x1BR")),
# (Line 46) Db(u2b("\x04G\x1B♡\x04F")),
# (Line 47) Db(u2b("\x10피\x0F코\x10피\x0F코 \x08I\x0FI\x19K\x10O\x11! \x08인\x1C베\x11이\x0F더")),
# (Line 48) Db(u2b("\x1F월요일의 크림소다")),
# (Line 49) Db(u2b("\x19성장\x10Chu→\x1BLOVER!!")),
# (Line 50) Db(u2b("\x15Hello \x04콘체르토")),
# (Line 51) Db(u2b("\x10B\x19e\x10a\x19t \x10the \x1FW\x19o\x1Fr\x19l\x1Fd\x19!\x1F!\x19!")),
# (Line 52) Db(u2b("\x1F눈동자 속의 시리우스")),
# (Line 53) Db(u2b("\x11f\x0Fr\x18u\x1Bi\x04t\x08y l\x11o\x10v\x1Fe")),
# (Line 54) Db(u2b("\x1BPrincess Be Ambitious!!")),
# (Line 55) Db(u2b("\x19별무리의 심포니아")),
# (Line 56) Db(u2b("\x0FBirth of \x04Color")),
# (Line 57) Db(u2b("\x10Starry Melody")),
# (Line 58) Db(u2b("\x19구호는 스타트 업!")),
# (Line 59) Db(u2b("\x15Fermata in Rapsodia")),
# (Line 60) Db(u2b("\x04래빗 \x1B퍼")),
# (Line 61) Db(u2b("\x19World Changer")),
# (Line 62) Db(u2b("\x08L\x19E\x0EA\x1BD\x18E\x11R\x1C!\x19!")),];
event_name = _CGFW(lambda: [_ARR(FlattenList([Db(u2b("\x04#REF")), Db(u2b("\x19Justice \x1BOR \x1CVoice")), Db(u2b("\x1CEternal Harmony")), Db(u2b("\x1C기다림의 Lacrima")), Db(u2b("\x19러\x04닝 \x19하잇")), Db(u2b("\x19White \x0FVows")), Db(u2b("\x08협기난무")), Db(u2b("\x1BCherry Colored Love")), Db(u2b("\x08H\x04OME, \x19S\x04WEET \x11F\x10R\x1BI\x04ENDS\x08H\x04IP")), Db(u2b("\x1Fbrave HARMONY")), Db(u2b("\x04Su\x1Dper \x1CDup\x04er")), Db(u2b("\x1B메멘토? \x0F모멘트♪ \x11루루루루루☆")), Db(u2b("\x15dans l'obscurite")), Db(u2b("\x1CBonnes! Bonnes!! Vacances!!!")), Db(u2b("\x19Angelic Parade♪")), Db(u2b("\x1C프리뮬러")), Db(u2b("\x04STANDING ALIVE")), Db(u2b("\x11선 리듬 오케스트라♪")), Db(u2b("\x10P\x1BR\x1FETTY \x10D\x0FRE\x10A\x0FME\x1BR")), Db(u2b("\x04G\x1B♡\x04F")), Db(u2b("\x10피\x0F코\x10피\x0F코 \x08I\x0FI\x19K\x10O\x11! \x08인\x1C베\x11이\x0F더")), Db(u2b("\x1F월요일의 크림소다")), Db(u2b("\x19성장\x10Chu→\x1BLOVER!!")), Db(u2b("\x15Hello \x04콘체르토")), Db(u2b("\x10B\x19e\x10a\x19t \x10the \x1FW\x19o\x1Fr\x19l\x1Fd\x19!\x1F!\x19!")), Db(u2b("\x1F눈동자 속의 시리우스")), Db(u2b("\x11f\x0Fr\x18u\x1Bi\x04t\x08y l\x11o\x10v\x1Fe")), Db(u2b("\x1BPrincess Be Ambitious!!")), Db(u2b("\x19별무리의 심포니아")), Db(u2b("\x0FBirth of \x04Color")), Db(u2b("\x10Starry Melody")), Db(u2b("\x19구호는 스타트 업!")), Db(u2b("\x15Fermata in Rapsodia")), Db(u2b("\x04래빗 \x1B퍼")), Db(u2b("\x19World Changer")), Db(u2b("\x08L\x19E\x0EA\x1BD\x18E\x11R\x1C!\x19!"))]))], 1)[0]
# (Line 64) const event_Type =
# (Line 65) [0, 1, 1, 2, 0, 2,
# (Line 66) 1, 2, 0, 1, 0,
# (Line 67) 2, 1, 0, 2, 1,
# (Line 68) 2, 2, 0, 2, 2,
# (Line 69) 1, 2, 1, 0, 1,
# (Line 70) 2, 0, 2, 0, 0,
# (Line 71) 0, 1, 0, 0, 1];
event_Type = _CGFW(lambda: [_ARR(FlattenList([0, 1, 1, 2, 0, 2, 1, 2, 0, 1, 0, 2, 1, 0, 2, 1, 2, 2, 0, 2, 2, 1, 2, 1, 0, 1, 2, 0, 2, 0, 0, 0, 1, 0, 0, 1]))], 1)[0]
# (Line 73) const event_Top =
# (Line 74) [0, 60, 76, 70, 10, 19,
# (Line 75) 10, 12, 71, 44, 66,
# (Line 76) 67, 68, 66, 0, 39,
# (Line 77) 1, 0, 100, 87, 2,
# (Line 78) 43, 9, 87, 99, 63,
# (Line 79) 43, 61, 28, 102, 2,
# (Line 80) 80, 29, 28, 29, 27];
event_Top = _CGFW(lambda: [_ARR(FlattenList([0, 60, 76, 70, 10, 19, 10, 12, 71, 44, 66, 67, 68, 66, 0, 39, 1, 0, 100, 87, 2, 43, 9, 87, 99, 63, 43, 61, 28, 102, 2, 80, 29, 28, 29, 27]))], 1)[0]
# (Line 82) const event_Down =
# (Line 83) [0, 56, 56, 37, 78, 53,
# (Line 84) 55, 53, 55, 37, 78,
# (Line 85) 20, 54, 79, 38, 54,
# (Line 86) 53, 77, 78, 21, 10,
# (Line 87) 48, 68, 71, 48, 74,
# (Line 88) 8, 67, 54, 48, 61,
# (Line 89) 104, 102, 88, 28, 29];
event_Down = _CGFW(lambda: [_ARR(FlattenList([0, 56, 56, 37, 78, 53, 55, 53, 55, 37, 78, 20, 54, 79, 38, 54, 53, 77, 78, 21, 10, 48, 68, 71, 48, 74, 8, 67, 54, 48, 61, 104, 102, 88, 28, 29]))], 1)[0]
