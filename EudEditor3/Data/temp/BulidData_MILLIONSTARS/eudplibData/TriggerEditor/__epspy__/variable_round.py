## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) var round;									// 현재 라운드
round = EUDVariable()
# (Line 2) const round_Now 	= PVariable();			// 현재 라인 유닛
round_Now = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 3) var event 			= 0;						// 이벤트 번호
event = EUDCreateVariables(1)
_IGVA([event], lambda: [0])
# (Line 6) const round_hp =
# (Line 7) [8, 10, 19, 27, 35, 42, 51, 60, 70, 82, 3,
# (Line 8) 112, 131, 154, 180, 210, 245, 284, 329, 379, 6,
# (Line 9) 498, 568, 645, 729, 822, 923, 1033, 1152, 1281, 9,
# (Line 10) 1569, 1729, 1900, 2083, 2278, 2485, 2705, 2939, 3186, 12,
# (Line 11) 3723, 4013, 4319, 4640, 4978, 5331, 5702, 6090, 6495, 15,
# (Line 12) 7361, 7822, 8302, 8802, 9321, 9862, 10423, 11005, 11609, 18,
# (Line 13) 12883, 13554, 14249, 14967, 15709, 16476, 17267, 18084, 18926, 20];
round_hp = _CGFW(lambda: [_ARR(FlattenList([8, 10, 19, 27, 35, 42, 51, 60, 70, 82, 3, 112, 131, 154, 180, 210, 245, 284, 329, 379, 6, 498, 568, 645, 729, 822, 923, 1033, 1152, 1281, 9, 1569, 1729, 1900, 2083, 2278, 2485, 2705, 2939, 3186, 12, 3723, 4013, 4319, 4640, 4978, 5331, 5702, 6090, 6495, 15, 7361, 7822, 8302, 8802, 9321, 9862, 10423, 11005, 11609, 18, 12883, 13554, 14249, 14967, 15709, 16476, 17267, 18084, 18926, 20]))], 1)[0]
# (Line 15) const unit_Type =
# (Line 16) [Db("\x1B댄스 [프린세스]"),
# (Line 17) Db("\x1C보컬 [페어리]"),
# (Line 18) Db("\x19비쥬얼 [엔젤]"),
# (Line 19) Db("\x0FAllType [모든 타입]")];
unit_Type = _CGFW(lambda: [_ARR(FlattenList([Db("\x1B댄스 [프린세스]"), Db("\x1C보컬 [페어리]"), Db("\x19비쥬얼 [엔젤]"), Db("\x0FAllType [모든 타입]")]))], 1)[0]
# (Line 21) const event_hp =
# (Line 22) [100, 500, 1000, 2000, 3000, 4000, 5000];
event_hp = _CGFW(lambda: [_ARR(FlattenList([100, 500, 1000, 2000, 3000, 4000, 5000]))], 1)[0]
# (Line 24) const event_name =
# (Line 25) [Db(u2b("\x04#REF")),
# (Line 26) Db(u2b("\x15Hello \x04콘체르토")),
# (Line 27) Db(u2b("\x04심층 머메이드 VS \x19얼라이언스 스타더스트")),
# (Line 28) Db(u2b("\x04심연의 \x1F파랑, \x04열염의 \x08주홍")),
# (Line 29) Db(u2b("\x10B\x19e\x10a\x19t \x10the \x1FW\x19o\x1Fr\x19l\x1Fd\x19!\x1F!\x19!")),
# (Line 30) Db(u2b("\x04Su\x1Dper \x1CDup\x04er")),
# (Line 31) Db(u2b("\x1B메멘토? \x0F모멘트♪ \x11루루루루루☆")),
# (Line 32) Db(u2b("\x1E백\x10화\x04는 \x1E월\x15하\x04에 \x1C져\x0F버\x04리거늘")),
# (Line 33) Db(u2b("\x08협기난무")),
# (Line 34) Db(u2b("\x15Fermata in Rapsodia")),
# (Line 35) Db(u2b("\x1F눈동자 속의 시리우스")),
# (Line 36) Db(u2b("\x1BCherry Colored Love")),
# (Line 37) Db(u2b("\x1C기다림의 Lacrima")),
# (Line 38) Db(u2b("\x19World Changer")),
# (Line 39) Db(u2b("\x04G\x1B♡\x04F")),
# (Line 40) Db(u2b("\x1BGirl \x11meets \x1CWonder")),
# (Line 41) Db(u2b("\x08붉은 세계가 \x04사라질 \x08무렵")),
# (Line 42) Db(u2b("\x04래빗 \x1B퍼")),
# (Line 43) Db(u2b("\x19러\x04닝 \x19하잇")),
# (Line 44) Db(u2b("\x15dans l'obscurite")),
# (Line 45) Db(u2b("\x04Flyers\x1B!\x1C!\x19!")),
# (Line 46) Db(u2b("\x19White \x0FVows")),
# (Line 47) Db(u2b("\x11f\x0Fr\x18u\x1Bi\x04t\x08y l\x11o\x10v\x1Fe")),
# (Line 48) Db(u2b("\x08L\x19E\x0EA\x1BD\x18E\x11R\x1C!\x19!")),
# (Line 49) Db(u2b("\x1C프리뮬러")),
# (Line 50) Db(u2b("\x04Episode. \x1CTiara")),
# (Line 51) Db(u2b("\x19Justice \x1BOR \x1CVoice")),
# (Line 52) Db(u2b("\x10피\x0F코\x10피\x0F코 \x08I\x0FI\x19K\x10O\x11! \x08인\x1C베\x11이\x0F더")),
# (Line 53) Db(u2b("\x1CBonnes! Bonnes!! Vacances!!!")),
# (Line 54) Db(u2b("\x1F월요일의 크림소다")),
# (Line 55) Db(u2b("\x19성장\x10Chu→\x1BLOVER!!"))];
event_name = _CGFW(lambda: [_ARR(FlattenList([Db(u2b("\x04#REF")), Db(u2b("\x15Hello \x04콘체르토")), Db(u2b("\x04심층 머메이드 VS \x19얼라이언스 스타더스트")), Db(u2b("\x04심연의 \x1F파랑, \x04열염의 \x08주홍")), Db(u2b("\x10B\x19e\x10a\x19t \x10the \x1FW\x19o\x1Fr\x19l\x1Fd\x19!\x1F!\x19!")), Db(u2b("\x04Su\x1Dper \x1CDup\x04er")), Db(u2b("\x1B메멘토? \x0F모멘트♪ \x11루루루루루☆")), Db(u2b("\x1E백\x10화\x04는 \x1E월\x15하\x04에 \x1C져\x0F버\x04리거늘")), Db(u2b("\x08협기난무")), Db(u2b("\x15Fermata in Rapsodia")), Db(u2b("\x1F눈동자 속의 시리우스")), Db(u2b("\x1BCherry Colored Love")), Db(u2b("\x1C기다림의 Lacrima")), Db(u2b("\x19World Changer")), Db(u2b("\x04G\x1B♡\x04F")), Db(u2b("\x1BGirl \x11meets \x1CWonder")), Db(u2b("\x08붉은 세계가 \x04사라질 \x08무렵")), Db(u2b("\x04래빗 \x1B퍼")), Db(u2b("\x19러\x04닝 \x19하잇")), Db(u2b("\x15dans l'obscurite")), Db(u2b("\x04Flyers\x1B!\x1C!\x19!")), Db(u2b("\x19White \x0FVows")), Db(u2b("\x11f\x0Fr\x18u\x1Bi\x04t\x08y l\x11o\x10v\x1Fe")), Db(u2b("\x08L\x19E\x0EA\x1BD\x18E\x11R\x1C!\x19!")), Db(u2b("\x1C프리뮬러")), Db(u2b("\x04Episode. \x1CTiara")), Db(u2b("\x19Justice \x1BOR \x1CVoice")), Db(u2b("\x10피\x0F코\x10피\x0F코 \x08I\x0FI\x19K\x10O\x11! \x08인\x1C베\x11이\x0F더")), Db(u2b("\x1CBonnes! Bonnes!! Vacances!!!")), Db(u2b("\x1F월요일의 크림소다")), Db(u2b("\x19성장\x10Chu→\x1BLOVER!!"))]))], 1)[0]
# (Line 57) const event_Flag =
# (Line 58) [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
# (Line 59) 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
# (Line 60) 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
event_Flag = _CGFW(lambda: [_ARR(FlattenList([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))], 1)[0]
# (Line 62) const event_Type =
# (Line 63) [0, 1, 0, 2, 0, 0, 2, 0, 1, 1, 1,
# (Line 64) 2, 2, 0, 2, 2, 1, 0, 0, 1, 1,
# (Line 65) 2, 2, 1, 1, 0, 1, 2, 0, 1, 2];
event_Type = _CGFW(lambda: [_ARR(FlattenList([0, 1, 0, 2, 0, 0, 2, 0, 1, 1, 1, 2, 2, 0, 2, 2, 1, 0, 0, 1, 1, 2, 2, 1, 1, 0, 1, 2, 0, 1, 2]))], 1)[0]
# (Line 67) const event_Top =
# (Line 68) [0, 87, 1000, 100, 99, 66, 20, 76, 55, 102, 61,
# (Line 69) 12, 37, 29, 87, 2, 77, 28, 78, 68, 1000,
# (Line 70) 19, 8, 27, 54, 61, 60, 10, 79, 43, 9];
event_Top = _CGFW(lambda: [_ARR(FlattenList([0, 87, 1000, 100, 99, 66, 20, 76, 55, 102, 61, 12, 37, 29, 87, 2, 77, 28, 78, 68, 1000, 19, 8, 27, 54, 61, 60, 10, 79, 43, 9]))], 1)[0]
# (Line 72) const event_Down =
# (Line 73) [0, 71, 999, 0, 48, 78, 67, 60, 10, 29, 74,
# (Line 74) 53, 70, 28, 21, 55, 37, 88, 10, 54, 999,
# (Line 75) 53, 43, 29, 39, 77, 56, 2, 66, 48, 68];
event_Down = _CGFW(lambda: [_ARR(FlattenList([0, 71, 999, 0, 48, 78, 67, 60, 10, 29, 74, 53, 70, 28, 21, 55, 37, 88, 10, 54, 999, 53, 43, 29, 39, 77, 56, 2, 66, 48, 68]))], 1)[0]
