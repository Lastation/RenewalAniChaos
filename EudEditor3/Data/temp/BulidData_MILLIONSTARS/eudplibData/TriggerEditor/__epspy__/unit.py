## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import variable_data as vd;
import variable_data as vd
# (Line 2) import variable_weapon as vw;
import variable_weapon as vw
# (Line 3) import variable_title as vt;
import variable_title as vt
# (Line 4) import getunitID as id;
import getunitID as id
# (Line 5) import Player.unit_title as ut;
from Player import unit_title as ut
# (Line 7) function Set_Info();
# (Line 8) function Set_Unit_Info(ID, index);
# (Line 9) function Set_Weapon_Info(ID, index);
# (Line 10) function Set_Name_Info(type, ID, index);
# (Line 11) function Set_Title_Info(type, ID, index);
# (Line 13) function Weapon_Text_Princess();
# (Line 14) function Weapon_Text_Fairy();
# (Line 15) function Weapon_Text_Angel();
# (Line 17) function Set_Info()
# (Line 18) {
@EUDFunc
def Set_Info():
    # (Line 19) for (var i = 0; i < 17; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 17, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 20) {
        # (Line 22) Set_Unit_Info(vd.Princess_Unit_Index[i], i);
        Set_Unit_Info(vd.Princess_Unit_Index[i], i)
        # (Line 23) Set_Unit_Info(vd.Fairy_Unit_Index[i], i);
        Set_Unit_Info(vd.Fairy_Unit_Index[i], i)
        # (Line 24) Set_Unit_Info(vd.Angel_Unit_Index[i], i);
        Set_Unit_Info(vd.Angel_Unit_Index[i], i)
        # (Line 26) Set_Title_Info(0, vd.Princess_Unit_Index[i], i);
        Set_Title_Info(0, vd.Princess_Unit_Index[i], i)
        # (Line 27) Set_Title_Info(1, vd.Fairy_Unit_Index[i], i);
        Set_Title_Info(1, vd.Fairy_Unit_Index[i], i)
        # (Line 28) Set_Title_Info(2, vd.Angel_Unit_Index[i], i);
        Set_Title_Info(2, vd.Angel_Unit_Index[i], i)
        # (Line 31) ut.Title_Value(vd.Princess_Unit_Index[i], 0);
        ut.Title_Value(vd.Princess_Unit_Index[i], 0)
        # (Line 32) ut.Title_Value(vd.Fairy_Unit_Index[i], 0);
        ut.Title_Value(vd.Fairy_Unit_Index[i], 0)
        # (Line 33) ut.Title_Value(vd.Angel_Unit_Index[i], 0);
        ut.Title_Value(vd.Angel_Unit_Index[i], 0)
        # (Line 36) Set_Weapon_Info(vd.Princess_Weapon_Index[i], i);
        Set_Weapon_Info(vd.Princess_Weapon_Index[i], i)
        # (Line 37) Set_Weapon_Info(vd.Fairy_Weapon_Index[i], i);
        Set_Weapon_Info(vd.Fairy_Weapon_Index[i], i)
        # (Line 38) Set_Weapon_Info(vd.Angel_Weapon_Index[i], i);
        Set_Weapon_Info(vd.Angel_Weapon_Index[i], i)
        # (Line 40) Set_Name_Info(0, vd.Princess_Weapon_Index[i], i);
        Set_Name_Info(0, vd.Princess_Weapon_Index[i], i)
        # (Line 41) Set_Name_Info(1, vd.Fairy_Weapon_Index[i], i);
        Set_Name_Info(1, vd.Fairy_Weapon_Index[i], i)
        # (Line 42) Set_Name_Info(2, vd.Angel_Weapon_Index[i], i);
        Set_Name_Info(2, vd.Angel_Weapon_Index[i], i)
        # (Line 43) }
        # (Line 44) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 46) function Set_Unit_Info(ID, index)

# (Line 47) {
@EUDFunc
def Set_Unit_Info(ID, index):
    # (Line 48) bwrite(0x65FD00 + 12472 + ID * 1, vd.Base_Unit_Sight[index]);				// 인지거리
    f_bwrite(0x65FD00 + 12472 + ID * 1, vd.Base_Unit_Sight[index])
    # (Line 49) bwrite(0x65FD00 + 13624 + ID * 1, vd.Base_Unit_Sight[index]);				// 시야
    f_bwrite(0x65FD00 + 13624 + ID * 1, vd.Base_Unit_Sight[index])
    # (Line 50) }
    # (Line 52) function Set_Weapon_Info(ID, index)

# (Line 53) {
@EUDFunc
def Set_Weapon_Info(ID, index):
    # (Line 55) wwrite(0x6564E0 + 2512 + ID * 2, vd.Base_Weapon_Damage[index]);		// 기본 데미지
    f_wwrite(0x6564E0 + 2512 + ID * 2, vd.Base_Weapon_Damage[index])
    # (Line 56) wwrite(0x6564E0 + 4504 + ID * 2, vd.Base_Weapon_Increase[index]);		// 업글 증가량
    f_wwrite(0x6564E0 + 4504 + ID * 2, vd.Base_Weapon_Increase[index])
    # (Line 57) bwrite(0x6564E0 + 2776 + ID * 1, vd.Base_Weapon_Speed[index]);			// 공격 속도
    f_bwrite(0x6564E0 + 2776 + ID * 1, vd.Base_Weapon_Speed[index])
    # (Line 58) bwrite(0x6564E0 + 3984 + ID * 4, vd.Base_Weapon_Range[index]);			// 사거리
    f_bwrite(0x6564E0 + 3984 + ID * 4, vd.Base_Weapon_Range[index])
    # (Line 60) if (vd.Base_Weapon_Splash[index] != 0)									// 스플레시
    if EUDIf()(vd.Base_Weapon_Splash[index] == 0, neg=True):
        # (Line 61) {
        # (Line 62) bwrite(0x6564E0 + 536 + ID * 1, 3);									// 스플레시 - O
        f_bwrite(0x6564E0 + 536 + ID * 1, 3)
        # (Line 63) wwrite(0x6564E0 + 936 + ID * 2, vd.Base_Weapon_Splash[index]);		// 스플레시 100% 범위
        f_wwrite(0x6564E0 + 936 + ID * 2, vd.Base_Weapon_Splash[index])
        # (Line 64) }
        # (Line 65) else
        # (Line 66) {
    if EUDElse()():
        # (Line 67) bwrite(0x6564E0 + 536 + ID * 1, 1);									// 스플레시 - X
        f_bwrite(0x6564E0 + 536 + ID * 1, 1)
        # (Line 68) }
        # (Line 69) }
    EUDEndIf()
    # (Line 71) function Set_Title_Info(type, ID, index)

# (Line 72) {
@EUDFunc
def Set_Title_Info(type, ID, index):
    # (Line 73) switch(type)
    EUDSwitch(type)
    # (Line 74) {
    # (Line 75) case 0:
    _t1 = EUDSwitchCase()
    # (Line 76) bwrite(0x65FD00 + 16592 + ID * 1, vd.Princess_Unit_Title[index]);
    if _t1(0):
        f_bwrite(0x65FD00 + 16592 + ID * 1, vd.Princess_Unit_Title[index])
        # (Line 77) break;
        EUDBreak()
        # (Line 78) case 1:
    _t2 = EUDSwitchCase()
    # (Line 79) bwrite(0x65FD00 + 16592 + ID * 1, vd.Fairy_Unit_Title[index]);
    if _t2(1):
        f_bwrite(0x65FD00 + 16592 + ID * 1, vd.Fairy_Unit_Title[index])
        # (Line 80) break;
        EUDBreak()
        # (Line 81) case 2:
    _t3 = EUDSwitchCase()
    # (Line 82) bwrite(0x65FD00 + 16592 + ID * 1, vd.Angel_Unit_Title[index]);
    if _t3(2):
        f_bwrite(0x65FD00 + 16592 + ID * 1, vd.Angel_Unit_Title[index])
        # (Line 83) break;
        EUDBreak()
        # (Line 84) }
    # (Line 85) }
    EUDEndSwitch()
    # (Line 87) function Set_Name_Info(type, ID, index)

# (Line 88) {
@EUDFunc
def Set_Name_Info(type, ID, index):
    # (Line 89) switch(type)
    EUDSwitch(type)
    # (Line 90) {
    # (Line 91) case 0:
    _t1 = EUDSwitchCase()
    # (Line 92) wwrite(0x6564E0 + 3584 + ID * 2, vd.Princess_Weapon_Name[index]);
    if _t1(0):
        f_wwrite(0x6564E0 + 3584 + ID * 2, vd.Princess_Weapon_Name[index])
        # (Line 93) break;
        EUDBreak()
        # (Line 94) case 1:
    _t2 = EUDSwitchCase()
    # (Line 95) wwrite(0x6564E0 + 3584 + ID * 2, vd.Fairy_Weapon_Name[index]);
    if _t2(1):
        f_wwrite(0x6564E0 + 3584 + ID * 2, vd.Fairy_Weapon_Name[index])
        # (Line 96) break;
        EUDBreak()
        # (Line 97) case 2:
    _t3 = EUDSwitchCase()
    # (Line 98) wwrite(0x6564E0 + 3584 + ID * 2, vd.Angel_Weapon_Name[index]);
    if _t3(2):
        f_wwrite(0x6564E0 + 3584 + ID * 2, vd.Angel_Weapon_Name[index])
        # (Line 99) break;
        EUDBreak()
        # (Line 100) }
    # (Line 101) }
    EUDEndSwitch()
