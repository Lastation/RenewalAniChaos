## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import unit as ut;
import unit as ut
# (Line 2) import getunitID as id;
import getunitID as id
# (Line 3) import round as rd;
import round as rd
# (Line 4) import text_Announce as ta;
import text_Announce as ta
# (Line 5) import variable_data as vd;
import variable_data as vd
# (Line 6) import Player.playermain as pm;
from Player import playermain as pm
# (Line 8) function onPluginStart()
# (Line 9) {
@EUDFunc
def onPluginStart():
    # (Line 10) randomize();
    f_randomize()
    # (Line 13) SetMemory(0x515BC8, SetTo, 256);	// 소형 - 프린세스 	100%
    # (Line 14) SetMemory(0x515BCC, SetTo, 128);	// 중형 - 페어리 		50%
    DoActions(SetMemory(0x515BC8, SetTo, 256))
    # (Line 15) SetMemory(0x515BD0, SetTo, 192);	// 대형 - 엔젤 		75%
    DoActions(SetMemory(0x515BCC, SetTo, 128))
    # (Line 18) SetMemory(0x515BA0, SetTo, 192);	// 소형 - 프린세스 	75%
    DoActions(SetMemory(0x515BD0, SetTo, 192))
    # (Line 19) SetMemory(0x515BA4, SetTo, 256);	// 중형 - 페어리 		100%
    DoActions(SetMemory(0x515BA0, SetTo, 192))
    # (Line 20) SetMemory(0x515BA8, SetTo, 128);	// 대형 - 엔젤 		50%
    DoActions(SetMemory(0x515BA4, SetTo, 256))
    # (Line 23) SetMemory(0x515BB4, SetTo, 128);	// 소형 - 프린세스 	50%
    DoActions(SetMemory(0x515BA8, SetTo, 128))
    # (Line 24) SetMemory(0x515BB8, SetTo, 192);	// 중형 - 페어리 		75%
    DoActions(SetMemory(0x515BB4, SetTo, 128))
    # (Line 25) SetMemory(0x515BBC, SetTo, 256);	// 대형 - 엔젤		100%
    DoActions(SetMemory(0x515BB8, SetTo, 192))
    # (Line 27) ut.Set_Info();
    DoActions(SetMemory(0x515BBC, SetTo, 256))
    ut.Set_Info()
    # (Line 28) }
    # (Line 30) function beforeTriggerExec()

# (Line 31) {
@EUDFunc
def beforeTriggerExec():
    # (Line 32) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 34) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 36) pm.main(cp);
    pm.f_main(cp)
    # (Line 37) id.Get_UnitID(cp);
    id.Get_UnitID(cp)
    # (Line 38) ta.Event_Announcement(cp);
    ta.Event_Announcement(cp)
    # (Line 40) EUDEndPlayerLoop();
    EUDEndPlayerLoop()
    # (Line 42) rd.Set_Round_HP();
    rd.Set_Round_HP()
    # (Line 44) if (Bring(P12, AtLeast, 1, 112, "Anywhere"))
    if EUDIf()(Bring(P12, AtLeast, 1, 112, "Anywhere")):
        # (Line 45) { RemoveUnitAt(All, "(any unit)", "Anywhere", P12); }
        DoActions(RemoveUnitAt(All, "(any unit)", "Anywhere", P12))
        # (Line 46) }
    EUDEndIf()
    # (Line 48) function afterTriggerExec()

# (Line 49) {
@EUDFunc
def afterTriggerExec():
    # (Line 51) }
    pass
