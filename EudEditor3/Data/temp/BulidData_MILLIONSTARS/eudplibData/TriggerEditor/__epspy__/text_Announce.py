## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import variable_round as vr;
import variable_round as vr
# (Line 2) import variable_music as vm;
import variable_music as vm
# (Line 4) const AnnounceList = PVariable();
AnnounceList = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 6) function Change_Announcement(cp);
# (Line 7) function Event_Announcement(cp);
# (Line 8) function Check_Line(cp);
# (Line 10) function Change_Announcement(cp)
# (Line 11) {
@EUDFunc
def Change_Announcement(cp):
    # (Line 12) if (Deaths(CurrentPlayer, Exactly, 1, "Terran SCV"))
    if EUDIf()(Deaths(CurrentPlayer, Exactly, 1, "Terran SCV")):
        # (Line 13) {
        # (Line 14) SetDeaths(CurrentPlayer, SetTo, 0, "Terran SCV");
        # (Line 16) if (AnnounceList[cp] < 2) 	{ AnnounceList[cp] += 1; }
        DoActions(SetDeaths(CurrentPlayer, SetTo, 0, "Terran SCV"))
        if EUDIf()(AnnounceList[cp] >= 2, neg=True):
            _ARRW(AnnounceList, cp).__iadd__(1)
            # (Line 17) else 						{ AnnounceList[cp] 	= 0; }
        if EUDElse()():
            _ARRW(AnnounceList, cp) << (0)
            # (Line 18) }
        EUDEndIf()
        # (Line 19) }
    EUDEndIf()
    # (Line 21) function Event_Announcement(cp)

# (Line 22) {
@EUDFunc
def Event_Announcement(cp):
    # (Line 23) Change_Announcement(cp);
    Change_Announcement(cp)
    # (Line 24) switch(AnnounceList[cp])
    EUDSwitch(AnnounceList[cp])
    # (Line 25) {
    # (Line 26) case 0:
    _t1 = EUDSwitchCase()
    # (Line 27) if (Bring(cp, AtLeast, 1, 112, "Anywhere"))
    if _t1(0):
        if EUDIf()(Bring(cp, AtLeast, 1, 112, "Anywhere")):
            # (Line 28) { Check_Line(cp); }
            Check_Line(cp)
            # (Line 29) f_eprintln("\x04", dwread_epd(185 * 12 + 6), " \x0F주차 스케줄 ", ptr2s(vr.unit_Type[dwread_epd(207 * 12 + 6)]),
        EUDEndIf()
        # (Line 30) " \x17진행도 \x04", dwread_epd(204 * 12 + 6), "/60 ",
        # (Line 31) "\x08 라인 \x04", vr.round_Now[cp], "/", 70);
        f_eprintln("\x04", f_dwread_epd(185 * 12 + 6), " \x0F주차 스케줄 ", ptr2s(vr.unit_Type[f_dwread_epd(207 * 12 + 6)]), " \x17진행도 \x04", f_dwread_epd(204 * 12 + 6), "/60 ", "\x08 라인 \x04", vr.round_Now[cp], "/", 70)
        # (Line 32) break;
        EUDBreak()
        # (Line 33) case 1:
    _t3 = EUDSwitchCase()
    # (Line 34) if (Deaths(P6, Exactly, 0, "Round") && Deaths(P7, Exactly, 0, "event_index"))
    if _t3(1):
        if EUDIf()(EUDSCAnd()(Deaths(P6, Exactly, 0, "Round"))(Deaths(P7, Exactly, 0, "event_index"))()):
            # (Line 35) {
            # (Line 36) f_eprintln("\x04이벤트 준비중입니다.");
            f_eprintln("\x04이벤트 준비중입니다.")
            # (Line 37) }
            # (Line 38) else if (Deaths(P6, Exactly, 0, "Round") && Deaths(P7, AtLeast, 1, "event_index"))
        if EUDElseIf()(EUDSCAnd()(Deaths(P6, Exactly, 0, "Round"))(Deaths(P7, AtLeast, 1, "event_index"))()):
            # (Line 39) {
            # (Line 40) f_eprintln("\x1F예정 이벤트 타입 ", ptr2s(vr.unit_Type[dwread_epd(205 * 12 + 6)]));
            f_eprintln("\x1F예정 이벤트 타입 ", ptr2s(vr.unit_Type[f_dwread_epd(205 * 12 + 6)]))
            # (Line 41) }
            # (Line 42) else if (Deaths(P6, Exactly, 1, "Round"))
        if EUDElseIf()(Deaths(P6, Exactly, 1, "Round")):
            # (Line 43) {
            # (Line 44) f_eprintln("\x1F이벤트 타입 ", ptr2s(vr.unit_Type[dwread_epd(205 * 12 + 6)]),
            # (Line 45) " \x19 점수 : \x04", dwread_epd(208 * 12 + 5));
            f_eprintln("\x1F이벤트 타입 ", ptr2s(vr.unit_Type[f_dwread_epd(205 * 12 + 6)]), " \x19 점수 : \x04", f_dwread_epd(208 * 12 + 5))
            # (Line 46) }
            # (Line 47) else
            # (Line 48) {
        if EUDElse()():
            # (Line 49) f_eprintln("\x04이벤트 정산중입니다.",
            # (Line 50) " \19 최종 점수 : \x04", dwread_epd(208 * 12 + 5));
            f_eprintln("\x04이벤트 정산중입니다.", " \19 최종 점수 : \x04", f_dwread_epd(208 * 12 + 5))
            # (Line 51) }
            # (Line 52) break;
        EUDEndIf()
        EUDBreak()
        # (Line 53) case 2:
    _t7 = EUDSwitchCase()
    # (Line 54) f_eprintln("\x1F# N\x04ow Playing - ", ptr2s(vm.music_name[dwread_epd(35 * 12 + cp)]));
    if _t7(2):
        f_eprintln("\x1F# N\x04ow Playing - ", ptr2s(vm.music_name[f_dwread_epd(35 * 12 + cp)]))
        # (Line 55) break;
        EUDBreak()
        # (Line 56) }
    # (Line 57) }
    EUDEndSwitch()
    # (Line 59) function Check_Line(cp)

# (Line 60) {
@EUDFunc
def Check_Line(cp):
    # (Line 61) switch (cp)
    EUDSwitch(cp)
    # (Line 62) {
    # (Line 63) case 0:
    _t1 = EUDSwitchCase()
    # (Line 64) vr.round_Now[cp] = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "(any unit)", "Player1")'));
    if _t1(0):
        _ARRW(vr.round_Now, cp) << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "(any unit)", "Player1")')))
        # (Line 65) break;
        EUDBreak()
        # (Line 66) case 1:
    _t2 = EUDSwitchCase()
    # (Line 67) vr.round_Now[cp] = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "(any unit)", "Player2")'));
    if _t2(1):
        _ARRW(vr.round_Now, cp) << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "(any unit)", "Player2")')))
        # (Line 68) break;
        EUDBreak()
        # (Line 69) case 2:
    _t3 = EUDSwitchCase()
    # (Line 70) vr.round_Now[cp] = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "(any unit)", "Player3")'));
    if _t3(2):
        _ARRW(vr.round_Now, cp) << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "(any unit)", "Player3")')))
        # (Line 71) break;
        EUDBreak()
        # (Line 72) case 3:
    _t4 = EUDSwitchCase()
    # (Line 73) vr.round_Now[cp] = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "(any unit)", "Player4")'));
    if _t4(3):
        _ARRW(vr.round_Now, cp) << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "(any unit)", "Player4")')))
        # (Line 74) break;
        EUDBreak()
        # (Line 75) case 4:
    _t5 = EUDSwitchCase()
    # (Line 76) vr.round_Now[cp] = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "(any unit)", "Player5")'));
    if _t5(4):
        _ARRW(vr.round_Now, cp) << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "(any unit)", "Player5")')))
        # (Line 77) break;
        EUDBreak()
        # (Line 78) }
    # (Line 79) }
    EUDEndSwitch()
