## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import variable_round as vr;
import variable_round as vr
# (Line 3) const s = StringBuffer();
s = _CGFW(lambda: [StringBuffer()], 1)[0]
# (Line 4) var round = 0;
round = EUDCreateVariables(1)
_IGVA([round], lambda: [0])
# (Line 5) var isevent = 0;
isevent = EUDCreateVariables(1)
_IGVA([isevent], lambda: [0])
# (Line 7) function Set_Round_HP()
# (Line 8) {
@EUDFunc
def Set_Round_HP():
    # (Line 9) if (round != dwread_epd(EPD(0x58A364 + 48 * 185 + 4 * 6)) && round < 70)
    if EUDIf()(EUDSCAnd()(round == f_dwread_epd(EPD(0x58A364 + 48 * 185 + 4 * 6)), neg=True)(round >= 70, neg=True)()):
        # (Line 10) {
        # (Line 11) round = dwread_epd(EPD(0x58A364 + 48 * 185 + 4 * 6));
        round << (f_dwread_epd(EPD(0x58A364 + 48 * 185 + 4 * 6)))
        # (Line 12) var round_check = round%10;
        round_check = EUDVariable()
        round_check << (round % 10)
        # (Line 14) switch (round_check)
        EUDSwitch(round_check)
        # (Line 15) {
        # (Line 16) case 1:
        _t2 = EUDSwitchCase()
        # (Line 17) case 4:
        if _t2(1):
            pass
        _t3 = EUDSwitchCase()
        # (Line 18) case 7:
        if _t3(4):
            pass
        _t4 = EUDSwitchCase()
        # (Line 19) dwwrite(0x65FD00 + 9808 + 93 * 4, vr.round_hp[round] * 256);
        if _t4(7):
            f_dwwrite(0x65FD00 + 9808 + 93 * 4, vr.round_hp[round] * 256)
            # (Line 20) SetDeaths(P7, SetTo, 0, "Line_type");
            # (Line 21) SetDeaths(Force1, SetTo, 100, "event_index");
            DoActions(SetDeaths(P7, SetTo, 0, "Line_type"))
            # (Line 22) break;
            DoActions(SetDeaths(Force1, SetTo, 100, "event_index"))
            EUDBreak()
            # (Line 23) case 2:
        _t5 = EUDSwitchCase()
        # (Line 24) case 5:
        if _t5(2):
            pass
        _t6 = EUDSwitchCase()
        # (Line 25) case 8:
        if _t6(5):
            pass
        _t7 = EUDSwitchCase()
        # (Line 26) dwwrite(0x65FD00 + 9808 + 94 * 4, vr.round_hp[round] * 256);
        if _t7(8):
            f_dwwrite(0x65FD00 + 9808 + 94 * 4, vr.round_hp[round] * 256)
            # (Line 27) SetDeaths(P7, SetTo, 1, "Line_type");
            # (Line 29) if (Deaths(P6, AtMost, 240, "music_length"))
            DoActions(SetDeaths(P7, SetTo, 1, "Line_type"))
            if EUDIf()(Deaths(P6, AtMost, 240, "music_length")):
                # (Line 30) SetDeaths(Force1, SetTo, 100, "event_index");
                # (Line 31) break;
                DoActions(SetDeaths(Force1, SetTo, 100, "event_index"))
            EUDEndIf()
            EUDBreak()
            # (Line 32) case 3:
        _t9 = EUDSwitchCase()
        # (Line 33) case 6:
        if _t9(3):
            pass
        _t10 = EUDSwitchCase()
        # (Line 34) case 9:
        if _t10(6):
            pass
        _t11 = EUDSwitchCase()
        # (Line 35) dwwrite(0x65FD00 + 9808 + 95 * 4, vr.round_hp[round] * 256);
        if _t11(9):
            f_dwwrite(0x65FD00 + 9808 + 95 * 4, vr.round_hp[round] * 256)
            # (Line 36) SetDeaths(P7, SetTo, 2, "Line_type");
            # (Line 37) if (round_check == 9)
            DoActions(SetDeaths(P7, SetTo, 2, "Line_type"))
            if EUDIf()(round_check == 9):
                # (Line 38) { SetDeaths(Force1, SetTo, 99, "event_index"); }
                DoActions(SetDeaths(Force1, SetTo, 99, "event_index"))
                # (Line 39) else
                # (Line 40) { SetDeaths(Force1, SetTo, 100, "event_index"); }
            if EUDElse()():
                DoActions(SetDeaths(Force1, SetTo, 100, "event_index"))
                # (Line 41) break;
            EUDEndIf()
            EUDBreak()
            # (Line 42) case 0:
        _t13 = EUDSwitchCase()
        # (Line 43) dwwrite(0x65FD00 + 9808 + 96 * 4, vr.round_hp[round] * 256);
        if _t13(0):
            f_dwwrite(0x65FD00 + 9808 + 96 * 4, vr.round_hp[round] * 256)
            # (Line 44) SetDeaths(P7, SetTo, 3, "Line_type");
            # (Line 45) break;
            DoActions(SetDeaths(P7, SetTo, 3, "Line_type"))
            EUDBreak()
            # (Line 46) }
        # (Line 47) }
        EUDEndSwitch()
        # (Line 48) else if (dwread_epd(EPD(0x58A364 + 48 * 185 + 4 * 6)) >= 70)
    if EUDElseIf()(f_dwread_epd(EPD(0x58A364 + 48 * 185 + 4 * 6)) >= 70):
        # (Line 49) {
        # (Line 50) Victory();
        # (Line 51) }
        DoActions(Victory())
        # (Line 53) if (round == 9 && Deaths(P7, Exactly, 0, "event_index"))
    EUDEndIf()
    if EUDIf()(EUDSCAnd()(round == 9)(Deaths(P7, Exactly, 0, "event_index"))()):
        # (Line 54) {
        # (Line 56) vr.event = dwrand() % 5 + 1;
        _ATTW(vr, 'event') << (f_dwrand() % 5 + 1)
        # (Line 58) SetDeaths(P7, SetTo, vr.event, "event_index");
        # (Line 59) SetDeaths(P7, SetTo, vr.event_Type[vr.event], "Event_type");
        DoActions(SetDeaths(P7, SetTo, vr.event, "event_index"))
        # (Line 60) settbl(91, 0,  ptr2s(vr.event_name[vr.event]));
        DoActions(SetDeaths(P7, SetTo, vr.event_Type[vr.event], "Event_type"))
        f_settbl(91, 0, ptr2s(vr.event_name[vr.event]))
        # (Line 61) }
        # (Line 63) if (round == 19 && Deaths(P7, Exactly, 0, "event_index"))
    EUDEndIf()
    if EUDIf()(EUDSCAnd()(round == 19)(Deaths(P7, Exactly, 0, "event_index"))()):
        # (Line 64) {
        # (Line 66) vr.event = dwrand() % 5 + 6;
        _ATTW(vr, 'event') << (f_dwrand() % 5 + 6)
        # (Line 68) SetDeaths(P7, SetTo, vr.event, "event_index");
        # (Line 69) SetDeaths(P7, SetTo, vr.event_Type[vr.event], "Event_type");
        DoActions(SetDeaths(P7, SetTo, vr.event, "event_index"))
        # (Line 70) settbl(91, 0,  ptr2s(vr.event_name[vr.event]));
        DoActions(SetDeaths(P7, SetTo, vr.event_Type[vr.event], "Event_type"))
        f_settbl(91, 0, ptr2s(vr.event_name[vr.event]))
        # (Line 71) }
        # (Line 73) if (round == 29 && Deaths(P7, Exactly, 0, "event_index"))
    EUDEndIf()
    if EUDIf()(EUDSCAnd()(round == 29)(Deaths(P7, Exactly, 0, "event_index"))()):
        # (Line 74) {
        # (Line 76) vr.event = dwrand() % 5 + 11;
        _ATTW(vr, 'event') << (f_dwrand() % 5 + 11)
        # (Line 78) SetDeaths(P7, SetTo, vr.event, "event_index");
        # (Line 79) SetDeaths(P7, SetTo, vr.event_Type[vr.event], "Event_type");
        DoActions(SetDeaths(P7, SetTo, vr.event, "event_index"))
        # (Line 80) settbl(91, 0,  ptr2s(vr.event_name[vr.event]));
        DoActions(SetDeaths(P7, SetTo, vr.event_Type[vr.event], "Event_type"))
        f_settbl(91, 0, ptr2s(vr.event_name[vr.event]))
        # (Line 81) }
        # (Line 83) if (round == 39 && Deaths(P7, Exactly, 0, "event_index"))
    EUDEndIf()
    if EUDIf()(EUDSCAnd()(round == 39)(Deaths(P7, Exactly, 0, "event_index"))()):
        # (Line 84) {
        # (Line 86) vr.event = dwrand() % 5 + 16;
        _ATTW(vr, 'event') << (f_dwrand() % 5 + 16)
        # (Line 88) SetDeaths(P7, SetTo, vr.event, "event_index");
        # (Line 89) SetDeaths(P7, SetTo, vr.event_Type[vr.event], "Event_type");
        DoActions(SetDeaths(P7, SetTo, vr.event, "event_index"))
        # (Line 90) settbl(91, 0,  ptr2s(vr.event_name[vr.event]));
        DoActions(SetDeaths(P7, SetTo, vr.event_Type[vr.event], "Event_type"))
        f_settbl(91, 0, ptr2s(vr.event_name[vr.event]))
        # (Line 91) }
        # (Line 94) if (round == 49 && Deaths(P7, Exactly, 0, "event_index"))
    EUDEndIf()
    if EUDIf()(EUDSCAnd()(round == 49)(Deaths(P7, Exactly, 0, "event_index"))()):
        # (Line 95) {
        # (Line 97) vr.event = dwrand() % 5 + 21;
        _ATTW(vr, 'event') << (f_dwrand() % 5 + 21)
        # (Line 99) SetDeaths(P7, SetTo, vr.event, "event_index");
        # (Line 100) SetDeaths(P7, SetTo, vr.event_Type[vr.event], "Event_type");
        DoActions(SetDeaths(P7, SetTo, vr.event, "event_index"))
        # (Line 101) settbl(91, 0,  ptr2s(vr.event_name[vr.event]));
        DoActions(SetDeaths(P7, SetTo, vr.event_Type[vr.event], "Event_type"))
        f_settbl(91, 0, ptr2s(vr.event_name[vr.event]))
        # (Line 102) }
        # (Line 104) if (round == 59 && Deaths(P7, Exactly, 0, "event_index"))
    EUDEndIf()
    if EUDIf()(EUDSCAnd()(round == 59)(Deaths(P7, Exactly, 0, "event_index"))()):
        # (Line 105) {
        # (Line 107) vr.event = dwrand() % 5 + 26;
        _ATTW(vr, 'event') << (f_dwrand() % 5 + 26)
        # (Line 109) SetDeaths(P7, SetTo, vr.event, "event_index");
        # (Line 110) SetDeaths(P7, SetTo, vr.event_Type[vr.event], "Event_type");
        DoActions(SetDeaths(P7, SetTo, vr.event, "event_index"))
        # (Line 111) settbl(91, 0,  ptr2s(vr.event_name[vr.event]));
        DoActions(SetDeaths(P7, SetTo, vr.event_Type[vr.event], "Event_type"))
        f_settbl(91, 0, ptr2s(vr.event_name[vr.event]))
        # (Line 112) }
        # (Line 114) if (round % 10 == 0 && Deaths(P6, Exactly, 0, "Round") && round != 0 && round < 70)
    EUDEndIf()
    if EUDIf()(EUDSCAnd()(round % 10 == 0)(Deaths(P6, Exactly, 0, "Round"))(round == 0, neg=True)(round >= 70, neg=True)()):
        # (Line 115) {
        # (Line 117) vr.event = dwread_epd(182 * 12 + 6);
        _ATTW(vr, 'event') << (f_dwread_epd(182 * 12 + 6))
        # (Line 119) if (Bring(Force1, Exactly, 1, 112, "Anywhere")) {dwwrite(0x65FD00 + 9808 + 90 * 4, vr.event_hp[round/10] * 256 * 1); }		// 체력
        if EUDIf()(Bring(Force1, Exactly, 1, 112, "Anywhere")):
            f_dwwrite(0x65FD00 + 9808 + 90 * 4, vr.event_hp[round // 10] * 256 * 1)
            # (Line 120) if (Bring(Force1, Exactly, 2, 112, "Anywhere")) {dwwrite(0x65FD00 + 9808 + 90 * 4, vr.event_hp[round/10] * 256 * 2); }		// 체력
        EUDEndIf()
        if EUDIf()(Bring(Force1, Exactly, 2, 112, "Anywhere")):
            f_dwwrite(0x65FD00 + 9808 + 90 * 4, vr.event_hp[round // 10] * 256 * 2)
            # (Line 121) if (Bring(Force1, Exactly, 3, 112, "Anywhere")) {dwwrite(0x65FD00 + 9808 + 90 * 4, vr.event_hp[round/10] * 256 * 3); }		// 체력
        EUDEndIf()
        if EUDIf()(Bring(Force1, Exactly, 3, 112, "Anywhere")):
            f_dwwrite(0x65FD00 + 9808 + 90 * 4, vr.event_hp[round // 10] * 256 * 3)
            # (Line 122) if (Bring(Force1, Exactly, 4, 112, "Anywhere")) {dwwrite(0x65FD00 + 9808 + 90 * 4, vr.event_hp[round/10] * 256 * 4); }		// 체력
        EUDEndIf()
        if EUDIf()(Bring(Force1, Exactly, 4, 112, "Anywhere")):
            f_dwwrite(0x65FD00 + 9808 + 90 * 4, vr.event_hp[round // 10] * 256 * 4)
            # (Line 123) if (Bring(Force1, Exactly, 5, 112, "Anywhere")) {dwwrite(0x65FD00 + 9808 + 90 * 4, vr.event_hp[round/10] * 256 * 5); }		// 체력
        EUDEndIf()
        if EUDIf()(Bring(Force1, Exactly, 5, 112, "Anywhere")):
            f_dwwrite(0x65FD00 + 9808 + 90 * 4, vr.event_hp[round // 10] * 256 * 5)
            # (Line 124) bwrite(0x65FD00 + 14544 + 90 * 1, 30 + vr.event_Type[vr.event]);
        EUDEndIf()
        f_bwrite(0x65FD00 + 14544 + 90 * 1, 30 + vr.event_Type[vr.event])
        # (Line 125) SetDeaths(AllPlayers, SetTo, vr.event, "event_index");
        # (Line 126) SetDeaths(P6, SetTo, 1, "Round");
        DoActions(SetDeaths(AllPlayers, SetTo, vr.event, "event_index"))
        # (Line 128) }
        DoActions(SetDeaths(P6, SetTo, 1, "Round"))
        # (Line 129) }
    EUDEndIf()
