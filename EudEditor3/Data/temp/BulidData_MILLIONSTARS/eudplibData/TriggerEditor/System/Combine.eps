import Princess.Variable as pv;
import Fairy.Variable as fv;
import Angel.Variable as av;

function Init();
function FixedUpdate(cp);
function CombineN(cp);
function CombineR(cp);
function CombineSR(cp);

var Percent;
var Type;
var Unit;
var index;

const s = StringBuffer();

function Init()
{
	
}

function FixedUpdate(cp)
{
	CombineN(cp);
	CombineR(cp);
	CombineSR(cp);
}

function CombineN(cp)
{
	if(Bring(cp, AtLeast, 5, "(men)", "CombineN_Combine"))
	{
		RemoveUnitAt(5, "(men)", "CombineN_Combine", cp);
		
		Percent = dwrand() % 10000;
		Type = dwrand() % 3;

		if (Percent <= 100)
		{ Unit = dwrand() % 2 + 2; }
		else if (Percent > 100 && Percent <= 2500)
		{ Unit = 4; }
		else if (Percent > 2500)
		{ Unit = dwrand() % 3 + 5; }
		
		switch(Type)
		{
		case 0:
			index = pv.Unit_ID[Unit];
			CreateUnit(1, index, 5, cp);
			s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(pv.Create_Text[Unit]));
			break;
		case 1:
			index = fv.Unit_ID[Unit];
			CreateUnit(1, index, 5, cp);
			s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(fv.Create_Text[Unit]));
			break;
		case 2:
			index = av.Unit_ID[Unit];
			CreateUnit(1, index, 5, cp);
			s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(av.Create_Text[Unit]));
			break;
		}
	}
}

function CombineR(cp)
{
	if(Bring(cp, AtLeast, 5, "(men)", "CombineR_Combine"))
	{
		RemoveUnitAt(5, "(men)", "CombineR_Combine", cp);
		
		Percent = dwrand() % 10000;
		Type = dwrand() % 3;

		if (Percent <= 100)
		{ Unit = dwrand() % 2; }
		else if (Percent > 100)
		{ Unit = dwrand() % 2 + 2; }
		
		switch(Type)
		{
		case 0:
			index = pv.Unit_ID[Unit];
			CreateUnit(1, index, 5, cp);
			s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(pv.Create_Text[Unit]));
			break;
		case 1:
			index = fv.Unit_ID[Unit];
			CreateUnit(1, index, 5, cp);
			s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(fv.Create_Text[Unit]));
			break;
		case 2:
			index = av.Unit_ID[Unit];
			CreateUnit(1, index, 5, cp);
			s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(av.Create_Text[Unit]));
			break;
		}
	}
}

function CombineSR(cp)
{
	if(Bring(cp, AtLeast, 5, "(men)", "CombineSR_Combine"))
	{
		RemoveUnitAt(5, "(men)", "CombineSR_Combine", cp);
		
		Percent = dwrand() % 10000;
		Type = dwrand() % 3;
		Unit = dwrand() % 2;
		
		switch(Type)
		{
		case 0:
			index = pv.Unit_ID[Unit];
			CreateUnit(1, index, 5, cp);
			s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(pv.Create_Text[Unit]));
			break;
		case 1:
			index = fv.Unit_ID[Unit];
			CreateUnit(1, index, 5, cp);
			s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(fv.Create_Text[Unit]));
			break;
		case 2:
			index = av.Unit_ID[Unit];
			CreateUnit(1, index, 5, cp);
			s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(av.Create_Text[Unit]));
			break;
		}
	}
}