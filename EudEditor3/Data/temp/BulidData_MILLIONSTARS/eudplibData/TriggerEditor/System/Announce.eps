import System.Variable as v;
import Title.Variable as tv;

function Change_Announcement(cp);
function FixedUpdate(cp);
function Check_Line(cp);

const AnnounceList = PVariable();
const RoundType = 0;

function Change_Announcement(cp)
{
	if (Deaths(CurrentPlayer, Exactly, 1, "Flag"))
	{
		SetDeaths(CurrentPlayer, SetTo, 0, "Flag");
		
		if (AnnounceList[cp] < 1) 	{ AnnounceList[cp] += 1; }
		else 						{ AnnounceList[cp] 	= 0; }
	}
}

function FixedUpdate(cp)
{
	Change_Announcement(cp);
	
	switch(AnnounceList[cp])
	{
	case 0:
		if (Bring(cp, AtLeast, 1, 112, "Anywhere"))
		{ 
			Check_Line(cp);
		}
		else if (Bring(cp, Exactly, 0, 112, "Anywhere") && v.Round_Count[cp] < 70 && tv.isTitle_Complete[7] == 0)
		{
			 v.Round_Count[cp] = 70;
		}
		else if (Bring(cp, Exactly, 0, 112, "Anywhere") && v.Round_Count[cp] < 70 && tv.isTitle_Complete[7] == 1)
		{
			 v.Round_Count[cp] = 80;
		}
		
		if (tv.isTitle_Complete[7] == 0)
		{ f_eprintln("\x04", dwread_epd(185 * 12 + 6), " \x0F주차 ", ptr2s(v.Round_Type[dwread_epd(207 * 12 + 7)]),
				" \x17진행도 \x04", dwread_epd(204 * 12 + 6), "/60 ", 
				"\x08 라인 \x04", v.Round_Count[cp], "/", 70);
		}
		else
		{ f_eprintln("\x04", dwread_epd(185 * 12 + 6), " \x0F주차 ", ptr2s(v.Round_Type[dwread_epd(207 * 12 + 7)]),
				" \x17진행도 \x04", dwread_epd(204 * 12 + 6), "/60 ", 
				"\x08 라인 \x04", v.Round_Count[cp], "/", 80);
		}
		break;
	case 1:
		if (Deaths(cp, Exactly, 0, "unit_music_length"))
		{ f_eprintln("\x1F# N\x04ow Playing - ", ptr2s(v.music_name[0])); }
		else
		{ f_eprintln("\x1F# N\x04ow Playing - ", ptr2s(v.music_name[dwread_epd(35 * 12 + 7)])); }
	}
	
	if (v.Round_Count[cp] >= 70  && tv.isTitle_Complete[7] == 0 && Bring(cp, AtLeast, 1, 112, "Anywhere"))
	{ RemoveUnit(112, cp); }
	else if (v.Round_Count[cp] >= 80  && tv.isTitle_Complete[7] == 1 && Bring(cp, AtLeast, 1, 112, "Anywhere"))
	{ RemoveUnit(112, cp); }
}

function Check_Line(cp)
{
	switch (cp)
	{
	case 0:
		v.Round_Count[cp] = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "(any unit)", "Player1")'));
		break;
	case 1:
		v.Round_Count[cp] = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "(any unit)", "Player2")'));
		break;
	case 2:
		v.Round_Count[cp] = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "(any unit)", "Player3")'));
		break;
	case 3:
		v.Round_Count[cp] = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "(any unit)", "Player4")'));
		break;
	case 4:
		v.Round_Count[cp] = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "(any unit)", "Player5")'));
		break;
	}
}