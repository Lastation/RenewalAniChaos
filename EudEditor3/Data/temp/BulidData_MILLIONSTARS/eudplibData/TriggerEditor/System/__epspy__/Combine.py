## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Princess.Variable as pv;
from Princess import Variable as pv
# (Line 2) import Fairy.Variable as fv;
from Fairy import Variable as fv
# (Line 3) import Angel.Variable as av;
from Angel import Variable as av
# (Line 5) function Init();
# (Line 6) function FixedUpdate(cp);
# (Line 7) function CombineN(cp);
# (Line 8) function CombineR(cp);
# (Line 9) function CombineSR(cp);
# (Line 11) var Percent;
Percent = EUDVariable()
# (Line 12) var Type;
Type = EUDVariable()
# (Line 13) var Unit;
Unit = EUDVariable()
# (Line 14) var index;
index = EUDVariable()
# (Line 16) const s = StringBuffer();
s = _CGFW(lambda: [StringBuffer()], 1)[0]
# (Line 18) function Init()
# (Line 19) {
@EUDFunc
def Init():
    # (Line 21) }
    # (Line 23) function FixedUpdate(cp)
    pass

# (Line 24) {
@EUDFunc
def FixedUpdate(cp):
    # (Line 25) CombineN(cp);
    CombineN(cp)
    # (Line 26) CombineR(cp);
    CombineR(cp)
    # (Line 27) CombineSR(cp);
    CombineSR(cp)
    # (Line 28) }
    # (Line 30) function CombineN(cp)

# (Line 31) {
@EUDFunc
def CombineN(cp):
    # (Line 32) if(Bring(cp, AtLeast, 5, "(men)", "CombineN_Combine"))
    if EUDIf()(Bring(cp, AtLeast, 5, "(men)", "CombineN_Combine")):
        # (Line 33) {
        # (Line 34) RemoveUnitAt(5, "(men)", "CombineN_Combine", cp);
        # (Line 36) Percent = dwrand() % 10000;
        DoActions(RemoveUnitAt(5, "(men)", "CombineN_Combine", cp))
        Percent << (f_dwrand() % 10000)
        # (Line 37) Type = dwrand() % 3;
        Type << (f_dwrand() % 3)
        # (Line 39) if (Percent <= 100)
        if EUDIf()(Percent <= 100):
            # (Line 40) { Unit = dwrand() % 2 + 2; }
            Unit << (f_dwrand() % 2 + 2)
            # (Line 41) else if (Percent > 100 && Percent <= 2500)
        if EUDElseIf()(EUDSCAnd()(Percent <= 100, neg=True)(Percent <= 2500)()):
            # (Line 42) { Unit = 4; }
            Unit << (4)
            # (Line 43) else if (Percent > 2500)
        if EUDElseIf()(Percent <= 2500, neg=True):
            # (Line 44) { Unit = dwrand() % 3 + 5; }
            Unit << (f_dwrand() % 3 + 5)
            # (Line 46) switch(Type)
        EUDEndIf()
        EUDSwitch(Type)
        # (Line 47) {
        # (Line 48) case 0:
        _t5 = EUDSwitchCase()
        # (Line 49) index = pv.Unit_ID[Unit];
        if _t5(0):
            index << (pv.Unit_ID[Unit])
            # (Line 50) CreateUnit(1, index, 5, cp);
            # (Line 51) s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(pv.Create_Text[Unit]));
            DoActions(CreateUnit(1, index, 5, cp))
            s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(pv.Create_Text[Unit]))
            # (Line 52) break;
            EUDBreak()
            # (Line 53) case 1:
        _t6 = EUDSwitchCase()
        # (Line 54) index = fv.Unit_ID[Unit];
        if _t6(1):
            index << (fv.Unit_ID[Unit])
            # (Line 55) CreateUnit(1, index, 5, cp);
            # (Line 56) s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(fv.Create_Text[Unit]));
            DoActions(CreateUnit(1, index, 5, cp))
            s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(fv.Create_Text[Unit]))
            # (Line 57) break;
            EUDBreak()
            # (Line 58) case 2:
        _t7 = EUDSwitchCase()
        # (Line 59) index = av.Unit_ID[Unit];
        if _t7(2):
            index << (av.Unit_ID[Unit])
            # (Line 60) CreateUnit(1, index, 5, cp);
            # (Line 61) s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(av.Create_Text[Unit]));
            DoActions(CreateUnit(1, index, 5, cp))
            s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(av.Create_Text[Unit]))
            # (Line 62) break;
            EUDBreak()
            # (Line 63) }
        # (Line 64) }
        EUDEndSwitch()
        # (Line 65) }
    EUDEndIf()
    # (Line 67) function CombineR(cp)

# (Line 68) {
@EUDFunc
def CombineR(cp):
    # (Line 69) if(Bring(cp, AtLeast, 5, "(men)", "CombineR_Combine"))
    if EUDIf()(Bring(cp, AtLeast, 5, "(men)", "CombineR_Combine")):
        # (Line 70) {
        # (Line 71) RemoveUnitAt(5, "(men)", "CombineR_Combine", cp);
        # (Line 73) Percent = dwrand() % 10000;
        DoActions(RemoveUnitAt(5, "(men)", "CombineR_Combine", cp))
        Percent << (f_dwrand() % 10000)
        # (Line 74) Type = dwrand() % 3;
        Type << (f_dwrand() % 3)
        # (Line 76) if (Percent <= 100)
        if EUDIf()(Percent <= 100):
            # (Line 77) { Unit = dwrand() % 2; }
            Unit << (f_dwrand() % 2)
            # (Line 78) else if (Percent > 100)
        if EUDElseIf()(Percent <= 100, neg=True):
            # (Line 79) { Unit = dwrand() % 2 + 2; }
            Unit << (f_dwrand() % 2 + 2)
            # (Line 81) switch(Type)
        EUDEndIf()
        EUDSwitch(Type)
        # (Line 82) {
        # (Line 83) case 0:
        _t4 = EUDSwitchCase()
        # (Line 84) index = pv.Unit_ID[Unit];
        if _t4(0):
            index << (pv.Unit_ID[Unit])
            # (Line 85) CreateUnit(1, index, 5, cp);
            # (Line 86) s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(pv.Create_Text[Unit]));
            DoActions(CreateUnit(1, index, 5, cp))
            s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(pv.Create_Text[Unit]))
            # (Line 87) break;
            EUDBreak()
            # (Line 88) case 1:
        _t5 = EUDSwitchCase()
        # (Line 89) index = fv.Unit_ID[Unit];
        if _t5(1):
            index << (fv.Unit_ID[Unit])
            # (Line 90) CreateUnit(1, index, 5, cp);
            # (Line 91) s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(fv.Create_Text[Unit]));
            DoActions(CreateUnit(1, index, 5, cp))
            s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(fv.Create_Text[Unit]))
            # (Line 92) break;
            EUDBreak()
            # (Line 93) case 2:
        _t6 = EUDSwitchCase()
        # (Line 94) index = av.Unit_ID[Unit];
        if _t6(2):
            index << (av.Unit_ID[Unit])
            # (Line 95) CreateUnit(1, index, 5, cp);
            # (Line 96) s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(av.Create_Text[Unit]));
            DoActions(CreateUnit(1, index, 5, cp))
            s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(av.Create_Text[Unit]))
            # (Line 97) break;
            EUDBreak()
            # (Line 98) }
        # (Line 99) }
        EUDEndSwitch()
        # (Line 100) }
    EUDEndIf()
    # (Line 102) function CombineSR(cp)

# (Line 103) {
@EUDFunc
def CombineSR(cp):
    # (Line 104) if(Bring(cp, AtLeast, 5, "(men)", "CombineSR_Combine"))
    if EUDIf()(Bring(cp, AtLeast, 5, "(men)", "CombineSR_Combine")):
        # (Line 105) {
        # (Line 106) RemoveUnitAt(5, "(men)", "CombineSR_Combine", cp);
        # (Line 108) Percent = dwrand() % 10000;
        DoActions(RemoveUnitAt(5, "(men)", "CombineSR_Combine", cp))
        Percent << (f_dwrand() % 10000)
        # (Line 109) Type = dwrand() % 3;
        Type << (f_dwrand() % 3)
        # (Line 110) Unit = dwrand() % 2;
        Unit << (f_dwrand() % 2)
        # (Line 112) switch(Type)
        EUDSwitch(Type)
        # (Line 113) {
        # (Line 114) case 0:
        _t2 = EUDSwitchCase()
        # (Line 115) index = pv.Unit_ID[Unit];
        if _t2(0):
            index << (pv.Unit_ID[Unit])
            # (Line 116) CreateUnit(1, index, 5, cp);
            # (Line 117) s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(pv.Create_Text[Unit]));
            DoActions(CreateUnit(1, index, 5, cp))
            s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(pv.Create_Text[Unit]))
            # (Line 118) break;
            EUDBreak()
            # (Line 119) case 1:
        _t3 = EUDSwitchCase()
        # (Line 120) index = fv.Unit_ID[Unit];
        if _t3(1):
            index << (fv.Unit_ID[Unit])
            # (Line 121) CreateUnit(1, index, 5, cp);
            # (Line 122) s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(fv.Create_Text[Unit]));
            DoActions(CreateUnit(1, index, 5, cp))
            s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(fv.Create_Text[Unit]))
            # (Line 123) break;
            EUDBreak()
            # (Line 124) case 2:
        _t4 = EUDSwitchCase()
        # (Line 125) index = av.Unit_ID[Unit];
        if _t4(2):
            index << (av.Unit_ID[Unit])
            # (Line 126) CreateUnit(1, index, 5, cp);
            # (Line 127) s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(av.Create_Text[Unit]));
            DoActions(CreateUnit(1, index, 5, cp))
            s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(av.Create_Text[Unit]))
            # (Line 128) break;
            EUDBreak()
            # (Line 129) }
        # (Line 130) }
        EUDEndSwitch()
        # (Line 131) }
    EUDEndIf()
