## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Princess.Variable as pv;
from Princess import Variable as pv
# (Line 2) import Fairy.Variable as fv;
from Fairy import Variable as fv
# (Line 3) import Angel.Variable as av;
from Angel import Variable as av
# (Line 5) function Init();
# (Line 6) function FixedUpdate(cp);
# (Line 7) function Normal_Ticket(cp);
# (Line 8) function Rare_Ticket(cp);
# (Line 10) var Percent;
Percent = EUDVariable()
# (Line 11) var Type;
Type = EUDVariable()
# (Line 12) var Unit;
Unit = EUDVariable()
# (Line 13) var index;
index = EUDVariable()
# (Line 15) const s = StringBuffer();
s = _CGFW(lambda: [StringBuffer()], 1)[0]
# (Line 17) function Init()
# (Line 18) {
@EUDFunc
def Init():
    # (Line 20) }
    # (Line 22) function FixedUpdate(cp)
    pass

# (Line 23) {
@EUDFunc
def FixedUpdate(cp):
    # (Line 24) Normal_Ticket(cp);
    Normal_Ticket(cp)
    # (Line 25) Rare_Ticket(cp);
    Rare_Ticket(cp)
    # (Line 26) }
    # (Line 28) function Normal_Ticket(cp)

# (Line 29) {
@EUDFunc
def Normal_Ticket(cp):
    # (Line 30) if(Bring(cp, AtLeast, 1, 64, "MedalGacha Step 1"))
    if EUDIf()(Bring(cp, AtLeast, 1, 64, "MedalGacha Step 1")):
        # (Line 31) {
        # (Line 32) KillUnitAt(1, 64, "MedalGacha Step 1", cp);
        # (Line 34) Percent = dwrand() % 10000;
        DoActions(KillUnitAt(1, 64, "MedalGacha Step 1", cp))
        Percent << (f_dwrand() % 10000)
        # (Line 35) Type = dwrand() % 3;
        Type << (f_dwrand() % 3)
        # (Line 38) if (Percent <= 100)
        if EUDIf()(Percent <= 100):
            # (Line 39) { Unit = dwrand() % 3 + 5; }
            Unit << (f_dwrand() % 3 + 5)
            # (Line 40) else if (Percent > 100 && Percent <= 2000)
        if EUDElseIf()(EUDSCAnd()(Percent <= 100, neg=True)(Percent <= 2000)()):
            # (Line 41) { Unit = dwrand() % 2 + 8; }
            Unit << (f_dwrand() % 2 + 8)
            # (Line 42) else if (Percent > 2000)
        if EUDElseIf()(Percent <= 2000, neg=True):
            # (Line 43) { Unit = dwrand() % 3 + 10; }
            Unit << (f_dwrand() % 3 + 10)
            # (Line 45) switch(Type)
        EUDEndIf()
        EUDSwitch(Type)
        # (Line 46) {
        # (Line 47) case 0:
        _t5 = EUDSwitchCase()
        # (Line 48) if 		(Percent <= 100 	+ pv.Album_Level[10]) 		{ Unit = dwrand() % 3 + 5; }
        if _t5(0):
            if EUDIf()(Percent <= 100 + pv.Album_Level[10]):
                Unit << (f_dwrand() % 3 + 5)
                # (Line 49) else if 	(Percent <= 2000 	+ pv.Album_Level[10] * 20)	{ Unit = dwrand() % 2 + 8; }
            if EUDElseIf()(Percent <= 2000 + pv.Album_Level[10] * 20):
                Unit << (f_dwrand() % 2 + 8)
                # (Line 50) else if 	(Percent > 2000 		+ pv.Album_Level[10] *20)	{ Unit = dwrand() % 3 + 10; }
            if EUDElseIf()(Percent <= 2000 + pv.Album_Level[10] * 20, neg=True):
                Unit << (f_dwrand() % 3 + 10)
                # (Line 52) index = pv.Unit_ID[Unit];
            EUDEndIf()
            index << (pv.Unit_ID[Unit])
            # (Line 53) CreateUnit(1, index, 5, cp);
            # (Line 54) s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(pv.Create_Text[Unit]));
            DoActions(CreateUnit(1, index, 5, cp))
            s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(pv.Create_Text[Unit]))
            # (Line 55) break;
            EUDBreak()
            # (Line 56) case 1:
        _t9 = EUDSwitchCase()
        # (Line 57) if 		(Percent <= 100 	+ fv.Album_Level[8]) 		{ Unit = dwrand() % 3 + 5; }
        if _t9(1):
            if EUDIf()(Percent <= 100 + fv.Album_Level[8]):
                Unit << (f_dwrand() % 3 + 5)
                # (Line 58) else if 	(Percent <= 2000 	+ fv.Album_Level[8] * 20)		{ Unit = dwrand() % 2 + 8; }
            if EUDElseIf()(Percent <= 2000 + fv.Album_Level[8] * 20):
                Unit << (f_dwrand() % 2 + 8)
                # (Line 59) else if 	(Percent > 2000 		+ fv.Album_Level[8] *20)		{ Unit = dwrand() % 3 + 10; }
            if EUDElseIf()(Percent <= 2000 + fv.Album_Level[8] * 20, neg=True):
                Unit << (f_dwrand() % 3 + 10)
                # (Line 61) index = fv.Unit_ID[Unit];
            EUDEndIf()
            index << (fv.Unit_ID[Unit])
            # (Line 62) CreateUnit(1, index, 5, cp);
            # (Line 63) s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(fv.Create_Text[Unit]));
            DoActions(CreateUnit(1, index, 5, cp))
            s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(fv.Create_Text[Unit]))
            # (Line 64) break;
            EUDBreak()
            # (Line 65) case 2:
        _t13 = EUDSwitchCase()
        # (Line 66) if 		(Percent <= 100 	+ av.Album_Level[12]) 		{ Unit = dwrand() % 3 + 5; }
        if _t13(2):
            if EUDIf()(Percent <= 100 + av.Album_Level[12]):
                Unit << (f_dwrand() % 3 + 5)
                # (Line 67) else if 	(Percent <= 2000 	+ av.Album_Level[12] * 20)	{ Unit = dwrand() % 2 + 8; }
            if EUDElseIf()(Percent <= 2000 + av.Album_Level[12] * 20):
                Unit << (f_dwrand() % 2 + 8)
                # (Line 68) else if 	(Percent > 2000 		+ av.Album_Level[12] *20)	{ Unit = dwrand() % 3 + 10; }
            if EUDElseIf()(Percent <= 2000 + av.Album_Level[12] * 20, neg=True):
                Unit << (f_dwrand() % 3 + 10)
                # (Line 70) index = av.Unit_ID[Unit];
            EUDEndIf()
            index << (av.Unit_ID[Unit])
            # (Line 71) CreateUnit(1, index, 5, cp);
            # (Line 72) s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(av.Create_Text[Unit]));
            DoActions(CreateUnit(1, index, 5, cp))
            s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(av.Create_Text[Unit]))
            # (Line 73) break;
            EUDBreak()
            # (Line 74) }
        # (Line 75) }
        EUDEndSwitch()
        # (Line 76) }
    EUDEndIf()
    # (Line 78) function Rare_Ticket(cp)

# (Line 79) {
@EUDFunc
def Rare_Ticket(cp):
    # (Line 80) if(Bring(cp, AtLeast, 1, 7, "MedalGacha Step 1"))
    if EUDIf()(Bring(cp, AtLeast, 1, 7, "MedalGacha Step 1")):
        # (Line 81) {
        # (Line 82) KillUnitAt(1, 7, "MedalGacha Step 1", cp);
        # (Line 84) Percent = dwrand() % 10000;
        DoActions(KillUnitAt(1, 7, "MedalGacha Step 1", cp))
        Percent << (f_dwrand() % 10000)
        # (Line 85) Type = dwrand() % 3;
        Type << (f_dwrand() % 3)
        # (Line 87) if (Percent <= 100)
        if EUDIf()(Percent <= 100):
            # (Line 88) { Unit = dwrand() % 2 + 2; }
            Unit << (f_dwrand() % 2 + 2)
            # (Line 89) else if (Percent > 100 && Percent <= 2000)
        if EUDElseIf()(EUDSCAnd()(Percent <= 100, neg=True)(Percent <= 2000)()):
            # (Line 90) { Unit = 4; }
            Unit << (4)
            # (Line 91) else if (Percent > 2000)
        if EUDElseIf()(Percent <= 2000, neg=True):
            # (Line 92) { Unit = dwrand() % 3 + 5; }
            Unit << (f_dwrand() % 3 + 5)
            # (Line 94) switch(Type)
        EUDEndIf()
        EUDSwitch(Type)
        # (Line 95) {
        # (Line 96) case 0:
        _t5 = EUDSwitchCase()
        # (Line 97) if 		(Percent <= 100 	+ pv.Album_Level[10]) 		{ Unit = dwrand() % 2 + 2; }
        if _t5(0):
            if EUDIf()(Percent <= 100 + pv.Album_Level[10]):
                Unit << (f_dwrand() % 2 + 2)
                # (Line 98) else if 	(Percent <= 2000 	+ pv.Album_Level[10] * 20)	{ Unit = 4; }
            if EUDElseIf()(Percent <= 2000 + pv.Album_Level[10] * 20):
                Unit << (4)
                # (Line 99) else if 	(Percent > 2000 		+ pv.Album_Level[10] *20)	{ Unit = dwrand() % 3 + 5; }
            if EUDElseIf()(Percent <= 2000 + pv.Album_Level[10] * 20, neg=True):
                Unit << (f_dwrand() % 3 + 5)
                # (Line 101) index = pv.Unit_ID[Unit];
            EUDEndIf()
            index << (pv.Unit_ID[Unit])
            # (Line 102) CreateUnit(1, index, 5, cp);
            # (Line 103) s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(pv.Create_Text[Unit]));
            DoActions(CreateUnit(1, index, 5, cp))
            s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(pv.Create_Text[Unit]))
            # (Line 104) break;
            EUDBreak()
            # (Line 105) case 1:
        _t9 = EUDSwitchCase()
        # (Line 106) if 		(Percent <= 100 	+ fv.Album_Level[8]) 		{ Unit = dwrand() % 2 + 2; }
        if _t9(1):
            if EUDIf()(Percent <= 100 + fv.Album_Level[8]):
                Unit << (f_dwrand() % 2 + 2)
                # (Line 107) else if 	(Percent <= 2000 	+ fv.Album_Level[8] * 20)		{ Unit = 4; }
            if EUDElseIf()(Percent <= 2000 + fv.Album_Level[8] * 20):
                Unit << (4)
                # (Line 108) else if 	(Percent > 2000 		+ fv.Album_Level[8] *20)		{ Unit = dwrand() % 3 + 5; }
            if EUDElseIf()(Percent <= 2000 + fv.Album_Level[8] * 20, neg=True):
                Unit << (f_dwrand() % 3 + 5)
                # (Line 110) index = fv.Unit_ID[Unit];
            EUDEndIf()
            index << (fv.Unit_ID[Unit])
            # (Line 111) CreateUnit(1, index, 5, cp);
            # (Line 112) s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(fv.Create_Text[Unit]));
            DoActions(CreateUnit(1, index, 5, cp))
            s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(fv.Create_Text[Unit]))
            # (Line 113) break;
            EUDBreak()
            # (Line 114) case 2:
        _t13 = EUDSwitchCase()
        # (Line 115) if 		(Percent <= 100 	+ av.Album_Level[12]) 		{ Unit = dwrand() % 2 + 2; }
        if _t13(2):
            if EUDIf()(Percent <= 100 + av.Album_Level[12]):
                Unit << (f_dwrand() % 2 + 2)
                # (Line 116) else if 	(Percent <= 2000 	+ av.Album_Level[12] * 20)	{ Unit = 4; }
            if EUDElseIf()(Percent <= 2000 + av.Album_Level[12] * 20):
                Unit << (4)
                # (Line 117) else if 	(Percent > 2000 		+ av.Album_Level[12] *20)	{ Unit = dwrand() % 3 + 5; }
            if EUDElseIf()(Percent <= 2000 + av.Album_Level[12] * 20, neg=True):
                Unit << (f_dwrand() % 3 + 5)
                # (Line 119) index = av.Unit_ID[Unit];
            EUDEndIf()
            index << (av.Unit_ID[Unit])
            # (Line 120) CreateUnit(1, index, 5, cp);
            # (Line 121) s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(av.Create_Text[Unit]));
            DoActions(CreateUnit(1, index, 5, cp))
            s.print(ptr2s(GetTBLAddr(index + 1)), "\x04 : ", ptr2s(av.Create_Text[Unit]))
            # (Line 122) break;
            EUDBreak()
            # (Line 123) }
        # (Line 124) }
        EUDEndSwitch()
        # (Line 125) }
    EUDEndIf()
