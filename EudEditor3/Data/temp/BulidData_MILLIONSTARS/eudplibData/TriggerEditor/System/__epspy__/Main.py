## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import System.Round as r;
from System import Round as r
# (Line 2) import System.Announce as a;
from System import Announce as a
# (Line 3) import System.Gatcha as g;
from System import Gatcha as g
# (Line 4) import System.Combine as c;
from System import Combine as c
# (Line 5) import System.Mission as m;
from System import Mission as m
# (Line 7) function Init();
# (Line 8) function FixedUpdate();
# (Line 9) function PlayerUpdate(cp);
# (Line 11) function Boss_reward();
# (Line 13) function Init()
# (Line 14) {
@EUDFunc
def Init():
    # (Line 16) }
    # (Line 18) function FixedUpdate()
    pass

# (Line 19) {
@EUDFunc
def FixedUpdate():
    # (Line 20) r.FixedUpdate();
    r.FixedUpdate()
    # (Line 21) m.FixedUpdate();
    m.FixedUpdate()
    # (Line 22) Boss_reward();
    Boss_reward()
    # (Line 23) }
    # (Line 25) function PlayerUpdate(cp)

# (Line 26) {
@EUDFunc
def PlayerUpdate(cp):
    # (Line 27) r.PlayerUpdate(cp);
    r.PlayerUpdate(cp)
    # (Line 28) a.FixedUpdate(cp);
    a.FixedUpdate(cp)
    # (Line 29) g.FixedUpdate(cp);
    g.FixedUpdate(cp)
    # (Line 30) c.FixedUpdate(cp);
    c.FixedUpdate(cp)
    # (Line 31) m.PlayerUpdate(cp);
    m.PlayerUpdate(cp)
    # (Line 32) }
    # (Line 34) function Boss_reward()

# (Line 35) {
@EUDFunc
def Boss_reward():
    # (Line 36) if (Deaths(P8, AtLeast, 1, 133))
    if EUDIf()(Deaths(P8, AtLeast, 1, 133)):
        # (Line 37) {
        # (Line 38) CreateUnit(1, 7, "MedalGacha", Force1);
        # (Line 39) SetResources(Force1, Add, 100, Ore);
        DoActions(CreateUnit(1, 7, "MedalGacha", Force1))
        # (Line 40) SetDeaths(P8, Subtract, 1, 133);
        DoActions(SetResources(Force1, Add, 100, Ore))
        # (Line 41) }
        DoActions(SetDeaths(P8, Subtract, 1, 133))
        # (Line 42) }
    EUDEndIf()
