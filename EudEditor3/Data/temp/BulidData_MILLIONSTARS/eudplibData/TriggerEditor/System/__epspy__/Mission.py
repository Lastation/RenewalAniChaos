## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import System.Variable as v;
from System import Variable as v
# (Line 3) const s = StringBuffer();
s = _CGFW(lambda: [StringBuffer()], 1)[0]
# (Line 5) function Mission_start(cp);
# (Line 6) function Mission_reward(cp);
# (Line 7) function Mission_reward_player(cp, type);
# (Line 9) function FixedUpdate()
# (Line 10) {
@EUDFunc
def FixedUpdate():
    # (Line 11) if (v.Mission_Time[0] > 0) { v.Mission_Time[0] -= 1; }
    if EUDIf()(v.Mission_Time[0] <= 0, neg=True):
        _ARRW(v.Mission_Time, 0).__isub__(1)
        # (Line 12) if (v.Mission_Time[1] > 0) { v.Mission_Time[1] -= 1; }
    EUDEndIf()
    if EUDIf()(v.Mission_Time[1] <= 0, neg=True):
        _ARRW(v.Mission_Time, 1).__isub__(1)
        # (Line 13) if (v.Mission_Time[2] > 0) { v.Mission_Time[2] -= 1; }
    EUDEndIf()
    if EUDIf()(v.Mission_Time[2] <= 0, neg=True):
        _ARRW(v.Mission_Time, 2).__isub__(1)
        # (Line 14) if (v.Mission_Time[3] > 0) { v.Mission_Time[3] -= 1; }
    EUDEndIf()
    if EUDIf()(v.Mission_Time[3] <= 0, neg=True):
        _ARRW(v.Mission_Time, 3).__isub__(1)
        # (Line 15) if (v.Mission_Time[4] > 0) { v.Mission_Time[4] -= 1; }
    EUDEndIf()
    if EUDIf()(v.Mission_Time[4] <= 0, neg=True):
        _ARRW(v.Mission_Time, 4).__isub__(1)
        # (Line 17) if (v.Mission_Delay[0] > 1) { v.Mission_Delay[0] -= 1; }
    EUDEndIf()
    if EUDIf()(v.Mission_Delay[0] <= 1, neg=True):
        _ARRW(v.Mission_Delay, 0).__isub__(1)
        # (Line 18) if (v.Mission_Delay[1] > 1) { v.Mission_Delay[1] -= 1; }
    EUDEndIf()
    if EUDIf()(v.Mission_Delay[1] <= 1, neg=True):
        _ARRW(v.Mission_Delay, 1).__isub__(1)
        # (Line 19) if (v.Mission_Delay[2] > 1) { v.Mission_Delay[2] -= 1; }
    EUDEndIf()
    if EUDIf()(v.Mission_Delay[2] <= 1, neg=True):
        _ARRW(v.Mission_Delay, 2).__isub__(1)
        # (Line 20) if (v.Mission_Delay[3] > 1) { v.Mission_Delay[3] -= 1; }
    EUDEndIf()
    if EUDIf()(v.Mission_Delay[3] <= 1, neg=True):
        _ARRW(v.Mission_Delay, 3).__isub__(1)
        # (Line 21) if (v.Mission_Delay[4] > 1) { v.Mission_Delay[4] -= 1; }
    EUDEndIf()
    if EUDIf()(v.Mission_Delay[4] <= 1, neg=True):
        _ARRW(v.Mission_Delay, 4).__isub__(1)
        # (Line 23) if(v.Mission_Check[0] == 0) { v.Mission_Effect[0] = 0; }
    EUDEndIf()
    if EUDIf()(v.Mission_Check[0] == 0):
        _ARRW(v.Mission_Effect, 0) << (0)
        # (Line 24) if(v.Mission_Check[1] == 0) { v.Mission_Effect[1] = 0; }
    EUDEndIf()
    if EUDIf()(v.Mission_Check[1] == 0):
        _ARRW(v.Mission_Effect, 1) << (0)
        # (Line 25) if(v.Mission_Check[2] == 0) { v.Mission_Effect[2] = 0; }
    EUDEndIf()
    if EUDIf()(v.Mission_Check[2] == 0):
        _ARRW(v.Mission_Effect, 2) << (0)
        # (Line 26) if(v.Mission_Check[3] == 0) { v.Mission_Effect[3] = 0; }
    EUDEndIf()
    if EUDIf()(v.Mission_Check[3] == 0):
        _ARRW(v.Mission_Effect, 3) << (0)
        # (Line 27) if(v.Mission_Check[4] == 0) { v.Mission_Effect[4] = 0; }
    EUDEndIf()
    if EUDIf()(v.Mission_Check[4] == 0):
        _ARRW(v.Mission_Effect, 4) << (0)
        # (Line 29) if(v.Mission_Check[0] == 1) { v.Mission_Effect[0] += 1; }
    EUDEndIf()
    if EUDIf()(v.Mission_Check[0] == 1):
        _ARRW(v.Mission_Effect, 0).__iadd__(1)
        # (Line 30) if(v.Mission_Check[1] == 1) { v.Mission_Effect[1] += 1; }
    EUDEndIf()
    if EUDIf()(v.Mission_Check[1] == 1):
        _ARRW(v.Mission_Effect, 1).__iadd__(1)
        # (Line 31) if(v.Mission_Check[2] == 1) { v.Mission_Effect[2] += 1; }
    EUDEndIf()
    if EUDIf()(v.Mission_Check[2] == 1):
        _ARRW(v.Mission_Effect, 2).__iadd__(1)
        # (Line 32) if(v.Mission_Check[3] == 1) { v.Mission_Effect[3] += 1; }
    EUDEndIf()
    if EUDIf()(v.Mission_Check[3] == 1):
        _ARRW(v.Mission_Effect, 3).__iadd__(1)
        # (Line 33) if(v.Mission_Check[4] == 1) { v.Mission_Effect[4] += 1; }
    EUDEndIf()
    if EUDIf()(v.Mission_Check[4] == 1):
        _ARRW(v.Mission_Effect, 4).__iadd__(1)
        # (Line 36) if(v.Mission_Effect[0] == 10) { SetInvincibility(Enable, "(men)", P7, "Player1"); }
    EUDEndIf()
    if EUDIf()(v.Mission_Effect[0] == 10):
        DoActions(SetInvincibility(Enable, "(men)", P7, "Player1"))
        # (Line 37) if(v.Mission_Effect[1] == 10) { SetInvincibility(Enable, "(men)", P7, "Player2"); }
    EUDEndIf()
    if EUDIf()(v.Mission_Effect[1] == 10):
        DoActions(SetInvincibility(Enable, "(men)", P7, "Player2"))
        # (Line 38) if(v.Mission_Effect[2] == 10) { SetInvincibility(Enable, "(men)", P7, "Player3"); }
    EUDEndIf()
    if EUDIf()(v.Mission_Effect[2] == 10):
        DoActions(SetInvincibility(Enable, "(men)", P7, "Player3"))
        # (Line 39) if(v.Mission_Effect[3] == 10) { SetInvincibility(Enable, "(men)", P7, "Player4"); }
    EUDEndIf()
    if EUDIf()(v.Mission_Effect[3] == 10):
        DoActions(SetInvincibility(Enable, "(men)", P7, "Player4"))
        # (Line 40) if(v.Mission_Effect[4] == 10) { SetInvincibility(Enable, "(men)", P7, "Player5"); }
    EUDEndIf()
    if EUDIf()(v.Mission_Effect[4] == 10):
        DoActions(SetInvincibility(Enable, "(men)", P7, "Player5"))
        # (Line 42) if(v.Mission_Effect[0] >= 11) { SetInvincibility(Disable, "(men)", P7, "Player1"); v.Mission_Effect[0] = 0; }
    EUDEndIf()
    if EUDIf()(v.Mission_Effect[0] >= 11):
        DoActions(SetInvincibility(Disable, "(men)", P7, "Player1"))
        _ARRW(v.Mission_Effect, 0) << (0)
        # (Line 43) if(v.Mission_Effect[1] >= 11) { SetInvincibility(Disable, "(men)", P7, "Player2"); v.Mission_Effect[1] = 0; }
    EUDEndIf()
    if EUDIf()(v.Mission_Effect[1] >= 11):
        DoActions(SetInvincibility(Disable, "(men)", P7, "Player2"))
        _ARRW(v.Mission_Effect, 1) << (0)
        # (Line 44) if(v.Mission_Effect[2] >= 11) { SetInvincibility(Disable, "(men)", P7, "Player3"); v.Mission_Effect[2] = 0; }
    EUDEndIf()
    if EUDIf()(v.Mission_Effect[2] >= 11):
        DoActions(SetInvincibility(Disable, "(men)", P7, "Player3"))
        _ARRW(v.Mission_Effect, 2) << (0)
        # (Line 45) if(v.Mission_Effect[3] >= 11) { SetInvincibility(Disable, "(men)", P7, "Player4"); v.Mission_Effect[3] = 0; }
    EUDEndIf()
    if EUDIf()(v.Mission_Effect[3] >= 11):
        DoActions(SetInvincibility(Disable, "(men)", P7, "Player4"))
        _ARRW(v.Mission_Effect, 3) << (0)
        # (Line 46) if(v.Mission_Effect[4] >= 11) { SetInvincibility(Disable, "(men)", P7, "Player5"); v.Mission_Effect[4] = 0; }
    EUDEndIf()
    if EUDIf()(v.Mission_Effect[4] >= 11):
        DoActions(SetInvincibility(Disable, "(men)", P7, "Player5"))
        _ARRW(v.Mission_Effect, 4) << (0)
        # (Line 47) }
    EUDEndIf()
    # (Line 49) function PlayerUpdate(cp)

# (Line 50) {
@EUDFunc
def PlayerUpdate(cp):
    # (Line 51) Mission_start(cp);
    Mission_start(cp)
    # (Line 52) Mission_reward(cp);
    Mission_reward(cp)
    # (Line 53) }
    # (Line 55) function Mission_start(cp)

# (Line 56) {
@EUDFunc
def Mission_start(cp):
    # (Line 57) if (v.Mission1_Delay[cp] == 1)
    if EUDIf()(v.Mission1_Delay[cp] == 1):
        # (Line 58) {
        # (Line 59) s.print("\x13", ptr2s(GetTBLAddr(136)), ptr2s(v.Mission_Text[0]));
        s.print("\x13", ptr2s(GetTBLAddr(136)), ptr2s(v.Mission_Text[0]))
        # (Line 60) v.Mission1_Delay[cp] = 0;
        _ARRW(v.Mission1_Delay, cp) << (0)
        # (Line 61) }
        # (Line 63) if (Bring(cp, AtLeast, 1, 60, "Anywhere") && v.Mission1_Delay[cp] == 0 && v.Mission_Check[cp] == 0)
    EUDEndIf()
    if EUDIf()(EUDSCAnd()(Bring(cp, AtLeast, 1, 60, "Anywhere"))(v.Mission1_Delay[cp] == 0)(v.Mission_Check[cp] == 0)()):
        # (Line 64) {
        # (Line 65) RemoveUnitAt(All, 60, "Anywhere", cp);
        # (Line 66) v.Mission_Check[cp] = 1;
        DoActions(RemoveUnitAt(All, 60, "Anywhere", cp))
        _ARRW(v.Mission_Check, cp) << (1)
        # (Line 67) v.Mission1_Delay[cp] = 300;
        _ARRW(v.Mission1_Delay, cp) << (300)
        # (Line 68) v.Mission_Time[cp] = 180;
        _ARRW(v.Mission_Time, cp) << (180)
        # (Line 70) if (cp == 0) { CreateUnit(1, 135, "Line_Player1", P6); }
        if EUDIf()(cp == 0):
            DoActions(CreateUnit(1, 135, "Line_Player1", P6))
            # (Line 71) if (cp == 1) { CreateUnit(1, 135, "Line_Player2", P6); }
        EUDEndIf()
        if EUDIf()(cp == 1):
            DoActions(CreateUnit(1, 135, "Line_Player2", P6))
            # (Line 72) if (cp == 2) { CreateUnit(1, 135, "Line_Player3", P6); }
        EUDEndIf()
        if EUDIf()(cp == 2):
            DoActions(CreateUnit(1, 135, "Line_Player3", P6))
            # (Line 73) if (cp == 3) { CreateUnit(1, 135, "Line_Player4", P6); }
        EUDEndIf()
        if EUDIf()(cp == 3):
            DoActions(CreateUnit(1, 135, "Line_Player4", P6))
            # (Line 74) if (cp == 4) { CreateUnit(1, 135, "Line_Player5", P6); }
        EUDEndIf()
        if EUDIf()(cp == 4):
            DoActions(CreateUnit(1, 135, "Line_Player5", P6))
            # (Line 75) }
        EUDEndIf()
        # (Line 76) else if (Bring(cp, AtLeast, 1, 60, "Anywhere") && v.Mission1_Delay[cp] > 1)
    if EUDElseIf()(EUDSCAnd()(Bring(cp, AtLeast, 1, 60, "Anywhere"))(v.Mission1_Delay[cp] <= 1, neg=True)()):
        # (Line 77) {
        # (Line 78) s.print("\x13", ptr2s(GetTBLAddr(136)), ptr2s(v.Mission_Text[1]), v.Mission_Delay[cp], ptr2s(v.Mission_Text[2]));
        s.print("\x13", ptr2s(GetTBLAddr(136)), ptr2s(v.Mission_Text[1]), v.Mission_Delay[cp], ptr2s(v.Mission_Text[2]))
        # (Line 79) RemoveUnitAt(All, 60, "Anywhere", cp);
        # (Line 80) }
        DoActions(RemoveUnitAt(All, 60, "Anywhere", cp))
        # (Line 81) }
    EUDEndIf()
    # (Line 83) function Mission_reward(cp)

# (Line 84) {
@EUDFunc
def Mission_reward(cp):
    # (Line 85) if (v.Mission_Check[cp] == 1)
    if EUDIf()(v.Mission_Check[cp] == 1):
        # (Line 86) {
        # (Line 87) if (v.Mission_Time[cp] == 0) { Mission_reward_player(cp, 0); }
        if EUDIf()(v.Mission_Time[cp] == 0):
            Mission_reward_player(cp, 0)
            # (Line 89) if (Bring(P6, Exactly, 0, 135, "Player1") && cp == 0) { Mission_reward_player(cp , 1); }
        EUDEndIf()
        if EUDIf()(EUDSCAnd()(Bring(P6, Exactly, 0, 135, "Player1"))(cp == 0)()):
            Mission_reward_player(cp, 1)
            # (Line 90) if (Bring(P6, Exactly, 0, 135, "Player2") && cp == 0) { Mission_reward_player(cp , 1); }
        EUDEndIf()
        if EUDIf()(EUDSCAnd()(Bring(P6, Exactly, 0, 135, "Player2"))(cp == 0)()):
            Mission_reward_player(cp, 1)
            # (Line 91) if (Bring(P6, Exactly, 0, 135, "Player3") && cp == 0) { Mission_reward_player(cp , 1); }
        EUDEndIf()
        if EUDIf()(EUDSCAnd()(Bring(P6, Exactly, 0, 135, "Player3"))(cp == 0)()):
            Mission_reward_player(cp, 1)
            # (Line 92) if (Bring(P6, Exactly, 0, 135, "Player4") && cp == 0) { Mission_reward_player(cp , 1); }
        EUDEndIf()
        if EUDIf()(EUDSCAnd()(Bring(P6, Exactly, 0, 135, "Player4"))(cp == 0)()):
            Mission_reward_player(cp, 1)
            # (Line 93) if (Bring(P6, Exactly, 0, 135, "Player5") && cp == 0) { Mission_reward_player(cp , 1); }
        EUDEndIf()
        if EUDIf()(EUDSCAnd()(Bring(P6, Exactly, 0, 135, "Player5"))(cp == 0)()):
            Mission_reward_player(cp, 1)
            # (Line 94) }
        EUDEndIf()
        # (Line 95) }
    EUDEndIf()
    # (Line 97) function Mission_reward_player(cp, type)

# (Line 98) {
@EUDFunc
def Mission_reward_player(cp, type):
    # (Line 99) v.Mission_Check[cp] = 0;
    _ARRW(v.Mission_Check, cp) << (0)
    # (Line 100) switch(type)
    EUDSwitch(type)
    # (Line 101) {
    # (Line 102) case 0:
    _t1 = EUDSwitchCase()
    # (Line 103) if (cp == 0) { RemoveUnitAt(1, 135, "Player1", P6); }
    if _t1(0):
        if EUDIf()(cp == 0):
            DoActions(RemoveUnitAt(1, 135, "Player1", P6))
            # (Line 104) if (cp == 1) { RemoveUnitAt(1, 135, "Player2", P6); }
        EUDEndIf()
        if EUDIf()(cp == 1):
            DoActions(RemoveUnitAt(1, 135, "Player2", P6))
            # (Line 105) if (cp == 2) { RemoveUnitAt(1, 135, "Player3", P6); }
        EUDEndIf()
        if EUDIf()(cp == 2):
            DoActions(RemoveUnitAt(1, 135, "Player3", P6))
            # (Line 106) if (cp == 3) { RemoveUnitAt(1, 135, "Player4", P6); }
        EUDEndIf()
        if EUDIf()(cp == 3):
            DoActions(RemoveUnitAt(1, 135, "Player4", P6))
            # (Line 107) if (cp == 4) { RemoveUnitAt(1, 135, "Player5", P6); }
        EUDEndIf()
        if EUDIf()(cp == 4):
            DoActions(RemoveUnitAt(1, 135, "Player5", P6))
            # (Line 108) break;
        EUDEndIf()
        EUDBreak()
        # (Line 109) case 1:
    _t7 = EUDSwitchCase()
    # (Line 110) SetResources(cp, Add, 40, Ore);
    if _t7(1):
        # (Line 111) CreateUnit(1, 64, "MedalGacha", cp);
        DoActions(SetResources(cp, Add, 40, Ore))
        # (Line 112) s.print("\n\n\x13", ptr2s(GetTBLAddr(136)), ptr2s(v.Mission_Text[3]), "\n\n");
        DoActions(CreateUnit(1, 64, "MedalGacha", cp))
        s.print("\n\n\x13", ptr2s(GetTBLAddr(136)), ptr2s(v.Mission_Text[3]), "\n\n")
        # (Line 113) break;
        EUDBreak()
        # (Line 114) }
    # (Line 115) }
    EUDEndSwitch()
