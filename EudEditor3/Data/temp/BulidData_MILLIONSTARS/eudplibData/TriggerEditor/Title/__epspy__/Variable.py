## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) const Title_Star_1	= [32, 19, 6];
Title_Star_1 = _CGFW(lambda: [_ARR(FlattenList([32, 19, 6]))], 1)[0]
# (Line 2) const Title_Star_2 	= [11, 33, 30];
Title_Star_2 = _CGFW(lambda: [_ARR(FlattenList([11, 33, 30]))], 1)[0]
# (Line 3) const Title_Star_3 	= [8, 3, 14];
Title_Star_3 = _CGFW(lambda: [_ARR(FlattenList([8, 3, 14]))], 1)[0]
# (Line 4) const Title_Star_4	= [21, 35, 0];
Title_Star_4 = _CGFW(lambda: [_ARR(FlattenList([21, 35, 0]))], 1)[0]
# (Line 5) const Title_Star_5	= [24, 9, 20];
Title_Star_5 = _CGFW(lambda: [_ARR(FlattenList([24, 9, 20]))], 1)[0]
# (Line 6) const Title_Star_6 	= [38, 34, 5];
Title_Star_6 = _CGFW(lambda: [_ARR(FlattenList([38, 34, 5]))], 1)[0]
# (Line 7) const Title_Star_7	= [23, 18, 27];
Title_Star_7 = _CGFW(lambda: [_ARR(FlattenList([23, 18, 27]))], 1)[0]
# (Line 8) const Title_Star_8 	= [25, 17, 16];
Title_Star_8 = _CGFW(lambda: [_ARR(FlattenList([25, 17, 16]))], 1)[0]
# (Line 9) const Title_Star_9	= [31, 4, 28];
Title_Star_9 = _CGFW(lambda: [_ARR(FlattenList([31, 4, 28]))], 1)[0]
# (Line 10) const Title_Star_10	= [10, 12, 2];
Title_Star_10 = _CGFW(lambda: [_ARR(FlattenList([10, 12, 2]))], 1)[0]
# (Line 11) const Title_Star_11 	= [37, 22, 7];
Title_Star_11 = _CGFW(lambda: [_ARR(FlattenList([37, 22, 7]))], 1)[0]
# (Line 12) const Title_Star_12 	= [36, 15, 29, 26];
Title_Star_12 = _CGFW(lambda: [_ARR(FlattenList([36, 15, 29, 26]))], 1)[0]
# (Line 14) const Title_Prin_1 	= [33, 28];
Title_Prin_1 = _CGFW(lambda: [_ARR(FlattenList([33, 28]))], 1)[0]
# (Line 15) const Title_Prin_2 	= [36, 37, 27];
Title_Prin_2 = _CGFW(lambda: [_ARR(FlattenList([36, 37, 27]))], 1)[0]
# (Line 16) const Title_Prin_3 	= [35, 31, 26];
Title_Prin_3 = _CGFW(lambda: [_ARR(FlattenList([35, 31, 26]))], 1)[0]
# (Line 17) const Title_Prin_4 	= [38, 34, 32, 30, 29];
Title_Prin_4 = _CGFW(lambda: [_ARR(FlattenList([38, 34, 32, 30, 29]))], 1)[0]
# (Line 19) const Title_Fair_1 	= [18, 19];
Title_Fair_1 = _CGFW(lambda: [_ARR(FlattenList([18, 19]))], 1)[0]
# (Line 20) const Title_Fair_2 	= [15, 16, 13];
Title_Fair_2 = _CGFW(lambda: [_ARR(FlattenList([15, 16, 13]))], 1)[0]
# (Line 21) const Title_Fair_3 	= [25, 23, 22, 14];
Title_Fair_3 = _CGFW(lambda: [_ARR(FlattenList([25, 23, 22, 14]))], 1)[0]
# (Line 22) const Title_Fair_4 	= [24, 21, 20 ,17];
Title_Fair_4 = _CGFW(lambda: [_ARR(FlattenList([24, 21, 20, 17]))], 1)[0]
# (Line 24) const Title_Angel_1 	= [7 ,4];
Title_Angel_1 = _CGFW(lambda: [_ARR(FlattenList([7, 4]))], 1)[0]
# (Line 25) const Title_Angel_2 	= [8, 6, 3, 1];
Title_Angel_2 = _CGFW(lambda: [_ARR(FlattenList([8, 6, 3, 1]))], 1)[0]
# (Line 26) const Title_Angel_3 	= [10, 9, 5];
Title_Angel_3 = _CGFW(lambda: [_ARR(FlattenList([10, 9, 5]))], 1)[0]
# (Line 27) const Title_Angel_4 	= [11, 12, 2, 0];
Title_Angel_4 = _CGFW(lambda: [_ARR(FlattenList([11, 12, 2, 0]))], 1)[0]
# (Line 29) const Title_Leader_1	= [43, 40, 39];
Title_Leader_1 = _CGFW(lambda: [_ARR(FlattenList([43, 40, 39]))], 1)[0]
# (Line 30) const Title_Leader_2	= [31, 18, 5];
Title_Leader_2 = _CGFW(lambda: [_ARR(FlattenList([31, 18, 5]))], 1)[0]
# (Line 32) const Title_Flag 		=
# (Line 33) [54, 5, 100, 16, 76, 55, 44, 53, 86, 56, 48, 52, 37,
# (Line 34) 21, 80, 75, 99, 77, 74, 79, 51, 67, 23, 43, 2, 3,
# (Line 35) 63, 68, 87, 78, 66, 71, 39, 40, 19, 61, 38, 46, 17,
# (Line 36) 29, 102, 1, 28, 0, 27, 10, 103, 10, 8, 88, 70,
# (Line 37) 32, 20, 34, 11, 69];
Title_Flag = _CGFW(lambda: [_ARR(FlattenList([54, 5, 100, 16, 76, 55, 44, 53, 86, 56, 48, 52, 37, 21, 80, 75, 99, 77, 74, 79, 51, 67, 23, 43, 2, 3, 63, 68, 87, 78, 66, 71, 39, 40, 19, 61, 38, 46, 17, 29, 102, 1, 28, 0, 27, 10, 103, 10, 8, 88, 70, 32, 20, 34, 11, 69]))], 1)[0]
# (Line 39) const isTitle_Complete =
# (Line 40) [175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164,
# (Line 41) 163, 160, 159, 136,
# (Line 42) 154, 152, 151, 148,
# (Line 43) 147, 142, 140, 139,
# (Line 44) 137, 138];
isTitle_Complete = _CGFW(lambda: [_ARR(FlattenList([175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 160, 159, 136, 154, 152, 151, 148, 147, 142, 140, 139, 137, 138]))], 1)[0]
# (Line 46) const Title_Effect_Delay =
# (Line 47) [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
# (Line 48) 0, 0, 0, 0,
# (Line 49) 0, 0, 0, 0,
# (Line 50) 0, 0, 0, 0,
# (Line 51) 0, 0];
Title_Effect_Delay = _CGFW(lambda: [_ARR(FlattenList([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))], 1)[0]
# (Line 53) const Title_Db 		=
# (Line 54) [Db(u2b("\x04 [ 미보유 ]")),
# (Line 55) Db(u2b("\x04 [ \x19보유중 \x04]")),
# (Line 56) Db(u2b("\x04 채워졌습니다."))];
Title_Db = _CGFW(lambda: [_ARR(FlattenList([Db(u2b("\x04 [ 미보유 ]")), Db(u2b("\x04 [ \x19보유중 \x04]")), Db(u2b("\x04 채워졌습니다."))]))], 1)[0]
