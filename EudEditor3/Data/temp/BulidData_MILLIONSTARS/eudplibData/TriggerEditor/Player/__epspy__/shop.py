## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import getunitID as id;
import getunitID as id
# (Line 3) var shop_level = 0;
shop_level = EUDCreateVariables(1)
_IGVA([shop_level], lambda: [0])
# (Line 4) var shop_exp = 0;
shop_exp = EUDCreateVariables(1)
_IGVA([shop_exp], lambda: [0])
# (Line 5) const shop_need = [2, 4, 7, 11, 15, 19, 25, 31, 38, 45];
shop_need = _CGFW(lambda: [_ARR(FlattenList([2, 4, 7, 11, 15, 19, 25, 31, 38, 45]))], 1)[0]
# (Line 7) const s = StringBuffer();
s = _CGFW(lambda: [StringBuffer()], 1)[0]
# (Line 9) function Marge(cp);
# (Line 10) function Click_Text(cp);
# (Line 11) function Shop_Level(cp);
# (Line 12) function Kick_Unit(cp);
# (Line 13) function Jewel_Ticket(cp);
# (Line 14) function Cloth_Ticket(cp);
# (Line 15) function Special_Trainning_Ticket(cp);
# (Line 16) function Solo_Album(cp);
# (Line 17) function Shop_Trainner(cp);
# (Line 19) function Marge(cp)
# (Line 20) {
@EUDFunc
def Marge(cp):
    # (Line 21) Click_Text(cp);
    Click_Text(cp)
    # (Line 22) Shop_Level(cp);
    Shop_Level(cp)
    # (Line 23) Kick_Unit(cp);
    Kick_Unit(cp)
    # (Line 24) Jewel_Ticket(cp);
    Jewel_Ticket(cp)
    # (Line 25) Cloth_Ticket(cp);
    Cloth_Ticket(cp)
    # (Line 26) Special_Trainning_Ticket(cp);
    Special_Trainning_Ticket(cp)
    # (Line 27) Solo_Album(cp);
    Solo_Album(cp)
    # (Line 28) Shop_Trainner(cp);
    Shop_Trainner(cp)
    # (Line 29) }
    # (Line 31) function Click_Text(cp)

# (Line 32) {
@EUDFunc
def Click_Text(cp):
    # (Line 33) switch(id.Unit_ID[cp])
    EUDSwitch(id.Unit_ID[cp])
    # (Line 34) {
    # (Line 35) case 107:
    _t1 = EUDSwitchCase()
    # (Line 36) s.print("\n　　　\x07#Tip : \x04매 \x1910\x04라운드마다 \x19라이브 이벤트\x04에 참가하여 여러가지 재화를 얻을 수 있습니다.");
    if _t1(107):
        s.print("\n　　　\x07#Tip : \x04매 \x1910\x04라운드마다 \x19라이브 이벤트\x04에 참가하여 여러가지 재화를 얻을 수 있습니다.")
        # (Line 37) id.Unit_ID[cp] = 1000;
        _ARRW(id.Unit_ID, cp) << (1000)
        # (Line 38) break;
        EUDBreak()
        # (Line 39) case 115:
    _t2 = EUDSwitchCase()
    # (Line 40) s.print("\n　　　\x07#Tip : \x19상점\x04입니다. 들어가면 이것저것 살 수 있습니다.");
    if _t2(115):
        s.print("\n　　　\x07#Tip : \x19상점\x04입니다. 들어가면 이것저것 살 수 있습니다.")
        # (Line 41) id.Unit_ID[cp] = 1000;
        _ARRW(id.Unit_ID, cp) << (1000)
        # (Line 42) break;
        EUDBreak()
        # (Line 43) case 117:
    _t3 = EUDSwitchCase()
    # (Line 44) s.print("\n　　　\x07#Tip : \x04필요없는 맴버를 3명 \x08해고\x04하여 \x19앨범 티켓\x04을 얻습니다.");
    if _t3(117):
        s.print("\n　　　\x07#Tip : \x04필요없는 맴버를 3명 \x08해고\x04하여 \x19앨범 티켓\x04을 얻습니다.")
        # (Line 45) id.Unit_ID[cp] = 1000;
        _ARRW(id.Unit_ID, cp) << (1000)
        # (Line 46) break;
        EUDBreak()
        # (Line 47) case 120:
    _t4 = EUDSwitchCase()
    # (Line 48) s.print("\n　　　\x07#Tip : \x04비콘으로 들어가면 \x1F스케줄\x04로 복귀합니다.");
    if _t4(120):
        s.print("\n　　　\x07#Tip : \x04비콘으로 들어가면 \x1F스케줄\x04로 복귀합니다.")
        # (Line 49) id.Unit_ID[cp] = 1000;
        _ARRW(id.Unit_ID, cp) << (1000)
        # (Line 50) break;
        EUDBreak()
        # (Line 52) case 143:
    _t5 = EUDSwitchCase()
    # (Line 53) s.print("\n　　　\x07#Tip : \x04원하는 맴버에게 \x1F의상\x04을 선물 할 수 있습니다.");
    if _t5(143):
        s.print("\n　　　\x07#Tip : \x04원하는 맴버에게 \x1F의상\x04을 선물 할 수 있습니다.")
        # (Line 54) id.Unit_ID[cp] = 1000;
        _ARRW(id.Unit_ID, cp) << (1000)
        # (Line 55) break;
        EUDBreak()
        # (Line 58) case 108:
    _t6 = EUDSwitchCase()
    # (Line 59) s.print("\n　　　\x07#Tip : \x04랜덤한 타입의 \x19의상 티켓\x04을 구입 할 수 있습니다.");
    if _t6(108):
        s.print("\n　　　\x07#Tip : \x04랜덤한 타입의 \x19의상 티켓\x04을 구입 할 수 있습니다.")
        # (Line 60) id.Unit_ID[cp] = 1000;
        _ARRW(id.Unit_ID, cp) << (1000)
        # (Line 61) break;
        EUDBreak()
        # (Line 62) case 118:
    _t7 = EUDSwitchCase()
    # (Line 63) s.print("\n　　　\x07#Tip : \x1F플레티넘 촬영\x04을 위한 \x19티켓\x04을 구입합니다.");
    if _t7(118):
        s.print("\n　　　\x07#Tip : \x1F플레티넘 촬영\x04을 위한 \x19티켓\x04을 구입합니다.")
        # (Line 64) id.Unit_ID[cp] = 1000;
        _ARRW(id.Unit_ID, cp) << (1000)
        # (Line 65) break;
        EUDBreak()
        # (Line 66) case 124:
    _t8 = EUDSwitchCase()
    # (Line 67) s.print( "\n　　　\x07#Tip : \x04후원 등급에 따라 얻는 골드가 증가합니다. ",
    if _t8(124):
        # (Line 68) "\n　　　　　　　\x04상점 ", shop_level, " 단계", " [ ", shop_exp, "/",shop_need[shop_level], " ] \x19 + ", shop_need[shop_level] * 10, " \x04골드");
        s.print("\n　　　\x07#Tip : \x04후원 등급에 따라 얻는 골드가 증가합니다. ", "\n　　　　　　　\x04상점 ", shop_level, " 단계", " [ ", shop_exp, "/", shop_need[shop_level], " ] \x19 + ", shop_need[shop_level] * 10, " \x04골드")
        # (Line 69) id.Unit_ID[cp] = 1000;
        _ARRW(id.Unit_ID, cp) << (1000)
        # (Line 70) break;
        EUDBreak()
        # (Line 71) case 134:
    _t9 = EUDSwitchCase()
    # (Line 72) s.print("\n　　　\x07#Tip : \x04랜덤한 타입의 \x19앨범 티켓\x04을 구입 할 수 있습니다.");
    if _t9(134):
        s.print("\n　　　\x07#Tip : \x04랜덤한 타입의 \x19앨범 티켓\x04을 구입 할 수 있습니다.")
        # (Line 73) id.Unit_ID[cp] = 1000;
        _ARRW(id.Unit_ID, cp) << (1000)
        # (Line 74) break;
        EUDBreak()
        # (Line 75) case 150:
    _t10 = EUDSwitchCase()
    # (Line 76) s.print("\n　　　\x07#Tip : \x04일정시간마다 등장하는 \x1F맴버\x04를 고용할 수 있습니다.");
    if _t10(150):
        s.print("\n　　　\x07#Tip : \x04일정시간마다 등장하는 \x1F맴버\x04를 고용할 수 있습니다.")
        # (Line 77) id.Unit_ID[cp] = 1000;
        _ARRW(id.Unit_ID, cp) << (1000)
        # (Line 78) break;
        EUDBreak()
        # (Line 79) case 156:
    _t11 = EUDSwitchCase()
    # (Line 80) s.print("\n　　　\x07#Tip : \x04레슨 최대치를 높여주는 트레이너를 고용할 수 있습니다.");
    if _t11(156):
        s.print("\n　　　\x07#Tip : \x04레슨 최대치를 높여주는 트레이너를 고용할 수 있습니다.")
        # (Line 81) id.Unit_ID[cp] = 1000;
        _ARRW(id.Unit_ID, cp) << (1000)
        # (Line 82) break;
        EUDBreak()
        # (Line 83) case 162:
    _t12 = EUDSwitchCase()
    # (Line 84) s.print("\n　　　\x07#Tip : \x04랜덤한 타입의 \x19특훈 티켓\x04을 구입 할 수 있습니다.");
    if _t12(162):
        s.print("\n　　　\x07#Tip : \x04랜덤한 타입의 \x19특훈 티켓\x04을 구입 할 수 있습니다.")
        # (Line 85) id.Unit_ID[cp] = 1000;
        _ARRW(id.Unit_ID, cp) << (1000)
        # (Line 86) break;
        EUDBreak()
        # (Line 87) }
    # (Line 88) }
    EUDEndSwitch()
    # (Line 90) function Shop_Level(cp)

# (Line 91) {
@EUDFunc
def Shop_Level(cp):
    # (Line 92) if (shop_exp >= shop_need[shop_level] && shop_level < 9)
    if EUDIf()(EUDSCAnd()(shop_exp >= shop_need[shop_level])(shop_level >= 9, neg=True)()):
        # (Line 93) {
        # (Line 94) shop_level += 1;
        shop_level.__iadd__(1)
        # (Line 95) }
        # (Line 97) if (Deaths(cp,AtLeast, 2880, "Delay"))
    EUDEndIf()
    if EUDIf()(Deaths(cp, AtLeast, 2880, "Delay")):
        # (Line 98) {
        # (Line 99) SetResources(cp, Add, shop_need[shop_level] * 10, Ore);
        # (Line 100) SetDeaths(cp, Subtract, 2880, "Delay");
        DoActions(SetResources(cp, Add, shop_need[shop_level] * 10, Ore))
        # (Line 101) }
        DoActions(SetDeaths(cp, Subtract, 2880, "Delay"))
        # (Line 102) else
        # (Line 103) { SetDeaths(cp, Add, 1, "Delay"); }
    if EUDElse()():
        DoActions(SetDeaths(cp, Add, 1, "Delay"))
        # (Line 105) if (Bring(cp, AtLeast, 1, "(men)", "Shop_Donate") && Accumulate(cp, AtLeast, 3, Gas))
    EUDEndIf()
    if EUDIf()(EUDSCAnd()(Bring(cp, AtLeast, 1, "(men)", "Shop_Donate"))(Accumulate(cp, AtLeast, 3, Gas))()):
        # (Line 106) {
        # (Line 107) shop_exp += 1;
        shop_exp.__iadd__(1)
        # (Line 108) SetResources(cp, Subtract, 3, Gas);
        # (Line 109) MoveUnit(1, "(men)", cp, "Shop_Donate", "Center_Shop");
        DoActions(SetResources(cp, Subtract, 3, Gas))
        # (Line 110) s.print("\n\x13\x04상점을 후원합니다. - 3 \x0FGas\n");
        DoActions(MoveUnit(1, "(men)", cp, "Shop_Donate", "Center_Shop"))
        s.print("\n\x13\x04상점을 후원합니다. - 3 \x0FGas\n")
        # (Line 111) }
        # (Line 112) }
    EUDEndIf()
    # (Line 114) function Kick_Unit(cp)

# (Line 115) {
@EUDFunc
def Kick_Unit(cp):
    # (Line 116) if (Bring(cp, AtLeast, 3, "(men)", "lounge_kick"))
    if EUDIf()(Bring(cp, AtLeast, 3, "(men)", "lounge_kick")):
        # (Line 117) {
        # (Line 118) CreateUnit(1, 136 + dwrand() % 3, "JewelGacha", cp);
        # (Line 119) RemoveUnitAt(3, "(men)", "lounge_kick", cp);
        DoActions(CreateUnit(1, 136 + f_dwrand() % 3, "JewelGacha", cp))
        # (Line 120) s.print("\n\x13맴버 3명 해고 효과 \x19+1 \x04엘범 티켓\n");
        DoActions(RemoveUnitAt(3, "(men)", "lounge_kick", cp))
        s.print("\n\x13맴버 3명 해고 효과 \x19+1 \x04엘범 티켓\n")
        # (Line 121) }
        # (Line 122) }
    EUDEndIf()
    # (Line 124) function Jewel_Ticket(cp)

# (Line 125) {
@EUDFunc
def Jewel_Ticket(cp):
    # (Line 126) if (Accumulate(cp, AtLeast, 3, Gas) && Bring(cp, AtLeast, 1, "(men)", "Shop_JewelGacha"))
    if EUDIf()(EUDSCAnd()(Accumulate(cp, AtLeast, 3, Gas))(Bring(cp, AtLeast, 1, "(men)", "Shop_JewelGacha"))()):
        # (Line 127) {
        # (Line 128) CreateUnit(1, "Terran SCV", "MedalGacha", cp);
        # (Line 129) MoveUnit(1, "(men)", cp, "Shop_JewelGacha", "Center_Shop");
        DoActions(CreateUnit(1, "Terran SCV", "MedalGacha", cp))
        # (Line 130) SetResources(cp, Subtract, 3, Gas);
        DoActions(MoveUnit(1, "(men)", cp, "Shop_JewelGacha", "Center_Shop"))
        # (Line 131) }
        DoActions(SetResources(cp, Subtract, 3, Gas))
        # (Line 132) }
    EUDEndIf()
    # (Line 134) function Cloth_Ticket(cp)

# (Line 135) {
@EUDFunc
def Cloth_Ticket(cp):
    # (Line 137) if (Accumulate(cp, AtLeast, 3, Gas) && Bring(cp, AtLeast, 1, "(men)", "Shop_Cloth"))
    if EUDIf()(EUDSCAnd()(Accumulate(cp, AtLeast, 3, Gas))(Bring(cp, AtLeast, 1, "(men)", "Shop_Cloth"))()):
        # (Line 138) {
        # (Line 139) var random = dwrand() % 3;
        random = EUDVariable()
        random << (f_dwrand() % 3)
        # (Line 141) switch(random)
        EUDSwitch(random)
        # (Line 142) {
        # (Line 143) case 0:
        _t2 = EUDSwitchCase()
        # (Line 144) CreateUnit(1, 116, "JewelGacha", cp);
        if _t2(0):
            # (Line 145) break;
            DoActions(CreateUnit(1, 116, "JewelGacha", cp))
            EUDBreak()
            # (Line 146) case 1:
        _t3 = EUDSwitchCase()
        # (Line 147) CreateUnit(1, 122, "JewelGacha", cp);
        if _t3(1):
            # (Line 148) break;
            DoActions(CreateUnit(1, 122, "JewelGacha", cp))
            EUDBreak()
            # (Line 149) case 2:
        _t4 = EUDSwitchCase()
        # (Line 150) CreateUnit(1, 123, "JewelGacha", cp);
        if _t4(2):
            # (Line 151) break;
            DoActions(CreateUnit(1, 123, "JewelGacha", cp))
            EUDBreak()
            # (Line 152) }
        # (Line 153) MoveUnit(1, "(men)", cp, "Shop_Cloth", "Center_Shop");
        EUDEndSwitch()
        # (Line 154) SetResources(cp, Subtract, 3, Gas);
        DoActions(MoveUnit(1, "(men)", cp, "Shop_Cloth", "Center_Shop"))
        # (Line 155) }
        DoActions(SetResources(cp, Subtract, 3, Gas))
        # (Line 156) }
    EUDEndIf()
    # (Line 158) function Special_Trainning_Ticket(cp)

# (Line 159) {
@EUDFunc
def Special_Trainning_Ticket(cp):
    # (Line 160) if (Accumulate(cp, AtLeast, 5, Gas) && Bring(cp, AtLeast, 1, "(men)", "Shop_STTicket"))
    if EUDIf()(EUDSCAnd()(Accumulate(cp, AtLeast, 5, Gas))(Bring(cp, AtLeast, 1, "(men)", "Shop_STTicket"))()):
        # (Line 161) {
        # (Line 162) var random = dwrand() % 3;
        random = EUDVariable()
        random << (f_dwrand() % 3)
        # (Line 164) switch(random)
        EUDSwitch(random)
        # (Line 165) {
        # (Line 166) case 0:
        _t2 = EUDSwitchCase()
        # (Line 167) CreateUnit(1, 126, "JewelGacha", cp);
        if _t2(0):
            # (Line 168) break;
            DoActions(CreateUnit(1, 126, "JewelGacha", cp))
            EUDBreak()
            # (Line 169) case 1:
        _t3 = EUDSwitchCase()
        # (Line 170) CreateUnit(1, 127, "JewelGacha", cp);
        if _t3(1):
            # (Line 171) break;
            DoActions(CreateUnit(1, 127, "JewelGacha", cp))
            EUDBreak()
            # (Line 172) case 2:
        _t4 = EUDSwitchCase()
        # (Line 173) CreateUnit(1, 135, "JewelGacha", cp);
        if _t4(2):
            # (Line 174) break;
            DoActions(CreateUnit(1, 135, "JewelGacha", cp))
            EUDBreak()
            # (Line 175) }
        # (Line 176) MoveUnit(1, "(men)", cp, "Shop_STTicket", "Center_Shop");
        EUDEndSwitch()
        # (Line 177) SetResources(cp, Subtract, 5, Gas);
        DoActions(MoveUnit(1, "(men)", cp, "Shop_STTicket", "Center_Shop"))
        # (Line 178) }
        DoActions(SetResources(cp, Subtract, 5, Gas))
        # (Line 179) }
    EUDEndIf()
    # (Line 181) function Solo_Album(cp)

# (Line 182) {
@EUDFunc
def Solo_Album(cp):
    # (Line 183) if (Accumulate(cp, AtLeast, 3, Gas) && Bring(cp, AtLeast, 1, "(men)", "Shop_SoloAlbum"))
    if EUDIf()(EUDSCAnd()(Accumulate(cp, AtLeast, 3, Gas))(Bring(cp, AtLeast, 1, "(men)", "Shop_SoloAlbum"))()):
        # (Line 184) {
        # (Line 185) CreateUnit(1, 136 + dwrand() % 3, "JewelGacha", cp);
        # (Line 186) MoveUnit(1, "(men)", cp, "Shop_SoloAlbum", "Center_Shop");
        DoActions(CreateUnit(1, 136 + f_dwrand() % 3, "JewelGacha", cp))
        # (Line 187) SetResources(cp, Subtract, 3, Gas);
        DoActions(MoveUnit(1, "(men)", cp, "Shop_SoloAlbum", "Center_Shop"))
        # (Line 188) }
        DoActions(SetResources(cp, Subtract, 3, Gas))
        # (Line 189) }
    EUDEndIf()
    # (Line 191) function Shop_Trainner(cp)

# (Line 192) {
@EUDFunc
def Shop_Trainner(cp):
    # (Line 193) if (Accumulate(cp, AtLeast, 20, Gas) && Bring(cp, AtLeast, 1, "(men)", "Shop_Trainner") && Bring(Force1, Exactly, 0, 125, "Title"))
    if EUDIf()(EUDSCAnd()(Accumulate(cp, AtLeast, 20, Gas))(Bring(cp, AtLeast, 1, "(men)", "Shop_Trainner"))(Bring(Force1, Exactly, 0, 125, "Title"))()):
        # (Line 194) {
        # (Line 195) CreateUnit(1, 125, "Title", cp);
        # (Line 196) MoveUnit(1, "(men)", cp, "Shop_Trainner", "Center_Shop");
        DoActions(CreateUnit(1, 125, "Title", cp))
        # (Line 197) SetResources(cp, Subtract, 20, Gas);
        DoActions(MoveUnit(1, "(men)", cp, "Shop_Trainner", "Center_Shop"))
        # (Line 199) bwrite(0x58D088 + 0x21F0 * ((3) / 46) + (18) * (46 - 31 * ((3) / 46)) + ((3) % 46), 90);
        DoActions(SetResources(cp, Subtract, 20, Gas))
        f_bwrite(0x58D088 + 0x21F0 * ((3) // 46) + (18) * (46 - 31 * ((3) // 46)) + ((3) % 46), 90)
        # (Line 200) bwrite(0x58D088 + 0x21F0 * ((4) / 46) + (18) * (46 - 31 * ((4) / 46)) + ((4) % 46), 90);
        f_bwrite(0x58D088 + 0x21F0 * ((4) // 46) + (18) * (46 - 31 * ((4) // 46)) + ((4) % 46), 90)
        # (Line 201) bwrite(0x58D088 + 0x21F0 * ((5) / 46) + (18) * (46 - 31 * ((5) / 46)) + ((5) % 46), 90);
        f_bwrite(0x58D088 + 0x21F0 * ((5) // 46) + (18) * (46 - 31 * ((5) // 46)) + ((5) % 46), 90)
        # (Line 202) }
        # (Line 203) }
    EUDEndIf()
