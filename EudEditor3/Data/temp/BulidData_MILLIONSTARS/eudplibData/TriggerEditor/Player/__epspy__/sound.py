## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) const main_bgm = PVariable();					// 음악 정보
main_bgm = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 2) var random 		= 0 ;				// 랜덤
random = EUDCreateVariables(1)
_IGVA([random], lambda: [0])
# (Line 4) const  s = StringBuffer();
s = _CGFW(lambda: [StringBuffer()], 1)[0]
# (Line 6) function PlaySound(cp)
# (Line 7) {
@EUDFunc
def PlaySound(cp):
    # (Line 8) if (Deaths(cp, Exactly, 100, "event_index"))
    if EUDIf()(Deaths(cp, Exactly, 100, "event_index")):
        # (Line 9) {
        # (Line 10) random = dwrand() % 5;
        random << (f_dwrand() % 5)
        # (Line 12) if (main_bgm[cp] != 1 && random == 0)
        if EUDIf()(EUDSCAnd()(main_bgm[cp] == 1, neg=True)(random == 0)()):
            # (Line 13) {
            # (Line 14) main_bgm[cp] = 1;
            _ARRW(main_bgm, cp) << (1)
            # (Line 15) PlayWAV("main_01.ogg");
            # (Line 16) SetDeaths(cp, SetTo, 0, "event_index");
            DoActions(PlayWAV("main_01.ogg"))
            # (Line 17) }
            DoActions(SetDeaths(cp, SetTo, 0, "event_index"))
            # (Line 18) if (main_bgm[cp] != 2 && random == 1)
        EUDEndIf()
        if EUDIf()(EUDSCAnd()(main_bgm[cp] == 2, neg=True)(random == 1)()):
            # (Line 19) {
            # (Line 20) main_bgm[cp] = 2;
            _ARRW(main_bgm, cp) << (2)
            # (Line 21) PlayWAV("main_02.ogg");
            # (Line 22) SetDeaths(cp, SetTo, 0, "event_index");
            DoActions(PlayWAV("main_02.ogg"))
            # (Line 23) }
            DoActions(SetDeaths(cp, SetTo, 0, "event_index"))
            # (Line 24) if (main_bgm[cp] != 3 && random == 2)
        EUDEndIf()
        if EUDIf()(EUDSCAnd()(main_bgm[cp] == 3, neg=True)(random == 2)()):
            # (Line 25) {
            # (Line 26) main_bgm[cp] = 3;
            _ARRW(main_bgm, cp) << (3)
            # (Line 27) PlayWAV("main_03.ogg");
            # (Line 28) SetDeaths(cp, SetTo, 0, "event_index");
            DoActions(PlayWAV("main_03.ogg"))
            # (Line 29) }
            DoActions(SetDeaths(cp, SetTo, 0, "event_index"))
            # (Line 30) if (main_bgm[cp] != 4 && random == 3)
        EUDEndIf()
        if EUDIf()(EUDSCAnd()(main_bgm[cp] == 4, neg=True)(random == 3)()):
            # (Line 31) {
            # (Line 32) main_bgm[cp] = 4;
            _ARRW(main_bgm, cp) << (4)
            # (Line 33) PlayWAV("main_04.ogg");
            # (Line 34) SetDeaths(cp, SetTo, 0, "event_index");
            DoActions(PlayWAV("main_04.ogg"))
            # (Line 35) }
            DoActions(SetDeaths(cp, SetTo, 0, "event_index"))
            # (Line 36) if (main_bgm[cp] != 5 && random == 4)
        EUDEndIf()
        if EUDIf()(EUDSCAnd()(main_bgm[cp] == 5, neg=True)(random == 4)()):
            # (Line 37) {
            # (Line 38) main_bgm[cp] = 5;
            _ARRW(main_bgm, cp) << (5)
            # (Line 39) PlayWAV("main_05.ogg");
            # (Line 40) SetDeaths(cp, SetTo, 0, "event_index");
            DoActions(PlayWAV("main_05.ogg"))
            # (Line 41) }
            DoActions(SetDeaths(cp, SetTo, 0, "event_index"))
            # (Line 42) }
        EUDEndIf()
        # (Line 43) if (Deaths(cp, Exactly, 99, "event_index"))
    EUDEndIf()
    if EUDIf()(Deaths(cp, Exactly, 99, "event_index")):
        # (Line 44) {
        # (Line 45) PlayWAV("event_00.ogg");
        # (Line 46) SetDeaths(cp, SetTo, 0, "event_index");
        DoActions(PlayWAV("event_00.ogg"))
        # (Line 47) }
        DoActions(SetDeaths(cp, SetTo, 0, "event_index"))
        # (Line 48) }
    EUDEndIf()
