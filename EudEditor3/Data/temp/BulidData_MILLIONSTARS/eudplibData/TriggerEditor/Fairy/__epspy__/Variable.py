## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) const Unit_ID				= [21, 80, 75, 99, 77, 74, 79, 51, 67, 23, 43, 2, 3];		// 유닛 ID
Unit_ID = _CGFW(lambda: [_ARR(FlattenList([21, 80, 75, 99, 77, 74, 79, 51, 67, 23, 43, 2, 3]))], 1)[0]
# (Line 4) const Unit_AtkID			= [18, 76, 85, 112, 65, 86, 69, 37, 68, 12, 48, 4, 8];		// 무기 ID
Unit_AtkID = _CGFW(lambda: [_ARR(FlattenList([18, 76, 85, 112, 65, 86, 69, 37, 68, 12, 48, 4, 8]))], 1)[0]
# (Line 5) const Unit_Atk				= [40, 40, 40, 40, 36, 36, 36, 36, 32, 32, 32, 32, 32];		// 공격력
Unit_Atk = _CGFW(lambda: [_ARR(FlattenList([40, 40, 40, 40, 36, 36, 36, 36, 32, 32, 32, 32, 32]))], 1)[0]
# (Line 6) const Unit_Atkbouns			= [4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2];						// 공격력 증가량
Unit_Atkbouns = _CGFW(lambda: [_ARR(FlattenList([4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2]))], 1)[0]
# (Line 7) const Unit_Atkspeed			= [24, 24, 24, 24, 28, 28, 28, 28, 32, 32, 32, 32, 32];		// 공격 속도
Unit_Atkspeed = _CGFW(lambda: [_ARR(FlattenList([24, 24, 24, 24, 28, 28, 28, 28, 32, 32, 32, 32, 32]))], 1)[0]
# (Line 8) const Unit_Atktype			= [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2];						// 공격 타입
Unit_Atktype = _CGFW(lambda: [_ARR(FlattenList([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]))], 1)[0]
# (Line 9) const Unit_AtkExplosion		= [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];						// 공격 스플 o,x
Unit_AtkExplosion = _CGFW(lambda: [_ARR(FlattenList([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))], 1)[0]
# (Line 10) const Unit_Atksplash			= [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];						// 공격 스플 범위
Unit_Atksplash = _CGFW(lambda: [_ARR(FlattenList([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))], 1)[0]
# (Line 12) const Unit_AtkPercent		= [192, 256, 128];									// 공격 %
Unit_AtkPercent = _CGFW(lambda: [_ARR(FlattenList([192, 256, 128]))], 1)[0]
# (Line 13) const Unit_AtkPercentFlag	= [0, 0, 0, 0];											// 공격 % Flag
Unit_AtkPercentFlag = _CGFW(lambda: [_ARR(FlattenList([0, 0, 0, 0]))], 1)[0]
# (Line 16) const Base_Atk				= [40, 40, 40, 40, 36, 36, 36, 36, 32, 32, 32, 32, 32];	 	// 공격력
Base_Atk = _CGFW(lambda: [_ARR(FlattenList([40, 40, 40, 40, 36, 36, 36, 36, 32, 32, 32, 32, 32]))], 1)[0]
# (Line 17) const Base_Atkspeed		= [24, 24, 24, 24, 28, 28, 28, 28, 32, 32, 32, 32, 32];		// 공격 속도
Base_Atkspeed = _CGFW(lambda: [_ARR(FlattenList([24, 24, 24, 24, 28, 28, 28, 28, 32, 32, 32, 32, 32]))], 1)[0]
# (Line 18) const Base_AtkPercent		= [192, 256, 128];									// 공격 %
Base_AtkPercent = _CGFW(lambda: [_ARR(FlattenList([192, 256, 128]))], 1)[0]
# (Line 20) const Dear_Level			= EUDArray(13);
Dear_Level = _CGFW(lambda: [EUDArray(13)], 1)[0]
# (Line 21) const Dear_Now				= EUDArray(13);
Dear_Now = _CGFW(lambda: [EUDArray(13)], 1)[0]
# (Line 22) const Dear_Need			= [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000];
Dear_Need = _CGFW(lambda: [_ARR(FlattenList([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]))], 1)[0]
# (Line 23) const Dear_Ablity			= [0, 1, 0, 0, 2, 0, 1, 0, 2, 2, 2, 1, 2];
Dear_Ablity = _CGFW(lambda: [_ARR(FlattenList([0, 1, 0, 0, 2, 0, 1, 0, 2, 2, 2, 1, 2]))], 1)[0]
# (Line 24) const Dear_Multiply			= [90, 4, 90, 90, 15, 75, 3, 75, 10, 10, 10, 2, 10];
Dear_Multiply = _CGFW(lambda: [_ARR(FlattenList([90, 4, 90, 90, 15, 75, 3, 75, 10, 10, 10, 2, 10]))], 1)[0]
# (Line 26) const Dear_Text 			=
# (Line 27) [Db(u2b("불안도 희망도 가슴에 품고")),
# (Line 28) Db(u2b("나의 소중한 곳")),
# (Line 29) Db(u2b("숨겨진 부드러움")),
# (Line 30) Db(u2b("닿아라, 이 마음")),
# (Line 31) Db(u2b("Keep on groovin!")),
# (Line 32) Db(u2b("모두 함께라면")),
# (Line 33) Db(u2b("불타는 영혼")),
# (Line 34) Db(u2b("흔들리는 성모의 마음")),
# (Line 35) Db(u2b("프라이드 오브 섹시")),
# (Line 36) Db(u2b("넘치는 아트 정신")),
# (Line 37) Db(u2b("활기차게 날려버리자!")),
# (Line 38) Db(u2b("어떤 셀럽의 일상")),
# (Line 39) Db(u2b("Feel me!"))];
Dear_Text = _CGFW(lambda: [_ARR(FlattenList([Db(u2b("불안도 희망도 가슴에 품고")), Db(u2b("나의 소중한 곳")), Db(u2b("숨겨진 부드러움")), Db(u2b("닿아라, 이 마음")), Db(u2b("Keep on groovin!")), Db(u2b("모두 함께라면")), Db(u2b("불타는 영혼")), Db(u2b("흔들리는 성모의 마음")), Db(u2b("프라이드 오브 섹시")), Db(u2b("넘치는 아트 정신")), Db(u2b("활기차게 날려버리자!")), Db(u2b("어떤 셀럽의 일상")), Db(u2b("Feel me!"))]))], 1)[0]
# (Line 41) const Dear_SubText			=
# (Line 42) [Db(u2b("기본 공격력이")),
# (Line 43) Db(u2b("범위공격 범위가")),
# (Line 44) Db(u2b("공격속도가"))];
Dear_SubText = _CGFW(lambda: [_ARR(FlattenList([Db(u2b("기본 공격력이")), Db(u2b("범위공격 범위가")), Db(u2b("공격속도가"))]))], 1)[0]
# (Line 46) const Dear_EndText 			=
# (Line 47) [Db(u2b("% \x04증가합니다.")),
# (Line 48) Db(u2b(" \x04증가합니다.")),
# (Line 49) Db(u2b("% \x04증가합니다."))];
Dear_EndText = _CGFW(lambda: [_ARR(FlattenList([Db(u2b("% \x04증가합니다.")), Db(u2b(" \x04증가합니다.")), Db(u2b("% \x04증가합니다."))]))], 1)[0]
# (Line 51) const Album_Level 		= EUDArray(13);
Album_Level = _CGFW(lambda: [EUDArray(13)], 1)[0]
# (Line 52) const Album_Now 		= EUDArray(13);
Album_Now = _CGFW(lambda: [EUDArray(13)], 1)[0]
# (Line 53) const Album_Delay		= EUDArray(13);
Album_Delay = _CGFW(lambda: [EUDArray(13)], 1)[0]
# (Line 54) const Album_EffectTime	= EUDArray(13);
Album_EffectTime = _CGFW(lambda: [EUDArray(13)], 1)[0]
# (Line 55) const Album_Need 		= [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
Album_Need = _CGFW(lambda: [_ARR(FlattenList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))], 1)[0]
# (Line 56) const Album_Ablity		= [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
Album_Ablity = _CGFW(lambda: [_ARR(FlattenList([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))], 1)[0]
# (Line 57) const Album_Multiply	= [5, 20, 60, 50, 2, 1, 2, 20, 1, 10, 20, 5, 2];
Album_Multiply = _CGFW(lambda: [_ARR(FlattenList([5, 20, 60, 50, 2, 1, 2, 20, 1, 10, 20, 5, 2]))], 1)[0]
# (Line 59) const Album_Text		=
# (Line 60) [Db(u2b("한결같이 올곧게")),
# (Line 61) Db(u2b("귀여운 미소")),
# (Line 62) Db(u2b("메이드의 일")),
# (Line 63) Db(u2b("러브인가요?")),
# (Line 64) Db(u2b("프레셔스 프렌즈")),
# (Line 65) Db(u2b("가슴에 품은 마음")),
# (Line 66) Db(u2b("로킹 소울")),
# (Line 67) Db(u2b("천공신앙")),
# (Line 68) Db(u2b("기쁨, 함께 나눕시다")),
# (Line 69) Db(u2b("하이 인스피레이션")),
# (Line 70) Db(u2b("직구 하트")),
# (Line 71) Db(u2b("우아한 연출")),
# (Line 72) Db(u2b("이것이 댄스의 힘이다!"))];
Album_Text = _CGFW(lambda: [_ARR(FlattenList([Db(u2b("한결같이 올곧게")), Db(u2b("귀여운 미소")), Db(u2b("메이드의 일")), Db(u2b("러브인가요?")), Db(u2b("프레셔스 프렌즈")), Db(u2b("가슴에 품은 마음")), Db(u2b("로킹 소울")), Db(u2b("천공신앙")), Db(u2b("기쁨, 함께 나눕시다")), Db(u2b("하이 인스피레이션")), Db(u2b("직구 하트")), Db(u2b("우아한 연출")), Db(u2b("이것이 댄스의 힘이다!"))]))], 1)[0]
# (Line 74) const Album_SubText			=
# (Line 75) [Db(u2b("페어리 타입의 보컬 어필이")),
# (Line 76) Db(u2b("60초마다 10초간 공격속도가")),
# (Line 77) Db(u2b("60초마다")),
# (Line 78) Db(u2b("60초마다 5초간 공격력이")),
# (Line 79) Db(u2b("페어리 타입의 모든 어필이")),
# (Line 80) Db(u2b("페어리 타입의 비주얼 어필이")),
# (Line 81) Db(u2b("보컬 스케줄의 체력이")),
# (Line 82) Db(u2b("")),
# (Line 83) Db(u2b("페어리 타입의 높은 유닛이 뜰 확률이")),
# (Line 84) Db(u2b("60초마다 10초간 공격속도가")),
# (Line 85) Db(u2b("60초마다 5초간 공격력이")),
# (Line 86) Db(u2b("페어리 타입의 이벤트 점수가")),
# (Line 87) Db(u2b("페어리 타입의 댄스 어필이"))];
Album_SubText = _CGFW(lambda: [_ARR(FlattenList([Db(u2b("페어리 타입의 보컬 어필이")), Db(u2b("60초마다 10초간 공격속도가")), Db(u2b("60초마다")), Db(u2b("60초마다 5초간 공격력이")), Db(u2b("페어리 타입의 모든 어필이")), Db(u2b("페어리 타입의 비주얼 어필이")), Db(u2b("보컬 스케줄의 체력이")), Db(u2b("")), Db(u2b("페어리 타입의 높은 유닛이 뜰 확률이")), Db(u2b("60초마다 10초간 공격속도가")), Db(u2b("60초마다 5초간 공격력이")), Db(u2b("페어리 타입의 이벤트 점수가")), Db(u2b("페어리 타입의 댄스 어필이"))]))], 1)[0]
# (Line 89) const Album_EndText 			=
# (Line 90) [Db(u2b("% \x04증가합니다.")),
# (Line 91) Db(u2b("% \x04증가합니다.")),
# (Line 92) Db(u2b("골드\x04를 얻습니다.")),
# (Line 93) Db(u2b("% \x04증가합니다.")),
# (Line 94) Db(u2b("% \x04증가합니다.")),
# (Line 95) Db(u2b("% \x04증가합니다.")),
# (Line 96) Db(u2b("% \x04감소합니다.")),
# (Line 97) Db(u2b("\x04초마다 비쥬얼 스케줄의 체력을 1%로 만듭니다.")),
# (Line 98) Db(u2b("% \x04증가합니다.")),
# (Line 99) Db(u2b("% \x04증가합니다.")),
# (Line 100) Db(u2b("% \x04증가합니다.")),
# (Line 101) Db(u2b("% \x04증가합니다.")),
# (Line 102) Db(u2b("% \x04증가합니다."))];
Album_EndText = _CGFW(lambda: [_ARR(FlattenList([Db(u2b("% \x04증가합니다.")), Db(u2b("% \x04증가합니다.")), Db(u2b("골드\x04를 얻습니다.")), Db(u2b("% \x04증가합니다.")), Db(u2b("% \x04증가합니다.")), Db(u2b("% \x04증가합니다.")), Db(u2b("% \x04감소합니다.")), Db(u2b("\x04초마다 비쥬얼 스케줄의 체력을 1%로 만듭니다.")), Db(u2b("% \x04증가합니다.")), Db(u2b("% \x04증가합니다.")), Db(u2b("% \x04증가합니다.")), Db(u2b("% \x04증가합니다.")), Db(u2b("% \x04증가합니다."))]))], 1)[0]
