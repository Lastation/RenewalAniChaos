## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Fairy.Variable as v;
from Fairy import Variable as v
# (Line 2) import Fairy.Effect as e;
from Fairy import Effect as e
# (Line 3) import Fairy.Main as m;
from Fairy import Main as m
# (Line 5) function Init_ButtonText();
# (Line 6) function Update_ButtomText();
# (Line 8) function Set_Dear_ButtonText(id);
# (Line 9) function Set_Album_ButtonText(id);
# (Line 11) function Add_DearNow(id, value);
# (Line 12) function Add_AlbumNow(id, value);
# (Line 14) function Set_DearLevel(id);
# (Line 15) function Set_AlbumLevel(id);
# (Line 17) function Init_ButtonText()
# (Line 18) {
@EUDFunc
def Init_ButtonText():
    # (Line 19) for (var i = 0; i < 13; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 13, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 20) {
        # (Line 21) Set_Dear_ButtonText(i);
        Set_Dear_ButtonText(i)
        # (Line 22) Set_Album_ButtonText(i);
        Set_Album_ButtonText(i)
        # (Line 23) }
        # (Line 24) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 26) function Update_ButtomText()

# (Line 27) {
@EUDFunc
def Update_ButtomText():
    # (Line 28) for (var i = 0; i < 13; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 13, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 29) {
        # (Line 30) Add_DearNow(i, 100);
        Add_DearNow(i, 100)
        # (Line 31) Add_AlbumNow(i, 1);
        Add_AlbumNow(i, 1)
        # (Line 32) }
        # (Line 33) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 35) function Set_Dear_ButtonText(id)

# (Line 36) {
@EUDFunc
def Set_Dear_ButtonText(id):
    # (Line 37) if (v.Dear_Level[id] < 10)
    if EUDIf()(v.Dear_Level[id] >= 10, neg=True):
        # (Line 38) {
        # (Line 39) settbl(1074 + id * 2, 10, v.Dear_Now[id], "/", v.Dear_Need[v.Dear_Level[id]],
        # (Line 40) "\n\x1C", ptr2s(v.Dear_Text[id])," Lv.", v.Dear_Level[id],
        # (Line 41) "\n\x04", ptr2s(v.Dear_SubText[v.Dear_Ablity[id]]), " \x08", v.Dear_Level[id] * v.Dear_Multiply[id], ptr2s(v.Dear_EndText[v.Dear_Ablity[id]]));
        f_settbl(1074 + id * 2, 10, v.Dear_Now[id], "/", v.Dear_Need[v.Dear_Level[id]], "\n\x1C", ptr2s(v.Dear_Text[id]), " Lv.", v.Dear_Level[id], "\n\x04", ptr2s(v.Dear_SubText[v.Dear_Ablity[id]]), " \x08", v.Dear_Level[id] * v.Dear_Multiply[id], ptr2s(v.Dear_EndText[v.Dear_Ablity[id]]))
        # (Line 42) }
        # (Line 43) else
        # (Line 44) {
    if EUDElse()():
        # (Line 45) settbl(1074 + id * 2, 10, v.Dear_Now[id],
        # (Line 46) "\n\x1C", ptr2s(v.Dear_Text[id])," Lv. Max",
        # (Line 47) "\n\x04", ptr2s(v.Dear_SubText[v.Dear_Ablity[id]]), " \x08", v.Dear_Level[id] * v.Dear_Multiply[id], ptr2s(v.Dear_EndText[v.Dear_Ablity[id]]));
        f_settbl(1074 + id * 2, 10, v.Dear_Now[id], "\n\x1C", ptr2s(v.Dear_Text[id]), " Lv. Max", "\n\x04", ptr2s(v.Dear_SubText[v.Dear_Ablity[id]]), " \x08", v.Dear_Level[id] * v.Dear_Multiply[id], ptr2s(v.Dear_EndText[v.Dear_Ablity[id]]))
        # (Line 48) }
        # (Line 49) }
    EUDEndIf()
    # (Line 51) function Set_Album_ButtonText(id)

# (Line 52) {
@EUDFunc
def Set_Album_ButtonText(id):
    # (Line 53) if (v.Album_Level[id] < 10)
    if EUDIf()(v.Album_Level[id] >= 10, neg=True):
        # (Line 54) {
        # (Line 55) if (id != 7)
        if EUDIf()(id == 7, neg=True):
            # (Line 56) {
            # (Line 57) settbl(1075 + id * 2, 8, v.Album_Now[id], "/", v.Album_Need[v.Album_Level[id]],
            # (Line 58) "\n\x1C", ptr2s(v.Album_Text[id])," Lv.", v.Album_Level[id],
            # (Line 59) "\n\x04", ptr2s(v.Album_SubText[id]), " \x08", v.Album_Level[id] * v.Album_Multiply[id], ptr2s(v.Album_EndText[v.Album_Ablity[id]]));
            f_settbl(1075 + id * 2, 8, v.Album_Now[id], "/", v.Album_Need[v.Album_Level[id]], "\n\x1C", ptr2s(v.Album_Text[id]), " Lv.", v.Album_Level[id], "\n\x04", ptr2s(v.Album_SubText[id]), " \x08", v.Album_Level[id] * v.Album_Multiply[id], ptr2s(v.Album_EndText[v.Album_Ablity[id]]))
            # (Line 60) }
            # (Line 61) else
            # (Line 62) {
        if EUDElse()():
            # (Line 63) settbl(1075 + id * 2, 8, v.Album_Now[id], "/", v.Album_Need[v.Album_Level[id]],
            # (Line 64) "\n\x1C", ptr2s(v.Album_Text[id])," Lv.", v.Album_Level[id],
            # (Line 65) "\n\x08", v.Album_Multiply[id] -  v.Album_Level[id], ptr2s(v.Album_EndText[v.Album_Ablity[id]]));
            f_settbl(1075 + id * 2, 8, v.Album_Now[id], "/", v.Album_Need[v.Album_Level[id]], "\n\x1C", ptr2s(v.Album_Text[id]), " Lv.", v.Album_Level[id], "\n\x08", v.Album_Multiply[id] - v.Album_Level[id], ptr2s(v.Album_EndText[v.Album_Ablity[id]]))
            # (Line 66) }
            # (Line 67) }
        EUDEndIf()
        # (Line 68) else
        # (Line 69) {
    if EUDElse()():
        # (Line 70) if (id != 7)
        if EUDIf()(id == 7, neg=True):
            # (Line 71) {
            # (Line 72) settbl(1075 + id * 2, 8, v.Album_Now[id],
            # (Line 73) "\n\x1C", ptr2s(v.Album_Text[id])," Lv. Max",
            # (Line 74) "\n\x04", ptr2s(v.Album_SubText[id]), " \x08", v.Album_Level[id] * v.Album_Multiply[id], ptr2s(v.Album_EndText[v.Album_Ablity[id]]));
            f_settbl(1075 + id * 2, 8, v.Album_Now[id], "\n\x1C", ptr2s(v.Album_Text[id]), " Lv. Max", "\n\x04", ptr2s(v.Album_SubText[id]), " \x08", v.Album_Level[id] * v.Album_Multiply[id], ptr2s(v.Album_EndText[v.Album_Ablity[id]]))
            # (Line 75) }
            # (Line 76) else
            # (Line 77) {
        if EUDElse()():
            # (Line 78) settbl(1075 + id * 2, 8, v.Album_Now[id],
            # (Line 79) "\n\x1C", ptr2s(v.Album_Text[id])," Lv. Max",
            # (Line 80) "\n\x08", v.Album_Multiply[id] -  v.Album_Level[id], ptr2s(v.Album_EndText[v.Album_Ablity[id]]));
            f_settbl(1075 + id * 2, 8, v.Album_Now[id], "\n\x1C", ptr2s(v.Album_Text[id]), " Lv. Max", "\n\x08", v.Album_Multiply[id] - v.Album_Level[id], ptr2s(v.Album_EndText[v.Album_Ablity[id]]))
            # (Line 81) }
            # (Line 82) }
        EUDEndIf()
        # (Line 83) }
    EUDEndIf()
    # (Line 85) function Add_DearNow(id, value)

# (Line 86) {
@EUDFunc
def Add_DearNow(id, value):
    # (Line 87) v.Dear_Now[id] += value;
    _ARRW(v.Dear_Now, id).__iadd__(value)
    # (Line 88) Set_DearLevel(id);
    Set_DearLevel(id)
    # (Line 89) }
    # (Line 91) function Add_AlbumNow(id, value)

# (Line 92) {
@EUDFunc
def Add_AlbumNow(id, value):
    # (Line 93) v.Album_Now[id] += value;
    _ARRW(v.Album_Now, id).__iadd__(value)
    # (Line 94) Set_AlbumLevel(id);
    Set_AlbumLevel(id)
    # (Line 95) }
    # (Line 97) function Set_DearLevel(id)

# (Line 98) {
@EUDFunc
def Set_DearLevel(id):
    # (Line 99) if (v.Dear_Now[id] >= v.Dear_Need[v.Dear_Level[id]] && v.Dear_Level[id] < 10)
    if EUDIf()(EUDSCAnd()(v.Dear_Now[id] >= v.Dear_Need[v.Dear_Level[id]])(v.Dear_Level[id] >= 10, neg=True)()):
        # (Line 100) {
        # (Line 101) v.Dear_Level[id] += 1;
        _ARRW(v.Dear_Level, id).__iadd__(1)
        # (Line 102) Set_Dear_ButtonText(id);
        Set_Dear_ButtonText(id)
        # (Line 103) e.Effect_Dear(id);
        e.Effect_Dear(id)
        # (Line 104) }
        # (Line 105) else
        # (Line 106) { Set_Dear_ButtonText(id); }
    if EUDElse()():
        Set_Dear_ButtonText(id)
        # (Line 107) }
    EUDEndIf()
    # (Line 109) function Set_AlbumLevel(id)

# (Line 110) {
@EUDFunc
def Set_AlbumLevel(id):
    # (Line 111) var value;
    value = EUDVariable()
    # (Line 113) if (v.Album_Now[id] >= v.Album_Need[v.Album_Level[id]] && v.Album_Level[id] < 10)
    if EUDIf()(EUDSCAnd()(v.Album_Now[id] >= v.Album_Need[v.Album_Level[id]])(v.Album_Level[id] >= 10, neg=True)()):
        # (Line 114) {
        # (Line 115) v.Album_Level[id] += 1;
        _ARRW(v.Album_Level, id).__iadd__(1)
        # (Line 116) Set_Album_ButtonText(id);
        Set_Album_ButtonText(id)
        # (Line 117) switch(v.Album_Ablity[id])
        EUDSwitch(v.Album_Ablity[id])
        # (Line 118) {
        # (Line 119) case 12:
        _t2 = EUDSwitchCase()
        # (Line 120) value = ((v.Album_Multiply[12] * v.Album_Level[12] + v.Album_Multiply[5] * v.Album_Level[5]) * 256 + 256) / 100 + v.Base_AtkPercent[0];
        if _t2(12):
            value << (((v.Album_Multiply[12] * v.Album_Level[12] + v.Album_Multiply[5] * v.Album_Level[5]) * 256 + 256) // 100 + v.Base_AtkPercent[0])
            # (Line 121) m.Set_AtkPercent(0, value);
            m.Set_AtkPercent(0, value)
            # (Line 122) m.Update_PercentText();
            m.Update_PercentText()
            # (Line 123) break;
            EUDBreak()
            # (Line 124) case 0:
        _t3 = EUDSwitchCase()
        # (Line 125) value = ((v.Album_Multiply[0] * v.Album_Level[0] + v.Album_Multiply[5] * v.Album_Level[5]) * 256 + 256) / 100 + v.Base_AtkPercent[1];
        if _t3(0):
            value << (((v.Album_Multiply[0] * v.Album_Level[0] + v.Album_Multiply[5] * v.Album_Level[5]) * 256 + 256) // 100 + v.Base_AtkPercent[1])
            # (Line 126) m.Set_AtkPercent(1, value);
            m.Set_AtkPercent(1, value)
            # (Line 127) m.Update_PercentText();
            m.Update_PercentText()
            # (Line 128) break;
            EUDBreak()
            # (Line 129) case 4:
        _t4 = EUDSwitchCase()
        # (Line 130) value = ((v.Album_Multiply[4] * v.Album_Level[4] + v.Album_Multiply[5] * v.Album_Level[5]) * 256 + 256) / 100 + v.Base_AtkPercent[2];
        if _t4(4):
            value << (((v.Album_Multiply[4] * v.Album_Level[4] + v.Album_Multiply[5] * v.Album_Level[5]) * 256 + 256) // 100 + v.Base_AtkPercent[2])
            # (Line 131) m.Set_AtkPercent(2, value);
            m.Set_AtkPercent(2, value)
            # (Line 132) m.Update_PercentText();
            m.Update_PercentText()
            # (Line 133) break;
            EUDBreak()
            # (Line 134) case 5:
        _t5 = EUDSwitchCase()
        # (Line 135) value = ((v.Album_Multiply[12] * v.Album_Level[12] + v.Album_Multiply[5] * v.Album_Level[5]) * 256 + 256) / 100 + v.Base_AtkPercent[0];
        if _t5(5):
            value << (((v.Album_Multiply[12] * v.Album_Level[12] + v.Album_Multiply[5] * v.Album_Level[5]) * 256 + 256) // 100 + v.Base_AtkPercent[0])
            # (Line 136) m.Set_AtkPercent(0, value);
            m.Set_AtkPercent(0, value)
            # (Line 137) value = ((v.Album_Multiply[0] * v.Album_Level[0] + v.Album_Multiply[5] * v.Album_Level[5]) * 256 + 256) / 100 + v.Base_AtkPercent[1];
            value << (((v.Album_Multiply[0] * v.Album_Level[0] + v.Album_Multiply[5] * v.Album_Level[5]) * 256 + 256) // 100 + v.Base_AtkPercent[1])
            # (Line 138) m.Set_AtkPercent(1, value);
            m.Set_AtkPercent(1, value)
            # (Line 139) value = ((v.Album_Multiply[4] * v.Album_Level[4] + v.Album_Multiply[5] * v.Album_Level[5]) * 256 + 256) / 100 + v.Base_AtkPercent[2];
            value << (((v.Album_Multiply[4] * v.Album_Level[4] + v.Album_Multiply[5] * v.Album_Level[5]) * 256 + 256) // 100 + v.Base_AtkPercent[2])
            # (Line 140) m.Set_AtkPercent(2, value);
            m.Set_AtkPercent(2, value)
            # (Line 141) m.Update_PercentText();
            m.Update_PercentText()
            # (Line 142) break;
            EUDBreak()
            # (Line 143) }
        # (Line 144) }
        EUDEndSwitch()
        # (Line 145) else
        # (Line 146) { Set_Album_ButtonText(id); }
    if EUDElse()():
        Set_Album_ButtonText(id)
        # (Line 147) }
    EUDEndIf()
