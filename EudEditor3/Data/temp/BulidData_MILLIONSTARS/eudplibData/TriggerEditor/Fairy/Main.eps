import Fairy.Variable as v;
import Fairy.ButtonText as bt;
import Fairy.Effect as et;
import Weapon as w;

import Title.Effect as te;

function Init();
function FixedUpdate();

function Init_Weapon();

function Update_AtkPercent();
function Set_AtkPercent(type, value);

function Update_PercentText();
function Update_AtkText(id);

function Test_Mode();

function Init()
{
	bt.Init_ButtonText();
	et.Init_Effect();
	
	Init_Weapon();
	
	Set_AtkPercent(0, v.Base_AtkPercent[0]);
	Set_AtkPercent(1, v.Base_AtkPercent[1]);
	Set_AtkPercent(2, v.Base_AtkPercent[2]);
	Update_PercentText();
	
	for (var i = 0; i < 13; i++)
	{
		Update_AtkText(i);
	}
}

function FixedUpdate()
{
	et.Update_Effect();
	Update_AtkPercent();
}

function Test()
{
	bt.Update_ButtomText();
}

function Init_Weapon()
{
	for (var i = 0; i < 13; i++)
	{
		w.Set_Rank(v.Unit_ID[i], v.Unit_Rank[i]);
		
		w.Set_Label(v.Unit_AtkID[i], 242 + i);
		w.Set_Atk(v.Unit_AtkID[i], v.Unit_Atk[i]);
		w.Set_AtkBouns(v.Unit_AtkID[i], v.Unit_Atkbouns[i]);
		w.Set_AtkSpeed(v.Unit_AtkID[i], v.Unit_Atkspeed[i]);
		w.Set_AtkType(v.Unit_AtkID[i], v.Unit_Atktype[i]);
		w.Set_AtkExplosion(v.Unit_AtkID[i], v.Unit_AtkExplosion[i]);
		w.Set_AtkSplash(v.Unit_AtkID[i], v.Unit_Atksplash[i]);
		
		w.Set_AtkRange(v.Unit_AtkID[i], v.Unit_AtkRange[i]);
		w.Set_UnitRange(v.Unit_ID[i], v.Unit_AtkRange[i]);
	}
}

function Update_AtkPercent()
{
	var value;
	
	var Da = 12;
	var Vo = 0;
	var Vi = 4;
	var All = 5;
	
	switch(v.Unit_AtkPercentFlag[0])
	{
	case 0:
		if (Bring(Force1, AtLeast, 1, v.Unit_ID[Da], "Anywhere"))
		{
			if (Bring(Force1, Exactly, 0, v.Unit_ID[All], "Anywhere"))
			{ value = ((v.Album_Multiply[Da] * v.Album_Level[Da]) * 256 + 256) / 100 + v.Base_AtkPercent[0]; }
			else
			{ value = ((v.Album_Multiply[Da] * v.Album_Level[Da] + v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) / 100 + v.Base_AtkPercent[0]; }
			Set_AtkPercent(0, value);
			Update_PercentText();
			v.Unit_AtkPercentFlag[0] = 1;
		}
		break;
	case 1:
		if (Bring(Force1, Exactly, 0, v.Unit_ID[Da], "Anywhere"))
		{
			if (Bring(Force1, Exactly, 0, v.Unit_ID[All], "Anywhere"))
			{ value = v.Base_AtkPercent[0]; }
			else
			{ value = ((v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) / 100 + v.Base_AtkPercent[0]; }
			Set_AtkPercent(0, value);
			Update_PercentText();
			v.Unit_AtkPercentFlag[0] = 0;
		}
	}
	switch(v.Unit_AtkPercentFlag[1])
	{
	case 0:
		if (Bring(Force1, AtLeast, 1, v.Unit_ID[Vo], "Anywhere"))
		{
			if (Bring(Force1, Exactly, 0, v.Unit_ID[All], "Anywhere"))
			{ value = ((v.Album_Multiply[Vo] * v.Album_Level[Vo]) * 256 + 256) / 100 + v.Base_AtkPercent[1]; }
			else
			{ value = ((v.Album_Multiply[Vo] * v.Album_Level[Vo] + v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) / 100 + v.Base_AtkPercent[1]; }
			Set_AtkPercent(1, value);
			Update_PercentText();
			v.Unit_AtkPercentFlag[1] = 1;
		}
		break;
	case 1:
		if (Bring(Force1, Exactly, 0, v.Unit_ID[Vo], "Anywhere"))
		{
			if (Bring(Force1, Exactly, 0, v.Unit_ID[All], "Anywhere"))
			{ value = v.Base_AtkPercent[1]; }
			else
			{ value = ((v.Album_Multiply[Vo] * v.Album_Level[Vo]) * 256 + 256) / 100 + v.Base_AtkPercent[1]; }
			Set_AtkPercent(1, value);
			Update_PercentText();
			v.Unit_AtkPercentFlag[1] = 0;
		}
	}
	switch(v.Unit_AtkPercentFlag[2])
	{
	case 0:
		if (Bring(Force1, AtLeast, 1, v.Unit_ID[Vi], "Anywhere"))
		{
			if (Bring(Force1, Exactly, 0, v.Unit_ID[All], "Anywhere"))
			{ value = ((v.Album_Multiply[Vi] * v.Album_Level[Vi]) * 256 + 256) / 100 + v.Base_AtkPercent[2]; }
			else
			{ value = ((v.Album_Multiply[Vi] * v.Album_Level[Vi] + v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) / 100 + v.Base_AtkPercent[2]; }
			Set_AtkPercent(2, value);
			Update_PercentText();
			v.Unit_AtkPercentFlag[2] = 1;
		}
		break;
	case 1:
		if (Bring(Force1, Exactly, 0, v.Unit_ID[Vi], "Anywhere") && Bring(Force1, Exactly, 0, v.Unit_ID[All], "Anywhere"))
		{
			if (Bring(Force1, Exactly, 0, v.Unit_ID[All], "Anywhere"))
			{ value = v.Base_AtkPercent[2]; }
			else
			{ value = ((v.Album_Multiply[Vi] * v.Album_Level[Vi]) * 256 + 256) / 100 + v.Base_AtkPercent[2]; }
			Set_AtkPercent(2, value);
			Update_PercentText();
			v.Unit_AtkPercentFlag[2] = 0;
		}
	}
	switch(v.Unit_AtkPercentFlag[3])
	{
	case 0:
		if (Bring(Force1, AtLeast, 1, v.Unit_ID[All], "Anywhere"))
		{
			if (Bring(Force1, Exactly, 0, v.Unit_ID[Da], "Anywhere"))
			{ value = ((v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) / 100 + v.Base_AtkPercent[0]; }
			else
			{ value = ((v.Album_Multiply[Da] * v.Album_Level[Da] + v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) / 100 + v.Base_AtkPercent[0]; }
			Set_AtkPercent(0, value);
			
			if (Bring(Force1, Exactly, 0, v.Unit_ID[Vo], "Anywhere"))
			{ value = ((v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) / 100 + v.Base_AtkPercent[1]; }
			else
			{ value = ((v.Album_Multiply[Vo] * v.Album_Level[Vo] + v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) / 100 + v.Base_AtkPercent[1]; }
			Set_AtkPercent(1, value);
			
			if (Bring(Force1, Exactly, 0, v.Unit_ID[Vi], "Anywhere"))
			{ value = ((v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) / 100 + v.Base_AtkPercent[2]; }
			else
			{ value = ((v.Album_Multiply[Vi] * v.Album_Level[Vi] + v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) / 100 + v.Base_AtkPercent[2]; }
			Set_AtkPercent(2, value);
			
			Update_PercentText();
			v.Unit_AtkPercentFlag[3] = 1;
		}
		break;
	case 1:
		if (Bring(Force1, Exactly, 0, v.Unit_ID[All], "Anywhere"))
		{		
			if (Bring(Force1, Exactly, 0, v.Unit_ID[Da], "Anywhere"))
			{ value = v.Base_AtkPercent[0]; }
			else
			{ value = ((v.Album_Multiply[Da] * v.Album_Level[Da]) * 256 + 256) / 100 + v.Base_AtkPercent[0]; }
			Set_AtkPercent(0, value);
			
			if (Bring(Force1, Exactly, 0, v.Unit_ID[Vo], "Anywhere"))
			{ value = v.Base_AtkPercent[1]; }
			else
			{ value = ((v.Album_Multiply[Vo] * v.Album_Level[Vo]) * 256 + 256) / 100 + v.Base_AtkPercent[1]; }
			Set_AtkPercent(1, value);
			
			if (Bring(Force1, Exactly, 0, v.Unit_ID[Vi], "Anywhere"))
			{ value = v.Base_AtkPercent[2]; }
			else
			{ value = ((v.Album_Multiply[Vi] * v.Album_Level[Vi]) * 256 + 256) / 100 + v.Base_AtkPercent[2]; }
			Set_AtkPercent(2, value);
			
			Update_PercentText();
			v.Unit_AtkPercentFlag[3] = 0;
		}
	}
}

function Set_AtkPercent(type, value)
{
	// 진동형 - 페어리
	switch(type)
	{
	case 0:
		SetMemory(0x515BB4, SetTo, value);	// 소형 - 프린세스 	75%
		v.Unit_AtkPercent[0] = (value * 100)/256;
		break;
	case 1:
		SetMemory(0x515BB8, SetTo, value);	// 중형 - 페어리 		100%
		v.Unit_AtkPercent[1] = (value * 100)/256;
		break;
	case 2:
		SetMemory(0x515BBC, SetTo, value);	// 대형 - 엔젤 		50%
		v.Unit_AtkPercent[2] = (value * 100)/256;
		break;
	}
}

function Update_PercentText()
{
	te.Update_PercentText();
}

function Update_AtkText(id)
{
	settbl(242 + id, 11, "\n",
	"\x04공격속도 : \x19",  bread(0x6564E0 + 2776 + v.Unit_AtkID[id] * 1), "\n",
	"\x04범위공격 : \x19", wread(0x6564E0 + 4768 + v.Unit_AtkID[id] * 2));
}

function Test_Mode()
{
	for (var i = 0; i < 13; i++)
	{
		CreateUnit(1, v.Unit_ID[i], "Player1", P1);
	}
}
