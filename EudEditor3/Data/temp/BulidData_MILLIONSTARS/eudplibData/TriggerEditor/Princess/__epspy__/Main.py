## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Princess.Variable as v;
from Princess import Variable as v
# (Line 2) import Princess.ButtonText as bt;
from Princess import ButtonText as bt
# (Line 3) import Princess.Effect as et;
from Princess import Effect as et
# (Line 4) import Weapon as w;
import Weapon as w
# (Line 6) import Title.Effect as te;
from Title import Effect as te
# (Line 8) function Init();
# (Line 9) function FixedUpdate();
# (Line 11) function Init_Weapon();
# (Line 13) function Update_AtkPercent();
# (Line 14) function Set_AtkPercent(type, value);
# (Line 16) function Update_PercentText();
# (Line 17) function Update_AtkText(id);
# (Line 19) function Test_Mode();
# (Line 21) function Init()
# (Line 22) {
@EUDFunc
def Init():
    # (Line 23) bt.Init_ButtonText();
    bt.Init_ButtonText()
    # (Line 24) et.Init_Effect();
    et.Init_Effect()
    # (Line 26) Init_Weapon();
    Init_Weapon()
    # (Line 28) Set_AtkPercent(0, v.Base_AtkPercent[0]);
    Set_AtkPercent(0, v.Base_AtkPercent[0])
    # (Line 29) Set_AtkPercent(1, v.Base_AtkPercent[1]);
    Set_AtkPercent(1, v.Base_AtkPercent[1])
    # (Line 30) Set_AtkPercent(2, v.Base_AtkPercent[2]);
    Set_AtkPercent(2, v.Base_AtkPercent[2])
    # (Line 31) Update_PercentText();
    Update_PercentText()
    # (Line 33) for (var i = 0; i < 13; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 13, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 34) {
        # (Line 35) Update_AtkText(i);
        Update_AtkText(i)
        # (Line 36) }
        # (Line 37) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 39) function FixedUpdate()

# (Line 40) {
@EUDFunc
def FixedUpdate():
    # (Line 41) et.Update_Effect();
    et.Update_Effect()
    # (Line 42) Update_AtkPercent();
    Update_AtkPercent()
    # (Line 43) }
    # (Line 45) function Test()

# (Line 46) {
@EUDFunc
def Test():
    # (Line 47) bt.Update_ButtomText();
    bt.Update_ButtomText()
    # (Line 48) }
    # (Line 50) function Init_Weapon()

# (Line 51) {
@EUDFunc
def Init_Weapon():
    # (Line 52) for (var i = 0; i < 13; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 13, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 53) {
        # (Line 54) w.Set_Rank(v.Unit_ID[i], v.Unit_Rank[i]);
        w.Set_Rank(v.Unit_ID[i], v.Unit_Rank[i])
        # (Line 56) w.Set_Label(v.Unit_AtkID[i], 255 + i);
        w.Set_Label(v.Unit_AtkID[i], 255 + i)
        # (Line 57) w.Set_Atk(v.Unit_AtkID[i], v.Unit_Atk[i]);
        w.Set_Atk(v.Unit_AtkID[i], v.Unit_Atk[i])
        # (Line 58) w.Set_AtkBouns(v.Unit_AtkID[i], v.Unit_Atkbouns[i]);
        w.Set_AtkBouns(v.Unit_AtkID[i], v.Unit_Atkbouns[i])
        # (Line 59) w.Set_AtkSpeed(v.Unit_AtkID[i], v.Unit_Atkspeed[i]);
        w.Set_AtkSpeed(v.Unit_AtkID[i], v.Unit_Atkspeed[i])
        # (Line 60) w.Set_AtkType(v.Unit_AtkID[i], v.Unit_Atktype[i]);
        w.Set_AtkType(v.Unit_AtkID[i], v.Unit_Atktype[i])
        # (Line 61) w.Set_AtkExplosion(v.Unit_AtkID[i], v.Unit_AtkExplosion[i]);
        w.Set_AtkExplosion(v.Unit_AtkID[i], v.Unit_AtkExplosion[i])
        # (Line 62) w.Set_AtkSplash(v.Unit_AtkID[i], v.Unit_Atksplash[i]);
        w.Set_AtkSplash(v.Unit_AtkID[i], v.Unit_Atksplash[i])
        # (Line 64) w.Set_AtkRange(v.Unit_AtkID[i], v.Unit_AtkRange[i]);
        w.Set_AtkRange(v.Unit_AtkID[i], v.Unit_AtkRange[i])
        # (Line 65) w.Set_UnitRange(v.Unit_ID[i], v.Unit_AtkRange[i]);
        w.Set_UnitRange(v.Unit_ID[i], v.Unit_AtkRange[i])
        # (Line 66) }
        # (Line 67) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 69) function Update_AtkPercent()

# (Line 70) {
@EUDFunc
def Update_AtkPercent():
    # (Line 71) var value;
    value = EUDVariable()
    # (Line 73) var Da = 1;
    Da = EUDVariable()
    Da << (1)
    # (Line 74) var Vo = 5;
    Vo = EUDVariable()
    Vo << (5)
    # (Line 75) var Vi = 9;
    Vi = EUDVariable()
    Vi << (9)
    # (Line 76) var All = 4;
    All = EUDVariable()
    All << (4)
    # (Line 78) switch(v.Unit_AtkPercentFlag[0])
    EUDSwitch(v.Unit_AtkPercentFlag[0])
    # (Line 79) {
    # (Line 80) case 0:
    _t1 = EUDSwitchCase()
    # (Line 81) if (Bring(Force1, AtLeast, 1, v.Unit_ID[Da], "Anywhere"))
    if _t1(0):
        if EUDIf()(Bring(Force1, AtLeast, 1, v.Unit_ID[Da], "Anywhere")):
            # (Line 82) {
            # (Line 83) if (Bring(Force1, Exactly, 0, v.Unit_ID[All], "Anywhere"))
            if EUDIf()(Bring(Force1, Exactly, 0, v.Unit_ID[All], "Anywhere")):
                # (Line 84) { value = ((v.Album_Multiply[Da] * v.Album_Level[Da]) * 256 + 256) / 100 + v.Base_AtkPercent[0]; }
                value << (((v.Album_Multiply[Da] * v.Album_Level[Da]) * 256 + 256) // 100 + v.Base_AtkPercent[0])
                # (Line 85) else
                # (Line 86) { value = ((v.Album_Multiply[Da] * v.Album_Level[Da] + v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) / 100 + v.Base_AtkPercent[0]; }
            if EUDElse()():
                value << (((v.Album_Multiply[Da] * v.Album_Level[Da] + v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) // 100 + v.Base_AtkPercent[0])
                # (Line 87) Set_AtkPercent(0, value);
            EUDEndIf()
            Set_AtkPercent(0, value)
            # (Line 88) Update_PercentText();
            Update_PercentText()
            # (Line 89) v.Unit_AtkPercentFlag[0] = 1;
            _ARRW(v.Unit_AtkPercentFlag, 0) << (1)
            # (Line 90) }
            # (Line 91) break;
        EUDEndIf()
        EUDBreak()
        # (Line 92) case 1:
    _t4 = EUDSwitchCase()
    # (Line 93) if (Bring(Force1, Exactly, 0, v.Unit_ID[Da], "Anywhere"))
    if _t4(1):
        if EUDIf()(Bring(Force1, Exactly, 0, v.Unit_ID[Da], "Anywhere")):
            # (Line 94) {
            # (Line 95) if (Bring(Force1, Exactly, 0, v.Unit_ID[All], "Anywhere"))
            if EUDIf()(Bring(Force1, Exactly, 0, v.Unit_ID[All], "Anywhere")):
                # (Line 96) { value = v.Base_AtkPercent[0]; }
                value << (v.Base_AtkPercent[0])
                # (Line 97) else
                # (Line 98) { value = ((v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) / 100 + v.Base_AtkPercent[0]; }
            if EUDElse()():
                value << (((v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) // 100 + v.Base_AtkPercent[0])
                # (Line 99) Set_AtkPercent(0, value);
            EUDEndIf()
            Set_AtkPercent(0, value)
            # (Line 100) Update_PercentText();
            Update_PercentText()
            # (Line 101) v.Unit_AtkPercentFlag[0] = 0;
            _ARRW(v.Unit_AtkPercentFlag, 0) << (0)
            # (Line 102) }
            # (Line 103) }
        EUDEndIf()
    # (Line 104) switch(v.Unit_AtkPercentFlag[1])
    EUDEndSwitch()
    EUDSwitch(v.Unit_AtkPercentFlag[1])
    # (Line 105) {
    # (Line 106) case 0:
    _t7 = EUDSwitchCase()
    # (Line 107) if (Bring(Force1, AtLeast, 1, v.Unit_ID[Vo], "Anywhere"))
    if _t7(0):
        if EUDIf()(Bring(Force1, AtLeast, 1, v.Unit_ID[Vo], "Anywhere")):
            # (Line 108) {
            # (Line 109) if (Bring(Force1, Exactly, 0, v.Unit_ID[All], "Anywhere"))
            if EUDIf()(Bring(Force1, Exactly, 0, v.Unit_ID[All], "Anywhere")):
                # (Line 110) { value = ((v.Album_Multiply[Vo] * v.Album_Level[Vo]) * 256 + 256) / 100 + v.Base_AtkPercent[1]; }
                value << (((v.Album_Multiply[Vo] * v.Album_Level[Vo]) * 256 + 256) // 100 + v.Base_AtkPercent[1])
                # (Line 111) else
                # (Line 112) { value = ((v.Album_Multiply[Vo] * v.Album_Level[Vo] + v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) / 100 + v.Base_AtkPercent[1]; }
            if EUDElse()():
                value << (((v.Album_Multiply[Vo] * v.Album_Level[Vo] + v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) // 100 + v.Base_AtkPercent[1])
                # (Line 113) Set_AtkPercent(1, value);
            EUDEndIf()
            Set_AtkPercent(1, value)
            # (Line 114) Update_PercentText();
            Update_PercentText()
            # (Line 115) v.Unit_AtkPercentFlag[1] = 1;
            _ARRW(v.Unit_AtkPercentFlag, 1) << (1)
            # (Line 116) }
            # (Line 117) break;
        EUDEndIf()
        EUDBreak()
        # (Line 118) case 1:
    _t10 = EUDSwitchCase()
    # (Line 119) if (Bring(Force1, Exactly, 0, v.Unit_ID[Vo], "Anywhere"))
    if _t10(1):
        if EUDIf()(Bring(Force1, Exactly, 0, v.Unit_ID[Vo], "Anywhere")):
            # (Line 120) {
            # (Line 121) if (Bring(Force1, Exactly, 0, v.Unit_ID[All], "Anywhere"))
            if EUDIf()(Bring(Force1, Exactly, 0, v.Unit_ID[All], "Anywhere")):
                # (Line 122) { value = v.Base_AtkPercent[1]; }
                value << (v.Base_AtkPercent[1])
                # (Line 123) else
                # (Line 124) { value = ((v.Album_Multiply[Vo] * v.Album_Level[Vo]) * 256 + 256) / 100 + v.Base_AtkPercent[1]; }
            if EUDElse()():
                value << (((v.Album_Multiply[Vo] * v.Album_Level[Vo]) * 256 + 256) // 100 + v.Base_AtkPercent[1])
                # (Line 125) Set_AtkPercent(1, value);
            EUDEndIf()
            Set_AtkPercent(1, value)
            # (Line 126) Update_PercentText();
            Update_PercentText()
            # (Line 127) v.Unit_AtkPercentFlag[1] = 0;
            _ARRW(v.Unit_AtkPercentFlag, 1) << (0)
            # (Line 128) }
            # (Line 129) }
        EUDEndIf()
    # (Line 130) switch(v.Unit_AtkPercentFlag[2])
    EUDEndSwitch()
    EUDSwitch(v.Unit_AtkPercentFlag[2])
    # (Line 131) {
    # (Line 132) case 0:
    _t13 = EUDSwitchCase()
    # (Line 133) if (Bring(Force1, AtLeast, 1, v.Unit_ID[Vi], "Anywhere"))
    if _t13(0):
        if EUDIf()(Bring(Force1, AtLeast, 1, v.Unit_ID[Vi], "Anywhere")):
            # (Line 134) {
            # (Line 135) if (Bring(Force1, Exactly, 0, v.Unit_ID[All], "Anywhere"))
            if EUDIf()(Bring(Force1, Exactly, 0, v.Unit_ID[All], "Anywhere")):
                # (Line 136) { value = ((v.Album_Multiply[Vi] * v.Album_Level[Vi]) * 256 + 256) / 100 + v.Base_AtkPercent[2]; }
                value << (((v.Album_Multiply[Vi] * v.Album_Level[Vi]) * 256 + 256) // 100 + v.Base_AtkPercent[2])
                # (Line 137) else
                # (Line 138) { value = ((v.Album_Multiply[Vi] * v.Album_Level[Vi] + v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) / 100 + v.Base_AtkPercent[2]; }
            if EUDElse()():
                value << (((v.Album_Multiply[Vi] * v.Album_Level[Vi] + v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) // 100 + v.Base_AtkPercent[2])
                # (Line 139) Set_AtkPercent(2, value);
            EUDEndIf()
            Set_AtkPercent(2, value)
            # (Line 140) Update_PercentText();
            Update_PercentText()
            # (Line 141) v.Unit_AtkPercentFlag[2] = 1;
            _ARRW(v.Unit_AtkPercentFlag, 2) << (1)
            # (Line 142) }
            # (Line 143) break;
        EUDEndIf()
        EUDBreak()
        # (Line 144) case 1:
    _t16 = EUDSwitchCase()
    # (Line 145) if (Bring(Force1, Exactly, 0, v.Unit_ID[Vi], "Anywhere") && Bring(Force1, Exactly, 0, v.Unit_ID[All], "Anywhere"))
    if _t16(1):
        if EUDIf()(EUDSCAnd()(Bring(Force1, Exactly, 0, v.Unit_ID[Vi], "Anywhere"))(Bring(Force1, Exactly, 0, v.Unit_ID[All], "Anywhere"))()):
            # (Line 146) {
            # (Line 147) if (Bring(Force1, Exactly, 0, v.Unit_ID[All], "Anywhere"))
            if EUDIf()(Bring(Force1, Exactly, 0, v.Unit_ID[All], "Anywhere")):
                # (Line 148) { value = v.Base_AtkPercent[2]; }
                value << (v.Base_AtkPercent[2])
                # (Line 149) else
                # (Line 150) { value = ((v.Album_Multiply[Vi] * v.Album_Level[Vi]) * 256 + 256) / 100 + v.Base_AtkPercent[2]; }
            if EUDElse()():
                value << (((v.Album_Multiply[Vi] * v.Album_Level[Vi]) * 256 + 256) // 100 + v.Base_AtkPercent[2])
                # (Line 151) Set_AtkPercent(2, value);
            EUDEndIf()
            Set_AtkPercent(2, value)
            # (Line 152) Update_PercentText();
            Update_PercentText()
            # (Line 153) v.Unit_AtkPercentFlag[2] = 0;
            _ARRW(v.Unit_AtkPercentFlag, 2) << (0)
            # (Line 154) }
            # (Line 155) }
        EUDEndIf()
    # (Line 156) switch(v.Unit_AtkPercentFlag[3])
    EUDEndSwitch()
    EUDSwitch(v.Unit_AtkPercentFlag[3])
    # (Line 157) {
    # (Line 158) case 0:
    _t19 = EUDSwitchCase()
    # (Line 159) if (Bring(Force1, AtLeast, 1, v.Unit_ID[All], "Anywhere"))
    if _t19(0):
        if EUDIf()(Bring(Force1, AtLeast, 1, v.Unit_ID[All], "Anywhere")):
            # (Line 160) {
            # (Line 161) if (Bring(Force1, Exactly, 0, v.Unit_ID[Da], "Anywhere"))
            if EUDIf()(Bring(Force1, Exactly, 0, v.Unit_ID[Da], "Anywhere")):
                # (Line 162) { value = ((v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) / 100 + v.Base_AtkPercent[0]; }
                value << (((v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) // 100 + v.Base_AtkPercent[0])
                # (Line 163) else
                # (Line 164) { value = ((v.Album_Multiply[Da] * v.Album_Level[Da] + v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) / 100 + v.Base_AtkPercent[0]; }
            if EUDElse()():
                value << (((v.Album_Multiply[Da] * v.Album_Level[Da] + v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) // 100 + v.Base_AtkPercent[0])
                # (Line 165) Set_AtkPercent(0, value);
            EUDEndIf()
            Set_AtkPercent(0, value)
            # (Line 167) if (Bring(Force1, Exactly, 0, v.Unit_ID[Vo], "Anywhere"))
            if EUDIf()(Bring(Force1, Exactly, 0, v.Unit_ID[Vo], "Anywhere")):
                # (Line 168) { value = ((v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) / 100 + v.Base_AtkPercent[1]; }
                value << (((v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) // 100 + v.Base_AtkPercent[1])
                # (Line 169) else
                # (Line 170) { value = ((v.Album_Multiply[Vo] * v.Album_Level[Vo] + v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) / 100 + v.Base_AtkPercent[1]; }
            if EUDElse()():
                value << (((v.Album_Multiply[Vo] * v.Album_Level[Vo] + v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) // 100 + v.Base_AtkPercent[1])
                # (Line 171) Set_AtkPercent(1, value);
            EUDEndIf()
            Set_AtkPercent(1, value)
            # (Line 173) if (Bring(Force1, Exactly, 0, v.Unit_ID[Vi], "Anywhere"))
            if EUDIf()(Bring(Force1, Exactly, 0, v.Unit_ID[Vi], "Anywhere")):
                # (Line 174) { value = ((v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) / 100 + v.Base_AtkPercent[2]; }
                value << (((v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) // 100 + v.Base_AtkPercent[2])
                # (Line 175) else
                # (Line 176) { value = ((v.Album_Multiply[Vi] * v.Album_Level[Vi] + v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) / 100 + v.Base_AtkPercent[2]; }
            if EUDElse()():
                value << (((v.Album_Multiply[Vi] * v.Album_Level[Vi] + v.Album_Multiply[All] * v.Album_Level[All]) * 256 + 256) // 100 + v.Base_AtkPercent[2])
                # (Line 177) Set_AtkPercent(2, value);
            EUDEndIf()
            Set_AtkPercent(2, value)
            # (Line 179) Update_PercentText();
            Update_PercentText()
            # (Line 180) v.Unit_AtkPercentFlag[3] = 1;
            _ARRW(v.Unit_AtkPercentFlag, 3) << (1)
            # (Line 181) }
            # (Line 182) break;
        EUDEndIf()
        EUDBreak()
        # (Line 183) case 1:
    _t24 = EUDSwitchCase()
    # (Line 184) if (Bring(Force1, Exactly, 0, v.Unit_ID[All], "Anywhere"))
    if _t24(1):
        if EUDIf()(Bring(Force1, Exactly, 0, v.Unit_ID[All], "Anywhere")):
            # (Line 185) {
            # (Line 186) if (Bring(Force1, Exactly, 0, v.Unit_ID[Da], "Anywhere"))
            if EUDIf()(Bring(Force1, Exactly, 0, v.Unit_ID[Da], "Anywhere")):
                # (Line 187) { value = v.Base_AtkPercent[0]; }
                value << (v.Base_AtkPercent[0])
                # (Line 188) else
                # (Line 189) { value = ((v.Album_Multiply[Da] * v.Album_Level[Da]) * 256 + 256) / 100 + v.Base_AtkPercent[0]; }
            if EUDElse()():
                value << (((v.Album_Multiply[Da] * v.Album_Level[Da]) * 256 + 256) // 100 + v.Base_AtkPercent[0])
                # (Line 190) Set_AtkPercent(0, value);
            EUDEndIf()
            Set_AtkPercent(0, value)
            # (Line 192) if (Bring(Force1, Exactly, 0, v.Unit_ID[Vo], "Anywhere"))
            if EUDIf()(Bring(Force1, Exactly, 0, v.Unit_ID[Vo], "Anywhere")):
                # (Line 193) { value = v.Base_AtkPercent[1]; }
                value << (v.Base_AtkPercent[1])
                # (Line 194) else
                # (Line 195) { value = ((v.Album_Multiply[Vo] * v.Album_Level[Vo]) * 256 + 256) / 100 + v.Base_AtkPercent[1]; }
            if EUDElse()():
                value << (((v.Album_Multiply[Vo] * v.Album_Level[Vo]) * 256 + 256) // 100 + v.Base_AtkPercent[1])
                # (Line 196) Set_AtkPercent(1, value);
            EUDEndIf()
            Set_AtkPercent(1, value)
            # (Line 198) if (Bring(Force1, Exactly, 0, v.Unit_ID[Vi], "Anywhere"))
            if EUDIf()(Bring(Force1, Exactly, 0, v.Unit_ID[Vi], "Anywhere")):
                # (Line 199) { value = v.Base_AtkPercent[2]; }
                value << (v.Base_AtkPercent[2])
                # (Line 200) else
                # (Line 201) { value = ((v.Album_Multiply[Vi] * v.Album_Level[Vi]) * 256 + 256) / 100 + v.Base_AtkPercent[2]; }
            if EUDElse()():
                value << (((v.Album_Multiply[Vi] * v.Album_Level[Vi]) * 256 + 256) // 100 + v.Base_AtkPercent[2])
                # (Line 202) Set_AtkPercent(2, value);
            EUDEndIf()
            Set_AtkPercent(2, value)
            # (Line 204) Update_PercentText();
            Update_PercentText()
            # (Line 205) v.Unit_AtkPercentFlag[3] = 0;
            _ARRW(v.Unit_AtkPercentFlag, 3) << (0)
            # (Line 206) }
            # (Line 207) }
        EUDEndIf()
    # (Line 208) }
    EUDEndSwitch()
    # (Line 210) function Set_AtkPercent(type, value)

# (Line 211) {
@EUDFunc
def Set_AtkPercent(type, value):
    # (Line 213) switch(type)
    EUDSwitch(type)
    # (Line 214) {
    # (Line 215) case 0:
    _t1 = EUDSwitchCase()
    # (Line 216) SetMemory(0x515BC8, SetTo, value);	// 소형 - 프린세스 	75%
    if _t1(0):
        # (Line 217) v.Unit_AtkPercent[0] = (value * 100)/256;
        DoActions(SetMemory(0x515BC8, SetTo, value))
        _ARRW(v.Unit_AtkPercent, 0) << ((value * 100) // 256)
        # (Line 218) break;
        EUDBreak()
        # (Line 219) case 1:
    _t2 = EUDSwitchCase()
    # (Line 220) SetMemory(0x515BCC, SetTo, value);	// 중형 - 페어리 		100%
    if _t2(1):
        # (Line 221) v.Unit_AtkPercent[1] = (value * 100)/256;
        DoActions(SetMemory(0x515BCC, SetTo, value))
        _ARRW(v.Unit_AtkPercent, 1) << ((value * 100) // 256)
        # (Line 222) break;
        EUDBreak()
        # (Line 223) case 2:
    _t3 = EUDSwitchCase()
    # (Line 224) SetMemory(0x515BD0, SetTo, value);	// 대형 - 엔젤 		50%
    if _t3(2):
        # (Line 225) v.Unit_AtkPercent[2] = (value * 100)/256;
        DoActions(SetMemory(0x515BD0, SetTo, value))
        _ARRW(v.Unit_AtkPercent, 2) << ((value * 100) // 256)
        # (Line 226) break;
        EUDBreak()
        # (Line 227) }
    # (Line 228) }
    EUDEndSwitch()
    # (Line 230) function Update_PercentText()

# (Line 231) {
@EUDFunc
def Update_PercentText():
    # (Line 232) te.Update_PercentText();
    te.Update_PercentText()
    # (Line 233) }
    # (Line 235) function Update_AtkText(id)

# (Line 236) {
@EUDFunc
def Update_AtkText(id):
    # (Line 237) settbl(255 + id, 13, "\n",
    # (Line 238) "\x04공격속도 : \x19",  bread(0x6564E0 + 2776 + v.Unit_AtkID[id] * 1), "\n",
    # (Line 239) "\x04범위공격 : \x19", wread(0x6564E0 + 4768 + v.Unit_AtkID[id] * 2));
    f_settbl(255 + id, 13, "\n", "\x04공격속도 : \x19", f_bread(0x6564E0 + 2776 + v.Unit_AtkID[id] * 1), "\n", "\x04범위공격 : \x19", f_wread(0x6564E0 + 4768 + v.Unit_AtkID[id] * 2))
    # (Line 240) }
    # (Line 242) function Test_Mode()

# (Line 243) {
@EUDFunc
def Test_Mode():
    # (Line 244) for (var i = 0; i < 13; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 13, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 245) {
        # (Line 246) CreateUnit(1, v.Unit_ID[i], "Player1", P1);
        # (Line 247) }
        DoActions(CreateUnit(1, v.Unit_ID[i], "Player1", P1))
        # (Line 248) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
