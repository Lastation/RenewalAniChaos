## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) const Unit_ID				= [63, 68, 87, 78, 66, 71, 39, 40, 19, 61, 38, 46, 17];		// 유닛 ID
Unit_ID = _CGFW(lambda: [_ARR(FlattenList([63, 68, 87, 78, 66, 71, 39, 40, 19, 61, 38, 46, 17]))], 1)[0]
# (Line 4) const Unit_AtkID			= [80, 70, 53, 67, 66, 77, 40, 42, 5, 111, 38, 51, 10];		// 무기 ID
Unit_AtkID = _CGFW(lambda: [_ARR(FlattenList([80, 70, 53, 67, 66, 77, 40, 42, 5, 111, 38, 51, 10]))], 1)[0]
# (Line 5) const Unit_Atk				= [40, 40, 40, 40, 36, 36, 36, 36, 32, 32, 32, 32, 32];		// 공격력
Unit_Atk = _CGFW(lambda: [_ARR(FlattenList([40, 40, 40, 40, 36, 36, 36, 36, 32, 32, 32, 32, 32]))], 1)[0]
# (Line 6) const Unit_Atkbouns			= [4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2];						// 공격력 증가량
Unit_Atkbouns = _CGFW(lambda: [_ARR(FlattenList([4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2]))], 1)[0]
# (Line 7) const Unit_Atkspeed			= [24, 24, 24, 24, 28, 28, 28, 28, 32, 32, 32, 32, 32];		// 공격 속도
Unit_Atkspeed = _CGFW(lambda: [_ARR(FlattenList([24, 24, 24, 24, 28, 28, 28, 28, 32, 32, 32, 32, 32]))], 1)[0]
# (Line 8) const Unit_Atktype			= [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3];						// 공격 타입
Unit_Atktype = _CGFW(lambda: [_ARR(FlattenList([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]))], 1)[0]
# (Line 9) const Unit_AtkExplosion		= [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];						// 공격 스플 o,x
Unit_AtkExplosion = _CGFW(lambda: [_ARR(FlattenList([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))], 1)[0]
# (Line 10) const Unit_Atksplash			= [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];						// 공격 스플 범위
Unit_Atksplash = _CGFW(lambda: [_ARR(FlattenList([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))], 1)[0]
# (Line 12) const Unit_AtkPercent		= [256, 128, 192];									// 공격 %
Unit_AtkPercent = _CGFW(lambda: [_ARR(FlattenList([256, 128, 192]))], 1)[0]
# (Line 13) const Unit_AtkPercentFlag	= [0, 0, 0, 0];											// 공격 % Flag
Unit_AtkPercentFlag = _CGFW(lambda: [_ARR(FlattenList([0, 0, 0, 0]))], 1)[0]
# (Line 16) const Base_Atk				= [40, 40, 40, 40, 36, 36, 36, 36, 32, 32, 32, 32, 32];	 	// 공격력
Base_Atk = _CGFW(lambda: [_ARR(FlattenList([40, 40, 40, 40, 36, 36, 36, 36, 32, 32, 32, 32, 32]))], 1)[0]
# (Line 17) const Base_Atkspeed		= [24, 24, 24, 24, 28, 28, 28, 28, 32, 32, 32, 32, 32];		// 공격 속도
Base_Atkspeed = _CGFW(lambda: [_ARR(FlattenList([24, 24, 24, 24, 28, 28, 28, 28, 32, 32, 32, 32, 32]))], 1)[0]
# (Line 18) const Base_AtkPercent		= [256, 128, 192];									// 공격 %
Base_AtkPercent = _CGFW(lambda: [_ARR(FlattenList([256, 128, 192]))], 1)[0]
# (Line 20) const Dear_Level			= EUDArray(13);
Dear_Level = _CGFW(lambda: [EUDArray(13)], 1)[0]
# (Line 21) const Dear_Now				= EUDArray(13);
Dear_Now = _CGFW(lambda: [EUDArray(13)], 1)[0]
# (Line 22) const Dear_Need			= [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000];
Dear_Need = _CGFW(lambda: [_ARR(FlattenList([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]))], 1)[0]
# (Line 23) const Dear_Ablity			= [0, 1, 1, 2, 2, 1, 0, 0, 1, 2, 2, 0, 1];
Dear_Ablity = _CGFW(lambda: [_ARR(FlattenList([0, 1, 1, 2, 2, 1, 0, 0, 1, 2, 2, 0, 1]))], 1)[0]
# (Line 24) const Dear_Multiply			= [90, 4, 4, 20, 15, 3, 75, 75, 2, 10, 10, 50, 2];
Dear_Multiply = _CGFW(lambda: [_ARR(FlattenList([90, 4, 4, 20, 15, 3, 75, 75, 2, 10, 10, 50, 2]))], 1)[0]
# (Line 26) const Dear_Text 			=
# (Line 27) [Db(u2b("착실한 학급 위원")),
# (Line 28) Db(u2b("바람의 전사")),
# (Line 29) Db(u2b("마츠리 공주")),
# (Line 30) Db(u2b("여자력!")),
# (Line 31) Db(u2b("관서 여고생")),
# (Line 32) Db(u2b("미래 귀여운")),
# (Line 33) Db(u2b("패션 파이어!")),
# (Line 34) Db(u2b("야마토 나데시코로의 길")),
# (Line 35) Db(u2b("애정 듬뿍 간판 메뉴!")),
# (Line 36) Db(u2b("입술에는 노래를")),
# (Line 37) Db(u2b("바래지 않는 한 장")),
# (Line 38) Db(u2b("지켜주고 싶은 미소")),
# (Line 39) Db(u2b("코브라 트위스트"))];
Dear_Text = _CGFW(lambda: [_ARR(FlattenList([Db(u2b("착실한 학급 위원")), Db(u2b("바람의 전사")), Db(u2b("마츠리 공주")), Db(u2b("여자력!")), Db(u2b("관서 여고생")), Db(u2b("미래 귀여운")), Db(u2b("패션 파이어!")), Db(u2b("야마토 나데시코로의 길")), Db(u2b("애정 듬뿍 간판 메뉴!")), Db(u2b("입술에는 노래를")), Db(u2b("바래지 않는 한 장")), Db(u2b("지켜주고 싶은 미소")), Db(u2b("코브라 트위스트"))]))], 1)[0]
# (Line 41) const Dear_SubText			=
# (Line 42) [Db(u2b("기본 공격력이")),
# (Line 43) Db(u2b("범위공격 범위가")),
# (Line 44) Db(u2b("공격속도가"))];
Dear_SubText = _CGFW(lambda: [_ARR(FlattenList([Db(u2b("기본 공격력이")), Db(u2b("범위공격 범위가")), Db(u2b("공격속도가"))]))], 1)[0]
# (Line 46) const Dear_EndText 			=
# (Line 47) [Db(u2b("% \x04증가합니다.")),
# (Line 48) Db(u2b(" \x04증가합니다.")),
# (Line 49) Db(u2b("% \x04증가합니다."))];
Dear_EndText = _CGFW(lambda: [_ARR(FlattenList([Db(u2b("% \x04증가합니다.")), Db(u2b(" \x04증가합니다.")), Db(u2b("% \x04증가합니다."))]))], 1)[0]
# (Line 51) const Album_Level 		= EUDArray(13);
Album_Level = _CGFW(lambda: [EUDArray(13)], 1)[0]
# (Line 52) const Album_Now 		= EUDArray(13);
Album_Now = _CGFW(lambda: [EUDArray(13)], 1)[0]
# (Line 53) const Album_Delay		= EUDArray(13);
Album_Delay = _CGFW(lambda: [EUDArray(13)], 1)[0]
# (Line 54) const Album_EffectTime	= EUDArray(13);
Album_EffectTime = _CGFW(lambda: [EUDArray(13)], 1)[0]
# (Line 55) const Album_Need 		= [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
Album_Need = _CGFW(lambda: [_ARR(FlattenList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))], 1)[0]
# (Line 56) const Album_Ablity		= [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
Album_Ablity = _CGFW(lambda: [_ARR(FlattenList([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))], 1)[0]
# (Line 57) const Album_Multiply	= [20, 5, 60, 50, 1, 2, 20, 2, 10, 2, 1, 20, 5];
Album_Multiply = _CGFW(lambda: [_ARR(FlattenList([20, 5, 60, 50, 1, 2, 20, 2, 10, 2, 1, 20, 5]))], 1)[0]
# (Line 59) const Album_Text		=
# (Line 60) [Db(u2b("진정한 나")),
# (Line 61) Db(u2b("마음에 드는 이야기")),
# (Line 62) Db(u2b("프린세스 아라모드")),
# (Line 63) Db(u2b("복근! 배근! 흉근!")),
# (Line 64) Db(u2b("Home is coming a now!")),
# (Line 65) Db(u2b("고 투 퓨처!")),
# (Line 66) Db(u2b("Only One Second")),
# (Line 67) Db(u2b("아름다운 일본의 문화")),
# (Line 68) Db(u2b("스마일 최고")),
# (Line 69) Db(u2b("비에다 노래하자")),
# (Line 70) Db(u2b("Up!10sion Pleeeeeeeeease!")),
# (Line 71) Db(u2b("가끔은 시소")),
# (Line 72) Db(u2b("WE ARE ONE!!"))];
Album_Text = _CGFW(lambda: [_ARR(FlattenList([Db(u2b("진정한 나")), Db(u2b("마음에 드는 이야기")), Db(u2b("프린세스 아라모드")), Db(u2b("복근! 배근! 흉근!")), Db(u2b("Home is coming a now!")), Db(u2b("고 투 퓨처!")), Db(u2b("Only One Second")), Db(u2b("아름다운 일본의 문화")), Db(u2b("스마일 최고")), Db(u2b("비에다 노래하자")), Db(u2b("Up!10sion Pleeeeeeeeease!")), Db(u2b("가끔은 시소")), Db(u2b("WE ARE ONE!!"))]))], 1)[0]
# (Line 74) const Album_SubText			=
# (Line 75) [Db(u2b("60초마다 10초간 공격속도가")),
# (Line 76) Db(u2b("프린세스 타입의 댄스 어필이")),
# (Line 77) Db(u2b("60초마다")),
# (Line 78) Db(u2b("60초마다 5초간 공격력이")),
# (Line 79) Db(u2b("프린세스 타입의 모든 어필이")),
# (Line 80) Db(u2b("프린세스 타입의 보컬 어필이")),
# (Line 81) Db(u2b("")),
# (Line 82) Db(u2b("댄스 스케줄의 체력이")),
# (Line 83) Db(u2b("60초마다 10초간 공격속도가")),
# (Line 84) Db(u2b("프린세스 타입의 비주얼 어필이")),
# (Line 85) Db(u2b("프린세스 타입의 높은 유닛이 뜰 확률이")),
# (Line 86) Db(u2b("60초마다 5초간 공격력이")),
# (Line 87) Db(u2b("프린세스 타입의 이벤트 점수가"))];
Album_SubText = _CGFW(lambda: [_ARR(FlattenList([Db(u2b("60초마다 10초간 공격속도가")), Db(u2b("프린세스 타입의 댄스 어필이")), Db(u2b("60초마다")), Db(u2b("60초마다 5초간 공격력이")), Db(u2b("프린세스 타입의 모든 어필이")), Db(u2b("프린세스 타입의 보컬 어필이")), Db(u2b("")), Db(u2b("댄스 스케줄의 체력이")), Db(u2b("60초마다 10초간 공격속도가")), Db(u2b("프린세스 타입의 비주얼 어필이")), Db(u2b("프린세스 타입의 높은 유닛이 뜰 확률이")), Db(u2b("60초마다 5초간 공격력이")), Db(u2b("프린세스 타입의 이벤트 점수가"))]))], 1)[0]
# (Line 89) const Album_EndText 			=
# (Line 90) [Db(u2b("% \x04증가합니다.")),
# (Line 91) Db(u2b("% \x04증가합니다.")),
# (Line 92) Db(u2b("골드\x04를 얻습니다.")),
# (Line 93) Db(u2b("% \x04증가합니다.")),
# (Line 94) Db(u2b("% \x04증가합니다.")),
# (Line 95) Db(u2b("% \x04증가합니다.")),
# (Line 96) Db(u2b("\x04초마다 비쥬얼 스케줄의 체력을 1%로 만듭니다.")),
# (Line 97) Db(u2b("% \x04감소합니다.")),
# (Line 98) Db(u2b("% \x04증가합니다.")),
# (Line 99) Db(u2b("% \x04증가합니다.")),
# (Line 100) Db(u2b("% \x04증가합니다.")),
# (Line 101) Db(u2b("% \x04증가합니다.")),
# (Line 102) Db(u2b("% \x04증가합니다."))];
Album_EndText = _CGFW(lambda: [_ARR(FlattenList([Db(u2b("% \x04증가합니다.")), Db(u2b("% \x04증가합니다.")), Db(u2b("골드\x04를 얻습니다.")), Db(u2b("% \x04증가합니다.")), Db(u2b("% \x04증가합니다.")), Db(u2b("% \x04증가합니다.")), Db(u2b("\x04초마다 비쥬얼 스케줄의 체력을 1%로 만듭니다.")), Db(u2b("% \x04감소합니다.")), Db(u2b("% \x04증가합니다.")), Db(u2b("% \x04증가합니다.")), Db(u2b("% \x04증가합니다.")), Db(u2b("% \x04증가합니다.")), Db(u2b("% \x04증가합니다."))]))], 1)[0]
