## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) const System_Text =
# (Line 2) [Db(u2b("\n　　　\x07#Tip : "))];
System_Text = _CGFW(lambda: [_ARR(FlattenList([Db(u2b("\n　　　\x07#Tip : "))]))], 1)[0]
# (Line 4) const Interaction_Text =
# (Line 5) [Db(u2b("\x04매 \x1910\x04라운드마다 \x19라이브 이벤트\x04에 참가하여 여러가지 재화를 얻을 수 있습니다.")),
# (Line 6) Db(u2b("\x19프로덕션\x04입니다. 들어가면 이것저것 살 수 있습니다.")),
# (Line 7) Db(u2b("\x04필요없는 맴버를 3명 \x08해고\x04하여 \x19앨범 티켓\x04을 얻습니다.")),
# (Line 8) Db(u2b("\x04비콘으로 들어가면 \x1F스케줄\x04로 복귀합니다.")),
# (Line 9) Db(u2b("\x04원하는 맴버에게 \x1F의상과 앨범\x04을 선물 할 수 있습니다."))];
Interaction_Text = _CGFW(lambda: [_ARR(FlattenList([Db(u2b("\x04매 \x1910\x04라운드마다 \x19라이브 이벤트\x04에 참가하여 여러가지 재화를 얻을 수 있습니다.")), Db(u2b("\x19프로덕션\x04입니다. 들어가면 이것저것 살 수 있습니다.")), Db(u2b("\x04필요없는 맴버를 3명 \x08해고\x04하여 \x19앨범 티켓\x04을 얻습니다.")), Db(u2b("\x04비콘으로 들어가면 \x1F스케줄\x04로 복귀합니다.")), Db(u2b("\x04원하는 맴버에게 \x1F의상과 앨범\x04을 선물 할 수 있습니다."))]))], 1)[0]
# (Line 11) const Shop_Text =
# (Line 12) [Db(u2b("\x04프로듀서 타입의 \x19의상 티켓\x04을 구입 할 수 있습니다.")),
# (Line 13) Db(u2b("\x1F플레티넘 촬영\x04을 위한 \x19티켓\x04을 구입합니다.")),
# (Line 14) Db(u2b("\x04매분마다 프로덕션 발전 등급에 따라 얻는 골드가 증가합니다.")),
# (Line 15) Db(u2b("\x04일정시간마다 등장하는 \x1F맴버\x04를 고용할 수 있습니다. 프로덕션 발전 \x194 \x04단계 에서 활성화됩니다.")),
# (Line 16) Db(u2b("\x04레슨 최대치를 높여주는 트레이너를 고용할 수 있습니다. 프로덕션 발전 \x196 \x04단계 에서 활성화됩니다.")),
# (Line 17) Db(u2b("\x19앨범 티켓\x04을 구입 할 수 있습니다. 프로덕션 발전 \x196 \x04단계 에서 활성화됩니다.")),
# (Line 18) Db(u2b("\x19마스터 레슨 티켓\x04을 구입 할 수 있습니다. 프로덕션 발전 \x194 \x04단계 에서 활성화됩니다."))];
Shop_Text = _CGFW(lambda: [_ARR(FlattenList([Db(u2b("\x04프로듀서 타입의 \x19의상 티켓\x04을 구입 할 수 있습니다.")), Db(u2b("\x1F플레티넘 촬영\x04을 위한 \x19티켓\x04을 구입합니다.")), Db(u2b("\x04매분마다 프로덕션 발전 등급에 따라 얻는 골드가 증가합니다.")), Db(u2b("\x04일정시간마다 등장하는 \x1F맴버\x04를 고용할 수 있습니다. 프로덕션 발전 \x194 \x04단계 에서 활성화됩니다.")), Db(u2b("\x04레슨 최대치를 높여주는 트레이너를 고용할 수 있습니다. 프로덕션 발전 \x196 \x04단계 에서 활성화됩니다.")), Db(u2b("\x19앨범 티켓\x04을 구입 할 수 있습니다. 프로덕션 발전 \x196 \x04단계 에서 활성화됩니다.")), Db(u2b("\x19마스터 레슨 티켓\x04을 구입 할 수 있습니다. 프로덕션 발전 \x194 \x04단계 에서 활성화됩니다."))]))], 1)[0]
# (Line 20) const Shop_Misaki_Text =
# (Line 21) [Db(u2b("요즘 꽤 따뜻해졌지. 아침에 일어나는 것도 힘들지 않아졌고……")),
# (Line 22) Db(u2b("봄 답게 따뜻해져서 왠지 마음도 들뜨네~ 외출도 하고 싶다……")),
# (Line 23) Db(u2b("꽃 구경 가는 것도 좋고, 하이킹도 좋겠다. 도시락 가지고 휘파람 불면서……")),
# (Line 24) Db(u2b("휘이~…… 응? 휴~ 휴우~…… 어라?")),
# (Line 25) Db(u2b("와아, 다들 예쁘게 꾸몄구나. 기쁘네♪"))];
Shop_Misaki_Text = _CGFW(lambda: [_ARR(FlattenList([Db(u2b("요즘 꽤 따뜻해졌지. 아침에 일어나는 것도 힘들지 않아졌고……")), Db(u2b("봄 답게 따뜻해져서 왠지 마음도 들뜨네~ 외출도 하고 싶다……")), Db(u2b("꽃 구경 가는 것도 좋고, 하이킹도 좋겠다. 도시락 가지고 휘파람 불면서……")), Db(u2b("휘이~…… 응? 휴~ 휴우~…… 어라?")), Db(u2b("와아, 다들 예쁘게 꾸몄구나. 기쁘네♪"))]))], 1)[0]
