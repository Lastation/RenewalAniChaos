## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import getunitID as id;
import getunitID as id
# (Line 2) import Shop.Text as st;
from Shop import Text as st
# (Line 3) import Shop.Variable as v;
from Shop import Variable as v
# (Line 4) import Title.Variable as tv;
from Title import Variable as tv
# (Line 5) import Shop.SpecialLesson as spl;
from Shop import SpecialLesson as spl
# (Line 7) function Init();
# (Line 8) function FixedUpdate();
# (Line 9) function PlayerUpdate(cp);
# (Line 11) function Shop_Ablity();
# (Line 12) function Shop_Donate(cp);
# (Line 13) function Shop_MasterLesson(cp);
# (Line 14) function Click_Text(cp);
# (Line 16) const s = StringBuffer();
s = _CGFW(lambda: [StringBuffer()], 1)[0]
# (Line 18) function Init()
# (Line 19) {
@EUDFunc
def Init():
    # (Line 21) }
    # (Line 23) function FixedUpdate()
    pass

# (Line 24) {
@EUDFunc
def FixedUpdate():
    # (Line 25) Shop_Ablity();
    Shop_Ablity()
    # (Line 26) }
    # (Line 28) function PlayerUpdate(cp)

# (Line 29) {
@EUDFunc
def PlayerUpdate(cp):
    # (Line 30) Click_Text(cp);
    Click_Text(cp)
    # (Line 31) Shop_Donate(cp);
    Shop_Donate(cp)
    # (Line 32) Shop_MasterLesson(cp);
    Shop_MasterLesson(cp)
    # (Line 33) spl.Lesson_Unit(cp);
    spl.Lesson_Unit(cp)
    # (Line 34) }
    # (Line 36) function Shop_Ablity()

# (Line 37) {
@EUDFunc
def Shop_Ablity():
    # (Line 38) v.shop_Info[2] += 1;
    _ARRW(v.shop_Info, 2).__iadd__(1)
    # (Line 39) if (Bring(P8, AtLeast, 1, 165, "Title") && v.shop_Info[2] >= 60)
    if EUDIf()(EUDSCAnd()(Bring(P8, AtLeast, 1, 165, "Title"))(v.shop_Info[2] >= 60)()):
        # (Line 40) {
        # (Line 41) SetResources(Force1, Add, v.shop_need[v.shop_Info[0]] * 2, Ore);
        # (Line 42) v.shop_Info[2] = 0;
        DoActions(SetResources(Force1, Add, v.shop_need[v.shop_Info[0]] * 2, Ore))
        _ARRW(v.shop_Info, 2) << (0)
        # (Line 43) }
        # (Line 44) else if (Bring(P6, AtLeast, 1, 165, "Title") && v.shop_Info[2] >= 50)
    if EUDElseIf()(EUDSCAnd()(Bring(P6, AtLeast, 1, 165, "Title"))(v.shop_Info[2] >= 50)()):
        # (Line 45) {
        # (Line 46) SetResources(Force1, Add, v.shop_need[v.shop_Info[0]] * 10, Ore);
        # (Line 47) v.shop_Info[2] = 0;
        DoActions(SetResources(Force1, Add, v.shop_need[v.shop_Info[0]] * 10, Ore))
        _ARRW(v.shop_Info, 2) << (0)
        # (Line 48) }
        # (Line 49) }
    EUDEndIf()
    # (Line 51) function Shop_Donate(cp)

# (Line 52) {
@EUDFunc
def Shop_Donate(cp):
    # (Line 53) if(v.shop_Info[1] < v.shop_need[9])
    if EUDIf()(v.shop_Info[1] >= v.shop_need[9], neg=True):
        # (Line 54) {
        # (Line 55) if(Bring(cp, AtLeast, 1, "(men)", "Shop_Donate") && Accumulate(cp, AtLeast, 1, Gas))
        if EUDIf()(EUDSCAnd()(Bring(cp, AtLeast, 1, "(men)", "Shop_Donate"))(Accumulate(cp, AtLeast, 1, Gas))()):
            # (Line 56) {
            # (Line 57) v.shop_Info[1] += 1;
            _ARRW(v.shop_Info, 1).__iadd__(1)
            # (Line 58) SetResources(cp, Subtract, 1, Gas);
            # (Line 59) s.print("\n\x13\x04프로덕션이 발전합니다. - 1 \x0FGas\n");
            DoActions(SetResources(cp, Subtract, 1, Gas))
            s.print("\n\x13\x04프로덕션이 발전합니다. - 1 \x0FGas\n")
            # (Line 60) MoveUnit(1, "(men)", cp, "Shop_Donate", "Center_Shop");
            # (Line 61) if (v.shop_Info[1] >= v.shop_need[v.shop_Info[0]]) { v.shop_Info[0] += 1; }
            DoActions(MoveUnit(1, "(men)", cp, "Shop_Donate", "Center_Shop"))
            if EUDIf()(v.shop_Info[1] >= v.shop_need[v.shop_Info[0]]):
                _ARRW(v.shop_Info, 0).__iadd__(1)
                # (Line 62) }
            EUDEndIf()
            # (Line 63) }
        EUDEndIf()
        # (Line 64) }
    EUDEndIf()
    # (Line 66) function Shop_MasterLesson(cp)

# (Line 67) {
@EUDFunc
def Shop_MasterLesson(cp):
    # (Line 68) if(Bring(cp, AtLeast, 1, "(men)", "Shop_MasterLesson") && Accumulate(cp, AtLeast, 200, Ore))
    if EUDIf()(EUDSCAnd()(Bring(cp, AtLeast, 1, "(men)", "Shop_MasterLesson"))(Accumulate(cp, AtLeast, 200, Ore))()):
        # (Line 69) {
        # (Line 70) SetResources(cp, Subtract, 200, Ore);
        # (Line 71) s.print("\n\x13\x0F마스터 레슨 티켓\x04을 구매 합니다. - 500 \x0F골드\n");
        DoActions(SetResources(cp, Subtract, 200, Ore))
        s.print("\n\x13\x0F마스터 레슨 티켓\x04을 구매 합니다. - 500 \x0F골드\n")
        # (Line 72) MoveUnit(1, "(men)", cp, "Shop_MasterLesson", "Center_Shop");
        # (Line 73) CreateUnit(1, 111, "MedalGacha", cp);
        DoActions(MoveUnit(1, "(men)", cp, "Shop_MasterLesson", "Center_Shop"))
        # (Line 74) }
        DoActions(CreateUnit(1, 111, "MedalGacha", cp))
        # (Line 75) }
    EUDEndIf()
    # (Line 77) function Click_Text(cp)

# (Line 78) {
@EUDFunc
def Click_Text(cp):
    # (Line 79) switch(id.Unit_ID[cp])
    EUDSwitch(id.Unit_ID[cp])
    # (Line 80) {
    # (Line 82) case 107:
    _t1 = EUDSwitchCase()
    # (Line 83) s.print(ptr2s(st.System_Text[0]), ptr2s(st.Interaction_Text[0]));
    if _t1(107):
        s.print(ptr2s(st.System_Text[0]), ptr2s(st.Interaction_Text[0]))
        # (Line 84) id.Unit_ID[cp] = 1000;
        _ARRW(id.Unit_ID, cp) << (1000)
        # (Line 85) break;
        EUDBreak()
        # (Line 86) case 115:
    _t2 = EUDSwitchCase()
    # (Line 87) s.print(ptr2s(st.System_Text[0]), ptr2s(st.Interaction_Text[1]));
    if _t2(115):
        s.print(ptr2s(st.System_Text[0]), ptr2s(st.Interaction_Text[1]))
        # (Line 88) id.Unit_ID[cp] = 1000;
        _ARRW(id.Unit_ID, cp) << (1000)
        # (Line 89) break;
        EUDBreak()
        # (Line 90) case 117:
    _t3 = EUDSwitchCase()
    # (Line 91) s.print(ptr2s(st.System_Text[0]), ptr2s(st.Interaction_Text[2]));
    if _t3(117):
        s.print(ptr2s(st.System_Text[0]), ptr2s(st.Interaction_Text[2]))
        # (Line 92) id.Unit_ID[cp] = 1000;
        _ARRW(id.Unit_ID, cp) << (1000)
        # (Line 93) break;
        EUDBreak()
        # (Line 94) case 120:
    _t4 = EUDSwitchCase()
    # (Line 95) s.print(ptr2s(st.System_Text[0]), ptr2s(st.Interaction_Text[3]));
    if _t4(120):
        s.print(ptr2s(st.System_Text[0]), ptr2s(st.Interaction_Text[3]))
        # (Line 96) id.Unit_ID[cp] = 1000;
        _ARRW(id.Unit_ID, cp) << (1000)
        # (Line 97) break;
        EUDBreak()
        # (Line 98) case 143:
    _t5 = EUDSwitchCase()
    # (Line 99) s.print(ptr2s(st.System_Text[0]), ptr2s(st.Interaction_Text[4]));
    if _t5(143):
        s.print(ptr2s(st.System_Text[0]), ptr2s(st.Interaction_Text[4]))
        # (Line 100) id.Unit_ID[cp] = 1000;
        _ARRW(id.Unit_ID, cp) << (1000)
        # (Line 101) break;
        EUDBreak()
        # (Line 104) case 108:
    _t6 = EUDSwitchCase()
    # (Line 105) s.print(ptr2s(st.System_Text[0]), ptr2s(st.Shop_Text[0]));
    if _t6(108):
        s.print(ptr2s(st.System_Text[0]), ptr2s(st.Shop_Text[0]))
        # (Line 106) id.Unit_ID[cp] = 1000;
        _ARRW(id.Unit_ID, cp) << (1000)
        # (Line 107) break;
        EUDBreak()
        # (Line 108) case 118:
    _t7 = EUDSwitchCase()
    # (Line 109) s.print(ptr2s(st.System_Text[0]), ptr2s(st.Shop_Text[1]));
    if _t7(118):
        s.print(ptr2s(st.System_Text[0]), ptr2s(st.Shop_Text[1]))
        # (Line 110) id.Unit_ID[cp] = 1000;
        _ARRW(id.Unit_ID, cp) << (1000)
        # (Line 111) break;
        EUDBreak()
        # (Line 112) case 124:
    _t8 = EUDSwitchCase()
    # (Line 113) s.print(ptr2s(st.System_Text[0]), ptr2s(st.Shop_Text[2]));
    if _t8(124):
        s.print(ptr2s(st.System_Text[0]), ptr2s(st.Shop_Text[2]))
        # (Line 114) s.print("　　　　　　　\x04프로덕션 발전 ", v.shop_Info[0], " 단계", " [ ", v.shop_Info[1], "/",v.shop_need[v.shop_Info[0]], " ] \x19 + ", v.shop_need[v.shop_Info[0]] * 2, " \x04골드");
        s.print("　　　　　　　\x04프로덕션 발전 ", v.shop_Info[0], " 단계", " [ ", v.shop_Info[1], "/", v.shop_need[v.shop_Info[0]], " ] \x19 + ", v.shop_need[v.shop_Info[0]] * 2, " \x04골드")
        # (Line 115) id.Unit_ID[cp] = 1000;
        _ARRW(id.Unit_ID, cp) << (1000)
        # (Line 116) break;
        EUDBreak()
        # (Line 117) case 150:
    _t9 = EUDSwitchCase()
    # (Line 118) s.print(ptr2s(st.System_Text[0]), ptr2s(st.Shop_Text[3]));
    if _t9(150):
        s.print(ptr2s(st.System_Text[0]), ptr2s(st.Shop_Text[3]))
        # (Line 119) id.Unit_ID[cp] = 1000;
        _ARRW(id.Unit_ID, cp) << (1000)
        # (Line 120) break;
        EUDBreak()
        # (Line 121) case 144:
    _t10 = EUDSwitchCase()
    # (Line 122) s.print(ptr2s(st.System_Text[0]), ptr2s(st.Shop_Text[4]));
    if _t10(144):
        s.print(ptr2s(st.System_Text[0]), ptr2s(st.Shop_Text[4]))
        # (Line 123) id.Unit_ID[cp] = 1000;
        _ARRW(id.Unit_ID, cp) << (1000)
        # (Line 124) break;
        EUDBreak()
        # (Line 125) case 134:
    _t11 = EUDSwitchCase()
    # (Line 126) s.print(ptr2s(st.System_Text[0]), ptr2s(st.Shop_Text[5]));
    if _t11(134):
        s.print(ptr2s(st.System_Text[0]), ptr2s(st.Shop_Text[5]))
        # (Line 127) id.Unit_ID[cp] = 1000;
        _ARRW(id.Unit_ID, cp) << (1000)
        # (Line 128) break;
        EUDBreak()
        # (Line 129) case 162:
    _t12 = EUDSwitchCase()
    # (Line 130) s.print(ptr2s(st.System_Text[0]), ptr2s(st.Shop_Text[6]));
    if _t12(162):
        s.print(ptr2s(st.System_Text[0]), ptr2s(st.Shop_Text[6]))
        # (Line 131) id.Unit_ID[cp] = 1000;
        _ARRW(id.Unit_ID, cp) << (1000)
        # (Line 132) break;
        EUDBreak()
        # (Line 135) case 34:
    _t13 = EUDSwitchCase()
    # (Line 136) if (id.PlayerID[cp] == 6)
    if _t13(34):
        if EUDIf()(id.PlayerID[cp] == 6):
            # (Line 137) {
            # (Line 138) s.print("\x13", ptr2s(GetTBLAddr(35)), "\x04 : ", ptr2s(st.Shop_Misaki_Text[dwrand() % 5]));
            s.print("\x13", ptr2s(GetTBLAddr(35)), "\x04 : ", ptr2s(st.Shop_Misaki_Text[f_dwrand() % 5]))
            # (Line 139) id.Unit_ID[cp] = 1000;
            _ARRW(id.Unit_ID, cp) << (1000)
            # (Line 140) }
            # (Line 141) break;
        EUDEndIf()
        EUDBreak()
        # (Line 142) }
    # (Line 143) }
    EUDEndSwitch()
