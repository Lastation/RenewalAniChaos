## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Angel.Variable as v;
from Angel import Variable as v
# (Line 2) import Weapon as w;
import Weapon as w
# (Line 3) import Angel.Main as m;
from Angel import Main as m
# (Line 5) function Init_Effect();
# (Line 6) function Update_Effect();
# (Line 8) function Effect_Unit(id, type);
# (Line 9) function Effect_Type(id, type, condition);
# (Line 11) function Effect_Speed(id);
# (Line 12) function Effect_Speed_Reset(id);
# (Line 14) function Effect_Damage(id);
# (Line 15) function Effect_Damage_Reset(id);
# (Line 17) function Init_Effect()
# (Line 18) {
@EUDFunc
def Init_Effect():
    # (Line 20) }
    # (Line 22) function Update_Effect()
    pass

# (Line 23) {
@EUDFunc
def Update_Effect():
    # (Line 25) Effect_Unit(1, 0);
    Effect_Unit(1, 0)
    # (Line 26) Effect_Unit(9, 0);
    Effect_Unit(9, 0)
    # (Line 29) Effect_Unit(2, 1);
    Effect_Unit(2, 1)
    # (Line 32) Effect_Unit(0, 2);
    Effect_Unit(0, 2)
    # (Line 33) Effect_Unit(10, 2);
    Effect_Unit(10, 2)
    # (Line 36) Effect_Unit(v.Unit_ID[6], 3);
    Effect_Unit(v.Unit_ID[6], 3)
    # (Line 37) }
    # (Line 39) function Effect_Dear(id)

# (Line 40) {
@EUDFunc
def Effect_Dear(id):
    # (Line 41) switch(v.Dear_Ablity[id])
    EUDSwitch(v.Dear_Ablity[id])
    # (Line 42) {
    # (Line 43) case 0:
    _t1 = EUDSwitchCase()
    # (Line 44) v.Unit_Atk[id] = v.Base_Atk[id] + ((v.Base_Atk[id] * v.Dear_Multiply[id] * v.Dear_Level[id]) / 100);
    if _t1(0):
        _ARRW(v.Unit_Atk, id) << (v.Base_Atk[id] + ((v.Base_Atk[id] * v.Dear_Multiply[id] * v.Dear_Level[id]) // 100))
        # (Line 45) w.Set_Atk(v.Unit_AtkID[id], v.Unit_Atk[id]);
        w.Set_Atk(v.Unit_AtkID[id], v.Unit_Atk[id])
        # (Line 46) break;
        EUDBreak()
        # (Line 47) case 1:
    _t2 = EUDSwitchCase()
    # (Line 48) v.Unit_AtkExplosion[id] = 3;
    if _t2(1):
        _ARRW(v.Unit_AtkExplosion, id) << (3)
        # (Line 49) v.Unit_Atksplash[id] += v.Dear_Multiply[id];
        _ARRW(v.Unit_Atksplash, id).__iadd__(v.Dear_Multiply[id])
        # (Line 50) w.Set_AtkExplosion(v.Unit_AtkID[id], v.Unit_AtkExplosion[id]);
        w.Set_AtkExplosion(v.Unit_AtkID[id], v.Unit_AtkExplosion[id])
        # (Line 51) w.Set_AtkSplash(v.Unit_AtkID[id], v.Unit_Atksplash[id]);
        w.Set_AtkSplash(v.Unit_AtkID[id], v.Unit_Atksplash[id])
        # (Line 52) m.Update_AtkText(id);
        m.Update_AtkText(id)
        # (Line 53) break;
        EUDBreak()
        # (Line 54) case 2:
    _t3 = EUDSwitchCase()
    # (Line 55) v.Unit_Atkspeed[id] = (v.Base_Atkspeed[id] * (100 - ((v.Dear_Level[id] * v.Dear_Multiply[id] * 100) / (v.Dear_Level[id] * v.Dear_Multiply[id] + 100)))) / 100;
    if _t3(2):
        _ARRW(v.Unit_Atkspeed, id) << ((v.Base_Atkspeed[id] * (100 - ((v.Dear_Level[id] * v.Dear_Multiply[id] * 100) // (v.Dear_Level[id] * v.Dear_Multiply[id] + 100)))) // 100)
        # (Line 56) w.Set_AtkSpeed(v.Unit_AtkID[id], v.Unit_Atkspeed[id]);
        w.Set_AtkSpeed(v.Unit_AtkID[id], v.Unit_Atkspeed[id])
        # (Line 57) m.Update_AtkText(id);
        m.Update_AtkText(id)
        # (Line 58) break;
        EUDBreak()
        # (Line 59) }
    # (Line 60) }
    EUDEndSwitch()
    # (Line 62) function Effect_Unit(id, type)		// 0 - Atk, 1 - Gold, 2 - Spd, 3 - Unit hp

# (Line 63) {
@EUDFunc
def Effect_Unit(id, type):
    # (Line 64) if (Bring(Force1, AtLeast, 1, v.Unit_ID[id], "Anywhere"))
    if EUDIf()(Bring(Force1, AtLeast, 1, v.Unit_ID[id], "Anywhere")):
        # (Line 65) {
        # (Line 66) v.Album_Delay[id] += 1;
        _ARRW(v.Album_Delay, id).__iadd__(1)
        # (Line 67) switch(type)
        EUDSwitch(type)
        # (Line 68) {
        # (Line 69) case 0:
        _t2 = EUDSwitchCase()
        # (Line 70) if (v.Album_Delay[id] >= 60)
        if _t2(0):
            if EUDIf()(v.Album_Delay[id] >= 60):
                # (Line 71) {
                # (Line 72) Effect_Type(id, type, 0);
                Effect_Type(id, type, 0)
                # (Line 73) v.Album_EffectTime[id] = 5;
                _ARRW(v.Album_EffectTime, id) << (5)
                # (Line 74) v.Album_Delay[id] = 0;
                _ARRW(v.Album_Delay, id) << (0)
                # (Line 75) }
                # (Line 76) else if (v.Album_EffectTime[id] > 1)
            if EUDElseIf()(v.Album_EffectTime[id] <= 1, neg=True):
                # (Line 77) {
                # (Line 78) v.Album_EffectTime[id] -= 1;
                _ARRW(v.Album_EffectTime, id).__isub__(1)
                # (Line 79) }
                # (Line 80) else if (v.Album_EffectTime[id] == 1)
            if EUDElseIf()(v.Album_EffectTime[id] == 1):
                # (Line 81) {
                # (Line 82) Effect_Type(id, type, 1);
                Effect_Type(id, type, 1)
                # (Line 83) v.Album_EffectTime[id] = 0;
                _ARRW(v.Album_EffectTime, id) << (0)
                # (Line 84) }
                # (Line 85) break;
            EUDEndIf()
            EUDBreak()
            # (Line 86) case 1:
        _t6 = EUDSwitchCase()
        # (Line 87) if (v.Album_Delay[id] >= 60)
        if _t6(1):
            if EUDIf()(v.Album_Delay[id] >= 60):
                # (Line 88) {
                # (Line 89) v.Album_Delay[id] = 0;
                _ARRW(v.Album_Delay, id) << (0)
                # (Line 90) SetResources(Force1, Add, v.Album_Multiply[id] * v.Album_Level[id], Ore);
                # (Line 91) }
                DoActions(SetResources(Force1, Add, v.Album_Multiply[id] * v.Album_Level[id], Ore))
                # (Line 92) break;
            EUDEndIf()
            EUDBreak()
            # (Line 93) case 2:
        _t8 = EUDSwitchCase()
        # (Line 94) if (v.Album_Delay[id] >= 60)
        if _t8(2):
            if EUDIf()(v.Album_Delay[id] >= 60):
                # (Line 95) {
                # (Line 96) Effect_Type(id, type, 0);
                Effect_Type(id, type, 0)
                # (Line 97) v.Album_EffectTime[id] = 10;
                _ARRW(v.Album_EffectTime, id) << (10)
                # (Line 98) v.Album_Delay[id] = 0;
                _ARRW(v.Album_Delay, id) << (0)
                # (Line 99) }
                # (Line 100) else if (v.Album_EffectTime[id] > 1)
            if EUDElseIf()(v.Album_EffectTime[id] <= 1, neg=True):
                # (Line 101) {
                # (Line 102) v.Album_EffectTime[id] -= 1;
                _ARRW(v.Album_EffectTime, id).__isub__(1)
                # (Line 103) }
                # (Line 104) else if (v.Album_EffectTime[id] == 1)
            if EUDElseIf()(v.Album_EffectTime[id] == 1):
                # (Line 105) {
                # (Line 106) Effect_Type(id, type, 1);
                Effect_Type(id, type, 1)
                # (Line 107) v.Album_EffectTime[id] = 0;
                _ARRW(v.Album_EffectTime, id) << (0)
                # (Line 108) }
                # (Line 109) break;
            EUDEndIf()
            EUDBreak()
            # (Line 110) case 3:
        _t12 = EUDSwitchCase()
        # (Line 111) if (v.Album_Delay[id] >= v.Album_Multiply[id] - v.Album_Level[id] && v.Album_Level[id] >= 1)
        if _t12(3):
            if EUDIf()(EUDSCAnd()(v.Album_Delay[id] >= v.Album_Multiply[id] - v.Album_Level[id])(v.Album_Level[id] >= 1)()):
                # (Line 112) {
                # (Line 113) v.Album_Delay[id] = 0;
                _ARRW(v.Album_Delay, id) << (0)
                # (Line 114) ModifyUnitHitPoints(1, 95, P7, "Player1", 1);
                # (Line 115) ModifyUnitHitPoints(1, 95, P7, "Player2", 1);
                DoActions(ModifyUnitHitPoints(1, 95, P7, "Player1", 1))
                # (Line 116) ModifyUnitHitPoints(1, 95, P7, "Player3", 1);
                DoActions(ModifyUnitHitPoints(1, 95, P7, "Player2", 1))
                # (Line 117) ModifyUnitHitPoints(1, 95, P7, "Player4", 1);
                DoActions(ModifyUnitHitPoints(1, 95, P7, "Player3", 1))
                # (Line 118) ModifyUnitHitPoints(1, 95, P7, "Player5", 1);
                DoActions(ModifyUnitHitPoints(1, 95, P7, "Player4", 1))
                # (Line 119) }
                DoActions(ModifyUnitHitPoints(1, 95, P7, "Player5", 1))
                # (Line 120) break;
            EUDEndIf()
            EUDBreak()
            # (Line 121) }
        # (Line 122) }
        EUDEndSwitch()
        # (Line 123) }
    EUDEndIf()
    # (Line 125) function Effect_Type(id, type, condition)

# (Line 126) {
@EUDFunc
def Effect_Type(id, type, condition):
    # (Line 127) switch(condition)
    EUDSwitch(condition)
    # (Line 128) {
    # (Line 129) case 0:
    _t1 = EUDSwitchCase()
    # (Line 130) switch(type)
    if _t1(0):
        EUDSwitch(type)
        # (Line 131) {
        # (Line 132) case 0:
        _t2 = EUDSwitchCase()
        # (Line 133) Effect_Damage(id);
        if _t2(0):
            Effect_Damage(id)
            # (Line 134) break;
            EUDBreak()
            # (Line 135) case 1:
        _t3 = EUDSwitchCase()
        # (Line 136) break;
        if _t3(1):
            EUDBreak()
            # (Line 137) case 2:
        _t4 = EUDSwitchCase()
        # (Line 138) Effect_Speed(id);
        if _t4(2):
            Effect_Speed(id)
            # (Line 139) break;
            EUDBreak()
            # (Line 140) }
        # (Line 141) break;
        EUDEndSwitch()
        EUDBreak()
        # (Line 142) case 1:
    _t5 = EUDSwitchCase()
    # (Line 143) switch(type)
    if _t5(1):
        EUDSwitch(type)
        # (Line 144) {
        # (Line 145) case 0:
        _t6 = EUDSwitchCase()
        # (Line 146) Effect_Damage_Reset(id);
        if _t6(0):
            Effect_Damage_Reset(id)
            # (Line 147) break;
            EUDBreak()
            # (Line 148) case 1:
        _t7 = EUDSwitchCase()
        # (Line 149) break;
        if _t7(1):
            EUDBreak()
            # (Line 150) case 2:
        _t8 = EUDSwitchCase()
        # (Line 151) Effect_Speed_Reset(id);
        if _t8(2):
            Effect_Speed_Reset(id)
            # (Line 152) break;
            EUDBreak()
            # (Line 153) }
        # (Line 154) break;
        EUDEndSwitch()
        EUDBreak()
        # (Line 155) }
    # (Line 156) }
    EUDEndSwitch()
    # (Line 158) function Effect_Speed(id)

# (Line 159) {
@EUDFunc
def Effect_Speed(id):
    # (Line 160) w.Set_AtkSpeed(v.Unit_AtkID[id], (v.Unit_Atkspeed[id] * (100 - ((v.Album_Level[id] * v.Album_Multiply[id] * 100) / (v.Album_Level[id] * v.Album_Multiply[id] + 100)))) / 100);
    w.Set_AtkSpeed(v.Unit_AtkID[id], (v.Unit_Atkspeed[id] * (100 - ((v.Album_Level[id] * v.Album_Multiply[id] * 100) // (v.Album_Level[id] * v.Album_Multiply[id] + 100)))) // 100)
    # (Line 161) m.Update_AtkText(id);
    m.Update_AtkText(id)
    # (Line 162) }
    # (Line 164) function Effect_Speed_Reset(id)

# (Line 165) {
@EUDFunc
def Effect_Speed_Reset(id):
    # (Line 166) w.Set_AtkSpeed(v.Unit_AtkID[id], v.Unit_Atkspeed[id]);
    w.Set_AtkSpeed(v.Unit_AtkID[id], v.Unit_Atkspeed[id])
    # (Line 167) m.Update_AtkText(id);
    m.Update_AtkText(id)
    # (Line 168) }
    # (Line 170) function Effect_Damage(id)

# (Line 171) {
@EUDFunc
def Effect_Damage(id):
    # (Line 172) w.Set_Atk(v.Unit_AtkID[id], v.Unit_Atk[id] + (v.Unit_Atk[id] * v.Album_Level[id] * v.Album_Multiply[id]) / 100);
    w.Set_Atk(v.Unit_AtkID[id], v.Unit_Atk[id] + (v.Unit_Atk[id] * v.Album_Level[id] * v.Album_Multiply[id]) // 100)
    # (Line 173) w.Set_AtkBouns(v.Unit_AtkID[id], v.Unit_Atkbouns[id] + (v.Unit_Atkbouns[id] * v.Album_Level[id] * v.Album_Multiply[id]) / 100);
    w.Set_AtkBouns(v.Unit_AtkID[id], v.Unit_Atkbouns[id] + (v.Unit_Atkbouns[id] * v.Album_Level[id] * v.Album_Multiply[id]) // 100)
    # (Line 174) }
    # (Line 176) function Effect_Damage_Reset(id)

# (Line 177) {
@EUDFunc
def Effect_Damage_Reset(id):
    # (Line 178) w.Set_Atk(v.Unit_AtkID[id], v.Unit_Atk[id]);
    w.Set_Atk(v.Unit_AtkID[id], v.Unit_Atk[id])
    # (Line 179) w.Set_AtkBouns(v.Unit_AtkID[id], v.Unit_Atkbouns[id]);
    w.Set_AtkBouns(v.Unit_AtkID[id], v.Unit_Atkbouns[id])
    # (Line 180) }
