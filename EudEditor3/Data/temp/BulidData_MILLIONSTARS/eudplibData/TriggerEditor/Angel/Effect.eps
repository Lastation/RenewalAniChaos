import Angel.Variable as v;
import Weapon as w;
import Angel.Main as m;

function Init_Effect();
function Update_Effect();

function Effect_Unit(id, type);
function Effect_Type(id, type, condition);

function Effect_Speed(id);
function Effect_Speed_Reset(id);

function Effect_Damage(id);
function Effect_Damage_Reset(id);

function Init_Effect()
{
	
}

function Update_Effect()
{
	// Atk
	Effect_Unit(1, 0);
	Effect_Unit(9, 0);
	
	// Gold
	Effect_Unit(2, 1);
	
	// Spd
	Effect_Unit(0, 2);
	Effect_Unit(10, 2);
	
	// Unit Hp
	Effect_Unit(v.Unit_ID[6], 3);
}

function Effect_Dear(id)
{
	switch(v.Dear_Ablity[id])
	{
	case 0:
		v.Unit_Atk[id] = v.Base_Atk[id] + ((v.Base_Atk[id] * v.Dear_Multiply[id] * v.Dear_Level[id]) / 100);
		w.Set_Atk(v.Unit_AtkID[id], v.Unit_Atk[id]);
		break;
	case 1:
		v.Unit_AtkExplosion[id] = 3;
		v.Unit_Atksplash[id] += v.Dear_Multiply[id];
		w.Set_AtkExplosion(v.Unit_AtkID[id], v.Unit_AtkExplosion[id]);
		w.Set_AtkSplash(v.Unit_AtkID[id], v.Unit_Atksplash[id]);
		m.Update_AtkText(id);
		break;
	case 2:
		v.Unit_Atkspeed[id] = (v.Base_Atkspeed[id] * (100 - ((v.Dear_Level[id] * v.Dear_Multiply[id] * 100) / (v.Dear_Level[id] * v.Dear_Multiply[id] + 100)))) / 100;
		w.Set_AtkSpeed(v.Unit_AtkID[id], v.Unit_Atkspeed[id]);
		m.Update_AtkText(id);
		break;
	}
}

function Effect_Unit(id, type)		// 0 - Atk, 1 - Gold, 2 - Spd, 3 - Unit hp
{
	if (Bring(Force1, AtLeast, 1, v.Unit_ID[id], "Anywhere"))
	{
		v.Album_Delay[id] += 1;
		switch(type)
		{
		case 0:
			if (v.Album_Delay[id] >= 60)
			{
				Effect_Type(id, type, 0);
				v.Album_EffectTime[id] = 5;
				v.Album_Delay[id] = 0;
			}
			else if (v.Album_EffectTime[id] > 1)
			{
				v.Album_EffectTime[id] -= 1;
			}
			else if (v.Album_EffectTime[id] == 1)
			{
				Effect_Type(id, type, 1);
				v.Album_EffectTime[id] = 0;
			}
			break;
		case 1:
			if (v.Album_Delay[id] >= 60)
			{
				v.Album_Delay[id] = 0;
				SetResources(Force1, Add, v.Album_Multiply[id] * v.Album_Level[id], Ore);
			}
			break;
		case 2:
			if (v.Album_Delay[id] >= 60)
			{
				Effect_Type(id, type, 0);
				v.Album_EffectTime[id] = 10;
				v.Album_Delay[id] = 0;
			}
			else if (v.Album_EffectTime[id] > 1)
			{
				v.Album_EffectTime[id] -= 1;
			}
			else if (v.Album_EffectTime[id] == 1)
			{
				Effect_Type(id, type, 1);
				v.Album_EffectTime[id] = 0;
			}
			break;
		case 3:
			if (v.Album_Delay[id] >= v.Album_Multiply[id] - v.Album_Level[id])
			{
				v.Album_Delay[id] = 0;
				ModifyUnitHitPoints(1, 95, P7, "Player1", 1);
				ModifyUnitHitPoints(1, 95, P7, "Player2", 1);
				ModifyUnitHitPoints(1, 95, P7, "Player3", 1);
				ModifyUnitHitPoints(1, 95, P7, "Player4", 1);
				ModifyUnitHitPoints(1, 95, P7, "Player5", 1);
			}
			break;
		}
	}
}

function Effect_Type(id, type, condition)
{
	switch(condition)
	{
	case 0:
		switch(type)
		{
		case 0:
			Effect_Damage(id);
			break;
		case 1:
			break;
		case 2:
			Effect_Speed(id);
			break;
		}
		break;
	case 1:
		switch(type)
		{
		case 0:
			Effect_Damage_Reset(id);
			break;
		case 1:
			break;
		case 2:
			Effect_Speed_Reset(id);
			break;
		}
		break;
	}
}

function Effect_Speed(id)
{
	w.Set_AtkSpeed(v.Unit_AtkID[id], (v.Unit_Atkspeed[id] * (100 - ((v.Album_Level[id] * v.Album_Multiply[id] * 100) / (v.Album_Level[id] * v.Album_Multiply[id] + 100)))) / 100);
	m.Update_AtkText(id);
}

function Effect_Speed_Reset(id)
{
	w.Set_AtkSpeed(v.Unit_AtkID[id], v.Unit_Atkspeed[id]);
	m.Update_AtkText(id);
}

function Effect_Damage(id)
{
	w.Set_Atk(v.Unit_AtkID[id], v.Unit_Atk[id] + (v.Unit_Atk[id] * v.Album_Level[id] * v.Album_Multiply[id]) / 100);
	w.Set_AtkBouns(v.Unit_AtkID[id], v.Unit_Atkbouns[id] + (v.Unit_Atkbouns[id] * v.Album_Level[id] * v.Album_Multiply[id]) / 100);
}

function Effect_Damage_Reset(id)
{
	w.Set_Atk(v.Unit_AtkID[id], v.Unit_Atk[id]);
	w.Set_AtkBouns(v.Unit_AtkID[id], v.Unit_Atkbouns[id]);
}