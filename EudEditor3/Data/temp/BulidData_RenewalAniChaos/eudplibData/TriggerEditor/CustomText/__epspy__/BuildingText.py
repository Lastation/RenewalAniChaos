## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import customText as tct;
import customText as tct
# (Line 2) import Variable as v;
import Variable as v
# (Line 4) var txtPtr, btnPtr, btnPos, oldCP;
txtPtr, btnPtr, btnPos, oldCP = EUDCreateVariables(4)
# (Line 5) const trgk = $T('Artanis & safhfh');
trgk = _CGFW(lambda: [GetStringIndex('Artanis & safhfh')], 1)[0]
# (Line 7) function BuildingText()
# (Line 8) {
@EUDFunc
def BuildingText():
    # (Line 9) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 11) if (v.Unit_ID[cp] >= 1)
    if EUDIf()(v.Unit_ID[cp] >= 1):
        # (Line 12) {
        # (Line 13) switch(v.Unit_ID[cp])
        EUDSwitch(v.Unit_ID[cp])
        # (Line 14) {
        # (Line 15) case 81:
        _t2 = EUDSwitchCase()
        # (Line 16) txtPtr = dwread_epd(EPD(0x640B58));
        if _t2(81):
            txtPtr << (f_dwread_epd(EPD(0x640B58)))
            # (Line 17) tct.print("\x13\x19[ \x1FP\x04olarlicht \x19]\n\x13\x04\x1955초 \x04마다 Hoffnung [용병] 스텍이 5 추가로 증가합니다.\n\n\x13\x04남은 체력 : ", v.Unit_HP[cp], " / 30000");
            tct.f_print("\x13\x19[ \x1FP\x04olarlicht \x19]\n\x13\x04\x1955초 \x04마다 Hoffnung [용병] 스텍이 5 추가로 증가합니다.\n\n\x13\x04남은 체력 : ", v.Unit_HP[cp], " / 30000")
            # (Line 18) SetMemory(0x640B58, SetTo, txtPtr);
            # (Line 19) break;
            DoActions(SetMemory(0x640B58, SetTo, txtPtr))
            EUDBreak()
            # (Line 20) case 79:
        _t3 = EUDSwitchCase()
        # (Line 21) txtPtr = dwread_epd(EPD(0x640B58));
        if _t3(79):
            txtPtr << (f_dwread_epd(EPD(0x640B58)))
            # (Line 22) tct.print("\x13\x19[ \x1BS\x04chnee \x19]\n\x13\x04제거시 \x1B신전 \x04의 무적이 해제됩니다.\n\n\x13\x04남은 체력 : ", v.Unit_HP[cp], " / 110000");
            tct.f_print("\x13\x19[ \x1BS\x04chnee \x19]\n\x13\x04제거시 \x1B신전 \x04의 무적이 해제됩니다.\n\n\x13\x04남은 체력 : ", v.Unit_HP[cp], " / 110000")
            # (Line 23) SetMemory(0x640B58, SetTo, txtPtr);
            # (Line 24) break;
            DoActions(SetMemory(0x640B58, SetTo, txtPtr))
            EUDBreak()
            # (Line 25) case 168:
        _t4 = EUDSwitchCase()
        # (Line 26) txtPtr = dwread_epd(EPD(0x640B58));
        if _t4(168):
            txtPtr << (f_dwread_epd(EPD(0x640B58)))
            # (Line 27) tct.print("\x13\x19[ \x1BB\x04runnen \x19]\n\x13\x04모두 제거시 \x1BS\x04chnee [수호자] 의 무적이 해제됩니다.\n\n\x13\x04남은 체력 : ", v.Unit_HP[cp], " / 50000");
            tct.f_print("\x13\x19[ \x1BB\x04runnen \x19]\n\x13\x04모두 제거시 \x1BS\x04chnee [수호자] 의 무적이 해제됩니다.\n\n\x13\x04남은 체력 : ", v.Unit_HP[cp], " / 50000")
            # (Line 28) SetMemory(0x640B58, SetTo, txtPtr);
            # (Line 29) break;
            DoActions(SetMemory(0x640B58, SetTo, txtPtr))
            EUDBreak()
            # (Line 30) case 175:
        _t5 = EUDSwitchCase()
        # (Line 31) txtPtr = dwread_epd(EPD(0x640B58));
        if _t5(175):
            txtPtr << (f_dwread_epd(EPD(0x640B58)))
            # (Line 32) tct.print("\x13\x19[ \x1BM\x04ond \x19]\n\n\x13\x04남은 체력 : ", v.Unit_HP[cp], " / 200000");
            tct.f_print("\x13\x19[ \x1BM\x04ond \x19]\n\n\x13\x04남은 체력 : ", v.Unit_HP[cp], " / 200000")
            # (Line 33) SetMemory(0x640B58, SetTo, txtPtr);
            # (Line 34) break;
            DoActions(SetMemory(0x640B58, SetTo, txtPtr))
            EUDBreak()
            # (Line 35) case 189:
        _t6 = EUDSwitchCase()
        # (Line 36) txtPtr = dwread_epd(EPD(0x640B58));
        if _t6(189):
            txtPtr << (f_dwread_epd(EPD(0x640B58)))
            # (Line 37) tct.print("\x13\x19[ \x1BP\x04ortal \x19]\n\n\x13\x04상점에 들어가거나 원하는 라인으로 이동 해주는 건물입니다.");
            tct.f_print("\x13\x19[ \x1BP\x04ortal \x19]\n\n\x13\x04상점에 들어가거나 원하는 라인으로 이동 해주는 건물입니다.")
            # (Line 38) SetMemory(0x640B58, SetTo, txtPtr);
            # (Line 39) break;
            DoActions(SetMemory(0x640B58, SetTo, txtPtr))
            EUDBreak()
            # (Line 40) case 200:
        _t7 = EUDSwitchCase()
        # (Line 41) txtPtr = dwread_epd(EPD(0x640B58));
        if _t7(200):
            txtPtr << (f_dwread_epd(EPD(0x640B58)))
            # (Line 42) tct.print("\x13\x19[ \x1BW\x04ald \x19]\n\x13\x04제거시 \x1B방어건물 \x04의 무적이 해제됩니다.\n\n\x13\x04남은 체력 : ", v.Unit_HP[cp], " / 70000");
            tct.f_print("\x13\x19[ \x1BW\x04ald \x19]\n\x13\x04제거시 \x1B방어건물 \x04의 무적이 해제됩니다.\n\n\x13\x04남은 체력 : ", v.Unit_HP[cp], " / 70000")
            # (Line 43) SetMemory(0x640B58, SetTo, txtPtr);
            # (Line 44) break;
            DoActions(SetMemory(0x640B58, SetTo, txtPtr))
            EUDBreak()
            # (Line 45) }
        # (Line 46) }
        EUDEndSwitch()
        # (Line 47) }
    EUDEndIf()
