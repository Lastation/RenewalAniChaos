## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import customText as tct;
import customText as tct
# (Line 2) import Variable as v;
import Variable as v
# (Line 4) var txtPtr, btnPtr, btnPos, oldCP;
txtPtr, btnPtr, btnPos, oldCP = EUDCreateVariables(4)
# (Line 5) const trgk = $T('Artanis & safhfh');
trgk = _CGFW(lambda: [GetStringIndex('Artanis & safhfh')], 1)[0]
# (Line 6) const cp = getcurpl();
cp = _CGFW(lambda: [f_getcurpl()], 1)[0]
# (Line 8) function ShopText()
# (Line 9) {
@EUDFunc
def ShopText():
    # (Line 10) if (v.Unit_ID[cp] >= 1)
    if EUDIf()(v.Unit_ID[cp] >= 1):
        # (Line 11) {
        # (Line 12) if (v.PlayerID[cp] == 6 || v.PlayerID[cp] == 7)
        if EUDIf()(EUDSCOr()(v.PlayerID[cp] == 6)(v.PlayerID[cp] == 7)()):
            # (Line 13) {
            # (Line 14) switch(v.Unit_ID[cp])
            EUDSwitch(v.Unit_ID[cp])
            # (Line 15) {
            # (Line 16) case 122:
            _t3 = EUDSwitchCase()
            # (Line 17) txtPtr = dwread_epd(EPD(0x640B58));
            if _t3(122):
                txtPtr << (f_dwread_epd(EPD(0x640B58)))
                # (Line 18) tct.print("\n\n\x13\x19[ \x04Upgrade \x19]\n\n\x13\x04영웅의 능력을 업그레이드 하는 곳 입니다.\n\n");
                tct.f_print("\n\n\x13\x19[ \x04Upgrade \x19]\n\n\x13\x04영웅의 능력을 업그레이드 하는 곳 입니다.\n\n")
                # (Line 19) SetMemory(0x640B58, SetTo, txtPtr);
                # (Line 20) v.Unit_ID[cp] = 0;
                DoActions(SetMemory(0x640B58, SetTo, txtPtr))
                _ARRW(v.Unit_ID, cp) << (0)
                # (Line 21) break;
                EUDBreak()
                # (Line 22) case 125:
            _t4 = EUDSwitchCase()
            # (Line 23) txtPtr = dwread_epd(EPD(0x640B58));
            if _t4(125):
                txtPtr << (f_dwread_epd(EPD(0x640B58)))
                # (Line 24) tct.print("\n\n\x13\x19[ \x04Shield \x19]\n\n\x13\x04- \x19수호자 사망\x04시 구입 가능합니다.\n\x13\x04- 신전의 쉴드량이 \x19100%\x04로 회복됩니다.\n\n\x13\x04- 무제한 구입 가능합니다.\n\n");
                tct.f_print("\n\n\x13\x19[ \x04Shield \x19]\n\n\x13\x04- \x19수호자 사망\x04시 구입 가능합니다.\n\x13\x04- 신전의 쉴드량이 \x19100%\x04로 회복됩니다.\n\n\x13\x04- 무제한 구입 가능합니다.\n\n")
                # (Line 25) SetMemory(0x640B58, SetTo, txtPtr);
                # (Line 26) v.Unit_ID[cp] = 0;
                DoActions(SetMemory(0x640B58, SetTo, txtPtr))
                _ARRW(v.Unit_ID, cp) << (0)
                # (Line 27) break;
                EUDBreak()
                # (Line 28) case 216:
            _t5 = EUDSwitchCase()
            # (Line 29) txtPtr = dwread_epd(EPD(0x640B58));
            if _t5(216):
                txtPtr << (f_dwread_epd(EPD(0x640B58)))
                # (Line 30) tct.print("\n\n\x13\x19[ \x04Potion Discount \x19]\n\n\x13\x04- 포션 가격이 \x1920% \x04할인됩니다.\n\n\x13\x04- \x191 \x04회 구입 가능합니다.\n\n");
                tct.f_print("\n\n\x13\x19[ \x04Potion Discount \x19]\n\n\x13\x04- 포션 가격이 \x1920% \x04할인됩니다.\n\n\x13\x04- \x191 \x04회 구입 가능합니다.\n\n")
                # (Line 31) SetMemory(0x640B58, SetTo, txtPtr);
                # (Line 32) v.Unit_ID[cp] = 0;
                DoActions(SetMemory(0x640B58, SetTo, txtPtr))
                _ARRW(v.Unit_ID, cp) << (0)
                # (Line 33) break;
                EUDBreak()
                # (Line 34) case 217:
            _t6 = EUDSwitchCase()
            # (Line 35) txtPtr = dwread_epd(EPD(0x640B58));
            if _t6(217):
                txtPtr << (f_dwread_epd(EPD(0x640B58)))
                # (Line 36) tct.print("\n\n\x13\x19[ \x04Mana Disk \x19]\n\n\x13\x04- 가스 회복량이 \x1950% \x04증가됩니다.\n\n\x13\x04- \x192 \x04회 구입 가능합니다.\n\n");
                tct.f_print("\n\n\x13\x19[ \x04Mana Disk \x19]\n\n\x13\x04- 가스 회복량이 \x1950% \x04증가됩니다.\n\n\x13\x04- \x192 \x04회 구입 가능합니다.\n\n")
                # (Line 37) SetMemory(0x640B58, SetTo, txtPtr);
                # (Line 38) v.Unit_ID[cp] = 0;
                DoActions(SetMemory(0x640B58, SetTo, txtPtr))
                _ARRW(v.Unit_ID, cp) << (0)
                # (Line 39) break;
                EUDBreak()
                # (Line 40) case 219:
            _t7 = EUDSwitchCase()
            # (Line 41) txtPtr = dwread_epd(EPD(0x640B58));
            if _t7(219):
                txtPtr << (f_dwread_epd(EPD(0x640B58)))
                # (Line 42) tct.print("\n\n\x13\x19[ \x04Potion \x19]\n\n\x13\x04- \x19셔틀\x04 생산시 사용되는 아이템입니다.\n\x13\x04- 영웅의 체력을 \x19100%\x04로 회복시킵니다.\n\n\x13\x04- 최대 \x1915 \x04개 보유 가능합니다.\n\n");
                tct.f_print("\n\n\x13\x19[ \x04Potion \x19]\n\n\x13\x04- \x19셔틀\x04 생산시 사용되는 아이템입니다.\n\x13\x04- 영웅의 체력을 \x19100%\x04로 회복시킵니다.\n\n\x13\x04- 최대 \x1915 \x04개 보유 가능합니다.\n\n")
                # (Line 43) SetMemory(0x640B58, SetTo, txtPtr);
                # (Line 44) v.Unit_ID[cp] = 0;
                DoActions(SetMemory(0x640B58, SetTo, txtPtr))
                _ARRW(v.Unit_ID, cp) << (0)
                # (Line 45) break;
                EUDBreak()
                # (Line 46) }
            # (Line 47) }
            EUDEndSwitch()
            # (Line 49) if (v.PlayerID[cp] == 10)
        EUDEndIf()
        if EUDIf()(v.PlayerID[cp] == 10):
            # (Line 50) {
            # (Line 51) switch(v.Unit_ID[cp])
            EUDSwitch(v.Unit_ID[cp])
            # (Line 52) {
            # (Line 53) case 39:
            _t9 = EUDSwitchCase()
            # (Line 54) txtPtr = dwread_epd(EPD(0x640B58));
            if _t9(39):
                txtPtr << (f_dwread_epd(EPD(0x640B58)))
                # (Line 55) tct.print("\n\n\x13\x19[ \x04Hoffnung \x19]\n\n\x13\x04- 아군 게이트가 \x19모두 파괴\x04되었을시 구입 가능합니다.\n\x13\x04- 맵상의 Hoffnung이 \x193마리 이하\x04일시 구입가능합니다.\n\n\x13\x04- \x19무제한 \x04구입 가능합니다.\n\n");
                tct.f_print("\n\n\x13\x19[ \x04Hoffnung \x19]\n\n\x13\x04- 아군 게이트가 \x19모두 파괴\x04되었을시 구입 가능합니다.\n\x13\x04- 맵상의 Hoffnung이 \x193마리 이하\x04일시 구입가능합니다.\n\n\x13\x04- \x19무제한 \x04구입 가능합니다.\n\n")
                # (Line 56) SetMemory(0x640B58, SetTo, txtPtr);
                # (Line 57) v.Unit_ID[cp] = 0;
                DoActions(SetMemory(0x640B58, SetTo, txtPtr))
                _ARRW(v.Unit_ID, cp) << (0)
                # (Line 58) break;
                EUDBreak()
                # (Line 59) case 169:
            _t10 = EUDSwitchCase()
            # (Line 60) txtPtr = dwread_epd(EPD(0x640B58));
            if _t10(169):
                txtPtr << (f_dwread_epd(EPD(0x640B58)))
                # (Line 61) tct.print("\n\n\x13\x19[ \x04C Skill \x19]\n\n\x13\x04- \x19C Skill [ 캐리어 ] \x04를 사용할수 있게 됩니다.\n\n\x13\x04- \x191 \x04회 구입 가능합니다.\n\n");
                tct.f_print("\n\n\x13\x19[ \x04C Skill \x19]\n\n\x13\x04- \x19C Skill [ 캐리어 ] \x04를 사용할수 있게 됩니다.\n\n\x13\x04- \x191 \x04회 구입 가능합니다.\n\n")
                # (Line 62) SetMemory(0x640B58, SetTo, txtPtr);
                # (Line 63) v.Unit_ID[cp] = 0;
                DoActions(SetMemory(0x640B58, SetTo, txtPtr))
                _ARRW(v.Unit_ID, cp) << (0)
                # (Line 64) break;
                EUDBreak()
                # (Line 65) case 170:
            _t11 = EUDSwitchCase()
            # (Line 66) txtPtr = dwread_epd(EPD(0x640B58));
            if _t11(170):
                txtPtr << (f_dwread_epd(EPD(0x640B58)))
                # (Line 67) tct.print("\n\n\x13\x19[ \x04A Skill \x19]\n\n\x13\x04- \x19A Skill [ 아비터 ] \x04를 사용할수 있게 됩니다.\n\n\x13\x04- \x191 \x04회 구입 가능합니다.\n\n");
                tct.f_print("\n\n\x13\x19[ \x04A Skill \x19]\n\n\x13\x04- \x19A Skill [ 아비터 ] \x04를 사용할수 있게 됩니다.\n\n\x13\x04- \x191 \x04회 구입 가능합니다.\n\n")
                # (Line 68) SetMemory(0x640B58, SetTo, txtPtr);
                # (Line 69) v.Unit_ID[cp] = 0;
                DoActions(SetMemory(0x640B58, SetTo, txtPtr))
                _ARRW(v.Unit_ID, cp) << (0)
                # (Line 70) break;
                EUDBreak()
                # (Line 71) }
            # (Line 72) }
            EUDEndSwitch()
            # (Line 73) }
        EUDEndIf()
        # (Line 74) }
    EUDEndIf()
