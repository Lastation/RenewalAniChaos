## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import Function as f;
import Function as f
# (Line 4) function FlowerShape(cp : TrgPlayer, count, Unit : TrgUnit, i, distance, interval);
# (Line 6) function main(cp)
# (Line 7) {
@EUDFunc
def f_main(cp):
    # (Line 8) if (f.delay[cp] == 0)
    if EUDIf()(f.delay[cp] == 0):
        # (Line 9) {
        # (Line 10) if (f.count[cp] == 0)
        if EUDIf()(f.count[cp] == 0):
            # (Line 11) {
            # (Line 12) if (f.loop[cp] < 4)
            if EUDIf()(f.loop[cp] >= 4, neg=True):
                # (Line 13) {
                # (Line 14) FlowerShape(cp, 1, "40 + 1n Mojo", 0, 50, 50);
                FlowerShape(cp, 1, "40 + 1n Mojo", 0, 50, 50)
                # (Line 15) FlowerShape(cp, 1, "40 + 1n Mojo", 1, 50, 50);
                FlowerShape(cp, 1, "40 + 1n Mojo", 1, 50, 50)
                # (Line 16) FlowerShape(cp, 1, "40 + 1n Mojo", 2, 50, 50);
                FlowerShape(cp, 1, "40 + 1n Mojo", 2, 50, 50)
                # (Line 17) FlowerShape(cp, 1, "40 + 1n Mojo", 3, 50, 50);
                FlowerShape(cp, 1, "40 + 1n Mojo", 3, 50, 50)
                # (Line 18) FlowerShape(cp, 1, "40 + 1n Mojo", 4, 50, 50);
                FlowerShape(cp, 1, "40 + 1n Mojo", 4, 50, 50)
                # (Line 19) FlowerShape(cp, 1, "60 + 1n Archon", 0, 50, 50);
                FlowerShape(cp, 1, "60 + 1n Archon", 0, 50, 50)
                # (Line 20) FlowerShape(cp, 1, "60 + 1n Archon", 1, 50, 50);
                FlowerShape(cp, 1, "60 + 1n Archon", 1, 50, 50)
                # (Line 21) FlowerShape(cp, 1, "60 + 1n Archon", 2, 50, 50);
                FlowerShape(cp, 1, "60 + 1n Archon", 2, 50, 50)
                # (Line 22) FlowerShape(cp, 1, "60 + 1n Archon", 3, 50, 50);
                FlowerShape(cp, 1, "60 + 1n Archon", 3, 50, 50)
                # (Line 23) FlowerShape(cp, 1, "60 + 1n Archon", 4, 50, 50);
                FlowerShape(cp, 1, "60 + 1n Archon", 4, 50, 50)
                # (Line 25) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp);
                # (Line 26) KillUnitAt(All, "60 + 1n Archon", "Anywhere", cp);
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp))
                # (Line 28) f.SkillWait(cp, 80);
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", cp))
                f.SkillWait(cp, 80)
                # (Line 30) f.loop[cp] += 1;
                _ARRW(f.loop, cp).__iadd__(1)
                # (Line 31) }
                # (Line 32) else if (f.loop[cp] == 4)
            if EUDElseIf()(f.loop[cp] == 4):
                # (Line 33) {
                # (Line 34) FlowerShape(cp, 1, "40 + 1n Guardian", 0, 50, 50);
                FlowerShape(cp, 1, "40 + 1n Guardian", 0, 50, 50)
                # (Line 35) FlowerShape(cp, 1, "40 + 1n Guardian", 1, 50, 50);
                FlowerShape(cp, 1, "40 + 1n Guardian", 1, 50, 50)
                # (Line 36) FlowerShape(cp, 1, "40 + 1n Guardian", 2, 50, 50);
                FlowerShape(cp, 1, "40 + 1n Guardian", 2, 50, 50)
                # (Line 37) FlowerShape(cp, 1, "40 + 1n Guardian", 3, 50, 50);
                FlowerShape(cp, 1, "40 + 1n Guardian", 3, 50, 50)
                # (Line 38) FlowerShape(cp, 1, "40 + 1n Guardian", 4, 50, 50);
                FlowerShape(cp, 1, "40 + 1n Guardian", 4, 50, 50)
                # (Line 39) FlowerShape(cp, 1, "Protoss Dark Archon", 0, 50, 50);
                FlowerShape(cp, 1, "Protoss Dark Archon", 0, 50, 50)
                # (Line 40) FlowerShape(cp, 1, "Protoss Dark Archon", 1, 50, 50);
                FlowerShape(cp, 1, "Protoss Dark Archon", 1, 50, 50)
                # (Line 41) FlowerShape(cp, 1, "Protoss Dark Archon", 2, 50, 50);
                FlowerShape(cp, 1, "Protoss Dark Archon", 2, 50, 50)
                # (Line 42) FlowerShape(cp, 1, "Protoss Dark Archon", 3, 50, 50);
                FlowerShape(cp, 1, "Protoss Dark Archon", 3, 50, 50)
                # (Line 43) FlowerShape(cp, 1, "Protoss Dark Archon", 4, 50, 50);
                FlowerShape(cp, 1, "Protoss Dark Archon", 4, 50, 50)
                # (Line 45) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", cp);
                # (Line 46) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", cp);
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", cp))
                # (Line 47) SetDeaths(cp, SetTo, 720, " `UniqueCoolTime");
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", cp))
                # (Line 48) SetDeaths(cp, Add, 1, " `UniqueSkill");
                DoActions(SetDeaths(cp, SetTo, 720, " `UniqueCoolTime"))
                # (Line 50) f.SkillWait(cp, 80);
                DoActions(SetDeaths(cp, Add, 1, " `UniqueSkill"))
                f.SkillWait(cp, 80)
                # (Line 52) f.count[cp] += 1;
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 53) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 54) }
                # (Line 55) }
            EUDEndIf()
            # (Line 57) else if (f.count[cp] == 1)
        if EUDElseIf()(f.count[cp] == 1):
            # (Line 58) {
            # (Line 59) f.SkillEnd(cp);
            f.SkillEnd(cp)
            # (Line 60) }
            # (Line 61) }
        EUDEndIf()
        # (Line 62) }
    EUDEndIf()
    # (Line 65) function FlowerShape(cp : TrgPlayer, count, Unit : TrgUnit, i, distance, interval)

# (Line 67) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None])
def FlowerShape(cp, count, Unit, i, distance, interval):
    # (Line 68) f.Table_Sin(cp, (72 * i + 90), distance);
    f.Table_Sin(cp, (72 * i + 90), distance)
    # (Line 69) f.Table_Cos(cp, (72 * i + 90), distance);
    f.Table_Cos(cp, (72 * i + 90), distance)
    # (Line 71) var x_o = f.CosAngle[cp];
    x_o = EUDVariable()
    x_o << (f.CosAngle[cp])
    # (Line 72) var y_o = f.SinAngle[cp];
    y_o = EUDVariable()
    y_o << (f.SinAngle[cp])
    # (Line 74) f.Table_Sin(cp, ((72 * i + 90) + 30), interval);
    f.Table_Sin(cp, ((72 * i + 90) + 30), interval)
    # (Line 75) f.Table_Cos(cp, ((72 * i + 90) + 30), interval);
    f.Table_Cos(cp, ((72 * i + 90) + 30), interval)
    # (Line 77) var x_i1 = f.CosAngle[cp];
    x_i1 = EUDVariable()
    x_i1 << (f.CosAngle[cp])
    # (Line 78) var y_i1 = f.SinAngle[cp];
    y_i1 = EUDVariable()
    y_i1 << (f.SinAngle[cp])
    # (Line 80) f.Table_Sin(cp, ((72 * i + 90) - 30), interval);
    f.Table_Sin(cp, ((72 * i + 90) - 30), interval)
    # (Line 81) f.Table_Cos(cp, ((72 * i + 90) - 30), interval);
    f.Table_Cos(cp, ((72 * i + 90) - 30), interval)
    # (Line 83) var x_i2 = f.CosAngle[cp];
    x_i2 = EUDVariable()
    x_i2 << (f.CosAngle[cp])
    # (Line 84) var y_i2 = f.SinAngle[cp];
    y_i2 = EUDVariable()
    y_i2 << (f.SinAngle[cp])
    # (Line 86) var x = x_o;
    x = EUDVariable()
    x << (x_o)
    # (Line 87) var y = y_o;
    y = EUDVariable()
    y << (y_o)
    # (Line 89) f.DotShape(cp, 1, Unit, x, y);
    f.DotShape(cp, 1, Unit, x, y)
    # (Line 91) x = x + x_i1;
    x << (x + x_i1)
    # (Line 92) y = y + y_i1;
    y << (y + y_i1)
    # (Line 94) f.DotShape(cp, 1, Unit, x, y);
    f.DotShape(cp, 1, Unit, x, y)
    # (Line 96) x = x + x_i1;
    x << (x + x_i1)
    # (Line 97) y = y + y_i1;
    y << (y + y_i1)
    # (Line 99) f.DotShape(cp, 1, Unit, x, y);
    f.DotShape(cp, 1, Unit, x, y)
    # (Line 101) x = x + x_i2;
    x << (x + x_i2)
    # (Line 102) y = y + y_i2;
    y << (y + y_i2)
    # (Line 104) f.DotShape(cp, 1, Unit, x, y);
    f.DotShape(cp, 1, Unit, x, y)
    # (Line 106) x = x + x_i2;
    x << (x + x_i2)
    # (Line 107) y = y + y_i2;
    y << (y + y_i2)
    # (Line 109) f.DotShape(cp, 1, Unit, x, y);
    f.DotShape(cp, 1, Unit, x, y)
    # (Line 111) x = x_o + x_i2;
    x << (x_o + x_i2)
    # (Line 112) y = y_o + y_i2;
    y << (y_o + y_i2)
    # (Line 114) f.DotShape(cp, 1, Unit, x, y);
    f.DotShape(cp, 1, Unit, x, y)
    # (Line 116) x = x + x_i2;
    x << (x + x_i2)
    # (Line 117) y = y + y_i2;
    y << (y + y_i2)
    # (Line 119) f.DotShape(cp, 1, Unit, x, y);
    f.DotShape(cp, 1, Unit, x, y)
    # (Line 121) x = x + x_i1;
    x << (x + x_i1)
    # (Line 122) y = y + y_i1;
    y << (y + y_i1)
    # (Line 124) f.DotShape(cp, 1, Unit, x, y);
    f.DotShape(cp, 1, Unit, x, y)
    # (Line 125) }
