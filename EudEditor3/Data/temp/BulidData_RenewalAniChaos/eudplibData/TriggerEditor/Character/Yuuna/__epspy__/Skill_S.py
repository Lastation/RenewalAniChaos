## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Function as f;
import Function as f
# (Line 3) const s = StringBuffer();
s = _CGFW(lambda: [StringBuffer()], 1)[0]
# (Line 5) function main(cp, location, heroID)
# (Line 6) {
@EUDFunc
def f_main(cp, location, heroID):
    # (Line 7) f.loop[cp] = dwread_epd(212 * 12 + cp);
    _ARRW(f.loop, cp) << (f_dwread_epd(212 * 12 + cp))
    # (Line 9) if (Deaths(cp, Exactly, 0, " `WaitTime"))
    if EUDIf()(Deaths(cp, Exactly, 0, " `WaitTime")):
        # (Line 10) {
        # (Line 11) if (f.loop[cp] < 8)
        if EUDIf()(f.loop[cp] >= 8, neg=True):
            # (Line 12) {
            # (Line 13) f.distance[cp] = 100;
            _ARRW(f.distance, cp) << (100)
            # (Line 15) f.Table_Cos(cp, 45 * f.loop[cp], f.distance[cp]);
            f.Table_Cos(cp, 45 * f.loop[cp], f.distance[cp])
            # (Line 16) f.Table_Sin(cp, 45 * f.loop[cp], f.distance[cp]);
            f.Table_Sin(cp, 45 * f.loop[cp], f.distance[cp])
            # (Line 18) f.SquareShape(heroID, 1, "Protoss Dark Templar", location, cp, f.CosAngle[cp], f.SinAngle[cp]);
            f.SquareShape(heroID, 1, "Protoss Dark Templar", location, cp, f.CosAngle[cp], f.SinAngle[cp])
            # (Line 19) s.print("\x13 i = ", f.loop[cp], ", x = ", f.CosAngle[cp], ", y = ", f.SinAngle[cp]);
            s.print("\x13 i = ", f.loop[cp], ", x = ", f.CosAngle[cp], ", y = ", f.SinAngle[cp])
            # (Line 21) KillUnitAt(All, "Protoss Dark Templar", "Anywhere", cp);
            # (Line 22) f.SkillWait(cp, 50);
            DoActions(KillUnitAt(All, "Protoss Dark Templar", "Anywhere", cp))
            f.SkillWait(cp, 50)
            # (Line 23) SetDeaths(cp, Add, 1, " `SkillLoop");
            # (Line 24) }
            DoActions(SetDeaths(cp, Add, 1, " `SkillLoop"))
            # (Line 25) else if (f.loop[cp] == 8)
        if EUDElseIf()(f.loop[cp] == 8):
            # (Line 26) {
            # (Line 27) f.SkillEnd(cp);
            f.SkillEnd(cp)
            # (Line 28) }
            # (Line 29) }
        EUDEndIf()
        # (Line 30) }
    EUDEndIf()
