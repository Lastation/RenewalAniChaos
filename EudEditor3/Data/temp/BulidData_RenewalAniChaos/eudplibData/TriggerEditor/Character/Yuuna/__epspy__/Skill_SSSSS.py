## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Function as f;
import Function as f
# (Line 3) const s = StringBuffer();
s = _CGFW(lambda: [StringBuffer()], 1)[0]
# (Line 5) function main(cp)
# (Line 6) {
@EUDFunc
def f_main(cp):
    # (Line 7) if (f.delay[cp] == 0)
    if EUDIf()(f.delay[cp] == 0):
        # (Line 8) {
        # (Line 9) if (f.count[cp] == 0)
        if EUDIf()(f.count[cp] == 0):
            # (Line 10) {
            # (Line 11) if (f.loop[cp] < 2)
            if EUDIf()(f.loop[cp] >= 2, neg=True):
                # (Line 12) {
                # (Line 13) RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp);
                # (Line 15) f.NxNSquareShape(cp, 1, "50 + 1n Battlecruiser", 3, 75);
                DoActions(RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp))
                f.NxNSquareShape(cp, 1, "50 + 1n Battlecruiser", 3, 75)
                # (Line 16) Order("50 + 1n Battlecruiser", cp, "Anywhere", Attack, "Anywhere");
                # (Line 18) f.SkillWait(cp, 80);
                DoActions(Order("50 + 1n Battlecruiser", cp, "Anywhere", Attack, "Anywhere"))
                f.SkillWait(cp, 80)
                # (Line 19) f.loop[cp] += 1;
                _ARRW(f.loop, cp).__iadd__(1)
                # (Line 20) }
                # (Line 21) else if (f.loop[cp] == 2)
            if EUDElseIf()(f.loop[cp] == 2):
                # (Line 22) {
                # (Line 23) RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp);
                # (Line 25) f.NxNSquareShape(cp, 1, "50 + 1n Battlecruiser", 3, 75);
                DoActions(RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp))
                f.NxNSquareShape(cp, 1, "50 + 1n Battlecruiser", 3, 75)
                # (Line 26) Order("50 + 1n Battlecruiser", cp, "Anywhere", Attack, "Anywhere");
                # (Line 28) f.SkillWait(cp, 160);
                DoActions(Order("50 + 1n Battlecruiser", cp, "Anywhere", Attack, "Anywhere"))
                f.SkillWait(cp, 160)
                # (Line 29) f.loop[cp] += 1;
                _ARRW(f.loop, cp).__iadd__(1)
                # (Line 30) }
                # (Line 31) else if (f.loop[cp] == 3)
            if EUDElseIf()(f.loop[cp] == 3):
                # (Line 32) {
                # (Line 33) RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp);
                # (Line 35) f.NxNSquareShape(cp, 1, "40 + 1n Wraith", 3, 75);
                DoActions(RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp))
                f.NxNSquareShape(cp, 1, "40 + 1n Wraith", 3, 75)
                # (Line 36) f.NxNSquareShape(cp, 1, "50 + 1n Tank", 3, 75);
                f.NxNSquareShape(cp, 1, "50 + 1n Tank", 3, 75)
                # (Line 37) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", cp);
                # (Line 38) KillUnitAt(All, "50 + 1n Tank", "Anywhere", cp);
                DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", cp))
                # (Line 40) f.SkillWait(cp, 80);
                DoActions(KillUnitAt(All, "50 + 1n Tank", "Anywhere", cp))
                f.SkillWait(cp, 80)
                # (Line 42) f.loop[cp] += 1;
                _ARRW(f.loop, cp).__iadd__(1)
                # (Line 43) }
                # (Line 44) else if (f.loop[cp] == 4)
            if EUDElseIf()(f.loop[cp] == 4):
                # (Line 45) {
                # (Line 46) f.NxNSquareShape(cp, 1, "40 + 1n Wraith", 5, 75);
                f.NxNSquareShape(cp, 1, "40 + 1n Wraith", 5, 75)
                # (Line 47) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", cp);
                # (Line 49) f.SkillWait(cp, 80);
                DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", cp))
                f.SkillWait(cp, 80)
                # (Line 51) f.loop[cp] += 1;
                _ARRW(f.loop, cp).__iadd__(1)
                # (Line 52) }
                # (Line 53) else if (f.loop[cp] == 5)
            if EUDElseIf()(f.loop[cp] == 5):
                # (Line 54) {
                # (Line 55) f.NxNSquareShape(cp, 1, "40 + 1n Guardian", 5, 75);
                f.NxNSquareShape(cp, 1, "40 + 1n Guardian", 5, 75)
                # (Line 56) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", cp);
                # (Line 58) f.SkillWait(cp, 160);
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", cp))
                f.SkillWait(cp, 160)
                # (Line 60) f.count[cp] += 1;
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 61) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 62) }
                # (Line 64) }
            EUDEndIf()
            # (Line 65) else if (f.count[cp] == 1)
        if EUDElseIf()(f.count[cp] == 1):
            # (Line 66) {
            # (Line 67) if (f.loop[cp] == 0)
            if EUDIf()(f.loop[cp] == 0):
                # (Line 68) {
                # (Line 69) f.NxNSquareShape(cp, 1, "Kakaru (Twilight)", 5, 75);
                f.NxNSquareShape(cp, 1, "Kakaru (Twilight)", 5, 75)
                # (Line 70) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", cp);
                # (Line 72) f.SkillWait(cp, 80);
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", cp))
                f.SkillWait(cp, 80)
                # (Line 74) f.loop[cp] += 1;
                _ARRW(f.loop, cp).__iadd__(1)
                # (Line 77) }
                # (Line 78) if (f.loop[cp] == 1)
            EUDEndIf()
            if EUDIf()(f.loop[cp] == 1):
                # (Line 79) {
                # (Line 80) f.NxNSquareShape(cp, 1, " Unit. Hoffnung 25000", 5, 75);
                f.NxNSquareShape(cp, 1, " Unit. Hoffnung 25000", 5, 75)
                # (Line 81) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", cp);
                # (Line 83) f.SkillWait(cp, 80);
                DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", cp))
                f.SkillWait(cp, 80)
                # (Line 85) f.count[cp] += 1;
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 86) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 87) }
                # (Line 90) }
            EUDEndIf()
            # (Line 91) else if (f.count[cp] == 2)
        if EUDElseIf()(f.count[cp] == 2):
            # (Line 92) {
            # (Line 93) f.SkillEnd(cp);
            f.SkillEnd(cp)
            # (Line 94) }
            # (Line 95) }
        EUDEndIf()
        # (Line 96) }
    EUDEndIf()
