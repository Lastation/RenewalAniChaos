## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Function as f;
import Function as f
# (Line 3) const s = StringBuffer();
s = _CGFW(lambda: [StringBuffer()], 1)[0]
# (Line 5) function main(cp)
# (Line 6) {
@EUDFunc
def f_main(cp):
    # (Line 7) f.HoldPosition(cp);
    f.HoldPosition(cp)
    # (Line 9) if (f.delay[cp] == 0)
    if EUDIf()(f.delay[cp] == 0):
        # (Line 10) {
        # (Line 11) if (f.count[cp] == 0)
        if EUDIf()(f.count[cp] == 0):
            # (Line 12) {
            # (Line 13) if (f.loop[cp] == 0)
            if EUDIf()(f.loop[cp] == 0):
                # (Line 14) {
                # (Line 15) RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp);
                # (Line 17) f.NxNSquareShape(cp, 1, "50 + 1n Battlecruiser", 3, 75);
                DoActions(RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp))
                f.NxNSquareShape(cp, 1, "50 + 1n Battlecruiser", 3, 75)
                # (Line 18) Order("50 + 1n Battlecruiser", cp, "Anywhere", Attack, "Anywhere");
                # (Line 20) f.SkillWait(cp, 160);
                DoActions(Order("50 + 1n Battlecruiser", cp, "Anywhere", Attack, "Anywhere"))
                f.SkillWait(cp, 160)
                # (Line 21) f.loop[cp] += 1;
                _ARRW(f.loop, cp).__iadd__(1)
                # (Line 22) }
                # (Line 23) else if (f.loop[cp] == 1)
            if EUDElseIf()(f.loop[cp] == 1):
                # (Line 24) {
                # (Line 25) RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp);
                # (Line 27) f.NxNSquareShape(cp, 1, "50 + 1n Battlecruiser", 3, 75);
                DoActions(RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp))
                f.NxNSquareShape(cp, 1, "50 + 1n Battlecruiser", 3, 75)
                # (Line 28) Order("50 + 1n Battlecruiser", cp, "Anywhere", Attack, "Anywhere");
                # (Line 30) f.SkillWait(cp, 160);
                DoActions(Order("50 + 1n Battlecruiser", cp, "Anywhere", Attack, "Anywhere"))
                f.SkillWait(cp, 160)
                # (Line 31) f.loop[cp] += 1;
                _ARRW(f.loop, cp).__iadd__(1)
                # (Line 32) }
                # (Line 33) else if (f.loop[cp] == 2)
            if EUDElseIf()(f.loop[cp] == 2):
                # (Line 34) {
                # (Line 35) RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp);
                # (Line 37) f.NxNSquareShape(cp, 1, "40 + 1n Wraith", 3, 75);
                DoActions(RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp))
                f.NxNSquareShape(cp, 1, "40 + 1n Wraith", 3, 75)
                # (Line 38) f.NxNSquareShape(cp, 1, "50 + 1n Tank", 3, 75);
                f.NxNSquareShape(cp, 1, "50 + 1n Tank", 3, 75)
                # (Line 39) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", cp);
                # (Line 40) KillUnitAt(All, "50 + 1n Tank", "Anywhere", cp);
                DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", cp))
                # (Line 42) f.SkillWait(cp, 160);
                DoActions(KillUnitAt(All, "50 + 1n Tank", "Anywhere", cp))
                f.SkillWait(cp, 160)
                # (Line 44) f.loop[cp] += 1;
                _ARRW(f.loop, cp).__iadd__(1)
                # (Line 45) }
                # (Line 46) else if (f.loop[cp] == 3)
            if EUDElseIf()(f.loop[cp] == 3):
                # (Line 47) {
                # (Line 48) f.NxNSquareShape(cp, 1, "40 + 1n Wraith", 5, 75);
                f.NxNSquareShape(cp, 1, "40 + 1n Wraith", 5, 75)
                # (Line 49) f.NxNSquareShape(cp, 1, "40 + 1n Goliath", 3, 50);
                f.NxNSquareShape(cp, 1, "40 + 1n Goliath", 3, 50)
                # (Line 50) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", cp);
                # (Line 51) Order("40 + 1n Goliath", cp, "Anywhere", Attack, "Anywhere");
                DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", cp))
                # (Line 53) f.SkillWait(cp, 80);
                DoActions(Order("40 + 1n Goliath", cp, "Anywhere", Attack, "Anywhere"))
                f.SkillWait(cp, 80)
                # (Line 55) f.loop[cp] += 1;
                _ARRW(f.loop, cp).__iadd__(1)
                # (Line 56) }
                # (Line 57) else if (f.loop[cp] == 4)
            if EUDElseIf()(f.loop[cp] == 4):
                # (Line 58) {
                # (Line 59) RemoveUnitAt(All, "40 + 1n Goliath", "Anywhere", cp);
                # (Line 60) f.NxNSquareShape(cp, 1, "40 + 1n Guardian", 5, 75);
                DoActions(RemoveUnitAt(All, "40 + 1n Goliath", "Anywhere", cp))
                f.NxNSquareShape(cp, 1, "40 + 1n Guardian", 5, 75)
                # (Line 61) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", cp);
                # (Line 63) f.SkillWait(cp, 160);
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", cp))
                f.SkillWait(cp, 160)
                # (Line 65) f.count[cp] += 1;
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 66) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 67) }
                # (Line 69) }
            EUDEndIf()
            # (Line 70) else if (f.count[cp] == 1)
        if EUDElseIf()(f.count[cp] == 1):
            # (Line 71) {
            # (Line 72) if (f.loop[cp] == 0)
            if EUDIf()(f.loop[cp] == 0):
                # (Line 73) {
                # (Line 74) f.NxNSquareShape(cp, 1, "Kakaru (Twilight)", 5, 75);
                f.NxNSquareShape(cp, 1, "Kakaru (Twilight)", 5, 75)
                # (Line 75) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", cp);
                # (Line 77) f.SkillWait(cp, 80);
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", cp))
                f.SkillWait(cp, 80)
                # (Line 79) f.loop[cp] += 1;
                _ARRW(f.loop, cp).__iadd__(1)
                # (Line 82) }
                # (Line 83) else if (f.loop[cp] == 1)
            if EUDElseIf()(f.loop[cp] == 1):
                # (Line 84) {
                # (Line 85) f.NxNSquareShape(cp, 1, " Unit. Hoffnung 25000", 5, 75);
                f.NxNSquareShape(cp, 1, " Unit. Hoffnung 25000", 5, 75)
                # (Line 86) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", cp);
                # (Line 88) f.SkillWait(cp, 80);
                DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", cp))
                f.SkillWait(cp, 80)
                # (Line 90) f.count[cp] += 1;
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 91) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 92) }
                # (Line 95) }
            EUDEndIf()
            # (Line 96) else if (f.count[cp] == 2)
        if EUDElseIf()(f.count[cp] == 2):
            # (Line 97) {
            # (Line 98) f.SkillEnd(cp);
            f.SkillEnd(cp)
            # (Line 99) }
            # (Line 100) }
        EUDEndIf()
        # (Line 101) }
    EUDEndIf()
