## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import Function as f;
import Function as f
# (Line 4) function ShapeA(cp, x, y);
# (Line 5) function ShapeB(cp, x, y);
# (Line 6) function ShapeC(cp);
# (Line 8) function main(cp)
# (Line 9) {
@EUDFunc
def f_main(cp):
    # (Line 10) f.BanReturn(cp);
    f.BanReturn(cp)
    # (Line 11) f.HoldPosition(cp);
    f.HoldPosition(cp)
    # (Line 13) if (f.delay[cp] == 0)
    if EUDIf()(f.delay[cp] == 0):
        # (Line 14) {
        # (Line 15) MoveUnit(All, "50 + 1n Battlecruiser", cp, "Anywhere", "[Skill]HoldPosition");
        # (Line 17) if(f.count[cp] == 0)
        DoActions(MoveUnit(All, "50 + 1n Battlecruiser", cp, "Anywhere", "[Skill]HoldPosition"))
        if EUDIf()(f.count[cp] == 0):
            # (Line 18) {
            # (Line 19) if (f.loop[cp] == 0) 		{ ShapeA(cp, -160, 0); }
            if EUDIf()(f.loop[cp] == 0):
                ShapeA(cp, -160, 0)
                # (Line 20) else if (f.loop[cp] == 1) 	{ ShapeA(cp, 0, -160); }
            if EUDElseIf()(f.loop[cp] == 1):
                ShapeA(cp, 0, -160)
                # (Line 21) else if (f.loop[cp] == 2) 	{ ShapeA(cp, 160, 0); }
            if EUDElseIf()(f.loop[cp] == 2):
                ShapeA(cp, 160, 0)
                # (Line 22) else if (f.loop[cp] == 3) 	{ ShapeA(cp, 0, 160); }
            if EUDElseIf()(f.loop[cp] == 3):
                ShapeA(cp, 0, 160)
                # (Line 23) else if (f.loop[cp] == 4) 	{ f.loop[cp] = 0; f.count[cp] += 1; }
            if EUDElseIf()(f.loop[cp] == 4):
                _ARRW(f.loop, cp) << (0)
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 24) }
            EUDEndIf()
            # (Line 25) else if (f.count[cp] == 1)
        if EUDElseIf()(f.count[cp] == 1):
            # (Line 26) {
            # (Line 27) if (f.loop[cp] == 0) 		{ ShapeB(cp, -160, 0); }
            if EUDIf()(f.loop[cp] == 0):
                ShapeB(cp, -160, 0)
                # (Line 28) else if (f.loop[cp] == 1) 	{ ShapeB(cp, 0, -160); }
            if EUDElseIf()(f.loop[cp] == 1):
                ShapeB(cp, 0, -160)
                # (Line 29) else if (f.loop[cp] == 2) 	{ ShapeB(cp, 160, 0); }
            if EUDElseIf()(f.loop[cp] == 2):
                ShapeB(cp, 160, 0)
                # (Line 30) else if (f.loop[cp] == 3) 	{ ShapeB(cp, 0, 160); }
            if EUDElseIf()(f.loop[cp] == 3):
                ShapeB(cp, 0, 160)
                # (Line 31) else if (f.loop[cp] == 4) 	{ f.loop[cp] = 0; f.count[cp] += 1; }
            if EUDElseIf()(f.loop[cp] == 4):
                _ARRW(f.loop, cp) << (0)
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 32) }
            EUDEndIf()
            # (Line 33) else if(f.count[cp] == 2)
        if EUDElseIf()(f.count[cp] == 2):
            # (Line 34) {
            # (Line 35) if (f.loop[cp] == 0) 		{ ShapeA(cp, 114, 114); }
            if EUDIf()(f.loop[cp] == 0):
                ShapeA(cp, 114, 114)
                # (Line 36) else if (f.loop[cp] == 1) 	{ ShapeA(cp, 114, -114); }
            if EUDElseIf()(f.loop[cp] == 1):
                ShapeA(cp, 114, -114)
                # (Line 37) else if (f.loop[cp] == 2) 	{ ShapeA(cp, -114, -114); }
            if EUDElseIf()(f.loop[cp] == 2):
                ShapeA(cp, -114, -114)
                # (Line 38) else if (f.loop[cp] == 3) 	{ ShapeA(cp, -114, 114); }
            if EUDElseIf()(f.loop[cp] == 3):
                ShapeA(cp, -114, 114)
                # (Line 39) else if (f.loop[cp] == 4) 	{ f.loop[cp] = 0; f.count[cp] += 1; }
            if EUDElseIf()(f.loop[cp] == 4):
                _ARRW(f.loop, cp) << (0)
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 40) }
            EUDEndIf()
            # (Line 41) else if (f.count[cp] == 3)
        if EUDElseIf()(f.count[cp] == 3):
            # (Line 42) {
            # (Line 43) if (f.loop[cp] == 0) 		{ ShapeB(cp, 114, 114); }
            if EUDIf()(f.loop[cp] == 0):
                ShapeB(cp, 114, 114)
                # (Line 44) else if (f.loop[cp] == 1) 	{ ShapeB(cp, 114, -114); }
            if EUDElseIf()(f.loop[cp] == 1):
                ShapeB(cp, 114, -114)
                # (Line 45) else if (f.loop[cp] == 2) 	{ ShapeB(cp, -114, -114); }
            if EUDElseIf()(f.loop[cp] == 2):
                ShapeB(cp, -114, -114)
                # (Line 46) else if (f.loop[cp] == 3) 	{ ShapeB(cp, -114, 114); }
            if EUDElseIf()(f.loop[cp] == 3):
                ShapeB(cp, -114, 114)
                # (Line 47) else if (f.loop[cp] == 4) 	{ f.loop[cp] = 0; f.count[cp] += 1; }
            if EUDElseIf()(f.loop[cp] == 4):
                _ARRW(f.loop, cp) << (0)
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 48) }
            EUDEndIf()
            # (Line 49) else if (f.count[cp] == 4)
        if EUDElseIf()(f.count[cp] == 4):
            # (Line 50) {
            # (Line 51) f.SkillWait(cp, 200);
            f.SkillWait(cp, 200)
            # (Line 52) f.count[cp] += 1;
            _ARRW(f.count, cp).__iadd__(1)
            # (Line 53) }
            # (Line 54) else if (f.count[cp] == 5)
        if EUDElseIf()(f.count[cp] == 5):
            # (Line 55) {
            # (Line 56) if (f.loop[cp] < 8)
            if EUDIf()(f.loop[cp] >= 8, neg=True):
                # (Line 57) {
                # (Line 58) MoveLocation(f.location[cp], "50 + 1n Battlecruiser", cp, "Anywhere");
                # (Line 59) RemoveUnitAt(1, "50 + 1n Battlecruiser", "Anywhere", cp);
                DoActions(MoveLocation(f.location[cp], "50 + 1n Battlecruiser", cp, "Anywhere"))
                # (Line 60) f.SkillUnit(cp, 1, "40 + 1n Gantrithor");
                DoActions(RemoveUnitAt(1, "50 + 1n Battlecruiser", "Anywhere", cp))
                f.SkillUnit(cp, 1, "40 + 1n Gantrithor")
                # (Line 61) f.SkillUnit(cp, 8, "Protoss Dark Archon");
                f.SkillUnit(cp, 8, "Protoss Dark Archon")
                # (Line 62) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", cp);
                # (Line 63) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", cp);
                DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", cp))
                # (Line 64) f.SkillWait(cp, 0);
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", cp))
                f.SkillWait(cp, 0)
                # (Line 65) f.loop[cp] += 1;
                _ARRW(f.loop, cp).__iadd__(1)
                # (Line 66) }
                # (Line 67) else if (f.loop[cp] == 8)
            if EUDElseIf()(f.loop[cp] == 8):
                # (Line 68) {
                # (Line 69) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 70) f.count[cp] += 1;
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 71) }
                # (Line 72) }
            EUDEndIf()
            # (Line 73) else if (f.count[cp] == 6)
        if EUDElseIf()(f.count[cp] == 6):
            # (Line 74) {
            # (Line 75) if (f.loop[cp] == 0)
            if EUDIf()(f.loop[cp] == 0):
                # (Line 76) {
                # (Line 77) ShapeC(cp);
                ShapeC(cp)
                # (Line 78) }
                # (Line 79) else if (f.loop[cp] == 1)
            if EUDElseIf()(f.loop[cp] == 1):
                # (Line 80) {
                # (Line 81) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp);
                # (Line 82) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp);
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp))
                # (Line 83) KillUnitAt(All, "40 + 1n Mutalisk", "Anywhere", cp);
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp))
                # (Line 84) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", cp);
                DoActions(KillUnitAt(All, "40 + 1n Mutalisk", "Anywhere", cp))
                # (Line 85) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp);
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", cp))
                # (Line 86) SetSwitch("Recall - Rusalka", Clear);
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp))
                # (Line 88) f.SkillWait(cp, 500);
                DoActions(SetSwitch("Recall - Rusalka", Clear))
                f.SkillWait(cp, 500)
                # (Line 89) f.loop[cp] += 1;
                _ARRW(f.loop, cp).__iadd__(1)
                # (Line 90) }
                # (Line 91) else if (f.loop[cp] == 2)
            if EUDElseIf()(f.loop[cp] == 2):
                # (Line 92) {
                # (Line 93) ShapeC(cp);
                ShapeC(cp)
                # (Line 94) }
                # (Line 95) else if (f.loop[cp] == 3)
            if EUDElseIf()(f.loop[cp] == 3):
                # (Line 96) {
                # (Line 97) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp);
                # (Line 98) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp);
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp))
                # (Line 99) KillUnitAt(All, "40 + 1n Mutalisk", "Anywhere", cp);
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp))
                # (Line 100) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", cp);
                DoActions(KillUnitAt(All, "40 + 1n Mutalisk", "Anywhere", cp))
                # (Line 101) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp);
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", cp))
                # (Line 102) SetSwitch("Recall - Rusalka", Clear);
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp))
                # (Line 104) f.SkillEnd(cp);
                DoActions(SetSwitch("Recall - Rusalka", Clear))
                f.SkillEnd(cp)
                # (Line 105) }
                # (Line 106) }
            EUDEndIf()
            # (Line 107) }
        EUDEndIf()
        # (Line 108) }
    EUDEndIf()
    # (Line 110) function ShapeA(cp, x, y)

# (Line 111) {
@EUDFunc
def ShapeA(cp, x, y):
    # (Line 112) f.DotShape(cp, 1, "40 + 1n Gantrithor", x, y);
    f.DotShape(cp, 1, "40 + 1n Gantrithor", x, y)
    # (Line 113) f.DotShape(cp, 8, "Protoss Dark Archon", x, y);
    f.DotShape(cp, 8, "Protoss Dark Archon", x, y)
    # (Line 114) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", cp);
    # (Line 115) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", cp);
    DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", cp))
    # (Line 116) f.SkillWait(cp, 0);
    DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", cp))
    f.SkillWait(cp, 0)
    # (Line 117) f.loop[cp] += 1;
    _ARRW(f.loop, cp).__iadd__(1)
    # (Line 118) }
    # (Line 120) function ShapeB(cp, x, y)

# (Line 121) {
@EUDFunc
def ShapeB(cp, x, y):
    # (Line 122) f.DotShape(cp, 1, "50 + 1n Battlecruiser", x, y);
    f.DotShape(cp, 1, "50 + 1n Battlecruiser", x, y)
    # (Line 123) f.DotShape(cp, 1, "Torrasque", x, y);
    f.DotShape(cp, 1, "Torrasque", x, y)
    # (Line 124) f.DotShape(cp, 8, "50 + 1n Tank", x, y);
    f.DotShape(cp, 8, "50 + 1n Tank", x, y)
    # (Line 125) KillUnitAt(All, "Torrasque", "Anywhere", cp);
    # (Line 126) KillUnitAt(All, "50 + 1n Tank", "Anywhere", cp);
    DoActions(KillUnitAt(All, "Torrasque", "Anywhere", cp))
    # (Line 127) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
    DoActions(KillUnitAt(All, "50 + 1n Tank", "Anywhere", cp))
    # (Line 128) Order("50 + 1n Battlecruiser", cp, "Anywhere", Attack, f.location[cp]);
    DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
    # (Line 129) f.SkillWait(cp, 0);
    DoActions(Order("50 + 1n Battlecruiser", cp, "Anywhere", Attack, f.location[cp]))
    f.SkillWait(cp, 0)
    # (Line 130) f.loop[cp] += 1;
    _ARRW(f.loop, cp).__iadd__(1)
    # (Line 131) }
    # (Line 133) function ShapeC(cp)

# (Line 134) {
@EUDFunc
def ShapeC(cp):
    # (Line 135) f.SquareShape(cp, 1, "40 + 1n Mojo", 32, 32);
    f.SquareShape(cp, 1, "40 + 1n Mojo", 32, 32)
    # (Line 136) f.SquareShape(cp, 1, "40 + 1n Mojo", 64, 0);
    f.SquareShape(cp, 1, "40 + 1n Mojo", 64, 0)
    # (Line 137) f.SquareShape(cp, 1, "60 + 1n Danimoth", 128, 32);
    f.SquareShape(cp, 1, "60 + 1n Danimoth", 128, 32)
    # (Line 138) f.SquareShape(cp, 1, "60 + 1n Danimoth", 128, -32);
    f.SquareShape(cp, 1, "60 + 1n Danimoth", 128, -32)
    # (Line 139) f.SquareShape(cp, 1, "50 + 1n Battlecruiser", 160, 160);
    f.SquareShape(cp, 1, "50 + 1n Battlecruiser", 160, 160)
    # (Line 140) f.SquareShape(cp, 1, "50 + 1n Battlecruiser", 224, 0);
    f.SquareShape(cp, 1, "50 + 1n Battlecruiser", 224, 0)
    # (Line 141) f.SquareShape(cp, 1, "40 + 1n Mutalisk", 160, 64);
    f.SquareShape(cp, 1, "40 + 1n Mutalisk", 160, 64)
    # (Line 142) f.SquareShape(cp, 1, "40 + 1n Mutalisk", 160, -64);
    f.SquareShape(cp, 1, "40 + 1n Mutalisk", 160, -64)
    # (Line 143) f.SquareShape(cp, 1, "40 + 1n Guardian", 128, 96);
    f.SquareShape(cp, 1, "40 + 1n Guardian", 128, 96)
    # (Line 144) f.SquareShape(cp, 1, "40 + 1n Guardian", 128, -96);
    f.SquareShape(cp, 1, "40 + 1n Guardian", 128, -96)
    # (Line 146) f.SquareShape(cp, 1, "60 + 1n Archon", 32, 32);
    f.SquareShape(cp, 1, "60 + 1n Archon", 32, 32)
    # (Line 147) f.SquareShape(cp, 1, "60 + 1n Archon", 64, 0);
    f.SquareShape(cp, 1, "60 + 1n Archon", 64, 0)
    # (Line 148) f.SquareShape(cp, 1, "60 + 1n Archon", 128, 32);
    f.SquareShape(cp, 1, "60 + 1n Archon", 128, 32)
    # (Line 149) f.SquareShape(cp, 1, "60 + 1n Archon", 128, -32);
    f.SquareShape(cp, 1, "60 + 1n Archon", 128, -32)
    # (Line 150) f.SquareShape(cp, 1, "60 + 1n Archon", 160, 160);
    f.SquareShape(cp, 1, "60 + 1n Archon", 160, 160)
    # (Line 151) f.SquareShape(cp, 1, "Protoss Dark Archon", 224, 0);
    f.SquareShape(cp, 1, "Protoss Dark Archon", 224, 0)
    # (Line 152) f.SquareShape(cp, 1, "Protoss Dark Archon", 160, 64);
    f.SquareShape(cp, 1, "Protoss Dark Archon", 160, 64)
    # (Line 153) f.SquareShape(cp, 1, "Protoss Dark Archon", 160, -64);
    f.SquareShape(cp, 1, "Protoss Dark Archon", 160, -64)
    # (Line 154) f.SquareShape(cp, 1, "Protoss Dark Archon", 128, 96);
    f.SquareShape(cp, 1, "Protoss Dark Archon", 128, 96)
    # (Line 155) f.SquareShape(cp, 1, "Protoss Dark Archon", 128, -96);
    f.SquareShape(cp, 1, "Protoss Dark Archon", 128, -96)
    # (Line 157) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", cp);
    # (Line 158) KillUnitAt(All, "60 + 1n Archon", "Anywhere", cp);
    DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", cp))
    # (Line 160) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
    DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", cp))
    # (Line 161) Order("50 + 1n Battlecruiser", cp, "Anywhere", Attack, f.location[cp]);
    DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
    # (Line 162) Order("60 + 1n Danimoth", cp, "Anywhere", Attack, f.location[cp]);
    DoActions(Order("50 + 1n Battlecruiser", cp, "Anywhere", Attack, f.location[cp]))
    # (Line 163) Order("40 + 1n Mutalisk", cp, "Anywhere", Attack, f.location[cp]);
    DoActions(Order("60 + 1n Danimoth", cp, "Anywhere", Attack, f.location[cp]))
    # (Line 164) Order("40 + 1n Guardian", cp, "Anywhere", Attack, f.location[cp]);
    DoActions(Order("40 + 1n Mutalisk", cp, "Anywhere", Attack, f.location[cp]))
    # (Line 165) Order("40 + 1n Mojo", cp, "Anywhere", Attack, f.location[cp]);
    DoActions(Order("40 + 1n Guardian", cp, "Anywhere", Attack, f.location[cp]))
    # (Line 166) f.SkillWait(cp, 130);
    DoActions(Order("40 + 1n Mojo", cp, "Anywhere", Attack, f.location[cp]))
    f.SkillWait(cp, 130)
    # (Line 167) f.loop[cp] += 1;
    _ARRW(f.loop, cp).__iadd__(1)
    # (Line 168) }
