## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Function as f;
import Function as f
# (Line 3) function main(cp)
# (Line 4) {
@EUDFunc
def f_main(cp):
    # (Line 5) if (f.delay[cp] == 0)
    if EUDIf()(f.delay[cp] == 0):
        # (Line 6) {
        # (Line 7) if(f.count[cp] == 0 || f.count[cp] == 5 || f.count[cp] == 10)
        if EUDIf()(EUDSCOr()(f.count[cp] == 0)(f.count[cp] == 5)(f.count[cp] == 10)()):
            # (Line 8) {
            # (Line 9) f.SquareShape(cp, 1, "60 + 1n Danimoth", 128, 128);
            f.SquareShape(cp, 1, "60 + 1n Danimoth", 128, 128)
            # (Line 10) f.SquareShape(cp, 1, "40 + 1n Zergling", 64, 64);
            f.SquareShape(cp, 1, "40 + 1n Zergling", 64, 64)
            # (Line 11) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp);
            # (Line 12) KillUnitAt(All, "40 + 1n Zergling", "Anywhere", cp);
            DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp))
            # (Line 13) f.SkillWait(cp, 0);
            DoActions(KillUnitAt(All, "40 + 1n Zergling", "Anywhere", cp))
            f.SkillWait(cp, 0)
            # (Line 14) f.count[cp] += 1;
            _ARRW(f.count, cp).__iadd__(1)
            # (Line 15) }
            # (Line 16) else if(f.count[cp] == 1 || f.count[cp] == 6 || f.count[cp] == 11)
        if EUDElseIf()(EUDSCOr()(f.count[cp] == 1)(f.count[cp] == 6)(f.count[cp] == 11)()):
            # (Line 17) {
            # (Line 18) f.SquareShape(cp, 1, "Kakaru", 64, 0);
            f.SquareShape(cp, 1, "Kakaru", 64, 0)
            # (Line 19) f.SquareShape(cp, 1, "40 + 1n Zealot", 128, 0);
            f.SquareShape(cp, 1, "40 + 1n Zealot", 128, 0)
            # (Line 20) KillUnitAt(All, "Kakaru", "Anywhere", cp);
            # (Line 21) KillUnitAt(All, "40 + 1n Zealot", "Anywhere", cp);
            DoActions(KillUnitAt(All, "Kakaru", "Anywhere", cp))
            # (Line 22) f.SkillWait(cp, 0);
            DoActions(KillUnitAt(All, "40 + 1n Zealot", "Anywhere", cp))
            f.SkillWait(cp, 0)
            # (Line 23) f.count[cp] += 1;
            _ARRW(f.count, cp).__iadd__(1)
            # (Line 24) }
            # (Line 25) else if(f.count[cp] == 2 || f.count[cp] == 7 || f.count[cp] == 12)
        if EUDElseIf()(EUDSCOr()(f.count[cp] == 2)(f.count[cp] == 7)(f.count[cp] == 12)()):
            # (Line 26) {
            # (Line 27) f.SquareShape(cp, 1, "40 + 1n Wraith", 64, 64);
            f.SquareShape(cp, 1, "40 + 1n Wraith", 64, 64)
            # (Line 28) f.SquareShape(cp, 1, "50 + 1n Tank", 64, 64);
            f.SquareShape(cp, 1, "50 + 1n Tank", 64, 64)
            # (Line 29) KillUnitAt(All, "50 + 1n Tank", "Anywhere", cp);
            # (Line 30) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
            DoActions(KillUnitAt(All, "50 + 1n Tank", "Anywhere", cp))
            # (Line 31) Order("40 + 1n Wraith", cp, "Anywhere", Attack, f.location[cp]);
            DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
            # (Line 32) f.SkillWait(cp, 60);
            DoActions(Order("40 + 1n Wraith", cp, "Anywhere", Attack, f.location[cp]))
            f.SkillWait(cp, 60)
            # (Line 33) f.count[cp] += 1;
            _ARRW(f.count, cp).__iadd__(1)
            # (Line 34) }
            # (Line 35) else if(f.count[cp] == 3 || f.count[cp] == 8 || f.count[cp] == 13)
        if EUDElseIf()(EUDSCOr()(f.count[cp] == 3)(f.count[cp] == 8)(f.count[cp] == 13)()):
            # (Line 36) {
            # (Line 37) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", cp);
            # (Line 39) f.SquareShape(cp, 1, "40 + 1n Mojo", 128, 0);
            DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", cp))
            f.SquareShape(cp, 1, "40 + 1n Mojo", 128, 0)
            # (Line 40) f.SquareShape(cp, 1, "60 + 1n Archon", 128, 0);
            f.SquareShape(cp, 1, "60 + 1n Archon", 128, 0)
            # (Line 41) KillUnitAt(All, "60 + 1n Archon", "Anywhere", cp);
            # (Line 42) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
            DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", cp))
            # (Line 43) Order("40 + 1n Mojo", cp, "Anywhere", Attack, f.location[cp]);
            DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
            # (Line 44) f.SkillWait(cp, 50);
            DoActions(Order("40 + 1n Mojo", cp, "Anywhere", Attack, f.location[cp]))
            f.SkillWait(cp, 50)
            # (Line 45) f.count[cp] += 1;
            _ARRW(f.count, cp).__iadd__(1)
            # (Line 46) }
            # (Line 47) else if(f.count[cp] == 4 || f.count[cp] == 9 || f.count[cp] == 14)
        if EUDElseIf()(EUDSCOr()(f.count[cp] == 4)(f.count[cp] == 9)(f.count[cp] == 14)()):
            # (Line 48) {
            # (Line 49) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp);
            # (Line 52) f.SquareShape(cp, 1, "50 + 1n Battlecruiser", 64, 0);
            DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp))
            f.SquareShape(cp, 1, "50 + 1n Battlecruiser", 64, 0)
            # (Line 53) f.SquareShape(cp, 1, "Torrasque", 64, 0);
            f.SquareShape(cp, 1, "Torrasque", 64, 0)
            # (Line 54) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp);
            # (Line 55) KillUnitAt(All, "Torrasque", "Anywhere", cp);
            DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp))
            # (Line 56) f.SkillWait(cp, 0);
            DoActions(KillUnitAt(All, "Torrasque", "Anywhere", cp))
            f.SkillWait(cp, 0)
            # (Line 57) f.count[cp] += 1;
            _ARRW(f.count, cp).__iadd__(1)
            # (Line 58) }
            # (Line 59) else if(f.count[cp] == 15)
        if EUDElseIf()(f.count[cp] == 15):
            # (Line 60) {
            # (Line 61) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
            # (Line 62) f.SkillUnit(cp, 1, "40 + 1n Mutalisk");
            DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
            f.SkillUnit(cp, 1, "40 + 1n Mutalisk")
            # (Line 63) f.SquareShape(cp, 1, "40 + 1n Mutalisk", 32, 0);
            f.SquareShape(cp, 1, "40 + 1n Mutalisk", 32, 0)
            # (Line 64) f.SquareShape(cp, 1, "40 + 1n Mutalisk", 64, 0);
            f.SquareShape(cp, 1, "40 + 1n Mutalisk", 64, 0)
            # (Line 65) f.SquareShape(cp, 1, "40 + 1n Mutalisk", 96, 0);
            f.SquareShape(cp, 1, "40 + 1n Mutalisk", 96, 0)
            # (Line 66) f.SquareShape(cp, 1, "40 + 1n Mutalisk", 128, 0);
            f.SquareShape(cp, 1, "40 + 1n Mutalisk", 128, 0)
            # (Line 67) f.SquareShape(cp, 1, "Torrasque", 32, 32);
            f.SquareShape(cp, 1, "Torrasque", 32, 32)
            # (Line 68) f.SquareShape(cp, 1, "Torrasque", 64, 64);
            f.SquareShape(cp, 1, "Torrasque", 64, 64)
            # (Line 69) f.SquareShape(cp, 1, "Torrasque", 96, 64);
            f.SquareShape(cp, 1, "Torrasque", 96, 64)
            # (Line 70) KillUnitAt(All, "Torrasque", "Anywhere", cp);
            # (Line 71) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
            DoActions(KillUnitAt(All, "Torrasque", "Anywhere", cp))
            # (Line 72) Order("40 + 1n Mutalisk", cp, "Anywhere", Attack, f.location[cp]);
            DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
            # (Line 73) f.SkillWait(cp, 300);
            DoActions(Order("40 + 1n Mutalisk", cp, "Anywhere", Attack, f.location[cp]))
            f.SkillWait(cp, 300)
            # (Line 74) f.count[cp] += 1;
            _ARRW(f.count, cp).__iadd__(1)
            # (Line 75) }
            # (Line 76) else if(f.count[cp] == 16)
        if EUDElseIf()(f.count[cp] == 16):
            # (Line 77) {
            # (Line 78) KillUnitAt(All, "40 + 1n Mutalisk", "Anywhere", cp);
            # (Line 79) f.SkillEnd(cp);
            DoActions(KillUnitAt(All, "40 + 1n Mutalisk", "Anywhere", cp))
            f.SkillEnd(cp)
            # (Line 80) }
            # (Line 81) }
        EUDEndIf()
        # (Line 82) }
    EUDEndIf()
