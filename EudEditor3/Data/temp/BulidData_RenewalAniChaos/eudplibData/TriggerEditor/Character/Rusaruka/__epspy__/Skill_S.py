## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Function as f;
import Function as f
# (Line 3) var loop;
loop = EUDVariable()
# (Line 5) function Shape(cp, location, heroID, Unit : TrgUnit, x, y);
# (Line 7) function main(cp, location, heroID)
# (Line 8) {
@EUDFunc
def f_main(cp, location, heroID):
    # (Line 9) loop = dwread_epd(212 * 12 + cp);
    loop << (f_dwread_epd(212 * 12 + cp))
    # (Line 11) if (Deaths(cp, Exactly, 0, " `OrderTime"))
    if EUDIf()(Deaths(cp, Exactly, 0, " `OrderTime")):
        # (Line 12) {
        # (Line 13) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp);
        # (Line 14) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", cp);
        DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp))
        # (Line 15) KillUnitAt(All, "40 + 1n Mutalisk", "Anywhere", cp);
        DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", cp))
        # (Line 16) switch(loop)
        DoActions(KillUnitAt(All, "40 + 1n Mutalisk", "Anywhere", cp))
        EUDSwitch(loop)
        # (Line 17) {
        # (Line 18) case 0:
        _t2 = EUDSwitchCase()
        # (Line 19) case 4:
        if _t2(0):
            pass
        _t3 = EUDSwitchCase()
        # (Line 20) Shape(cp, location, heroID, "40 + 1n Mojo", 0, 48);
        if _t3(4):
            Shape(cp, location, heroID, "40 + 1n Mojo", 0, 48)
            # (Line 21) break;
            EUDBreak()
            # (Line 22) case 1:
        _t4 = EUDSwitchCase()
        # (Line 23) case 5:
        if _t4(1):
            pass
        _t5 = EUDSwitchCase()
        # (Line 24) Shape(cp, location, heroID, "40 + 1n Wraith", 42, 24);
        if _t5(5):
            Shape(cp, location, heroID, "40 + 1n Wraith", 42, 24)
            # (Line 25) break;
            EUDBreak()
            # (Line 26) case 2:
        _t6 = EUDSwitchCase()
        # (Line 27) case 6:
        if _t6(2):
            pass
        _t7 = EUDSwitchCase()
        # (Line 28) Shape(cp, location, heroID, "40 + 1n Mutalisk", 24, 42);
        if _t7(6):
            Shape(cp, location, heroID, "40 + 1n Mutalisk", 24, 42)
            # (Line 29) break;
            EUDBreak()
            # (Line 30) case 3:
        _t8 = EUDSwitchCase()
        # (Line 31) case 7:
        if _t8(3):
            pass
        _t9 = EUDSwitchCase()
        # (Line 32) Shape(cp, location, heroID, "40 + 1n Mojo", 48, 0);
        if _t9(7):
            Shape(cp, location, heroID, "40 + 1n Mojo", 48, 0)
            # (Line 33) break;
            EUDBreak()
            # (Line 34) case 8:
        _t10 = EUDSwitchCase()
        # (Line 35) SetDeaths(cp, SetTo, 12, " `SkillWait");
        if _t10(8):
            # (Line 36) break;
            DoActions(SetDeaths(cp, SetTo, 12, " `SkillWait"))
            EUDBreak()
            # (Line 37) }
        # (Line 38) }
        EUDEndSwitch()
        # (Line 39) }
    EUDEndIf()
    # (Line 41) function Shape(cp, location, heroID, Unit : TrgUnit, x, y)

# (Line 42) {
@EUDTypedFunc([None, None, None, TrgUnit, None, None])
def Shape(cp, location, heroID, Unit, x, y):
    # (Line 43) f.MoveLoc(heroID, location, cp, x, y);
    f.MoveLoc(heroID, location, cp, x, y)
    # (Line 44) f.SkillUnit(1, Unit, location, cp);
    f.SkillUnit(1, Unit, location, cp)
    # (Line 45) f.SkillUnit(1, "Protoss Dark Templar", location, cp);
    f.SkillUnit(1, "Protoss Dark Templar", location, cp)
    # (Line 46) f.MoveLoc(heroID, location, cp, -y, x);
    f.MoveLoc(heroID, location, cp, -y, x)
    # (Line 47) f.SkillUnit(1, "Protoss Dark Templar", location, cp);
    f.SkillUnit(1, "Protoss Dark Templar", location, cp)
    # (Line 48) f.MoveLoc(heroID, location, cp, -x, -y);
    f.MoveLoc(heroID, location, cp, -x, -y)
    # (Line 49) f.SkillUnit(1, Unit, location, cp);
    f.SkillUnit(1, Unit, location, cp)
    # (Line 50) f.SkillUnit(1, "Protoss Dark Templar", location, cp);
    f.SkillUnit(1, "Protoss Dark Templar", location, cp)
    # (Line 51) f.MoveLoc(heroID, location, cp, y, -x);
    f.MoveLoc(heroID, location, cp, y, -x)
    # (Line 52) f.SkillUnit(1, "Protoss Dark Templar", location, cp);
    f.SkillUnit(1, "Protoss Dark Templar", location, cp)
    # (Line 53) KillUnitAt(All, "Protoss Dark Templar", "Anywhere", cp);
    # (Line 54) MoveLocation(location, heroID, cp, "Anywhere");
    DoActions(KillUnitAt(All, "Protoss Dark Templar", "Anywhere", cp))
    # (Line 55) Order(Unit, cp, "Anywhere", Attack, location);
    DoActions(MoveLocation(location, heroID, cp, "Anywhere"))
    # (Line 56) f.SkillWait(cp, 50);
    DoActions(Order(Unit, cp, "Anywhere", Attack, location))
    f.SkillWait(cp, 50)
    # (Line 57) SetDeaths(cp, Add, 1, " `SkillLoop");
    # (Line 58) }
    DoActions(SetDeaths(cp, Add, 1, " `SkillLoop"))
