## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import Function as f;
import Function as f
# (Line 4) function main(cp)
# (Line 5) {
@EUDFunc
def f_main(cp):
    # (Line 6) if (f.wait[cp] == 0 && f.step[cp] == 0)
    if EUDIf()(EUDSCAnd()(f.wait[cp] == 0)(f.step[cp] == 0)()):
        # (Line 7) {
        # (Line 8) if (Bring(cp, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill")
        _t2 = EUDIf()
        # (Line 9) && Deaths(CurrentPlayer, Exactly, 0, " `UniqueCoolTime")
        # (Line 10) && Bring(AllPlayers, Exactly, 0, 130, "Anywhere")
        # (Line 11) && Deaths(CurrentPlayer, AtLeast, 1, " `O Skill Condition"))
        if _t2(EUDSCAnd()(Bring(cp, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill"))(Deaths(CurrentPlayer, Exactly, 0, " `UniqueCoolTime"))(Bring(AllPlayers, Exactly, 0, 130, "Anywhere"))(Deaths(CurrentPlayer, AtLeast, 1, " `O Skill Condition"))()):
            # (Line 12) {
            # (Line 13) f.step[cp] = 1;
            _ARRW(f.step, cp) << (1)
            # (Line 14) KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", cp);
            # (Line 15) }
            DoActions(KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", cp))
            # (Line 16) else if (Bring(cp, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill"))
        if EUDElseIf()(Bring(cp, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill")):
            # (Line 17) {
            # (Line 18) SetResources(CurrentPlayer, Add, 60, Gas);
            # (Line 19) KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", cp);
            DoActions(SetResources(CurrentPlayer, Add, 60, Gas))
            # (Line 20) }
            DoActions(KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", cp))
            # (Line 21) else if (Bring(cp, AtLeast, 1, "Protoss Scout", "[Skill]UseSkill"))
        if EUDElseIf()(Bring(cp, AtLeast, 1, "Protoss Scout", "[Skill]UseSkill")):
            # (Line 22) {
            # (Line 23) f.step[cp] = 100;
            _ARRW(f.step, cp) << (100)
            # (Line 24) KillUnitAt(1, "Protoss Scout", "[Skill]UseSkill", cp);
            # (Line 25) }
            DoActions(KillUnitAt(1, "Protoss Scout", "[Skill]UseSkill", cp))
            # (Line 26) else if (Bring(cp, AtLeast, 1, "Protoss Carrier", "[Skill]UseSkill"))
        if EUDElseIf()(Bring(cp, AtLeast, 1, "Protoss Carrier", "[Skill]UseSkill")):
            # (Line 27) {
            # (Line 28) f.step[cp] = 200;
            _ARRW(f.step, cp) << (200)
            # (Line 29) KillUnitAt(1, "Protoss Carrier", "[Skill]UseSkill", cp);
            # (Line 30) }
            DoActions(KillUnitAt(1, "Protoss Carrier", "[Skill]UseSkill", cp))
            # (Line 31) else if (Bring(cp, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill"))
        if EUDElseIf()(Bring(cp, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill")):
            # (Line 32) {
            # (Line 33) f.step[cp] = 300;
            _ARRW(f.step, cp) << (300)
            # (Line 34) KillUnitAt(1, "Protoss Arbiter", "[Skill]UseSkill", cp);
            # (Line 35) }
            DoActions(KillUnitAt(1, "Protoss Arbiter", "[Skill]UseSkill", cp))
            # (Line 36) }
        EUDEndIf()
        # (Line 39) if (f.wait[cp] >= 2 && f.count[cp] == 0)
    EUDEndIf()
    if EUDIf()(EUDSCAnd()(f.wait[cp] >= 2)(f.count[cp] == 0)()):
        # (Line 40) {
        # (Line 41) if (Bring(cp, AtLeast, 2, "Protoss Scout", "[Skill]UseSkill") &&  f.step[cp] == 100)
        if EUDIf()(EUDSCAnd()(Bring(cp, AtLeast, 2, "Protoss Scout", "[Skill]UseSkill"))(f.step[cp] == 100)()):
            # (Line 42) {
            # (Line 43) f.Voice_Routine(cp, 4);
            f.Voice_Routine(cp, 4)
            # (Line 44) f.wait[cp] = 0;
            _ARRW(f.wait, cp) << (0)
            # (Line 45) f.step[cp] = 110;
            _ARRW(f.step, cp) << (110)
            # (Line 46) KillUnitAt(2, "Protoss Scout", "[Skill]UseSkill", cp);
            # (Line 47) }
            DoActions(KillUnitAt(2, "Protoss Scout", "[Skill]UseSkill", cp))
            # (Line 48) else if (Bring(cp, AtLeast, 2, "Protoss Carrier", "[Skill]UseSkill") &&  f.step[cp] == 200)
        if EUDElseIf()(EUDSCAnd()(Bring(cp, AtLeast, 2, "Protoss Carrier", "[Skill]UseSkill"))(f.step[cp] == 200)()):
            # (Line 49) {
            # (Line 50) f.Voice_Routine(cp, 2);
            f.Voice_Routine(cp, 2)
            # (Line 51) f.wait[cp] = 0;
            _ARRW(f.wait, cp) << (0)
            # (Line 52) f.step[cp] = 210;
            _ARRW(f.step, cp) << (210)
            # (Line 53) KillUnitAt(2, "Protoss Carrier", "[Skill]UseSkill", cp);
            # (Line 54) SetSwitch("Recall - Rusalka", Set);
            DoActions(KillUnitAt(2, "Protoss Carrier", "[Skill]UseSkill", cp))
            # (Line 55) }
            DoActions(SetSwitch("Recall - Rusalka", Set))
            # (Line 56) else if (Bring(cp, AtLeast, 2, "Protoss Arbiter", "[Skill]UseSkill") && f.step[cp] == 210)
        if EUDElseIf()(EUDSCAnd()(Bring(cp, AtLeast, 2, "Protoss Arbiter", "[Skill]UseSkill"))(f.step[cp] == 210)()):
            # (Line 57) {
            # (Line 58) f.Voice_Routine(cp, 3);
            f.Voice_Routine(cp, 3)
            # (Line 59) f.wait[cp] = 0;
            _ARRW(f.wait, cp) << (0)
            # (Line 60) f.step[cp] = 220;
            _ARRW(f.step, cp) << (220)
            # (Line 61) KillUnitAt(2, "Protoss Arbiter", "[Skill]UseSkill", cp);
            # (Line 62) SetSwitch("Recall - Rusalka", Set);
            DoActions(KillUnitAt(2, "Protoss Arbiter", "[Skill]UseSkill", cp))
            # (Line 63) }
            DoActions(SetSwitch("Recall - Rusalka", Set))
            # (Line 64) else if (Bring(cp, AtLeast, 2, "Protoss Carrier", "[Skill]UseSkill") &&  f.step[cp] == 300)
        if EUDElseIf()(EUDSCAnd()(Bring(cp, AtLeast, 2, "Protoss Carrier", "[Skill]UseSkill"))(f.step[cp] == 300)()):
            # (Line 65) {
            # (Line 66) f.Voice_Routine(cp, 1);
            f.Voice_Routine(cp, 1)
            # (Line 67) f.wait[cp] = 0;
            _ARRW(f.wait, cp) << (0)
            # (Line 68) f.step[cp] = 310;
            _ARRW(f.step, cp) << (310)
            # (Line 69) KillUnitAt(2, "Protoss Carrier", "[Skill]UseSkill", cp);
            # (Line 70) }
            DoActions(KillUnitAt(2, "Protoss Carrier", "[Skill]UseSkill", cp))
            # (Line 73) else if (Bring(cp, AtLeast, 2, "Protoss Arbiter", "[Skill]UseSkill")
        _t12 = EUDElseIf()
        # (Line 74) && Bring(cp, AtLeast, 1, "Protoss Carrier", "[Skill]UseSkill")
        # (Line 75) && f.step[cp] == 300
        # (Line 76) && Deaths(cp, AtLeast, f.UltimateA[cp], " `UltimateCoolTime"))
        if _t12(EUDSCAnd()(Bring(cp, AtLeast, 2, "Protoss Arbiter", "[Skill]UseSkill"))(Bring(cp, AtLeast, 1, "Protoss Carrier", "[Skill]UseSkill"))(f.step[cp] == 300)(Deaths(cp, AtLeast, f.UltimateA[cp], " `UltimateCoolTime"))()):
            # (Line 77) {
            # (Line 78) if (Switch("UiltimateSwitch", Cleared))
            if EUDIf()(Switch("UiltimateSwitch", Cleared)):
                # (Line 79) {
                # (Line 80) f.Voice_Routine(cp, 5);
                f.Voice_Routine(cp, 5)
                # (Line 81) SetSwitch("UiltimateSwitch", Set);
                # (Line 82) CreateUnit(1, " Item. Flag", "[Uiltimate]Flag", CurrentPlayer);
                DoActions(SetSwitch("UiltimateSwitch", Set))
                # (Line 83) f.wait[cp] = 0;
                DoActions(CreateUnit(1, " Item. Flag", "[Uiltimate]Flag", CurrentPlayer))
                _ARRW(f.wait, cp) << (0)
                # (Line 84) f.step[cp] = 320;
                _ARRW(f.step, cp) << (320)
                # (Line 85) SetDeaths(cp, Subtract, f.UltimateA[cp], " `UltimateCoolTime");
                # (Line 86) KillUnitAt(2, "Protoss Arbiter", "[Skill]UseSkill", cp);
                DoActions(SetDeaths(cp, Subtract, f.UltimateA[cp], " `UltimateCoolTime"))
                # (Line 87) KillUnitAt(1, "Protoss Carrier", "[Skill]UseSkill", cp);
                DoActions(KillUnitAt(2, "Protoss Arbiter", "[Skill]UseSkill", cp))
                # (Line 88) }
                DoActions(KillUnitAt(1, "Protoss Carrier", "[Skill]UseSkill", cp))
                # (Line 89) else
                # (Line 90) {
            if EUDElse()():
                # (Line 91) SetResources(CurrentPlayer, Add, 800, Gas);
                # (Line 92) KillUnitAt(2, "Protoss Arbiter", "[Skill]UseSkill", cp);
                DoActions(SetResources(CurrentPlayer, Add, 800, Gas))
                # (Line 93) KillUnitAt(1, "Protoss Carrier", "[Skill]UseSkill", cp);
                DoActions(KillUnitAt(2, "Protoss Arbiter", "[Skill]UseSkill", cp))
                # (Line 94) SetDeaths(CurrentPlayer, SetTo, 999, " `SYSTEMTEXT");
                DoActions(KillUnitAt(1, "Protoss Carrier", "[Skill]UseSkill", cp))
                # (Line 95) }
                DoActions(SetDeaths(CurrentPlayer, SetTo, 999, " `SYSTEMTEXT"))
                # (Line 96) }
            EUDEndIf()
            # (Line 97) }
        EUDEndIf()
        # (Line 98) }
    EUDEndIf()
