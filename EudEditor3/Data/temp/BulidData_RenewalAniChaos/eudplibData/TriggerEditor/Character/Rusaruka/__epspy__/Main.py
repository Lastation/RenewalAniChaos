## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Function as f;
import Function as f
# (Line 3) import Character.Rusaruka.Skill_O as O;
from Character.Rusaruka import Skill_O as O
# (Line 4) import Character.Rusaruka.Skill_S as S;
from Character.Rusaruka import Skill_S as S
# (Line 5) import Character.Rusaruka.Skill_C as C;
from Character.Rusaruka import Skill_C as C
# (Line 8) import Character.Rusaruka.Skill_SSS as SSS;
from Character.Rusaruka import Skill_SSS as SSS
# (Line 10) import Character.Variable_Text as voice;
from Character import Variable_Text as voice
# (Line 11) import Character.Rusaruka.Text as text;
from Character.Rusaruka import Text as text
# (Line 13) const stb = StringBuffer();
stb = _CGFW(lambda: [StringBuffer()], 1)[0]
# (Line 15) function SkillList(cp);
# (Line 17) function main(cp)
# (Line 18) {
@EUDFunc
def f_main(cp):
    # (Line 19) if (Deaths(cp, Exactly, 1000, 51))
    if EUDIf()(Deaths(cp, Exactly, 1000, 51)):
        # (Line 20) {
        # (Line 21) f.location[cp] = 32;
        _ARRW(f.location, cp) << (32)
        # (Line 22) f.heroID[cp] = 51;
        _ARRW(f.heroID, cp) << (51)
        # (Line 23) f.step[cp] = dwread_epd(179 * 12 + cp);
        _ARRW(f.step, cp) << (f_dwread_epd(179 * 12 + cp))
        # (Line 25) SkillList(cp);
        SkillList(cp)
        # (Line 27) if (Deaths(cp, Exactly, 0, " `SkillWait"))
        if EUDIf()(Deaths(cp, Exactly, 0, " `SkillWait")):
            # (Line 28) {
            # (Line 29) switch(f.step[cp])
            EUDSwitch(f.step[cp])
            # (Line 30) {
            # (Line 31) case 1:
            _t3 = EUDSwitchCase()
            # (Line 32) O.main(cp, f.location[cp], f.heroID[cp]);
            if _t3(1):
                O.f_main(cp, f.location[cp], f.heroID[cp])
                # (Line 33) break;
                EUDBreak()
                # (Line 34) case 100:
            _t4 = EUDSwitchCase()
            # (Line 35) S.main(cp, f.location[cp], f.heroID[cp]);
            if _t4(100):
                S.f_main(cp, f.location[cp], f.heroID[cp])
                # (Line 36) break;
                EUDBreak()
                # (Line 37) case 200:
            _t5 = EUDSwitchCase()
            # (Line 38) C.main(cp, f.location[cp], f.heroID[cp]);
            if _t5(200):
                C.f_main(cp, f.location[cp], f.heroID[cp])
                # (Line 39) break;
                EUDBreak()
                # (Line 45) case 150:
            _t6 = EUDSwitchCase()
            # (Line 46) SSS.main(cp, f.location[cp], f.heroID[cp]);
            if _t6(150):
                SSS.f_main(cp, f.location[cp], f.heroID[cp])
                # (Line 47) break;
                EUDBreak()
                # (Line 48) }
            # (Line 49) }
            EUDEndSwitch()
            # (Line 51) if (Deaths(cp, AtLeast, 1, 186))	// Skill Text
        EUDEndIf()
        if EUDIf()(Deaths(cp, AtLeast, 1, 186)):
            # (Line 52) {
            # (Line 53) voice.Rusaruka_Voice[0] = dwread_epd(186 * 12 + cp);
            _ARRW(voice.Rusaruka_Voice, 0) << (f_dwread_epd(186 * 12 + cp))
            # (Line 54) voice.Rusaruka_Voice[1] = dwread_epd(186 * 12 + cp);
            _ARRW(voice.Rusaruka_Voice, 1) << (f_dwread_epd(186 * 12 + cp))
            # (Line 55) voice.Rusaruka_Voice[2] = dwread_epd(186 * 12 + cp);
            _ARRW(voice.Rusaruka_Voice, 2) << (f_dwread_epd(186 * 12 + cp))
            # (Line 56) voice.Rusaruka_Voice[3] = dwread_epd(186 * 12 + cp);
            _ARRW(voice.Rusaruka_Voice, 3) << (f_dwread_epd(186 * 12 + cp))
            # (Line 57) voice.Rusaruka_Voice[4] = dwread_epd(186 * 12 + cp);
            _ARRW(voice.Rusaruka_Voice, 4) << (f_dwread_epd(186 * 12 + cp))
            # (Line 58) voice.Rusaruka_Voice[5] = dwread_epd(186 * 12 + cp);
            _ARRW(voice.Rusaruka_Voice, 5) << (f_dwread_epd(186 * 12 + cp))
            # (Line 59) SetDeaths(cp, SetTo, 0, 186);
            # (Line 60) }
            DoActions(SetDeaths(cp, SetTo, 0, 186))
            # (Line 61) }
        EUDEndIf()
        # (Line 64) text.main(cp);
    EUDEndIf()
    text.f_main(cp)
    # (Line 65) }
    # (Line 67) function SkillList(cp)

# (Line 68) {
@EUDFunc
def SkillList(cp):
    # (Line 69) if(Memory(0x596A44, Exactly, 0x00000100))	// Insert key Pressed
    if EUDIf()(Memory(0x596A44, Exactly, 0x00000100)):
        # (Line 70) {
        # (Line 71) stb.printAt(0, "\n");
        stb.printAt(0, "\n")
        # (Line 72) stb.printAt(1, "\x1F　＃\x04- 루살카 \x1B슈베게린　\x04[ 디에스 이래 ]");
        stb.printAt(1, "\x1F　＃\x04- 루살카 \x1B슈베게린　\x04[ 디에스 이래 ]")
        # (Line 73) stb.printAt(2, "　　\x1FA\x04ction List");
        stb.printAt(2, "　　\x1FA\x04ction List")
        # (Line 74) stb.printAt(3, "　　　\x18O \x04창조 \x19[ 15x15 / 적 5초마다 경직 / 파괴될시 5분후 재생 / 설치형 ]");
        stb.printAt(3, "　　　\x18O \x04창조 \x19[ 15x15 / 적 5초마다 경직 / 파괴될시 5분후 재생 / 설치형 ]")
        # (Line 75) stb.printAt(4, "　　　\x04\x1F>SSS \x04>위협 \x19[ 대인 / 공성 ]");
        stb.printAt(4, "　　　\x04\x1F>SSS \x04>위협 \x19[ 대인 / 공성 ]")
        # (Line 76) stb.printAt(5, "　　　\x04\x1F>CCC + AA \x04고문바퀴 \x19[ 공성 / 후속 스킬 귀환봉인, 자리고정 ]");
        stb.printAt(5, "　　　\x04\x1F>CCC + AA \x04고문바퀴 \x19[ 공성 / 후속 스킬 귀환봉인, 자리고정 ]")
        # (Line 77) stb.printAt(6, "　　　\x04\x1F>ACC \x04고문용 쇠사슬 \x19[ 대인 ]");
        stb.printAt(6, "　　　\x04\x1F>ACC \x04고문용 쇠사슬 \x19[ 대인 ]")
        # (Line 78) stb.printAt(7, "\n");
        stb.printAt(7, "\n")
        # (Line 79) stb.printAt(8, "　　　\x08AAAC \x04갈망 \x19[ 공성 / 선딜없음 /  장판형 스킬 ] \x05650");
        stb.printAt(8, "　　　\x08AAAC \x04갈망 \x19[ 공성 / 선딜없음 /  장판형 스킬 ] \x05650")
        # (Line 80) stb.printAt(9, "\n");
        stb.printAt(9, "\n")
        # (Line 81) }
        # (Line 82) }
    EUDEndIf()
