## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Function as f;
import Function as f
# (Line 3) import Character.Nanami.Skill_O as O;
from Character.Nanami import Skill_O as O
# (Line 4) import Character.Nanami.Skill_S as S;
from Character.Nanami import Skill_S as S
# (Line 5) import Character.Nanami.Skill_C as C;
from Character.Nanami import Skill_C as C
# (Line 6) import Character.Nanami.Skill_A as A;
from Character.Nanami import Skill_A as A
# (Line 7) import Character.Nanami.Skill_SSS as SSS;
from Character.Nanami import Skill_SSS as SSS
# (Line 8) import Character.Nanami.Skill_CCC as CCC;
from Character.Nanami import Skill_CCC as CCC
# (Line 9) import Character.Nanami.Skill_CCCAA as CCCAA;
from Character.Nanami import Skill_CCCAA as CCCAA
# (Line 10) import Character.Nanami.Skill_CCA as CCA;
from Character.Nanami import Skill_CCA as CCA
# (Line 11) import Character.Nanami.Skill_CCAAA as CCAAA;
from Character.Nanami import Skill_CCAAA as CCAAA
# (Line 12) import Character.Nanami.Skill_CCAAAAA as CCAAAAA;
from Character.Nanami import Skill_CCAAAAA as CCAAAAA
# (Line 13) import Character.Nanami.Skill_Ult1 as Ult1;
from Character.Nanami import Skill_Ult1 as Ult1
# (Line 14) import Character.Nanami.Skill_Ult2 as Ult2;
from Character.Nanami import Skill_Ult2 as Ult2
# (Line 16) import Character.Nanami.Text as text;
from Character.Nanami import Text as text
# (Line 17) import Character.Nanami.Commend as commend;
from Character.Nanami import Commend as commend
# (Line 19) function SkillList(cp);
# (Line 21) function main(cp)
# (Line 22) {
@EUDFunc
def f_main(cp):
    # (Line 23) f.location[cp] = 185;
    _ARRW(f.location, cp) << (185)
    # (Line 24) f.heroID[cp] = 64;
    _ARRW(f.heroID, cp) << (64)
    # (Line 26) f.UltimateA[cp] = 700;
    _ARRW(f.UltimateA, cp) << (700)
    # (Line 27) f.UltimateB[cp] = 500;
    _ARRW(f.UltimateB, cp) << (500)
    # (Line 29) SkillList(cp);
    SkillList(cp)
    # (Line 30) commend.main(cp);
    commend.f_main(cp)
    # (Line 32) if (f.wait[cp] == 0)
    if EUDIf()(f.wait[cp] == 0):
        # (Line 33) {
        # (Line 34) switch(f.step[cp])
        EUDSwitch(f.step[cp])
        # (Line 35) {
        # (Line 36) case 1:
        _t2 = EUDSwitchCase()
        # (Line 37) O.main(cp);
        if _t2(1):
            O.f_main(cp)
            # (Line 38) break;
            EUDBreak()
            # (Line 39) case 100:
        _t3 = EUDSwitchCase()
        # (Line 40) S.main(cp);
        if _t3(100):
            S.f_main(cp)
            # (Line 41) break;
            EUDBreak()
            # (Line 42) case 200:
        _t4 = EUDSwitchCase()
        # (Line 43) C.main(cp);
        if _t4(200):
            C.f_main(cp)
            # (Line 44) break;
            EUDBreak()
            # (Line 45) case 300:
        _t5 = EUDSwitchCase()
        # (Line 46) A.main(cp);
        if _t5(300):
            A.f_main(cp)
            # (Line 47) break;
            EUDBreak()
            # (Line 48) case 110:
        _t6 = EUDSwitchCase()
        # (Line 49) SSS.main(cp);
        if _t6(110):
            SSS.f_main(cp)
            # (Line 50) break;
            EUDBreak()
            # (Line 51) case 210:
        _t7 = EUDSwitchCase()
        # (Line 52) CCC.main(cp);
        if _t7(210):
            CCC.f_main(cp)
            # (Line 53) break;
            EUDBreak()
            # (Line 54) case 220:
        _t8 = EUDSwitchCase()
        # (Line 55) CCCAA.main(cp);
        if _t8(220):
            CCCAA.f_main(cp)
            # (Line 56) break;
            EUDBreak()
            # (Line 57) case 230:
        _t9 = EUDSwitchCase()
        # (Line 58) CCA.main(cp);
        if _t9(230):
            CCA.f_main(cp)
            # (Line 59) break;
            EUDBreak()
            # (Line 60) case 240:
        _t10 = EUDSwitchCase()
        # (Line 61) CCAAA.main(cp);
        if _t10(240):
            CCAAA.f_main(cp)
            # (Line 62) break;
            EUDBreak()
            # (Line 63) case 250:
        _t11 = EUDSwitchCase()
        # (Line 64) CCAAAAA.main(cp);
        if _t11(250):
            CCAAAAA.f_main(cp)
            # (Line 65) break;
            EUDBreak()
            # (Line 66) case 260:
        _t12 = EUDSwitchCase()
        # (Line 67) Ult1.main(cp);
        if _t12(260):
            Ult1.f_main(cp)
            # (Line 68) break;
            EUDBreak()
            # (Line 69) case 310:
        _t13 = EUDSwitchCase()
        # (Line 70) Ult2.main(cp);
        if _t13(310):
            Ult2.f_main(cp)
            # (Line 71) break;
            EUDBreak()
            # (Line 72) }
        # (Line 73) }
        EUDEndSwitch()
        # (Line 77) }
    EUDEndIf()
    # (Line 80) function SkillVoice(cp)

# (Line 81) {
@EUDFunc
def SkillVoice(cp):
    # (Line 82) if (f.Nanami_Voice[cp] != 0) { text.main(cp); }
    if EUDIf()(f.Nanami_Voice[cp] == 0, neg=True):
        text.f_main(cp)
        # (Line 83) }
    EUDEndIf()
    # (Line 85) function SkillList(cp)

# (Line 86) {
@EUDFunc
def SkillList(cp):
    # (Line 87) if(f.INSERT_KEY[cp] == 1) 	// Insert key Pressed
    if EUDIf()(f.INSERT_KEY[cp] == 1):
        # (Line 88) {
        # (Line 89) f.stb.printAt(0, "\n");
        f.stb.printAt(0, "\n")
        # (Line 90) f.stb.printAt(1, "\x1F　＃\x1B- 나나미 치아키　\x04[ 단간론파 ]");
        f.stb.printAt(1, "\x1F　＃\x1B- 나나미 치아키　\x04[ 단간론파 ]")
        # (Line 91) f.stb.printAt(2, "　　\x1FA\x04ction List");
        f.stb.printAt(2, "　　\x1FA\x04ction List")
        # (Line 92) f.stb.printAt(3, "　　　\x17Passive \x04초고교급 게이머 \x19[ 아군 마나 회복 증가 +5 ]");
        f.stb.printAt(3, "　　　\x17Passive \x04초고교급 게이머 \x19[ 아군 마나 회복 증가 +5 ]")
        # (Line 93) f.stb.printAt(4, "　　　\x18O \x04모두의 힘 \x19[ 1분 간 아군 공 방 증가 +5 ] \x053분");
        f.stb.printAt(4, "　　　\x18O \x04모두의 힘 \x19[ 1분 간 아군 공 방 증가 +5 ] \x053분")
        # (Line 94) f.stb.printAt(5, "　　　\x04\x1FSSS \x04발상 \x19[ 만능 ]");
        f.stb.printAt(5, "　　　\x04\x1FSSS \x04발상 \x19[ 만능 ]")
        # (Line 95) f.stb.printAt(6, "　　　\x04\x1FACC+ CA \x04필살기 \x19[ 만능 / 자리고정 ]");
        f.stb.printAt(6, "　　　\x04\x1FACC+ CA \x04필살기 \x19[ 만능 / 자리고정 ]")
        # (Line 96) f.stb.printAt(7, "　　　\x04\x1FCCC + AA + AA \x04응원 \x19[ 공성 / CCC + AA - 자리고정 / 15 x 15 아군 공 방 증가 +5 ] \x1F[1]");
        f.stb.printAt(7, "　　　\x04\x1FCCC + AA + AA \x04응원 \x19[ 공성 / CCC + AA - 자리고정 / 15 x 15 아군 공 방 증가 +5 ] \x1F[1]")
        # (Line 97) f.stb.printAt(8, "\n");
        f.stb.printAt(8, "\n")
        # (Line 98) f.stb.printAt(9, "　　　\x1F[1] + \x08O \x04클래스메이트 \x19[ 공성 / 자리고정 ] \x05", f.UltimateA[cp]);
        f.stb.printAt(9, "　　　\x1F[1] + \x08O \x04클래스메이트 \x19[ 공성 / 자리고정 ] \x05", f.UltimateA[cp])
        # (Line 99) f.stb.printAt(10, "　　　\x08AAA \x04격려 \x19[ 서포트 / 아군 궁게이지 +250 ] \x05", f.UltimateB[cp]);
        f.stb.printAt(10, "　　　\x08AAA \x04격려 \x19[ 서포트 / 아군 궁게이지 +250 ] \x05", f.UltimateB[cp])
        # (Line 100) PlayWAV("sound\\Bullet\\LaserHit.wav");
        # (Line 101) f.INSERT_KEY[cp] = 0;
        DoActions(PlayWAV("sound\\Bullet\\LaserHit.wav"))
        _ARRW(f.INSERT_KEY, cp) << (0)
        # (Line 102) }
        # (Line 103) }
    EUDEndIf()
