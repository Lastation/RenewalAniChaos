## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Function as f;
import Function as f
# (Line 3) const stb = StringBuffer();
stb = _CGFW(lambda: [StringBuffer()], 1)[0]
# (Line 5) function main(cp)
# (Line 6) {
@EUDFunc
def f_main(cp):
    # (Line 7) if (f.wait[cp] == 0 && f.step[cp] == 0)
    if EUDIf()(EUDSCAnd()(f.wait[cp] == 0)(f.step[cp] == 0)()):
        # (Line 8) {
        # (Line 9) if (Bring(cp, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill")
        _t2 = EUDIf()
        # (Line 10) && Score(CurrentPlayer, Custom, AtLeast, 25)
        # (Line 11) && Deaths(CurrentPlayer, Exactly, 0, " `UniqueCoolTime"))
        if _t2(EUDSCAnd()(Bring(cp, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill"))(Score(CurrentPlayer, Custom, AtLeast, 25))(Deaths(CurrentPlayer, Exactly, 0, " `UniqueCoolTime"))()):
            # (Line 12) {
            # (Line 13) f.Voice_Routine(cp, 10);
            f.Voice_Routine(cp, 10)
            # (Line 14) f.step[cp] = 1;
            _ARRW(f.step, cp) << (1)
            # (Line 15) KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", cp);
            # (Line 16) }
            DoActions(KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", cp))
            # (Line 17) else if (Bring(cp, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill"))
        if EUDElseIf()(Bring(cp, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill")):
            # (Line 18) {
            # (Line 19) SetResources(CurrentPlayer, Add, 60, Gas);
            # (Line 20) KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", cp);
            DoActions(SetResources(CurrentPlayer, Add, 60, Gas))
            # (Line 21) }
            DoActions(KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", cp))
            # (Line 22) else if (Bring(cp, AtLeast, 1, "Protoss Carrier", "[Skill]UseSkill"))
        if EUDElseIf()(Bring(cp, AtLeast, 1, "Protoss Carrier", "[Skill]UseSkill")):
            # (Line 23) {
            # (Line 24) f.step[cp] = 200;
            _ARRW(f.step, cp) << (200)
            # (Line 25) KillUnitAt(1, "Protoss Carrier", "[Skill]UseSkill", cp);
            # (Line 26) }
            DoActions(KillUnitAt(1, "Protoss Carrier", "[Skill]UseSkill", cp))
            # (Line 27) else if (Bring(cp, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill"))
        if EUDElseIf()(Bring(cp, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill")):
            # (Line 28) {
            # (Line 29) f.step[cp] = 300;
            _ARRW(f.step, cp) << (300)
            # (Line 30) KillUnitAt(1, "Protoss Arbiter", "[Skill]UseSkill", cp);
            # (Line 31) }
            DoActions(KillUnitAt(1, "Protoss Arbiter", "[Skill]UseSkill", cp))
            # (Line 33) else if (Bring(cp, AtLeast, 1, "Protoss Scout", "[Skill]UseSkill"))
        if EUDElseIf()(Bring(cp, AtLeast, 1, "Protoss Scout", "[Skill]UseSkill")):
            # (Line 34) {
            # (Line 35) f.step[cp] = 100;
            _ARRW(f.step, cp) << (100)
            # (Line 36) KillUnitAt(1, "Protoss Scout", "[Skill]UseSkill", cp);
            # (Line 37) }
            DoActions(KillUnitAt(1, "Protoss Scout", "[Skill]UseSkill", cp))
            # (Line 39) }
        EUDEndIf()
        # (Line 42) if (f.wait[cp] >= 2 && f.count[cp] == 0)
    EUDEndIf()
    if EUDIf()(EUDSCAnd()(f.wait[cp] >= 2)(f.count[cp] == 0)()):
        # (Line 43) {
        # (Line 44) if (Bring(cp, AtLeast, 2, "Protoss Scout", "[Skill]UseSkill") && f.step[cp] == 100)
        if EUDIf()(EUDSCAnd()(Bring(cp, AtLeast, 2, "Protoss Scout", "[Skill]UseSkill"))(f.step[cp] == 100)()):
            # (Line 45) {
            # (Line 46) f.Voice_Routine(cp, 1);
            f.Voice_Routine(cp, 1)
            # (Line 47) f.wait[cp] = 0;
            _ARRW(f.wait, cp) << (0)
            # (Line 48) f.count[cp] = 0;
            _ARRW(f.count, cp) << (0)
            # (Line 49) f.loop[cp] = 0;
            _ARRW(f.loop, cp) << (0)
            # (Line 50) f.step[cp] = 110;
            _ARRW(f.step, cp) << (110)
            # (Line 51) KillUnitAt(2, "Protoss Scout", "[Skill]UseSkill", cp);
            # (Line 52) }
            DoActions(KillUnitAt(2, "Protoss Scout", "[Skill]UseSkill", cp))
            # (Line 53) else if (Bring(cp, AtLeast, 2, "Protoss Carrier", "[Skill]UseSkill")
        _t9 = EUDElseIf()
        # (Line 54) && f.step[cp] == 300)
        if _t9(EUDSCAnd()(Bring(cp, AtLeast, 2, "Protoss Carrier", "[Skill]UseSkill"))(f.step[cp] == 300)()):
            # (Line 55) {
            # (Line 56) f.Voice_Routine(cp, 2);
            f.Voice_Routine(cp, 2)
            # (Line 57) f.wait[cp] = 0;
            _ARRW(f.wait, cp) << (0)
            # (Line 58) f.count[cp] = 0;
            _ARRW(f.count, cp) << (0)
            # (Line 59) f.loop[cp] = 0;
            _ARRW(f.loop, cp) << (0)
            # (Line 60) f.step[cp] = 210;
            _ARRW(f.step, cp) << (210)
            # (Line 61) KillUnitAt(2, "Protoss Carrier", "[Skill]UseSkill", cp);
            # (Line 62) }
            DoActions(KillUnitAt(2, "Protoss Carrier", "[Skill]UseSkill", cp))
            # (Line 63) else if (Bring(cp, AtLeast, 1, "Protoss Carrier", "[Skill]UseSkill")
        _t10 = EUDElseIf()
        # (Line 64) && Bring(cp, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill") && f.step[cp] == 210)
        if _t10(EUDSCAnd()(Bring(cp, AtLeast, 1, "Protoss Carrier", "[Skill]UseSkill"))(Bring(cp, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill"))(f.step[cp] == 210)()):
            # (Line 65) {
            # (Line 66) f.Voice_Routine(cp, 3);
            f.Voice_Routine(cp, 3)
            # (Line 67) f.wait[cp] = 0;
            _ARRW(f.wait, cp) << (0)
            # (Line 68) f.count[cp] = 0;
            _ARRW(f.count, cp) << (0)
            # (Line 69) f.loop[cp] = 0;
            _ARRW(f.loop, cp) << (0)
            # (Line 70) f.step[cp] = 220;
            _ARRW(f.step, cp) << (220)
            # (Line 71) KillUnitAt(1, "Protoss Carrier", "[Skill]UseSkill", cp);
            # (Line 72) KillUnitAt(1, "Protoss Arbiter", "[Skill]UseSkill", cp);
            DoActions(KillUnitAt(1, "Protoss Carrier", "[Skill]UseSkill", cp))
            # (Line 73) }
            DoActions(KillUnitAt(1, "Protoss Arbiter", "[Skill]UseSkill", cp))
            # (Line 74) else if (Bring(cp, AtLeast, 2, "Protoss Carrier", "[Skill]UseSkill") && f.step[cp] == 200)
        if EUDElseIf()(EUDSCAnd()(Bring(cp, AtLeast, 2, "Protoss Carrier", "[Skill]UseSkill"))(f.step[cp] == 200)()):
            # (Line 75) {
            # (Line 76) f.Voice_Routine(cp, 4);
            f.Voice_Routine(cp, 4)
            # (Line 77) f.wait[cp] = 0;
            _ARRW(f.wait, cp) << (0)
            # (Line 78) f.count[cp] = 0;
            _ARRW(f.count, cp) << (0)
            # (Line 79) f.loop[cp] = 0;
            _ARRW(f.loop, cp) << (0)
            # (Line 80) f.step[cp] = 230;
            _ARRW(f.step, cp) << (230)
            # (Line 81) KillUnitAt(2, "Protoss Carrier", "[Skill]UseSkill", cp);
            # (Line 82) }
            DoActions(KillUnitAt(2, "Protoss Carrier", "[Skill]UseSkill", cp))
            # (Line 83) else if (Bring(cp, AtLeast, 2, "Protoss Arbiter", "[Skill]UseSkill")
        _t12 = EUDElseIf()
        # (Line 84) && f.step[cp] == 230)
        if _t12(EUDSCAnd()(Bring(cp, AtLeast, 2, "Protoss Arbiter", "[Skill]UseSkill"))(f.step[cp] == 230)()):
            # (Line 85) {
            # (Line 86) f.Voice_Routine(cp, 6);
            f.Voice_Routine(cp, 6)
            # (Line 87) f.wait[cp] = 0;
            _ARRW(f.wait, cp) << (0)
            # (Line 88) f.count[cp] = 0;
            _ARRW(f.count, cp) << (0)
            # (Line 89) f.loop[cp] = 0;
            _ARRW(f.loop, cp) << (0)
            # (Line 90) f.step[cp] = 240;
            _ARRW(f.step, cp) << (240)
            # (Line 91) KillUnitAt(2, "Protoss Arbiter", "[Skill]UseSkill", cp);
            # (Line 92) }
            DoActions(KillUnitAt(2, "Protoss Arbiter", "[Skill]UseSkill", cp))
            # (Line 93) else if (Bring(cp, AtLeast, 2, "Protoss Arbiter", "[Skill]UseSkill")
        _t13 = EUDElseIf()
        # (Line 94) && f.step[cp] == 240)
        if _t13(EUDSCAnd()(Bring(cp, AtLeast, 2, "Protoss Arbiter", "[Skill]UseSkill"))(f.step[cp] == 240)()):
            # (Line 95) {
            # (Line 96) f.Voice_Routine(cp, 8);
            f.Voice_Routine(cp, 8)
            # (Line 97) f.wait[cp] = 0;
            _ARRW(f.wait, cp) << (0)
            # (Line 98) f.count[cp] = 0;
            _ARRW(f.count, cp) << (0)
            # (Line 99) f.loop[cp] = 0;
            _ARRW(f.loop, cp) << (0)
            # (Line 100) f.step[cp] = 250;
            _ARRW(f.step, cp) << (250)
            # (Line 101) KillUnitAt(2, "Protoss Arbiter", "[Skill]UseSkill", cp);
            # (Line 102) }
            DoActions(KillUnitAt(2, "Protoss Arbiter", "[Skill]UseSkill", cp))
            # (Line 104) else if (Bring(cp, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill")
        _t14 = EUDElseIf()
        # (Line 105) && f.step[cp] == 250
        # (Line 106) && Deaths(cp, AtLeast, f.UltimateA[cp], " `UltimateCoolTime"))
        if _t14(EUDSCAnd()(Bring(cp, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill"))(f.step[cp] == 250)(Deaths(cp, AtLeast, f.UltimateA[cp], " `UltimateCoolTime"))()):
            # (Line 107) {
            # (Line 108) if (Switch("UiltimateSwitch", Cleared))
            if EUDIf()(Switch("UiltimateSwitch", Cleared)):
                # (Line 109) {
                # (Line 110) f.Voice_Routine(cp, 11);
                f.Voice_Routine(cp, 11)
                # (Line 111) SetSwitch("UiltimateSwitch", Set);
                # (Line 112) f.wait[cp] = 0;
                DoActions(SetSwitch("UiltimateSwitch", Set))
                _ARRW(f.wait, cp) << (0)
                # (Line 113) f.count[cp] = 0;
                _ARRW(f.count, cp) << (0)
                # (Line 114) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 115) f.step[cp] = 260;
                _ARRW(f.step, cp) << (260)
                # (Line 116) SetDeaths(cp, Subtract, f.UltimateA[cp], " `UltimateCoolTime");
                # (Line 117) KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", cp);
                DoActions(SetDeaths(cp, Subtract, f.UltimateA[cp], " `UltimateCoolTime"))
                # (Line 118) }
                DoActions(KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", cp))
                # (Line 119) else
                # (Line 120) {
            if EUDElse()():
                # (Line 121) SetResources(CurrentPlayer, Add, 60, Gas);
                # (Line 122) KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", cp);
                DoActions(SetResources(CurrentPlayer, Add, 60, Gas))
                # (Line 123) SetDeaths(CurrentPlayer, SetTo, 999, " `SYSTEMTEXT");
                DoActions(KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", cp))
                # (Line 124) }
                DoActions(SetDeaths(CurrentPlayer, SetTo, 999, " `SYSTEMTEXT"))
                # (Line 125) }
            EUDEndIf()
            # (Line 126) else if (Bring(cp, AtLeast, 2, "Protoss Arbiter", "[Skill]UseSkill")
        _t16 = EUDElseIf()
        # (Line 127) && f.step[cp] == 300
        # (Line 128) && Deaths(cp, AtLeast, f.UltimateB[cp], " `UltimateCoolTime"))
        if _t16(EUDSCAnd()(Bring(cp, AtLeast, 2, "Protoss Arbiter", "[Skill]UseSkill"))(f.step[cp] == 300)(Deaths(cp, AtLeast, f.UltimateB[cp], " `UltimateCoolTime"))()):
            # (Line 129) {
            # (Line 130) f.Voice_Routine(cp, 16);
            f.Voice_Routine(cp, 16)
            # (Line 131) f.wait[cp] = 0;
            _ARRW(f.wait, cp) << (0)
            # (Line 132) f.count[cp] = 0;
            _ARRW(f.count, cp) << (0)
            # (Line 133) f.loop[cp] = 0;
            _ARRW(f.loop, cp) << (0)
            # (Line 134) f.step[cp] = 310;
            _ARRW(f.step, cp) << (310)
            # (Line 135) SetDeaths(cp, Subtract, f.UltimateB[cp], " `UltimateCoolTime");
            # (Line 136) KillUnitAt(2, "Protoss Arbiter", "[Skill]UseSkill", cp);
            DoActions(SetDeaths(cp, Subtract, f.UltimateB[cp], " `UltimateCoolTime"))
            # (Line 138) }
            DoActions(KillUnitAt(2, "Protoss Arbiter", "[Skill]UseSkill", cp))
            # (Line 140) }
        EUDEndIf()
        # (Line 141) }
    EUDEndIf()
