## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Variable as v;
import Variable as v
# (Line 2) import Function as f;
import Function as f
# (Line 4) function NormalText(cp)
# (Line 5) {
@EUDFunc
def NormalText(cp):
    # (Line 6) switch (v.Sound_Text3[cp])
    EUDSwitch(v.Sound_Text3[cp])
    # (Line 7) {
    # (Line 8) case 3000:
    _t1 = EUDSwitchCase()
    # (Line 9) PlayWAV("Rin_01.ogg");
    if _t1(3000):
        # (Line 10) v.Sound_Text3[cp] = 0;
        DoActions(PlayWAV("Rin_01.ogg"))
        _ARRW(v.Sound_Text3, cp) << (0)
        # (Line 11) f.stb.print("\n\n\x13\x1BRin\n\x13\x04이 앞에 무엇이 있는 걸까?\n\n");
        f.stb.print("\n\n\x13\x1BRin\n\x13\x04이 앞에 무엇이 있는 걸까?\n\n")
        # (Line 12) break;
        EUDBreak()
        # (Line 13) case 3001:
    _t2 = EUDSwitchCase()
    # (Line 14) PlayWAV("Rin_02.ogg");
    if _t2(3001):
        # (Line 15) v.Sound_Text3[cp] = 0;
        DoActions(PlayWAV("Rin_02.ogg"))
        _ARRW(v.Sound_Text3, cp) << (0)
        # (Line 16) f.stb.print("\n\n\x13\x1BRin\n\x13\x04언제부턴가, 생각하지 않게 됐다\n\n");
        f.stb.print("\n\n\x13\x1BRin\n\x13\x04언제부턴가, 생각하지 않게 됐다\n\n")
        # (Line 17) break;
        EUDBreak()
        # (Line 18) case 3002:
    _t3 = EUDSwitchCase()
    # (Line 19) PlayWAV("Rin_03.ogg");
    if _t3(3002):
        # (Line 20) v.Sound_Text3[cp] = 0;
        DoActions(PlayWAV("Rin_03.ogg"))
        _ARRW(v.Sound_Text3, cp) << (0)
        # (Line 21) f.stb.print("\n\n\x13\x1BRin\n\x13\x04생각하는 방법... 그것조차 잊어버린 걸지도\n\n");
        f.stb.print("\n\n\x13\x1BRin\n\x13\x04생각하는 방법... 그것조차 잊어버린 걸지도\n\n")
        # (Line 22) break;
        EUDBreak()
        # (Line 23) case 3003:
    _t4 = EUDSwitchCase()
    # (Line 24) PlayWAV("Rin_04.ogg");
    if _t4(3003):
        # (Line 25) v.Sound_Text3[cp] = 0;
        DoActions(PlayWAV("Rin_04.ogg"))
        _ARRW(v.Sound_Text3, cp) << (0)
        # (Line 26) f.stb.print("\n\n\x13\x1BRin\n\x13\x04변하지 않는, 나만의 세계가 매일매일 계속된다\n\n");
        f.stb.print("\n\n\x13\x1BRin\n\x13\x04변하지 않는, 나만의 세계가 매일매일 계속된다\n\n")
        # (Line 27) break;
        EUDBreak()
        # (Line 28) case 3004:
    _t5 = EUDSwitchCase()
    # (Line 29) PlayWAV("Rin_05.ogg");
    if _t5(3004):
        # (Line 30) v.Sound_Text3[cp] = 0;
        DoActions(PlayWAV("Rin_05.ogg"))
        _ARRW(v.Sound_Text3, cp) << (0)
        # (Line 31) f.stb.print("\n\n\x13\x1BRin\n\x13\x04하지만 외롭지는 않아\n\n");
        f.stb.print("\n\n\x13\x1BRin\n\x13\x04하지만 외롭지는 않아\n\n")
        # (Line 32) break;
        EUDBreak()
        # (Line 33) case 3005:
    _t6 = EUDSwitchCase()
    # (Line 34) PlayWAV("Rin_06.ogg");
    if _t6(3005):
        # (Line 35) v.Sound_Text3[cp] = 0;
        DoActions(PlayWAV("Rin_06.ogg"))
        _ARRW(v.Sound_Text3, cp) << (0)
        # (Line 36) f.stb.print("\n\n\x13\x1BRin\n\x13\x04별 것 아니니까\n\n");
        f.stb.print("\n\n\x13\x1BRin\n\x13\x04별 것 아니니까\n\n")
        # (Line 37) break;
        EUDBreak()
        # (Line 38) }
    # (Line 39) }
    EUDEndSwitch()
    # (Line 41) function UiltimateText(cp)

# (Line 42) {
@EUDFunc
def UiltimateText(cp):
    # (Line 43) switch (v.Sound_Text_Uilti[cp])
    EUDSwitch(v.Sound_Text_Uilti[cp])
    # (Line 44) {
    # (Line 45) case 15000:
    _t1 = EUDSwitchCase()
    # (Line 46) PlayWAV("Rin_Ult.ogg");
    if _t1(15000):
        # (Line 47) v.Sound_Text_Uilti[cp] = 0;
        DoActions(PlayWAV("Rin_Ult.ogg"))
        _ARRW(v.Sound_Text_Uilti, cp) << (0)
        # (Line 48) break;
        EUDBreak()
        # (Line 49) case 15001:
    _t2 = EUDSwitchCase()
    # (Line 50) f.stb.printAt(3,"\x13\x1BRin\n\x13\x04추억이, 슬픈 것이었다고 해도");
    if _t2(15001):
        f.stb.printAt(3, "\x13\x1BRin\n\x13\x04추억이, 슬픈 것이었다고 해도")
        # (Line 51) v.Sound_Text_Uilti[cp] = 0;
        _ARRW(v.Sound_Text_Uilti, cp) << (0)
        # (Line 52) break;
        EUDBreak()
        # (Line 53) case 15002:
    _t3 = EUDSwitchCase()
    # (Line 54) f.stb.printAt(3,"\x13\x1BRin\n\x13\x04미래를 믿으며 나아가는 거야");
    if _t3(15002):
        f.stb.printAt(3, "\x13\x1BRin\n\x13\x04미래를 믿으며 나아가는 거야")
        # (Line 55) v.Sound_Text_Uilti[cp] = 0;
        _ARRW(v.Sound_Text_Uilti, cp) << (0)
        # (Line 56) break;
        EUDBreak()
        # (Line 57) case 15003:
    _t4 = EUDSwitchCase()
    # (Line 58) f.stb.printAt(3,"\x13\x1BRin\n\x13\x04외로움을 깨달아서");
    if _t4(15003):
        f.stb.printAt(3, "\x13\x1BRin\n\x13\x04외로움을 깨달아서")
        # (Line 59) v.Sound_Text_Uilti[cp] = 0;
        _ARRW(v.Sound_Text_Uilti, cp) << (0)
        # (Line 60) break;
        EUDBreak()
        # (Line 61) case 15004:
    _t5 = EUDSwitchCase()
    # (Line 62) f.stb.printAt(3,"\x13\x1BRin\n\x13\x04좌절하고 싶어져도");
    if _t5(15004):
        f.stb.printAt(3, "\x13\x1BRin\n\x13\x04좌절하고 싶어져도")
        # (Line 63) v.Sound_Text_Uilti[cp] = 0;
        _ARRW(v.Sound_Text_Uilti, cp) << (0)
        # (Line 64) break;
        EUDBreak()
        # (Line 65) case 15005:
    _t6 = EUDSwitchCase()
    # (Line 66) f.stb.printAt(3,"\x13\x1BRin\n\x13\x04당신 덕분에");
    if _t6(15005):
        f.stb.printAt(3, "\x13\x1BRin\n\x13\x04당신 덕분에")
        # (Line 67) v.Sound_Text_Uilti[cp] = 0;
        _ARRW(v.Sound_Text_Uilti, cp) << (0)
        # (Line 68) break;
        EUDBreak()
        # (Line 69) case 15006:
    _t7 = EUDSwitchCase()
    # (Line 70) f.stb.printAt(3,"\x13\x1BRin\n\x13\x04기억해내서");
    if _t7(15006):
        f.stb.printAt(3, "\x13\x1BRin\n\x13\x04기억해내서")
        # (Line 71) v.Sound_Text_Uilti[cp] = 0;
        _ARRW(v.Sound_Text_Uilti, cp) << (0)
        # (Line 72) break;
        EUDBreak()
        # (Line 73) case 15007:
    _t8 = EUDSwitchCase()
    # (Line 74) f.stb.printAt(3,"\x13\x1BRin\n\x13\x04강해질 수 있는 거야");
    if _t8(15007):
        f.stb.printAt(3, "\x13\x1BRin\n\x13\x04강해질 수 있는 거야")
        # (Line 75) v.Sound_Text_Uilti[cp] = 0;
        _ARRW(v.Sound_Text_Uilti, cp) << (0)
        # (Line 76) break;
        EUDBreak()
        # (Line 77) case 15008:
    _t9 = EUDSwitchCase()
    # (Line 78) f.stb.printAt(3,"\x13\x1BRin\n\x13\x04혼자가 아니라고...");
    if _t9(15008):
        f.stb.printAt(3, "\x13\x1BRin\n\x13\x04혼자가 아니라고...")
        # (Line 79) v.Sound_Text_Uilti[cp] = 0;
        _ARRW(v.Sound_Text_Uilti, cp) << (0)
        # (Line 80) break;
        EUDBreak()
        # (Line 81) case 15009:
    _t10 = EUDSwitchCase()
    # (Line 82) f.stb.printAt(3,"\x13\x1BRin\n\x13\x04당신 덕분에...");
    if _t10(15009):
        f.stb.printAt(3, "\x13\x1BRin\n\x13\x04당신 덕분에...")
        # (Line 83) v.Sound_Text_Uilti[cp] = 0;
        _ARRW(v.Sound_Text_Uilti, cp) << (0)
        # (Line 84) break;
        EUDBreak()
        # (Line 85) }
    # (Line 86) }
    EUDEndSwitch()
    # (Line 88) function UniqueText(cp)

# (Line 89) {
@EUDFunc
def UniqueText(cp):
    # (Line 90) switch (v.Sound_Text_Uniq[cp])
    EUDSwitch(v.Sound_Text_Uniq[cp])
    # (Line 91) {
    # (Line 92) case 15000:
    _t1 = EUDSwitchCase()
    # (Line 93) f.stb.print("\n\n\x13\x1BRin\n\x13\x04고마워요...\n\n");
    if _t1(15000):
        f.stb.print("\n\n\x13\x1BRin\n\x13\x04고마워요...\n\n")
        # (Line 94) PlayWAV("Rin_Unique.ogg");
        # (Line 95) v.Sound_Text_Uniq[cp] = 0;
        DoActions(PlayWAV("Rin_Unique.ogg"))
        _ARRW(v.Sound_Text_Uniq, cp) << (0)
        # (Line 96) break;
        EUDBreak()
        # (Line 97) }
    # (Line 98) }
    EUDEndSwitch()
