## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Function as f;
import Function as f
# (Line 3) import Character.Magane.Skill_S as S;
from Character.Magane import Skill_S as S
# (Line 4) import Character.Magane.Skill_C as C;
from Character.Magane import Skill_C as C
# (Line 5) import Character.Magane.Skill_A as A;
from Character.Magane import Skill_A as A
# (Line 7) import Character.Magane.Skill_SSS as SSS;
from Character.Magane import Skill_SSS as SSS
# (Line 8) import Character.Magane.Skill_ASSS as ASSS;
from Character.Magane import Skill_ASSS as ASSS
# (Line 9) import Character.Magane.Skill_CCC as CCC;
from Character.Magane import Skill_CCC as CCC
# (Line 10) import Character.Magane.Skill_CCCAA as CCCAA;
from Character.Magane import Skill_CCCAA as CCCAA
# (Line 11) import Character.Magane.Text as text;
from Character.Magane import Text as text
# (Line 12) import Character.Magane.Commend as commend;
from Character.Magane import Commend as commend
# (Line 14) function SkillList(cp);
# (Line 16) function main(cp)
# (Line 17) {
@EUDFunc
def f_main(cp):
    # (Line 18) f.location[cp] = 191;
    _ARRW(f.location, cp) << (191)
    # (Line 19) f.heroID[cp] = 53;
    _ARRW(f.heroID, cp) << (53)
    # (Line 21) f.UltimateA[cp] = 500;
    _ARRW(f.UltimateA, cp) << (500)
    # (Line 22) f.UltimateB[cp] = 250;
    _ARRW(f.UltimateB, cp) << (250)
    # (Line 24) SkillList(cp);
    SkillList(cp)
    # (Line 25) commend.main(cp);
    commend.f_main(cp)
    # (Line 27) if (f.wait[cp] == 0)
    if EUDIf()(f.wait[cp] == 0):
        # (Line 28) {
        # (Line 29) switch(f.step[cp])
        EUDSwitch(f.step[cp])
        # (Line 30) {
        # (Line 31) case 100:
        _t2 = EUDSwitchCase()
        # (Line 32) S.main(cp);
        if _t2(100):
            S.f_main(cp)
            # (Line 33) break;
            EUDBreak()
            # (Line 34) case 200:
        _t3 = EUDSwitchCase()
        # (Line 35) C.main(cp);
        if _t3(200):
            C.f_main(cp)
            # (Line 36) break;
            EUDBreak()
            # (Line 37) case 300:
        _t4 = EUDSwitchCase()
        # (Line 38) A.main(cp);
        if _t4(300):
            A.f_main(cp)
            # (Line 39) break;
            EUDBreak()
            # (Line 40) case 110:
        _t5 = EUDSwitchCase()
        # (Line 41) SSS.main(cp);
        if _t5(110):
            SSS.f_main(cp)
            # (Line 42) break;
            EUDBreak()
            # (Line 43) case 310:
        _t6 = EUDSwitchCase()
        # (Line 44) ASSS.main(cp);
        if _t6(310):
            ASSS.f_main(cp)
            # (Line 45) break;
            EUDBreak()
            # (Line 46) case 210:
        _t7 = EUDSwitchCase()
        # (Line 47) CCC.main(cp);
        if _t7(210):
            CCC.f_main(cp)
            # (Line 48) break;
            EUDBreak()
            # (Line 49) case 220:
        _t8 = EUDSwitchCase()
        # (Line 50) CCCAA.main(cp);
        if _t8(220):
            CCCAA.f_main(cp)
            # (Line 51) break;
            EUDBreak()
            # (Line 52) }
        # (Line 53) }
        EUDEndSwitch()
        # (Line 57) }
    EUDEndIf()
    # (Line 60) function SkillVoice(cp)

# (Line 61) {
@EUDFunc
def SkillVoice(cp):
    # (Line 62) if (f.Magane_Voice[cp] != 0) { text.main(cp); }
    if EUDIf()(f.Magane_Voice[cp] == 0, neg=True):
        text.f_main(cp)
        # (Line 63) }
    EUDEndIf()
    # (Line 65) function SkillList(cp)

# (Line 66) {
@EUDFunc
def SkillList(cp):
    # (Line 67) if(Memory(0x00596A44, Exactly, 256)) 	// Insert key Pressed
    if EUDIf()(Memory(0x00596A44, Exactly, 256)):
        # (Line 68) {
        # (Line 69) f.stb.printAt(0, "\n");
        f.stb.printAt(0, "\n")
        # (Line 70) f.stb.printAt(1, "\x1F　＃\x1B- 치쿠조인 마가네　\x04[ Re : CREATORS ]");
        f.stb.printAt(1, "\x1F　＃\x1B- 치쿠조인 마가네　\x04[ Re : CREATORS ]")
        # (Line 71) f.stb.printAt(2, "　　\x1FA\x04ction List");
        f.stb.printAt(2, "　　\x1FA\x04ction List")
        # (Line 72) f.stb.printAt(3, "　　　\x18O \x04어휘 무한의 속임수 \x19[ 적 스킬 유닛 무효화 / 테러궁 취급 / O 스택 +1 ] \x052분");
        f.stb.printAt(3, "　　　\x18O \x04어휘 무한의 속임수 \x19[ 적 스킬 유닛 무효화 / 테러궁 취급 / O 스택 +1 ] \x052분")
        # (Line 73) f.stb.printAt(4, "　　　\x18AO \x04Re : CREATORS \x19[ 일회용 / 적 공방깎 -10 결계 / 선딜 30초 / O 스택 * 1분 유지 ] \x0510분");
        f.stb.printAt(4, "　　　\x18AO \x04Re : CREATORS \x19[ 일회용 / 적 공방깎 -10 결계 / 선딜 30초 / O 스택 * 1분 유지 ] \x0510분")
        # (Line 74) f.stb.printAt(5, "　　　\x04\x1FSSS \x04거짓말 \x19[ 공성 ]　　　\x1FASSS \x04천재 \x19[ 만능 ]");
        f.stb.printAt(5, "　　　\x04\x1FSSS \x04거짓말 \x19[ 공성 ]　　　\x1FASSS \x04천재 \x19[ 만능 ]")
        # (Line 75) f.stb.printAt(6, "　　　\x04\x1FCCC \x04악역 \x19[ 공성 / 자리고정 ]");
        f.stb.printAt(6, "　　　\x04\x1FCCC \x04악역 \x19[ 공성 / 자리고정 ]")
        # (Line 76) f.stb.printAt(7, "　　　\x04\x1FCAS + CCC \x04야창귀록 \x19[ 공성 / 자리고정 ]");
        f.stb.printAt(7, "　　　\x04\x1FCAS + CCC \x04야창귀록 \x19[ 공성 / 자리고정 ]")
        # (Line 77) f.stb.printAt(8, "\n");
        f.stb.printAt(8, "\n")
        # (Line 78) f.stb.printAt(9, "　　　\x08ACCS + A \x04틴달로스의 사냥개 \x19[ 공성 / 선딜 7초 / 자리고정 ] \x05", f.UltimateA[cp], " + ", f.UltimateB[cp]);
        f.stb.printAt(9, "　　　\x08ACCS + A \x04틴달로스의 사냥개 \x19[ 공성 / 선딜 7초 / 자리고정 ] \x05", f.UltimateA[cp], " + ", f.UltimateB[cp])
        # (Line 79) f.stb.printAt(10, "\n");
        f.stb.printAt(10, "\n")
        # (Line 80) PlayWAV("sound\\Bullet\\LaserHit.wav");
        # (Line 81) }
        DoActions(PlayWAV("sound\\Bullet\\LaserHit.wav"))
        # (Line 82) }
    EUDEndIf()
