## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import Function as f;
import Function as f
# (Line 4) const looker = PVariable();
looker = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 6) function Text(num);
# (Line 7) function Looker()
# (Line 8) {
@EUDFunc
def Looker():
    # (Line 9) if (looker[getuserplayerid() - 128] > 0)
    if EUDIf()(looker[f_getuserplayerid() - 128] <= 0, neg=True):
        # (Line 10) {
        # (Line 11) Text(looker[getuserplayerid() - 128]);
        Text(looker[f_getuserplayerid() - 128])
        # (Line 12) looker[getuserplayerid() - 128] = 0;
        _ARRW(looker, f_getuserplayerid() - 128) << (0)
        # (Line 13) }
        # (Line 14) }
    EUDEndIf()
    # (Line 16) function main(cp)

# (Line 17) {
@EUDFunc
def f_main(cp):
    # (Line 18) if (f.Magane_Voice[cp] > 0)
    if EUDIf()(f.Magane_Voice[cp] <= 0, neg=True):
        # (Line 19) {
        # (Line 20) Text(f.Magane_Voice[cp]);
        Text(f.Magane_Voice[cp])
        # (Line 21) looker[cp] = f.Magane_Voice[cp];
        _ARRW(looker, cp) << (f.Magane_Voice[cp])
        # (Line 22) f.Magane_Voice[cp] = 0;
        _ARRW(f.Magane_Voice, cp) << (0)
        # (Line 23) }
        # (Line 24) }
    EUDEndIf()
    # (Line 26) function Text(num)

# (Line 27) {
@EUDFunc
def Text(num):
    # (Line 28) switch (num)
    EUDSwitch(num)
    # (Line 29) {
    # (Line 30) case 1:
    _t1 = EUDSwitchCase()
    # (Line 31) PlayWAV("Magane_01.ogg");
    if _t1(1):
        # (Line 32) f.stb.print("\x13\x1BChikujoin Magane\n");
        DoActions(PlayWAV("Magane_01.ogg"))
        f.stb.print("\x13\x1BChikujoin Magane\n")
        # (Line 33) f.stb.print("\x13\x04거기에 쓰여져 있는 거, \x08거짓말이라고 생각해?\x04");
        f.stb.print("\x13\x04거기에 쓰여져 있는 거, \x08거짓말이라고 생각해?\x04")
        # (Line 34) break;
        EUDBreak()
        # (Line 35) case 2:
    _t2 = EUDSwitchCase()
    # (Line 36) PlayWAV("Magane_06.ogg");
    if _t2(2):
        # (Line 37) f.stb.print("\x13\x1BChikujoin Magane\n");
        DoActions(PlayWAV("Magane_06.ogg"))
        f.stb.print("\x13\x1BChikujoin Magane\n")
        # (Line 38) f.stb.print("\x13\x08머리 나쁜 걸 남 탓으로 돌리지 말아줄래?\x04");
        f.stb.print("\x13\x08머리 나쁜 걸 남 탓으로 돌리지 말아줄래?\x04")
        # (Line 39) break;
        EUDBreak()
        # (Line 40) case 3:
    _t3 = EUDSwitchCase()
    # (Line 41) PlayWAV("Magane_04.ogg");
    if _t3(3):
        # (Line 42) f.stb.print("\x13\x1BChikujoin Magane\n");
        DoActions(PlayWAV("Magane_04.ogg"))
        f.stb.print("\x13\x1BChikujoin Magane\n")
        # (Line 43) f.stb.print("\x13\x04여기는 좋은 세계인가 보네\x04");
        f.stb.print("\x13\x04여기는 좋은 세계인가 보네\x04")
        # (Line 44) break;
        EUDBreak()
        # (Line 45) case 4:
    _t4 = EUDSwitchCase()
    # (Line 46) PlayWAV("Magane_05.ogg");
    if _t4(4):
        # (Line 47) f.stb.print("\x13\x1BChikujoin Magane\n");
        DoActions(PlayWAV("Magane_05.ogg"))
        f.stb.print("\x13\x1BChikujoin Magane\n")
        # (Line 48) f.stb.print("\x13\x04이거 상당히... \x08놀아볼만 하겠는데?\x04");
        f.stb.print("\x13\x04이거 상당히... \x08놀아볼만 하겠는데?\x04")
        # (Line 49) break;
        EUDBreak()
        # (Line 50) case 5:
    _t5 = EUDSwitchCase()
    # (Line 51) PlayWAV("Magane_03.ogg");
    if _t5(5):
        # (Line 52) break;
        DoActions(PlayWAV("Magane_03.ogg"))
        EUDBreak()
        # (Line 53) case 6:
    _t6 = EUDSwitchCase()
    # (Line 54) f.stb.print("\x13\x1BChikujoin Magane\n");
    if _t6(6):
        f.stb.print("\x13\x1BChikujoin Magane\n")
        # (Line 55) f.stb.print("\x13\x04그것은 빙글 돌아\x04");
        f.stb.print("\x13\x04그것은 빙글 돌아\x04")
        # (Line 56) break;
        EUDBreak()
        # (Line 57) case 7:
    _t7 = EUDSwitchCase()
    # (Line 58) f.stb.print("\x13\x1BChikujoin Magane\n");
    if _t7(7):
        f.stb.print("\x13\x1BChikujoin Magane\n")
        # (Line 59) f.stb.print("\x13\x04뒤집힌다\x04");
        f.stb.print("\x13\x04뒤집힌다\x04")
        # (Line 60) break;
        EUDBreak()
        # (Line 61) case 8:
    _t8 = EUDSwitchCase()
    # (Line 62) PlayWAV("Magane_09.ogg");
    if _t8(8):
        # (Line 63) f.stb.print("\x13\x1BChikujoin Magane\n");
        DoActions(PlayWAV("Magane_09.ogg"))
        f.stb.print("\x13\x1BChikujoin Magane\n")
        # (Line 64) f.stb.print("\x13\x04걸렸다\x04");
        f.stb.print("\x13\x04걸렸다\x04")
        # (Line 65) break;
        EUDBreak()
        # (Line 66) case 9:
    _t9 = EUDSwitchCase()
    # (Line 67) PlayWAV("Magane_10.ogg");
    if _t9(9):
        # (Line 68) f.stb.print("\x13\x1BChikujoin Magane\n");
        DoActions(PlayWAV("Magane_10.ogg"))
        f.stb.print("\x13\x1BChikujoin Magane\n")
        # (Line 69) f.stb.print("\x13\x04거짓말의 거짓말\x04");
        f.stb.print("\x13\x04거짓말의 거짓말\x04")
        # (Line 70) break;
        EUDBreak()
        # (Line 71) case 10:
    _t10 = EUDSwitchCase()
    # (Line 72) PlayWAV("Magane_11.ogg");
    if _t10(10):
        # (Line 73) f.stb.print("\x13\x1BChikujoin Magane\n");
        DoActions(PlayWAV("Magane_11.ogg"))
        f.stb.print("\x13\x1BChikujoin Magane\n")
        # (Line 74) f.stb.print("\x13\x04그것은 빙글 돌아 뒤집힌다\x04");
        f.stb.print("\x13\x04그것은 빙글 돌아 뒤집힌다\x04")
        # (Line 75) break;
        EUDBreak()
        # (Line 76) case 11:
    _t11 = EUDSwitchCase()
    # (Line 77) f.stb.print("\x13\x1BChikujoin Magane\n");
    if _t11(11):
        f.stb.print("\x13\x1BChikujoin Magane\n")
        # (Line 78) f.stb.print("\x13\x04거짓말의 거짓말\x04");
        f.stb.print("\x13\x04거짓말의 거짓말\x04")
        # (Line 79) break;
        EUDBreak()
        # (Line 80) }
    # (Line 81) }
    EUDEndSwitch()
