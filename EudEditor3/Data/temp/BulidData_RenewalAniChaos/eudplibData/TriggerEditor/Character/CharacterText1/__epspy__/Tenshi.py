## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import customText as tct;
import customText as tct
# (Line 2) import Variable as v;
import Variable as v
# (Line 4) var txtPtr, btnPtr, btnPos, oldCP;
txtPtr, btnPtr, btnPos, oldCP = EUDCreateVariables(4)
# (Line 6) function NormalText(cp)
# (Line 7) {
@EUDFunc
def NormalText(cp):
    # (Line 8) switch (v.Sound_Text1[cp])
    EUDSwitch(v.Sound_Text1[cp])
    # (Line 9) {
    # (Line 10) case 4000:
    _t1 = EUDSwitchCase()
    # (Line 11) PlayWAV("Tenshi_01.ogg");
    if _t1(4000):
        # (Line 12) v.Sound_Text1[cp] = 0;
        DoActions(PlayWAV("Tenshi_01.ogg"))
        _ARRW(v.Sound_Text1, cp) << (0)
        # (Line 13) tct.print("\n\x13\x1FTenshi Hinanai\n\x13\x1F하늘\x04로서 \x1B대지\x04를 지배하고\n");
        tct.f_print("\n\x13\x1FTenshi Hinanai\n\x13\x1F하늘\x04로서 \x1B대지\x04를 지배하고\n")
        # (Line 14) break;
        EUDBreak()
        # (Line 15) case 4001:
    _t2 = EUDSwitchCase()
    # (Line 16) PlayWAV("Tenshi_02.ogg");
    if _t2(4001):
        # (Line 17) v.Sound_Text1[cp] = 0;
        DoActions(PlayWAV("Tenshi_02.ogg"))
        _ARRW(v.Sound_Text1, cp) << (0)
        # (Line 18) tct.print("\n\x13\x1FTenshi Hinanai\n\x13\x15땅\x04으로서 \x1B요석\x04을 빼내어,\n");
        tct.f_print("\n\x13\x1FTenshi Hinanai\n\x13\x15땅\x04으로서 \x1B요석\x04을 빼내어,\n")
        # (Line 19) break;
        EUDBreak()
        # (Line 20) case 4002:
    _t3 = EUDSwitchCase()
    # (Line 21) PlayWAV("Tenshi_03.ogg");
    if _t3(4002):
        # (Line 22) v.Sound_Text1[cp] = 0;
        DoActions(PlayWAV("Tenshi_03.ogg"))
        _ARRW(v.Sound_Text1, cp) << (0)
        # (Line 23) tct.print("\n\x13\x1FTenshi Hinanai\n\x13\x1B사람\x04의 \x11주홍색\x1B마음\x04을 비춰라 !\n");
        tct.f_print("\n\x13\x1FTenshi Hinanai\n\x13\x1B사람\x04의 \x11주홍색\x1B마음\x04을 비춰라 !\n")
        # (Line 24) break;
        EUDBreak()
        # (Line 25) case 4003:
    _t4 = EUDSwitchCase()
    # (Line 26) PlayWAV("Tenshi_04.ogg");
    if _t4(4003):
        # (Line 27) v.Sound_Text1[cp] = 0;
        DoActions(PlayWAV("Tenshi_04.ogg"))
        _ARRW(v.Sound_Text1, cp) << (0)
        # (Line 28) tct.print("\n\x13\x1FTenshi Hinanai\n\x13\x15대지\x04여!\n");
        tct.f_print("\n\x13\x1FTenshi Hinanai\n\x13\x15대지\x04여!\n")
        # (Line 29) break;
        EUDBreak()
        # (Line 30) }
    # (Line 31) }
    EUDEndSwitch()
    # (Line 33) function UiltimateText(cp)

# (Line 34) {
@EUDFunc
def UiltimateText(cp):
    # (Line 35) switch (v.Sound_Text_Uilti[cp])
    EUDSwitch(v.Sound_Text_Uilti[cp])
    # (Line 36) {
    # (Line 37) case 4000:
    _t1 = EUDSwitchCase()
    # (Line 38) PlayWAV("Tenshi_05.ogg");
    if _t1(4000):
        # (Line 39) v.Sound_Text_Uilti[cp] = 0;
        DoActions(PlayWAV("Tenshi_05.ogg"))
        _ARRW(v.Sound_Text_Uilti, cp) << (0)
        # (Line 40) txtPtr = dwread_epd(EPD(0x640B58));
        txtPtr << (f_dwread_epd(EPD(0x640B58)))
        # (Line 41) tct.print("\n\n\n\n\x13\x1FTenshi Hinanai\n\n\x13\x04피할 수 있을까 ?\n\n\n\n");
        tct.f_print("\n\n\n\n\x13\x1FTenshi Hinanai\n\n\x13\x04피할 수 있을까 ?\n\n\n\n")
        # (Line 42) SetMemory(0x640B58, SetTo, txtPtr);
        # (Line 43) break;
        DoActions(SetMemory(0x640B58, SetTo, txtPtr))
        EUDBreak()
        # (Line 44) case 4001:
    _t2 = EUDSwitchCase()
    # (Line 45) v.Sound_Text_Uilti[cp] = 0;
    if _t2(4001):
        _ARRW(v.Sound_Text_Uilti, cp) << (0)
        # (Line 46) txtPtr = dwread_epd(EPD(0x640B58));
        txtPtr << (f_dwread_epd(EPD(0x640B58)))
        # (Line 47) tct.print("\n\n\n\n\x13\x1FTenshi Hinanai\n\n\x13\x04요석\x06「천지개벽 프레스」\n\n\n\n");
        tct.f_print("\n\n\n\n\x13\x1FTenshi Hinanai\n\n\x13\x04요석\x06「천지개벽 프레스」\n\n\n\n")
        # (Line 48) SetMemory(0x640B58, SetTo, txtPtr);
        # (Line 49) break;
        DoActions(SetMemory(0x640B58, SetTo, txtPtr))
        EUDBreak()
        # (Line 50) case 4010:
    _t3 = EUDSwitchCase()
    # (Line 51) PlayWAV("Tenshi_Uiltimate.ogg");
    if _t3(4010):
        # (Line 52) v.Sound_Text_Uilti[cp] = 0;
        DoActions(PlayWAV("Tenshi_Uiltimate.ogg"))
        _ARRW(v.Sound_Text_Uilti, cp) << (0)
        # (Line 53) txtPtr = dwread_epd(EPD(0x640B58));
        txtPtr << (f_dwread_epd(EPD(0x640B58)))
        # (Line 54) tct.print("\n\n\n\n\x13\x1FTenshi Hinanai\n\n\x13\x04단숨에 끝내주겠어\n\n\n\n");
        tct.f_print("\n\n\n\n\x13\x1FTenshi Hinanai\n\n\x13\x04단숨에 끝내주겠어\n\n\n\n")
        # (Line 55) SetMemory(0x640B58, SetTo, txtPtr);
        # (Line 56) break;
        DoActions(SetMemory(0x640B58, SetTo, txtPtr))
        EUDBreak()
        # (Line 57) case 4011:
    _t4 = EUDSwitchCase()
    # (Line 58) v.Sound_Text_Uilti[cp] = 0;
    if _t4(4011):
        _ARRW(v.Sound_Text_Uilti, cp) << (0)
        # (Line 59) txtPtr = dwread_epd(EPD(0x640B58));
        txtPtr << (f_dwread_epd(EPD(0x640B58)))
        # (Line 60) tct.print("\n\n\n\n\x13\x1FTenshi Hinanai\n\n\x13\x17끝이야\n\n\n\n");
        tct.f_print("\n\n\n\n\x13\x1FTenshi Hinanai\n\n\x13\x17끝이야\n\n\n\n")
        # (Line 61) SetMemory(0x640B58, SetTo, txtPtr);
        # (Line 62) break;
        DoActions(SetMemory(0x640B58, SetTo, txtPtr))
        EUDBreak()
        # (Line 63) case 4012:
    _t5 = EUDSwitchCase()
    # (Line 64) v.Sound_Text_Uilti[cp] = 0;
    if _t5(4012):
        _ARRW(v.Sound_Text_Uilti, cp) << (0)
        # (Line 65) txtPtr = dwread_epd(EPD(0x640B58));
        txtPtr << (f_dwread_epd(EPD(0x640B58)))
        # (Line 66) tct.print("\n\n\n\n\x13\x1FTenshi Hinanai\n\n\x13\x17「전 인류의 비상천」\n\x13\x17「全人類の緋想天」\n\n\n");
        tct.f_print("\n\n\n\n\x13\x1FTenshi Hinanai\n\n\x13\x17「전 인류의 비상천」\n\x13\x17「全人類の緋想天」\n\n\n")
        # (Line 67) SetMemory(0x640B58, SetTo, txtPtr);
        # (Line 68) break;
        DoActions(SetMemory(0x640B58, SetTo, txtPtr))
        EUDBreak()
        # (Line 69) }
    # (Line 70) }
    EUDEndSwitch()
    # (Line 72) function UniqueText(cp)

# (Line 73) {
@EUDFunc
def UniqueText(cp):
    # (Line 74) switch (v.Sound_Text_Uniq[cp])
    EUDSwitch(v.Sound_Text_Uniq[cp])
    # (Line 75) {
    # (Line 76) case 4000:
    _t1 = EUDSwitchCase()
    # (Line 77) PlayWAV("Tenshi_Unique.ogg");
    if _t1(4000):
        # (Line 78) v.Sound_Text_Uniq[cp] = 0;
        DoActions(PlayWAV("Tenshi_Unique.ogg"))
        _ARRW(v.Sound_Text_Uniq, cp) << (0)
        # (Line 79) tct.print("\n\n\x13\x1FTenshi Hinanai\n\x13\x04기부「무념무상의 경지」\n\n");
        tct.f_print("\n\n\x13\x1FTenshi Hinanai\n\x13\x04기부「무념무상의 경지」\n\n")
        # (Line 80) break;
        EUDBreak()
        # (Line 81) }
    # (Line 82) }
    EUDEndSwitch()
