## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import customText as tct;
import customText as tct
# (Line 2) import Variable as v;
import Variable as v
# (Line 4) var txtPtr, btnPtr, btnPos, oldCP;
txtPtr, btnPtr, btnPos, oldCP = EUDCreateVariables(4)
# (Line 5) const trgk = $T('Artanis & safhfh');
trgk = _CGFW(lambda: [GetStringIndex('Artanis & safhfh')], 1)[0]
# (Line 7) function SetDeathValue(cp)
# (Line 8) {
@EUDFunc
def SetDeathValue(cp):
    # (Line 9) if (Deaths((13), (0), 1000, (210)))
    if EUDIf()(Deaths((13), (0), 1000, (210))):
        # (Line 10) {
        # (Line 11) v.DeathOre = 250 + v.Level[cp] * 10;
        _ATTW(v, 'DeathOre') << (250 + v.Level[cp] * 10)
        # (Line 12) CenterView((96));
        # (Line 14) if (cp >= 0 && cp <= 2)
        DoActions(CenterView((96)))
        if EUDIf()(EUDSCAnd()(cp >= 0)(cp <= 2)()):
            # (Line 15) {
            # (Line 16) v.Team_Num = 2;
            _ATTW(v, 'Team_Num') << (2)
            # (Line 18) if (Deaths((0), (10), 15, (172)) || Deaths((1), (10), 15, (172)) || Deaths((2), (10), 15, (172))) { SetSwitch((20), (4)); }
            if EUDIf()(EUDSCOr()(Deaths((0), (10), 15, (172)))(Deaths((1), (10), 15, (172)))(Deaths((2), (10), 15, (172)))()):
                DoActions(SetSwitch((20), (4)))
                # (Line 19) if (Switch((22), (2)))
            EUDEndIf()
            if EUDIf()(Switch((22), (2))):
                # (Line 20) {
                # (Line 21) if (Deaths((0), (10), 16, (172)) || Deaths((1), (10), 16, (172)) || Deaths((2), (10), 16, (172)))
                if EUDIf()(EUDSCOr()(Deaths((0), (10), 16, (172)))(Deaths((1), (10), 16, (172)))(Deaths((2), (10), 16, (172)))()):
                    # (Line 22) { SetDeaths((13), (7), 12, (210)); SetSwitch((23), (4)); }
                    DoActions(SetDeaths((13), (7), 12, (210)))
                    DoActions(SetSwitch((23), (4)))
                    # (Line 23) }
                EUDEndIf()
                # (Line 24) else { SetDeaths((13), (7), 120 + v.Level[cp] * 12, (210)); }
            if EUDElse()():
                DoActions(SetDeaths((13), (7), 120 + v.Level[cp] * 12, (210)))
                # (Line 26) if (Bring((6), (1), 6, (162), (153))) { SetScore((7), (8), 5, (7)); }
            EUDEndIf()
            if EUDIf()(Bring((6), (1), 6, (162), (153))):
                DoActions(SetScore((7), (8), 5, (7)))
                # (Line 27) SetResources((3), (8), v.DeathOre, (0));
            EUDEndIf()
            # (Line 28) SetResources((4), (8), v.DeathOre, (0));
            DoActions(SetResources((3), (8), v.DeathOre, (0)))
            # (Line 29) SetResources((5), (8), v.DeathOre, (0));
            DoActions(SetResources((4), (8), v.DeathOre, (0)))
            # (Line 30) }
            DoActions(SetResources((5), (8), v.DeathOre, (0)))
            # (Line 31) if (cp >= 3 && cp <= 5)
        EUDEndIf()
        if EUDIf()(EUDSCAnd()(cp >= 3)(cp <= 5)()):
            # (Line 32) {
            # (Line 33) v.Team_Num = 1;
            _ATTW(v, 'Team_Num') << (1)
            # (Line 35) if (Deaths((3), (10), 15, (172)) || Deaths((4), (10), 15, (172)) || Deaths((5), (10), 15, (172))) { SetSwitch((20), (4)); }
            if EUDIf()(EUDSCOr()(Deaths((3), (10), 15, (172)))(Deaths((4), (10), 15, (172)))(Deaths((5), (10), 15, (172)))()):
                DoActions(SetSwitch((20), (4)))
                # (Line 36) if (Switch((22), (2)))
            EUDEndIf()
            if EUDIf()(Switch((22), (2))):
                # (Line 37) {
                # (Line 38) if (Deaths((3), (10), 16, (172)) || Deaths((4), (10), 16, (172)) || Deaths((5), (10), 16, (172)))
                if EUDIf()(EUDSCOr()(Deaths((3), (10), 16, (172)))(Deaths((4), (10), 16, (172)))(Deaths((5), (10), 16, (172)))()):
                    # (Line 39) { SetDeaths((13), (7), 12, (210)); SetSwitch((23), (4)); }
                    DoActions(SetDeaths((13), (7), 12, (210)))
                    DoActions(SetSwitch((23), (4)))
                    # (Line 40) }
                EUDEndIf()
                # (Line 41) else { SetDeaths((13), (7), 120 + v.Level[cp] * 12, (210)); }
            if EUDElse()():
                DoActions(SetDeaths((13), (7), 120 + v.Level[cp] * 12, (210)))
                # (Line 43) if (Bring((7), (1), 6, (162), (153))) { SetScore((7), (8), 5, (7)); }
            EUDEndIf()
            if EUDIf()(Bring((7), (1), 6, (162), (153))):
                DoActions(SetScore((7), (8), 5, (7)))
                # (Line 44) SetResources((0), (8), v.DeathOre, (0));
            EUDEndIf()
            # (Line 45) SetResources((1), (8), v.DeathOre, (0));
            DoActions(SetResources((0), (8), v.DeathOre, (0)))
            # (Line 46) SetResources((2), (8), v.DeathOre, (0));
            DoActions(SetResources((1), (8), v.DeathOre, (0)))
            # (Line 47) }
            DoActions(SetResources((2), (8), v.DeathOre, (0)))
            # (Line 49) v.DeathOre_Text[0] = v.DeathOre;
        EUDEndIf()
        _ARRW(v.DeathOre_Text, 0) << (v.DeathOre)
        # (Line 50) v.DeathOre_Text[1] = v.DeathOre;
        _ARRW(v.DeathOre_Text, 1) << (v.DeathOre)
        # (Line 51) v.DeathOre_Text[2] = v.DeathOre;
        _ARRW(v.DeathOre_Text, 2) << (v.DeathOre)
        # (Line 52) v.DeathOre_Text[3] = v.DeathOre;
        _ARRW(v.DeathOre_Text, 3) << (v.DeathOre)
        # (Line 53) v.DeathOre_Text[4] = v.DeathOre;
        _ARRW(v.DeathOre_Text, 4) << (v.DeathOre)
        # (Line 54) v.DeathOre_Text[5] = v.DeathOre;
        _ARRW(v.DeathOre_Text, 5) << (v.DeathOre)
        # (Line 56) v.Death_Score[cp] += 1;
        _ARRW(v.Death_Score, cp).__iadd__(1)
        # (Line 57) }
        # (Line 58) }
    EUDEndIf()
    # (Line 61) function DeathText(cp)

# (Line 62) {
@EUDFunc
def DeathText(cp):
    # (Line 63) if (v.DeathOre_Text[cp] != 0)
    if EUDIf()(v.DeathOre_Text[cp] == 0, neg=True):
        # (Line 64) {
        # (Line 65) const value = dwread_epd(EPD(0x58A364 + 48 * 211 + 4 * cp));
        value = f_dwread_epd(EPD(0x58A364 + 48 * 211 + 4 * cp))
        # (Line 67) txtPtr = dwread_epd(EPD(0x640B58));
        txtPtr << (f_dwread_epd(EPD(0x640B58)))
        # (Line 68) tct.print("\n\x13\x08!! Warning !!\n\x13\x19:: \x17", ptr2s(v.Hero_Name[value]), "\x04이 치명상을 입었습니다. \x19::\n\n\x13\x07", v.Team_Num, "\x04Team \x17+ ", v.DeathOre_Text[cp], " \x04Ore\n");
        tct.f_print("\n\x13\x08!! Warning !!\n\x13\x19:: \x17", ptr2s(v.Hero_Name[value]), "\x04이 치명상을 입었습니다. \x19::\n\n\x13\x07", v.Team_Num, "\x04Team \x17+ ", v.DeathOre_Text[cp], " \x04Ore\n")
        # (Line 69) txtPtr = dwread_epd(EPD(0x640B58));
        txtPtr << (f_dwread_epd(EPD(0x640B58)))
        # (Line 71) SetDeaths((13), (7), 0, (211));
        # (Line 72) v.DeathOre_Text[cp] = 0;
        DoActions(SetDeaths((13), (7), 0, (211)))
        _ARRW(v.DeathOre_Text, cp) << (0)
        # (Line 73) }
        # (Line 74) }
    EUDEndIf()
    # (Line 76) function SetKillScore(cp)

# (Line 77) {
@EUDFunc
def SetKillScore(cp):
    # (Line 78) if (Kills(CurrentPlayer, AtLeast, 1, 51))	{ v.Kill_Score[cp] += 1; SetKills(CurrentPlayer, Subtract, 1, 51); }
    if EUDIf()(Kills(CurrentPlayer, AtLeast, 1, 51)):
        _ARRW(v.Kill_Score, cp).__iadd__(1)
        DoActions(SetKills(CurrentPlayer, Subtract, 1, 51))
        # (Line 79) if (Kills(CurrentPlayer, AtLeast, 1, 77))	{ v.Kill_Score[cp] += 1; SetKills(CurrentPlayer, Subtract, 1, 77); }
    EUDEndIf()
    if EUDIf()(Kills(CurrentPlayer, AtLeast, 1, 77)):
        _ARRW(v.Kill_Score, cp).__iadd__(1)
        DoActions(SetKills(CurrentPlayer, Subtract, 1, 77))
        # (Line 80) if (Kills(CurrentPlayer, AtLeast, 1, 74))	{ v.Kill_Score[cp] += 1; SetKills(CurrentPlayer, Subtract, 1, 74); }
    EUDEndIf()
    if EUDIf()(Kills(CurrentPlayer, AtLeast, 1, 74)):
        _ARRW(v.Kill_Score, cp).__iadd__(1)
        DoActions(SetKills(CurrentPlayer, Subtract, 1, 74))
        # (Line 81) if (Kills(CurrentPlayer, AtLeast, 1, 16))	{ v.Kill_Score[cp] += 1; SetKills(CurrentPlayer, Subtract, 1, 16); }
    EUDEndIf()
    if EUDIf()(Kills(CurrentPlayer, AtLeast, 1, 16)):
        _ARRW(v.Kill_Score, cp).__iadd__(1)
        DoActions(SetKills(CurrentPlayer, Subtract, 1, 16))
        # (Line 82) if (Kills(CurrentPlayer, AtLeast, 1, 54))	{ v.Kill_Score[cp] += 1; SetKills(CurrentPlayer, Subtract, 1, 54); }
    EUDEndIf()
    if EUDIf()(Kills(CurrentPlayer, AtLeast, 1, 54)):
        _ARRW(v.Kill_Score, cp).__iadd__(1)
        DoActions(SetKills(CurrentPlayer, Subtract, 1, 54))
        # (Line 83) if (Kills(CurrentPlayer, AtLeast, 1, 99))	{ v.Kill_Score[cp] += 1; SetKills(CurrentPlayer, Subtract, 1, 99); }
    EUDEndIf()
    if EUDIf()(Kills(CurrentPlayer, AtLeast, 1, 99)):
        _ARRW(v.Kill_Score, cp).__iadd__(1)
        DoActions(SetKills(CurrentPlayer, Subtract, 1, 99))
        # (Line 84) }
    EUDEndIf()
