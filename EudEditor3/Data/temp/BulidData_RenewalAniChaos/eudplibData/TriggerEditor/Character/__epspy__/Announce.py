## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import customText as tct;
import customText as tct
# (Line 3) import Variable as v;
import Variable as v
# (Line 4) import Function as f;
import Function as f
# (Line 5) var txtPtr, btnPtr, btnPos, oldCP;
txtPtr, btnPtr, btnPos, oldCP = EUDCreateVariables(4)
# (Line 6) const trgk = $T('Artanis & safhfh');
trgk = _CGFW(lambda: [GetStringIndex('Artanis & safhfh')], 1)[0]
# (Line 8) function Announce_Init()
# (Line 9) {
@EUDFunc
def Announce_Init():
    # (Line 10) if (Bring((13), (10), 0, (15), (96)))
    if EUDIf()(Bring((13), (10), 0, (15), (96))):
        # (Line 11) { tct.chatAnnouncement("　\x04특성 정보 - \x17S [스카웃] : \x04성장특화　\x17C [캐리어] : \x04마나특화　\x17A [아비터] : \x04게이지특화"); }
        tct.f_chatAnnouncement("　\x04특성 정보 - \x17S [스카웃] : \x04성장특화　\x17C [캐리어] : \x04마나특화　\x17A [아비터] : \x04게이지특화")
        # (Line 12) else
        # (Line 13) { tct.chatAnnouncement("　\x04캐릭터 선택 : \x17커세어　\x04캐릭터 정보확인 : \x17유닛 클릭　\x04랜덤 선택 : \x17리버"); }
    if EUDElse()():
        tct.f_chatAnnouncement("　\x04캐릭터 선택 : \x17커세어　\x04캐릭터 정보확인 : \x17유닛 클릭　\x04랜덤 선택 : \x17리버")
        # (Line 14) }
    EUDEndIf()
    # (Line 16) function Announce_Adv(value, cp)

# (Line 17) {
@EUDFunc
def Announce_Adv(value, cp):
    # (Line 18) if (Deaths((13), (10), 0, (210)) && v.Unique_Cool[cp] == 0)
    if EUDIf()(EUDSCAnd()(Deaths((13), (10), 0, (210)))(v.Unique_Cool[cp] == 0)()):
        # (Line 19) {
        # (Line 20) if (value == 0)
        if EUDIf()(value == 0):
            # (Line 21) { tct.chatAnnouncement("　\x1B남은 포션 갯수 \x04: ", v.Potion[cp], "　\x1FO Skill \x04사용가능 \x1CON　\x07Level \x04", v.Level[cp], ""); }
            tct.f_chatAnnouncement("　\x1B남은 포션 갯수 \x04: ", v.Potion[cp], "　\x1FO Skill \x04사용가능 \x1CON　\x07Level \x04", v.Level[cp], "")
            # (Line 22) if (value == 1)
        EUDEndIf()
        if EUDIf()(value == 1):
            # (Line 23) { tct.chatAnnouncement("　\x1B남은 포션 갯수 \x04: ", v.Potion[cp], "　\x1FO Skill \x04사용가능 \x1COFF　\x07Level \x04", v.Level[cp], ""); }
            tct.f_chatAnnouncement("　\x1B남은 포션 갯수 \x04: ", v.Potion[cp], "　\x1FO Skill \x04사용가능 \x1COFF　\x07Level \x04", v.Level[cp], "")
            # (Line 24) }
        EUDEndIf()
        # (Line 25) else if (Deaths((13), (10), 0, (210)) && v.Unique_Cool[cp] != 0)
    if EUDElseIf()(EUDSCAnd()(Deaths((13), (10), 0, (210)))(v.Unique_Cool[cp] == 0, neg=True)()):
        # (Line 26) {
        # (Line 27) if (value == 0)
        if EUDIf()(value == 0):
            # (Line 28) { tct.chatAnnouncement("　\x1B남은 포션 갯수 \x04: ", v.Potion[cp], "　\x1FO \x1ECooltime \x04", v.Unique_Cool[cp], "초 \x1CON　\x07Level \x04", v.Level[cp], ""); }
            tct.f_chatAnnouncement("　\x1B남은 포션 갯수 \x04: ", v.Potion[cp], "　\x1FO \x1ECooltime \x04", v.Unique_Cool[cp], "초 \x1CON　\x07Level \x04", v.Level[cp], "")
            # (Line 29) if (value == 1)
        EUDEndIf()
        if EUDIf()(value == 1):
            # (Line 30) { tct.chatAnnouncement("　\x1B남은 포션 갯수 \x04: ", v.Potion[cp], "　\x1FO \x1ECooltime \x04", v.Unique_Cool[cp], "초 \x1COFF　\x07Level \x04", v.Level[cp], ""); }
            tct.f_chatAnnouncement("　\x1B남은 포션 갯수 \x04: ", v.Potion[cp], "　\x1FO \x1ECooltime \x04", v.Unique_Cool[cp], "초 \x1COFF　\x07Level \x04", v.Level[cp], "")
            # (Line 31) }
        EUDEndIf()
        # (Line 32) else if (Deaths((13), (0), 1, (210)) && v.Unique_Cool[cp] == 0)
    if EUDElseIf()(EUDSCAnd()(Deaths((13), (0), 1, (210)))(v.Unique_Cool[cp] == 0)()):
        # (Line 33) {
        # (Line 34) if (value == 0)
        if EUDIf()(value == 0):
            # (Line 35) { tct.chatAnnouncement("　\x04치명상 치료까지 : ", v.DeathCount[cp], "초　\x1FO Skill \x04사용가능 \x1CON　\x07Level \x04", v.Level[cp], ""); }
            tct.f_chatAnnouncement("　\x04치명상 치료까지 : ", v.DeathCount[cp], "초　\x1FO Skill \x04사용가능 \x1CON　\x07Level \x04", v.Level[cp], "")
            # (Line 36) if (value == 1)
        EUDEndIf()
        if EUDIf()(value == 1):
            # (Line 37) { tct.chatAnnouncement("　\x04치명상 치료까지 : ", v.DeathCount[cp], "초　\x1FO Skill \x04사용가능 \x08OFF　\x07Level \x04", v.Level[cp], ""); }
            tct.f_chatAnnouncement("　\x04치명상 치료까지 : ", v.DeathCount[cp], "초　\x1FO Skill \x04사용가능 \x08OFF　\x07Level \x04", v.Level[cp], "")
            # (Line 38) }
        EUDEndIf()
        # (Line 39) else if (Deaths((13), (0), 1, (210)) && v.Unique_Cool[cp] != 0)
    if EUDElseIf()(EUDSCAnd()(Deaths((13), (0), 1, (210)))(v.Unique_Cool[cp] == 0, neg=True)()):
        # (Line 40) {
        # (Line 41) if (value == 0)
        if EUDIf()(value == 0):
            # (Line 42) { tct.chatAnnouncement("　\x04치명상 치료까지 : ", v.DeathCount[cp], "초　\x1FO \x1ECooltime \x04", v.Unique_Cool[cp], "초 \x1CON　\x07Level \x04", v.Level[cp], ""); }
            tct.f_chatAnnouncement("　\x04치명상 치료까지 : ", v.DeathCount[cp], "초　\x1FO \x1ECooltime \x04", v.Unique_Cool[cp], "초 \x1CON　\x07Level \x04", v.Level[cp], "")
            # (Line 43) if (value == 1)
        EUDEndIf()
        if EUDIf()(value == 1):
            # (Line 44) { tct.chatAnnouncement("　\x04치명상 치료까지 : ", v.DeathCount[cp], "초　\x1FO \x1ECooltime \x04", v.Unique_Cool[cp], "초 \x1COFF　\x07Level \x04", v.Level[cp], ""); }
            tct.f_chatAnnouncement("　\x04치명상 치료까지 : ", v.DeathCount[cp], "초　\x1FO \x1ECooltime \x04", v.Unique_Cool[cp], "초 \x1COFF　\x07Level \x04", v.Level[cp], "")
            # (Line 45) }
        EUDEndIf()
        # (Line 46) }
    EUDEndIf()
    # (Line 48) function Announce_Normal(cp)

# (Line 49) {
@EUDFunc
def Announce_Normal(cp):
    # (Line 50) if (Deaths((13), (10), 0, (210)))
    if EUDIf()(Deaths((13), (10), 0, (210))):
        # (Line 51) {
        # (Line 52) if (v.Unique_Cool[cp] == 0)
        if EUDIf()(v.Unique_Cool[cp] == 0):
            # (Line 53) {tct.chatAnnouncement("　\x1B남은 포션 갯수 \x04: ", v.Potion[cp], "　\x1FO Skill \x04사용가능　\x07Level \x04", v.Level[cp], "");}
            tct.f_chatAnnouncement("　\x1B남은 포션 갯수 \x04: ", v.Potion[cp], "　\x1FO Skill \x04사용가능　\x07Level \x04", v.Level[cp], "")
            # (Line 54) else
            # (Line 55) {tct.chatAnnouncement("　\x1B남은 포션 갯수 \x04: ", v.Potion[cp], "　\x1FO \x1ECooltime \x04", v.Unique_Cool[cp], "초　\x07Level \x04", v.Level[cp], "");}
        if EUDElse()():
            tct.f_chatAnnouncement("　\x1B남은 포션 갯수 \x04: ", v.Potion[cp], "　\x1FO \x1ECooltime \x04", v.Unique_Cool[cp], "초　\x07Level \x04", v.Level[cp], "")
            # (Line 56) }
        EUDEndIf()
        # (Line 57) else
        # (Line 58) {
    if EUDElse()():
        # (Line 59) if (v.Unique_Cool[cp] == 0)
        if EUDIf()(v.Unique_Cool[cp] == 0):
            # (Line 60) {tct.chatAnnouncement("　\x04치명상 치료까지 : ", v.DeathCount[cp], "초　\x1FO Skill \x04사용가능　\x07Level \x04", v.Level[cp], "");}
            tct.f_chatAnnouncement("　\x04치명상 치료까지 : ", v.DeathCount[cp], "초　\x1FO Skill \x04사용가능　\x07Level \x04", v.Level[cp], "")
            # (Line 61) else
            # (Line 62) {tct.chatAnnouncement("　\x04치명상 치료까지 : ", v.DeathCount[cp], "초　\x1FO \x1ECooltime \x04", v.Unique_Cool[cp], "초　\x07Level \x04", v.Level[cp], "");}
        if EUDElse()():
            tct.f_chatAnnouncement("　\x04치명상 치료까지 : ", v.DeathCount[cp], "초　\x1FO \x1ECooltime \x04", v.Unique_Cool[cp], "초　\x07Level \x04", v.Level[cp], "")
            # (Line 63) }
        EUDEndIf()
        # (Line 64) }
    EUDEndIf()
    # (Line 66) function Announce_Ingame(cp)

# (Line 67) {
@EUDFunc
def Announce_Ingame(cp):
    # (Line 68) if (Score((13), (7), (1), 24))
    if EUDIf()(Score((13), (7), (1), 24)):
        # (Line 69) {
        # (Line 70) if (Deaths((13), (10), 0, (210)))
        if EUDIf()(Deaths((13), (10), 0, (210))):
            # (Line 71) { tct.chatAnnouncement("　\x1B남은 포션 갯수 \x04: ", v.Potion[cp], "　\x1FExp \x04", v.EXP_Now[cp], "/", v.EXP_Need[cp], "　\x07Level \x04", v.Level[cp], ""); }
            tct.f_chatAnnouncement("　\x1B남은 포션 갯수 \x04: ", v.Potion[cp], "　\x1FExp \x04", v.EXP_Now[cp], "/", v.EXP_Need[cp], "　\x07Level \x04", v.Level[cp], "")
            # (Line 72) else
            # (Line 73) { tct.chatAnnouncement("　\x04치명상 치료까지 : ", v.DeathCount[cp], "초　\x1FExp \x04", v.EXP_Now[cp], "/", v.EXP_Need[cp], "　\x07Level \x04", v.Level[cp], ""); }
        if EUDElse()():
            tct.f_chatAnnouncement("　\x04치명상 치료까지 : ", v.DeathCount[cp], "초　\x1FExp \x04", v.EXP_Now[cp], "/", v.EXP_Need[cp], "　\x07Level \x04", v.Level[cp], "")
            # (Line 74) }
        EUDEndIf()
        # (Line 75) else
        # (Line 76) {
    if EUDElse()():
        # (Line 77) switch (v.Hero_Num[cp])
        EUDSwitch(v.Hero_Num[cp])
        # (Line 78) {
        # (Line 79) case 2:
        _t3 = EUDSwitchCase()
        # (Line 80) if (Switch((6), (2))) { Announce_Adv(0, cp); }
        if _t3(2):
            if EUDIf()(Switch((6), (2))):
                Announce_Adv(0, cp)
                # (Line 81) if (Switch((6), (3))) { Announce_Adv(1, cp); }
            EUDEndIf()
            if EUDIf()(Switch((6), (3))):
                Announce_Adv(1, cp)
                # (Line 82) break;
            EUDEndIf()
            EUDBreak()
            # (Line 83) case 7:
        _t6 = EUDSwitchCase()
        # (Line 84) if (Switch((9), (2))) { Announce_Adv(0, cp); }
        if _t6(7):
            if EUDIf()(Switch((9), (2))):
                Announce_Adv(0, cp)
                # (Line 85) if (Switch((9), (3))) { Announce_Adv(1, cp); }
            EUDEndIf()
            if EUDIf()(Switch((9), (3))):
                Announce_Adv(1, cp)
                # (Line 86) break;
            EUDEndIf()
            EUDBreak()
            # (Line 87) case 15:
        _t9 = EUDSwitchCase()
        # (Line 88) if (Switch((19), (2))) { Announce_Adv(0, cp); }
        if _t9(15):
            if EUDIf()(Switch((19), (2))):
                Announce_Adv(0, cp)
                # (Line 89) if (Switch((19), (3))) { Announce_Adv(1, cp); }
            EUDEndIf()
            if EUDIf()(Switch((19), (3))):
                Announce_Adv(1, cp)
                # (Line 90) break;
            EUDEndIf()
            EUDBreak()
            # (Line 91) case 16:
        _t12 = EUDSwitchCase()
        # (Line 92) if (Deaths((13), (0), 1, (204)) && Deaths((13), (1), 7, (204)))
        if _t12(16):
            if EUDIf()(EUDSCAnd()(Deaths((13), (0), 1, (204)))(Deaths((13), (1), 7, (204)))()):
                # (Line 93) { Announce_Adv(0, cp); }
                Announce_Adv(0, cp)
                # (Line 94) else
                # (Line 95) { Announce_Normal(cp); }
            if EUDElse()():
                Announce_Normal(cp)
                # (Line 96) break;
            EUDEndIf()
            EUDBreak()
            # (Line 97) default:
        # (Line 98) Announce_Normal(cp);
        if EUDSwitchDefault()():
            Announce_Normal(cp)
            # (Line 99) break;
            EUDBreak()
            # (Line 100) }
        # (Line 101) }
        EUDEndSwitch()
        # (Line 102) }
    EUDEndIf()
    # (Line 104) function Announce_Character(cp)

# (Line 105) {
@EUDFunc
def Announce_Character(cp):
    # (Line 106) if(Switch(255, Cleared))
    if EUDIf()(Switch(255, Cleared)):
        # (Line 107) {
        # (Line 108) tct.chatAnnouncement(
        # (Line 109) "　\x17[ \x04", ptr2s(v.Hero_Name[v.Hero_Num[cp]]),
        # (Line 110) "\x17 ]　\x07Exp \x04", v.Exp_Player[cp],
        # (Line 111) "　\x1FCS \x04", v.CS_Player[cp],
        # (Line 112) "　\x08K\x04/\x1BD \x08", v.Kill_Total[20 * cp + (v.Hero_Num[cp] - 1)],
        # (Line 113) "\x04/\x1B", v.Death_Total[20 * cp + (v.Hero_Num[cp] - 1)], ""
        # (Line 114) );
        tct.f_chatAnnouncement("　\x17[ \x04", ptr2s(v.Hero_Name[v.Hero_Num[cp]]), "\x17 ]　\x07Exp \x04", v.Exp_Player[cp], "　\x1FCS \x04", v.CS_Player[cp], "　\x08K\x04/\x1BD \x08", v.Kill_Total[20 * cp + (v.Hero_Num[cp] - 1)], "\x04/\x1B", v.Death_Total[20 * cp + (v.Hero_Num[cp] - 1)], "")
        # (Line 115) }
        # (Line 116) else
        # (Line 117) {
    if EUDElse()():
        # (Line 118) tct.chatAnnouncement(
        # (Line 119) "　\x17[ \x04", ptr2s(v.Hero_Name[v.Hero_Num[cp]]),
        # (Line 120) "\x17 ]　\x07Exp \x04", v.Exp_Player[cp],
        # (Line 121) "　\x1FCS \x04", v.CS_Player[cp],
        # (Line 122) "　\x08K\x04/\x1BD \x08", v.Kill_Score[cp],
        # (Line 123) "\x04/\x1B", v.Death_Score[cp], ""
        # (Line 124) );
        tct.f_chatAnnouncement("　\x17[ \x04", ptr2s(v.Hero_Name[v.Hero_Num[cp]]), "\x17 ]　\x07Exp \x04", v.Exp_Player[cp], "　\x1FCS \x04", v.CS_Player[cp], "　\x08K\x04/\x1BD \x08", v.Kill_Score[cp], "\x04/\x1B", v.Death_Score[cp], "")
        # (Line 125) }
        # (Line 126) }
    EUDEndIf()
    # (Line 128) function Announce_Marge(cp)

# (Line 129) {
@EUDFunc
def Announce_Marge(cp):
    # (Line 130) if (Deaths(CurrentPlayer, Exactly, 1, "Terran SCV"))
    if EUDIf()(Deaths(CurrentPlayer, Exactly, 1, "Terran SCV")):
        # (Line 131) {
        # (Line 132) SetDeaths(CurrentPlayer, SetTo, 0, "Terran SCV");
        # (Line 134) if (v.AnnounceList[cp] < 1) 	{ v.AnnounceList[cp] += 1; }
        DoActions(SetDeaths(CurrentPlayer, SetTo, 0, "Terran SCV"))
        if EUDIf()(v.AnnounceList[cp] >= 1, neg=True):
            _ARRW(v.AnnounceList, cp).__iadd__(1)
            # (Line 135) else 						{ v.AnnounceList[cp] 	= 0; }
        if EUDElse()():
            _ARRW(v.AnnounceList, cp) << (0)
            # (Line 136) }
        EUDEndIf()
        # (Line 139) switch(v.AnnounceList[cp])
    EUDEndIf()
    EUDSwitch(v.AnnounceList[cp])
    # (Line 140) {
    # (Line 141) case 0:
    _t3 = EUDSwitchCase()
    # (Line 142) if (Switch(255, Set))		Announce_Ingame(cp);
    if _t3(0):
        if EUDIf()(Switch(255, Set)):
            Announce_Ingame(cp)
            # (Line 143) if (Switch(255, Cleared))	Announce_Init();
        EUDEndIf()
        if EUDIf()(Switch(255, Cleared)):
            Announce_Init()
            # (Line 144) break;
        EUDEndIf()
        EUDBreak()
        # (Line 145) case 1:
    _t6 = EUDSwitchCase()
    # (Line 146) Announce_Character(cp);
    if _t6(1):
        Announce_Character(cp)
        # (Line 147) break;
        EUDBreak()
        # (Line 148) }
    # (Line 149) }
    EUDEndSwitch()
