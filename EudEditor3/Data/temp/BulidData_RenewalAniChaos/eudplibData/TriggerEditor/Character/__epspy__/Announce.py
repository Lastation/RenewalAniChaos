## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import customText as tct;
import customText as tct
# (Line 2) import Variable as v;
import Variable as v
# (Line 4) var txtPtr, btnPtr, btnPos, oldCP;
txtPtr, btnPtr, btnPos, oldCP = EUDCreateVariables(4)
# (Line 5) const trgk = $T('Artanis & safhfh');
trgk = _CGFW(lambda: [GetStringIndex('Artanis & safhfh')], 1)[0]
# (Line 7) function Announce_Init()
# (Line 8) {
@EUDFunc
def Announce_Init():
    # (Line 9) if (Bring((13), (10), 0, (15), (96)))
    if EUDIf()(Bring((13), (10), 0, (15), (96))):
        # (Line 10) { tct.chatAnnouncement("　\x04특성 정보 - \x17S [스카웃] : \x04성장특화　\x17C [캐리어] : \x04마나특화　\x17A [아비터] : \x04게이지특화"); }
        tct.f_chatAnnouncement("　\x04특성 정보 - \x17S [스카웃] : \x04성장특화　\x17C [캐리어] : \x04마나특화　\x17A [아비터] : \x04게이지특화")
        # (Line 11) else
        # (Line 12) { tct.chatAnnouncement("　\x04캐릭터 선택 : \x17커세어　\x04캐릭터 정보확인 : \x17유닛 클릭　\x04랜덤 선택 : \x17리버"); }
    if EUDElse()():
        tct.f_chatAnnouncement("　\x04캐릭터 선택 : \x17커세어　\x04캐릭터 정보확인 : \x17유닛 클릭　\x04랜덤 선택 : \x17리버")
        # (Line 13) }
    EUDEndIf()
    # (Line 15) function Announce_Adv(value)

# (Line 16) {
@EUDFunc
def Announce_Adv(value):
    # (Line 17) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 19) if (Deaths((13), (10), 0, (210)) && v.Unique_Cool[cp] == 0)
    if EUDIf()(EUDSCAnd()(Deaths((13), (10), 0, (210)))(v.Unique_Cool[cp] == 0)()):
        # (Line 20) {
        # (Line 21) if (value == 0)
        if EUDIf()(value == 0):
            # (Line 22) { tct.chatAnnouncement("　\x1B남은 포션 갯수 \x04: ", v.Potion[cp], "　\x1FO Skill \x04사용가능 \x1CON　\x07Level \x04", v.Level[cp], ""); }
            tct.f_chatAnnouncement("　\x1B남은 포션 갯수 \x04: ", v.Potion[cp], "　\x1FO Skill \x04사용가능 \x1CON　\x07Level \x04", v.Level[cp], "")
            # (Line 23) if (value == 1)
        EUDEndIf()
        if EUDIf()(value == 1):
            # (Line 24) { tct.chatAnnouncement("　\x1B남은 포션 갯수 \x04: ", v.Potion[cp], "　\x1FO Skill \x04사용가능 \x1CON　\x07Level \x04", v.Level[cp], ""); }
            tct.f_chatAnnouncement("　\x1B남은 포션 갯수 \x04: ", v.Potion[cp], "　\x1FO Skill \x04사용가능 \x1CON　\x07Level \x04", v.Level[cp], "")
            # (Line 25) }
        EUDEndIf()
        # (Line 26) else if (Deaths((13), (10), 0, (210)) && v.Unique_Cool[cp] != 0)
    if EUDElseIf()(EUDSCAnd()(Deaths((13), (10), 0, (210)))(v.Unique_Cool[cp] == 0, neg=True)()):
        # (Line 27) {
        # (Line 28) if (value == 0)
        if EUDIf()(value == 0):
            # (Line 29) { tct.chatAnnouncement("　\x1B남은 포션 갯수 \x04: ", v.Potion[cp], "　\x1FO \x1ECooltime \x04", v.Unique_Cool[cp], "초 \x1CON　\x07Level \x04", v.Level[cp], ""); }
            tct.f_chatAnnouncement("　\x1B남은 포션 갯수 \x04: ", v.Potion[cp], "　\x1FO \x1ECooltime \x04", v.Unique_Cool[cp], "초 \x1CON　\x07Level \x04", v.Level[cp], "")
            # (Line 30) if (value == 1)
        EUDEndIf()
        if EUDIf()(value == 1):
            # (Line 31) { tct.chatAnnouncement("　\x1B남은 포션 갯수 \x04: ", v.Potion[cp], "　\x1FO \x1ECooltime \x04", v.Unique_Cool[cp], "초 \x1COFF　\x07Level \x04", v.Level[cp], ""); }
            tct.f_chatAnnouncement("　\x1B남은 포션 갯수 \x04: ", v.Potion[cp], "　\x1FO \x1ECooltime \x04", v.Unique_Cool[cp], "초 \x1COFF　\x07Level \x04", v.Level[cp], "")
            # (Line 32) }
        EUDEndIf()
        # (Line 33) else if (Deaths((13), (0), 1, (210)) && v.Unique_Cool[cp] == 0)
    if EUDElseIf()(EUDSCAnd()(Deaths((13), (0), 1, (210)))(v.Unique_Cool[cp] == 0)()):
        # (Line 34) {
        # (Line 35) if (value == 0)
        if EUDIf()(value == 0):
            # (Line 36) { tct.chatAnnouncement("　\x04치명상 치료까지 : ", v.DeathCount[cp], "초　\x1FO Skill \x04사용가능 \x1CON　\x07Level \x04", v.Level[cp], ""); }
            tct.f_chatAnnouncement("　\x04치명상 치료까지 : ", v.DeathCount[cp], "초　\x1FO Skill \x04사용가능 \x1CON　\x07Level \x04", v.Level[cp], "")
            # (Line 37) if (value == 1)
        EUDEndIf()
        if EUDIf()(value == 1):
            # (Line 38) { tct.chatAnnouncement("　\x04치명상 치료까지 : ", v.DeathCount[cp], "초　\x1FO Skill \x04사용가능 \x08OFF　\x07Level \x04", v.Level[cp], ""); }
            tct.f_chatAnnouncement("　\x04치명상 치료까지 : ", v.DeathCount[cp], "초　\x1FO Skill \x04사용가능 \x08OFF　\x07Level \x04", v.Level[cp], "")
            # (Line 39) }
        EUDEndIf()
        # (Line 40) else if (Deaths((13), (0), 1, (210)) && v.Unique_Cool[cp] != 0)
    if EUDElseIf()(EUDSCAnd()(Deaths((13), (0), 1, (210)))(v.Unique_Cool[cp] == 0, neg=True)()):
        # (Line 41) {
        # (Line 42) if (value == 0)
        if EUDIf()(value == 0):
            # (Line 43) { tct.chatAnnouncement("　\x04치명상 치료까지 : ", v.DeathCount[cp], "초　\x1FO \x1ECooltime \x04", v.Unique_Cool[cp], "초 \x1CON　\x07Level \x04", v.Level[cp], ""); }
            tct.f_chatAnnouncement("　\x04치명상 치료까지 : ", v.DeathCount[cp], "초　\x1FO \x1ECooltime \x04", v.Unique_Cool[cp], "초 \x1CON　\x07Level \x04", v.Level[cp], "")
            # (Line 44) if (value == 1)
        EUDEndIf()
        if EUDIf()(value == 1):
            # (Line 45) { tct.chatAnnouncement("　\x04치명상 치료까지 : ", v.DeathCount[cp], "초　\x1FO \x1ECooltime \x04", v.Unique_Cool[cp], "초 \x1COFF　\x07Level \x04", v.Level[cp], ""); }
            tct.f_chatAnnouncement("　\x04치명상 치료까지 : ", v.DeathCount[cp], "초　\x1FO \x1ECooltime \x04", v.Unique_Cool[cp], "초 \x1COFF　\x07Level \x04", v.Level[cp], "")
            # (Line 46) }
        EUDEndIf()
        # (Line 47) }
    EUDEndIf()
    # (Line 49) function Announce_Normal()

# (Line 50) {
@EUDFunc
def Announce_Normal():
    # (Line 51) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 53) if (Deaths((13), (10), 0, (210)))
    if EUDIf()(Deaths((13), (10), 0, (210))):
        # (Line 54) {
        # (Line 55) if (v.Unique_Cool[cp] == 0)
        if EUDIf()(v.Unique_Cool[cp] == 0):
            # (Line 56) {tct.chatAnnouncement("　\x1B남은 포션 갯수 \x04: ", v.Potion[cp], "　\x1FO Skill \x04사용가능　\x07Level \x04", v.Level[cp], "");}
            tct.f_chatAnnouncement("　\x1B남은 포션 갯수 \x04: ", v.Potion[cp], "　\x1FO Skill \x04사용가능　\x07Level \x04", v.Level[cp], "")
            # (Line 57) else
            # (Line 58) {tct.chatAnnouncement("　\x1B남은 포션 갯수 \x04: ", v.Potion[cp], "　\x1FO \x1ECooltime \x04", v.Unique_Cool[cp], "초　\x07Level \x04", v.Level[cp], "");}
        if EUDElse()():
            tct.f_chatAnnouncement("　\x1B남은 포션 갯수 \x04: ", v.Potion[cp], "　\x1FO \x1ECooltime \x04", v.Unique_Cool[cp], "초　\x07Level \x04", v.Level[cp], "")
            # (Line 59) }
        EUDEndIf()
        # (Line 60) else
        # (Line 61) {
    if EUDElse()():
        # (Line 62) if (v.Unique_Cool[cp] == 0)
        if EUDIf()(v.Unique_Cool[cp] == 0):
            # (Line 63) {tct.chatAnnouncement("　\x04치명상 치료까지 : ", v.DeathCount[cp], "초　\x1FO Skill \x04사용가능　\x07Level \x04", v.Level[cp], "");}
            tct.f_chatAnnouncement("　\x04치명상 치료까지 : ", v.DeathCount[cp], "초　\x1FO Skill \x04사용가능　\x07Level \x04", v.Level[cp], "")
            # (Line 64) else
            # (Line 65) {tct.chatAnnouncement("　\x04치명상 치료까지 : ", v.DeathCount[cp], "초　\x1FO \x1ECooltime \x04", v.Unique_Cool[cp], "초　\x07Level \x04", v.Level[cp], "");}
        if EUDElse()():
            tct.f_chatAnnouncement("　\x04치명상 치료까지 : ", v.DeathCount[cp], "초　\x1FO \x1ECooltime \x04", v.Unique_Cool[cp], "초　\x07Level \x04", v.Level[cp], "")
            # (Line 66) }
        EUDEndIf()
        # (Line 67) }
    EUDEndIf()
    # (Line 69) function Announce_Ingame()

# (Line 70) {
@EUDFunc
def Announce_Ingame():
    # (Line 71) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 73) if (Score((13), (7), (1), 24))
    if EUDIf()(Score((13), (7), (1), 24)):
        # (Line 74) {
        # (Line 75) if (Deaths((13), (10), 0, (210)))
        if EUDIf()(Deaths((13), (10), 0, (210))):
            # (Line 76) { tct.chatAnnouncement("　\x1B남은 포션 갯수 \x04: ", v.Potion[cp], "　\x1FExp \x04", v.EXP_Now[cp], "/", v.EXP_Need[cp], "　\x07Level \x04", v.Level[cp], ""); }
            tct.f_chatAnnouncement("　\x1B남은 포션 갯수 \x04: ", v.Potion[cp], "　\x1FExp \x04", v.EXP_Now[cp], "/", v.EXP_Need[cp], "　\x07Level \x04", v.Level[cp], "")
            # (Line 77) else
            # (Line 78) { tct.chatAnnouncement("　\x04치명상 치료까지 : ", v.DeathCount[cp], "초　\x1FExp \x04", v.EXP_Now[cp], "/", v.EXP_Need[cp], "　\x07Level \x04", v.Level[cp], ""); }
        if EUDElse()():
            tct.f_chatAnnouncement("　\x04치명상 치료까지 : ", v.DeathCount[cp], "초　\x1FExp \x04", v.EXP_Now[cp], "/", v.EXP_Need[cp], "　\x07Level \x04", v.Level[cp], "")
            # (Line 79) }
        EUDEndIf()
        # (Line 80) else
        # (Line 81) {
    if EUDElse()():
        # (Line 82) switch (v.Hero_Num[cp])
        EUDSwitch(v.Hero_Num[cp])
        # (Line 83) {
        # (Line 84) case 2:
        _t3 = EUDSwitchCase()
        # (Line 85) if (Switch((6), (2))) { Announce_Adv(0); }
        if _t3(2):
            if EUDIf()(Switch((6), (2))):
                Announce_Adv(0)
                # (Line 86) if (Switch((6), (3))) { Announce_Adv(1); }
            EUDEndIf()
            if EUDIf()(Switch((6), (3))):
                Announce_Adv(1)
                # (Line 87) break;
            EUDEndIf()
            EUDBreak()
            # (Line 88) case 7:
        _t6 = EUDSwitchCase()
        # (Line 89) if (Switch((9), (2))) { Announce_Adv(0); }
        if _t6(7):
            if EUDIf()(Switch((9), (2))):
                Announce_Adv(0)
                # (Line 90) if (Switch((9), (3))) { Announce_Adv(1); }
            EUDEndIf()
            if EUDIf()(Switch((9), (3))):
                Announce_Adv(1)
                # (Line 91) break;
            EUDEndIf()
            EUDBreak()
            # (Line 92) case 15:
        _t9 = EUDSwitchCase()
        # (Line 93) if (Switch((19), (2))) { Announce_Adv(0); }
        if _t9(15):
            if EUDIf()(Switch((19), (2))):
                Announce_Adv(0)
                # (Line 94) if (Switch((19), (3))) { Announce_Adv(1); }
            EUDEndIf()
            if EUDIf()(Switch((19), (3))):
                Announce_Adv(1)
                # (Line 95) break;
            EUDEndIf()
            EUDBreak()
            # (Line 96) case 16:
        _t12 = EUDSwitchCase()
        # (Line 97) if (Deaths((13), (0), 1, (204)) && Deaths((13), (1), 7, (204)))
        if _t12(16):
            if EUDIf()(EUDSCAnd()(Deaths((13), (0), 1, (204)))(Deaths((13), (1), 7, (204)))()):
                # (Line 98) { Announce_Adv(0); }
                Announce_Adv(0)
                # (Line 99) else
                # (Line 100) { Announce_Normal(); }
            if EUDElse()():
                Announce_Normal()
                # (Line 101) break;
            EUDEndIf()
            EUDBreak()
            # (Line 102) default:
        # (Line 103) Announce_Normal();
        if EUDSwitchDefault()():
            Announce_Normal()
            # (Line 104) break;
            EUDBreak()
            # (Line 105) }
        # (Line 106) }
        EUDEndSwitch()
        # (Line 107) }
    EUDEndIf()
