## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import customText as ct;
import customText as ct
# (Line 2) import Variable as v;
import Variable as v
# (Line 3) import Function as f;
import Function as f
# (Line 4) import Character.Sound as s;
from Character import Sound as s
# (Line 6) import Character.Rusaruka.Main 		as rusarukaMain;
from Character.Rusaruka import Main as rusarukaMain
# (Line 7) import Character.Kiana.Main 			as kianaMain;
from Character.Kiana import Main as kianaMain
# (Line 8) import Character.Yuuna.Main 		as yuunaMain;
from Character.Yuuna import Main as yuunaMain
# (Line 9) import Character.Mayuri.Main 		as mayuriMain;
from Character.Mayuri import Main as mayuriMain
# (Line 10) import Character.Nanami.Main 		as nanamiMain;
from Character.Nanami import Main as nanamiMain
# (Line 11) import Character.Milim.Main 		as milimMain;
from Character.Milim import Main as milimMain
# (Line 12) import Character.Yume.Main 		as yumeMain;
from Character.Yume import Main as yumeMain
# (Line 13) import Character.Magane.Main 		as maganeMain;
from Character.Magane import Main as maganeMain
# (Line 14) import Character.Oda.Main 			as odaMain;
from Character.Oda import Main as odaMain
# (Line 15) import Character.Ekidona.Main 		as ekidonaMain;
from Character.Ekidona import Main as ekidonaMain
# (Line 16) import Character.Niwa.Main 			as niwaMain;
from Character.Niwa import Main as niwaMain
# (Line 17) import Character.Violet.Main 		as violetMain;
from Character.Violet import Main as violetMain
# (Line 19) const bgmWait		= PVariable();
bgmWait = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 21) function SetVoice(cp);
# (Line 22) function MargeSound(cp);
# (Line 23) function SkillWait(cp);
# (Line 24) function SkillDelay(cp);
# (Line 25) function BGMRoutine(cp);
# (Line 27) function main(cp)
# (Line 28) {
@EUDFunc
def f_main(cp):
    # (Line 29) switch(v.Hero_Num[cp])
    EUDSwitch(v.Hero_Num[cp])
    # (Line 30) {
    # (Line 31) case 1:
    _t1 = EUDSwitchCase()
    # (Line 32) rusarukaMain.main(cp);
    if _t1(1):
        rusarukaMain.f_main(cp)
        # (Line 33) break;
        EUDBreak()
        # (Line 34) case 17:
    _t2 = EUDSwitchCase()
    # (Line 35) kianaMain.main(cp);
    if _t2(17):
        kianaMain.f_main(cp)
        # (Line 36) break;
        EUDBreak()
        # (Line 37) case 22:
    _t3 = EUDSwitchCase()
    # (Line 38) yuunaMain.main(cp);
    if _t3(22):
        yuunaMain.f_main(cp)
        # (Line 39) break;
        EUDBreak()
        # (Line 40) case 23:
    _t4 = EUDSwitchCase()
    # (Line 41) mayuriMain.main(cp);
    if _t4(23):
        mayuriMain.f_main(cp)
        # (Line 42) break;
        EUDBreak()
        # (Line 43) case 24:
    _t5 = EUDSwitchCase()
    # (Line 44) nanamiMain.main(cp);
    if _t5(24):
        nanamiMain.f_main(cp)
        # (Line 45) break;
        EUDBreak()
        # (Line 46) case 25:
    _t6 = EUDSwitchCase()
    # (Line 47) milimMain.main(cp);
    if _t6(25):
        milimMain.f_main(cp)
        # (Line 48) break;
        EUDBreak()
        # (Line 49) case 26:
    _t7 = EUDSwitchCase()
    # (Line 50) yumeMain.main(cp);
    if _t7(26):
        yumeMain.f_main(cp)
        # (Line 51) break;
        EUDBreak()
        # (Line 52) case 27:
    _t8 = EUDSwitchCase()
    # (Line 53) maganeMain.main(cp);
    if _t8(27):
        maganeMain.f_main(cp)
        # (Line 54) break;
        EUDBreak()
        # (Line 55) case 28:
    _t9 = EUDSwitchCase()
    # (Line 56) odaMain.main(cp);
    if _t9(28):
        odaMain.f_main(cp)
        # (Line 57) break;
        EUDBreak()
        # (Line 58) case 29:
    _t10 = EUDSwitchCase()
    # (Line 59) ekidonaMain.main(cp);
    if _t10(29):
        ekidonaMain.f_main(cp)
        # (Line 60) break;
        EUDBreak()
        # (Line 61) case 30:
    _t11 = EUDSwitchCase()
    # (Line 62) niwaMain.main(cp);
    if _t11(30):
        niwaMain.f_main(cp)
        # (Line 63) break;
        EUDBreak()
        # (Line 64) case 31:
    _t12 = EUDSwitchCase()
    # (Line 65) violetMain.main(cp);
    if _t12(31):
        violetMain.f_main(cp)
        # (Line 66) break;
        EUDBreak()
        # (Line 67) }
    # (Line 69) SkillWait(cp);
    EUDEndSwitch()
    SkillWait(cp)
    # (Line 70) SkillDelay(cp);
    SkillDelay(cp)
    # (Line 72) SetVoice(cp);
    SetVoice(cp)
    # (Line 73) s.main(cp);
    s.f_main(cp)
    # (Line 74) BGMRoutine(cp);
    BGMRoutine(cp)
    # (Line 75) }
    # (Line 77) function SetVoice(cp)

# (Line 78) {
@EUDFunc
def SetVoice(cp):
    # (Line 79) if (cp < 6)
    if EUDIf()(cp >= 6, neg=True):
        # (Line 80) {
        # (Line 81) if (Deaths(cp, AtLeast, 1, (186)))
        if EUDIf()(Deaths(cp, AtLeast, 1, (186))):
            # (Line 82) {
            # (Line 83) v.Sound_Text1[cp] = dwread_epd(EPD(0x58A364 + 48 * 186 + 4 * cp));
            _ARRW(v.Sound_Text1, cp) << (f_dwread_epd(EPD(0x58A364 + 48 * 186 + 4 * cp)))
            # (Line 84) v.Sound_Text1[8 + cp] = v.Sound_Text1[cp];
            _ARRW(v.Sound_Text1, 8 + cp) << (v.Sound_Text1[cp])
            # (Line 85) SetDeaths(cp, SetTo, 0, (186));
            # (Line 86) }
            DoActions(SetDeaths(cp, SetTo, 0, (186)))
            # (Line 87) if (Deaths(cp, AtLeast, 1, (174)))
        EUDEndIf()
        if EUDIf()(Deaths(cp, AtLeast, 1, (174))):
            # (Line 88) {
            # (Line 89) v.Sound_Text2[cp] = dwread_epd(EPD(0x58A364 + 48 * 174 + 4 * cp));
            _ARRW(v.Sound_Text2, cp) << (f_dwread_epd(EPD(0x58A364 + 48 * 174 + 4 * cp)))
            # (Line 90) v.Sound_Text2[8 + cp] = v.Sound_Text2[cp];
            _ARRW(v.Sound_Text2, 8 + cp) << (v.Sound_Text2[cp])
            # (Line 91) SetDeaths(cp, SetTo, 0, (174));
            # (Line 92) }
            DoActions(SetDeaths(cp, SetTo, 0, (174)))
            # (Line 93) if (Deaths(cp, AtLeast, 1, (117)))
        EUDEndIf()
        if EUDIf()(Deaths(cp, AtLeast, 1, (117))):
            # (Line 94) {
            # (Line 95) v.Sound_Text3[cp] = dwread_epd(EPD(0x58A364 + 48 * 117 + 4 * cp));
            _ARRW(v.Sound_Text3, cp) << (f_dwread_epd(EPD(0x58A364 + 48 * 117 + 4 * cp)))
            # (Line 96) v.Sound_Text3[8 + cp] = v.Sound_Text3[cp];
            _ARRW(v.Sound_Text3, 8 + cp) << (v.Sound_Text3[cp])
            # (Line 97) SetDeaths(cp, SetTo, 0, (117));
            # (Line 98) }
            DoActions(SetDeaths(cp, SetTo, 0, (117)))
            # (Line 99) if (Deaths(cp, AtLeast, 1, (157)))
        EUDEndIf()
        if EUDIf()(Deaths(cp, AtLeast, 1, (157))):
            # (Line 100) {
            # (Line 101) v.Sound_Text4[cp] = dwread_epd(EPD(0x58A364 + 48 * 157 + 4 * cp));
            _ARRW(v.Sound_Text4, cp) << (f_dwread_epd(EPD(0x58A364 + 48 * 157 + 4 * cp)))
            # (Line 102) v.Sound_Text4[8 + cp] = v.Sound_Text4[cp];
            _ARRW(v.Sound_Text4, 8 + cp) << (v.Sound_Text4[cp])
            # (Line 103) SetDeaths(cp, SetTo, 0, (157));
            # (Line 104) }
            DoActions(SetDeaths(cp, SetTo, 0, (157)))
            # (Line 105) if (Deaths(cp, AtLeast, 1, (222)))
        EUDEndIf()
        if EUDIf()(Deaths(cp, AtLeast, 1, (222))):
            # (Line 106) {
            # (Line 107) v.Sound_Text_Uilti[cp] = dwread_epd(EPD(0x58A364 + 48 * 222 + 4 * cp));
            _ARRW(v.Sound_Text_Uilti, cp) << (f_dwread_epd(EPD(0x58A364 + 48 * 222 + 4 * cp)))
            # (Line 108) v.Sound_Text_Uilti[8 + cp] = v.Sound_Text_Uilti[cp];
            _ARRW(v.Sound_Text_Uilti, 8 + cp) << (v.Sound_Text_Uilti[cp])
            # (Line 109) SetDeaths(cp, SetTo, 0, (222));
            # (Line 110) }
            DoActions(SetDeaths(cp, SetTo, 0, (222)))
            # (Line 111) if (Deaths(cp, AtLeast, 1, (188)))
        EUDEndIf()
        if EUDIf()(Deaths(cp, AtLeast, 1, (188))):
            # (Line 112) {
            # (Line 113) v.Sound_Text_Uniq[cp] = dwread_epd(EPD(0x58A364 + 48 * 188 + 4 * cp));
            _ARRW(v.Sound_Text_Uniq, cp) << (f_dwread_epd(EPD(0x58A364 + 48 * 188 + 4 * cp)))
            # (Line 114) v.Sound_Text_Uniq[8 + cp] = v.Sound_Text_Uniq[cp];
            _ARRW(v.Sound_Text_Uniq, 8 + cp) << (v.Sound_Text_Uniq[cp])
            # (Line 115) SetDeaths(cp, SetTo, 0, (188));
            # (Line 116) }
            DoActions(SetDeaths(cp, SetTo, 0, (188)))
            # (Line 117) }
        EUDEndIf()
        # (Line 118) }
    EUDEndIf()
    # (Line 120) function BGMRoutine(cp)

# (Line 121) {
@EUDFunc
def BGMRoutine(cp):
    # (Line 122) if (Bring(cp, AtLeast, 1, "Terran SCV", "[BGM]ON"))
    if EUDIf()(Bring(cp, AtLeast, 1, "Terran SCV", "[BGM]ON")):
        # (Line 123) {
        # (Line 124) if (bgmWait[cp] == 0)
        if EUDIf()(bgmWait[cp] == 0):
            # (Line 125) {
            # (Line 126) f.stb.print("　　\x04\x1F# N\x04ow \x04Playing... ' \x08化\x02身の\x04獣 [ \x19십\x04이대전 ed ]\x04");
            f.stb.print("　　\x04\x1F# N\x04ow \x04Playing... ' \x08化\x02身の\x04獣 [ \x19십\x04이대전 ed ]\x04")
            # (Line 127) PlayWAV("BGM.ogg");
            # (Line 128) bgmWait[cp] = 2424;
            DoActions(PlayWAV("BGM.ogg"))
            _ARRW(bgmWait, cp) << (2424)
            # (Line 129) }
            # (Line 130) }
        EUDEndIf()
        # (Line 132) if (bgmWait[cp] > 0)
    EUDEndIf()
    if EUDIf()(bgmWait[cp] <= 0, neg=True):
        # (Line 133) {
        # (Line 134) bgmWait[cp] -= 1;
        _ARRW(bgmWait, cp).__isub__(1)
        # (Line 135) }
        # (Line 136) }
    EUDEndIf()
    # (Line 138) function SkillWait(cp)

# (Line 139) {
@EUDFunc
def SkillWait(cp):
    # (Line 140) if (f.delay[cp] == 0)
    if EUDIf()(f.delay[cp] == 0):
        # (Line 141) {
        # (Line 142) if (f.count[cp] == 999)
        if EUDIf()(f.count[cp] == 999):
            # (Line 143) {
            # (Line 144) f.SkillWait(cp, 500);
            f.SkillWait(cp, 500)
            # (Line 145) f.count[cp] = 1000;
            _ARRW(f.count, cp) << (1000)
            # (Line 146) }
            # (Line 147) else if (f.count[cp] == 1000)
        if EUDElseIf()(f.count[cp] == 1000):
            # (Line 148) {
            # (Line 149) f.count[cp] = 0;
            _ARRW(f.count, cp) << (0)
            # (Line 150) f.loop[cp] = 0;
            _ARRW(f.loop, cp) << (0)
            # (Line 151) f.wait[cp] = 12;
            _ARRW(f.wait, cp) << (12)
            # (Line 152) }
            # (Line 153) }
        EUDEndIf()
        # (Line 155) if (f.wait[cp] >= 2)
    EUDEndIf()
    if EUDIf()(f.wait[cp] >= 2):
        # (Line 156) {
        # (Line 157) f.wait[cp] -= 1;
        _ARRW(f.wait, cp).__isub__(1)
        # (Line 158) }
        # (Line 159) else if (f.wait[cp] == 1)
    if EUDElseIf()(f.wait[cp] == 1):
        # (Line 160) {
        # (Line 161) f.wait[cp] = 0;
        _ARRW(f.wait, cp) << (0)
        # (Line 162) f.step[cp] = 0;
        _ARRW(f.step, cp) << (0)
        # (Line 163) }
        # (Line 164) }
    EUDEndIf()
    # (Line 166) function SkillDelay(cp)

# (Line 167) {
@EUDFunc
def SkillDelay(cp):
    # (Line 168) if (f.delay[cp] >= 1) { f.delay[cp] -= 1; }
    if EUDIf()(f.delay[cp] >= 1):
        _ARRW(f.delay, cp).__isub__(1)
        # (Line 169) if (f.delayB[cp] >= 1) { f.delayB[cp] -= 1; }
    EUDEndIf()
    if EUDIf()(f.delayB[cp] >= 1):
        _ARRW(f.delayB, cp).__isub__(1)
        # (Line 170) if (f.delayC[cp] >= 1) { f.delayC[cp] -= 1; }
    EUDEndIf()
    if EUDIf()(f.delayC[cp] >= 1):
        _ARRW(f.delayC, cp).__isub__(1)
        # (Line 171) }
    EUDEndIf()
