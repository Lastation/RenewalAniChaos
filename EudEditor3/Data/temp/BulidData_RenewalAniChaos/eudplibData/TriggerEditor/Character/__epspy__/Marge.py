## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import customText as ct;
import customText as ct
# (Line 2) import Variable as v;
import Variable as v
# (Line 3) import Function as f;
import Function as f
# (Line 5) import Character.Rusaruka.Main as rusarukaMain;
from Character.Rusaruka import Main as rusarukaMain
# (Line 6) import Character.Yuuna.Main as yuunaMain;
from Character.Yuuna import Main as yuunaMain
# (Line 9) function MargeSound(cp);
# (Line 10) function SkillWait(cp);
# (Line 11) function SkillDelay(cp);
# (Line 13) function main(cp)
# (Line 14) {
@EUDFunc
def f_main(cp):
    # (Line 15) switch(v.Hero_Num[cp])
    EUDSwitch(v.Hero_Num[cp])
    # (Line 16) {
    # (Line 17) case 1:
    _t1 = EUDSwitchCase()
    # (Line 18) rusarukaMain.main(cp);
    if _t1(1):
        rusarukaMain.f_main(cp)
        # (Line 19) break;
        EUDBreak()
        # (Line 20) case 22:
    _t2 = EUDSwitchCase()
    # (Line 21) yuunaMain.main(cp);
    if _t2(22):
        yuunaMain.f_main(cp)
        # (Line 22) break;
        EUDBreak()
        # (Line 23) }
    # (Line 25) SkillWait(cp);
    EUDEndSwitch()
    SkillWait(cp)
    # (Line 26) SkillDelay(cp);
    SkillDelay(cp)
    # (Line 28) MargeSound(cp);
    MargeSound(cp)
    # (Line 29) }
    # (Line 31) function MargeSound(cp)

# (Line 32) {
@EUDFunc
def MargeSound(cp):
    # (Line 33) rusarukaMain.SkillVoice(cp);
    rusarukaMain.SkillVoice(cp)
    # (Line 34) yuunaMain.SkillVoice(cp);
    yuunaMain.SkillVoice(cp)
    # (Line 35) }
    # (Line 37) function SkillWait(cp)

# (Line 38) {
@EUDFunc
def SkillWait(cp):
    # (Line 39) if (f.wait[cp] >= 2)
    if EUDIf()(f.wait[cp] >= 2):
        # (Line 40) {
        # (Line 41) f.wait[cp] -= 1;
        _ARRW(f.wait, cp).__isub__(1)
        # (Line 42) f.count[cp] = 0;
        _ARRW(f.count, cp) << (0)
        # (Line 43) }
        # (Line 44) else if (f.wait[cp] == 1)
    if EUDElseIf()(f.wait[cp] == 1):
        # (Line 45) {
        # (Line 46) f.wait[cp] = 0;
        _ARRW(f.wait, cp) << (0)
        # (Line 47) f.step[cp] = 0;
        _ARRW(f.step, cp) << (0)
        # (Line 48) f.loop[cp] = 0;
        _ARRW(f.loop, cp) << (0)
        # (Line 49) }
        # (Line 50) }
    EUDEndIf()
    # (Line 52) function SkillDelay(cp)

# (Line 53) {
@EUDFunc
def SkillDelay(cp):
    # (Line 54) if (f.delay[cp] >= 1) { f.delay[cp] -= 1; }
    if EUDIf()(f.delay[cp] >= 1):
        _ARRW(f.delay, cp).__isub__(1)
        # (Line 55) if (f.delayB[cp] >= 1) { f.delayB[cp] -= 1; }
    EUDEndIf()
    if EUDIf()(f.delayB[cp] >= 1):
        _ARRW(f.delayB, cp).__isub__(1)
        # (Line 56) if (f.delayC[cp] >= 1) { f.delayC[cp] -= 1; }
    EUDEndIf()
    if EUDIf()(f.delayC[cp] >= 1):
        _ARRW(f.delayC, cp).__isub__(1)
        # (Line 57) }
    EUDEndIf()
