## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Character.Sound				as s;
from Character import Sound as s
# (Line 3) import Character.Rusaruka.Text 		as T_rusaruka;
from Character.Rusaruka import Text as T_rusaruka
# (Line 4) import Character.Yuuna.Text 			as T_yuuna;
from Character.Yuuna import Text as T_yuuna
# (Line 5) import Character.Mayuri.Text 		as T_mayuri;
from Character.Mayuri import Text as T_mayuri
# (Line 6) import Character.Nanami.Text 		as T_nanami;
from Character.Nanami import Text as T_nanami
# (Line 7) import Character.Milim.Text 			as T_milim;
from Character.Milim import Text as T_milim
# (Line 8) import Character.Yume.Text 			as T_yume;
from Character.Yume import Text as T_yume
# (Line 9) import Character.Magane.Text 		as T_magane;
from Character.Magane import Text as T_magane
# (Line 10) import Character.Oda.Text 			as T_oda;
from Character.Oda import Text as T_oda
# (Line 11) import Character.Ekidona.Text 		as T_ekidona;
from Character.Ekidona import Text as T_ekidona
# (Line 12) import Character.Niwa.Text 			as T_niwa;
from Character.Niwa import Text as T_niwa
# (Line 13) import Character.Violet.Text 			as T_violet;
from Character.Violet import Text as T_violet
# (Line 15) function main(cp)
# (Line 16) {
@EUDFunc
def f_main(cp):
    # (Line 17) if (getuserplayerid() >= 128)
    if EUDIf()(f_getuserplayerid() >= 128):
        # (Line 18) {
        # (Line 19) T_rusaruka.Looker();
        T_rusaruka.Looker()
        # (Line 20) T_yuuna.Looker();
        T_yuuna.Looker()
        # (Line 21) T_mayuri.Looker();
        T_mayuri.Looker()
        # (Line 22) T_nanami.Looker();
        T_nanami.Looker()
        # (Line 23) T_milim.Looker();
        T_milim.Looker()
        # (Line 24) T_yume.Looker();
        T_yume.Looker()
        # (Line 25) T_magane.Looker();
        T_magane.Looker()
        # (Line 26) T_oda.Looker();
        T_oda.Looker()
        # (Line 27) T_ekidona.Looker();
        T_ekidona.Looker()
        # (Line 28) T_niwa.Looker();
        T_niwa.Looker()
        # (Line 29) T_violet.Looker();
        T_violet.Looker()
        # (Line 31) s.MargeSound(getuserplayerid() - 120);
        s.MargeSound(f_getuserplayerid() - 120)
        # (Line 32) }
        # (Line 33) }
    EUDEndIf()
