## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Function as f;
import Function as f
# (Line 3) function main(cp)
# (Line 4) {
@EUDFunc
def f_main(cp):
    # (Line 5) if (f.delay[cp] == 0)
    if EUDIf()(f.delay[cp] == 0):
        # (Line 6) {
        # (Line 7) if (f.count[cp] == 0)
        if EUDIf()(f.count[cp] == 0):
            # (Line 8) {
            # (Line 9) f.SquareShape(cp, 8, "Bengalaas (Jungle)", 100, 100);
            f.SquareShape(cp, 8, "Bengalaas (Jungle)", 100, 100)
            # (Line 10) f.SquareShape(cp, 1, "Target", 100, 100);
            f.SquareShape(cp, 1, "Target", 100, 100)
            # (Line 11) f.DotShape(cp, 1, "Target", 0, 0);
            f.DotShape(cp, 1, "Target", 0, 0)
            # (Line 13) KillUnitAt(All, "Bengalaas (Jungle)", "Anywhere", cp);
            # (Line 14) KillUnitAt(All, "Target", "Anywhere", cp);
            DoActions(KillUnitAt(All, "Bengalaas (Jungle)", "Anywhere", cp))
            # (Line 16) RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", cp);
            DoActions(KillUnitAt(All, "Target", "Anywhere", cp))
            # (Line 18) f.SquareShape(cp, 1, "40 + 1n Wraith", 25 + 25 * f.loop[cp], 25 + 25 * f.loop[cp]);
            DoActions(RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", cp))
            f.SquareShape(cp, 1, "40 + 1n Wraith", 25 + 25 * f.loop[cp], 25 + 25 * f.loop[cp])
            # (Line 19) f.SquareShape(cp, 1, "40 + 1n Zealot", 25 + 25 * f.loop[cp], 25 + 25 * f.loop[cp]);
            f.SquareShape(cp, 1, "40 + 1n Zealot", 25 + 25 * f.loop[cp], 25 + 25 * f.loop[cp])
            # (Line 21) KillUnitAt(All, "40 + 1n Zealot", "Anywhere", cp);
            # (Line 23) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
            DoActions(KillUnitAt(All, "40 + 1n Zealot", "Anywhere", cp))
            # (Line 24) Order("40 + 1n Wraith", cp, "Anywhere", Attack, f.location[cp]);
            DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
            # (Line 26) f.SkillWait(cp, 160);
            DoActions(Order("40 + 1n Wraith", cp, "Anywhere", Attack, f.location[cp]))
            f.SkillWait(cp, 160)
            # (Line 28) f.loop[cp] += 1;
            _ARRW(f.loop, cp).__iadd__(1)
            # (Line 30) if (f.loop[cp] == 4)
            if EUDIf()(f.loop[cp] == 4):
                # (Line 31) {
                # (Line 32) f.count[cp] += 1;
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 33) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 34) }
                # (Line 35) }
            EUDEndIf()
            # (Line 36) else if (f.count[cp] == 1)
        if EUDElseIf()(f.count[cp] == 1):
            # (Line 37) {
            # (Line 38) if (f.loop[cp] == 0)
            if EUDIf()(f.loop[cp] == 0):
                # (Line 39) {
                # (Line 40) RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", cp);
                # (Line 42) f.SquareShape(cp, 1, "Protoss Dark Archon", 100, 100);
                DoActions(RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", cp))
                f.SquareShape(cp, 1, "Protoss Dark Archon", 100, 100)
                # (Line 43) f.SquareShape(cp, 1, "Target", 100, 100);
                f.SquareShape(cp, 1, "Target", 100, 100)
                # (Line 44) f.DotShape(cp, 1, "Target", 0, 0);
                f.DotShape(cp, 1, "Target", 0, 0)
                # (Line 45) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", cp);
                # (Line 46) KillUnitAt(All, "Target", "Anywhere", cp);
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", cp))
                # (Line 47) }
                DoActions(KillUnitAt(All, "Target", "Anywhere", cp))
                # (Line 48) else if (f.loop[cp] == 1)
            if EUDElseIf()(f.loop[cp] == 1):
                # (Line 49) {
                # (Line 50) f.SquareShape(cp, 1, "60 + 1n Archon", 100, 100);
                f.SquareShape(cp, 1, "60 + 1n Archon", 100, 100)
                # (Line 51) f.SquareShape(cp, 1, "50 + 1n Battlecruiser", 100, 100);
                f.SquareShape(cp, 1, "50 + 1n Battlecruiser", 100, 100)
                # (Line 52) f.DotShape(cp, 1, "50 + 1n Battlecruiser", 0, 0);
                f.DotShape(cp, 1, "50 + 1n Battlecruiser", 0, 0)
                # (Line 53) KillUnitAt(All, "60 + 1n Archon", "Anywhere", cp);
                # (Line 55) Order("50 + 1n Battlecruiser", cp, "Anywhere", Attack, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", cp))
                # (Line 56) }
                DoActions(Order("50 + 1n Battlecruiser", cp, "Anywhere", Attack, "Anywhere"))
                # (Line 58) f.SquareShape(cp, 1, "Protoss Dark Archon", -100 + 50 * f.loop[cp], 100);
            EUDEndIf()
            f.SquareShape(cp, 1, "Protoss Dark Archon", -100 + 50 * f.loop[cp], 100)
            # (Line 59) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", cp);
            # (Line 61) f.SkillWait(cp, 160);
            DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", cp))
            f.SkillWait(cp, 160)
            # (Line 63) f.loop[cp] += 1;
            _ARRW(f.loop, cp).__iadd__(1)
            # (Line 65) if (f.loop[cp] == 4)
            if EUDIf()(f.loop[cp] == 4):
                # (Line 66) {
                # (Line 67) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp);
                # (Line 69) f.count[cp] += 1;
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp))
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 70) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 71) }
                # (Line 72) }
            EUDEndIf()
            # (Line 73) else if (f.count[cp] == 2)
        if EUDElseIf()(f.count[cp] == 2):
            # (Line 74) {
            # (Line 75) KillUnitAt(All, "40 + 1n Goliath", "Anywhere", cp);
            # (Line 77) f.Table_Sin(cp, 30 * f.loop[cp], 100);
            DoActions(KillUnitAt(All, "40 + 1n Goliath", "Anywhere", cp))
            f.Table_Sin(cp, 30 * f.loop[cp], 100)
            # (Line 78) f.Table_Cos(cp, 30 * f.loop[cp], 100);
            f.Table_Cos(cp, 30 * f.loop[cp], 100)
            # (Line 80) f.SquareShape(cp, 1, "Kakaru (Twilight)", f.CosAngle[cp], f.SinAngle[cp]);
            f.SquareShape(cp, 1, "Kakaru (Twilight)", f.CosAngle[cp], f.SinAngle[cp])
            # (Line 81) f.SquareShape(cp, 1, "40 + 1n Goliath", f.CosAngle[cp], f.SinAngle[cp]);
            f.SquareShape(cp, 1, "40 + 1n Goliath", f.CosAngle[cp], f.SinAngle[cp])
            # (Line 83) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", cp);
            # (Line 85) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
            DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", cp))
            # (Line 86) MoveUnit(All, "40 + 1n Goliath", cp, "[Skill]Unit_Wait_ALL", f.location[cp]);
            DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
            # (Line 87) Order("40 + 1n Goliath", cp, "Anywhere", Attack, f.location[cp]);
            DoActions(MoveUnit(All, "40 + 1n Goliath", cp, "[Skill]Unit_Wait_ALL", f.location[cp]))
            # (Line 89) f.SkillWait(cp, 160);
            DoActions(Order("40 + 1n Goliath", cp, "Anywhere", Attack, f.location[cp]))
            f.SkillWait(cp, 160)
            # (Line 91) f.loop[cp] += 1;
            _ARRW(f.loop, cp).__iadd__(1)
            # (Line 93) if (f.loop[cp] == 3)
            if EUDIf()(f.loop[cp] == 3):
                # (Line 94) {
                # (Line 95) f.count[cp] += 1;
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 96) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 97) }
                # (Line 98) }
            EUDEndIf()
            # (Line 99) else if (f.count[cp] == 3)
        if EUDElseIf()(f.count[cp] == 3):
            # (Line 100) {
            # (Line 101) KillUnitAt(All, "40 + 1n Goliath", "Anywhere", cp);
            # (Line 103) f.SkillEnd(cp);
            DoActions(KillUnitAt(All, "40 + 1n Goliath", "Anywhere", cp))
            f.SkillEnd(cp)
            # (Line 104) }
            # (Line 105) }
        EUDEndIf()
        # (Line 106) }
    EUDEndIf()
