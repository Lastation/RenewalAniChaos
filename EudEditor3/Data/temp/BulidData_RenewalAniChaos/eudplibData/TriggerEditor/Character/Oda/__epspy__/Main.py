## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import Function as f;
import Function as f
# (Line 4) import Character.Oda.Skill_A as A;
from Character.Oda import Skill_A as A
# (Line 5) import Character.Oda.Skill_S as S;
from Character.Oda import Skill_S as S
# (Line 6) import Character.Oda.Skill_C as C;
from Character.Oda import Skill_C as C
# (Line 7) import Character.Oda.Skill_O as O;
from Character.Oda import Skill_O as O
# (Line 9) import Character.Oda.Skill_SSS as SSS;
from Character.Oda import Skill_SSS as SSS
# (Line 10) import Character.Oda.Skill_SSSCC as SSSCC;
from Character.Oda import Skill_SSSCC as SSSCC
# (Line 11) import Character.Oda.Skill_SSSCCAA as SSSCCAA;
from Character.Oda import Skill_SSSCCAA as SSSCCAA
# (Line 13) import Character.Oda.Skill_CC as CC;
from Character.Oda import Skill_CC as CC
# (Line 14) import Character.Oda.Skill_CCA as CCA;
from Character.Oda import Skill_CCA as CCA
# (Line 15) import Character.Oda.Skill_CCAAA as CCAAA;
from Character.Oda import Skill_CCAAA as CCAAA
# (Line 16) import Character.Oda.Skill_CCAAAAA as CCAAAAA;
from Character.Oda import Skill_CCAAAAA as CCAAAAA
# (Line 18) import Character.Oda.Skill_AASS as AASS;
from Character.Oda import Skill_AASS as AASS
# (Line 20) import Character.Oda.Skill_AAAA as AAAA;
from Character.Oda import Skill_AAAA as AAAA
# (Line 21) import Character.Oda.Skill_AAAAAA as AAAAAA;
from Character.Oda import Skill_AAAAAA as AAAAAA
# (Line 22) import Character.Oda.Skill_AO as AO;
from Character.Oda import Skill_AO as AO
# (Line 24) import Character.Oda.Text as text;
from Character.Oda import Text as text
# (Line 25) import Character.Oda.Commend as commend;
from Character.Oda import Commend as commend
# (Line 27) var loop  = 0;
loop = EUDCreateVariables(1)
_IGVA([loop], lambda: [0])
# (Line 29) function SkillList(cp);
# (Line 31) function main(cp)
# (Line 32) {
@EUDFunc
def f_main(cp):
    # (Line 33) f.location[cp] = 193;
    _ARRW(f.location, cp) << (193)
    # (Line 34) f.heroID[cp] = 99;
    _ARRW(f.heroID, cp) << (99)
    # (Line 36) f.UltimateA[cp] = 650;
    _ARRW(f.UltimateA, cp) << (650)
    # (Line 37) f.UltimateB[cp] = 300;
    _ARRW(f.UltimateB, cp) << (300)
    # (Line 39) SkillList(cp);
    SkillList(cp)
    # (Line 40) commend.main(cp);
    commend.f_main(cp)
    # (Line 42) if (f.wait[cp] == 0)
    if EUDIf()(f.wait[cp] == 0):
        # (Line 43) {
        # (Line 44) switch(f.step[cp])
        EUDSwitch(f.step[cp])
        # (Line 45) {
        # (Line 46) case 1:
        _t2 = EUDSwitchCase()
        # (Line 47) O.main(cp);
        if _t2(1):
            O.f_main(cp)
            # (Line 48) break;
            EUDBreak()
            # (Line 49) case 100:
        _t3 = EUDSwitchCase()
        # (Line 50) S.main(cp);
        if _t3(100):
            S.f_main(cp)
            # (Line 51) break;
            EUDBreak()
            # (Line 52) case 110:
        _t4 = EUDSwitchCase()
        # (Line 53) SSS.main(cp);
        if _t4(110):
            SSS.f_main(cp)
            # (Line 54) break;
            EUDBreak()
            # (Line 55) case 120:
        _t5 = EUDSwitchCase()
        # (Line 56) SSSCC.main(cp);
        if _t5(120):
            SSSCC.f_main(cp)
            # (Line 57) break;
            EUDBreak()
            # (Line 58) case 130:
        _t6 = EUDSwitchCase()
        # (Line 59) SSSCCAA.main(cp);
        if _t6(130):
            SSSCCAA.f_main(cp)
            # (Line 60) break;
            EUDBreak()
            # (Line 61) case 200:
        _t7 = EUDSwitchCase()
        # (Line 62) C.main(cp);
        if _t7(200):
            C.f_main(cp)
            # (Line 63) break;
            EUDBreak()
            # (Line 64) case 210:
        _t8 = EUDSwitchCase()
        # (Line 65) CC.main(cp);
        if _t8(210):
            CC.f_main(cp)
            # (Line 66) break;
            EUDBreak()
            # (Line 67) case 220:
        _t9 = EUDSwitchCase()
        # (Line 68) CCA.main(cp);
        if _t9(220):
            CCA.f_main(cp)
            # (Line 69) break;
            EUDBreak()
            # (Line 70) case 230:
        _t10 = EUDSwitchCase()
        # (Line 71) CCAAA.main(cp);
        if _t10(230):
            CCAAA.f_main(cp)
            # (Line 72) break;
            EUDBreak()
            # (Line 73) case 240:
        _t11 = EUDSwitchCase()
        # (Line 74) CCAAAAA.main(cp);
        if _t11(240):
            CCAAAAA.f_main(cp)
            # (Line 75) break;
            EUDBreak()
            # (Line 76) case 300:
        _t12 = EUDSwitchCase()
        # (Line 77) A.main(cp);
        if _t12(300):
            A.f_main(cp)
            # (Line 78) break;
            EUDBreak()
            # (Line 79) case 310:
        _t13 = EUDSwitchCase()
        # (Line 80) AAAA.main(cp);
        if _t13(310):
            AAAA.f_main(cp)
            # (Line 81) break;
            EUDBreak()
            # (Line 82) case 320:
        _t14 = EUDSwitchCase()
        # (Line 83) AAAAAA.main(cp);
        if _t14(320):
            AAAAAA.f_main(cp)
            # (Line 84) break;
            EUDBreak()
            # (Line 85) case 330:
        _t15 = EUDSwitchCase()
        # (Line 86) AASS.main(cp);
        if _t15(330):
            AASS.f_main(cp)
            # (Line 87) break;
            EUDBreak()
            # (Line 88) case 340:
        _t16 = EUDSwitchCase()
        # (Line 89) AO.main(cp);
        if _t16(340):
            AO.f_main(cp)
            # (Line 90) break;
            EUDBreak()
            # (Line 92) }
        # (Line 93) }
        EUDEndSwitch()
        # (Line 95) loop++;
    EUDEndIf()
    loop.__iadd__(1)
    # (Line 96) if (loop > 12)
    if EUDIf()(loop <= 12, neg=True):
        # (Line 97) {
        # (Line 98) O.savePosRoutine(cp);
        O.f_savePosRoutine(cp)
        # (Line 99) loop = 0;
        loop << (0)
        # (Line 100) }
        # (Line 101) }
    EUDEndIf()
    # (Line 104) function SkillVoice(cp)

# (Line 105) {
@EUDFunc
def SkillVoice(cp):
    # (Line 106) if (f.Oda_Voice[cp] != 0) { text.main(cp); }
    if EUDIf()(f.Oda_Voice[cp] == 0, neg=True):
        text.f_main(cp)
        # (Line 107) }
    EUDEndIf()
    # (Line 109) function SkillList(cp)

# (Line 110) {
@EUDFunc
def SkillList(cp):
    # (Line 111) if(Memory(0x00596A44, Exactly, 256)) 	// Insert key Pressed
    if EUDIf()(Memory(0x00596A44, Exactly, 256)):
        # (Line 112) {
        # (Line 113) f.stb.printAt(0, "\n");
        f.stb.printAt(0, "\n")
        # (Line 114) f.stb.printAt(1, "\x1F　＃\x1B- 오다 사쿠노스케　\x04[ 문호 스트레이독스 ]");
        f.stb.printAt(1, "\x1F　＃\x1B- 오다 사쿠노스케　\x04[ 문호 스트레이독스 ]")
        # (Line 115) f.stb.printAt(2, "　　\x1FA\x04ction List");
        f.stb.printAt(2, "　　\x1FA\x04ction List")
        # (Line 116) f.stb.printAt(3, "　　　\x18O \x04천의무봉 \x19[ 5초 전의 장소로 이동 ] \x053분");
        f.stb.printAt(3, "　　　\x18O \x04천의무봉 \x19[ 5초 전의 장소로 이동 ] \x053분")
        # (Line 117) f.stb.printAt(4, "　　　\x18AO \x04킬러 \x04 \x19[ 영구 각성 / 자리고정 / 30초 ]");
        f.stb.printAt(4, "　　　\x18AO \x04킬러 \x04 \x19[ 영구 각성 / 자리고정 / 30초 ]")
        # (Line 118) f.stb.printAt(5, "　　　\x04\x1FSSS + CC + AA \x04꿈 \x19[ 공성 / CC - 자리고정 ]");
        f.stb.printAt(5, "　　　\x04\x1FSSS + CC + AA \x04꿈 \x19[ 공성 / CC - 자리고정 ]")
        # (Line 119) f.stb.printAt(6, "　　　\x04\x1FCC + A + CC + AA \x04실의 \x19[ 공성 / 자리고정 / 각성시 사용 가능 ]");
        f.stb.printAt(6, "　　　\x04\x1FCC + A + CC + AA \x04실의 \x19[ 공성 / 자리고정 / 각성시 사용 가능 ]")
        # (Line 120) f.stb.printAt(7, "　　　\x04\x1FAA \x04전투술 \x19[ 대인 / 순간딜 / 각성시 사용 가능 ]");
        f.stb.printAt(7, "　　　\x04\x1FAA \x04전투술 \x19[ 대인 / 순간딜 / 각성시 사용 가능 ]")
        # (Line 121) f.stb.printAt(8, "　　　\x08ACCC \x04절규 \x19[ 공성 / 자리고정 ] \x05", f.UltimateA[cp]);
        f.stb.printAt(8, "　　　\x08ACCC \x04절규 \x19[ 공성 / 자리고정 ] \x05", f.UltimateA[cp])
        # (Line 122) f.stb.printAt(9, "　　　\x08 + AA \x04절망 \x19[ 공성 / 선딜 10초 / 선딜 후 자리고정 ] \x05", f.UltimateB[cp]);
        f.stb.printAt(9, "　　　\x08 + AA \x04절망 \x19[ 공성 / 선딜 10초 / 선딜 후 자리고정 ] \x05", f.UltimateB[cp])
        # (Line 123) f.stb.printAt(10, "\n");
        f.stb.printAt(10, "\n")
        # (Line 124) PlayWAV("sound\\Bullet\\LaserHit.wav");
        # (Line 125) }
        DoActions(PlayWAV("sound\\Bullet\\LaserHit.wav"))
        # (Line 126) }
    EUDEndIf()
