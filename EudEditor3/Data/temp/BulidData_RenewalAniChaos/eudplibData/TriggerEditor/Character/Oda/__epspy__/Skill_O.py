## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Function as f;
import Function as f
# (Line 3) const posX = PVariable();
posX = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 5) const posY = PVariable();
posY = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 7) var max_n = 5;
max_n = EUDCreateVariables(1)
_IGVA([max_n], lambda: [5])
# (Line 9) function savePosRoutine(cp)
# (Line 10) {
@EUDFunc
def f_savePosRoutine(cp):
    # (Line 11) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
    # (Line 13) for (var i = 5; i > 0; i--)
    DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
    i = EUDVariable()
    i << (5)
    if EUDWhile()(i <= 0, neg=True):
        def _t2():
            i.__isub__(1)
        # (Line 14) {
        # (Line 15) posX[i] = posX[i - 1];
        _ARRW(posX, i) << (posX[i - 1])
        # (Line 16) posY[i] = posY[i - 1];
        _ARRW(posY, i) << (posY[i - 1])
        # (Line 17) }
        # (Line 19) const location = EPD(0x58DC4C) + f.location[cp] * 5;
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    location = EPD(0x58DC4C) + f.location[cp] * 5
    # (Line 21) posX[0] = dwread_epd(location + 1);
    _ARRW(posX, 0) << (f_dwread_epd(location + 1))
    # (Line 22) posY[0] = dwread_epd(location + 2);
    _ARRW(posY, 0) << (f_dwread_epd(location + 2))
    # (Line 23) }
    # (Line 25) function main(cp)

# (Line 26) {
@EUDFunc
def f_main(cp):
    # (Line 27) if (f.delay[cp] == 0)
    if EUDIf()(f.delay[cp] == 0):
        # (Line 28) {
        # (Line 29) if (f.count[cp] == 0)
        if EUDIf()(f.count[cp] == 0):
            # (Line 30) {
            # (Line 31) if (f.loop[cp] == 0)
            if EUDIf()(f.loop[cp] == 0):
                # (Line 32) {
                # (Line 33) SetSwitch("Recall - Oda", Set);
                # (Line 34) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
                DoActions(SetSwitch("Recall - Oda", Set))
                # (Line 35) }
                DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
                # (Line 37) if (f.loop[cp] == 1)
            EUDEndIf()
            if EUDIf()(f.loop[cp] == 1):
                # (Line 38) {
                # (Line 39) f.MoveLoc(f.heroID[cp], cp, posX[max_n] + 32, posY[max_n] + 32);
                f.MoveLoc(f.heroID[cp], cp, posX[max_n] + 32, posY[max_n] + 32)
                # (Line 41) MoveUnit(All, f.heroID[cp], cp, "Anywhere", f.location[cp]);
                # (Line 42) CenterView(f.location[cp]);
                DoActions(MoveUnit(All, f.heroID[cp], cp, "Anywhere", f.location[cp]))
                # (Line 43) }
                DoActions(CenterView(f.location[cp]))
                # (Line 45) f.SkillWait(cp, 80);
            EUDEndIf()
            f.SkillWait(cp, 80)
            # (Line 47) f.loop[cp] += 1;
            _ARRW(f.loop, cp).__iadd__(1)
            # (Line 49) if (f.loop[cp] == 2)
            if EUDIf()(f.loop[cp] == 2):
                # (Line 50) {
                # (Line 51) f.count[cp] += 1;
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 52) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 53) }
                # (Line 54) }
            EUDEndIf()
            # (Line 55) else if (f.count[cp] == 1)
        if EUDElseIf()(f.count[cp] == 1):
            # (Line 56) {
            # (Line 57) SetSwitch("Recall - Oda", Clear);
            # (Line 58) SetDeaths(cp, SetTo, 2160, " `UniqueCoolTime");
            DoActions(SetSwitch("Recall - Oda", Clear))
            # (Line 59) f.SkillEnd(cp);
            DoActions(SetDeaths(cp, SetTo, 2160, " `UniqueCoolTime"))
            f.SkillEnd(cp)
            # (Line 60) }
            # (Line 61) }
        EUDEndIf()
        # (Line 62) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
    EUDEndIf()
    # (Line 64) }
    DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
