## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Function as f;
import Function as f
# (Line 3) function main(cp)
# (Line 4) {
@EUDFunc
def f_main(cp):
    # (Line 5) if (f.delay[cp] == 0)
    if EUDIf()(f.delay[cp] == 0):
        # (Line 6) {
        # (Line 7) if (f.count[cp] == 0)
        if EUDIf()(f.count[cp] == 0):
            # (Line 8) {
            # (Line 9) f.DotShape(cp, 1, "50 + 1n Tank", 112, -48);
            f.DotShape(cp, 1, "50 + 1n Tank", 112, -48)
            # (Line 10) f.DotShape(cp, 1, "50 + 1n Tank", -112, -48);
            f.DotShape(cp, 1, "50 + 1n Tank", -112, -48)
            # (Line 11) f.DotShape(cp, 1, "50 + 1n Tank", -48, -144);
            f.DotShape(cp, 1, "50 + 1n Tank", -48, -144)
            # (Line 12) f.DotShape(cp, 1, "50 + 1n Tank", 48, -144);
            f.DotShape(cp, 1, "50 + 1n Tank", 48, -144)
            # (Line 14) f.SquareShape(cp, 1, "50 + 1n Tank", 16, 16);
            f.SquareShape(cp, 1, "50 + 1n Tank", 16, 16)
            # (Line 16) f.DotShape(cp, 1, "50 + 1n Tank", -48, 16);
            f.DotShape(cp, 1, "50 + 1n Tank", -48, 16)
            # (Line 17) f.DotShape(cp, 1, "50 + 1n Tank", 48, 16);
            f.DotShape(cp, 1, "50 + 1n Tank", 48, 16)
            # (Line 18) f.DotShape(cp, 1, "50 + 1n Tank", -16, 48);
            f.DotShape(cp, 1, "50 + 1n Tank", -16, 48)
            # (Line 19) f.DotShape(cp, 1, "50 + 1n Tank", 16, -48);
            f.DotShape(cp, 1, "50 + 1n Tank", 16, -48)
            # (Line 21) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
            # (Line 22) Order("50 + 1n Tank", cp, "Anywhere", Attack, f.location[cp]);
            DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
            # (Line 24) f.SkillWait(cp, 0);
            DoActions(Order("50 + 1n Tank", cp, "Anywhere", Attack, f.location[cp]))
            f.SkillWait(cp, 0)
            # (Line 25) f.count[cp] += 1;
            _ARRW(f.count, cp).__iadd__(1)
            # (Line 26) }
            # (Line 27) else if (f.count[cp] >= 1 && f.count[cp] <= 18)
        if EUDElseIf()(EUDSCAnd()(f.count[cp] >= 1)(f.count[cp] <= 18)()):
            # (Line 28) {
            # (Line 29) f.DotShape(cp, 1, "Zerg Devourer", -32, -160);
            f.DotShape(cp, 1, "Zerg Devourer", -32, -160)
            # (Line 30) f.DotShape(cp, 1, "Zerg Devourer", 0, -160);
            f.DotShape(cp, 1, "Zerg Devourer", 0, -160)
            # (Line 31) f.DotShape(cp, 1, "Zerg Devourer", 32, -160);
            f.DotShape(cp, 1, "Zerg Devourer", 32, -160)
            # (Line 32) f.DotShape(cp, 1, "Zerg Devourer", -32, -128);
            f.DotShape(cp, 1, "Zerg Devourer", -32, -128)
            # (Line 33) f.DotShape(cp, 1, "Zerg Devourer", 0, -128);
            f.DotShape(cp, 1, "Zerg Devourer", 0, -128)
            # (Line 34) f.DotShape(cp, 1, "Zerg Devourer", 32, -128);
            f.DotShape(cp, 1, "Zerg Devourer", 32, -128)
            # (Line 36) f.DotShape(cp, 1, "Zerg Devourer", -128, -96);
            f.DotShape(cp, 1, "Zerg Devourer", -128, -96)
            # (Line 37) f.DotShape(cp, 1, "Zerg Devourer", -96, -96);
            f.DotShape(cp, 1, "Zerg Devourer", -96, -96)
            # (Line 38) f.DotShape(cp, 1, "Zerg Devourer", -128, -64);
            f.DotShape(cp, 1, "Zerg Devourer", -128, -64)
            # (Line 39) f.DotShape(cp, 1, "Zerg Devourer", -96, -64);
            f.DotShape(cp, 1, "Zerg Devourer", -96, -64)
            # (Line 41) f.DotShape(cp, 1, "Zerg Devourer", 128, -96);
            f.DotShape(cp, 1, "Zerg Devourer", 128, -96)
            # (Line 42) f.DotShape(cp, 1, "Zerg Devourer", 96, -96);
            f.DotShape(cp, 1, "Zerg Devourer", 96, -96)
            # (Line 43) f.DotShape(cp, 1, "Zerg Devourer", 128, -64);
            f.DotShape(cp, 1, "Zerg Devourer", 128, -64)
            # (Line 44) f.DotShape(cp, 1, "Zerg Devourer", 96, -64);
            f.DotShape(cp, 1, "Zerg Devourer", 96, -64)
            # (Line 46) f.DotShape(cp, 1, "Zerg Devourer", 0, -64);
            f.DotShape(cp, 1, "Zerg Devourer", 0, -64)
            # (Line 47) f.DotShape(cp, 1, "Zerg Devourer", 0, 64);
            f.DotShape(cp, 1, "Zerg Devourer", 0, 64)
            # (Line 48) f.DotShape(cp, 1, "Zerg Devourer", -32, 64);
            f.DotShape(cp, 1, "Zerg Devourer", -32, 64)
            # (Line 49) f.DotShape(cp, 1, "Zerg Devourer", 32, 64);
            f.DotShape(cp, 1, "Zerg Devourer", 32, 64)
            # (Line 51) f.DotShape(cp, 1, "Zerg Devourer", 64, 0);
            f.DotShape(cp, 1, "Zerg Devourer", 64, 0)
            # (Line 52) f.DotShape(cp, 1, "Zerg Devourer", 64, 32);
            f.DotShape(cp, 1, "Zerg Devourer", 64, 32)
            # (Line 53) f.DotShape(cp, 1, "Zerg Devourer", -64, 0);
            f.DotShape(cp, 1, "Zerg Devourer", -64, 0)
            # (Line 54) f.DotShape(cp, 1, "Zerg Devourer", -64, 32);
            f.DotShape(cp, 1, "Zerg Devourer", -64, 32)
            # (Line 56) f.NxNSquareShape(cp, 1, "Zerg Devourer", 3, 32);
            f.NxNSquareShape(cp, 1, "Zerg Devourer", 3, 32)
            # (Line 58) KillUnitAt(All, "Zerg Devourer", "Anywhere", cp);
            # (Line 60) f.SkillWait(cp, 0);
            DoActions(KillUnitAt(All, "Zerg Devourer", "Anywhere", cp))
            f.SkillWait(cp, 0)
            # (Line 61) f.count[cp] += 1;
            _ARRW(f.count, cp).__iadd__(1)
            # (Line 62) }
            # (Line 63) else if (f.count[cp] == 19)
        if EUDElseIf()(f.count[cp] == 19):
            # (Line 64) {
            # (Line 65) KillUnitAt(All, "50 + 1n Tank", "Anywhere", cp);
            # (Line 66) f.DotShape(cp, 1, "60 + 1n Danimoth", 112, -48);
            DoActions(KillUnitAt(All, "50 + 1n Tank", "Anywhere", cp))
            f.DotShape(cp, 1, "60 + 1n Danimoth", 112, -48)
            # (Line 67) f.DotShape(cp, 1, "60 + 1n Danimoth", -112, -48);
            f.DotShape(cp, 1, "60 + 1n Danimoth", -112, -48)
            # (Line 68) f.DotShape(cp, 1, "60 + 1n Danimoth", -48, -144);
            f.DotShape(cp, 1, "60 + 1n Danimoth", -48, -144)
            # (Line 69) f.DotShape(cp, 1, "60 + 1n Danimoth", 48, -144);
            f.DotShape(cp, 1, "60 + 1n Danimoth", 48, -144)
            # (Line 71) f.SquareShape(cp, 1, "60 + 1n Danimoth", 16, 16);
            f.SquareShape(cp, 1, "60 + 1n Danimoth", 16, 16)
            # (Line 73) f.DotShape(cp, 1, "60 + 1n Danimoth", -48, 16);
            f.DotShape(cp, 1, "60 + 1n Danimoth", -48, 16)
            # (Line 74) f.DotShape(cp, 1, "60 + 1n Danimoth", 48, 16);
            f.DotShape(cp, 1, "60 + 1n Danimoth", 48, 16)
            # (Line 75) f.DotShape(cp, 1, "60 + 1n Danimoth", -16, 48);
            f.DotShape(cp, 1, "60 + 1n Danimoth", -16, 48)
            # (Line 76) f.DotShape(cp, 1, "60 + 1n Danimoth", 16, -48);
            f.DotShape(cp, 1, "60 + 1n Danimoth", 16, -48)
            # (Line 78) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
            # (Line 79) Order("60 + 1n Danimoth", cp, "Anywhere", Attack, f.location[cp]);
            DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
            # (Line 81) f.SkillWait(cp, 130);
            DoActions(Order("60 + 1n Danimoth", cp, "Anywhere", Attack, f.location[cp]))
            f.SkillWait(cp, 130)
            # (Line 82) f.count[cp] += 1;
            _ARRW(f.count, cp).__iadd__(1)
            # (Line 83) }
            # (Line 84) else if (f.count[cp] == 20)
        if EUDElseIf()(f.count[cp] == 20):
            # (Line 85) {
            # (Line 86) RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp);
            # (Line 87) f.SkillEnd(cp);
            DoActions(RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp))
            f.SkillEnd(cp)
            # (Line 88) }
            # (Line 89) }
        EUDEndIf()
        # (Line 90) }
    EUDEndIf()
