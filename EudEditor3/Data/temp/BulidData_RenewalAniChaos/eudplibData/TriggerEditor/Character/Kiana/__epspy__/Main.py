## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Function as f;
import Function as f
# (Line 4) import Character.Kiana.Skill_S as S;
from Character.Kiana import Skill_S as S
# (Line 5) import Character.Kiana.Skill_C as C;
from Character.Kiana import Skill_C as C
# (Line 8) import Character.Kiana.Text as text;
from Character.Kiana import Text as text
# (Line 9) import Character.Kiana.Commend as commend;
from Character.Kiana import Commend as commend
# (Line 11) const stb = StringBuffer();
stb = _CGFW(lambda: [StringBuffer()], 1)[0]
# (Line 13) function SkillList(cp);
# (Line 15) function main(cp)
# (Line 16) {
@EUDFunc
def f_main(cp):
    # (Line 17) f.location[cp] = 170;
    _ARRW(f.location, cp) << (170)
    # (Line 18) f.heroID[cp] = 77;
    _ARRW(f.heroID, cp) << (77)
    # (Line 20) f.UltimateA[cp] = 700;
    _ARRW(f.UltimateA, cp) << (700)
    # (Line 21) f.UltimateB[cp] = 700;
    _ARRW(f.UltimateB, cp) << (700)
    # (Line 24) commend.main(cp);
    commend.f_main(cp)
    # (Line 25) SkillList(cp);
    SkillList(cp)
    # (Line 27) if (f.wait[cp] == 0)
    if EUDIf()(f.wait[cp] == 0):
        # (Line 28) {
        # (Line 29) switch(f.step[cp])
        EUDSwitch(f.step[cp])
        # (Line 30) {
        # (Line 31) case 1:
        _t2 = EUDSwitchCase()
        # (Line 33) break;
        if _t2(1):
            EUDBreak()
            # (Line 34) case 100:
        _t3 = EUDSwitchCase()
        # (Line 35) S.main(cp);
        if _t3(100):
            S.f_main(cp)
            # (Line 36) break;
            EUDBreak()
            # (Line 37) case 200:
        _t4 = EUDSwitchCase()
        # (Line 38) C.main(cp);
        if _t4(200):
            C.f_main(cp)
            # (Line 39) break;
            EUDBreak()
            # (Line 40) case 300:
        _t5 = EUDSwitchCase()
        # (Line 42) break;
        if _t5(300):
            EUDBreak()
            # (Line 43) }
        # (Line 44) }
        EUDEndSwitch()
        # (Line 46) }
    EUDEndIf()
    # (Line 49) function SkillVoice(cp)

# (Line 50) {
@EUDFunc
def SkillVoice(cp):
    # (Line 51) if (f.Kiana_Voice[cp] != 0) { text.main(cp); }
    if EUDIf()(f.Kiana_Voice[cp] == 0, neg=True):
        text.f_main(cp)
        # (Line 52) }
    EUDEndIf()
    # (Line 54) function SkillList(cp)

# (Line 55) {
@EUDFunc
def SkillList(cp):
    # (Line 56) if(Deaths(cp, Exactly, 2, "Terran SCV")) 	// Insert key Pressed
    if EUDIf()(Deaths(cp, Exactly, 2, "Terran SCV")):
        # (Line 57) {
        # (Line 58) stb.printAt(0, "\n");
        stb.printAt(0, "\n")
        # (Line 59) stb.printAt(1, "\x1F　＃\x04- \x17키아나 카스라나　\x04[ 붕괴3 ]");
        stb.printAt(1, "\x1F　＃\x04- \x17키아나 카스라나　\x04[ 붕괴3 ]")
        # (Line 60) stb.printAt(2, "　　\x1FA\x04ction List");
        stb.printAt(2, "　　\x1FA\x04ction List")
        # (Line 61) stb.printAt(3, "　　　\x18 O \x04  \x19[  ] \x053분");
        stb.printAt(3, "　　　\x18 O \x04  \x19[  ] \x053분")
        # (Line 62) stb.printAt(4, "　　　\x1F SSS \x04 네코참! \x19[ 공성 ]");
        stb.printAt(4, "　　　\x1F SSS \x04 네코참! \x19[ 공성 ]")
        # (Line 63) stb.printAt(5, "　　　\x1F ??? \x04  \x19[  ]");
        stb.printAt(5, "　　　\x1F ??? \x04  \x19[  ]")
        # (Line 64) stb.printAt(6, "\n");
        stb.printAt(6, "\n")
        # (Line 65) stb.printAt(7, "　　　\x08AAAA \x04 \x19[  ] \x05", f.UltimateA[cp]);
        stb.printAt(7, "　　　\x08AAAA \x04 \x19[  ] \x05", f.UltimateA[cp])
        # (Line 66) stb.printAt(8, "\n");
        stb.printAt(8, "\n")
        # (Line 67) stb.printAt(9, "\n");
        stb.printAt(9, "\n")
        # (Line 68) PlayWAV("sound\\Bullet\\LaserHit.wav");
        # (Line 69) }
        DoActions(PlayWAV("sound\\Bullet\\LaserHit.wav"))
        # (Line 70) }
    EUDEndIf()
