## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Function as f;
import Function as f
# (Line 3) function main(cp)
# (Line 4) {
@EUDFunc
def f_main(cp):
    # (Line 5) f.HoldPosition(cp);
    f.HoldPosition(cp)
    # (Line 6) MoveLocation("23.Mayuri_Bozo", f.heroID[cp], cp, "Anywhere");
    # (Line 7) MoveUnit(All, "50 + 1n Battlecruiser", cp, "Anywhere", "[Skill]HoldPosition");
    DoActions(MoveLocation("23.Mayuri_Bozo", f.heroID[cp], cp, "Anywhere"))
    # (Line 8) ModifyUnitShields(All, f.heroID[cp], cp, "Anywhere", 1);
    DoActions(MoveUnit(All, "50 + 1n Battlecruiser", cp, "Anywhere", "[Skill]HoldPosition"))
    # (Line 10) if (f.delay[cp] == 0)
    DoActions(ModifyUnitShields(All, f.heroID[cp], cp, "Anywhere", 1))
    if EUDIf()(f.delay[cp] == 0):
        # (Line 11) {
        # (Line 12) if (f.count[cp] == 0)
        if EUDIf()(f.count[cp] == 0):
            # (Line 13) {
            # (Line 14) if (f.loop[cp] < 12)
            if EUDIf()(f.loop[cp] >= 12, neg=True):
                # (Line 15) {
                # (Line 16) SetDeaths(cp, SetTo, 1, " `ShieldRecharge");
                # (Line 18) GiveUnits(All, "60 + 3n Siege", P9, "Anywhere", cp);
                DoActions(SetDeaths(cp, SetTo, 1, " `ShieldRecharge"))
                # (Line 19) SetSwitch("Recall - Mayuri", Set);
                DoActions(GiveUnits(All, "60 + 3n Siege", P9, "Anywhere", cp))
                # (Line 21) KillUnitAt(10, "50 + 1n Battlecruiser", "Anywhere", cp);
                DoActions(SetSwitch("Recall - Mayuri", Set))
                # (Line 23) f.SkillWait(cp, 80);
                DoActions(KillUnitAt(10, "50 + 1n Battlecruiser", "Anywhere", cp))
                f.SkillWait(cp, 80)
                # (Line 25) f.loop[cp] += 1;
                _ARRW(f.loop, cp).__iadd__(1)
                # (Line 26) }
                # (Line 27) else if (f.loop[cp] == 12)
            if EUDElseIf()(f.loop[cp] == 12):
                # (Line 28) {
                # (Line 29) f.Voice_Routine(cp, 14);
                f.Voice_Routine(cp, 14)
                # (Line 31) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp);
                # (Line 33) f.SkillWait(cp, 80);
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp))
                f.SkillWait(cp, 80)
                # (Line 35) f.count[cp] += 1;
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 36) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 37) }
                # (Line 38) }
            EUDEndIf()
            # (Line 39) else if (f.count[cp] == 1)
        if EUDElseIf()(f.count[cp] == 1):
            # (Line 40) {
            # (Line 41) if (f.loop[cp] < 36)
            if EUDIf()(f.loop[cp] >= 36, neg=True):
                # (Line 42) {
                # (Line 43) KillUnitAt(All, " Creep. Dunkelheit", "Anywhere", cp);
                # (Line 45) f.NxNSquareShape(cp, 1, " Creep. Dunkelheit", 7, 75);
                DoActions(KillUnitAt(All, " Creep. Dunkelheit", "Anywhere", cp))
                f.NxNSquareShape(cp, 1, " Creep. Dunkelheit", 7, 75)
                # (Line 47) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
                # (Line 48) MoveUnit(All, " Creep. Dunkelheit", cp, "[Skill]Unit_Wait_ALL", f.location[cp]);
                DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
                # (Line 49) Order(" Creep. Dunkelheit", cp, "Anywhere", Attack, f.location[cp]);
                DoActions(MoveUnit(All, " Creep. Dunkelheit", cp, "[Skill]Unit_Wait_ALL", f.location[cp]))
                # (Line 51) f.SkillWait(cp, 80);
                DoActions(Order(" Creep. Dunkelheit", cp, "Anywhere", Attack, f.location[cp]))
                f.SkillWait(cp, 80)
                # (Line 53) f.loop[cp] += 1;
                _ARRW(f.loop, cp).__iadd__(1)
                # (Line 54) }
                # (Line 55) else if (f.loop[cp] == 36)
            if EUDElseIf()(f.loop[cp] == 36):
                # (Line 56) {
                # (Line 57) KillUnitAt(All, " Creep. Dunkelheit", "Anywhere", cp);
                # (Line 58) KillUnitAt(All, "60 + 3n Siege", "Anywhere", cp);
                DoActions(KillUnitAt(All, " Creep. Dunkelheit", "Anywhere", cp))
                # (Line 60) f.SkillWait(cp, 80);
                DoActions(KillUnitAt(All, "60 + 3n Siege", "Anywhere", cp))
                f.SkillWait(cp, 80)
                # (Line 62) f.count[cp] += 1;
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 63) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 64) }
                # (Line 65) }
            EUDEndIf()
            # (Line 66) else if (f.count[cp] == 2)
        if EUDElseIf()(f.count[cp] == 2):
            # (Line 67) {
            # (Line 68) SetDeaths(cp, SetTo, 0, " `ShieldRecharge");
            # (Line 69) SetSwitch("Recall - Mayuri", Clear);
            DoActions(SetDeaths(cp, SetTo, 0, " `ShieldRecharge"))
            # (Line 70) SetSwitch("UiltimateSwitch", Clear);
            DoActions(SetSwitch("Recall - Mayuri", Clear))
            # (Line 71) f.SkillEnd(cp);
            DoActions(SetSwitch("UiltimateSwitch", Clear))
            f.SkillEnd(cp)
            # (Line 72) }
            # (Line 73) }
        EUDEndIf()
        # (Line 74) }
    EUDEndIf()
