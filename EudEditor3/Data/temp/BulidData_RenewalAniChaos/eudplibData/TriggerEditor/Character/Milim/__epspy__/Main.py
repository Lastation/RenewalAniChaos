## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import Function as f;
import Function as f
# (Line 4) import Character.Milim.Skill_O as O;
from Character.Milim import Skill_O as O
# (Line 5) import Character.Milim.Skill_S as S;
from Character.Milim import Skill_S as S
# (Line 6) import Character.Milim.Skill_C as C;
from Character.Milim import Skill_C as C
# (Line 7) import Character.Milim.Skill_A as A;
from Character.Milim import Skill_A as A
# (Line 9) import Character.Milim.Skill_SSS as SSS;
from Character.Milim import Skill_SSS as SSS
# (Line 10) import Character.Milim.Skill_CCAA as CCAA;
from Character.Milim import Skill_CCAA as CCAA
# (Line 11) import Character.Milim.Skill_CCC as CCC;
from Character.Milim import Skill_CCC as CCC
# (Line 12) import Character.Milim.Skill_AAAA as AAAA;
from Character.Milim import Skill_AAAA as AAAA
# (Line 14) import Character.Milim.Text as text;
from Character.Milim import Text as text
# (Line 15) import Character.Milim.Commend as commend;
from Character.Milim import Commend as commend
# (Line 17) function SkillList(cp);
# (Line 19) function main(cp)
# (Line 20) {
@EUDFunc
def f_main(cp):
    # (Line 21) f.location[cp] = 188;
    _ARRW(f.location, cp) << (188)
    # (Line 22) f.heroID[cp] = 54;
    _ARRW(f.heroID, cp) << (54)
    # (Line 24) f.UltimateA[cp] = 650;
    _ARRW(f.UltimateA, cp) << (650)
    # (Line 26) SkillList(cp);
    SkillList(cp)
    # (Line 27) commend.main(cp);
    commend.f_main(cp)
    # (Line 29) if (f.wait[cp] == 0)
    if EUDIf()(f.wait[cp] == 0):
        # (Line 30) {
        # (Line 31) switch(f.step[cp])
        EUDSwitch(f.step[cp])
        # (Line 32) {
        # (Line 33) case 1:
        _t2 = EUDSwitchCase()
        # (Line 34) O.main(cp);
        if _t2(1):
            O.f_main(cp)
            # (Line 35) break;
            EUDBreak()
            # (Line 36) case 100:
        _t3 = EUDSwitchCase()
        # (Line 37) S.main(cp);
        if _t3(100):
            S.f_main(cp)
            # (Line 38) break;
            EUDBreak()
            # (Line 39) case 200:
        _t4 = EUDSwitchCase()
        # (Line 40) C.main(cp);
        if _t4(200):
            C.f_main(cp)
            # (Line 41) break;
            EUDBreak()
            # (Line 42) case 300:
        _t5 = EUDSwitchCase()
        # (Line 43) A.main(cp);
        if _t5(300):
            A.f_main(cp)
            # (Line 44) break;
            EUDBreak()
            # (Line 45) case 110:
        _t6 = EUDSwitchCase()
        # (Line 46) SSS.main(cp);
        if _t6(110):
            SSS.f_main(cp)
            # (Line 47) break;
            EUDBreak()
            # (Line 48) case 210:
        _t7 = EUDSwitchCase()
        # (Line 49) CCAA.main(cp);
        if _t7(210):
            CCAA.f_main(cp)
            # (Line 50) break;
            EUDBreak()
            # (Line 51) case 220:
        _t8 = EUDSwitchCase()
        # (Line 52) CCC.main(cp);
        if _t8(220):
            CCC.f_main(cp)
            # (Line 53) break;
            EUDBreak()
            # (Line 54) case 310:
        _t9 = EUDSwitchCase()
        # (Line 55) AAAA.main(cp);
        if _t9(310):
            AAAA.f_main(cp)
            # (Line 56) break;
            EUDBreak()
            # (Line 58) }
        # (Line 59) }
        EUDEndSwitch()
        # (Line 63) }
    EUDEndIf()
    # (Line 66) function SkillVoice(cp)

# (Line 67) {
@EUDFunc
def SkillVoice(cp):
    # (Line 68) if (f.Milim_Voice[cp] != 0) { text.main(cp); }
    if EUDIf()(f.Milim_Voice[cp] == 0, neg=True):
        text.f_main(cp)
        # (Line 69) }
    EUDEndIf()
    # (Line 71) function SkillList(cp)

# (Line 72) {
@EUDFunc
def SkillList(cp):
    # (Line 73) if(Memory(0x00596A44, Exactly, 256)) 	// Insert key Pressed
    if EUDIf()(Memory(0x00596A44, Exactly, 256)):
        # (Line 74) {
        # (Line 75) f.stb.printAt(0, "\n");
        f.stb.printAt(0, "\n")
        # (Line 76) f.stb.printAt(1, "\x1F　＃\x1B- 밀림 나바　\x04[ 전생했더니 슬라임이었던 건에 대하여 ]");
        f.stb.printAt(1, "\x1F　＃\x1B- 밀림 나바　\x04[ 전생했더니 슬라임이었던 건에 대하여 ]")
        # (Line 77) f.stb.printAt(2, "　　\x1FA\x04ction List");
        f.stb.printAt(2, "　　\x1FA\x04ction List")
        # (Line 78) f.stb.printAt(3, "　　　\x18O \x04파괴의 폭군 \x19[ 순간딜 / 상대 건물에 닿을 때까지 일직선 대시 / 일반기 자리고정 해제 1분 ] \x054분");
        f.stb.printAt(3, "　　　\x18O \x04파괴의 폭군 \x19[ 순간딜 / 상대 건물에 닿을 때까지 일직선 대시 / 일반기 자리고정 해제 1분 ] \x054분")
        # (Line 79) f.stb.printAt(4, "　　　\x04\x1FSSS \x04즐거움 \x19[ 만능 ]");
        f.stb.printAt(4, "　　　\x04\x1FSSS \x04즐거움 \x19[ 만능 ]")
        # (Line 80) f.stb.printAt(5, "　　　\x04\x1FCCC \x04여유 \x19[ 공성 / 자리고정 ]");
        f.stb.printAt(5, "　　　\x04\x1FCCC \x04여유 \x19[ 공성 / 자리고정 ]")
        # (Line 81) f.stb.printAt(6, "　　　\x04\x1FCCAA \x04나의 차례! \x19[ 공성 / 자리고정 ]");
        f.stb.printAt(6, "　　　\x04\x1FCCAA \x04나의 차례! \x19[ 공성 / 자리고정 ]")
        # (Line 82) f.stb.printAt(7, "\n");
        f.stb.printAt(7, "\n")
        # (Line 83) f.stb.printAt(8, "　　　\x08AAAA \x04드래곤 버스트 \x19[ 공성 / 선딜 7초 / 자리고정 ] \x05", f.UltimateA[cp]);
        f.stb.printAt(8, "　　　\x08AAAA \x04드래곤 버스트 \x19[ 공성 / 선딜 7초 / 자리고정 ] \x05", f.UltimateA[cp])
        # (Line 84) f.stb.printAt(9, "\n");
        f.stb.printAt(9, "\n")
        # (Line 85) PlayWAV("sound\\Bullet\\LaserHit.wav");
        # (Line 86) }
        DoActions(PlayWAV("sound\\Bullet\\LaserHit.wav"))
        # (Line 87) }
    EUDEndIf()
