## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import Function as f;
import Function as f
# (Line 4) function main(cp)
# (Line 5) {
@EUDFunc
def f_main(cp):
    # (Line 6) if (f.delay[cp] == 0)
    if EUDIf()(f.delay[cp] == 0):
        # (Line 7) {
        # (Line 8) if (f.count[cp] == 0)
        if EUDIf()(f.count[cp] == 0):
            # (Line 9) {
            # (Line 10) if (f.loop[cp] < 8)
            if EUDIf()(f.loop[cp] >= 8, neg=True):
                # (Line 11) {
                # (Line 12) RemoveUnitAt(All, "40 + 1n Mojo", "Anywhere", cp);
                # (Line 14) var d = 100 - 8 * f.loop[cp];
                DoActions(RemoveUnitAt(All, "40 + 1n Mojo", "Anywhere", cp))
                d = EUDVariable()
                d << (100 - 8 * f.loop[cp])
                # (Line 16) f.DoubleShape(cp, 1, "60 + 1n Danimoth", d + 50, 0);
                f.DoubleShape(cp, 1, "60 + 1n Danimoth", d + 50, 0)
                # (Line 17) f.DoubleShapeWithProperty(cp, 1, "60 + 1n Archon", d + 50, 0, 1);
                f.DoubleShapeWithProperty(cp, 1, "60 + 1n Archon", d + 50, 0, 1)
                # (Line 18) f.DoubleShape(cp, 1, "40 + 1n Mojo", d, 0);
                f.DoubleShape(cp, 1, "40 + 1n Mojo", d, 0)
                # (Line 19) f.DoubleShape(cp, 1, "60 + 1n High Templar", d, 0);
                f.DoubleShape(cp, 1, "60 + 1n High Templar", d, 0)
                # (Line 20) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", cp);
                # (Line 21) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp);
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", cp))
                # (Line 22) KillUnitAt(All, "60 + 1n Archon", "Anywhere", cp);
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp))
                # (Line 24) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", cp))
                # (Line 25) Order("40 + 1n Mojo", cp, "Anywhere", Attack, f.location[cp]);
                DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
                # (Line 26) }
                DoActions(Order("40 + 1n Mojo", cp, "Anywhere", Attack, f.location[cp]))
                # (Line 28) f.SkillWait(cp, 80);
            EUDEndIf()
            f.SkillWait(cp, 80)
            # (Line 30) f.loop[cp] += 1;
            _ARRW(f.loop, cp).__iadd__(1)
            # (Line 32) if (f.loop[cp] == 8)
            if EUDIf()(f.loop[cp] == 8):
                # (Line 33) {
                # (Line 34) f.count[cp] += 1;
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 35) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 36) }
                # (Line 37) }
            EUDEndIf()
            # (Line 38) else if (f.count[cp] == 1)
        if EUDElseIf()(f.count[cp] == 1):
            # (Line 39) {
            # (Line 40) RemoveUnitAt(All, "40 + 1n Mojo", "Anywhere", cp);
            # (Line 42) f.SkillEnd(cp);
            DoActions(RemoveUnitAt(All, "40 + 1n Mojo", "Anywhere", cp))
            f.SkillEnd(cp)
            # (Line 43) }
            # (Line 44) }
        EUDEndIf()
        # (Line 45) }
    EUDEndIf()
