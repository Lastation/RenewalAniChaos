## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Function as f;
import Function as f
# (Line 2) import Status as s;
import Status as s
# (Line 4) var x = 0;
x = EUDCreateVariables(1)
_IGVA([x], lambda: [0])
# (Line 5) var y = 0;
y = EUDCreateVariables(1)
_IGVA([y], lambda: [0])
# (Line 7) var n = 0;
n = EUDCreateVariables(1)
_IGVA([n], lambda: [0])
# (Line 8) var max_loop = 0;
max_loop = EUDCreateVariables(1)
_IGVA([max_loop], lambda: [0])
# (Line 10) const offset = 32;
offset = _CGFW(lambda: [32], 1)[0]
# (Line 11) const unit = 32;
unit = _CGFW(lambda: [32], 1)[0]
# (Line 13) var max_i = 0;
max_i = EUDCreateVariables(1)
_IGVA([max_i], lambda: [0])
# (Line 15) var v = 0;
v = EUDCreateVariables(1)
_IGVA([v], lambda: [0])
# (Line 17) function main(cp)
# (Line 18) {
@EUDFunc
def f_main(cp):
    # (Line 19) f.BanReturn(cp);
    f.BanReturn(cp)
    # (Line 20) f.HoldPosition(cp);
    f.HoldPosition(cp)
    # (Line 22) if (cp < 3)
    if EUDIf()(cp >= 3, neg=True):
        # (Line 23) max_i = 6;
        max_i << (6)
        # (Line 24) else if (cp >= 3)
    if EUDElseIf()(cp >= 3):
        # (Line 25) max_i = 3;
        max_i << (3)
        # (Line 27) for (var i = max_i - 3; i < max_i; i++)
    EUDEndIf()
    i = EUDVariable()
    i << (max_i - 3)
    if EUDWhile()(i >= max_i, neg=True):
        def _t4():
            i.__iadd__(1)
        # (Line 28) {
        # (Line 29) if (Bring(i, AtLeast, 1, f.heroID[i], "29.Ekidona_Bozo"))
        if EUDIf()(Bring(i, AtLeast, 1, f.heroID[i], "29.Ekidona_Bozo")):
            # (Line 30) {
            # (Line 31) s.SetEkidonaDebuff(i, f.count[cp] + 1);
            s.SetEkidonaDebuff(i, f.count[cp] + 1)
            # (Line 32) }
            # (Line 33) }
        EUDEndIf()
        # (Line 35) if (f.delay[cp] == 0 && f.count[cp] < 10)
        EUDSetContinuePoint()
        _t4()
    EUDEndWhile()
    if EUDIf()(EUDSCAnd()(f.delay[cp] == 0)(f.count[cp] >= 10, neg=True)()):
        # (Line 36) {
        # (Line 37) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
        # (Line 39) if (f.loop[cp] == 0)
        DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
        if EUDIf()(f.loop[cp] == 0):
            # (Line 40) {
            # (Line 41) v++;
            v.__iadd__(1)
            # (Line 43) f.Voice_Routine(cp, 100 + v);
            f.Voice_Routine(cp, 100 + v)
            # (Line 45) if (f.count[cp] == 0)
            if EUDIf()(f.count[cp] == 0):
                # (Line 46) {
                # (Line 47) SetSwitch("Recall - Ekidona", Set);
                # (Line 48) }
                DoActions(SetSwitch("Recall - Ekidona", Set))
                # (Line 50) const location = EPD(0x58DC4C) + (f.location[cp]) * 5;
            EUDEndIf()
            location = EPD(0x58DC4C) + (f.location[cp]) * 5
            # (Line 51) const bozo_location = EPD(0x58DC4C) + 196 * 5;
            bozo_location = EPD(0x58DC4C) + 196 * 5
            # (Line 53) if (f.count[cp] == 0) { n = 20; max_loop = 225; }
            if EUDIf()(f.count[cp] == 0):
                n << (20)
                max_loop << (225)
                # (Line 54) if (f.count[cp] == 1) { n = 40; max_loop = 225; }
            EUDEndIf()
            if EUDIf()(f.count[cp] == 1):
                n << (40)
                max_loop << (225)
                # (Line 55) if (f.count[cp] == 2) { n = 60; max_loop = 305; }
            EUDEndIf()
            if EUDIf()(f.count[cp] == 2):
                n << (60)
                max_loop << (305)
                # (Line 56) if (f.count[cp] == 3) { n = 80; max_loop = 175; }
            EUDEndIf()
            if EUDIf()(f.count[cp] == 3):
                n << (80)
                max_loop << (175)
                # (Line 57) if (f.count[cp] == 4) { n = 100; max_loop = 235; }
            EUDEndIf()
            if EUDIf()(f.count[cp] == 4):
                n << (100)
                max_loop << (235)
                # (Line 58) if (f.count[cp] == 5) { n = 120; max_loop = 225; }
            EUDEndIf()
            if EUDIf()(f.count[cp] == 5):
                n << (120)
                max_loop << (225)
                # (Line 59) if (f.count[cp] == 6) { n = 140; max_loop = 145; }
            EUDEndIf()
            if EUDIf()(f.count[cp] == 6):
                n << (140)
                max_loop << (145)
                # (Line 61) x = n * unit - offset;
            EUDEndIf()
            x << (n * unit - offset)
            # (Line 62) y = n * unit - offset;
            y << (n * unit - offset)
            # (Line 64) dwwrite_epd(bozo_location + 0, dwread_epd(location + 0) - x <= 0 ? 0 : dwread_epd(location + 0) - x);
            f_dwwrite_epd(bozo_location + 0, EUDTernary(f_dwread_epd(location + 0) - x <= 0)(0)(f_dwread_epd(location + 0) - x))
            # (Line 65) dwwrite_epd(bozo_location + 2, dwread_epd(location + 2) + x >= 8192 ? 8192 : dwread_epd(location + 2) + x);
            f_dwwrite_epd(bozo_location + 2, EUDTernary(f_dwread_epd(location + 2) + x >= 8192)(8192)(f_dwread_epd(location + 2) + x))
            # (Line 66) dwwrite_epd(bozo_location + 1, dwread_epd(location + 1) - y <= 0 ? 0 : dwread_epd(location + 1) - y);
            f_dwwrite_epd(bozo_location + 1, EUDTernary(f_dwread_epd(location + 1) - y <= 0)(0)(f_dwread_epd(location + 1) - y))
            # (Line 67) dwwrite_epd(bozo_location + 3, dwread_epd(location + 3) + y >= 6146 ? 6146 : dwread_epd(location + 3) + y);
            f_dwwrite_epd(bozo_location + 3, EUDTernary(f_dwread_epd(location + 3) + y >= 6146)(6146)(f_dwread_epd(location + 3) + y))
            # (Line 69) RemoveUnitAt(All, "Flame Red", "Anywhere", cp);
            # (Line 71) f.EdgeShape(cp, 1, "Flame Red", 45, n / 2, 32 * n);
            DoActions(RemoveUnitAt(All, "Flame Red", "Anywhere", cp))
            f.EdgeShape(cp, 1, "Flame Red", 45, n // 2, 32 * n)
            # (Line 73) RemoveUnitAt(All, "Flame Red", "[Skill]Unit_Wait_ALL", cp);
            # (Line 74) }
            DoActions(RemoveUnitAt(All, "Flame Red", "[Skill]Unit_Wait_ALL", cp))
            # (Line 75) if (f.count[cp] > 0)
        EUDEndIf()
        if EUDIf()(f.count[cp] <= 0, neg=True):
            # (Line 76) {
            # (Line 77) f.DotShape(cp, 1, "40 + 1n Guardian", 0, 0);
            f.DotShape(cp, 1, "40 + 1n Guardian", 0, 0)
            # (Line 78) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", cp);
            # (Line 79) }
            DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", cp))
            # (Line 80) if (f.count[cp] > 1)
        EUDEndIf()
        if EUDIf()(f.count[cp] <= 1, neg=True):
            # (Line 81) {
            # (Line 82) f.Table_Sin(cp, 22 * f.loop[cp], 100);
            f.Table_Sin(cp, 22 * f.loop[cp], 100)
            # (Line 83) f.Table_Cos(cp, 22 * f.loop[cp], 100);
            f.Table_Cos(cp, 22 * f.loop[cp], 100)
            # (Line 85) var x = f.CosAngle[cp];
            x_1 = EUDVariable()
            x_1 << (f.CosAngle[cp])
            # (Line 86) var y = f.SinAngle[cp];
            y_1 = EUDVariable()
            y_1 << (f.SinAngle[cp])
            # (Line 88) f.DoubleShape(cp, 1, "Protoss Dark Archon", x, y);
            f.DoubleShape(cp, 1, "Protoss Dark Archon", x_1, y_1)
            # (Line 89) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", cp);
            # (Line 90) }
            DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", cp))
            # (Line 91) if (f.count[cp] > 2)
        EUDEndIf()
        if EUDIf()(f.count[cp] <= 2, neg=True):
            # (Line 92) {
            # (Line 93) f.Table_Sin(cp, 180 - 22 * (f.loop[cp] % 8), 200);
            f.Table_Sin(cp, 180 - 22 * (f.loop[cp] % 8), 200)
            # (Line 94) f.Table_Cos(cp, 180 - 22 * (f.loop[cp] % 8), 200);
            f.Table_Cos(cp, 180 - 22 * (f.loop[cp] % 8), 200)
            # (Line 96) var x = f.CosAngle[cp];
            x_1 = EUDVariable()
            x_1 << (f.CosAngle[cp])
            # (Line 97) var y = f.SinAngle[cp];
            y_1 = EUDVariable()
            y_1 << (f.SinAngle[cp])
            # (Line 99) f.DoubleShape(cp, 1, "Bengalaas (Jungle)", x, y);
            f.DoubleShape(cp, 1, "Bengalaas (Jungle)", x_1, y_1)
            # (Line 100) KillUnitAt(All, "Bengalaas (Jungle)", "Anywhere", cp);
            # (Line 101) }
            DoActions(KillUnitAt(All, "Bengalaas (Jungle)", "Anywhere", cp))
            # (Line 102) if (f.count[cp] > 3)
        EUDEndIf()
        if EUDIf()(f.count[cp] <= 3, neg=True):
            # (Line 103) {
            # (Line 104) var i = (f.loop[cp] % 8);
            i = EUDVariable()
            i << ((f.loop[cp] % 8))
            # (Line 106) var x = 320 - 40 * i;
            x_1 = EUDVariable()
            x_1 << (320 - 40 * i)
            # (Line 107) var y = 40 * i;
            y_1 = EUDVariable()
            y_1 << (40 * i)
            # (Line 109) f.SquareShape(cp, 1, "50 + 1n Tank", x, y);
            f.SquareShape(cp, 1, "50 + 1n Tank", x_1, y_1)
            # (Line 110) KillUnitAt(All, "50 + 1n Tank", "Anywhere", cp);
            # (Line 111) }
            DoActions(KillUnitAt(All, "50 + 1n Tank", "Anywhere", cp))
            # (Line 112) if (f.count[cp] > 4)
        EUDEndIf()
        if EUDIf()(f.count[cp] <= 4, neg=True):
            # (Line 113) {
            # (Line 114) var x = 250;
            x_1 = EUDVariable()
            x_1 << (250)
            # (Line 115) var y = 0;
            y_1 = EUDVariable()
            y_1 << (0)
            # (Line 117) f.SquareShape(cp, 4, "50 + 1n Tank", x, y);
            f.SquareShape(cp, 4, "50 + 1n Tank", x_1, y_1)
            # (Line 118) f.SquareShape(cp, 1, "50 + 1n Battlecruiser", x, y);
            f.SquareShape(cp, 1, "50 + 1n Battlecruiser", x_1, y_1)
            # (Line 119) KillUnitAt(All, "50 + 1n Tank", "Anywhere", cp);
            # (Line 120) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp);
            DoActions(KillUnitAt(All, "50 + 1n Tank", "Anywhere", cp))
            # (Line 122) x = 175;
            DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp))
            x_1 << (175)
            # (Line 123) y = 175;
            y_1 << (175)
            # (Line 125) f.SquareShape(cp, 4, "60 + 1n Archon", x, y);
            f.SquareShape(cp, 4, "60 + 1n Archon", x_1, y_1)
            # (Line 126) f.SquareShape(cp, 1, "40 + 1n Gantrithor", x, y);
            f.SquareShape(cp, 1, "40 + 1n Gantrithor", x_1, y_1)
            # (Line 127) KillUnitAt(All, "60 + 1n Archon", "Anywhere", cp);
            # (Line 128) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", cp);
            DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", cp))
            # (Line 129) }
            DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", cp))
            # (Line 130) if (f.count[cp] > 5)
        EUDEndIf()
        if EUDIf()(f.count[cp] <= 5, neg=True):
            # (Line 131) {
            # (Line 132) var x = 150;
            x_1 = EUDVariable()
            x_1 << (150)
            # (Line 133) var y = 0;
            y_1 = EUDVariable()
            y_1 << (0)
            # (Line 135) f.SquareShape(cp, 8, "60 + 1n High Templar", x, y);
            f.SquareShape(cp, 8, "60 + 1n High Templar", x_1, y_1)
            # (Line 136) f.SquareShape(cp, 1, "40 + 1n Guardian", x, y);
            f.SquareShape(cp, 1, "40 + 1n Guardian", x_1, y_1)
            # (Line 137) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", cp);
            # (Line 138) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp);
            DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", cp))
            # (Line 140) x = 100;
            DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp))
            x_1 << (100)
            # (Line 141) y = 100;
            y_1 << (100)
            # (Line 143) f.SquareShape(cp, 8, "60 + 1n High Templar", x, y);
            f.SquareShape(cp, 8, "60 + 1n High Templar", x_1, y_1)
            # (Line 144) f.SquareShape(cp, 1, "40 + 1n Guardian", x, y);
            f.SquareShape(cp, 1, "40 + 1n Guardian", x_1, y_1)
            # (Line 145) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", cp);
            # (Line 146) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", cp);
            DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", cp))
            # (Line 147) }
            DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", cp))
            # (Line 149) f.SkillWait(cp, 80);
        EUDEndIf()
        f.SkillWait(cp, 80)
        # (Line 151) f.loop[cp] += 1;
        _ARRW(f.loop, cp).__iadd__(1)
        # (Line 153) if (f.loop[cp] >= max_loop)
        if EUDIf()(f.loop[cp] >= max_loop):
            # (Line 154) {
            # (Line 155) if (Bring(cp, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill"))
            if EUDIf()(Bring(cp, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill")):
                # (Line 156) {
                # (Line 157) KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", cp);
                # (Line 159) f.count[cp] += 1;
                DoActions(KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", cp))
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 160) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 162) if (f.count[cp] == 7)
                if EUDIf()(f.count[cp] == 7):
                    # (Line 163) {
                    # (Line 164) SetSwitch("Recall - Ekidona", Clear);
                    # (Line 165) SetDeaths(cp, SetTo, 360 * f.count[cp], " `UniqueCoolTime");
                    DoActions(SetSwitch("Recall - Ekidona", Clear))
                    # (Line 167) v = 0;
                    DoActions(SetDeaths(cp, SetTo, 360 * f.count[cp], " `UniqueCoolTime"))
                    v << (0)
                    # (Line 169) f.Voice_Routine(cp, 108);
                    f.Voice_Routine(cp, 108)
                    # (Line 171) for (var i = 0; i < 6; i++)
                    i = EUDVariable()
                    i << (0)
                    if EUDWhile()(i >= 6, neg=True):
                        def _t26():
                            i.__iadd__(1)
                        # (Line 172) {
                        # (Line 173) s.ekidonaDebuff[i] = 0;
                        _ARRW(s.ekidonaDebuff, i) << (0)
                        # (Line 174) }
                        # (Line 176) RemoveUnitAt(All, "Flame Red", "Anywhere", cp);
                        EUDSetContinuePoint()
                        _t26()
                    EUDEndWhile()
                    # (Line 178) f.SkillEnd(cp);
                    DoActions(RemoveUnitAt(All, "Flame Red", "Anywhere", cp))
                    f.SkillEnd(cp)
                    # (Line 179) }
                    # (Line 180) }
                EUDEndIf()
                # (Line 181) else
                # (Line 182) {
            if EUDElse()():
                # (Line 183) SetSwitch("Recall - Ekidona", Clear);
                # (Line 184) SetDeaths(cp, SetTo, 360 * f.count[cp] + 360, " `UniqueCoolTime");
                DoActions(SetSwitch("Recall - Ekidona", Clear))
                # (Line 186) v = 0;
                DoActions(SetDeaths(cp, SetTo, 360 * f.count[cp] + 360, " `UniqueCoolTime"))
                v << (0)
                # (Line 188) for (var i = 0; i < 6; i++)
                i = EUDVariable()
                i << (0)
                if EUDWhile()(i >= 6, neg=True):
                    def _t28():
                        i.__iadd__(1)
                    # (Line 189) {
                    # (Line 190) s.ekidonaDebuff[i] = 0;
                    _ARRW(s.ekidonaDebuff, i) << (0)
                    # (Line 191) }
                    # (Line 193) RemoveUnitAt(All, "Flame Red", "Anywhere", cp);
                    EUDSetContinuePoint()
                    _t28()
                EUDEndWhile()
                # (Line 195) f.SkillEnd(cp);
                DoActions(RemoveUnitAt(All, "Flame Red", "Anywhere", cp))
                f.SkillEnd(cp)
                # (Line 196) }
                # (Line 197) }
            EUDEndIf()
            # (Line 198) }
        EUDEndIf()
        # (Line 200) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
    EUDEndIf()
    # (Line 201) }
    DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
