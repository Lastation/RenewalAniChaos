import py_math;
import Variable as v;

const step		= PVariable();			// SkillStep
const count 		= PVariable();			// SkillCount	
const loop 		= PVariable();			// SkillLoop
const delay		= PVariable();			// wait(value)
const wait		= PVariable();			// SkillWait

const INSERT_KEY = PVariable();

const loopB 		= PVariable();			// SkillLoop2
const loopC 	= PVariable();			// SkillLoop3
const delayB	= PVariable();			// wait(value)2
const delayC	= PVariable();			// wait(value)3

const location 	= PVariable();			// 로케이션 번호
const heroID 	= PVariable();			// 영웅 유닛 번호

const UltimateA	= PVariable();			// 궁극기 1번 소모량
const UltimateB	= PVariable();			// 궁극기 2번 소모량
const UltimateC	= PVariable();			// 궁극기 3번 소모량

const UniqueA	= PVariable();			// 유니크 1번 쿨타임

const distance	= PVariable();			// 거리 관련 변수
const SinAngle 	= PVariable();			// Sin 변수
const CosAngle 	= PVariable();			// Cos 변수

const HoldLocation = [97, 119, 122, 126, 134, 143, 0, 0];

const CosTableArray = EUDArray(py_eval("[int(round(100*math.cos(math.radians(t)))) for t in range(361)]"));
const SinTableArray 	= EUDArray(py_eval("[int(round(100*math.sin(math.radians(t)))) for t in range(361)]"));

const Rusaruka_Voice 	= PVariable();
const Chtholly_Voice 	= PVariable();
const Kiana_Voice 		= PVariable();	// 17
const Yuuna_Voice 		= PVariable();	// 22
const Mayuri_Voice 		= PVariable();	// 23

function Table_Sin(cp, degree, distance);
function Table_Cos(cp, degree, distance);

function Voice_Routine(cp, num)
{
	switch(v.Hero_Num[cp])
	{
	case 1:
		Rusaruka_Voice[0] = num;
		Rusaruka_Voice[1] = num;
		Rusaruka_Voice[2] = num;
		Rusaruka_Voice[3] = num;
		Rusaruka_Voice[4] = num;
		Rusaruka_Voice[5] = num;
		break;
	case 2:
		Chtholly_Voice[0] = num;
		Chtholly_Voice[1] = num;
		Chtholly_Voice[2] = num;
		Chtholly_Voice[3] = num;
		Chtholly_Voice[4] = num;
		Chtholly_Voice[5] = num;
		break;
	case 22:
		Yuuna_Voice[0] = num;
		Yuuna_Voice[1] = num;
		Yuuna_Voice[2] = num;
		Yuuna_Voice[3] = num;
		Yuuna_Voice[4] = num;
		Yuuna_Voice[5] = num;
		break;
	case 23:
		Mayuri_Voice[0] = num;
		Mayuri_Voice[1] = num;
		Mayuri_Voice[2] = num;
		Mayuri_Voice[3] = num;
		Mayuri_Voice[4] = num;
		Mayuri_Voice[5] = num;
		break;
		
	}
}


function MoveLoc(Unit : TrgUnit, cp : TrgPlayer, x, y)
{
	MoveLocation(location[cp], Unit, cp, "Anywhere");
	addloc(location[cp] - 1, x, y);
}

function SkillUnit(cp : TrgPlayer, count, Unit : TrgUnit)
{
	CreateUnit(count, Unit, "[Skill]Unit_Wait_1", cp);
	SetInvincibility(Enable, Unit, cp, "[Skill]Unit_Wait_ALL");
	MoveUnit(count, Unit, cp, "[Skill]Unit_Wait_ALL", location[cp]);
}

function BanReturn(cp)
{
	KillUnit("Protoss Observer", cp);
}

function HoldPosition(cp)
{
	MoveLocation(HoldLocation[cp], heroID[cp], cp, "Anywhere");
	Order(heroID[cp], cp, "Anywhere", Move, HoldLocation[cp]);
}

function DotShape(cp : TrgPlayer, count, Unit : TrgUnit, x, y)
{
	MoveLoc(heroID[cp], cp, x, y);
	SkillUnit(cp, count, Unit);
}

function SkillWait(cp, count)
{
	delay[cp] = count/83 + 1;
}

function SkillWaitB(cp, count)
{
	delayB[cp] = count/83 + 1;
}

function SkillWaitC(cp, count)
{
	delayB[cp] = count/83 + 1;
}

function SkillEnd(cp)
{
	count[cp] = 999;
}

function SquareShape(cp : TrgPlayer, count, Unit : TrgUnit, x, y)
{
	MoveLoc(heroID[cp], cp, x, y);
	SkillUnit(cp, count, Unit);
	MoveLoc(heroID[cp], cp, -y, x);
	SkillUnit(cp, count, Unit);
	MoveLoc(heroID[cp], cp, -x, -y);
	SkillUnit(cp, count, Unit);
	MoveLoc(heroID[cp], cp, y, -x);
	SkillUnit(cp, count, Unit);
}

function SquareShapeAt(cp : TrgPlayer, count, Unit : TrgUnit, x, y, distanceX, distanceY)
{
	MoveLoc(heroID[cp], cp, x + distanceX, y + distanceY);
	SkillUnit(cp, count, Unit);
	MoveLoc(heroID[cp], cp, -y + distanceY, x + distanceX);
	SkillUnit(cp, count, Unit);
	MoveLoc(heroID[cp], cp, -x + distanceX, -y + distanceY);
	SkillUnit(cp, count, Unit);
	MoveLoc(heroID[cp], cp, y + distanceY, -x + distanceX);
	SkillUnit(cp, count, Unit);
}

function NxNSquareShape(cp : TrgPlayer, count, Unit : TrgUnit, n, interval)
{
	var i = 0;
	var destX, destY; 
	var distance = interval / 2;
	var size = n * n;

	for (; i < size / 4; i++)
	{
		if (n == 1)
		{
			MoveLoc(heroID[cp] ,cp, 0, 0);
			SkillUnit(cp, count, Unit);
		}
		else if (n % 2 == 0)
		{
			destX = i % (n / 2) + 1;
			destY = i / (n / 2) + 1;
			if (destX == 1)
			{
				SquareShape(cp, count, Unit, distance, destY * interval - distance);
			}
			else if (destY == 1)
			{
				SquareShape(cp, count, Unit, destX * interval - distance, distance);
			}
			else
			{
				SquareShape(cp, count, Unit, destX * interval - distance, destY * interval - distance);
			}
		}
		else if (n % 2 == 1)
		{
			destX = i % (n / 2);
			destY = i / (n / 2);
	
			if (i == 0)
			{
				MoveLoc(heroID[cp] ,cp, 0, 0);
				SkillUnit(cp, count, Unit);
			}
			else if (destY == 0)
			{
				SquareShape(cp, count, Unit, destX * interval, 0);
			}
			else
			{
				SquareShape(cp, count, Unit, destX * interval + interval, destY * interval);
			}
			
			if (i == size / 4 - 1)
			{
				SquareShape(cp, count, Unit, (n / 2) * interval, 0);
			}
		}
	}
}


function NxNSquareShapeAt(cp : TrgPlayer, count, Unit : TrgUnit, n, interval, distanceX, distanceY)
{
	var i = 0;
	var destX, destY; 
	var distance = interval / 2;
	var size = n * n;
	
	for (; i < size / 4; i++)
	{
		if (n == 1)
		{
			MoveLoc(heroID[cp] ,cp, distanceX, distanceY);
			SkillUnit(cp, count, Unit);
		}
		else if (n % 2 == 0)
		{
			destX = i % (n / 2) + 1;
			destY = i / (n / 2) + 1;
			
			if (destX == 1)
			{
				SquareShapeAt(cp, count, Unit, distance, destY * interval - distance, distanceX, distanceY);
			}
			else if (destY == 1)
			{
				SquareShapeAt(cp, count, Unit, destX * interval - distance, distance, distanceX, distanceY);
			}
			else
			{
				SquareShapeAt(cp, count, Unit, destX * interval - distance, destY * interval - distance, distanceX, distanceY);
			}
		}
		else if (n % 2 == 1)
		{
			destX = i % (n / 2);
			destY = i / (n / 2);
	
			if (i == 0)
			{
				MoveLoc(heroID[cp] ,cp, distanceX, distanceY);
				SkillUnit(cp, count, Unit);
			}
			else if (destY == 0)
			{
				SquareShapeAt(cp, count, Unit, destX * interval, 0, distanceX, distanceY);
			}
			else
			{
				SquareShapeAt(cp, count, Unit, destX * interval + interval, destY * interval, distanceX, distanceY);
			}
			
			if (i == size / 4 - 1)
			{
				SquareShapeAt(cp, count, Unit, (n / 2) * interval, 0, distanceX, distanceY);
			}
		}
	}
}

function LineShape(cp : TrgPlayer, count, Unit : TrgUnit, degree, n, interval, distance)
{
	var i = 0;

	Table_Sin(cp, degree + 90, distance);
	Table_Cos(cp, degree + 90, distance);
	var x_initial = CosAngle[cp];
	var y_initial = SinAngle[cp];
	
	if (n / 2 == 0)
	{
		Table_Sin(cp, degree, interval * (n / 2) - interval / 2);
		Table_Cos(cp, degree, interval * (n / 2) - interval / 2);
	}
	else
	{
		Table_Sin(cp, degree, interval * (n / 2));
		Table_Cos(cp, degree, interval * (n / 2));
	}
	
	x_initial = x_initial + CosAngle[cp];
	y_initial = y_initial + SinAngle[cp];
	
	Table_Sin(cp, degree, interval);
	Table_Cos(cp, degree, interval);
	
	for (; i < n; i++)
	{
		MoveLoc(heroID[cp], cp, x_initial - i * CosAngle[cp], y_initial - i * SinAngle[cp]);
		SkillUnit(cp, count, Unit);
	}
	
}


function LineShapeAt(cp : TrgPlayer, count, Unit : TrgUnit, degree, n, interval, distanceX, distanceY)
{
	var i = 0;
	var distance = interval / 2;

	Table_Sin(cp, degree, distance);
	Table_Cos(cp, degree, distance);
	
	var gradientX = CosAngle[cp] / 2;
	var gradientY = SinAngle[cp] / 2;
	
	var Angle_X, Angle_Y;
	
	Table_Sin(cp, degree, interval);
	Table_Cos(cp, degree, interval);
	
	for (; i < n; i++)
	{
		Angle_X = CosAngle[cp] * i;
		Angle_Y = SinAngle[cp] * i;
		
		if (n % 2 == 0 && i != n / 2)
		{
			MoveLoc(heroID[cp], cp, -Angle_X - gradientX + distanceX, Angle_Y + gradientY + distanceY);
			SkillUnit(cp, count, Unit);
			MoveLoc(heroID[cp], cp, Angle_X + gradientX + distanceX, -Angle_Y - gradientY + distanceY);
			SkillUnit(cp, count, Unit);
		}
		else if (n % 2 == 1)
		{
			if (i == 0)
			{
				MoveLoc(heroID[cp], cp, distanceX, distanceY);
				SkillUnit(cp, count, Unit);
			}
			else
			{
				MoveLoc(heroID[cp], cp, -Angle_X + distanceX, Angle_Y + distanceY);
				SkillUnit(cp, count, Unit);
				MoveLoc(heroID[cp], cp, Angle_X + distanceX, -Angle_Y + distanceY);
				SkillUnit(cp, count, Unit);
			}
		}
	}
	
}

function CrossShape(cp : TrgPlayer, count, Unit : TrgUnit, degree, n, interval)
{
	var i = 0;
	var distance = interval / 2;

	Table_Sin(cp, degree, distance);
	Table_Cos(cp, degree, distance);
	
	var gradientX = CosAngle[cp] / 2;
	var gradientY = SinAngle[cp] / 2;
	
	var Angle_X, Angle_Y;
	
	Table_Sin(cp, degree, interval);
	Table_Cos(cp, degree, interval);
	
	for (; i < n; i++)
	{
		Angle_X = CosAngle[cp] * i;
		Angle_Y = SinAngle[cp] * i;
		
		if (n % 2 == 0 && i != n / 2)
		{
			SquareShape(cp, count, Unit, Angle_X + gradientX, Angle_Y + gradientY);
		}
		else if (n % 2 == 1)
		{
			if (i == 0)
			{
				MoveLoc(heroID[cp], cp, 0, 0);
			}
			else
			{
				SquareShape(cp, count, Unit, Angle_X, Angle_Y);
			}
		}
	}
}

function Table_Sin(cp, degree, distance)
{
	degree = degree % 360;
	SinAngle[cp] = SinTableArray[degree];
	
	if (SinAngle[cp] > 2147483648)
	{
		SinAngle[cp] = -SinAngle[cp];
		SinAngle[cp] = (SinAngle[cp] * distance) / 100;
		SinAngle[cp] = -SinAngle[cp];
	}
	else
	{
		SinAngle[cp] = (SinAngle[cp] * distance) / 100;
	}
}

function Table_Cos(cp, degree, distance)
{
	degree = degree % 360;
	CosAngle[cp] = CosTableArray[degree];
	
	if (CosAngle[cp] > 2147483648)
	{
		CosAngle[cp] = -CosAngle[cp];
		CosAngle[cp] = (CosAngle[cp] * distance) / 100;
		CosAngle[cp] = -CosAngle[cp];
	}
	else
	{
		CosAngle[cp] = (CosAngle[cp] * distance) / 100;
	}
}
function EdgeShape(cp : TrgPlayer, count, Unit : TrgUnit, degree, n, interval)
{
   var i = 0;

   Table_Sin(cp, degree, interval * 14 / 10);
   Table_Cos(cp, degree, interval * 14 / 10);

   var x_o = CosAngle[cp];
   var y_o = SinAngle[cp];

   var distance = (interval * 2) / (n - 1);

   Table_Sin(cp, degree + 45, distance);
   Table_Cos(cp, degree + 45, distance);

   var distance_x = CosAngle[cp];
   var distance_y = SinAngle[cp];
   
   if (n == 1)
   {
      DotShape(cp, 1, Unit, 0, 0);
   }
   else if (n > 1)
   {
      for (; i < n - 1; i++)
      {
         SquareShape(cp, 1, Unit, x_o - (distance_x * i), y_o - (distance_y * i));
      }
   }
}