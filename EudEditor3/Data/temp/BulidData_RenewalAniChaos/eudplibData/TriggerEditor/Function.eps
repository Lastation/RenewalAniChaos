import py_math;

const step		= PVariable();			// 179번 유닛 `SkillStep
const count 		= PVariable();			// 181번 유닛 `SkillCount	
const loop 		= PVariable();			// 212번 유닛 `SkillLoop
	
const location 	= PVariable();			// 로케이션 번호
const heroID 	= PVariable();			// 영웅 유닛 번호

const UltimateA	= PVariable();			// 궁극기 1번 소모량
const UltimateB	= PVariable();			// 궁극기 2번 소모량
const UltimateC	= PVariable();			// 궁극기 3번 소모량

const UniqueA	= PVariable();			// 유니크 1번 쿨타임

const distance	= PVariable();			// 거리 관련 변수
const SinAngle 	= PVariable();			// Sin 변수
const CosAngle 	= PVariable();			// Cos 변수

const CosTableArray = EUDArray(py_eval("[int(round(100*math.cos(math.radians(t)))) for t in range(361)]"));
const SinTableArray 	= EUDArray(py_eval("[int(round(100*math.sin(math.radians(t)))) for t in range(361)]"));

function MoveLoc(Unit : TrgUnit, location : TrgLocation, cp : TrgPlayer, x, y)
{
	MoveLocation(location, Unit, cp, "Anywhere");
	addloc(location - 1, x, y);
}

function SkillUnit(count, Unit : TrgUnit, location : TrgLocation, cp : TrgPlayer)
{
	CreateUnit(count, Unit, "[Skill]Unit_Wait_1", cp);
	SetInvincibility(Enable, Unit, cp, "[Skill]Unit_Wait_ALL");
	MoveUnit(count, Unit, cp, "[Skill]Unit_Wait_ALL", location);
}

function SkillWait(cp, count)
{
	SetDeaths(cp, SetTo, count/83 + 1, " `WaitTime");
}

function SkillEnd(cp)
{
	SetDeaths(cp, SetTo, 12, " `SkillWait");
}

function SquareShape(heroID : TrgUnit, count, Unit : TrgUnit, location : TrgLocation, cp : TrgPlayer, x, y)
{
	MoveLoc(heroID, location, cp, x, y);
	SkillUnit(count, Unit, location, cp);
	MoveLoc(heroID, location, cp, -y, x);
	SkillUnit(count, Unit, location, cp);
	MoveLoc(heroID, location, cp, -x, -y);
	SkillUnit(count, Unit, location, cp);
	MoveLoc(heroID, location, cp, y, -x);
	SkillUnit(count, Unit, location, cp);
}

function Table_Sin(cp, degree, distance)
{
	degree = degree % 360;
	SinAngle[cp] = SinTableArray[degree];
	
	if (SinAngle[cp] > 2147483648)
	{
		SinAngle[cp] = -SinAngle[cp];
		SinAngle[cp] = (SinAngle[cp] * distance) / 100;
		SinAngle[cp] = -SinAngle[cp];
	}
	else
	{
		SinAngle[cp] = (SinAngle[cp] * distance) / 100;
	}
}

function Table_Cos(cp, degree, distance)
{
	degree = degree % 360;
	CosAngle[cp] = CosTableArray[degree];
	
	if (CosAngle[cp] > 2147483648)
	{
		CosAngle[cp] = -CosAngle[cp];
		CosAngle[cp] = (CosAngle[cp] * distance) / 100;
		CosAngle[cp] = -CosAngle[cp];
	}
	else
	{
		CosAngle[cp] = (CosAngle[cp] * distance) / 100;
	}
}