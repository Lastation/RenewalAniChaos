## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Variable as v;
import Variable as v
# (Line 4) function SetBuildingHP()
# (Line 5) {
@EUDFunc
def SetBuildingHP():
    # (Line 6) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 8) ModifyUnitHitPoints(1, (155), (13), (64), 100 - (v.Unique_Cool[cp] / 10));
    # (Line 9) ModifyUnitShields(1, (167), (13), (64), dwread_epd(EPD(0x58A364 + 48 * 205 + 4 * cp)) / 10);
    DoActions(ModifyUnitHitPoints(1, (155), (13), (64), 100 - (v.Unique_Cool[cp] // 10)))
    # (Line 10) }
    DoActions(ModifyUnitShields(1, (167), (13), (64), f_dwread_epd(EPD(0x58A364 + 48 * 205 + 4 * cp)) // 10))
    # (Line 12) function SetVariable()

# (Line 13) {
@EUDFunc
def SetVariable():
    # (Line 14) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 16) v.Potion[cp] = dwread_epd(EPD(0x58A364 + 48 * 219 + 4 * cp));
    _ARRW(v.Potion, cp) << (f_dwread_epd(EPD(0x58A364 + 48 * 219 + 4 * cp)))
    # (Line 17) v.EXP_Need[cp] = dwread_epd(EPD(0x58A364 + 48 * 225 + 4 * cp));
    _ARRW(v.EXP_Need, cp) << (f_dwread_epd(EPD(0x58A364 + 48 * 225 + 4 * cp)))
    # (Line 18) v.EXP_Now[cp] = dwread_epd(EPD(0x58A364 + 48 * 185 + 4 * cp));
    _ARRW(v.EXP_Now, cp) << (f_dwread_epd(EPD(0x58A364 + 48 * 185 + 4 * cp)))
    # (Line 19) v.DeathCount[cp] = dwread_epd(EPD(0x58A364 + 48 * 210 + 4 * cp))/12;
    _ARRW(v.DeathCount, cp) << (f_dwread_epd(EPD(0x58A364 + 48 * 210 + 4 * cp)) // 12)
    # (Line 20) v.Unique_Cool[cp] = dwread_epd(EPD(0x58A364 + 48 * 203 + 4 * cp))/12;
    _ARRW(v.Unique_Cool, cp) << (f_dwread_epd(EPD(0x58A364 + 48 * 203 + 4 * cp)) // 12)
    # (Line 21) v.Hero_Num[cp] = dwread_epd(EPD(0x58A364 + 48 * 172 + 4 * cp));
    _ARRW(v.Hero_Num, cp) << (f_dwread_epd(EPD(0x58A364 + 48 * 172 + 4 * cp)))
    # (Line 22) v.Level[cp] = dwread_epd(EPD(0x5822F4 + 4 * cp));
    _ARRW(v.Level, cp) << (f_dwread_epd(EPD(0x5822F4 + 4 * cp)))
    # (Line 24) if (Deaths((13), (0), 1, (186))) { v.Sound_Text1[cp] = dwread_epd(EPD(0x58A364 + 48 * 186 + 4 * cp)); 		SetDeaths((13), (7), 0, (186)); }
    if EUDIf()(Deaths((13), (0), 1, (186))):
        _ARRW(v.Sound_Text1, cp) << (f_dwread_epd(EPD(0x58A364 + 48 * 186 + 4 * cp)))
        DoActions(SetDeaths((13), (7), 0, (186)))
        # (Line 25) if (Deaths((13), (0), 1, (174))) { v.Sound_Text2[cp] = dwread_epd(EPD(0x58A364 + 48 * 174 + 4 * cp)); 		SetDeaths((13), (7), 0, (174)); }
    EUDEndIf()
    if EUDIf()(Deaths((13), (0), 1, (174))):
        _ARRW(v.Sound_Text2, cp) << (f_dwread_epd(EPD(0x58A364 + 48 * 174 + 4 * cp)))
        DoActions(SetDeaths((13), (7), 0, (174)))
        # (Line 26) if (Deaths((13), (0), 1, (117))) { v.Sound_Text3[cp] = dwread_epd(EPD(0x58A364 + 48 * 117 + 4 * cp)); 		SetDeaths((13), (7), 0, (117)); }
    EUDEndIf()
    if EUDIf()(Deaths((13), (0), 1, (117))):
        _ARRW(v.Sound_Text3, cp) << (f_dwread_epd(EPD(0x58A364 + 48 * 117 + 4 * cp)))
        DoActions(SetDeaths((13), (7), 0, (117)))
        # (Line 27) if (Deaths((13), (0), 1, (222))) { v.Sound_Text_Uilti[cp] = dwread_epd(EPD(0x58A364 + 48 * 222 + 4 * cp)); 	SetDeaths((13), (7), 0, (222)); }
    EUDEndIf()
    if EUDIf()(Deaths((13), (0), 1, (222))):
        _ARRW(v.Sound_Text_Uilti, cp) << (f_dwread_epd(EPD(0x58A364 + 48 * 222 + 4 * cp)))
        DoActions(SetDeaths((13), (7), 0, (222)))
        # (Line 28) if (Deaths((13), (0), 1, (188))) { v.Sound_Text_Uniq[cp] = dwread_epd(EPD(0x58A364 + 48 * 188 + 4 * cp)); SetDeaths((13), (7), 0, (188)); }
    EUDEndIf()
    if EUDIf()(Deaths((13), (0), 1, (188))):
        _ARRW(v.Sound_Text_Uniq, cp) << (f_dwread_epd(EPD(0x58A364 + 48 * 188 + 4 * cp)))
        DoActions(SetDeaths((13), (7), 0, (188)))
        # (Line 30) switch (v.Hero_Num[cp])	// 방어력 관련
    EUDEndIf()
    EUDSwitch(v.Hero_Num[cp])
    # (Line 31) {
    # (Line 32) case 10:
    _t6 = EUDSwitchCase()
    # (Line 33) if(Deaths((13), (0), 1, (204)))
    if _t6(10):
        if EUDIf()(Deaths((13), (0), 1, (204))):
            # (Line 34) {
            # (Line 35) bwrite(0x58D2B0 + 0x207C * ((2) / 46) + (cp) * (46 - 31 * ((2) / 46)) + ((2) % 46), bread(0x58D2B0 + 0 + 46 * cp) + 10);
            f_bwrite(0x58D2B0 + 0x207C * ((2) // 46) + (cp) * (46 - 31 * ((2) // 46)) + ((2) % 46), f_bread(0x58D2B0 + 0 + 46 * cp) + 10)
            # (Line 36) SetDeaths((13), (9), 1, (204));
            # (Line 37) }
            DoActions(SetDeaths((13), (9), 1, (204)))
            # (Line 38) else
            # (Line 39) {
        if EUDElse()():
            # (Line 40) bwrite(0x58D2B0 + 0x207C * ((2) / 46) + (cp) * (46 - 31 * ((2) / 46)) + ((2) % 46), bread(0x58D2B0 + 0 + 46 * cp));
            f_bwrite(0x58D2B0 + 0x207C * ((2) // 46) + (cp) * (46 - 31 * ((2) // 46)) + ((2) % 46), f_bread(0x58D2B0 + 0 + 46 * cp))
            # (Line 41) }
            # (Line 42) break;
        EUDEndIf()
        EUDBreak()
        # (Line 43) default:
    # (Line 44) bwrite(0x58D2B0 + 0x207C * ((2) / 46) + (cp) * (46 - 31 * ((2) / 46)) + ((2) % 46), bread(0x58D2B0 + 0 + 46 * cp));
    if EUDSwitchDefault()():
        f_bwrite(0x58D2B0 + 0x207C * ((2) // 46) + (cp) * (46 - 31 * ((2) // 46)) + ((2) % 46), f_bread(0x58D2B0 + 0 + 46 * cp))
        # (Line 45) break;
        EUDBreak()
        # (Line 46) }
    # (Line 49) bwrite(0x58D2B0 + 0x207C * ((9) / 46) + (cp) * (46 - 31 * ((9) / 46)) + ((9) % 46), bread(0x58D2B0 + 7 + 46 * cp));
    EUDEndSwitch()
    f_bwrite(0x58D2B0 + 0x207C * ((9) // 46) + (cp) * (46 - 31 * ((9) // 46)) + ((9) % 46), f_bread(0x58D2B0 + 7 + 46 * cp))
    # (Line 50) }
