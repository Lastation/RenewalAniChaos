## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 2) const PlayerExp = PVariable();
PlayerExp = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 4) const isLoad = PVariable();
isLoad = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 6) const CharacterMax = 18;
CharacterMax = _CGFW(lambda: [18], 1)[0]
# (Line 7) const SaveExp = EUDArray(CharacterMax * 8);
SaveExp = _CGFW(lambda: [EUDArray(CharacterMax * 8)], 1)[0]
# (Line 9) const AnnounceList = PVariable();
AnnounceList = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 12) const Unit_Death = PVariable();
Unit_Death = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 13) const Hero_Text = PVariable();
Hero_Text = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 15) const Unit_ID = PVariable();
Unit_ID = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 16) const PlayerID = PVariable();
PlayerID = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 18) const Hero_Index = PVariable();
Hero_Index = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 19) const Unit_PrevIndex = PVariable();
Unit_PrevIndex = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 20) const Unit_NowIndex = PVariable();
Unit_NowIndex = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 22) const Level = PVariable();
Level = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 23) const Unique_Cool = PVariable();
Unique_Cool = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 25) const EXP_Need = PVariable();
EXP_Need = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 26) const EXP_Now = PVariable();
EXP_Now = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 27) const Potion = PVariable();
Potion = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 28) const DeathCount = PVariable();
DeathCount = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 30) const Sound_Text1 = PVariable();
Sound_Text1 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 31) const Sound_Text2 = PVariable();
Sound_Text2 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 32) const Sound_Text3 = PVariable();
Sound_Text3 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 34) const Sound_Text_Uilti = PVariable();
Sound_Text_Uilti = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 35) const Sound_Text_Uniq = PVariable();
Sound_Text_Uniq = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 37) const Hero_Num = PVariable();
Hero_Num = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 39) const Mana_Property = PVariable();
Mana_Property = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 40) const Upgrade_Armor = PVariable();
Upgrade_Armor = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 41) const DeathOre_Text = PVariable();
DeathOre_Text = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 43) const Unit_HP 		= PVariable();		// 건물 체력
Unit_HP = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 44) const BuildingText 	= PVariable();		// 건물 텍스트
BuildingText = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 45) const BuildingIndex  = PVariable();		// 건물 인덱스
BuildingIndex = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 47) var DeathOre = 0;
DeathOre = EUDCreateVariables(1)
_IGVA([DeathOre], lambda: [0])
# (Line 48) var Team_Num = 0;
Team_Num = EUDCreateVariables(1)
_IGVA([Team_Num], lambda: [0])
# (Line 50) const Hero_Name =
# (Line 51) [Db("#REF"),
# (Line 52) Db("루살카 슈베게린"),
# (Line 53) Db("크톨리 노타 세니오리스"),
# (Line 54) Db("텐카와 마이히메"),
# (Line 55) Db("히나나위 텐시"),
# (Line 56) Db("소네 미유키"),
# (Line 57) Db("네게브"),
# (Line 58) Db("세실리아"),
# (Line 59) Db("후타바 안즈"),
# (Line 60) Db("호토 모카"),
# (Line 61) Db("수수께끼의 얼터에고 Λ"),
# (Line 62) Db("토키사키 쿠루미"),
# (Line 63) Db("류즈"),
# (Line 64) Db("사쿠라"),
# (Line 65) Db("야시로 가쿠"),
# (Line 66) Db("린"),
# (Line 67) Db("세라핌"),
# (Line 68) Db("키아나 카스라나"),
# (Line 69) Db("이와후네 텐케이"),
# (Line 70) Db("#REF")];
Hero_Name = _CGFW(lambda: [_ARR(FlattenList([Db("#REF"), Db("루살카 슈베게린"), Db("크톨리 노타 세니오리스"), Db("텐카와 마이히메"), Db("히나나위 텐시"), Db("소네 미유키"), Db("네게브"), Db("세실리아"), Db("후타바 안즈"), Db("호토 모카"), Db("수수께끼의 얼터에고 Λ"), Db("토키사키 쿠루미"), Db("류즈"), Db("사쿠라"), Db("야시로 가쿠"), Db("린"), Db("세라핌"), Db("키아나 카스라나"), Db("이와후네 텐케이"), Db("#REF")]))], 1)[0]
