## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 2) const SCAStatus 		= PVariable();
SCAStatus = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 4) const Exp_Total		= PVariable();		// Exp 토탈
Exp_Total = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 5) const CS_Total		= PVariable();		// CS 토탈
CS_Total = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 6) const Kill_All			= PVariable();		// Kill 토탈
Kill_All = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 7) const Kill_Total		= EUDArray(160);	// Kill 캐릭터 토탈
Kill_Total = _CGFW(lambda: [EUDArray(160)], 1)[0]
# (Line 8) const Death_Total	= EUDArray(160);	// Death 토탈
Death_Total = _CGFW(lambda: [EUDArray(160)], 1)[0]
# (Line 10) const Exp_Group 	= EUDArray(160);	// Exp
Exp_Group = _CGFW(lambda: [EUDArray(160)], 1)[0]
# (Line 11) const CS_Group 		= EUDArray(160);	// CS
CS_Group = _CGFW(lambda: [EUDArray(160)], 1)[0]
# (Line 13) const Exp_Player		= PVariable();		// 현재 캐릭터 경험치
Exp_Player = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 14) const CS_Player		= PVariable();		// 현재 캐릭터 CS
CS_Player = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 16) const Kill_Score		= PVariable();		// 킬
Kill_Score = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 17) const Death_Score	= PVariable();		// 사망
Death_Score = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 19) const AnnounceList = PVariable();
AnnounceList = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 22) const Unit_Death 	= PVariable();
Unit_Death = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 23) const Hero_Text 		= PVariable();
Hero_Text = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 25) const Unit_ID 		= PVariable();
Unit_ID = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 26) const PlayerID 		= PVariable();
PlayerID = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 28) const Hero_Index = PVariable();
Hero_Index = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 29) const Unit_PrevIndex = PVariable();
Unit_PrevIndex = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 30) const Unit_NowIndex = PVariable();
Unit_NowIndex = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 32) const Level = PVariable();
Level = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 33) const Unique_Cool = PVariable();
Unique_Cool = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 35) const EXP_Need = PVariable();
EXP_Need = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 36) const EXP_Now = PVariable();
EXP_Now = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 37) const Potion = PVariable();
Potion = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 38) const DeathCount = PVariable();
DeathCount = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 40) const Sound_Text1 = PVariable();
Sound_Text1 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 41) const Sound_Text2 = PVariable();
Sound_Text2 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 42) const Sound_Text3 = PVariable();
Sound_Text3 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 43) const Sound_Text4 = PVariable();
Sound_Text4 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 45) const Sound_Text_Uilti = PVariable();
Sound_Text_Uilti = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 46) const Sound_Text_Uniq = PVariable();
Sound_Text_Uniq = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 48) const Hero_Num = PVariable();
Hero_Num = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 50) const Mana_Property = PVariable();
Mana_Property = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 51) const Upgrade_Armor = PVariable();
Upgrade_Armor = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 52) const DeathOre_Text = PVariable();
DeathOre_Text = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 54) const Unit_HP 		= PVariable();		// 건물 체력
Unit_HP = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 55) const BuildingText 	= PVariable();		// 건물 텍스트
BuildingText = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 56) const BuildingIndex  = PVariable();		// 건물 인덱스
BuildingIndex = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 58) const DeathOre 		= PVariable();
DeathOre = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 59) const Team_Num 	= PVariable();
Team_Num = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 61) const Hero_Name =
# (Line 62) [Db("#REF"),
# (Line 63) Db("루살카 슈베게린"),
# (Line 64) Db("크톨리 노타 세니오리스"),
# (Line 65) Db("텐카와 마이히메"),
# (Line 66) Db("히나나위 텐시"),
# (Line 67) Db("소네 미유키"),
# (Line 68) Db("네게브"),
# (Line 69) Db("세실리아"),
# (Line 70) Db("후타바 안즈"),
# (Line 71) Db("호토 모카"),
# (Line 72) Db("수수께끼의 얼터에고 Λ"),
# (Line 73) Db("토키사키 쿠루미"),
# (Line 74) Db("류즈"),
# (Line 75) Db("사쿠라"),
# (Line 76) Db("야시로 가쿠"),
# (Line 77) Db("린"),
# (Line 78) Db("세라핌"),
# (Line 79) Db("키아나 카스라나"),
# (Line 80) Db("이와후네 텐케이"),
# (Line 81) Db("마르고트 나이트 & 마르가 나르제"),
# (Line 82) Db("에메트셀크"),
# (Line 83) Db("마젤란"),
# (Line 84) Db("유우키 유우나"),
# (Line 85) Db("#REF")];
Hero_Name = _CGFW(lambda: [_ARR(FlattenList([Db("#REF"), Db("루살카 슈베게린"), Db("크톨리 노타 세니오리스"), Db("텐카와 마이히메"), Db("히나나위 텐시"), Db("소네 미유키"), Db("네게브"), Db("세실리아"), Db("후타바 안즈"), Db("호토 모카"), Db("수수께끼의 얼터에고 Λ"), Db("토키사키 쿠루미"), Db("류즈"), Db("사쿠라"), Db("야시로 가쿠"), Db("린"), Db("세라핌"), Db("키아나 카스라나"), Db("이와후네 텐케이"), Db("마르고트 나이트 & 마르가 나르제"), Db("에메트셀크"), Db("마젤란"), Db("유우키 유우나"), Db("#REF")]))], 1)[0]
