## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import py_math;
import math
# (Line 2) import Variable as v;
import Variable as v
# (Line 4) const step		= PVariable();			// SkillStep
step = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 5) const count 		= PVariable();			// SkillCount
count = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 6) const loop 		= PVariable();			// SkillLoop
loop = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 7) const delay		= PVariable();			// wait(value)
delay = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 8) const wait		= PVariable();			// SkillWait
wait = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 10) const INSERT_KEY = PVariable();
INSERT_KEY = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 12) const loopB 		= PVariable();			// SkillLoop2
loopB = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 13) const loopC 	= PVariable();			// SkillLoop3
loopC = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 14) const delayB	= PVariable();			// wait(value)2
delayB = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 15) const delayC	= PVariable();			// wait(value)3
delayC = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 17) const location 	= PVariable();			// 로케이션 번호
location = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 18) const heroID 	= PVariable();			// 영웅 유닛 번호
heroID = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 20) const UltimateA	= PVariable();			// 궁극기 1번 소모량
UltimateA = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 21) const UltimateB	= PVariable();			// 궁극기 2번 소모량
UltimateB = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 22) const UltimateC	= PVariable();			// 궁극기 3번 소모량
UltimateC = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 24) const UniqueA	= PVariable();			// 유니크 1번 쿨타임
UniqueA = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 26) const distance	= PVariable();			// 거리 관련 변수
distance = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 27) const SinAngle 	= PVariable();			// Sin 변수
SinAngle = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 28) const CosAngle 	= PVariable();			// Cos 변수
CosAngle = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 30) const HoldLocation = [97, 119, 122, 126, 134, 143, 0, 0];
HoldLocation = _CGFW(lambda: [_ARR(FlattenList([97, 119, 122, 126, 134, 143, 0, 0]))], 1)[0]
# (Line 32) const CosTableArray = EUDArray(py_eval("[int(round(100*math.cos(math.radians(t)))) for t in range(361)]"));
CosTableArray = _CGFW(lambda: [EUDArray(eval("[int(round(100*math.cos(math.radians(t)))) for t in range(361)]"))], 1)[0]
# (Line 33) const SinTableArray 	= EUDArray(py_eval("[int(round(100*math.sin(math.radians(t)))) for t in range(361)]"));
SinTableArray = _CGFW(lambda: [EUDArray(eval("[int(round(100*math.sin(math.radians(t)))) for t in range(361)]"))], 1)[0]
# (Line 35) const Rusaruka_Voice 	= PVariable();
Rusaruka_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 36) const Chtholly_Voice 	= PVariable();
Chtholly_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 37) const Kiana_Voice 		= PVariable();	// 17
Kiana_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 38) const Yuuna_Voice 		= PVariable();	// 22
Yuuna_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 39) const Mayuri_Voice 		= PVariable();	// 23
Mayuri_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 41) function Table_Sin(cp, degree, distance);
# (Line 42) function Table_Cos(cp, degree, distance);
# (Line 44) function Voice_Routine(cp, num)
# (Line 45) {
@EUDFunc
def Voice_Routine(cp, num):
    # (Line 46) switch(v.Hero_Num[cp])
    EUDSwitch(v.Hero_Num[cp])
    # (Line 47) {
    # (Line 48) case 1:
    _t1 = EUDSwitchCase()
    # (Line 49) Rusaruka_Voice[0] = num;
    if _t1(1):
        _ARRW(Rusaruka_Voice, 0) << (num)
        # (Line 50) Rusaruka_Voice[1] = num;
        _ARRW(Rusaruka_Voice, 1) << (num)
        # (Line 51) Rusaruka_Voice[2] = num;
        _ARRW(Rusaruka_Voice, 2) << (num)
        # (Line 52) Rusaruka_Voice[3] = num;
        _ARRW(Rusaruka_Voice, 3) << (num)
        # (Line 53) Rusaruka_Voice[4] = num;
        _ARRW(Rusaruka_Voice, 4) << (num)
        # (Line 54) Rusaruka_Voice[5] = num;
        _ARRW(Rusaruka_Voice, 5) << (num)
        # (Line 55) break;
        EUDBreak()
        # (Line 56) case 2:
    _t2 = EUDSwitchCase()
    # (Line 57) Chtholly_Voice[0] = num;
    if _t2(2):
        _ARRW(Chtholly_Voice, 0) << (num)
        # (Line 58) Chtholly_Voice[1] = num;
        _ARRW(Chtholly_Voice, 1) << (num)
        # (Line 59) Chtholly_Voice[2] = num;
        _ARRW(Chtholly_Voice, 2) << (num)
        # (Line 60) Chtholly_Voice[3] = num;
        _ARRW(Chtholly_Voice, 3) << (num)
        # (Line 61) Chtholly_Voice[4] = num;
        _ARRW(Chtholly_Voice, 4) << (num)
        # (Line 62) Chtholly_Voice[5] = num;
        _ARRW(Chtholly_Voice, 5) << (num)
        # (Line 63) break;
        EUDBreak()
        # (Line 64) case 22:
    _t3 = EUDSwitchCase()
    # (Line 65) Yuuna_Voice[0] = num;
    if _t3(22):
        _ARRW(Yuuna_Voice, 0) << (num)
        # (Line 66) Yuuna_Voice[1] = num;
        _ARRW(Yuuna_Voice, 1) << (num)
        # (Line 67) Yuuna_Voice[2] = num;
        _ARRW(Yuuna_Voice, 2) << (num)
        # (Line 68) Yuuna_Voice[3] = num;
        _ARRW(Yuuna_Voice, 3) << (num)
        # (Line 69) Yuuna_Voice[4] = num;
        _ARRW(Yuuna_Voice, 4) << (num)
        # (Line 70) Yuuna_Voice[5] = num;
        _ARRW(Yuuna_Voice, 5) << (num)
        # (Line 71) break;
        EUDBreak()
        # (Line 72) case 23:
    _t4 = EUDSwitchCase()
    # (Line 73) Mayuri_Voice[0] = num;
    if _t4(23):
        _ARRW(Mayuri_Voice, 0) << (num)
        # (Line 74) Mayuri_Voice[1] = num;
        _ARRW(Mayuri_Voice, 1) << (num)
        # (Line 75) Mayuri_Voice[2] = num;
        _ARRW(Mayuri_Voice, 2) << (num)
        # (Line 76) Mayuri_Voice[3] = num;
        _ARRW(Mayuri_Voice, 3) << (num)
        # (Line 77) Mayuri_Voice[4] = num;
        _ARRW(Mayuri_Voice, 4) << (num)
        # (Line 78) Mayuri_Voice[5] = num;
        _ARRW(Mayuri_Voice, 5) << (num)
        # (Line 79) break;
        EUDBreak()
        # (Line 81) }
    # (Line 82) }
    EUDEndSwitch()
    # (Line 85) function MoveLoc(Unit : TrgUnit, cp : TrgPlayer, x, y)

# (Line 86) {
@EUDTypedFunc([TrgUnit, TrgPlayer, None, None])
def MoveLoc(Unit, cp, x, y):
    # (Line 87) MoveLocation(location[cp], Unit, cp, "Anywhere");
    # (Line 88) addloc(location[cp] - 1, x, y);
    DoActions(MoveLocation(location[cp], Unit, cp, "Anywhere"))
    f_addloc(location[cp] - 1, x, y)
    # (Line 89) }
    # (Line 91) function SkillUnit(cp : TrgPlayer, count, Unit : TrgUnit)

# (Line 92) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit])
def SkillUnit(cp, count_1, Unit):
    # (Line 93) CreateUnit(count, Unit, "[Skill]Unit_Wait_1", cp);
    # (Line 94) SetInvincibility(Enable, Unit, cp, "[Skill]Unit_Wait_ALL");
    DoActions(CreateUnit(count_1, Unit, "[Skill]Unit_Wait_1", cp))
    # (Line 95) MoveUnit(count, Unit, cp, "[Skill]Unit_Wait_ALL", location[cp]);
    DoActions(SetInvincibility(Enable, Unit, cp, "[Skill]Unit_Wait_ALL"))
    # (Line 96) }
    DoActions(MoveUnit(count_1, Unit, cp, "[Skill]Unit_Wait_ALL", location[cp]))
    # (Line 98) function BanReturn(cp)

# (Line 99) {
@EUDFunc
def BanReturn(cp):
    # (Line 100) KillUnit("Protoss Observer", cp);
    # (Line 101) }
    DoActions(KillUnit("Protoss Observer", cp))
    # (Line 103) function HoldPosition(cp)

# (Line 104) {
@EUDFunc
def HoldPosition(cp):
    # (Line 105) MoveLocation(HoldLocation[cp], heroID[cp], cp, "Anywhere");
    # (Line 106) Order(heroID[cp], cp, "Anywhere", Move, HoldLocation[cp]);
    DoActions(MoveLocation(HoldLocation[cp], heroID[cp], cp, "Anywhere"))
    # (Line 107) }
    DoActions(Order(heroID[cp], cp, "Anywhere", Move, HoldLocation[cp]))
    # (Line 109) function DotShape(cp : TrgPlayer, count, Unit : TrgUnit, x, y)

# (Line 110) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def DotShape(cp, count_1, Unit, x, y):
    # (Line 111) MoveLoc(heroID[cp], cp, x, y);
    MoveLoc(heroID[cp], cp, x, y)
    # (Line 112) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 113) }
    # (Line 115) function SkillWait(cp, count)

# (Line 116) {
@EUDFunc
def SkillWait(cp, count_1):
    # (Line 117) delay[cp] = count/83 + 1;
    _ARRW(delay, cp) << (count_1 // 83 + 1)
    # (Line 118) }
    # (Line 120) function SkillWaitB(cp, count)

# (Line 121) {
@EUDFunc
def SkillWaitB(cp, count_1):
    # (Line 122) delayB[cp] = count/83 + 1;
    _ARRW(delayB, cp) << (count_1 // 83 + 1)
    # (Line 123) }
    # (Line 125) function SkillWaitC(cp, count)

# (Line 126) {
@EUDFunc
def SkillWaitC(cp, count_1):
    # (Line 127) delayB[cp] = count/83 + 1;
    _ARRW(delayB, cp) << (count_1 // 83 + 1)
    # (Line 128) }
    # (Line 130) function SkillEnd(cp)

# (Line 131) {
@EUDFunc
def SkillEnd(cp):
    # (Line 132) count[cp] = 999;
    _ARRW(count, cp) << (999)
    # (Line 133) }
    # (Line 135) function SquareShape(cp : TrgPlayer, count, Unit : TrgUnit, x, y)

# (Line 136) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def SquareShape(cp, count_1, Unit, x, y):
    # (Line 137) MoveLoc(heroID[cp], cp, x, y);
    MoveLoc(heroID[cp], cp, x, y)
    # (Line 138) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 139) MoveLoc(heroID[cp], cp, -y, x);
    MoveLoc(heroID[cp], cp, -y, x)
    # (Line 140) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 141) MoveLoc(heroID[cp], cp, -x, -y);
    MoveLoc(heroID[cp], cp, -x, -y)
    # (Line 142) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 143) MoveLoc(heroID[cp], cp, y, -x);
    MoveLoc(heroID[cp], cp, y, -x)
    # (Line 144) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 145) }
    # (Line 147) function SquareShapeAt(cp : TrgPlayer, count, Unit : TrgUnit, x, y, distanceX, distanceY)

# (Line 148) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None])
def SquareShapeAt(cp, count_1, Unit, x, y, distanceX, distanceY):
    # (Line 149) MoveLoc(heroID[cp], cp, x + distanceX, y + distanceY);
    MoveLoc(heroID[cp], cp, x + distanceX, y + distanceY)
    # (Line 150) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 151) MoveLoc(heroID[cp], cp, -y + distanceY, x + distanceX);
    MoveLoc(heroID[cp], cp, -y + distanceY, x + distanceX)
    # (Line 152) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 153) MoveLoc(heroID[cp], cp, -x + distanceX, -y + distanceY);
    MoveLoc(heroID[cp], cp, -x + distanceX, -y + distanceY)
    # (Line 154) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 155) MoveLoc(heroID[cp], cp, y + distanceY, -x + distanceX);
    MoveLoc(heroID[cp], cp, y + distanceY, -x + distanceX)
    # (Line 156) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 157) }
    # (Line 159) function NxNSquareShape(cp : TrgPlayer, count, Unit : TrgUnit, n, interval)

# (Line 160) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def NxNSquareShape(cp, count_1, Unit, n, interval):
    # (Line 161) var i = 0;
    i = EUDVariable()
    i << (0)
    # (Line 162) var destX, destY;
    destX, destY = EUDCreateVariables(2)
    # (Line 163) var distance = interval / 2;
    distance_1 = EUDVariable()
    distance_1 << (interval // 2)
    # (Line 164) var size = n * n;
    size = EUDVariable()
    size << (n * n)
    # (Line 166) for (; i < size / 4; i++)
    if EUDWhile()(i >= size // 4, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 167) {
        # (Line 168) if (n == 1)
        if EUDIf()(n == 1):
            # (Line 169) {
            # (Line 170) MoveLoc(heroID[cp] ,cp, 0, 0);
            MoveLoc(heroID[cp], cp, 0, 0)
            # (Line 171) SkillUnit(cp, count, Unit);
            SkillUnit(cp, count_1, Unit)
            # (Line 172) }
            # (Line 173) else if (n % 2 == 0)
        if EUDElseIf()(n % 2 == 0):
            # (Line 174) {
            # (Line 175) destX = i % (n / 2) + 1;
            destX << (i % (n // 2) + 1)
            # (Line 176) destY = i / (n / 2) + 1;
            destY << (i // (n // 2) + 1)
            # (Line 177) if (destX == 1)
            if EUDIf()(destX == 1):
                # (Line 178) {
                # (Line 179) SquareShape(cp, count, Unit, distance, destY * interval - distance);
                SquareShape(cp, count_1, Unit, distance_1, destY * interval - distance_1)
                # (Line 180) }
                # (Line 181) else if (destY == 1)
            if EUDElseIf()(destY == 1):
                # (Line 182) {
                # (Line 183) SquareShape(cp, count, Unit, destX * interval - distance, distance);
                SquareShape(cp, count_1, Unit, destX * interval - distance_1, distance_1)
                # (Line 184) }
                # (Line 185) else
                # (Line 186) {
            if EUDElse()():
                # (Line 187) SquareShape(cp, count, Unit, destX * interval - distance, destY * interval - distance);
                SquareShape(cp, count_1, Unit, destX * interval - distance_1, destY * interval - distance_1)
                # (Line 188) }
                # (Line 189) }
            EUDEndIf()
            # (Line 190) else if (n % 2 == 1)
        if EUDElseIf()(n % 2 == 1):
            # (Line 191) {
            # (Line 192) destX = i % (n / 2);
            destX << (i % (n // 2))
            # (Line 193) destY = i / (n / 2);
            destY << (i // (n // 2))
            # (Line 195) if (i == 0)
            if EUDIf()(i == 0):
                # (Line 196) {
                # (Line 197) MoveLoc(heroID[cp] ,cp, 0, 0);
                MoveLoc(heroID[cp], cp, 0, 0)
                # (Line 198) SkillUnit(cp, count, Unit);
                SkillUnit(cp, count_1, Unit)
                # (Line 199) }
                # (Line 200) else if (destY == 0)
            if EUDElseIf()(destY == 0):
                # (Line 201) {
                # (Line 202) SquareShape(cp, count, Unit, destX * interval, 0);
                SquareShape(cp, count_1, Unit, destX * interval, 0)
                # (Line 203) }
                # (Line 204) else
                # (Line 205) {
            if EUDElse()():
                # (Line 206) SquareShape(cp, count, Unit, destX * interval + interval, destY * interval);
                SquareShape(cp, count_1, Unit, destX * interval + interval, destY * interval)
                # (Line 207) }
                # (Line 209) if (i == size / 4 - 1)
            EUDEndIf()
            if EUDIf()(i == size // 4 - 1):
                # (Line 210) {
                # (Line 211) SquareShape(cp, count, Unit, (n / 2) * interval, 0);
                SquareShape(cp, count_1, Unit, (n // 2) * interval, 0)
                # (Line 212) }
                # (Line 213) }
            EUDEndIf()
            # (Line 214) }
        EUDEndIf()
        # (Line 215) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 218) function NxNSquareShapeAt(cp : TrgPlayer, count, Unit : TrgUnit, n, interval, distanceX, distanceY)

# (Line 219) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None])
def NxNSquareShapeAt(cp, count_1, Unit, n, interval, distanceX, distanceY):
    # (Line 220) var i = 0;
    i = EUDVariable()
    i << (0)
    # (Line 221) var destX, destY;
    destX, destY = EUDCreateVariables(2)
    # (Line 222) var distance = interval / 2;
    distance_1 = EUDVariable()
    distance_1 << (interval // 2)
    # (Line 223) var size = n * n;
    size = EUDVariable()
    size << (n * n)
    # (Line 225) for (; i < size / 4; i++)
    if EUDWhile()(i >= size // 4, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 226) {
        # (Line 227) if (n == 1)
        if EUDIf()(n == 1):
            # (Line 228) {
            # (Line 229) MoveLoc(heroID[cp] ,cp, distanceX, distanceY);
            MoveLoc(heroID[cp], cp, distanceX, distanceY)
            # (Line 230) SkillUnit(cp, count, Unit);
            SkillUnit(cp, count_1, Unit)
            # (Line 231) }
            # (Line 232) else if (n % 2 == 0)
        if EUDElseIf()(n % 2 == 0):
            # (Line 233) {
            # (Line 234) destX = i % (n / 2) + 1;
            destX << (i % (n // 2) + 1)
            # (Line 235) destY = i / (n / 2) + 1;
            destY << (i // (n // 2) + 1)
            # (Line 237) if (destX == 1)
            if EUDIf()(destX == 1):
                # (Line 238) {
                # (Line 239) SquareShapeAt(cp, count, Unit, distance, destY * interval - distance, distanceX, distanceY);
                SquareShapeAt(cp, count_1, Unit, distance_1, destY * interval - distance_1, distanceX, distanceY)
                # (Line 240) }
                # (Line 241) else if (destY == 1)
            if EUDElseIf()(destY == 1):
                # (Line 242) {
                # (Line 243) SquareShapeAt(cp, count, Unit, destX * interval - distance, distance, distanceX, distanceY);
                SquareShapeAt(cp, count_1, Unit, destX * interval - distance_1, distance_1, distanceX, distanceY)
                # (Line 244) }
                # (Line 245) else
                # (Line 246) {
            if EUDElse()():
                # (Line 247) SquareShapeAt(cp, count, Unit, destX * interval - distance, destY * interval - distance, distanceX, distanceY);
                SquareShapeAt(cp, count_1, Unit, destX * interval - distance_1, destY * interval - distance_1, distanceX, distanceY)
                # (Line 248) }
                # (Line 249) }
            EUDEndIf()
            # (Line 250) else if (n % 2 == 1)
        if EUDElseIf()(n % 2 == 1):
            # (Line 251) {
            # (Line 252) destX = i % (n / 2);
            destX << (i % (n // 2))
            # (Line 253) destY = i / (n / 2);
            destY << (i // (n // 2))
            # (Line 255) if (i == 0)
            if EUDIf()(i == 0):
                # (Line 256) {
                # (Line 257) MoveLoc(heroID[cp] ,cp, distanceX, distanceY);
                MoveLoc(heroID[cp], cp, distanceX, distanceY)
                # (Line 258) SkillUnit(cp, count, Unit);
                SkillUnit(cp, count_1, Unit)
                # (Line 259) }
                # (Line 260) else if (destY == 0)
            if EUDElseIf()(destY == 0):
                # (Line 261) {
                # (Line 262) SquareShapeAt(cp, count, Unit, destX * interval, 0, distanceX, distanceY);
                SquareShapeAt(cp, count_1, Unit, destX * interval, 0, distanceX, distanceY)
                # (Line 263) }
                # (Line 264) else
                # (Line 265) {
            if EUDElse()():
                # (Line 266) SquareShapeAt(cp, count, Unit, destX * interval + interval, destY * interval, distanceX, distanceY);
                SquareShapeAt(cp, count_1, Unit, destX * interval + interval, destY * interval, distanceX, distanceY)
                # (Line 267) }
                # (Line 269) if (i == size / 4 - 1)
            EUDEndIf()
            if EUDIf()(i == size // 4 - 1):
                # (Line 270) {
                # (Line 271) SquareShapeAt(cp, count, Unit, (n / 2) * interval, 0, distanceX, distanceY);
                SquareShapeAt(cp, count_1, Unit, (n // 2) * interval, 0, distanceX, distanceY)
                # (Line 272) }
                # (Line 273) }
            EUDEndIf()
            # (Line 274) }
        EUDEndIf()
        # (Line 275) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 277) function LineShape(cp : TrgPlayer, count, Unit : TrgUnit, degree, n, interval, distance)

# (Line 278) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None])
def LineShape(cp, count_1, Unit, degree, n, interval, distance_1):
    # (Line 279) var i = 0;
    i = EUDVariable()
    i << (0)
    # (Line 281) Table_Sin(cp, degree + 90, distance);
    Table_Sin(cp, degree + 90, distance_1)
    # (Line 282) Table_Cos(cp, degree + 90, distance);
    Table_Cos(cp, degree + 90, distance_1)
    # (Line 283) var x_initial = CosAngle[cp];
    x_initial = EUDVariable()
    x_initial << (CosAngle[cp])
    # (Line 284) var y_initial = SinAngle[cp];
    y_initial = EUDVariable()
    y_initial << (SinAngle[cp])
    # (Line 286) if (n / 2 == 0)
    if EUDIf()(n // 2 == 0):
        # (Line 287) {
        # (Line 288) Table_Sin(cp, degree, interval * (n / 2) - interval / 2);
        Table_Sin(cp, degree, interval * (n // 2) - interval // 2)
        # (Line 289) Table_Cos(cp, degree, interval * (n / 2) - interval / 2);
        Table_Cos(cp, degree, interval * (n // 2) - interval // 2)
        # (Line 290) }
        # (Line 291) else
        # (Line 292) {
    if EUDElse()():
        # (Line 293) Table_Sin(cp, degree, interval * (n / 2));
        Table_Sin(cp, degree, interval * (n // 2))
        # (Line 294) Table_Cos(cp, degree, interval * (n / 2));
        Table_Cos(cp, degree, interval * (n // 2))
        # (Line 295) }
        # (Line 297) x_initial = x_initial + CosAngle[cp];
    EUDEndIf()
    x_initial << (x_initial + CosAngle[cp])
    # (Line 298) y_initial = y_initial + SinAngle[cp];
    y_initial << (y_initial + SinAngle[cp])
    # (Line 300) Table_Sin(cp, degree, interval);
    Table_Sin(cp, degree, interval)
    # (Line 301) Table_Cos(cp, degree, interval);
    Table_Cos(cp, degree, interval)
    # (Line 303) for (; i < n; i++)
    if EUDWhile()(i >= n, neg=True):
        def _t3():
            i.__iadd__(1)
        # (Line 304) {
        # (Line 305) MoveLoc(heroID[cp], cp, x_initial - i * CosAngle[cp], y_initial - i * SinAngle[cp]);
        MoveLoc(heroID[cp], cp, x_initial - i * CosAngle[cp], y_initial - i * SinAngle[cp])
        # (Line 306) SkillUnit(cp, count, Unit);
        SkillUnit(cp, count_1, Unit)
        # (Line 307) }
        # (Line 309) }
        EUDSetContinuePoint()
        _t3()
    EUDEndWhile()
    # (Line 312) function LineShapeAt(cp : TrgPlayer, count, Unit : TrgUnit, degree, n, interval, distanceX, distanceY)

# (Line 313) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None, None])
def LineShapeAt(cp, count_1, Unit, degree, n, interval, distanceX, distanceY):
    # (Line 314) var i = 0;
    i = EUDVariable()
    i << (0)
    # (Line 315) var distance = interval / 2;
    distance_1 = EUDVariable()
    distance_1 << (interval // 2)
    # (Line 317) Table_Sin(cp, degree, distance);
    Table_Sin(cp, degree, distance_1)
    # (Line 318) Table_Cos(cp, degree, distance);
    Table_Cos(cp, degree, distance_1)
    # (Line 320) var gradientX = CosAngle[cp] / 2;
    gradientX = EUDVariable()
    gradientX << (CosAngle[cp] // 2)
    # (Line 321) var gradientY = SinAngle[cp] / 2;
    gradientY = EUDVariable()
    gradientY << (SinAngle[cp] // 2)
    # (Line 323) var Angle_X, Angle_Y;
    Angle_X, Angle_Y = EUDCreateVariables(2)
    # (Line 325) Table_Sin(cp, degree, interval);
    Table_Sin(cp, degree, interval)
    # (Line 326) Table_Cos(cp, degree, interval);
    Table_Cos(cp, degree, interval)
    # (Line 328) for (; i < n; i++)
    if EUDWhile()(i >= n, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 329) {
        # (Line 330) Angle_X = CosAngle[cp] * i;
        Angle_X << (CosAngle[cp] * i)
        # (Line 331) Angle_Y = SinAngle[cp] * i;
        Angle_Y << (SinAngle[cp] * i)
        # (Line 333) if (n % 2 == 0 && i != n / 2)
        if EUDIf()(EUDSCAnd()(n % 2 == 0)(i == n // 2, neg=True)()):
            # (Line 334) {
            # (Line 335) MoveLoc(heroID[cp], cp, -Angle_X - gradientX + distanceX, Angle_Y + gradientY + distanceY);
            MoveLoc(heroID[cp], cp, -Angle_X - gradientX + distanceX, Angle_Y + gradientY + distanceY)
            # (Line 336) SkillUnit(cp, count, Unit);
            SkillUnit(cp, count_1, Unit)
            # (Line 337) MoveLoc(heroID[cp], cp, Angle_X + gradientX + distanceX, -Angle_Y - gradientY + distanceY);
            MoveLoc(heroID[cp], cp, Angle_X + gradientX + distanceX, -Angle_Y - gradientY + distanceY)
            # (Line 338) SkillUnit(cp, count, Unit);
            SkillUnit(cp, count_1, Unit)
            # (Line 339) }
            # (Line 340) else if (n % 2 == 1)
        if EUDElseIf()(n % 2 == 1):
            # (Line 341) {
            # (Line 342) if (i == 0)
            if EUDIf()(i == 0):
                # (Line 343) {
                # (Line 344) MoveLoc(heroID[cp], cp, distanceX, distanceY);
                MoveLoc(heroID[cp], cp, distanceX, distanceY)
                # (Line 345) SkillUnit(cp, count, Unit);
                SkillUnit(cp, count_1, Unit)
                # (Line 346) }
                # (Line 347) else
                # (Line 348) {
            if EUDElse()():
                # (Line 349) MoveLoc(heroID[cp], cp, -Angle_X + distanceX, Angle_Y + distanceY);
                MoveLoc(heroID[cp], cp, -Angle_X + distanceX, Angle_Y + distanceY)
                # (Line 350) SkillUnit(cp, count, Unit);
                SkillUnit(cp, count_1, Unit)
                # (Line 351) MoveLoc(heroID[cp], cp, Angle_X + distanceX, -Angle_Y + distanceY);
                MoveLoc(heroID[cp], cp, Angle_X + distanceX, -Angle_Y + distanceY)
                # (Line 352) SkillUnit(cp, count, Unit);
                SkillUnit(cp, count_1, Unit)
                # (Line 353) }
                # (Line 354) }
            EUDEndIf()
            # (Line 355) }
        EUDEndIf()
        # (Line 357) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 359) function CrossShape(cp : TrgPlayer, count, Unit : TrgUnit, degree, n, interval)

# (Line 360) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None])
def CrossShape(cp, count_1, Unit, degree, n, interval):
    # (Line 361) var i = 0;
    i = EUDVariable()
    i << (0)
    # (Line 362) var distance = interval / 2;
    distance_1 = EUDVariable()
    distance_1 << (interval // 2)
    # (Line 364) Table_Sin(cp, degree, distance);
    Table_Sin(cp, degree, distance_1)
    # (Line 365) Table_Cos(cp, degree, distance);
    Table_Cos(cp, degree, distance_1)
    # (Line 367) var gradientX = CosAngle[cp] / 2;
    gradientX = EUDVariable()
    gradientX << (CosAngle[cp] // 2)
    # (Line 368) var gradientY = SinAngle[cp] / 2;
    gradientY = EUDVariable()
    gradientY << (SinAngle[cp] // 2)
    # (Line 370) var Angle_X, Angle_Y;
    Angle_X, Angle_Y = EUDCreateVariables(2)
    # (Line 372) Table_Sin(cp, degree, interval);
    Table_Sin(cp, degree, interval)
    # (Line 373) Table_Cos(cp, degree, interval);
    Table_Cos(cp, degree, interval)
    # (Line 375) for (; i < n; i++)
    if EUDWhile()(i >= n, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 376) {
        # (Line 377) Angle_X = CosAngle[cp] * i;
        Angle_X << (CosAngle[cp] * i)
        # (Line 378) Angle_Y = SinAngle[cp] * i;
        Angle_Y << (SinAngle[cp] * i)
        # (Line 380) if (n % 2 == 0 && i != n / 2)
        if EUDIf()(EUDSCAnd()(n % 2 == 0)(i == n // 2, neg=True)()):
            # (Line 381) {
            # (Line 382) SquareShape(cp, count, Unit, Angle_X + gradientX, Angle_Y + gradientY);
            SquareShape(cp, count_1, Unit, Angle_X + gradientX, Angle_Y + gradientY)
            # (Line 383) }
            # (Line 384) else if (n % 2 == 1)
        if EUDElseIf()(n % 2 == 1):
            # (Line 385) {
            # (Line 386) if (i == 0)
            if EUDIf()(i == 0):
                # (Line 387) {
                # (Line 388) MoveLoc(heroID[cp], cp, 0, 0);
                MoveLoc(heroID[cp], cp, 0, 0)
                # (Line 389) }
                # (Line 390) else
                # (Line 391) {
            if EUDElse()():
                # (Line 392) SquareShape(cp, count, Unit, Angle_X, Angle_Y);
                SquareShape(cp, count_1, Unit, Angle_X, Angle_Y)
                # (Line 393) }
                # (Line 394) }
            EUDEndIf()
            # (Line 395) }
        EUDEndIf()
        # (Line 396) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 398) function Table_Sin(cp, degree, distance)

# (Line 399) {
@EUDFunc
def Table_Sin(cp, degree, distance_1):
    # (Line 400) degree = degree % 360;
    degree << (degree % 360)
    # (Line 401) SinAngle[cp] = SinTableArray[degree];
    _ARRW(SinAngle, cp) << (SinTableArray[degree])
    # (Line 403) if (SinAngle[cp] > 2147483648)
    if EUDIf()(SinAngle[cp] <= 2147483648, neg=True):
        # (Line 404) {
        # (Line 405) SinAngle[cp] = -SinAngle[cp];
        _ARRW(SinAngle, cp) << (-SinAngle[cp])
        # (Line 406) SinAngle[cp] = (SinAngle[cp] * distance) / 100;
        _ARRW(SinAngle, cp) << ((SinAngle[cp] * distance_1) // 100)
        # (Line 407) SinAngle[cp] = -SinAngle[cp];
        _ARRW(SinAngle, cp) << (-SinAngle[cp])
        # (Line 408) }
        # (Line 409) else
        # (Line 410) {
    if EUDElse()():
        # (Line 411) SinAngle[cp] = (SinAngle[cp] * distance) / 100;
        _ARRW(SinAngle, cp) << ((SinAngle[cp] * distance_1) // 100)
        # (Line 412) }
        # (Line 413) }
    EUDEndIf()
    # (Line 415) function Table_Cos(cp, degree, distance)

# (Line 416) {
@EUDFunc
def Table_Cos(cp, degree, distance_1):
    # (Line 417) degree = degree % 360;
    degree << (degree % 360)
    # (Line 418) CosAngle[cp] = CosTableArray[degree];
    _ARRW(CosAngle, cp) << (CosTableArray[degree])
    # (Line 420) if (CosAngle[cp] > 2147483648)
    if EUDIf()(CosAngle[cp] <= 2147483648, neg=True):
        # (Line 421) {
        # (Line 422) CosAngle[cp] = -CosAngle[cp];
        _ARRW(CosAngle, cp) << (-CosAngle[cp])
        # (Line 423) CosAngle[cp] = (CosAngle[cp] * distance) / 100;
        _ARRW(CosAngle, cp) << ((CosAngle[cp] * distance_1) // 100)
        # (Line 424) CosAngle[cp] = -CosAngle[cp];
        _ARRW(CosAngle, cp) << (-CosAngle[cp])
        # (Line 425) }
        # (Line 426) else
        # (Line 427) {
    if EUDElse()():
        # (Line 428) CosAngle[cp] = (CosAngle[cp] * distance) / 100;
        _ARRW(CosAngle, cp) << ((CosAngle[cp] * distance_1) // 100)
        # (Line 429) }
        # (Line 430) }
    EUDEndIf()
    # (Line 431) function EdgeShape(cp : TrgPlayer, count, Unit : TrgUnit, degree, n, interval)

# (Line 432) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None])
def EdgeShape(cp, count_1, Unit, degree, n, interval):
    # (Line 433) var i = 0;
    i = EUDVariable()
    i << (0)
    # (Line 435) Table_Sin(cp, degree, interval * 14 / 10);
    Table_Sin(cp, degree, interval * 14 // 10)
    # (Line 436) Table_Cos(cp, degree, interval * 14 / 10);
    Table_Cos(cp, degree, interval * 14 // 10)
    # (Line 438) var x_o = CosAngle[cp];
    x_o = EUDVariable()
    x_o << (CosAngle[cp])
    # (Line 439) var y_o = SinAngle[cp];
    y_o = EUDVariable()
    y_o << (SinAngle[cp])
    # (Line 441) var distance = (interval * 2) / (n - 1);
    distance_1 = EUDVariable()
    distance_1 << ((interval * 2) // (n - 1))
    # (Line 443) Table_Sin(cp, degree + 45, distance);
    Table_Sin(cp, degree + 45, distance_1)
    # (Line 444) Table_Cos(cp, degree + 45, distance);
    Table_Cos(cp, degree + 45, distance_1)
    # (Line 446) var distance_x = CosAngle[cp];
    distance_x = EUDVariable()
    distance_x << (CosAngle[cp])
    # (Line 447) var distance_y = SinAngle[cp];
    distance_y = EUDVariable()
    distance_y << (SinAngle[cp])
    # (Line 449) if (n == 1)
    if EUDIf()(n == 1):
        # (Line 450) {
        # (Line 451) DotShape(cp, 1, Unit, 0, 0);
        DotShape(cp, 1, Unit, 0, 0)
        # (Line 452) }
        # (Line 453) else if (n > 1)
    if EUDElseIf()(n <= 1, neg=True):
        # (Line 454) {
        # (Line 455) for (; i < n - 1; i++)
        if EUDWhile()(i >= n - 1, neg=True):
            def _t4():
                i.__iadd__(1)
            # (Line 456) {
            # (Line 457) SquareShape(cp, 1, Unit, x_o - (distance_x * i), y_o - (distance_y * i));
            SquareShape(cp, 1, Unit, x_o - (distance_x * i), y_o - (distance_y * i))
            # (Line 458) }
            # (Line 459) }
            EUDSetContinuePoint()
            _t4()
        EUDEndWhile()
        # (Line 460) }
    EUDEndIf()
