## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import py_math;
import math
# (Line 3) const step		= PVariable();			// SkillStep
step = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 4) const count 		= PVariable();			// SkillCount
count = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 5) const loop 		= PVariable();			// SkillLoop
loop = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 6) const delay		= PVariable();			// wait(value);
delay = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 7) const wait		= PVariable();			// SkillWait
wait = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 9) const location 	= PVariable();			// 로케이션 번호
location = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 10) const heroID 	= PVariable();			// 영웅 유닛 번호
heroID = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 12) const UltimateA	= PVariable();			// 궁극기 1번 소모량
UltimateA = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 13) const UltimateB	= PVariable();			// 궁극기 2번 소모량
UltimateB = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 14) const UltimateC	= PVariable();			// 궁극기 3번 소모량
UltimateC = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 16) const UniqueA	= PVariable();			// 유니크 1번 쿨타임
UniqueA = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 18) const distance	= PVariable();			// 거리 관련 변수
distance = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 19) const SinAngle 	= PVariable();			// Sin 변수
SinAngle = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 20) const CosAngle 	= PVariable();			// Cos 변수
CosAngle = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 22) const CosTableArray = EUDArray(py_eval("[int(round(100*math.cos(math.radians(t)))) for t in range(361)]"));
CosTableArray = _CGFW(lambda: [EUDArray(eval("[int(round(100*math.cos(math.radians(t)))) for t in range(361)]"))], 1)[0]
# (Line 23) const SinTableArray 	= EUDArray(py_eval("[int(round(100*math.sin(math.radians(t)))) for t in range(361)]"));
SinTableArray = _CGFW(lambda: [EUDArray(eval("[int(round(100*math.sin(math.radians(t)))) for t in range(361)]"))], 1)[0]
# (Line 25) const Rusaruka_Voice 	= PVariable();
Rusaruka_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 26) const Yuuna_Voice 		= PVariable();
Yuuna_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 28) function Voice_Routine(cp, num)
# (Line 29) {
@EUDFunc
def Voice_Routine(cp, num):
    # (Line 30) switch(heroID[cp])
    EUDSwitch(heroID[cp])
    # (Line 31) {
    # (Line 32) case 1:
    _t1 = EUDSwitchCase()
    # (Line 33) Rusaruka_Voice[0] = num;
    if _t1(1):
        _ARRW(Rusaruka_Voice, 0) << (num)
        # (Line 34) Rusaruka_Voice[1] = num;
        _ARRW(Rusaruka_Voice, 1) << (num)
        # (Line 35) Rusaruka_Voice[2] = num;
        _ARRW(Rusaruka_Voice, 2) << (num)
        # (Line 36) Rusaruka_Voice[3] = num;
        _ARRW(Rusaruka_Voice, 3) << (num)
        # (Line 37) Rusaruka_Voice[4] = num;
        _ARRW(Rusaruka_Voice, 4) << (num)
        # (Line 38) Rusaruka_Voice[5] = num;
        _ARRW(Rusaruka_Voice, 5) << (num)
        # (Line 39) break;
        EUDBreak()
        # (Line 40) case 22:
    _t2 = EUDSwitchCase()
    # (Line 41) Yuuna_Voice[0] = num;
    if _t2(22):
        _ARRW(Yuuna_Voice, 0) << (num)
        # (Line 42) Yuuna_Voice[1] = num;
        _ARRW(Yuuna_Voice, 1) << (num)
        # (Line 43) Yuuna_Voice[2] = num;
        _ARRW(Yuuna_Voice, 2) << (num)
        # (Line 44) Yuuna_Voice[3] = num;
        _ARRW(Yuuna_Voice, 3) << (num)
        # (Line 45) Yuuna_Voice[4] = num;
        _ARRW(Yuuna_Voice, 4) << (num)
        # (Line 46) Yuuna_Voice[5] = num;
        _ARRW(Yuuna_Voice, 5) << (num)
        # (Line 47) break;
        EUDBreak()
        # (Line 48) }
    # (Line 49) }
    EUDEndSwitch()
    # (Line 51) function Table_Sin(cp, degree, distance);

# (Line 52) function Table_Cos(cp, degree, distance);
# (Line 54) function MoveLoc(Unit : TrgUnit, location : TrgLocation, cp : TrgPlayer, x, y)
# (Line 55) {
@EUDTypedFunc([TrgUnit, TrgLocation, TrgPlayer, None, None])
def MoveLoc(Unit, location_1, cp, x, y):
    # (Line 56) MoveLocation(location, Unit, cp, "Anywhere");
    # (Line 57) addloc(location - 1, x, y);
    DoActions(MoveLocation(location_1, Unit, cp, "Anywhere"))
    f_addloc(location_1 - 1, x, y)
    # (Line 58) }
    # (Line 60) function SkillUnit(count, Unit : TrgUnit, location : TrgLocation, cp : TrgPlayer)

# (Line 61) {
@EUDTypedFunc([None, TrgUnit, TrgLocation, TrgPlayer])
def SkillUnit(count_1, Unit, location_1, cp):
    # (Line 62) CreateUnit(count, Unit, "[Skill]Unit_Wait_1", cp);
    # (Line 63) SetInvincibility(Enable, Unit, cp, "[Skill]Unit_Wait_ALL");
    DoActions(CreateUnit(count_1, Unit, "[Skill]Unit_Wait_1", cp))
    # (Line 64) MoveUnit(count, Unit, cp, "[Skill]Unit_Wait_ALL", location);
    DoActions(SetInvincibility(Enable, Unit, cp, "[Skill]Unit_Wait_ALL"))
    # (Line 65) }
    DoActions(MoveUnit(count_1, Unit, cp, "[Skill]Unit_Wait_ALL", location_1))
    # (Line 67) function SkillWait(cp, count)

# (Line 68) {
@EUDFunc
def SkillWait(cp, count_1):
    # (Line 69) delay[cp] = count/83 + 1;
    _ARRW(delay, cp) << (count_1 // 83 + 1)
    # (Line 70) }
    # (Line 72) function SkillEnd(cp)

# (Line 73) {
@EUDFunc
def SkillEnd(cp):
    # (Line 74) wait[cp] = 12;
    _ARRW(wait, cp) << (12)
    # (Line 75) }
    # (Line 77) function SquareShape(heroID : TrgUnit, count, Unit : TrgUnit, location : TrgLocation, cp : TrgPlayer, x, y)

# (Line 78) {
@EUDTypedFunc([TrgUnit, None, TrgUnit, TrgLocation, TrgPlayer, None, None])
def SquareShape(heroID_1, count_1, Unit, location_1, cp, x, y):
    # (Line 79) MoveLoc(heroID, location, cp, x, y);
    MoveLoc(heroID_1, location_1, cp, x, y)
    # (Line 80) SkillUnit(count, Unit, location, cp);
    SkillUnit(count_1, Unit, location_1, cp)
    # (Line 81) MoveLoc(heroID, location, cp, -y, x);
    MoveLoc(heroID_1, location_1, cp, -y, x)
    # (Line 82) SkillUnit(count, Unit, location, cp);
    SkillUnit(count_1, Unit, location_1, cp)
    # (Line 83) MoveLoc(heroID, location, cp, -x, -y);
    MoveLoc(heroID_1, location_1, cp, -x, -y)
    # (Line 84) SkillUnit(count, Unit, location, cp);
    SkillUnit(count_1, Unit, location_1, cp)
    # (Line 85) MoveLoc(heroID, location, cp, y, -x);
    MoveLoc(heroID_1, location_1, cp, y, -x)
    # (Line 86) SkillUnit(count, Unit, location, cp);
    SkillUnit(count_1, Unit, location_1, cp)
    # (Line 87) }
    # (Line 89) function NxNSquareShape(heroID : TrgUnit, count, Unit : TrgUnit, location : TrgLocation, cp : TrgPlayer, n, interval)

# (Line 90) {
@EUDTypedFunc([TrgUnit, None, TrgUnit, TrgLocation, TrgPlayer, None, None])
def NxNSquareShape(heroID_1, count_1, Unit, location_1, cp, n, interval):
    # (Line 91) var i = 0;
    i = EUDVariable()
    i << (0)
    # (Line 92) var destX, destY;
    destX, destY = EUDCreateVariables(2)
    # (Line 93) var distance = interval / 2;
    distance_1 = EUDVariable()
    distance_1 << (interval // 2)
    # (Line 94) var size = n * n;
    size = EUDVariable()
    size << (n * n)
    # (Line 96) for (; i < size / 4; i++)
    if EUDWhile()(i >= size // 4, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 97) {
        # (Line 98) if (n == 1)
        if EUDIf()(n == 1):
            # (Line 99) {
            # (Line 100) MoveLoc(heroID, location, cp, 0, 0);
            MoveLoc(heroID_1, location_1, cp, 0, 0)
            # (Line 101) SkillUnit(count, Unit, location, cp);
            SkillUnit(count_1, Unit, location_1, cp)
            # (Line 102) }
            # (Line 103) else if (n % 2 == 0)
        if EUDElseIf()(n % 2 == 0):
            # (Line 104) {
            # (Line 105) destX = i % (n / 2) + 1;
            destX << (i % (n // 2) + 1)
            # (Line 106) destY = i / (n / 2) + 1;
            destY << (i // (n // 2) + 1)
            # (Line 107) if (destX == 1)
            if EUDIf()(destX == 1):
                # (Line 108) {
                # (Line 109) SquareShape(heroID, count, Unit, location, cp, distance, destY * interval - distance);
                SquareShape(heroID_1, count_1, Unit, location_1, cp, distance_1, destY * interval - distance_1)
                # (Line 110) }
                # (Line 111) else if (destY == 1)
            if EUDElseIf()(destY == 1):
                # (Line 112) {
                # (Line 113) SquareShape(heroID, count, Unit, location, cp, destX * interval - distance, distance);
                SquareShape(heroID_1, count_1, Unit, location_1, cp, destX * interval - distance_1, distance_1)
                # (Line 114) }
                # (Line 115) else
                # (Line 116) {
            if EUDElse()():
                # (Line 117) SquareShape(heroID, count, Unit, location, cp, destX * interval - distance, destY * interval - distance);
                SquareShape(heroID_1, count_1, Unit, location_1, cp, destX * interval - distance_1, destY * interval - distance_1)
                # (Line 118) }
                # (Line 119) }
            EUDEndIf()
            # (Line 120) else if (n % 2 == 1)
        if EUDElseIf()(n % 2 == 1):
            # (Line 121) {
            # (Line 122) destX = i % (n / 2);
            destX << (i % (n // 2))
            # (Line 123) destY = i / (n / 2);
            destY << (i // (n // 2))
            # (Line 125) if (i == 0)
            if EUDIf()(i == 0):
                # (Line 126) {
                # (Line 127) MoveLoc(heroID, location, cp, 0, 0);
                MoveLoc(heroID_1, location_1, cp, 0, 0)
                # (Line 128) SkillUnit(count, Unit, location, cp);
                SkillUnit(count_1, Unit, location_1, cp)
                # (Line 129) }
                # (Line 130) else if (destY == 0)
            if EUDElseIf()(destY == 0):
                # (Line 131) {
                # (Line 132) SquareShape(heroID, count, Unit, location, cp, destX * interval, 0);
                SquareShape(heroID_1, count_1, Unit, location_1, cp, destX * interval, 0)
                # (Line 133) }
                # (Line 134) else
                # (Line 135) {
            if EUDElse()():
                # (Line 136) SquareShape(heroID, count, Unit, location, cp, destX * interval + interval, destY * interval);
                SquareShape(heroID_1, count_1, Unit, location_1, cp, destX * interval + interval, destY * interval)
                # (Line 137) }
                # (Line 139) if (i == size / 4 - 1)
            EUDEndIf()
            if EUDIf()(i == size // 4 - 1):
                # (Line 140) {
                # (Line 141) SquareShape(heroID, count, Unit, location, cp, (n / 2) * interval, 0);
                SquareShape(heroID_1, count_1, Unit, location_1, cp, (n // 2) * interval, 0)
                # (Line 142) }
                # (Line 143) }
            EUDEndIf()
            # (Line 144) }
        EUDEndIf()
        # (Line 145) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 147) function lineShape(heroID : TrgUnit, count, Unit : TrgUnit, location : TrgLocation, cp : TrgPlayer, degree, n, interval, distanceX, distanceY)

# (Line 148) {
@EUDTypedFunc([TrgUnit, None, TrgUnit, TrgLocation, TrgPlayer, None, None, None, None, None])
def f_lineShape(heroID_1, count_1, Unit, location_1, cp, degree, n, interval, distanceX, distanceY):
    # (Line 149) var i = 0;
    i = EUDVariable()
    i << (0)
    # (Line 150) var distance = interval / 2;
    distance_1 = EUDVariable()
    distance_1 << (interval // 2)
    # (Line 152) Table_Sin(cp, degree, interval);
    Table_Sin(cp, degree, interval)
    # (Line 153) Table_Cos(cp, degree, interval);
    Table_Cos(cp, degree, interval)
    # (Line 155) var gradientX = CosAngle[cp] / 2;
    gradientX = EUDVariable()
    gradientX << (CosAngle[cp] // 2)
    # (Line 156) var gradientY = SinAngle[cp] / 2;
    gradientY = EUDVariable()
    gradientY << (SinAngle[cp] // 2)
    # (Line 158) for (; i < n / 2 + 1; i++)
    if EUDWhile()(i >= n // 2 + 1, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 159) {
        # (Line 160) if (n % 2 == 0 && i != n / 2)
        if EUDIf()(EUDSCAnd()(n % 2 == 0)(i == n // 2, neg=True)()):
            # (Line 161) {
            # (Line 162) MoveLoc(heroID, location, cp, -CosAngle[cp] * i - gradientX + (distanceX * i), SinAngle[cp] * i + gradientY + (distanceY * i));
            MoveLoc(heroID_1, location_1, cp, -CosAngle[cp] * i - gradientX + (distanceX * i), SinAngle[cp] * i + gradientY + (distanceY * i))
            # (Line 163) SkillUnit(count, Unit, location, cp);
            SkillUnit(count_1, Unit, location_1, cp)
            # (Line 164) MoveLoc(heroID, location, cp, CosAngle[cp] * i + gradientX + (distanceX * i), -SinAngle[cp] * i - gradientY - (distanceY * i));
            MoveLoc(heroID_1, location_1, cp, CosAngle[cp] * i + gradientX + (distanceX * i), -SinAngle[cp] * i - gradientY - (distanceY * i))
            # (Line 165) SkillUnit(count, Unit, location, cp);
            SkillUnit(count_1, Unit, location_1, cp)
            # (Line 166) }
            # (Line 167) else if (n % 2 == 1)
        if EUDElseIf()(n % 2 == 1):
            # (Line 168) {
            # (Line 169) if (i == 0)
            if EUDIf()(i == 0):
                # (Line 170) {
                # (Line 171) MoveLoc(heroID, location, cp, distanceX, distanceY);
                MoveLoc(heroID_1, location_1, cp, distanceX, distanceY)
                # (Line 172) SkillUnit(count, Unit, location, cp);
                SkillUnit(count_1, Unit, location_1, cp)
                # (Line 173) }
                # (Line 174) else
                # (Line 175) {
            if EUDElse()():
                # (Line 176) MoveLoc(heroID, location, cp, -CosAngle[cp] * i - (distanceX * i), SinAngle[cp] * i + (distanceY * i));
                MoveLoc(heroID_1, location_1, cp, -CosAngle[cp] * i - (distanceX * i), SinAngle[cp] * i + (distanceY * i))
                # (Line 177) SkillUnit(count, Unit, location, cp);
                SkillUnit(count_1, Unit, location_1, cp)
                # (Line 178) MoveLoc(heroID, location, cp, CosAngle[cp] * i + (distanceX * i), -SinAngle[cp] * i - (distanceY * i));
                MoveLoc(heroID_1, location_1, cp, CosAngle[cp] * i + (distanceX * i), -SinAngle[cp] * i - (distanceY * i))
                # (Line 179) SkillUnit(count, Unit, location, cp);
                SkillUnit(count_1, Unit, location_1, cp)
                # (Line 180) }
                # (Line 181) }
            EUDEndIf()
            # (Line 182) }
        EUDEndIf()
        # (Line 183) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 186) function LineShape(heroID : TrgUnit, count, Unit : TrgUnit, location : TrgLocation, cp : TrgPlayer, degree, n, interval, distance)

# (Line 187) {
@EUDTypedFunc([TrgUnit, None, TrgUnit, TrgLocation, TrgPlayer, None, None, None, None])
def LineShape(heroID_1, count_1, Unit, location_1, cp, degree, n, interval, distance_1):
    # (Line 188) var i = 0;
    i = EUDVariable()
    i << (0)
    # (Line 190) Table_Sin(cp, degree + 90, distance);
    Table_Sin(cp, degree + 90, distance_1)
    # (Line 191) Table_Cos(cp, degree + 90, distance);
    Table_Cos(cp, degree + 90, distance_1)
    # (Line 192) var x_initial = CosAngle[cp];
    x_initial = EUDVariable()
    x_initial << (CosAngle[cp])
    # (Line 193) var y_initial = SinAngle[cp];
    y_initial = EUDVariable()
    y_initial << (SinAngle[cp])
    # (Line 195) if (n / 2 == 0)
    if EUDIf()(n // 2 == 0):
        # (Line 196) {
        # (Line 197) Table_Sin(cp, degree, interval * (n / 2) - interval / 2);
        Table_Sin(cp, degree, interval * (n // 2) - interval // 2)
        # (Line 198) Table_Cos(cp, degree, interval * (n / 2) - interval / 2);
        Table_Cos(cp, degree, interval * (n // 2) - interval // 2)
        # (Line 199) }
        # (Line 200) else
        # (Line 201) {
    if EUDElse()():
        # (Line 202) Table_Sin(cp, degree, interval * (n / 2));
        Table_Sin(cp, degree, interval * (n // 2))
        # (Line 203) Table_Cos(cp, degree, interval * (n / 2));
        Table_Cos(cp, degree, interval * (n // 2))
        # (Line 204) }
        # (Line 206) x_initial = x_initial + CosAngle[cp];
    EUDEndIf()
    x_initial << (x_initial + CosAngle[cp])
    # (Line 207) y_initial = y_initial + SinAngle[cp];
    y_initial << (y_initial + SinAngle[cp])
    # (Line 209) Table_Sin(cp, degree, interval);
    Table_Sin(cp, degree, interval)
    # (Line 210) Table_Cos(cp, degree, interval);
    Table_Cos(cp, degree, interval)
    # (Line 212) for (; i < n; i++)
    if EUDWhile()(i >= n, neg=True):
        def _t3():
            i.__iadd__(1)
        # (Line 213) {
        # (Line 214) MoveLoc(heroID, location, cp, x_initial - i * CosAngle[cp], y_initial - i * SinAngle[cp]);
        MoveLoc(heroID_1, location_1, cp, x_initial - i * CosAngle[cp], y_initial - i * SinAngle[cp])
        # (Line 215) SkillUnit(count, Unit, location, cp);
        SkillUnit(count_1, Unit, location_1, cp)
        # (Line 216) }
        # (Line 218) }
        EUDSetContinuePoint()
        _t3()
    EUDEndWhile()
    # (Line 220) function Table_Sin(cp, degree, distance)

# (Line 221) {
@EUDFunc
def Table_Sin(cp, degree, distance_1):
    # (Line 222) degree = degree % 360;
    degree << (degree % 360)
    # (Line 223) SinAngle[cp] = SinTableArray[degree];
    _ARRW(SinAngle, cp) << (SinTableArray[degree])
    # (Line 225) if (SinAngle[cp] > 2147483648)
    if EUDIf()(SinAngle[cp] <= 2147483648, neg=True):
        # (Line 226) {
        # (Line 227) SinAngle[cp] = -SinAngle[cp];
        _ARRW(SinAngle, cp) << (-SinAngle[cp])
        # (Line 228) SinAngle[cp] = (SinAngle[cp] * distance) / 100;
        _ARRW(SinAngle, cp) << ((SinAngle[cp] * distance_1) // 100)
        # (Line 229) SinAngle[cp] = -SinAngle[cp];
        _ARRW(SinAngle, cp) << (-SinAngle[cp])
        # (Line 230) }
        # (Line 231) else
        # (Line 232) {
    if EUDElse()():
        # (Line 233) SinAngle[cp] = (SinAngle[cp] * distance) / 100;
        _ARRW(SinAngle, cp) << ((SinAngle[cp] * distance_1) // 100)
        # (Line 234) }
        # (Line 235) }
    EUDEndIf()
    # (Line 237) function Table_Cos(cp, degree, distance)

# (Line 238) {
@EUDFunc
def Table_Cos(cp, degree, distance_1):
    # (Line 239) degree = degree % 360;
    degree << (degree % 360)
    # (Line 240) CosAngle[cp] = CosTableArray[degree];
    _ARRW(CosAngle, cp) << (CosTableArray[degree])
    # (Line 242) if (CosAngle[cp] > 2147483648)
    if EUDIf()(CosAngle[cp] <= 2147483648, neg=True):
        # (Line 243) {
        # (Line 244) CosAngle[cp] = -CosAngle[cp];
        _ARRW(CosAngle, cp) << (-CosAngle[cp])
        # (Line 245) CosAngle[cp] = (CosAngle[cp] * distance) / 100;
        _ARRW(CosAngle, cp) << ((CosAngle[cp] * distance_1) // 100)
        # (Line 246) CosAngle[cp] = -CosAngle[cp];
        _ARRW(CosAngle, cp) << (-CosAngle[cp])
        # (Line 247) }
        # (Line 248) else
        # (Line 249) {
    if EUDElse()():
        # (Line 250) CosAngle[cp] = (CosAngle[cp] * distance) / 100;
        _ARRW(CosAngle, cp) << ((CosAngle[cp] * distance_1) // 100)
        # (Line 251) }
        # (Line 252) }
    EUDEndIf()
