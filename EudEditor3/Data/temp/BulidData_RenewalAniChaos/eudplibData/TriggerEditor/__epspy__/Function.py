## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import py_math;
import math
# (Line 3) const step		= PVariable();			// 179번 유닛 `SkillStep
step = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 4) const count 		= PVariable();			// 181번 유닛 `SkillCount
count = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 5) const loop 		= PVariable();			// 212번 유닛 `SkillLoop
loop = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 7) const location 	= PVariable();			// 로케이션 번호
location = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 8) const heroID 	= PVariable();			// 영웅 유닛 번호
heroID = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 10) const UltimateA	= PVariable();			// 궁극기 1번 소모량
UltimateA = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 11) const UltimateB	= PVariable();			// 궁극기 2번 소모량
UltimateB = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 12) const UltimateC	= PVariable();			// 궁극기 3번 소모량
UltimateC = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 14) const UniqueA	= PVariable();			// 유니크 1번 쿨타임
UniqueA = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 16) const distance	= PVariable();			// 거리 관련 변수
distance = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 17) const SinAngle 	= PVariable();			// Sin 변수
SinAngle = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 18) const CosAngle 	= PVariable();			// Cos 변수
CosAngle = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 20) const CosTableArray = EUDArray(py_eval("[int(round(100*math.cos(math.radians(t)))) for t in range(361)]"));
CosTableArray = _CGFW(lambda: [EUDArray(eval("[int(round(100*math.cos(math.radians(t)))) for t in range(361)]"))], 1)[0]
# (Line 21) const SinTableArray 	= EUDArray(py_eval("[int(round(100*math.sin(math.radians(t)))) for t in range(361)]"));
SinTableArray = _CGFW(lambda: [EUDArray(eval("[int(round(100*math.sin(math.radians(t)))) for t in range(361)]"))], 1)[0]
# (Line 23) function MoveLoc(Unit : TrgUnit, location : TrgLocation, cp : TrgPlayer, x, y)
# (Line 24) {
@EUDTypedFunc([TrgUnit, TrgLocation, TrgPlayer, None, None])
def MoveLoc(Unit, location_1, cp, x, y):
    # (Line 25) MoveLocation(location, Unit, cp, "Anywhere");
    # (Line 26) addloc(location - 1, x, y);
    DoActions(MoveLocation(location_1, Unit, cp, "Anywhere"))
    f_addloc(location_1 - 1, x, y)
    # (Line 27) }
    # (Line 29) function SkillUnit(count, Unit : TrgUnit, location : TrgLocation, cp : TrgPlayer)

# (Line 30) {
@EUDTypedFunc([None, TrgUnit, TrgLocation, TrgPlayer])
def SkillUnit(count_1, Unit, location_1, cp):
    # (Line 31) CreateUnit(count, Unit, "[Skill]Unit_Wait_1", cp);
    # (Line 32) SetInvincibility(Enable, Unit, cp, "[Skill]Unit_Wait_ALL");
    DoActions(CreateUnit(count_1, Unit, "[Skill]Unit_Wait_1", cp))
    # (Line 33) MoveUnit(count, Unit, cp, "[Skill]Unit_Wait_ALL", location);
    DoActions(SetInvincibility(Enable, Unit, cp, "[Skill]Unit_Wait_ALL"))
    # (Line 34) }
    DoActions(MoveUnit(count_1, Unit, cp, "[Skill]Unit_Wait_ALL", location_1))
    # (Line 36) function SkillWait(cp, count)

# (Line 37) {
@EUDFunc
def SkillWait(cp, count_1):
    # (Line 38) SetDeaths(cp, SetTo, count/83 + 1, " `WaitTime");
    # (Line 39) }
    DoActions(SetDeaths(cp, SetTo, count_1 // 83 + 1, " `WaitTime"))
    # (Line 41) function SkillEnd(cp)

# (Line 42) {
@EUDFunc
def SkillEnd(cp):
    # (Line 43) SetDeaths(cp, SetTo, 12, " `SkillWait");
    # (Line 44) }
    DoActions(SetDeaths(cp, SetTo, 12, " `SkillWait"))
    # (Line 46) function SquareShape(heroID : TrgUnit, count, Unit : TrgUnit, location : TrgLocation, cp : TrgPlayer, x, y)

# (Line 47) {
@EUDTypedFunc([TrgUnit, None, TrgUnit, TrgLocation, TrgPlayer, None, None])
def SquareShape(heroID_1, count_1, Unit, location_1, cp, x, y):
    # (Line 48) MoveLoc(heroID, location, cp, x, y);
    MoveLoc(heroID_1, location_1, cp, x, y)
    # (Line 49) SkillUnit(count, Unit, location, cp);
    SkillUnit(count_1, Unit, location_1, cp)
    # (Line 50) MoveLoc(heroID, location, cp, -y, x);
    MoveLoc(heroID_1, location_1, cp, -y, x)
    # (Line 51) SkillUnit(count, Unit, location, cp);
    SkillUnit(count_1, Unit, location_1, cp)
    # (Line 52) MoveLoc(heroID, location, cp, -x, -y);
    MoveLoc(heroID_1, location_1, cp, -x, -y)
    # (Line 53) SkillUnit(count, Unit, location, cp);
    SkillUnit(count_1, Unit, location_1, cp)
    # (Line 54) MoveLoc(heroID, location, cp, y, -x);
    MoveLoc(heroID_1, location_1, cp, y, -x)
    # (Line 55) SkillUnit(count, Unit, location, cp);
    SkillUnit(count_1, Unit, location_1, cp)
    # (Line 56) }
    # (Line 58) function Table_Sin(cp, degree, distance)

# (Line 59) {
@EUDFunc
def Table_Sin(cp, degree, distance_1):
    # (Line 60) degree = degree % 360;
    degree << (degree % 360)
    # (Line 61) SinAngle[cp] = SinTableArray[degree];
    _ARRW(SinAngle, cp) << (SinTableArray[degree])
    # (Line 63) if (SinAngle[cp] > 2147483648)
    if EUDIf()(SinAngle[cp] <= 2147483648, neg=True):
        # (Line 64) {
        # (Line 65) SinAngle[cp] = - SinAngle[cp];
        _ARRW(SinAngle, cp) << (-SinAngle[cp])
        # (Line 66) SinAngle[cp] = (SinAngle[cp] * distance) / 100;
        _ARRW(SinAngle, cp) << ((SinAngle[cp] * distance_1) // 100)
        # (Line 67) CosAngle[cp] = -SinAngle[cp];
        _ARRW(CosAngle, cp) << (-SinAngle[cp])
        # (Line 68) }
        # (Line 69) else
        # (Line 70) {
    if EUDElse()():
        # (Line 71) SinAngle[cp] = (SinAngle[cp] * distance) / 100;
        _ARRW(SinAngle, cp) << ((SinAngle[cp] * distance_1) // 100)
        # (Line 72) }
        # (Line 73) }
    EUDEndIf()
    # (Line 75) function Table_Cos(cp, degree, distance)

# (Line 76) {
@EUDFunc
def Table_Cos(cp, degree, distance_1):
    # (Line 77) degree = degree % 360;
    degree << (degree % 360)
    # (Line 78) CosAngle[cp] = CosTableArray[degree];
    _ARRW(CosAngle, cp) << (CosTableArray[degree])
    # (Line 80) if (CosAngle[cp] > 2147483648)
    if EUDIf()(CosAngle[cp] <= 2147483648, neg=True):
        # (Line 81) {
        # (Line 82) CosAngle[cp] = -CosAngle[cp];
        _ARRW(CosAngle, cp) << (-CosAngle[cp])
        # (Line 83) CosAngle[cp] = (CosAngle[cp] * distance) / 100;
        _ARRW(CosAngle, cp) << ((CosAngle[cp] * distance_1) // 100)
        # (Line 84) CosAngle[cp] = -CosAngle[cp];
        _ARRW(CosAngle, cp) << (-CosAngle[cp])
        # (Line 85) }
        # (Line 86) else
        # (Line 87) {
    if EUDElse()():
        # (Line 88) CosAngle[cp] = (CosAngle[cp] * distance) / 100;
        _ARRW(CosAngle, cp) << ((CosAngle[cp] * distance_1) // 100)
        # (Line 89) }
        # (Line 90) }
    EUDEndIf()
