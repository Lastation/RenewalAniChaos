## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import py_math;
import math
# (Line 2) import Variable as v;
import Variable as v
# (Line 4) const step		= PVariable();			// SkillStep
step = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 5) const count 		= PVariable();			// SkillCount
count = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 6) const loop 		= PVariable();			// SkillLoop
loop = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 7) const delay		= PVariable();			// wait(value)
delay = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 8) const wait		= PVariable();			// SkillWait
wait = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 10) const INSERT_KEY = PVariable();
INSERT_KEY = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 12) const loopB 		= PVariable();			// SkillLoop2
loopB = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 13) const loopC 	= PVariable();			// SkillLoop3
loopC = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 14) const delayB	= PVariable();			// wait(value)2
delayB = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 15) const delayC	= PVariable();			// wait(value)3
delayC = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 17) const location 	= PVariable();			// 로케이션 번호
location = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 18) const heroID 	= PVariable();			// 영웅 유닛 번호
heroID = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 20) const UltimateA	= PVariable();			// 궁극기 1번 소모량
UltimateA = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 21) const UltimateB	= PVariable();			// 궁극기 2번 소모량
UltimateB = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 22) const UltimateC	= PVariable();			// 궁극기 3번 소모량
UltimateC = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 24) const UniqueA	= PVariable();			// 유니크 1번 쿨타임
UniqueA = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 26) const distance	= PVariable();			// 거리 관련 변수
distance = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 27) const SinAngle 	= PVariable();			// Sin 변수
SinAngle = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 28) const CosAngle 	= PVariable();			// Cos 변수
CosAngle = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 30) const stb		= StringBuffer();
stb = _CGFW(lambda: [StringBuffer()], 1)[0]
# (Line 32) const HoldLocation = [97, 119, 122, 126, 134, 143, 0, 0];
HoldLocation = _CGFW(lambda: [_ARR(FlattenList([97, 119, 122, 126, 134, 143, 0, 0]))], 1)[0]
# (Line 34) const CosTableArray = EUDArray(py_eval("[int(round(100*math.cos(math.radians(t)))) for t in range(361)]"));
CosTableArray = _CGFW(lambda: [EUDArray(eval("[int(round(100*math.cos(math.radians(t)))) for t in range(361)]"))], 1)[0]
# (Line 35) const SinTableArray 	= EUDArray(py_eval("[int(round(100*math.sin(math.radians(t)))) for t in range(361)]"));
SinTableArray = _CGFW(lambda: [EUDArray(eval("[int(round(100*math.sin(math.radians(t)))) for t in range(361)]"))], 1)[0]
# (Line 37) const Rusaruka_Voice 	= PVariable();
Rusaruka_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 38) const Chtholly_Voice 	= PVariable();
Chtholly_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 39) const Kiana_Voice 		= PVariable();	// 17
Kiana_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 40) const Yuuna_Voice 		= PVariable();	// 22
Yuuna_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 41) const Mayuri_Voice 		= PVariable();	// 23
Mayuri_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 42) const Nanami_Voice 		= PVariable();	// 24
Nanami_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 43) const Milim_Voice 		= PVariable();	// 25
Milim_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 44) const Yume_Voice 		= PVariable();	// 26
Yume_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 45) const Magane_Voice 	= PVariable();	// 27
Magane_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 46) const Oda_Voice 		= PVariable();	// 28
Oda_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 48) function Table_Sin(cp, degree, distance);
# (Line 49) function Table_Cos(cp, degree, distance);
# (Line 51) function Voice_Routine(cp, num)
# (Line 52) {
@EUDFunc
def Voice_Routine(cp, num):
    # (Line 53) switch(v.Hero_Num[cp])
    EUDSwitch(v.Hero_Num[cp])
    # (Line 54) {
    # (Line 55) case 1:
    _t1 = EUDSwitchCase()
    # (Line 56) Rusaruka_Voice[0] = num;
    if _t1(1):
        _ARRW(Rusaruka_Voice, 0) << (num)
        # (Line 57) Rusaruka_Voice[1] = num;
        _ARRW(Rusaruka_Voice, 1) << (num)
        # (Line 58) Rusaruka_Voice[2] = num;
        _ARRW(Rusaruka_Voice, 2) << (num)
        # (Line 59) Rusaruka_Voice[3] = num;
        _ARRW(Rusaruka_Voice, 3) << (num)
        # (Line 60) Rusaruka_Voice[4] = num;
        _ARRW(Rusaruka_Voice, 4) << (num)
        # (Line 61) Rusaruka_Voice[5] = num;
        _ARRW(Rusaruka_Voice, 5) << (num)
        # (Line 62) break;
        EUDBreak()
        # (Line 63) case 2:
    _t2 = EUDSwitchCase()
    # (Line 64) Chtholly_Voice[0] = num;
    if _t2(2):
        _ARRW(Chtholly_Voice, 0) << (num)
        # (Line 65) Chtholly_Voice[1] = num;
        _ARRW(Chtholly_Voice, 1) << (num)
        # (Line 66) Chtholly_Voice[2] = num;
        _ARRW(Chtholly_Voice, 2) << (num)
        # (Line 67) Chtholly_Voice[3] = num;
        _ARRW(Chtholly_Voice, 3) << (num)
        # (Line 68) Chtholly_Voice[4] = num;
        _ARRW(Chtholly_Voice, 4) << (num)
        # (Line 69) Chtholly_Voice[5] = num;
        _ARRW(Chtholly_Voice, 5) << (num)
        # (Line 70) break;
        EUDBreak()
        # (Line 71) case 22:
    _t3 = EUDSwitchCase()
    # (Line 72) Yuuna_Voice[0] = num;
    if _t3(22):
        _ARRW(Yuuna_Voice, 0) << (num)
        # (Line 73) Yuuna_Voice[1] = num;
        _ARRW(Yuuna_Voice, 1) << (num)
        # (Line 74) Yuuna_Voice[2] = num;
        _ARRW(Yuuna_Voice, 2) << (num)
        # (Line 75) Yuuna_Voice[3] = num;
        _ARRW(Yuuna_Voice, 3) << (num)
        # (Line 76) Yuuna_Voice[4] = num;
        _ARRW(Yuuna_Voice, 4) << (num)
        # (Line 77) Yuuna_Voice[5] = num;
        _ARRW(Yuuna_Voice, 5) << (num)
        # (Line 78) break;
        EUDBreak()
        # (Line 79) case 23:
    _t4 = EUDSwitchCase()
    # (Line 80) Mayuri_Voice[0] = num;
    if _t4(23):
        _ARRW(Mayuri_Voice, 0) << (num)
        # (Line 81) Mayuri_Voice[1] = num;
        _ARRW(Mayuri_Voice, 1) << (num)
        # (Line 82) Mayuri_Voice[2] = num;
        _ARRW(Mayuri_Voice, 2) << (num)
        # (Line 83) Mayuri_Voice[3] = num;
        _ARRW(Mayuri_Voice, 3) << (num)
        # (Line 84) Mayuri_Voice[4] = num;
        _ARRW(Mayuri_Voice, 4) << (num)
        # (Line 85) Mayuri_Voice[5] = num;
        _ARRW(Mayuri_Voice, 5) << (num)
        # (Line 86) break;
        EUDBreak()
        # (Line 87) case 24:
    _t5 = EUDSwitchCase()
    # (Line 88) Nanami_Voice[0] = num;
    if _t5(24):
        _ARRW(Nanami_Voice, 0) << (num)
        # (Line 89) Nanami_Voice[1] = num;
        _ARRW(Nanami_Voice, 1) << (num)
        # (Line 90) Nanami_Voice[2] = num;
        _ARRW(Nanami_Voice, 2) << (num)
        # (Line 91) Nanami_Voice[3] = num;
        _ARRW(Nanami_Voice, 3) << (num)
        # (Line 92) Nanami_Voice[4] = num;
        _ARRW(Nanami_Voice, 4) << (num)
        # (Line 93) Nanami_Voice[5] = num;
        _ARRW(Nanami_Voice, 5) << (num)
        # (Line 94) break;
        EUDBreak()
        # (Line 95) case 25:
    _t6 = EUDSwitchCase()
    # (Line 96) Milim_Voice[0] = num;
    if _t6(25):
        _ARRW(Milim_Voice, 0) << (num)
        # (Line 97) Milim_Voice[1] = num;
        _ARRW(Milim_Voice, 1) << (num)
        # (Line 98) Milim_Voice[2] = num;
        _ARRW(Milim_Voice, 2) << (num)
        # (Line 99) Milim_Voice[3] = num;
        _ARRW(Milim_Voice, 3) << (num)
        # (Line 100) Milim_Voice[4] = num;
        _ARRW(Milim_Voice, 4) << (num)
        # (Line 101) Milim_Voice[5] = num;
        _ARRW(Milim_Voice, 5) << (num)
        # (Line 102) break;
        EUDBreak()
        # (Line 103) case 26:
    _t7 = EUDSwitchCase()
    # (Line 104) Yume_Voice[0] = num;
    if _t7(26):
        _ARRW(Yume_Voice, 0) << (num)
        # (Line 105) Yume_Voice[1] = num;
        _ARRW(Yume_Voice, 1) << (num)
        # (Line 106) Yume_Voice[2] = num;
        _ARRW(Yume_Voice, 2) << (num)
        # (Line 107) Yume_Voice[3] = num;
        _ARRW(Yume_Voice, 3) << (num)
        # (Line 108) Yume_Voice[4] = num;
        _ARRW(Yume_Voice, 4) << (num)
        # (Line 109) Yume_Voice[5] = num;
        _ARRW(Yume_Voice, 5) << (num)
        # (Line 110) break;
        EUDBreak()
        # (Line 111) case 27:
    _t8 = EUDSwitchCase()
    # (Line 112) Magane_Voice[0] = num;
    if _t8(27):
        _ARRW(Magane_Voice, 0) << (num)
        # (Line 113) Magane_Voice[1] = num;
        _ARRW(Magane_Voice, 1) << (num)
        # (Line 114) Magane_Voice[2] = num;
        _ARRW(Magane_Voice, 2) << (num)
        # (Line 115) Magane_Voice[3] = num;
        _ARRW(Magane_Voice, 3) << (num)
        # (Line 116) Magane_Voice[4] = num;
        _ARRW(Magane_Voice, 4) << (num)
        # (Line 117) Magane_Voice[5] = num;
        _ARRW(Magane_Voice, 5) << (num)
        # (Line 118) break;
        EUDBreak()
        # (Line 119) case 28:
    _t9 = EUDSwitchCase()
    # (Line 120) Oda_Voice[0] = num;
    if _t9(28):
        _ARRW(Oda_Voice, 0) << (num)
        # (Line 121) Oda_Voice[1] = num;
        _ARRW(Oda_Voice, 1) << (num)
        # (Line 122) Oda_Voice[2] = num;
        _ARRW(Oda_Voice, 2) << (num)
        # (Line 123) Oda_Voice[3] = num;
        _ARRW(Oda_Voice, 3) << (num)
        # (Line 124) Oda_Voice[4] = num;
        _ARRW(Oda_Voice, 4) << (num)
        # (Line 125) Oda_Voice[5] = num;
        _ARRW(Oda_Voice, 5) << (num)
        # (Line 126) break;
        EUDBreak()
        # (Line 128) }
    # (Line 129) }
    EUDEndSwitch()
    # (Line 131) function SetHeroID(cp)

# (Line 132) {
@EUDFunc
def SetHeroID(cp):
    # (Line 133) switch(v.Hero_Num[cp])
    EUDSwitch(v.Hero_Num[cp])
    # (Line 134) {
    # (Line 135) case 2:
    _t1 = EUDSwitchCase()
    # (Line 136) heroID[cp] = 77;
    if _t1(2):
        _ARRW(heroID, cp) << (77)
        # (Line 137) break;
        EUDBreak()
        # (Line 138) case 3:
    _t2 = EUDSwitchCase()
    # (Line 139) heroID[cp] = 74;
    if _t2(3):
        _ARRW(heroID, cp) << (74)
        # (Line 140) break;
        EUDBreak()
        # (Line 141) case 4:
    _t3 = EUDSwitchCase()
    # (Line 142) heroID[cp] = 74;
    if _t3(4):
        _ARRW(heroID, cp) << (74)
        # (Line 143) break;
        EUDBreak()
        # (Line 144) case 5:
    _t4 = EUDSwitchCase()
    # (Line 145) heroID[cp] = 74;
    if _t4(5):
        _ARRW(heroID, cp) << (74)
        # (Line 146) break;
        EUDBreak()
        # (Line 147) case 6:
    _t5 = EUDSwitchCase()
    # (Line 148) heroID[cp] = 16;
    if _t5(6):
        _ARRW(heroID, cp) << (16)
        # (Line 149) break;
        EUDBreak()
        # (Line 150) case 7:
    _t6 = EUDSwitchCase()
    # (Line 151) heroID[cp] = 77;
    if _t6(7):
        _ARRW(heroID, cp) << (77)
        # (Line 152) break;
        EUDBreak()
        # (Line 153) case 8:
    _t7 = EUDSwitchCase()
    # (Line 154) heroID[cp] = 51;
    if _t7(8):
        _ARRW(heroID, cp) << (51)
        # (Line 155) break;
        EUDBreak()
        # (Line 156) case 9:
    _t8 = EUDSwitchCase()
    # (Line 157) heroID[cp] = 51;
    if _t8(9):
        _ARRW(heroID, cp) << (51)
        # (Line 158) break;
        EUDBreak()
        # (Line 159) case 10:
    _t9 = EUDSwitchCase()
    # (Line 160) heroID[cp] = 77;
    if _t9(10):
        _ARRW(heroID, cp) << (77)
        # (Line 161) break;
        EUDBreak()
        # (Line 162) case 11:
    _t10 = EUDSwitchCase()
    # (Line 163) heroID[cp] = 16;
    if _t10(11):
        _ARRW(heroID, cp) << (16)
        # (Line 164) break;
        EUDBreak()
        # (Line 165) case 12:
    _t11 = EUDSwitchCase()
    # (Line 166) heroID[cp] = 54;
    if _t11(12):
        _ARRW(heroID, cp) << (54)
        # (Line 167) break;
        EUDBreak()
        # (Line 168) case 13:
    _t12 = EUDSwitchCase()
    # (Line 169) heroID[cp] = 16;
    if _t12(13):
        _ARRW(heroID, cp) << (16)
        # (Line 170) break;
        EUDBreak()
        # (Line 171) case 14:
    _t13 = EUDSwitchCase()
    # (Line 172) heroID[cp] = 99;
    if _t13(14):
        _ARRW(heroID, cp) << (99)
        # (Line 173) break;
        EUDBreak()
        # (Line 174) case 15:
    _t14 = EUDSwitchCase()
    # (Line 175) heroID[cp] = 54;
    if _t14(15):
        _ARRW(heroID, cp) << (54)
        # (Line 176) break;
        EUDBreak()
        # (Line 177) case 16:
    _t15 = EUDSwitchCase()
    # (Line 178) heroID[cp] = 16;
    if _t15(16):
        _ARRW(heroID, cp) << (16)
        # (Line 179) break;
        EUDBreak()
        # (Line 180) case 17:
    _t16 = EUDSwitchCase()
    # (Line 181) heroID[cp] = 77;
    if _t16(17):
        _ARRW(heroID, cp) << (77)
        # (Line 182) break;
        EUDBreak()
        # (Line 183) case 18:
    _t17 = EUDSwitchCase()
    # (Line 184) heroID[cp] = 99;
    if _t17(18):
        _ARRW(heroID, cp) << (99)
        # (Line 185) break;
        EUDBreak()
        # (Line 186) case 19:
    _t18 = EUDSwitchCase()
    # (Line 187) heroID[cp] = 51;
    if _t18(19):
        _ARRW(heroID, cp) << (51)
        # (Line 188) break;
        EUDBreak()
        # (Line 189) case 20:
    _t19 = EUDSwitchCase()
    # (Line 190) heroID[cp] = 99;
    if _t19(20):
        _ARRW(heroID, cp) << (99)
        # (Line 191) break;
        EUDBreak()
        # (Line 192) case 21:
    _t20 = EUDSwitchCase()
    # (Line 193) heroID[cp] = 64;
    if _t20(21):
        _ARRW(heroID, cp) << (64)
        # (Line 194) break;
        EUDBreak()
        # (Line 195) }
    # (Line 196) }
    EUDEndSwitch()
    # (Line 199) function MoveLoc(Unit : TrgUnit, cp : TrgPlayer, x, y)

# (Line 200) {
@EUDTypedFunc([TrgUnit, TrgPlayer, None, None])
def MoveLoc(Unit, cp, x, y):
    # (Line 201) MoveLocation(location[cp], Unit, cp, "Anywhere");
    # (Line 202) addloc(location[cp], x, y);
    DoActions(MoveLocation(location[cp], Unit, cp, "Anywhere"))
    f_addloc(location[cp], x, y)
    # (Line 203) }
    # (Line 205) function SkillUnitWithProperty(cp : TrgPlayer, count, Unit : TrgUnit, property)

# (Line 206) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None])
def SkillUnitWithProperty(cp, count_1, Unit, property):
    # (Line 207) switch (property)
    EUDSwitch(property)
    # (Line 208) {
    # (Line 209) case 0:
    _t1 = EUDSwitchCase()
    # (Line 210) CreateUnitWithProperties(count, Unit, dwrand() % 8 + 33, cp, UnitProperty(burrowed = true));
    if _t1(0):
        # (Line 211) break;
        DoActions(CreateUnitWithProperties(count_1, Unit, f_dwrand() % 8 + 33, cp, UnitProperty(burrowed=True)))
        EUDBreak()
        # (Line 212) case 1:
    _t2 = EUDSwitchCase()
    # (Line 213) CreateUnitWithProperties(count, Unit, dwrand() % 8 + 33, cp, UnitProperty(hallucinated = true));
    if _t2(1):
        # (Line 214) break;
        DoActions(CreateUnitWithProperties(count_1, Unit, f_dwrand() % 8 + 33, cp, UnitProperty(hallucinated=True)))
        EUDBreak()
        # (Line 215) }
    # (Line 217) SetInvincibility(Enable, Unit, cp, "[Skill]Unit_Wait_ALL");
    EUDEndSwitch()
    # (Line 218) MoveUnit(count, Unit, cp, "[Skill]Unit_Wait_ALL", location[cp]);
    DoActions(SetInvincibility(Enable, Unit, cp, "[Skill]Unit_Wait_ALL"))
    # (Line 219) }
    DoActions(MoveUnit(count_1, Unit, cp, "[Skill]Unit_Wait_ALL", location[cp]))
    # (Line 221) function SkillUnit(cp : TrgPlayer, count, Unit : TrgUnit)

# (Line 222) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit])
def SkillUnit(cp, count_1, Unit):
    # (Line 223) CreateUnit(count, Unit, dwrand() % 8 + 33, cp);
    # (Line 224) SetInvincibility(Enable, Unit, cp, "[Skill]Unit_Wait_ALL");
    DoActions(CreateUnit(count_1, Unit, f_dwrand() % 8 + 33, cp))
    # (Line 225) MoveUnit(count, Unit, cp, "[Skill]Unit_Wait_ALL", location[cp]);
    DoActions(SetInvincibility(Enable, Unit, cp, "[Skill]Unit_Wait_ALL"))
    # (Line 226) }
    DoActions(MoveUnit(count_1, Unit, cp, "[Skill]Unit_Wait_ALL", location[cp]))
    # (Line 228) function BanReturn(cp)

# (Line 229) {
@EUDFunc
def BanReturn(cp):
    # (Line 230) KillUnit("Protoss Observer", cp);
    # (Line 231) }
    DoActions(KillUnit("Protoss Observer", cp))
    # (Line 233) function HoldPosition(cp)

# (Line 234) {
@EUDFunc
def HoldPosition(cp):
    # (Line 235) MoveLocation(HoldLocation[cp], heroID[cp], cp, "Anywhere");
    # (Line 236) Order(heroID[cp], cp, "Anywhere", Move, HoldLocation[cp]);
    DoActions(MoveLocation(HoldLocation[cp], heroID[cp], cp, "Anywhere"))
    # (Line 237) }
    DoActions(Order(heroID[cp], cp, "Anywhere", Move, HoldLocation[cp]))
    # (Line 239) function Slow(cp)

# (Line 240) {
@EUDFunc
def Slow(cp):
    # (Line 241) MoveLocation(HoldLocation[cp], heroID[cp], cp, "Anywhere");
    # (Line 242) SkillUnit(cp, 1, "Zerg Devourer");
    DoActions(MoveLocation(HoldLocation[cp], heroID[cp], cp, "Anywhere"))
    SkillUnit(cp, 1, "Zerg Devourer")
    # (Line 243) RemoveUnitAt(1, "Zerg Devourer", "Anywhere", cp);
    # (Line 244) }
    DoActions(RemoveUnitAt(1, "Zerg Devourer", "Anywhere", cp))
    # (Line 246) function DotShapeWithProperty(cp : TrgPlayer, count, Unit : TrgUnit, x, y, property)

# (Line 247) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None])
def DotShapeWithProperty(cp, count_1, Unit, x, y, property):
    # (Line 248) MoveLoc(heroID[cp], cp, x, y);
    MoveLoc(heroID[cp], cp, x, y)
    # (Line 249) SkillUnitWithProperty(cp, count, Unit, property);
    SkillUnitWithProperty(cp, count_1, Unit, property)
    # (Line 250) }
    # (Line 252) function DotShape(cp : TrgPlayer, count, Unit : TrgUnit, x, y)

# (Line 253) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def DotShape(cp, count_1, Unit, x, y):
    # (Line 254) MoveLoc(heroID[cp], cp, x, y);
    MoveLoc(heroID[cp], cp, x, y)
    # (Line 255) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 256) }
    # (Line 258) function SkillWait(cp, count)

# (Line 259) {
@EUDFunc
def SkillWait(cp, count_1):
    # (Line 260) delay[cp] = count/83 + 1;
    _ARRW(delay, cp) << (count_1 // 83 + 1)
    # (Line 261) }
    # (Line 263) function SkillWaitB(cp, count)

# (Line 264) {
@EUDFunc
def SkillWaitB(cp, count_1):
    # (Line 265) delayB[cp] = count/83 + 1;
    _ARRW(delayB, cp) << (count_1 // 83 + 1)
    # (Line 266) }
    # (Line 268) function SkillWaitC(cp, count)

# (Line 269) {
@EUDFunc
def SkillWaitC(cp, count_1):
    # (Line 270) delayC[cp] = count/83 + 1;
    _ARRW(delayC, cp) << (count_1 // 83 + 1)
    # (Line 271) }
    # (Line 273) function SkillEnd(cp)

# (Line 274) {
@EUDFunc
def SkillEnd(cp):
    # (Line 275) count[cp] = 999;
    _ARRW(count, cp) << (999)
    # (Line 276) }
    # (Line 278) function DoubleShape(cp : TrgPlayer, count, Unit : TrgUnit, x, y)

# (Line 279) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def DoubleShape(cp, count_1, Unit, x, y):
    # (Line 280) MoveLoc(heroID[cp], cp, x, y);
    MoveLoc(heroID[cp], cp, x, y)
    # (Line 281) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 282) MoveLoc(heroID[cp], cp, -x, -y);
    MoveLoc(heroID[cp], cp, -x, -y)
    # (Line 283) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 284) }
    # (Line 286) function SquareShapeWithProperty(cp : TrgPlayer, count, Unit : TrgUnit, x, y, property)

# (Line 287) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None])
def SquareShapeWithProperty(cp, count_1, Unit, x, y, property):
    # (Line 288) MoveLoc(heroID[cp], cp, x, y);
    MoveLoc(heroID[cp], cp, x, y)
    # (Line 289) SkillUnitWithProperty(cp, count, Unit, property);
    SkillUnitWithProperty(cp, count_1, Unit, property)
    # (Line 290) MoveLoc(heroID[cp], cp, -y, x);
    MoveLoc(heroID[cp], cp, -y, x)
    # (Line 291) SkillUnitWithProperty(cp, count, Unit, property);
    SkillUnitWithProperty(cp, count_1, Unit, property)
    # (Line 292) MoveLoc(heroID[cp], cp, -x, -y);
    MoveLoc(heroID[cp], cp, -x, -y)
    # (Line 293) SkillUnitWithProperty(cp, count, Unit, property);
    SkillUnitWithProperty(cp, count_1, Unit, property)
    # (Line 294) MoveLoc(heroID[cp], cp, y, -x);
    MoveLoc(heroID[cp], cp, y, -x)
    # (Line 295) SkillUnitWithProperty(cp, count, Unit, property);
    SkillUnitWithProperty(cp, count_1, Unit, property)
    # (Line 296) }
    # (Line 298) function SquareShape(cp : TrgPlayer, count, Unit : TrgUnit, x, y)

# (Line 299) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def SquareShape(cp, count_1, Unit, x, y):
    # (Line 300) MoveLoc(heroID[cp], cp, x, y);
    MoveLoc(heroID[cp], cp, x, y)
    # (Line 301) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 302) MoveLoc(heroID[cp], cp, -y, x);
    MoveLoc(heroID[cp], cp, -y, x)
    # (Line 303) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 304) MoveLoc(heroID[cp], cp, -x, -y);
    MoveLoc(heroID[cp], cp, -x, -y)
    # (Line 305) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 306) MoveLoc(heroID[cp], cp, y, -x);
    MoveLoc(heroID[cp], cp, y, -x)
    # (Line 307) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 308) }
    # (Line 310) function SquareShapeAtWithProperty(cp : TrgPlayer, count, Unit : TrgUnit, x, y, distanceX, distanceY, property)

# (Line 311) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None, None])
def SquareShapeAtWithProperty(cp, count_1, Unit, x, y, distanceX, distanceY, property):
    # (Line 312) MoveLoc(heroID[cp], cp, x + distanceX, y + distanceY);
    MoveLoc(heroID[cp], cp, x + distanceX, y + distanceY)
    # (Line 313) SkillUnitWithProperty(cp, count, Unit, property);
    SkillUnitWithProperty(cp, count_1, Unit, property)
    # (Line 314) MoveLoc(heroID[cp], cp, -y + distanceX, x + distanceY);
    MoveLoc(heroID[cp], cp, -y + distanceX, x + distanceY)
    # (Line 315) SkillUnitWithProperty(cp, count, Unit, property);
    SkillUnitWithProperty(cp, count_1, Unit, property)
    # (Line 316) MoveLoc(heroID[cp], cp, -x + distanceX, -y + distanceY);
    MoveLoc(heroID[cp], cp, -x + distanceX, -y + distanceY)
    # (Line 317) SkillUnitWithProperty(cp, count, Unit, property);
    SkillUnitWithProperty(cp, count_1, Unit, property)
    # (Line 318) MoveLoc(heroID[cp], cp, y + distanceX, -x + distanceY);
    MoveLoc(heroID[cp], cp, y + distanceX, -x + distanceY)
    # (Line 319) SkillUnitWithProperty(cp, count, Unit, property);
    SkillUnitWithProperty(cp, count_1, Unit, property)
    # (Line 320) }
    # (Line 323) function SquareShapeAt(cp : TrgPlayer, count, Unit : TrgUnit, x, y, distanceX, distanceY)

# (Line 324) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None])
def SquareShapeAt(cp, count_1, Unit, x, y, distanceX, distanceY):
    # (Line 325) MoveLoc(heroID[cp], cp, x + distanceX, y + distanceY);
    MoveLoc(heroID[cp], cp, x + distanceX, y + distanceY)
    # (Line 326) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 327) MoveLoc(heroID[cp], cp, -y + distanceX, x + distanceY);
    MoveLoc(heroID[cp], cp, -y + distanceX, x + distanceY)
    # (Line 328) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 329) MoveLoc(heroID[cp], cp, -x + distanceX, -y + distanceY);
    MoveLoc(heroID[cp], cp, -x + distanceX, -y + distanceY)
    # (Line 330) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 331) MoveLoc(heroID[cp], cp, y + distanceX, -x + distanceY);
    MoveLoc(heroID[cp], cp, y + distanceX, -x + distanceY)
    # (Line 332) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 333) }
    # (Line 335) function NxNSquareShape(cp : TrgPlayer, count, Unit : TrgUnit, n, interval)

# (Line 336) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def NxNSquareShape(cp, count_1, Unit, n, interval):
    # (Line 337) var i = 0;
    i = EUDVariable()
    i << (0)
    # (Line 338) var destX, destY;
    destX, destY = EUDCreateVariables(2)
    # (Line 339) var distance = interval / 2;
    distance_1 = EUDVariable()
    distance_1 << (interval // 2)
    # (Line 340) var size = n * n;
    size = EUDVariable()
    size << (n * n)
    # (Line 342) for (; i < size / 4; i++)
    if EUDWhile()(i >= size // 4, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 343) {
        # (Line 344) if (n == 1)
        if EUDIf()(n == 1):
            # (Line 345) {
            # (Line 346) MoveLoc(heroID[cp] ,cp, 0, 0);
            MoveLoc(heroID[cp], cp, 0, 0)
            # (Line 347) SkillUnit(cp, count, Unit);
            SkillUnit(cp, count_1, Unit)
            # (Line 348) }
            # (Line 349) else if (n % 2 == 0)
        if EUDElseIf()(n % 2 == 0):
            # (Line 350) {
            # (Line 351) destX = i % (n / 2) + 1;
            destX << (i % (n // 2) + 1)
            # (Line 352) destY = i / (n / 2) + 1;
            destY << (i // (n // 2) + 1)
            # (Line 353) if (destX == 1)
            if EUDIf()(destX == 1):
                # (Line 354) {
                # (Line 355) SquareShape(cp, count, Unit, distance, destY * interval - distance);
                SquareShape(cp, count_1, Unit, distance_1, destY * interval - distance_1)
                # (Line 356) }
                # (Line 357) else if (destY == 1)
            if EUDElseIf()(destY == 1):
                # (Line 358) {
                # (Line 359) SquareShape(cp, count, Unit, destX * interval - distance, distance);
                SquareShape(cp, count_1, Unit, destX * interval - distance_1, distance_1)
                # (Line 360) }
                # (Line 361) else
                # (Line 362) {
            if EUDElse()():
                # (Line 363) SquareShape(cp, count, Unit, destX * interval - distance, destY * interval - distance);
                SquareShape(cp, count_1, Unit, destX * interval - distance_1, destY * interval - distance_1)
                # (Line 364) }
                # (Line 365) }
            EUDEndIf()
            # (Line 366) else if (n % 2 == 1)
        if EUDElseIf()(n % 2 == 1):
            # (Line 367) {
            # (Line 368) destX = i % (n / 2);
            destX << (i % (n // 2))
            # (Line 369) destY = i / (n / 2);
            destY << (i // (n // 2))
            # (Line 371) if (i == 0)
            if EUDIf()(i == 0):
                # (Line 372) {
                # (Line 373) MoveLoc(heroID[cp] ,cp, 0, 0);
                MoveLoc(heroID[cp], cp, 0, 0)
                # (Line 374) SkillUnit(cp, count, Unit);
                SkillUnit(cp, count_1, Unit)
                # (Line 375) }
                # (Line 376) else if (destY == 0)
            if EUDElseIf()(destY == 0):
                # (Line 377) {
                # (Line 378) SquareShape(cp, count, Unit, destX * interval, 0);
                SquareShape(cp, count_1, Unit, destX * interval, 0)
                # (Line 379) }
                # (Line 380) else
                # (Line 381) {
            if EUDElse()():
                # (Line 382) SquareShape(cp, count, Unit, destX * interval + interval, destY * interval);
                SquareShape(cp, count_1, Unit, destX * interval + interval, destY * interval)
                # (Line 383) }
                # (Line 385) if (i == size / 4 - 1)
            EUDEndIf()
            if EUDIf()(i == size // 4 - 1):
                # (Line 386) {
                # (Line 387) SquareShape(cp, count, Unit, (n / 2) * interval, 0);
                SquareShape(cp, count_1, Unit, (n // 2) * interval, 0)
                # (Line 388) }
                # (Line 389) }
            EUDEndIf()
            # (Line 390) }
        EUDEndIf()
        # (Line 391) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 394) function NxNSquareShapeAt(cp : TrgPlayer, count, Unit : TrgUnit, n, interval, distanceX, distanceY)

# (Line 395) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None])
def NxNSquareShapeAt(cp, count_1, Unit, n, interval, distanceX, distanceY):
    # (Line 396) var i = 0;
    i = EUDVariable()
    i << (0)
    # (Line 397) var destX, destY;
    destX, destY = EUDCreateVariables(2)
    # (Line 398) var distance = interval / 2;
    distance_1 = EUDVariable()
    distance_1 << (interval // 2)
    # (Line 399) var size = n * n;
    size = EUDVariable()
    size << (n * n)
    # (Line 401) for (; i < size / 4; i++)
    if EUDWhile()(i >= size // 4, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 402) {
        # (Line 403) if (n == 1)
        if EUDIf()(n == 1):
            # (Line 404) {
            # (Line 405) MoveLoc(heroID[cp] ,cp, distanceX, distanceY);
            MoveLoc(heroID[cp], cp, distanceX, distanceY)
            # (Line 406) SkillUnit(cp, count, Unit);
            SkillUnit(cp, count_1, Unit)
            # (Line 407) }
            # (Line 408) else if (n % 2 == 0)
        if EUDElseIf()(n % 2 == 0):
            # (Line 409) {
            # (Line 410) destX = i % (n / 2) + 1;
            destX << (i % (n // 2) + 1)
            # (Line 411) destY = i / (n / 2) + 1;
            destY << (i // (n // 2) + 1)
            # (Line 413) if (destX == 1)
            if EUDIf()(destX == 1):
                # (Line 414) {
                # (Line 415) SquareShapeAt(cp, count, Unit, distance, destY * interval - distance, distanceX, distanceY);
                SquareShapeAt(cp, count_1, Unit, distance_1, destY * interval - distance_1, distanceX, distanceY)
                # (Line 416) }
                # (Line 417) else if (destY == 1)
            if EUDElseIf()(destY == 1):
                # (Line 418) {
                # (Line 419) SquareShapeAt(cp, count, Unit, destX * interval - distance, distance, distanceX, distanceY);
                SquareShapeAt(cp, count_1, Unit, destX * interval - distance_1, distance_1, distanceX, distanceY)
                # (Line 420) }
                # (Line 421) else
                # (Line 422) {
            if EUDElse()():
                # (Line 423) SquareShapeAt(cp, count, Unit, destX * interval - distance, destY * interval - distance, distanceX, distanceY);
                SquareShapeAt(cp, count_1, Unit, destX * interval - distance_1, destY * interval - distance_1, distanceX, distanceY)
                # (Line 424) }
                # (Line 425) }
            EUDEndIf()
            # (Line 426) else if (n % 2 == 1)
        if EUDElseIf()(n % 2 == 1):
            # (Line 427) {
            # (Line 428) destX = i % (n / 2);
            destX << (i % (n // 2))
            # (Line 429) destY = i / (n / 2);
            destY << (i // (n // 2))
            # (Line 431) if (i == 0)
            if EUDIf()(i == 0):
                # (Line 432) {
                # (Line 433) MoveLoc(heroID[cp] ,cp, distanceX, distanceY);
                MoveLoc(heroID[cp], cp, distanceX, distanceY)
                # (Line 434) SkillUnit(cp, count, Unit);
                SkillUnit(cp, count_1, Unit)
                # (Line 435) }
                # (Line 436) else if (destY == 0)
            if EUDElseIf()(destY == 0):
                # (Line 437) {
                # (Line 438) SquareShapeAt(cp, count, Unit, destX * interval, 0, distanceX, distanceY);
                SquareShapeAt(cp, count_1, Unit, destX * interval, 0, distanceX, distanceY)
                # (Line 439) }
                # (Line 440) else
                # (Line 441) {
            if EUDElse()():
                # (Line 442) SquareShapeAt(cp, count, Unit, destX * interval + interval, destY * interval, distanceX, distanceY);
                SquareShapeAt(cp, count_1, Unit, destX * interval + interval, destY * interval, distanceX, distanceY)
                # (Line 443) }
                # (Line 445) if (i == size / 4 - 1)
            EUDEndIf()
            if EUDIf()(i == size // 4 - 1):
                # (Line 446) {
                # (Line 447) SquareShapeAt(cp, count, Unit, (n / 2) * interval, 0, distanceX, distanceY);
                SquareShapeAt(cp, count_1, Unit, (n // 2) * interval, 0, distanceX, distanceY)
                # (Line 448) }
                # (Line 449) }
            EUDEndIf()
            # (Line 450) }
        EUDEndIf()
        # (Line 451) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 453) function LineShape(cp : TrgPlayer, count, Unit : TrgUnit, degree, n, interval, distance)

# (Line 454) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None])
def LineShape(cp, count_1, Unit, degree, n, interval, distance_1):
    # (Line 455) var i = 0;
    i = EUDVariable()
    i << (0)
    # (Line 457) Table_Sin(cp, degree + 90, distance);
    Table_Sin(cp, degree + 90, distance_1)
    # (Line 458) Table_Cos(cp, degree + 90, distance);
    Table_Cos(cp, degree + 90, distance_1)
    # (Line 459) var x_initial = CosAngle[cp];
    x_initial = EUDVariable()
    x_initial << (CosAngle[cp])
    # (Line 460) var y_initial = SinAngle[cp];
    y_initial = EUDVariable()
    y_initial << (SinAngle[cp])
    # (Line 462) if (n % 2 == 0)
    if EUDIf()(n % 2 == 0):
        # (Line 463) {
        # (Line 464) Table_Sin(cp, degree, interval * (n / 2) - interval / 2);
        Table_Sin(cp, degree, interval * (n // 2) - interval // 2)
        # (Line 465) Table_Cos(cp, degree, interval * (n / 2) - interval / 2);
        Table_Cos(cp, degree, interval * (n // 2) - interval // 2)
        # (Line 466) }
        # (Line 467) else
        # (Line 468) {
    if EUDElse()():
        # (Line 469) Table_Sin(cp, degree, interval * (n / 2));
        Table_Sin(cp, degree, interval * (n // 2))
        # (Line 470) Table_Cos(cp, degree, interval * (n / 2));
        Table_Cos(cp, degree, interval * (n // 2))
        # (Line 471) }
        # (Line 473) x_initial = x_initial + CosAngle[cp];
    EUDEndIf()
    x_initial << (x_initial + CosAngle[cp])
    # (Line 474) y_initial = y_initial + SinAngle[cp];
    y_initial << (y_initial + SinAngle[cp])
    # (Line 476) Table_Sin(cp, degree, interval);
    Table_Sin(cp, degree, interval)
    # (Line 477) Table_Cos(cp, degree, interval);
    Table_Cos(cp, degree, interval)
    # (Line 479) for (; i < n; i++)
    if EUDWhile()(i >= n, neg=True):
        def _t3():
            i.__iadd__(1)
        # (Line 480) {
        # (Line 481) MoveLoc(heroID[cp], cp, x_initial - i * CosAngle[cp], y_initial - i * SinAngle[cp]);
        MoveLoc(heroID[cp], cp, x_initial - i * CosAngle[cp], y_initial - i * SinAngle[cp])
        # (Line 482) SkillUnit(cp, count, Unit);
        SkillUnit(cp, count_1, Unit)
        # (Line 483) }
        # (Line 485) }
        EUDSetContinuePoint()
        _t3()
    EUDEndWhile()
    # (Line 488) function LineShapeAt(cp : TrgPlayer, count, Unit : TrgUnit, degree, n, interval, distanceX, distanceY)

# (Line 489) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None, None])
def LineShapeAt(cp, count_1, Unit, degree, n, interval, distanceX, distanceY):
    # (Line 490) var i = 0;
    i = EUDVariable()
    i << (0)
    # (Line 491) var distance = interval / 2;
    distance_1 = EUDVariable()
    distance_1 << (interval // 2)
    # (Line 493) Table_Sin(cp, degree, distance);
    Table_Sin(cp, degree, distance_1)
    # (Line 494) Table_Cos(cp, degree, distance);
    Table_Cos(cp, degree, distance_1)
    # (Line 496) var gradientX = CosAngle[cp];
    gradientX = EUDVariable()
    gradientX << (CosAngle[cp])
    # (Line 497) var gradientY = SinAngle[cp] ;
    gradientY = EUDVariable()
    gradientY << (SinAngle[cp])
    # (Line 499) var Angle_X, Angle_Y;
    Angle_X, Angle_Y = EUDCreateVariables(2)
    # (Line 501) Table_Sin(cp, degree, interval);
    Table_Sin(cp, degree, interval)
    # (Line 502) Table_Cos(cp, degree, interval);
    Table_Cos(cp, degree, interval)
    # (Line 504) for (; i <= n / 2; i++)
    if EUDWhile()(i <= n // 2):
        def _t2():
            i.__iadd__(1)
        # (Line 505) {
        # (Line 506) Angle_X = CosAngle[cp] * i;
        Angle_X << (CosAngle[cp] * i)
        # (Line 507) Angle_Y = SinAngle[cp] * i;
        Angle_Y << (SinAngle[cp] * i)
        # (Line 509) if (n % 2 == 0 && i != n / 2)
        if EUDIf()(EUDSCAnd()(n % 2 == 0)(i == n // 2, neg=True)()):
            # (Line 510) {
            # (Line 511) MoveLoc(heroID[cp], cp, -Angle_X - gradientX + distanceX, Angle_Y + gradientY + distanceY);
            MoveLoc(heroID[cp], cp, -Angle_X - gradientX + distanceX, Angle_Y + gradientY + distanceY)
            # (Line 512) SkillUnit(cp, count, Unit);
            SkillUnit(cp, count_1, Unit)
            # (Line 513) MoveLoc(heroID[cp], cp, Angle_X + gradientX + distanceX, -Angle_Y - gradientY + distanceY);
            MoveLoc(heroID[cp], cp, Angle_X + gradientX + distanceX, -Angle_Y - gradientY + distanceY)
            # (Line 514) SkillUnit(cp, count, Unit);
            SkillUnit(cp, count_1, Unit)
            # (Line 515) }
            # (Line 516) else if (n % 2 == 1)
        if EUDElseIf()(n % 2 == 1):
            # (Line 517) {
            # (Line 518) if (i == 0)
            if EUDIf()(i == 0):
                # (Line 519) {
                # (Line 520) MoveLoc(heroID[cp], cp, distanceX, distanceY);
                MoveLoc(heroID[cp], cp, distanceX, distanceY)
                # (Line 521) SkillUnit(cp, count, Unit);
                SkillUnit(cp, count_1, Unit)
                # (Line 522) }
                # (Line 523) else
                # (Line 524) {
            if EUDElse()():
                # (Line 525) MoveLoc(heroID[cp], cp, -Angle_X + distanceX, Angle_Y + distanceY);
                MoveLoc(heroID[cp], cp, -Angle_X + distanceX, Angle_Y + distanceY)
                # (Line 526) SkillUnit(cp, count, Unit);
                SkillUnit(cp, count_1, Unit)
                # (Line 527) MoveLoc(heroID[cp], cp, Angle_X + distanceX, -Angle_Y + distanceY);
                MoveLoc(heroID[cp], cp, Angle_X + distanceX, -Angle_Y + distanceY)
                # (Line 528) SkillUnit(cp, count, Unit);
                SkillUnit(cp, count_1, Unit)
                # (Line 529) }
                # (Line 531) }
            EUDEndIf()
            # (Line 532) }
        EUDEndIf()
        # (Line 534) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 536) function CrossShape(cp : TrgPlayer, count, Unit : TrgUnit, degree, n, interval)

# (Line 537) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None])
def CrossShape(cp, count_1, Unit, degree, n, interval):
    # (Line 538) var i = 0;
    i = EUDVariable()
    i << (0)
    # (Line 539) var distance = interval / 2;
    distance_1 = EUDVariable()
    distance_1 << (interval // 2)
    # (Line 541) Table_Sin(cp, degree, distance);
    Table_Sin(cp, degree, distance_1)
    # (Line 542) Table_Cos(cp, degree, distance);
    Table_Cos(cp, degree, distance_1)
    # (Line 544) var gradientX = CosAngle[cp] / 2;
    gradientX = EUDVariable()
    gradientX << (CosAngle[cp] // 2)
    # (Line 545) var gradientY = SinAngle[cp] / 2;
    gradientY = EUDVariable()
    gradientY << (SinAngle[cp] // 2)
    # (Line 547) var Angle_X, Angle_Y;
    Angle_X, Angle_Y = EUDCreateVariables(2)
    # (Line 549) Table_Sin(cp, degree, interval);
    Table_Sin(cp, degree, interval)
    # (Line 550) Table_Cos(cp, degree, interval);
    Table_Cos(cp, degree, interval)
    # (Line 552) for (; i < n; i++)
    if EUDWhile()(i >= n, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 553) {
        # (Line 554) Angle_X = CosAngle[cp] * i;
        Angle_X << (CosAngle[cp] * i)
        # (Line 555) Angle_Y = SinAngle[cp] * i;
        Angle_Y << (SinAngle[cp] * i)
        # (Line 557) if (n % 2 == 0 && i != n / 2)
        if EUDIf()(EUDSCAnd()(n % 2 == 0)(i == n // 2, neg=True)()):
            # (Line 558) {
            # (Line 559) SquareShape(cp, count, Unit, Angle_X + gradientX, Angle_Y + gradientY);
            SquareShape(cp, count_1, Unit, Angle_X + gradientX, Angle_Y + gradientY)
            # (Line 560) }
            # (Line 561) else if (n % 2 == 1)
        if EUDElseIf()(n % 2 == 1):
            # (Line 562) {
            # (Line 563) if (i == 0)
            if EUDIf()(i == 0):
                # (Line 564) {
                # (Line 565) MoveLoc(heroID[cp], cp, 0, 0);
                MoveLoc(heroID[cp], cp, 0, 0)
                # (Line 566) }
                # (Line 567) else
                # (Line 568) {
            if EUDElse()():
                # (Line 569) SquareShape(cp, count, Unit, Angle_X, Angle_Y);
                SquareShape(cp, count_1, Unit, Angle_X, Angle_Y)
                # (Line 570) }
                # (Line 571) }
            EUDEndIf()
            # (Line 572) }
        EUDEndIf()
        # (Line 573) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 575) function Table_Sin(cp, degree, distance)

# (Line 576) {
@EUDFunc
def Table_Sin(cp, degree, distance_1):
    # (Line 577) degree = degree % 360;
    degree << (degree % 360)
    # (Line 578) SinAngle[cp] = SinTableArray[degree];
    _ARRW(SinAngle, cp) << (SinTableArray[degree])
    # (Line 580) if (SinAngle[cp] > 2147483648)
    if EUDIf()(SinAngle[cp] <= 2147483648, neg=True):
        # (Line 581) {
        # (Line 582) SinAngle[cp] = -SinAngle[cp];
        _ARRW(SinAngle, cp) << (-SinAngle[cp])
        # (Line 583) SinAngle[cp] = (SinAngle[cp] * distance) / 100;
        _ARRW(SinAngle, cp) << ((SinAngle[cp] * distance_1) // 100)
        # (Line 584) SinAngle[cp] = -SinAngle[cp];
        _ARRW(SinAngle, cp) << (-SinAngle[cp])
        # (Line 585) }
        # (Line 586) else
        # (Line 587) {
    if EUDElse()():
        # (Line 588) SinAngle[cp] = (SinAngle[cp] * distance) / 100;
        _ARRW(SinAngle, cp) << ((SinAngle[cp] * distance_1) // 100)
        # (Line 589) }
        # (Line 590) }
    EUDEndIf()
    # (Line 592) function Table_Cos(cp, degree, distance)

# (Line 593) {
@EUDFunc
def Table_Cos(cp, degree, distance_1):
    # (Line 594) degree = degree % 360;
    degree << (degree % 360)
    # (Line 595) CosAngle[cp] = CosTableArray[degree];
    _ARRW(CosAngle, cp) << (CosTableArray[degree])
    # (Line 597) if (CosAngle[cp] > 2147483648)
    if EUDIf()(CosAngle[cp] <= 2147483648, neg=True):
        # (Line 598) {
        # (Line 599) CosAngle[cp] = -CosAngle[cp];
        _ARRW(CosAngle, cp) << (-CosAngle[cp])
        # (Line 600) CosAngle[cp] = (CosAngle[cp] * distance) / 100;
        _ARRW(CosAngle, cp) << ((CosAngle[cp] * distance_1) // 100)
        # (Line 601) CosAngle[cp] = -CosAngle[cp];
        _ARRW(CosAngle, cp) << (-CosAngle[cp])
        # (Line 602) }
        # (Line 603) else
        # (Line 604) {
    if EUDElse()():
        # (Line 605) CosAngle[cp] = (CosAngle[cp] * distance) / 100;
        _ARRW(CosAngle, cp) << ((CosAngle[cp] * distance_1) // 100)
        # (Line 606) }
        # (Line 607) }
    EUDEndIf()
    # (Line 609) function EdgeShapeWithProperty(cp : TrgPlayer, count, Unit : TrgUnit, degree, n, interval, property)

# (Line 610) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None])
def EdgeShapeWithProperty(cp, count_1, Unit, degree, n, interval, property):
    # (Line 611) var i = 0;
    i = EUDVariable()
    i << (0)
    # (Line 613) Table_Sin(cp, degree, interval * 14 / 10);
    Table_Sin(cp, degree, interval * 14 // 10)
    # (Line 614) Table_Cos(cp, degree, interval * 14 / 10);
    Table_Cos(cp, degree, interval * 14 // 10)
    # (Line 616) var x_o = CosAngle[cp];
    x_o = EUDVariable()
    x_o << (CosAngle[cp])
    # (Line 617) var y_o = SinAngle[cp];
    y_o = EUDVariable()
    y_o << (SinAngle[cp])
    # (Line 619) var distance = (interval * 2) / (n - 1);
    distance_1 = EUDVariable()
    distance_1 << ((interval * 2) // (n - 1))
    # (Line 621) Table_Sin(cp, degree + 45, distance);
    Table_Sin(cp, degree + 45, distance_1)
    # (Line 622) Table_Cos(cp, degree + 45, distance);
    Table_Cos(cp, degree + 45, distance_1)
    # (Line 624) var distance_x = CosAngle[cp];
    distance_x = EUDVariable()
    distance_x << (CosAngle[cp])
    # (Line 625) var distance_y = SinAngle[cp];
    distance_y = EUDVariable()
    distance_y << (SinAngle[cp])
    # (Line 627) if (n == 1)
    if EUDIf()(n == 1):
        # (Line 628) {
        # (Line 629) DotShapeWithProperty(cp, 1, Unit, 0, 0, property);
        DotShapeWithProperty(cp, 1, Unit, 0, 0, property)
        # (Line 630) }
        # (Line 631) else if (n > 1)
    if EUDElseIf()(n <= 1, neg=True):
        # (Line 632) {
        # (Line 633) for (; i < n - 1; i++)
        if EUDWhile()(i >= n - 1, neg=True):
            def _t4():
                i.__iadd__(1)
            # (Line 634) {
            # (Line 635) SquareShapeWithProperty(cp, 1, Unit, x_o - (distance_x * i), y_o - (distance_y * i), property);
            SquareShapeWithProperty(cp, 1, Unit, x_o - (distance_x * i), y_o - (distance_y * i), property)
            # (Line 636) }
            # (Line 637) }
            EUDSetContinuePoint()
            _t4()
        EUDEndWhile()
        # (Line 638) }
    EUDEndIf()
    # (Line 640) function EdgeShape(cp : TrgPlayer, count, Unit : TrgUnit, degree, n, interval)

# (Line 641) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None])
def EdgeShape(cp, count_1, Unit, degree, n, interval):
    # (Line 642) var i = 0;
    i = EUDVariable()
    i << (0)
    # (Line 644) Table_Sin(cp, degree, interval * 14 / 10);
    Table_Sin(cp, degree, interval * 14 // 10)
    # (Line 645) Table_Cos(cp, degree, interval * 14 / 10);
    Table_Cos(cp, degree, interval * 14 // 10)
    # (Line 647) var x_o = CosAngle[cp];
    x_o = EUDVariable()
    x_o << (CosAngle[cp])
    # (Line 648) var y_o = SinAngle[cp];
    y_o = EUDVariable()
    y_o << (SinAngle[cp])
    # (Line 650) var distance = (interval * 2) / (n - 1);
    distance_1 = EUDVariable()
    distance_1 << ((interval * 2) // (n - 1))
    # (Line 652) Table_Sin(cp, degree + 45, distance);
    Table_Sin(cp, degree + 45, distance_1)
    # (Line 653) Table_Cos(cp, degree + 45, distance);
    Table_Cos(cp, degree + 45, distance_1)
    # (Line 655) var distance_x = CosAngle[cp];
    distance_x = EUDVariable()
    distance_x << (CosAngle[cp])
    # (Line 656) var distance_y = SinAngle[cp];
    distance_y = EUDVariable()
    distance_y << (SinAngle[cp])
    # (Line 658) if (n == 1)
    if EUDIf()(n == 1):
        # (Line 659) {
        # (Line 660) DotShape(cp, 1, Unit, 0, 0);
        DotShape(cp, 1, Unit, 0, 0)
        # (Line 661) }
        # (Line 662) else if (n > 1)
    if EUDElseIf()(n <= 1, neg=True):
        # (Line 663) {
        # (Line 664) for (; i < n - 1; i++)
        if EUDWhile()(i >= n - 1, neg=True):
            def _t4():
                i.__iadd__(1)
            # (Line 665) {
            # (Line 666) SquareShape(cp, 1, Unit, x_o - (distance_x * i), y_o - (distance_y * i));
            SquareShape(cp, 1, Unit, x_o - (distance_x * i), y_o - (distance_y * i))
            # (Line 667) }
            # (Line 668) }
            EUDSetContinuePoint()
            _t4()
        EUDEndWhile()
        # (Line 669) }
    EUDEndIf()
    # (Line 670) function EdgeShapeAtWithProperty(cp : TrgPlayer, count, Unit : TrgUnit, degree, n, interval, x, y, property)

# (Line 671) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None, None, None])
def EdgeShapeAtWithProperty(cp, count_1, Unit, degree, n, interval, x, y, property):
    # (Line 672) var i = 0;
    i = EUDVariable()
    i << (0)
    # (Line 674) Table_Sin(cp, degree, interval * 14 / 10);
    Table_Sin(cp, degree, interval * 14 // 10)
    # (Line 675) Table_Cos(cp, degree, interval * 14 / 10);
    Table_Cos(cp, degree, interval * 14 // 10)
    # (Line 677) var x_o = CosAngle[cp];
    x_o = EUDVariable()
    x_o << (CosAngle[cp])
    # (Line 678) var y_o = SinAngle[cp];
    y_o = EUDVariable()
    y_o << (SinAngle[cp])
    # (Line 680) var distance = (interval * 2) / (n - 1);
    distance_1 = EUDVariable()
    distance_1 << ((interval * 2) // (n - 1))
    # (Line 682) Table_Sin(cp, degree + 45, distance);
    Table_Sin(cp, degree + 45, distance_1)
    # (Line 683) Table_Cos(cp, degree + 45, distance);
    Table_Cos(cp, degree + 45, distance_1)
    # (Line 685) var distance_x = CosAngle[cp];
    distance_x = EUDVariable()
    distance_x << (CosAngle[cp])
    # (Line 686) var distance_y = SinAngle[cp];
    distance_y = EUDVariable()
    distance_y << (SinAngle[cp])
    # (Line 688) if (n == 1)
    if EUDIf()(n == 1):
        # (Line 689) {
        # (Line 690) DotShapeWithProperty(cp, 1, Unit, x, y, property);
        DotShapeWithProperty(cp, 1, Unit, x, y, property)
        # (Line 691) }
        # (Line 692) else if (n > 1)
    if EUDElseIf()(n <= 1, neg=True):
        # (Line 693) {
        # (Line 694) for (; i < n - 1; i++)
        if EUDWhile()(i >= n - 1, neg=True):
            def _t4():
                i.__iadd__(1)
            # (Line 695) {
            # (Line 696) SquareShapeAtWithProperty(cp, 1, Unit, x_o - (distance_x * i), y_o - (distance_y * i), x, y, property);
            SquareShapeAtWithProperty(cp, 1, Unit, x_o - (distance_x * i), y_o - (distance_y * i), x, y, property)
            # (Line 697) }
            # (Line 698) }
            EUDSetContinuePoint()
            _t4()
        EUDEndWhile()
        # (Line 699) }
    EUDEndIf()
    # (Line 701) function EdgeShapeAt(cp : TrgPlayer, count, Unit : TrgUnit, degree, n, interval, x, y)

# (Line 702) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None, None])
def EdgeShapeAt(cp, count_1, Unit, degree, n, interval, x, y):
    # (Line 703) var i = 0;
    i = EUDVariable()
    i << (0)
    # (Line 705) Table_Sin(cp, degree, interval * 14 / 10);
    Table_Sin(cp, degree, interval * 14 // 10)
    # (Line 706) Table_Cos(cp, degree, interval * 14 / 10);
    Table_Cos(cp, degree, interval * 14 // 10)
    # (Line 708) var x_o = CosAngle[cp];
    x_o = EUDVariable()
    x_o << (CosAngle[cp])
    # (Line 709) var y_o = SinAngle[cp];
    y_o = EUDVariable()
    y_o << (SinAngle[cp])
    # (Line 711) var distance = (interval * 2) / (n - 1);
    distance_1 = EUDVariable()
    distance_1 << ((interval * 2) // (n - 1))
    # (Line 713) Table_Sin(cp, degree + 45, distance);
    Table_Sin(cp, degree + 45, distance_1)
    # (Line 714) Table_Cos(cp, degree + 45, distance);
    Table_Cos(cp, degree + 45, distance_1)
    # (Line 716) var distance_x = CosAngle[cp];
    distance_x = EUDVariable()
    distance_x << (CosAngle[cp])
    # (Line 717) var distance_y = SinAngle[cp];
    distance_y = EUDVariable()
    distance_y << (SinAngle[cp])
    # (Line 719) if (n == 1)
    if EUDIf()(n == 1):
        # (Line 720) {
        # (Line 721) DotShape(cp, 1, Unit, x, y);
        DotShape(cp, 1, Unit, x, y)
        # (Line 722) }
        # (Line 723) else if (n > 1)
    if EUDElseIf()(n <= 1, neg=True):
        # (Line 724) {
        # (Line 725) for (; i < n - 1; i++)
        if EUDWhile()(i >= n - 1, neg=True):
            def _t4():
                i.__iadd__(1)
            # (Line 726) {
            # (Line 727) SquareShapeAt(cp, 1, Unit, x_o - (distance_x * i), y_o - (distance_y * i), x, y);
            SquareShapeAt(cp, 1, Unit, x_o - (distance_x * i), y_o - (distance_y * i), x, y)
            # (Line 728) }
            # (Line 729) }
            EUDSetContinuePoint()
            _t4()
        EUDEndWhile()
        # (Line 730) }
    EUDEndIf()
