## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) function MoveLoc(Unit : TrgUnit, location : TrgLocation, cp : TrgPlayer, x, y)
# (Line 2) {
@EUDTypedFunc([TrgUnit, TrgLocation, TrgPlayer, None, None])
def MoveLoc(Unit, location, cp, x, y):
    # (Line 3) MoveLocation(location, Unit, cp, "Anywhere");
    # (Line 4) addloc(location - 1, x, y);
    DoActions(MoveLocation(location, Unit, cp, "Anywhere"))
    f_addloc(location - 1, x, y)
    # (Line 5) }
    # (Line 7) function SkillUnit(count, Unit : TrgUnit, location : TrgLocation, cp : TrgPlayer)

# (Line 8) {
@EUDTypedFunc([None, TrgUnit, TrgLocation, TrgPlayer])
def SkillUnit(count, Unit, location, cp):
    # (Line 9) CreateUnit(count, Unit, "[Skill]Unit_Wait_1", cp);
    # (Line 10) SetInvincibility(Enable, Unit, cp, "[Skill]Unit_Wait_ALL");
    DoActions(CreateUnit(count, Unit, "[Skill]Unit_Wait_1", cp))
    # (Line 11) MoveUnit(count, Unit, cp, "[Skill]Unit_Wait_ALL", location);
    DoActions(SetInvincibility(Enable, Unit, cp, "[Skill]Unit_Wait_ALL"))
    # (Line 12) }
    DoActions(MoveUnit(count, Unit, cp, "[Skill]Unit_Wait_ALL", location))
    # (Line 14) function SkillWait(cp, count)

# (Line 15) {
@EUDFunc
def SkillWait(cp, count):
    # (Line 16) SetDeaths(cp, SetTo, count/83 + 1, " `WaitTime");
    # (Line 17) }
    DoActions(SetDeaths(cp, SetTo, count // 83 + 1, " `WaitTime"))
    # (Line 19) function SkillEnd(cp)

# (Line 20) {
@EUDFunc
def SkillEnd(cp):
    # (Line 21) SetDeaths(cp, SetTo, 12, " `SkillWait");
    # (Line 22) }
    DoActions(SetDeaths(cp, SetTo, 12, " `SkillWait"))
    # (Line 24) function SquareShape(heroID : TrgUnit, count, Unit : TrgUnit, location : TrgLocation, cp : TrgPlayer, x, y)

# (Line 25) {
@EUDTypedFunc([TrgUnit, None, TrgUnit, TrgLocation, TrgPlayer, None, None])
def SquareShape(heroID, count, Unit, location, cp, x, y):
    # (Line 26) MoveLoc(heroID, location, cp, x, y);
    MoveLoc(heroID, location, cp, x, y)
    # (Line 27) SkillUnit(count, Unit, location, cp);
    SkillUnit(count, Unit, location, cp)
    # (Line 28) MoveLoc(heroID, location, cp, -y, x);
    MoveLoc(heroID, location, cp, -y, x)
    # (Line 29) SkillUnit(count, Unit, location, cp);
    SkillUnit(count, Unit, location, cp)
    # (Line 30) MoveLoc(heroID, location, cp, -x, -y);
    MoveLoc(heroID, location, cp, -x, -y)
    # (Line 31) SkillUnit(count, Unit, location, cp);
    SkillUnit(count, Unit, location, cp)
    # (Line 32) MoveLoc(heroID, location, cp, y, -x);
    MoveLoc(heroID, location, cp, y, -x)
    # (Line 33) SkillUnit(count, Unit, location, cp);
    SkillUnit(count, Unit, location, cp)
    # (Line 34) }
    # (Line 36) function RectangleShape(heroID : TrgUnit, count, Unit : TrgUnit, location : TrgLocation, cp : TrgPlayer, x, y)

# (Line 37) {
@EUDTypedFunc([TrgUnit, None, TrgUnit, TrgLocation, TrgPlayer, None, None])
def RectangleShape(heroID, count, Unit, location, cp, x, y):
    # (Line 38) MoveLoc(heroID, location, cp, x, y);
    MoveLoc(heroID, location, cp, x, y)
    # (Line 39) SkillUnit(count, Unit, location, cp);
    SkillUnit(count, Unit, location, cp)
    # (Line 40) MoveLoc(heroID, location, cp, -y, x);
    MoveLoc(heroID, location, cp, -y, x)
    # (Line 41) SkillUnit(count, Unit, location, cp);
    SkillUnit(count, Unit, location, cp)
    # (Line 42) MoveLoc(heroID, location, cp, -x, -y);
    MoveLoc(heroID, location, cp, -x, -y)
    # (Line 43) SkillUnit(count, Unit, location, cp);
    SkillUnit(count, Unit, location, cp)
    # (Line 44) MoveLoc(heroID, location, cp, y, -x);
    MoveLoc(heroID, location, cp, y, -x)
    # (Line 45) SkillUnit(count, Unit, location, cp);
    SkillUnit(count, Unit, location, cp)
    # (Line 46) }
