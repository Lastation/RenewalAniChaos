## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import py_math;
import math
# (Line 2) import Variable as v;
import Variable as v
# (Line 4) const step		= PVariable();			// SkillStep
step = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 5) const count 		= PVariable();			// SkillCount
count = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 6) const loop 		= PVariable();			// SkillLoop
loop = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 7) const delay		= PVariable();			// wait(value);
delay = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 8) const wait		= PVariable();			// SkillWait
wait = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 10) const location 	= PVariable();			// 로케이션 번호
location = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 11) const heroID 	= PVariable();			// 영웅 유닛 번호
heroID = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 13) const UltimateA	= PVariable();			// 궁극기 1번 소모량
UltimateA = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 14) const UltimateB	= PVariable();			// 궁극기 2번 소모량
UltimateB = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 15) const UltimateC	= PVariable();			// 궁극기 3번 소모량
UltimateC = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 17) const UniqueA	= PVariable();			// 유니크 1번 쿨타임
UniqueA = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 19) const distance	= PVariable();			// 거리 관련 변수
distance = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 20) const SinAngle 	= PVariable();			// Sin 변수
SinAngle = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 21) const CosAngle 	= PVariable();			// Cos 변수
CosAngle = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 23) const CosTableArray = EUDArray(py_eval("[int(round(100*math.cos(math.radians(t)))) for t in range(361)]"));
CosTableArray = _CGFW(lambda: [EUDArray(eval("[int(round(100*math.cos(math.radians(t)))) for t in range(361)]"))], 1)[0]
# (Line 24) const SinTableArray 	= EUDArray(py_eval("[int(round(100*math.sin(math.radians(t)))) for t in range(361)]"));
SinTableArray = _CGFW(lambda: [EUDArray(eval("[int(round(100*math.sin(math.radians(t)))) for t in range(361)]"))], 1)[0]
# (Line 26) const Rusaruka_Voice 	= PVariable();
Rusaruka_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 27) const Yuuna_Voice 		= PVariable();
Yuuna_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 29) function Table_Sin(cp, degree, distance);
# (Line 30) function Table_Cos(cp, degree, distance);
# (Line 32) function Voice_Routine(cp, num)
# (Line 33) {
@EUDFunc
def Voice_Routine(cp, num):
    # (Line 34) switch(v.Hero_Num[cp])
    EUDSwitch(v.Hero_Num[cp])
    # (Line 35) {
    # (Line 36) case 1:
    _t1 = EUDSwitchCase()
    # (Line 37) Rusaruka_Voice[0] = num;
    if _t1(1):
        _ARRW(Rusaruka_Voice, 0) << (num)
        # (Line 38) Rusaruka_Voice[1] = num;
        _ARRW(Rusaruka_Voice, 1) << (num)
        # (Line 39) Rusaruka_Voice[2] = num;
        _ARRW(Rusaruka_Voice, 2) << (num)
        # (Line 40) Rusaruka_Voice[3] = num;
        _ARRW(Rusaruka_Voice, 3) << (num)
        # (Line 41) Rusaruka_Voice[4] = num;
        _ARRW(Rusaruka_Voice, 4) << (num)
        # (Line 42) Rusaruka_Voice[5] = num;
        _ARRW(Rusaruka_Voice, 5) << (num)
        # (Line 43) break;
        EUDBreak()
        # (Line 44) case 22:
    _t2 = EUDSwitchCase()
    # (Line 45) Yuuna_Voice[0] = num;
    if _t2(22):
        _ARRW(Yuuna_Voice, 0) << (num)
        # (Line 46) Yuuna_Voice[1] = num;
        _ARRW(Yuuna_Voice, 1) << (num)
        # (Line 47) Yuuna_Voice[2] = num;
        _ARRW(Yuuna_Voice, 2) << (num)
        # (Line 48) Yuuna_Voice[3] = num;
        _ARRW(Yuuna_Voice, 3) << (num)
        # (Line 49) Yuuna_Voice[4] = num;
        _ARRW(Yuuna_Voice, 4) << (num)
        # (Line 50) Yuuna_Voice[5] = num;
        _ARRW(Yuuna_Voice, 5) << (num)
        # (Line 51) break;
        EUDBreak()
        # (Line 52) }
    # (Line 53) }
    EUDEndSwitch()
    # (Line 56) function MoveLoc(Unit : TrgUnit, cp : TrgPlayer, x, y)

# (Line 57) {
@EUDTypedFunc([TrgUnit, TrgPlayer, None, None])
def MoveLoc(Unit, cp, x, y):
    # (Line 58) MoveLocation(location[cp], Unit, cp, "Anywhere");
    # (Line 59) addloc(location[cp] - 1, x, y);
    DoActions(MoveLocation(location[cp], Unit, cp, "Anywhere"))
    f_addloc(location[cp] - 1, x, y)
    # (Line 60) }
    # (Line 62) function SkillUnit(cp : TrgPlayer, count, Unit : TrgUnit)

# (Line 63) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit])
def SkillUnit(cp, count_1, Unit):
    # (Line 64) CreateUnit(count, Unit, "[Skill]Unit_Wait_1", cp);
    # (Line 65) SetInvincibility(Enable, Unit, cp, "[Skill]Unit_Wait_ALL");
    DoActions(CreateUnit(count_1, Unit, "[Skill]Unit_Wait_1", cp))
    # (Line 66) MoveUnit(count, Unit, cp, "[Skill]Unit_Wait_ALL", location[cp]);
    DoActions(SetInvincibility(Enable, Unit, cp, "[Skill]Unit_Wait_ALL"))
    # (Line 67) }
    DoActions(MoveUnit(count_1, Unit, cp, "[Skill]Unit_Wait_ALL", location[cp]))
    # (Line 69) function SkillWait(cp, count)

# (Line 70) {
@EUDFunc
def SkillWait(cp, count_1):
    # (Line 71) delay[cp] = count/83 + 1;
    _ARRW(delay, cp) << (count_1 // 83 + 1)
    # (Line 72) }
    # (Line 74) function SkillEnd(cp)

# (Line 75) {
@EUDFunc
def SkillEnd(cp):
    # (Line 76) wait[cp] = 12;
    _ARRW(wait, cp) << (12)
    # (Line 77) }
    # (Line 79) function SquareShape(cp : TrgPlayer, count, Unit : TrgUnit, x, y)

# (Line 80) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def SquareShape(cp, count_1, Unit, x, y):
    # (Line 81) MoveLoc(heroID[cp], cp, x, y);
    MoveLoc(heroID[cp], cp, x, y)
    # (Line 82) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 83) MoveLoc(heroID[cp], cp, -y, x);
    MoveLoc(heroID[cp], cp, -y, x)
    # (Line 84) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 85) MoveLoc(heroID[cp], cp, -x, -y);
    MoveLoc(heroID[cp], cp, -x, -y)
    # (Line 86) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 87) MoveLoc(heroID[cp], cp, y, -x);
    MoveLoc(heroID[cp], cp, y, -x)
    # (Line 88) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 89) }
    # (Line 91) function SquareShapeAt(cp : TrgPlayer, count, Unit : TrgUnit, x, y, distanceX, distanceY)

# (Line 92) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None])
def SquareShapeAt(cp, count_1, Unit, x, y, distanceX, distanceY):
    # (Line 93) MoveLoc(heroID[cp], cp, x + distanceX, y + distanceY);
    MoveLoc(heroID[cp], cp, x + distanceX, y + distanceY)
    # (Line 94) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 95) MoveLoc(heroID[cp], cp, -y + distanceY, x + distanceX);
    MoveLoc(heroID[cp], cp, -y + distanceY, x + distanceX)
    # (Line 96) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 97) MoveLoc(heroID[cp], cp, -x + distanceX, -y + distanceY);
    MoveLoc(heroID[cp], cp, -x + distanceX, -y + distanceY)
    # (Line 98) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 99) MoveLoc(heroID[cp], cp, y + distanceY, -x + distanceX);
    MoveLoc(heroID[cp], cp, y + distanceY, -x + distanceX)
    # (Line 100) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 101) }
    # (Line 103) function NxNSquareShape(cp : TrgPlayer, count, Unit : TrgUnit, n, interval)

# (Line 104) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def NxNSquareShape(cp, count_1, Unit, n, interval):
    # (Line 105) var i = 0;
    i = EUDVariable()
    i << (0)
    # (Line 106) var destX, destY;
    destX, destY = EUDCreateVariables(2)
    # (Line 107) var distance = interval / 2;
    distance_1 = EUDVariable()
    distance_1 << (interval // 2)
    # (Line 108) var size = n * n;
    size = EUDVariable()
    size << (n * n)
    # (Line 110) for (; i < size / 4; i++)
    if EUDWhile()(i >= size // 4, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 111) {
        # (Line 112) if (n == 1)
        if EUDIf()(n == 1):
            # (Line 113) {
            # (Line 114) MoveLoc(heroID[cp] ,cp, 0, 0);
            MoveLoc(heroID[cp], cp, 0, 0)
            # (Line 115) SkillUnit(cp, count, Unit);
            SkillUnit(cp, count_1, Unit)
            # (Line 116) }
            # (Line 117) else if (n % 2 == 0)
        if EUDElseIf()(n % 2 == 0):
            # (Line 118) {
            # (Line 119) destX = i % (n / 2) + 1;
            destX << (i % (n // 2) + 1)
            # (Line 120) destY = i / (n / 2) + 1;
            destY << (i // (n // 2) + 1)
            # (Line 121) if (destX == 1)
            if EUDIf()(destX == 1):
                # (Line 122) {
                # (Line 123) SquareShape(cp, count, Unit, distance, destY * interval - distance);
                SquareShape(cp, count_1, Unit, distance_1, destY * interval - distance_1)
                # (Line 124) }
                # (Line 125) else if (destY == 1)
            if EUDElseIf()(destY == 1):
                # (Line 126) {
                # (Line 127) SquareShape(cp, count, Unit, destX * interval - distance, distance);
                SquareShape(cp, count_1, Unit, destX * interval - distance_1, distance_1)
                # (Line 128) }
                # (Line 129) else
                # (Line 130) {
            if EUDElse()():
                # (Line 131) SquareShape(cp, count, Unit, destX * interval - distance, destY * interval - distance);
                SquareShape(cp, count_1, Unit, destX * interval - distance_1, destY * interval - distance_1)
                # (Line 132) }
                # (Line 133) }
            EUDEndIf()
            # (Line 134) else if (n % 2 == 1)
        if EUDElseIf()(n % 2 == 1):
            # (Line 135) {
            # (Line 136) destX = i % (n / 2);
            destX << (i % (n // 2))
            # (Line 137) destY = i / (n / 2);
            destY << (i // (n // 2))
            # (Line 139) if (i == 0)
            if EUDIf()(i == 0):
                # (Line 140) {
                # (Line 141) MoveLoc(Unit ,cp, 0, 0);
                MoveLoc(Unit, cp, 0, 0)
                # (Line 142) SkillUnit(cp, count, Unit);
                SkillUnit(cp, count_1, Unit)
                # (Line 143) }
                # (Line 144) else if (destY == 0)
            if EUDElseIf()(destY == 0):
                # (Line 145) {
                # (Line 146) SquareShape(cp, count, Unit, destX * interval, 0);
                SquareShape(cp, count_1, Unit, destX * interval, 0)
                # (Line 147) }
                # (Line 148) else
                # (Line 149) {
            if EUDElse()():
                # (Line 150) SquareShape(cp, count, Unit, destX * interval + interval, destY * interval);
                SquareShape(cp, count_1, Unit, destX * interval + interval, destY * interval)
                # (Line 151) }
                # (Line 153) if (i == size / 4 - 1)
            EUDEndIf()
            if EUDIf()(i == size // 4 - 1):
                # (Line 154) {
                # (Line 155) SquareShape(cp, count, Unit, (n / 2) * interval, 0);
                SquareShape(cp, count_1, Unit, (n // 2) * interval, 0)
                # (Line 156) }
                # (Line 157) }
            EUDEndIf()
            # (Line 158) }
        EUDEndIf()
        # (Line 159) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 162) function NxNSquareShapeAt(cp : TrgPlayer, count, Unit : TrgUnit, n, interval, distanceX, distanceY)

# (Line 163) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None])
def NxNSquareShapeAt(cp, count_1, Unit, n, interval, distanceX, distanceY):
    # (Line 164) var i = 0;
    i = EUDVariable()
    i << (0)
    # (Line 165) var destX, destY;
    destX, destY = EUDCreateVariables(2)
    # (Line 166) var distance = interval / 2;
    distance_1 = EUDVariable()
    distance_1 << (interval // 2)
    # (Line 167) var size = n * n;
    size = EUDVariable()
    size << (n * n)
    # (Line 169) for (; i < size / 4; i++)
    if EUDWhile()(i >= size // 4, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 170) {
        # (Line 171) if (n == 1)
        if EUDIf()(n == 1):
            # (Line 172) {
            # (Line 173) MoveLoc(heroID[cp] ,cp, distanceX, distanceY);
            MoveLoc(heroID[cp], cp, distanceX, distanceY)
            # (Line 174) SkillUnit(cp, count, Unit);
            SkillUnit(cp, count_1, Unit)
            # (Line 175) }
            # (Line 176) else if (n % 2 == 0)
        if EUDElseIf()(n % 2 == 0):
            # (Line 177) {
            # (Line 178) destX = i % (n / 2) + 1;
            destX << (i % (n // 2) + 1)
            # (Line 179) destY = i / (n / 2) + 1;
            destY << (i // (n // 2) + 1)
            # (Line 181) if (destX == 1)
            if EUDIf()(destX == 1):
                # (Line 182) {
                # (Line 183) SquareShapeAt(cp, count, Unit, distance, destY * interval - distance, distanceX, distanceY);
                SquareShapeAt(cp, count_1, Unit, distance_1, destY * interval - distance_1, distanceX, distanceY)
                # (Line 184) }
                # (Line 185) else if (destY == 1)
            if EUDElseIf()(destY == 1):
                # (Line 186) {
                # (Line 187) SquareShapeAt(cp, count, Unit, destX * interval - distance, distance, distanceX, distanceY);
                SquareShapeAt(cp, count_1, Unit, destX * interval - distance_1, distance_1, distanceX, distanceY)
                # (Line 188) }
                # (Line 189) else
                # (Line 190) {
            if EUDElse()():
                # (Line 191) SquareShapeAt(cp, count, Unit, destX * interval - distance, destY * interval - distance, distanceX, distanceY);
                SquareShapeAt(cp, count_1, Unit, destX * interval - distance_1, destY * interval - distance_1, distanceX, distanceY)
                # (Line 192) }
                # (Line 193) }
            EUDEndIf()
            # (Line 194) else if (n % 2 == 1)
        if EUDElseIf()(n % 2 == 1):
            # (Line 195) {
            # (Line 196) destX = i % (n / 2);
            destX << (i % (n // 2))
            # (Line 197) destY = i / (n / 2);
            destY << (i // (n // 2))
            # (Line 199) if (i == 0)
            if EUDIf()(i == 0):
                # (Line 200) {
                # (Line 201) MoveLoc(heroID[cp] ,cp, distanceX, distanceY);
                MoveLoc(heroID[cp], cp, distanceX, distanceY)
                # (Line 202) SkillUnit(cp, count, Unit);
                SkillUnit(cp, count_1, Unit)
                # (Line 203) }
                # (Line 204) else if (destY == 0)
            if EUDElseIf()(destY == 0):
                # (Line 205) {
                # (Line 206) SquareShapeAt(cp, count, Unit, destX * interval, 0, distanceX, distanceY);
                SquareShapeAt(cp, count_1, Unit, destX * interval, 0, distanceX, distanceY)
                # (Line 207) }
                # (Line 208) else
                # (Line 209) {
            if EUDElse()():
                # (Line 210) SquareShapeAt(cp, count, Unit, destX * interval + interval, destY * interval, distanceX, distanceY);
                SquareShapeAt(cp, count_1, Unit, destX * interval + interval, destY * interval, distanceX, distanceY)
                # (Line 211) }
                # (Line 213) if (i == size / 4 - 1)
            EUDEndIf()
            if EUDIf()(i == size // 4 - 1):
                # (Line 214) {
                # (Line 215) SquareShapeAt(cp, count, Unit, (n / 2) * interval, 0, distanceX, distanceY);
                SquareShapeAt(cp, count_1, Unit, (n // 2) * interval, 0, distanceX, distanceY)
                # (Line 216) }
                # (Line 217) }
            EUDEndIf()
            # (Line 218) }
        EUDEndIf()
        # (Line 219) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 221) function LineShape(cp : TrgPlayer, count, Unit : TrgUnit, degree, n, interval, distance)

# (Line 222) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None])
def LineShape(cp, count_1, Unit, degree, n, interval, distance_1):
    # (Line 223) var i = 0;
    i = EUDVariable()
    i << (0)
    # (Line 225) Table_Sin(cp, degree + 90, distance);
    Table_Sin(cp, degree + 90, distance_1)
    # (Line 226) Table_Cos(cp, degree + 90, distance);
    Table_Cos(cp, degree + 90, distance_1)
    # (Line 227) var x_initial = CosAngle[cp];
    x_initial = EUDVariable()
    x_initial << (CosAngle[cp])
    # (Line 228) var y_initial = SinAngle[cp];
    y_initial = EUDVariable()
    y_initial << (SinAngle[cp])
    # (Line 230) if (n / 2 == 0)
    if EUDIf()(n // 2 == 0):
        # (Line 231) {
        # (Line 232) Table_Sin(cp, degree, interval * (n / 2) - interval / 2);
        Table_Sin(cp, degree, interval * (n // 2) - interval // 2)
        # (Line 233) Table_Cos(cp, degree, interval * (n / 2) - interval / 2);
        Table_Cos(cp, degree, interval * (n // 2) - interval // 2)
        # (Line 234) }
        # (Line 235) else
        # (Line 236) {
    if EUDElse()():
        # (Line 237) Table_Sin(cp, degree, interval * (n / 2));
        Table_Sin(cp, degree, interval * (n // 2))
        # (Line 238) Table_Cos(cp, degree, interval * (n / 2));
        Table_Cos(cp, degree, interval * (n // 2))
        # (Line 239) }
        # (Line 241) x_initial = x_initial + CosAngle[cp];
    EUDEndIf()
    x_initial << (x_initial + CosAngle[cp])
    # (Line 242) y_initial = y_initial + SinAngle[cp];
    y_initial << (y_initial + SinAngle[cp])
    # (Line 244) Table_Sin(cp, degree, interval);
    Table_Sin(cp, degree, interval)
    # (Line 245) Table_Cos(cp, degree, interval);
    Table_Cos(cp, degree, interval)
    # (Line 247) for (; i < n; i++)
    if EUDWhile()(i >= n, neg=True):
        def _t3():
            i.__iadd__(1)
        # (Line 248) {
        # (Line 249) MoveLoc(Unit, cp, x_initial - i * CosAngle[cp], y_initial - i * SinAngle[cp]);
        MoveLoc(Unit, cp, x_initial - i * CosAngle[cp], y_initial - i * SinAngle[cp])
        # (Line 250) SkillUnit(cp, count, Unit);
        SkillUnit(cp, count_1, Unit)
        # (Line 251) }
        # (Line 253) }
        EUDSetContinuePoint()
        _t3()
    EUDEndWhile()
    # (Line 255) function Table_Sin(cp, degree, distance)

# (Line 256) {
@EUDFunc
def Table_Sin(cp, degree, distance_1):
    # (Line 257) degree = degree % 360;
    degree << (degree % 360)
    # (Line 258) SinAngle[cp] = SinTableArray[degree];
    _ARRW(SinAngle, cp) << (SinTableArray[degree])
    # (Line 260) if (SinAngle[cp] > 2147483648)
    if EUDIf()(SinAngle[cp] <= 2147483648, neg=True):
        # (Line 261) {
        # (Line 262) SinAngle[cp] = -SinAngle[cp];
        _ARRW(SinAngle, cp) << (-SinAngle[cp])
        # (Line 263) SinAngle[cp] = (SinAngle[cp] * distance) / 100;
        _ARRW(SinAngle, cp) << ((SinAngle[cp] * distance_1) // 100)
        # (Line 264) SinAngle[cp] = -SinAngle[cp];
        _ARRW(SinAngle, cp) << (-SinAngle[cp])
        # (Line 265) }
        # (Line 266) else
        # (Line 267) {
    if EUDElse()():
        # (Line 268) SinAngle[cp] = (SinAngle[cp] * distance) / 100;
        _ARRW(SinAngle, cp) << ((SinAngle[cp] * distance_1) // 100)
        # (Line 269) }
        # (Line 270) }
    EUDEndIf()
    # (Line 272) function Table_Cos(cp, degree, distance)

# (Line 273) {
@EUDFunc
def Table_Cos(cp, degree, distance_1):
    # (Line 274) degree = degree % 360;
    degree << (degree % 360)
    # (Line 275) CosAngle[cp] = CosTableArray[degree];
    _ARRW(CosAngle, cp) << (CosTableArray[degree])
    # (Line 277) if (CosAngle[cp] > 2147483648)
    if EUDIf()(CosAngle[cp] <= 2147483648, neg=True):
        # (Line 278) {
        # (Line 279) CosAngle[cp] = -CosAngle[cp];
        _ARRW(CosAngle, cp) << (-CosAngle[cp])
        # (Line 280) CosAngle[cp] = (CosAngle[cp] * distance) / 100;
        _ARRW(CosAngle, cp) << ((CosAngle[cp] * distance_1) // 100)
        # (Line 281) CosAngle[cp] = -CosAngle[cp];
        _ARRW(CosAngle, cp) << (-CosAngle[cp])
        # (Line 282) }
        # (Line 283) else
        # (Line 284) {
    if EUDElse()():
        # (Line 285) CosAngle[cp] = (CosAngle[cp] * distance) / 100;
        _ARRW(CosAngle, cp) << ((CosAngle[cp] * distance_1) // 100)
        # (Line 286) }
        # (Line 287) }
    EUDEndIf()
