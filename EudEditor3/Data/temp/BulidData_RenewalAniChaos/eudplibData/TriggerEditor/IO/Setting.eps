import SCArchive as sca;
import SCAFlexible as scf;

import Variable as v;
import customText as tct;

var txtPtr, btnPtr, btnPos, oldCP;
const trgk = $T('Artanis & safhfh');

function PingCheck();
function ShowCharacterExp();

function ResetCharacterExp(cp)
{
	for (var i = 0; i < v.CharacterMax; i++)
	{
		v.SaveExp[8 * v.CharacterMax + cp] = 0;
	}
}

function AddCharacterExp(HeroNumber, cp)
{		
	if (Deaths(CurrentPlayer, AtLeast, 1, " `AddExp"))
	{
		const Exp = dwread_epd(EPD(0x58A364 + 48 * 166 + 4 * cp));
		v.SaveExp[8 * HeroNumber + cp] += Exp;
		sca.SaveData(0);
		
		SetDeaths(CurrentPlayer, SetTo, 0, " `AddExp");
	}
}

function SaveCharacterExp(cp)
{
	if(sca.ConnectStatus() == 1)
	{
		const HeroNumber = dwread_epd(EPD(0x58A364 + 48 * 172 + 4 * cp));
		
		AddCharacterExp(HeroNumber, cp);

		switch(sca.GetLastMessage())
		{
			case 5:
				tct.makeText("\x13\x04",ptr2s(v.Hero_Name[HeroNumber]),"의 정보를 저장중입니다.");
				tct.addText("\n\x13\x17[ \x04",ptr2s(v.Hero_Name[HeroNumber])," \x17] \x04EXP : ", v.SaveExp[8 * HeroNumber + cp],"");
				
				txtPtr = dwread_epd(EPD(0x640B58));
				tct.displayText();
				SetMemory(0x640B58, SetTo, txtPtr);
				break;
			case 6:
				tct.print("\x13\x04",ptr2s(v.Hero_Name[HeroNumber]),"의 저장을 완료하였습니다.");
				tct.addText("\n\x13\x17[ \x04",ptr2s(v.Hero_Name[HeroNumber])," \x17] \x04EXP : ", v.SaveExp[8 * HeroNumber + cp],"");
				
				txtPtr = dwread_epd(EPD(0x640B58));
				tct.displayText();
				SetMemory(0x640B58, SetTo, txtPtr);
				sca.ResetLastMessage();
				break;
		}
	}
}

function LoadCharacterExp(cp)
{
	if(sca.ConnectStatus() == 1)
	{
		if (v.isLoad[cp] == 0) { sca.LoadData(0); v.isLoad[cp] = 1; }
		
		switch(sca.GetLastMessage())
		{
			case 3:
				txtPtr = dwread_epd(EPD(0x640B58));
				tct.print("\x13\x04저장된  정보를 불러오는 중입니다.");
				SetMemory(0x640B58, SetTo, txtPtr);
				break;
			case 4:
				txtPtr = dwread_epd(EPD(0x640B58));
				tct.print("\x13\x04저장된 정보를 불러오는데 성공하였습니다.");
				SetMemory(0x640B58, SetTo, txtPtr);
				v.isLoad[cp] = 1;
				sca.ResetLastMessage();
				break;
		}
	}
}