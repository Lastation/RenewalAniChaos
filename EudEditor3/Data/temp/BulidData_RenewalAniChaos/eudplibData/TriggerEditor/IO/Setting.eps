import SCArchive as sca;

import Variable as v;
import customText as tct;

var txtPtr, btnPtr, btnPos, oldCP;
const trgk = $T('Artanis & safhfh');

function SCAMain(cp);
function SCAMessage(cp);
function GetExp(cp);
function AddExp(cp, exp);

function SCAMain(cp)
{
	if(sca.ConnectStatus() == 1)
	{
		switch(v.SCAStatus[cp])
		{
			case 0:
				sca.LoadData(0);
				v.SCAStatus[cp] = 2;
				break;
			case 1:
				AddExp(cp, v.Exp_Add[cp]);
				GetExp(cp);
				sca.SaveData(0);
				v.SCAStatus[cp] = 2;
				break;
			case 2:
				if (Deaths(CurrentPlayer, AtLeast, 1, " `SaveExp")) 
				{
					v.Exp_Add[cp] = dwread_epd(EPD(0x58A364 + 48 * 166 + 4 * cp));
					v.Exp_Total[cp] += dwread_epd(EPD(0x58A364 + 48 * 166 + 4 * cp));
					SetDeaths(CurrentPlayer, SetTo, 0, " `SaveExp");
					v.SCAStatus[cp] = 1;
				}
				break;
		}
		SCAMessage(cp);
		if (v.Exp_Player[cp] == 0) { GetExp(cp); }
	}
}


function SCAMessage(cp)
{
	switch(sca.GetLastMessage())
	{
		case 3:
			txtPtr = dwread_epd(EPD(0x640B58));
			tct.print("\x13\x04저장된  정보를 불러오는 중입니다.");
			SetMemory(0x640B58, SetTo, txtPtr);
			sca.ResetLastMessage();
			break;
		case 4:
			txtPtr = dwread_epd(EPD(0x640B58));
			tct.print("\x13\x04저장된 정보를 불러오는데 성공하였습니다.");
			SetMemory(0x640B58, SetTo, txtPtr);
			sca.ResetLastMessage();
			break;
		case 5:
			tct.makeText("\x13\x04", ptr2s(v.Hero_Name[v.Hero_Num[cp]]), "의 정보를 저장중입니다.");
			tct.addText("\n\x13\x17[ \x04", ptr2s(v.Hero_Name[v.Hero_Num[cp]]), " \x17] \x04EXP : ", v.Exp_Player[cp], "");
			txtPtr = dwread_epd(EPD(0x640B58));
			tct.displayText();
			SetMemory(0x640B58, SetTo, txtPtr);
			sca.ResetLastMessage();
			break;
		case 6:
			tct.makeText("\x13\x04",ptr2s(v.Hero_Name[v.Hero_Num[cp]]),"의 저장을 완료하였습니다.");
			tct.addText("\n\x13\x17[ \x04",ptr2s(v.Hero_Name[v.Hero_Num[cp]])," \x17] \x04EXP : ", v.Exp_Player[cp], "");
			txtPtr = dwread_epd(EPD(0x640B58));
			tct.displayText();
			SetMemory(0x640B58, SetTo, txtPtr);
			sca.ResetLastMessage();
			break;
	}
}

function GetExp(cp)
{
	if (v.Hero_Num[cp] <= 20) 	{ v.Exp_Player[cp] = v.Exp_Group[20 * cp + (v.Hero_Num[cp] - 1)]; }
}

function AddExp(cp, exp)
{
	if (v.Hero_Num[cp] <= 20) 	{ v.Exp_Group[20 * cp + (v.Hero_Num[cp] - 1)] += exp; }
}