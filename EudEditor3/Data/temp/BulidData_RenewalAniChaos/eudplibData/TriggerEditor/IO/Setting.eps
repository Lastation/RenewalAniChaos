import SCArchive as sca;

import Variable as v;
import customText as tct;

var txtPtr, btnPtr, btnPos, oldCP;
const trgk = $T('Artanis & safhfh');

function SCAMain(cp);
function SCAMessage(cp);
function GetExp(cp);
function GetCS(cp);
function AddExp(cp, exp);
function AddCS(cp, cs);
function SCASave(cp);

function SCAMain(cp)
{
	if(sca.ConnectStatus() == 1 && sca.CommandStatus() == 0)
	{
		switch(v.SCAStatus[cp])
		{
			case 0:
				sca.LoadData(0);
				v.SCAStatus[cp] = 3;
				break;
			case 1:
				if (Switch("TestModeSwitch", Cleared))
				{ sca.SaveData(0); }
				v.SCAStatus[cp] = 3;
				break;
			case 2:
				SCASave(cp);
				v.SCAStatus[cp] = 1;
				break;
			case 3:
				if (Switch(255, Cleared))
				{
					GetExp(cp);
					GetCS(cp);
				}
				else	
				{
					if (v.Hero_Num[cp] != dwread_epd(EPD(0x58A364 + 48 * 172 + 4 * cp)))
      	 				{ v.Hero_Num[cp] = dwread_epd(EPD(0x58A364 + 48 * 172 + 4 * cp)); }
					GetExp(cp);
					GetCS(cp);
				}
				
				if (Deaths(CurrentPlayer, Exactly, 1000, 175)) { v.SCAStatus[cp] = 2; SetSwitch(255, Clear); }
				break;
		}
		SCAMessage(cp);
	}
	else
	{
		if (Switch(255, Cleared))
		{
			GetExp(cp);
			GetCS(cp);
		}
		else	
		{
			if (v.Hero_Num[cp] != dwread_epd(EPD(0x58A364 + 48 * 172 + 4 * cp)))
      	 		{ v.Hero_Num[cp] = dwread_epd(EPD(0x58A364 + 48 * 172 + 4 * cp)); }
			GetExp(cp);
			GetCS(cp);
		}
		
		if (Deaths(CurrentPlayer, Exactly, 1000, 175)) { SCASave(cp); SetSwitch(255, Clear); }
	}
}

function SCASave(cp)
{				
	const Exp 	= dwread_epd(EPD(0x58A364 + 48 * 166 + 4 * cp));
	const Cs 	= dwread_epd(EPD(0x58A364 + 48 * 164 + 4 * cp));
	
	v.Exp_Total[cp] 									+= Exp;
	v.CS_Total[cp] 									+= Cs;
	v.Kill_All[cp] 										+= v.Kill_Score[cp];
	
	if (v.Hero_Num[cp] <= 20) 
	{ 
		v.Exp_Group[20 * cp + (v.Hero_Num[cp] - 1)] 		+= Exp; 
		v.CS_Group[20 * cp + (v.Hero_Num[cp] - 1)] 		= Cs;
		v.Kill_Total[20 * cp + (v.Hero_Num[cp] - 1)] 		+= v.Kill_Score[cp];
		v.Death_Total[20 * cp + (v.Hero_Num[cp] - 1)] 	+= v.Death_Score[cp];
	}
	
	SetDeaths(CurrentPlayer, SetTo, 360, 175);
}

function SCAMessage(cp)
{
	switch(sca.GetLastMessage())
	{
		case 3:
			txtPtr = dwread_epd(EPD(0x640B58));
			tct.print("\x13\x04저장된  정보를 불러오는 중입니다.");
			SetMemory(0x640B58, SetTo, txtPtr);
			sca.ResetLastMessage();
			break;
		case 4:
			txtPtr = dwread_epd(EPD(0x640B58));
			tct.print("\x13\x04저장된 정보를 불러오는데 성공하였습니다.");
			SetMemory(0x640B58, SetTo, txtPtr);
			sca.ResetLastMessage();
			break;
	}
}

function GetExp(cp)
{
	const value = dwread_epd(EPD(0x58A364 + 48 * 166 + 4 * cp));
	
	if (v.Exp_Player[cp] != v.Exp_Group[20 * cp + (v.Hero_Num[cp] - 1)] && Switch(255, Cleared))
	{
		if (v.Hero_Num[cp] <= 20)
		{ v.Exp_Player[cp] = v.Exp_Group[20 * cp + (v.Hero_Num[cp] - 1)]; }
	}
	else if (v.Exp_Player[cp] != value && Switch(255, Set))
	{
		v.Exp_Player[cp] = value; 
	}
}

function GetCS(cp)
{
	const value = dwread_epd(EPD(0x58A364 + 48 * 164 + 4 * cp));
	
	if (v.CS_Player[cp] != v.CS_Group[20 * cp + (v.Hero_Num[cp] - 1)] && Switch(255, Cleared))
	{
		if (v.Hero_Num[cp] <= 20)
		{ v.CS_Player[cp] = v.CS_Group[20 * cp + (v.Hero_Num[cp] - 1)]; }
	}
	else if (v.CS_Player[cp] != value && Switch(255, Set))
	{
		v.CS_Player[cp] = value; 
	}
}