## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import SCArchive as sca;
import SCArchive as sca
# (Line 2) import SCAFlexible as scf;
import SCAFlexible as scf
# (Line 4) import Variable as v;
import Variable as v
# (Line 5) import customText as tct;
import customText as tct
# (Line 7) var txtPtr, btnPtr, btnPos, oldCP;
txtPtr, btnPtr, btnPos, oldCP = EUDCreateVariables(4)
# (Line 8) const trgk = $T('Artanis & safhfh');
trgk = _CGFW(lambda: [GetStringIndex('Artanis & safhfh')], 1)[0]
# (Line 10) function PingCheck();
# (Line 12) function ResetCharacterExp()
# (Line 13) {
@EUDFunc
def ResetCharacterExp():
    # (Line 14) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 16) for (var i = 0; i < v.CharacterMax; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= v.CharacterMax, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 17) {
        # (Line 18) v.CharacterExp[6 * i + cp] = 0;
        _ARRW(v.CharacterExp, 6 * i + cp) << (0)
        # (Line 19) }
        # (Line 20) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 22) function ShowCharacterExp(cp, num)

# (Line 23) {
@EUDFunc
def ShowCharacterExp(cp, num):
    # (Line 24) tct.makeText("\x13\x17[ \x04",ptr2s(v.Hero_Name[num])," \x17] \x04EXP : ");
    tct.f_makeText("\x13\x17[ \x04", ptr2s(v.Hero_Name[num]), " \x17] \x04EXP : ")
    # (Line 25) tct.displayText();
    tct.f_displayText()
    # (Line 26) }
    # (Line 28) function AddCharacterExp()

# (Line 29) {
@EUDFunc
def AddCharacterExp():
    # (Line 32) if(Deaths((13), (0), 1, (166)))
    if EUDIf()(Deaths((13), (0), 1, (166))):
        # (Line 33) {
        # (Line 34) const cp = getcurpl();
        cp = f_getcurpl()
        # (Line 35) const num = dwread_epd(EPD(0x58A364 + 48 * 172 + 4 * getcurpl()));
        num = f_dwread_epd(EPD(0x58A364 + 48 * 172 + 4 * f_getcurpl()))
        # (Line 37) v.CharacterExp[6 * num + cp] += dwread_epd(EPD(0x58A364 + 48 * 166 + 4 * cp));
        _ARRW(v.CharacterExp, 6 * num + cp).__iadd__(f_dwread_epd(EPD(0x58A364 + 48 * 166 + 4 * cp)))
        # (Line 39) switch(sca.GetLastMessage())
        EUDSwitch(sca.GetLastMessage())
        # (Line 40) {
        # (Line 41) case 1:
        _t2 = EUDSwitchCase()
        # (Line 42) tct.print(v.CharacterExp[6 * num + cp],"");
        if _t2(1):
            tct.f_print(v.CharacterExp[6 * num + cp], "")
            # (Line 43) sca.SaveData(0);
            sca.SaveData(0)
            # (Line 44) SetDeaths((13), (7), 0, (166));
            # (Line 45) ShowCharacterExp(cp, num);
            DoActions(SetDeaths((13), (7), 0, (166)))
            ShowCharacterExp(cp, num)
            # (Line 46) break;
            EUDBreak()
            # (Line 47) case 2:
        _t3 = EUDSwitchCase()
        # (Line 48) tct.print("\x13\x04연결이 끊어졌습니다.");
        if _t3(2):
            tct.f_print("\x13\x04연결이 끊어졌습니다.")
            # (Line 49) break;
            EUDBreak()
            # (Line 50) case 5:
        _t4 = EUDSwitchCase()
        # (Line 51) tct.print("\x13\x04",ptr2s(v.Hero_Name[num]),"의 정보를 저장중입니다.");
        if _t4(5):
            tct.f_print("\x13\x04", ptr2s(v.Hero_Name[num]), "의 정보를 저장중입니다.")
            # (Line 52) break;
            EUDBreak()
            # (Line 53) case 6:
        _t5 = EUDSwitchCase()
        # (Line 54) tct.print("\x13\x04",ptr2s(v.Hero_Name[num]),"의 저장을 완료하였습니다.");
        if _t5(6):
            tct.f_print("\x13\x04", ptr2s(v.Hero_Name[num]), "의 저장을 완료하였습니다.")
            # (Line 55) break;
            EUDBreak()
            # (Line 56) case 7:
        _t6 = EUDSwitchCase()
        # (Line 57) tct.print("\x13\x04런처를 연결해 주세요.");
        if _t6(7):
            tct.f_print("\x13\x04런처를 연결해 주세요.")
            # (Line 58) break;
            EUDBreak()
            # (Line 59) case 9:
        _t7 = EUDSwitchCase()
        # (Line 60) tct.print("\x13\x04런처연결에 실패하였습니다.");
        if _t7(9):
            tct.f_print("\x13\x04런처연결에 실패하였습니다.")
            # (Line 61) break;
            EUDBreak()
            # (Line 62) default:
        # (Line 63) tct.print("\x13\x04런처연결에 실패하였습니다.");
        if EUDSwitchDefault()():
            tct.f_print("\x13\x04런처연결에 실패하였습니다.")
            # (Line 64) sca.ResetLastMessage();
            sca.ResetLastMessage()
            # (Line 65) break;
            EUDBreak()
            # (Line 66) }
        # (Line 67) }
        EUDEndSwitch()
        # (Line 68) }
    EUDEndIf()
    # (Line 70) function PingCheck()

# (Line 71) {
@EUDFunc
def PingCheck():
    # (Line 73) const Ping = wread_epd(EPD(scf.ws) + scf.EntryPointLength, 0);
    Ping = f_wread_epd(EPD(scf.ws) + scf.EntryPointLength, 0)
    # (Line 75) tct.print("\x13\x04Connection Check : \x19", Ping," ms");
    tct.f_print("\x13\x04Connection Check : \x19", Ping, " ms")
    # (Line 76) }
