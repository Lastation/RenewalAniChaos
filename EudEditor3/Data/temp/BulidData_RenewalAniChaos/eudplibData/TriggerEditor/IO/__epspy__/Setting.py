## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import SCArchive as sca;
import SCArchive as sca
# (Line 2) import SCAFlexible as scf;
import SCAFlexible as scf
# (Line 4) import Variable as v;
import Variable as v
# (Line 5) import customText as tct;
import customText as tct
# (Line 7) var txtPtr, btnPtr, btnPos, oldCP;
txtPtr, btnPtr, btnPos, oldCP = EUDCreateVariables(4)
# (Line 8) const trgk = $T('Artanis & safhfh');
trgk = _CGFW(lambda: [GetStringIndex('Artanis & safhfh')], 1)[0]
# (Line 10) function PingCheck();
# (Line 11) function ShowCharacterExp();
# (Line 13) function ResetCharacterExp(cp)
# (Line 14) {
@EUDFunc
def ResetCharacterExp(cp):
    # (Line 15) for (var i = 0; i < v.CharacterMax; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= v.CharacterMax, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 16) {
        # (Line 17) v.SaveExp[8 * v.CharacterMax + cp] = 0;
        _ARRW(v.SaveExp, 8 * v.CharacterMax + cp) << (0)
        # (Line 18) }
        # (Line 19) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 21) function AddCharacterExp(HeroNumber, cp)

# (Line 22) {
@EUDFunc
def AddCharacterExp(HeroNumber, cp):
    # (Line 23) if (Deaths(CurrentPlayer, AtLeast, 1, " `AddExp"))
    if EUDIf()(Deaths(CurrentPlayer, AtLeast, 1, " `AddExp")):
        # (Line 24) {
        # (Line 25) const Exp = dwread_epd(EPD(0x58A364 + 48 * 166 + 4 * cp));
        Exp = f_dwread_epd(EPD(0x58A364 + 48 * 166 + 4 * cp))
        # (Line 26) v.SaveExp[8 * HeroNumber + cp] += Exp;
        _ARRW(v.SaveExp, 8 * HeroNumber + cp).__iadd__(Exp)
        # (Line 27) sca.SaveData(0);
        sca.SaveData(0)
        # (Line 29) SetDeaths(CurrentPlayer, SetTo, 0, " `AddExp");
        # (Line 30) }
        DoActions(SetDeaths(CurrentPlayer, SetTo, 0, " `AddExp"))
        # (Line 31) }
    EUDEndIf()
    # (Line 33) function SaveCharacterExp(cp)

# (Line 34) {
@EUDFunc
def SaveCharacterExp(cp):
    # (Line 35) if(sca.ConnectStatus() == 1)
    if EUDIf()(sca.ConnectStatus() == 1):
        # (Line 36) {
        # (Line 37) const HeroNumber = dwread_epd(EPD(0x58A364 + 48 * 172 + 4 * cp));
        HeroNumber = f_dwread_epd(EPD(0x58A364 + 48 * 172 + 4 * cp))
        # (Line 39) AddCharacterExp(HeroNumber, cp);
        AddCharacterExp(HeroNumber, cp)
        # (Line 41) switch(sca.GetLastMessage())
        EUDSwitch(sca.GetLastMessage())
        # (Line 42) {
        # (Line 43) case 5:
        _t2 = EUDSwitchCase()
        # (Line 44) tct.makeText("\x13\x04",ptr2s(v.Hero_Name[HeroNumber]),"의 정보를 저장중입니다.");
        if _t2(5):
            tct.f_makeText("\x13\x04", ptr2s(v.Hero_Name[HeroNumber]), "의 정보를 저장중입니다.")
            # (Line 45) tct.addText("\n\x13\x17[ \x04",ptr2s(v.Hero_Name[HeroNumber])," \x17] \x04EXP : ", v.SaveExp[8 * HeroNumber + cp],"");
            tct.f_addText("\n\x13\x17[ \x04", ptr2s(v.Hero_Name[HeroNumber]), " \x17] \x04EXP : ", v.SaveExp[8 * HeroNumber + cp], "")
            # (Line 47) txtPtr = dwread_epd(EPD(0x640B58));
            txtPtr << (f_dwread_epd(EPD(0x640B58)))
            # (Line 48) tct.displayText();
            tct.f_displayText()
            # (Line 49) SetMemory(0x640B58, SetTo, txtPtr);
            # (Line 50) break;
            DoActions(SetMemory(0x640B58, SetTo, txtPtr))
            EUDBreak()
            # (Line 51) case 6:
        _t3 = EUDSwitchCase()
        # (Line 52) tct.print("\x13\x04",ptr2s(v.Hero_Name[HeroNumber]),"의 저장을 완료하였습니다.");
        if _t3(6):
            tct.f_print("\x13\x04", ptr2s(v.Hero_Name[HeroNumber]), "의 저장을 완료하였습니다.")
            # (Line 53) tct.addText("\n\x13\x17[ \x04",ptr2s(v.Hero_Name[HeroNumber])," \x17] \x04EXP : ", v.SaveExp[8 * HeroNumber + cp],"");
            tct.f_addText("\n\x13\x17[ \x04", ptr2s(v.Hero_Name[HeroNumber]), " \x17] \x04EXP : ", v.SaveExp[8 * HeroNumber + cp], "")
            # (Line 55) txtPtr = dwread_epd(EPD(0x640B58));
            txtPtr << (f_dwread_epd(EPD(0x640B58)))
            # (Line 56) tct.displayText();
            tct.f_displayText()
            # (Line 57) SetMemory(0x640B58, SetTo, txtPtr);
            # (Line 58) sca.ResetLastMessage();
            DoActions(SetMemory(0x640B58, SetTo, txtPtr))
            sca.ResetLastMessage()
            # (Line 59) break;
            EUDBreak()
            # (Line 60) }
        # (Line 61) }
        EUDEndSwitch()
        # (Line 62) }
    EUDEndIf()
    # (Line 64) function LoadCharacterExp(cp)

# (Line 65) {
@EUDFunc
def LoadCharacterExp(cp):
    # (Line 66) if(sca.ConnectStatus() == 1)
    if EUDIf()(sca.ConnectStatus() == 1):
        # (Line 67) {
        # (Line 68) if (v.isLoad[cp] == 0) { sca.LoadData(0); v.isLoad[cp] = 1; }
        if EUDIf()(v.isLoad[cp] == 0):
            sca.LoadData(0)
            _ARRW(v.isLoad, cp) << (1)
            # (Line 70) switch(sca.GetLastMessage())
        EUDEndIf()
        EUDSwitch(sca.GetLastMessage())
        # (Line 71) {
        # (Line 72) case 3:
        _t3 = EUDSwitchCase()
        # (Line 73) txtPtr = dwread_epd(EPD(0x640B58));
        if _t3(3):
            txtPtr << (f_dwread_epd(EPD(0x640B58)))
            # (Line 74) tct.print("\x13\x04저장된  정보를 불러오는 중입니다.");
            tct.f_print("\x13\x04저장된  정보를 불러오는 중입니다.")
            # (Line 75) SetMemory(0x640B58, SetTo, txtPtr);
            # (Line 76) break;
            DoActions(SetMemory(0x640B58, SetTo, txtPtr))
            EUDBreak()
            # (Line 77) case 4:
        _t4 = EUDSwitchCase()
        # (Line 78) txtPtr = dwread_epd(EPD(0x640B58));
        if _t4(4):
            txtPtr << (f_dwread_epd(EPD(0x640B58)))
            # (Line 79) tct.print("\x13\x04저장된 정보를 불러오는데 성공하였습니다.");
            tct.f_print("\x13\x04저장된 정보를 불러오는데 성공하였습니다.")
            # (Line 80) SetMemory(0x640B58, SetTo, txtPtr);
            # (Line 81) v.isLoad[cp] = 1;
            DoActions(SetMemory(0x640B58, SetTo, txtPtr))
            _ARRW(v.isLoad, cp) << (1)
            # (Line 82) sca.ResetLastMessage();
            sca.ResetLastMessage()
            # (Line 83) break;
            EUDBreak()
            # (Line 84) }
        # (Line 85) }
        EUDEndSwitch()
        # (Line 86) }
    EUDEndIf()
