## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import SCArchive as sca;
import SCArchive as sca
# (Line 3) import Variable as v;
import Variable as v
# (Line 4) import customText as tct;
import customText as tct
# (Line 6) var txtPtr, btnPtr, btnPos, oldCP;
txtPtr, btnPtr, btnPos, oldCP = EUDCreateVariables(4)
# (Line 7) const trgk = $T('Artanis & safhfh');
trgk = _CGFW(lambda: [GetStringIndex('Artanis & safhfh')], 1)[0]
# (Line 9) function SCAMain(cp);
# (Line 10) function SCAMessage(cp);
# (Line 11) function GetExp(cp);
# (Line 12) function GetCS(cp);
# (Line 13) function AddExp(cp, exp);
# (Line 14) function AddCS(cp, cs);
# (Line 16) function SCAMain(cp)
# (Line 17) {
@EUDFunc
def SCAMain(cp):
    # (Line 18) if(sca.ConnectStatus() == 1)
    if EUDIf()(sca.ConnectStatus() == 1):
        # (Line 19) {
        # (Line 20) switch(v.SCAStatus[cp])
        EUDSwitch(v.SCAStatus[cp])
        # (Line 21) {
        # (Line 22) case 0:
        _t2 = EUDSwitchCase()
        # (Line 23) sca.LoadData(0);
        if _t2(0):
            sca.LoadData(0)
            # (Line 24) v.SCAStatus[cp] = 3;
            _ARRW(v.SCAStatus, cp) << (3)
            # (Line 25) break;
            EUDBreak()
            # (Line 26) case 1:
        _t3 = EUDSwitchCase()
        # (Line 27) GetExp(cp);
        if _t3(1):
            GetExp(cp)
            # (Line 28) sca.SaveData(0);
            sca.SaveData(0)
            # (Line 29) v.SCAStatus[cp] = 2;
            _ARRW(v.SCAStatus, cp) << (2)
            # (Line 30) break;
            EUDBreak()
            # (Line 31) case 2:
        _t4 = EUDSwitchCase()
        # (Line 32) if (Deaths(CurrentPlayer, Exactly, 1000, 175) && Switch("TestModeSwitch", Cleared))
        if _t4(2):
            if EUDIf()(EUDSCAnd()(Deaths(CurrentPlayer, Exactly, 1000, 175))(Switch("TestModeSwitch", Cleared))()):
                # (Line 33) {
                # (Line 34) v.Exp_Total[cp] 	= dwread_epd(EPD(0x58A364 + 48 * 166 + 4 * cp));
                _ARRW(v.Exp_Total, cp) << (f_dwread_epd(EPD(0x58A364 + 48 * 166 + 4 * cp)))
                # (Line 35) v.CS_Total[cp] 	= dwread_epd(EPD(0x58A364 + 48 * 164 + 4 * cp));
                _ARRW(v.CS_Total, cp) << (f_dwread_epd(EPD(0x58A364 + 48 * 164 + 4 * cp)))
                # (Line 37) AddExp(cp, v.Exp_Total[cp]);
                AddExp(cp, v.Exp_Total[cp])
                # (Line 38) AddCS(cp, v.CS_Total[cp]);
                AddCS(cp, v.CS_Total[cp])
                # (Line 40) v.SCAStatus[cp] = 1;
                _ARRW(v.SCAStatus, cp) << (1)
                # (Line 42) SetDeaths(CurrentPlayer, SetTo, 360, 175);
                # (Line 43) }
                DoActions(SetDeaths(CurrentPlayer, SetTo, 360, 175))
                # (Line 44) break;
            EUDEndIf()
            EUDBreak()
            # (Line 45) case 3:
        _t6 = EUDSwitchCase()
        # (Line 46) if (Switch(255, Cleared))
        if _t6(3):
            if EUDIf()(Switch(255, Cleared)):
                # (Line 47) {
                # (Line 48) GetExp(cp);
                GetExp(cp)
                # (Line 49) GetCS(cp);
                GetCS(cp)
                # (Line 50) }
                # (Line 51) else
                # (Line 52) {
            if EUDElse()():
                # (Line 53) if (v.Hero_Num[cp] != dwread_epd(EPD(0x58A364 + 48 * 172 + 4 * cp)))
                if EUDIf()(v.Hero_Num[cp] == f_dwread_epd(EPD(0x58A364 + 48 * 172 + 4 * cp)), neg=True):
                    # (Line 54) { v.Hero_Num[cp] = dwread_epd(EPD(0x58A364 + 48 * 172 + 4 * cp)); }
                    _ARRW(v.Hero_Num, cp) << (f_dwread_epd(EPD(0x58A364 + 48 * 172 + 4 * cp)))
                    # (Line 55) GetExp(cp);
                EUDEndIf()
                GetExp(cp)
                # (Line 56) GetCS(cp);
                GetCS(cp)
                # (Line 57) v.SCAStatus[cp] = 2;
                _ARRW(v.SCAStatus, cp) << (2)
                # (Line 58) }
                # (Line 59) break;
            EUDEndIf()
            EUDBreak()
            # (Line 60) }
        # (Line 61) SCAMessage(cp);
        EUDEndSwitch()
        SCAMessage(cp)
        # (Line 62) }
        # (Line 63) else
        # (Line 64) {
    if EUDElse()():
        # (Line 65) if (Switch(255, Cleared))
        if EUDIf()(Switch(255, Cleared)):
            # (Line 66) {
            # (Line 67) GetExp(cp);
            GetExp(cp)
            # (Line 68) GetCS(cp);
            GetCS(cp)
            # (Line 69) }
            # (Line 70) else
            # (Line 71) {
        if EUDElse()():
            # (Line 72) if (v.Hero_Num[cp] != dwread_epd(EPD(0x58A364 + 48 * 172 + 4 * cp)))
            if EUDIf()(v.Hero_Num[cp] == f_dwread_epd(EPD(0x58A364 + 48 * 172 + 4 * cp)), neg=True):
                # (Line 73) { v.Hero_Num[cp] = dwread_epd(EPD(0x58A364 + 48 * 172 + 4 * cp)); }
                _ARRW(v.Hero_Num, cp) << (f_dwread_epd(EPD(0x58A364 + 48 * 172 + 4 * cp)))
                # (Line 74) GetExp(cp);
            EUDEndIf()
            GetExp(cp)
            # (Line 75) GetCS(cp);
            GetCS(cp)
            # (Line 76) }
            # (Line 77) }
        EUDEndIf()
        # (Line 78) }
    EUDEndIf()
    # (Line 80) function SCAMessage(cp)

# (Line 81) {
@EUDFunc
def SCAMessage(cp):
    # (Line 82) switch(sca.GetLastMessage())
    EUDSwitch(sca.GetLastMessage())
    # (Line 83) {
    # (Line 84) case 3:
    _t1 = EUDSwitchCase()
    # (Line 85) txtPtr = dwread_epd(EPD(0x640B58));
    if _t1(3):
        txtPtr << (f_dwread_epd(EPD(0x640B58)))
        # (Line 86) tct.print("\x13\x04저장된  정보를 불러오는 중입니다.");
        tct.f_print("\x13\x04저장된  정보를 불러오는 중입니다.")
        # (Line 87) SetMemory(0x640B58, SetTo, txtPtr);
        # (Line 88) sca.ResetLastMessage();
        DoActions(SetMemory(0x640B58, SetTo, txtPtr))
        sca.ResetLastMessage()
        # (Line 89) break;
        EUDBreak()
        # (Line 90) case 4:
    _t2 = EUDSwitchCase()
    # (Line 91) txtPtr = dwread_epd(EPD(0x640B58));
    if _t2(4):
        txtPtr << (f_dwread_epd(EPD(0x640B58)))
        # (Line 92) tct.print("\x13\x04저장된 정보를 불러오는데 성공하였습니다.");
        tct.f_print("\x13\x04저장된 정보를 불러오는데 성공하였습니다.")
        # (Line 93) SetMemory(0x640B58, SetTo, txtPtr);
        # (Line 94) sca.ResetLastMessage();
        DoActions(SetMemory(0x640B58, SetTo, txtPtr))
        sca.ResetLastMessage()
        # (Line 95) break;
        EUDBreak()
        # (Line 96) case 5:
    _t3 = EUDSwitchCase()
    # (Line 97) tct.makeText("\x13\x04", ptr2s(v.Hero_Name[v.Hero_Num[cp]]), "의 정보를 저장중입니다.");
    if _t3(5):
        tct.f_makeText("\x13\x04", ptr2s(v.Hero_Name[v.Hero_Num[cp]]), "의 정보를 저장중입니다.")
        # (Line 98) txtPtr = dwread_epd(EPD(0x640B58));
        txtPtr << (f_dwread_epd(EPD(0x640B58)))
        # (Line 99) tct.displayText();
        tct.f_displayText()
        # (Line 100) SetMemory(0x640B58, SetTo, txtPtr);
        # (Line 101) sca.ResetLastMessage();
        DoActions(SetMemory(0x640B58, SetTo, txtPtr))
        sca.ResetLastMessage()
        # (Line 102) break;
        EUDBreak()
        # (Line 103) case 6:
    _t4 = EUDSwitchCase()
    # (Line 104) tct.makeText("\x13\x04",ptr2s(v.Hero_Name[v.Hero_Num[cp]]),"의 저장을 완료하였습니다.");
    if _t4(6):
        tct.f_makeText("\x13\x04", ptr2s(v.Hero_Name[v.Hero_Num[cp]]), "의 저장을 완료하였습니다.")
        # (Line 105) txtPtr = dwread_epd(EPD(0x640B58));
        txtPtr << (f_dwread_epd(EPD(0x640B58)))
        # (Line 106) tct.displayText();
        tct.f_displayText()
        # (Line 107) SetMemory(0x640B58, SetTo, txtPtr);
        # (Line 108) sca.ResetLastMessage();
        DoActions(SetMemory(0x640B58, SetTo, txtPtr))
        sca.ResetLastMessage()
        # (Line 109) break;
        EUDBreak()
        # (Line 110) }
    # (Line 111) }
    EUDEndSwitch()
    # (Line 113) function GetExp(cp)

# (Line 114) {
@EUDFunc
def GetExp(cp):
    # (Line 115) const value = dwread_epd(EPD(0x58A364 + 48 * 166 + 4 * cp));
    value = f_dwread_epd(EPD(0x58A364 + 48 * 166 + 4 * cp))
    # (Line 117) if (v.Exp_Player[cp] != v.Exp_Group[20 * cp + (v.Hero_Num[cp] - 1)] && Switch(255, Cleared))
    if EUDIf()(EUDSCAnd()(v.Exp_Player[cp] == v.Exp_Group[20 * cp + (v.Hero_Num[cp] - 1)], neg=True)(Switch(255, Cleared))()):
        # (Line 118) {
        # (Line 119) if (v.Hero_Num[cp] <= 20)
        if EUDIf()(v.Hero_Num[cp] <= 20):
            # (Line 120) { v.Exp_Player[cp] = v.Exp_Group[20 * cp + (v.Hero_Num[cp] - 1)]; }
            _ARRW(v.Exp_Player, cp) << (v.Exp_Group[20 * cp + (v.Hero_Num[cp] - 1)])
            # (Line 121) }
        EUDEndIf()
        # (Line 122) else if (Switch(255, Set) && v.Exp_Player[cp] != value)
    if EUDElseIf()(EUDSCAnd()(Switch(255, Set))(v.Exp_Player[cp] == value, neg=True)()):
        # (Line 123) {
        # (Line 124) v.Exp_Player[cp] = value;
        _ARRW(v.Exp_Player, cp) << (value)
        # (Line 125) }
        # (Line 126) }
    EUDEndIf()
    # (Line 128) function GetCS(cp)

# (Line 129) {
@EUDFunc
def GetCS(cp):
    # (Line 130) const value = dwread_epd(EPD(0x58A364 + 48 * 164 + 4 * cp));
    value = f_dwread_epd(EPD(0x58A364 + 48 * 164 + 4 * cp))
    # (Line 132) if (v.CS_Player[cp] != v.CS_Group[cp] && Switch(255, Cleared))
    if EUDIf()(EUDSCAnd()(v.CS_Player[cp] == v.CS_Group[cp], neg=True)(Switch(255, Cleared))()):
        # (Line 133) {
        # (Line 134) v.CS_Player[cp] = v.CS_Group[cp];
        _ARRW(v.CS_Player, cp) << (v.CS_Group[cp])
        # (Line 135) }
        # (Line 136) else if (Switch(255, Set) && v.CS_Player[cp] != value)
    if EUDElseIf()(EUDSCAnd()(Switch(255, Set))(v.CS_Player[cp] == value, neg=True)()):
        # (Line 137) {
        # (Line 138) v.CS_Player[cp] = value;
        _ARRW(v.CS_Player, cp) << (value)
        # (Line 139) }
        # (Line 140) }
    EUDEndIf()
    # (Line 143) function AddExp(cp, exp)

# (Line 144) {
@EUDFunc
def AddExp(cp, exp):
    # (Line 145) if (v.Hero_Num[cp] <= 20) 	{ v.Exp_Group[20 * cp + (v.Hero_Num[cp] - 1)] += exp; }
    if EUDIf()(v.Hero_Num[cp] <= 20):
        _ARRW(v.Exp_Group, 20 * cp + (v.Hero_Num[cp] - 1)).__iadd__(exp)
        # (Line 146) }
    EUDEndIf()
    # (Line 148) function AddCS(cp, cs)

# (Line 149) {
@EUDFunc
def AddCS(cp, cs):
    # (Line 150) v.CS_Group[cp] += cs;
    _ARRW(v.CS_Group, cp).__iadd__(cs)
    # (Line 151) }
