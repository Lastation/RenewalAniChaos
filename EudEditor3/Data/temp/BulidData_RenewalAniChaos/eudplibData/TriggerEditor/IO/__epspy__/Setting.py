## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import SCArchive as sca;
import SCArchive as sca
# (Line 3) import Variable as v;
import Variable as v
# (Line 4) import customText as tct;
import customText as tct
# (Line 6) var txtPtr, btnPtr, btnPos, oldCP;
txtPtr, btnPtr, btnPos, oldCP = EUDCreateVariables(4)
# (Line 7) const trgk = $T('Artanis & safhfh');
trgk = _CGFW(lambda: [GetStringIndex('Artanis & safhfh')], 1)[0]
# (Line 9) function ResetCharacterExp()
# (Line 10) {
@EUDFunc
def ResetCharacterExp():
    # (Line 11) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 13) for (var i = 0; i < v.CharacterMax; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= v.CharacterMax, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 14) {
        # (Line 15) v.CharacterExp[6 * i + cp] = 0;
        _ARRW(v.CharacterExp, 6 * i + cp) << (0)
        # (Line 16) }
        # (Line 17) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 19) function ShowCharacterExp(cp, num)

# (Line 20) {
@EUDFunc
def ShowCharacterExp(cp, num):
    # (Line 21) tct.makeText("\x13\x17[ \x04",ptr2s(v.Hero_Name[num])," \x17] \x04EXP : ");
    tct.f_makeText("\x13\x17[ \x04", ptr2s(v.Hero_Name[num]), " \x17] \x04EXP : ")
    # (Line 22) tct.addText(v.CharacterExp[6 * num + cp],"");
    tct.f_addText(v.CharacterExp[6 * num + cp], "")
    # (Line 23) tct.displayText();
    tct.f_displayText()
    # (Line 24) }
    # (Line 26) function AddCharacterExp()

# (Line 27) {
@EUDFunc
def AddCharacterExp():
    # (Line 28) if(Deaths((13), (0), 1, (166)))
    if EUDIf()(Deaths((13), (0), 1, (166))):
        # (Line 29) {
        # (Line 30) const cp = getcurpl();
        cp = f_getcurpl()
        # (Line 31) const num = dwread_epd(EPD(0x58A364 + 48 * 172 + 4 * getcurpl()));
        num = f_dwread_epd(EPD(0x58A364 + 48 * 172 + 4 * f_getcurpl()))
        # (Line 33) v.CharacterExp[6 * num + cp] += dwread_epd(EPD(0x58A364 + 48 * 166 + 4 * cp));
        _ARRW(v.CharacterExp, 6 * num + cp).__iadd__(f_dwread_epd(EPD(0x58A364 + 48 * 166 + 4 * cp)))
        # (Line 34) SetDeaths((13), (7), 0, (166));
        # (Line 35) ShowCharacterExp(cp, num);
        DoActions(SetDeaths((13), (7), 0, (166)))
        ShowCharacterExp(cp, num)
        # (Line 37) switch(sca.GetLastMessage())
        EUDSwitch(sca.GetLastMessage())
        # (Line 38) {
        # (Line 39) case 1:
        _t2 = EUDSwitchCase()
        # (Line 40) sca.SaveData(0);
        if _t2(1):
            sca.SaveData(0)
            # (Line 41) break;
            EUDBreak()
            # (Line 42) case 5:
        _t3 = EUDSwitchCase()
        # (Line 43) break;
        if _t3(5):
            EUDBreak()
            # (Line 44) default:
        # (Line 45) sca.ResetLastMessage();
        if EUDSwitchDefault()():
            sca.ResetLastMessage()
            # (Line 46) }
        # (Line 47) }
        EUDEndSwitch()
        # (Line 48) }
    EUDEndIf()
