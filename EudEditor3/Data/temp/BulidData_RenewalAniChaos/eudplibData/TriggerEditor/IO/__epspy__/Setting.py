## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import SCArchive as sca;
import SCArchive as sca
# (Line 3) import Variable as v;
import Variable as v
# (Line 4) import customText as tct;
import customText as tct
# (Line 6) var txtPtr, btnPtr, btnPos, oldCP;
txtPtr, btnPtr, btnPos, oldCP = EUDCreateVariables(4)
# (Line 7) const trgk = $T('Artanis & safhfh');
trgk = _CGFW(lambda: [GetStringIndex('Artanis & safhfh')], 1)[0]
# (Line 9) function SCAMain(cp);
# (Line 10) function SCAMessage(cp);
# (Line 11) function GetExp(cp);
# (Line 12) function AddExp(cp, exp);
# (Line 14) function SCAMain(cp)
# (Line 15) {
@EUDFunc
def SCAMain(cp):
    # (Line 16) if(sca.ConnectStatus() == 1)
    if EUDIf()(sca.ConnectStatus() == 1):
        # (Line 17) {
        # (Line 18) switch(v.SCAStatus[cp])
        EUDSwitch(v.SCAStatus[cp])
        # (Line 19) {
        # (Line 20) case 0:
        _t2 = EUDSwitchCase()
        # (Line 21) sca.LoadData(0);
        if _t2(0):
            sca.LoadData(0)
            # (Line 22) v.SCAStatus[cp] = 2;
            _ARRW(v.SCAStatus, cp) << (2)
            # (Line 23) break;
            EUDBreak()
            # (Line 24) case 1:
        _t3 = EUDSwitchCase()
        # (Line 25) AddExp(cp, v.Exp_Add[cp]);
        if _t3(1):
            AddExp(cp, v.Exp_Add[cp])
            # (Line 26) GetExp(cp);
            GetExp(cp)
            # (Line 27) sca.SaveData(0);
            sca.SaveData(0)
            # (Line 28) v.SCAStatus[cp] = 2;
            _ARRW(v.SCAStatus, cp) << (2)
            # (Line 29) break;
            EUDBreak()
            # (Line 30) case 2:
        _t4 = EUDSwitchCase()
        # (Line 31) if (Deaths(CurrentPlayer, AtLeast, 1, " `SaveExp"))
        if _t4(2):
            if EUDIf()(Deaths(CurrentPlayer, AtLeast, 1, " `SaveExp")):
                # (Line 32) {
                # (Line 33) v.Exp_Add[cp] = dwread_epd(EPD(0x58A364 + 48 * 166 + 4 * cp));
                _ARRW(v.Exp_Add, cp) << (f_dwread_epd(EPD(0x58A364 + 48 * 166 + 4 * cp)))
                # (Line 34) v.Exp_Total[cp] += dwread_epd(EPD(0x58A364 + 48 * 166 + 4 * cp));
                _ARRW(v.Exp_Total, cp).__iadd__(f_dwread_epd(EPD(0x58A364 + 48 * 166 + 4 * cp)))
                # (Line 35) SetDeaths(CurrentPlayer, SetTo, 0, " `SaveExp");
                # (Line 36) v.SCAStatus[cp] = 1;
                DoActions(SetDeaths(CurrentPlayer, SetTo, 0, " `SaveExp"))
                _ARRW(v.SCAStatus, cp) << (1)
                # (Line 37) }
                # (Line 38) break;
            EUDEndIf()
            EUDBreak()
            # (Line 39) }
        # (Line 40) SCAMessage(cp);
        EUDEndSwitch()
        SCAMessage(cp)
        # (Line 41) if (v.Exp_Player[cp] == 0) { GetExp(cp); }
        if EUDIf()(v.Exp_Player[cp] == 0):
            GetExp(cp)
            # (Line 42) }
        EUDEndIf()
        # (Line 43) }
    EUDEndIf()
    # (Line 46) function SCAMessage(cp)

# (Line 47) {
@EUDFunc
def SCAMessage(cp):
    # (Line 48) switch(sca.GetLastMessage())
    EUDSwitch(sca.GetLastMessage())
    # (Line 49) {
    # (Line 50) case 3:
    _t1 = EUDSwitchCase()
    # (Line 51) txtPtr = dwread_epd(EPD(0x640B58));
    if _t1(3):
        txtPtr << (f_dwread_epd(EPD(0x640B58)))
        # (Line 52) tct.print("\x13\x04저장된  정보를 불러오는 중입니다.");
        tct.f_print("\x13\x04저장된  정보를 불러오는 중입니다.")
        # (Line 53) SetMemory(0x640B58, SetTo, txtPtr);
        # (Line 54) sca.ResetLastMessage();
        DoActions(SetMemory(0x640B58, SetTo, txtPtr))
        sca.ResetLastMessage()
        # (Line 55) break;
        EUDBreak()
        # (Line 56) case 4:
    _t2 = EUDSwitchCase()
    # (Line 57) txtPtr = dwread_epd(EPD(0x640B58));
    if _t2(4):
        txtPtr << (f_dwread_epd(EPD(0x640B58)))
        # (Line 58) tct.print("\x13\x04저장된 정보를 불러오는데 성공하였습니다.");
        tct.f_print("\x13\x04저장된 정보를 불러오는데 성공하였습니다.")
        # (Line 59) SetMemory(0x640B58, SetTo, txtPtr);
        # (Line 60) sca.ResetLastMessage();
        DoActions(SetMemory(0x640B58, SetTo, txtPtr))
        sca.ResetLastMessage()
        # (Line 61) break;
        EUDBreak()
        # (Line 62) case 5:
    _t3 = EUDSwitchCase()
    # (Line 63) tct.makeText("\x13\x04", ptr2s(v.Hero_Name[v.Hero_Num[cp]]), "의 정보를 저장중입니다.");
    if _t3(5):
        tct.f_makeText("\x13\x04", ptr2s(v.Hero_Name[v.Hero_Num[cp]]), "의 정보를 저장중입니다.")
        # (Line 64) tct.addText("\n\x13\x17[ \x04", ptr2s(v.Hero_Name[v.Hero_Num[cp]]), " \x17] \x04EXP : ", v.Exp_Player[cp], "");
        tct.f_addText("\n\x13\x17[ \x04", ptr2s(v.Hero_Name[v.Hero_Num[cp]]), " \x17] \x04EXP : ", v.Exp_Player[cp], "")
        # (Line 65) txtPtr = dwread_epd(EPD(0x640B58));
        txtPtr << (f_dwread_epd(EPD(0x640B58)))
        # (Line 66) tct.displayText();
        tct.f_displayText()
        # (Line 67) SetMemory(0x640B58, SetTo, txtPtr);
        # (Line 68) sca.ResetLastMessage();
        DoActions(SetMemory(0x640B58, SetTo, txtPtr))
        sca.ResetLastMessage()
        # (Line 69) break;
        EUDBreak()
        # (Line 70) case 6:
    _t4 = EUDSwitchCase()
    # (Line 71) tct.makeText("\x13\x04",ptr2s(v.Hero_Name[v.Hero_Num[cp]]),"의 저장을 완료하였습니다.");
    if _t4(6):
        tct.f_makeText("\x13\x04", ptr2s(v.Hero_Name[v.Hero_Num[cp]]), "의 저장을 완료하였습니다.")
        # (Line 72) tct.addText("\n\x13\x17[ \x04",ptr2s(v.Hero_Name[v.Hero_Num[cp]])," \x17] \x04EXP : ", v.Exp_Player[cp], "");
        tct.f_addText("\n\x13\x17[ \x04", ptr2s(v.Hero_Name[v.Hero_Num[cp]]), " \x17] \x04EXP : ", v.Exp_Player[cp], "")
        # (Line 73) txtPtr = dwread_epd(EPD(0x640B58));
        txtPtr << (f_dwread_epd(EPD(0x640B58)))
        # (Line 74) tct.displayText();
        tct.f_displayText()
        # (Line 75) SetMemory(0x640B58, SetTo, txtPtr);
        # (Line 76) sca.ResetLastMessage();
        DoActions(SetMemory(0x640B58, SetTo, txtPtr))
        sca.ResetLastMessage()
        # (Line 77) break;
        EUDBreak()
        # (Line 78) }
    # (Line 79) }
    EUDEndSwitch()
    # (Line 81) function GetExp(cp)

# (Line 82) {
@EUDFunc
def GetExp(cp):
    # (Line 83) if (v.Hero_Num[cp] <= 20) 	{ v.Exp_Player[cp] = v.Exp_Group[20 * cp + (v.Hero_Num[cp] - 1)]; }
    if EUDIf()(v.Hero_Num[cp] <= 20):
        _ARRW(v.Exp_Player, cp) << (v.Exp_Group[20 * cp + (v.Hero_Num[cp] - 1)])
        # (Line 84) }
    EUDEndIf()
    # (Line 86) function AddExp(cp, exp)

# (Line 87) {
@EUDFunc
def AddExp(cp, exp):
    # (Line 88) if (v.Hero_Num[cp] <= 20) 	{ v.Exp_Group[20 * cp + (v.Hero_Num[cp] - 1)] += exp; }
    if EUDIf()(v.Hero_Num[cp] <= 20):
        _ARRW(v.Exp_Group, 20 * cp + (v.Hero_Num[cp] - 1)).__iadd__(exp)
        # (Line 89) }
    EUDEndIf()
