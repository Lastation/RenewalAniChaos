import Variable as n0;

const ws = 0x58F44A;
const EntryPointLength = 8;//EntryPointLength
const SpaceLength = 400;//DataBufferSize
const ObjectCount = 1;//ObjectCount

function Init(){
    MPQAddFile('SCARCHIVEMAPCODE', py_open('scakeyfile', 'rb').read());
    MPQAddFile('SCARCHIVEDATA', py_open('scadatafile', 'rb').read());
    //EntryPoint
    dwwrite_epd(EPD(ws) + 0, 2059293105);
    dwwrite_epd(EPD(ws) + 1, 1703546271);
    dwwrite_epd(EPD(ws) + 2, 743146189);
    dwwrite_epd(EPD(ws) + 3, 2034185685);
    dwwrite_epd(EPD(ws) + 4, 2760856512);
    dwwrite_epd(EPD(ws) + 5, 1359405682);
    dwwrite_epd(EPD(ws) + 6, 1895429617);
    dwwrite_epd(EPD(ws) + 7, 2151857190);
    
}


function Exec(){
    Init();
}


function ResetValue(tagNum, index){
    const cp = getcurpl();
    switch(tagNum){
    case 0:
        const alen = n0.Exp_Group.length / 8;
        for(var i = 0 ; i < alen; i++){
            n0.Exp_Group[alen * cp + i] = 0;
        }
        break;
    }
}


function SaveValue(tagNum, Value, index){
    const cp = getcurpl();
    switch(tagNum){
    case 0:
        const alen = n0.Exp_Group.length / 8;
        n0.Exp_Group[alen * cp + index] = Value;
        break;
    }
}


function SaveDataWriteValue(tagNum, BaseAddress, index){
    const cp = getcurpl();
    switch(tagNum){
    case 0:
        {
        const alen = n0.Exp_Group.length / 8;
        for(var i = 0 ; i < alen ; i ++){
            const objValue = n0.Exp_Group[alen * cp + i];
            if(objValue != 0){
                if (objValue > 0xFFFF){
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x3000 + tagNum);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, i);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                    index++;
                 }else{
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x4000 + tagNum);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, i);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                    index++;
                 }
            }
        }
        }
        break;
    }
    
    return index;
}


function LoadDataReadValue(BaseAddress, i){
   	const indicator = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
   	
   	if (indicator != 0){
   		const spec = indicator / 0x1000;
   		const ObjNum = indicator % 0x1000;
   		var vindex = 0;
   		var value = 0;
   		if (spec == 1){
   			//4바이트 지정
   			i++;
   			const value1 = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
   			i++;
   			const value2 = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
   			value = value1 * 0x10000 + value2;
   		}else if (spec == 2){
   			//2바이트 지정
   			i++;
   			value = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
   		}else if (spec == 3){
   			//4바이트 지정
   			i++;
   			vindex = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
   			i++;
   			const value1 = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
   			i++;
   			const value2 = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
   			value = value1 * 0x10000 + value2;
   		}else if (spec == 4){
   			//2바이트 지정
   			i++;
   			vindex = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
   			i++;
   			value = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
   		}
   		SaveValue(ObjNum, value, vindex);
   	}
   	return i;
}
