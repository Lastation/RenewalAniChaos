## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import customText as tct;
import customText as tct
# (Line 2) import TitleVariable as tv;
import TitleVariable as tv
# (Line 3) import Variable as v;
import Variable as v
# (Line 5) import Title.Total.Exp as totalexp;
from Title.Total import Exp as totalexp
# (Line 6) import Title.Total.Kill as totalkill;
from Title.Total import Kill as totalkill
# (Line 7) import Title.Total.CS as totalcs;
from Title.Total import CS as totalcs
# (Line 8) import SCArchive as sca;
import SCArchive as sca
# (Line 10) const index = PVariable();
index = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 11) const s = StringBuffer();
s = _CGFW(lambda: [StringBuffer()], 1)[0]
# (Line 14) function SetTitle_Total_Text(cp);
# (Line 15) function SetTitle_Exp_Text(cp);
# (Line 16) function SetTitle_Kill_Text(cp);
# (Line 17) function SetTitle_CS_Text(cp);
# (Line 19) function Set_PName_Index(cp, value);		// 닉네임 배열 위치 설정
# (Line 20) function Set_PName(cp);					// 닉네임 설정
# (Line 22) function Key_input(cp);
# (Line 24) function Title_Marge(cp)
# (Line 25) {
@EUDFunc
def Title_Marge(cp):
    # (Line 26) if(sca.ConnectStatus() == 1)
    if EUDIf()(sca.ConnectStatus() == 1):
        # (Line 27) {
        # (Line 28) Key_input(cp);
        Key_input(cp)
        # (Line 29) Set_PName(cp);
        Set_PName(cp)
        # (Line 31) switch(tv.View_Title[cp])
        EUDSwitch(tv.View_Title[cp])
        # (Line 32) {
        # (Line 33) case 1:
        _t2 = EUDSwitchCase()
        # (Line 34) SetTitle_Total_Text(cp);
        if _t2(1):
            SetTitle_Total_Text(cp)
            # (Line 35) break;
            EUDBreak()
            # (Line 36) case 2:
        _t3 = EUDSwitchCase()
        # (Line 37) tv.View_Title_Now[cp] = 0;
        if _t3(2):
            _ARRW(tv.View_Title_Now, cp) << (0)
            # (Line 38) tv.Select_Title[cp] = 0;
            _ARRW(tv.Select_Title, cp) << (0)
            # (Line 39) break;
            EUDBreak()
            # (Line 40) }
        # (Line 41) }
        EUDEndSwitch()
        # (Line 42) }
    EUDEndIf()
    # (Line 44) function SetTitle_Total_Text(cp)

# (Line 45) {
@EUDFunc
def SetTitle_Total_Text(cp):
    # (Line 46) switch(tv.Select_Title[cp])
    EUDSwitch(tv.Select_Title[cp])
    # (Line 47) {
    # (Line 48) case 1:
    _t1 = EUDSwitchCase()
    # (Line 49) SetTitle_Exp_Text(cp);
    if _t1(1):
        SetTitle_Exp_Text(cp)
        # (Line 50) break;
        EUDBreak()
        # (Line 51) case 2:
    _t2 = EUDSwitchCase()
    # (Line 52) SetTitle_Kill_Text(cp);
    if _t2(2):
        SetTitle_Kill_Text(cp)
        # (Line 53) break;
        EUDBreak()
        # (Line 54) case 3:
    _t3 = EUDSwitchCase()
    # (Line 55) SetTitle_CS_Text(cp);
    if _t3(3):
        SetTitle_CS_Text(cp)
        # (Line 56) break;
        EUDBreak()
        # (Line 57) default:
    # (Line 58) s.printAt(0, "　　\x17[ \x04업적 칭호 목록 \x17]");
    if EUDSwitchDefault()():
        s.printAt(0, "　　\x17[ \x04업적 칭호 목록 \x17]")
        # (Line 59) s.printAt(1, "　　\x17[ \x041 \x17]　\x04통합 경험치 업적 \x17");
        s.printAt(1, "　　\x17[ \x041 \x17]　\x04통합 경험치 업적 \x17")
        # (Line 60) s.printAt(2, "　　\x17[ \x042 \x17]　\x04통합 처치 업적 \x17");
        s.printAt(2, "　　\x17[ \x042 \x17]　\x04통합 처치 업적 \x17")
        # (Line 61) s.printAt(3, "　　\x17[ \x043 \x17]　\x04통합 크립 파괴 업적 \x17");
        s.printAt(3, "　　\x17[ \x043 \x17]　\x04통합 크립 파괴 업적 \x17")
        # (Line 62) s.printAt(4, "\n\n\n\n");
        s.printAt(4, "\n\n\n\n")
        # (Line 63) break;
        EUDBreak()
        # (Line 64) }
    # (Line 65) }
    EUDEndSwitch()
    # (Line 67) function SetTitle_Exp_Text(cp)

# (Line 68) {
@EUDFunc
def SetTitle_Exp_Text(cp):
    # (Line 69) totalexp.Total_Exp_Setting(cp);
    totalexp.Total_Exp_Setting(cp)
    # (Line 71) s.printAt(0, "　　\x17[ \x04보유 통합 경험치 업적 칭호 목록 \x17]　", v.Exp_Total[cp], " \x1FExp");
    s.printAt(0, "　　\x17[ \x04보유 통합 경험치 업적 칭호 목록 \x17]　", v.Exp_Total[cp], " \x1FExp")
    # (Line 72) for (var i = 0; i < tv.View_Title_Num; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= tv.View_Title_Num, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 73) {
        # (Line 74) index[cp] = tv.View_Title_Num * tv.View_Title_Now[cp] + i;
        _ARRW(index, cp) << (tv.View_Title_Num * tv.View_Title_Now[cp] + i)
        # (Line 76) if (tv.Title_Max[cp] > index[cp])
        if EUDIf()(tv.Title_Max[cp] <= index[cp], neg=True):
            # (Line 77) {
            # (Line 78) if (tv.Enable_Title_Num[cp] > index[cp])
            if EUDIf()(tv.Enable_Title_Num[cp] <= index[cp], neg=True):
                # (Line 79) { s.printAt(i + 1, "　　\x17[ \x04", i + 1, " \x17]　\x04",ptr2s(tv.Total_Exp_Title[index[cp]])," \x04　", tv.Total_Exp_Need[index[cp]], " \x1FExp"); }
                s.printAt(i + 1, "　　\x17[ \x04", i + 1, " \x17]　\x04", ptr2s(tv.Total_Exp_Title[index[cp]]), " \x04　", tv.Total_Exp_Need[index[cp]], " \x1FExp")
                # (Line 80) else
                # (Line 81) { s.printAt(i + 1, "　　\x17[ \x04", i + 1, " \x17]　\x05",ptr2s(tv.Total_Exp_Title[index[cp]])," \x04　", tv.Total_Exp_Need[index[cp]], " \x1FExp"); }
            if EUDElse()():
                s.printAt(i + 1, "　　\x17[ \x04", i + 1, " \x17]　\x05", ptr2s(tv.Total_Exp_Title[index[cp]]), " \x04　", tv.Total_Exp_Need[index[cp]], " \x1FExp")
                # (Line 82) }
            EUDEndIf()
            # (Line 83) else { s.printAt(i + 1, "\n"); }
        if EUDElse()():
            s.printAt(i + 1, "\n")
            # (Line 84) }
        EUDEndIf()
        # (Line 85) s.printAt(6, "\n");
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    s.printAt(6, "\n")
    # (Line 86) s.printAt(7, "　　\x04", tv.View_Title_Now[cp] + 1, " 페이지 / 이전 [\x17A\x04] 다음 [\x17D\x04] 돌아가기 [\x17Z\x04]");
    s.printAt(7, "　　\x04", tv.View_Title_Now[cp] + 1, " 페이지 / 이전 [\x17A\x04] 다음 [\x17D\x04] 돌아가기 [\x17Z\x04]")
    # (Line 88) Set_PName_Index(cp, 100);
    Set_PName_Index(cp, 100)
    # (Line 89) }
    # (Line 91) function SetTitle_Kill_Text(cp)

# (Line 92) {
@EUDFunc
def SetTitle_Kill_Text(cp):
    # (Line 93) totalkill.Total_Kill_Setting(cp);
    totalkill.Total_Kill_Setting(cp)
    # (Line 95) s.printAt(0, "　　\x17[ \x04보유 통합 처치 업적 칭호 목록 \x17]　", v.Kill_All[cp], " \x1FKill");
    s.printAt(0, "　　\x17[ \x04보유 통합 처치 업적 칭호 목록 \x17]　", v.Kill_All[cp], " \x1FKill")
    # (Line 96) for (var i = 0; i < tv.View_Title_Num; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= tv.View_Title_Num, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 97) {
        # (Line 98) index[cp] = tv.View_Title_Num * tv.View_Title_Now[cp] + i;
        _ARRW(index, cp) << (tv.View_Title_Num * tv.View_Title_Now[cp] + i)
        # (Line 100) if (tv.Title_Max[cp] > index[cp])
        if EUDIf()(tv.Title_Max[cp] <= index[cp], neg=True):
            # (Line 101) {
            # (Line 102) if (tv.Enable_Title_Num[cp] > index[cp])
            if EUDIf()(tv.Enable_Title_Num[cp] <= index[cp], neg=True):
                # (Line 103) { s.printAt(i + 1, "　　\x17[ \x04", i + 1, " \x17]　\x04",ptr2s(tv.Total_Kill_Title[index[cp]])," \x04　", tv.Total_Kill_Need[index[cp]], " \x1FKill"); }
                s.printAt(i + 1, "　　\x17[ \x04", i + 1, " \x17]　\x04", ptr2s(tv.Total_Kill_Title[index[cp]]), " \x04　", tv.Total_Kill_Need[index[cp]], " \x1FKill")
                # (Line 104) else
                # (Line 105) { s.printAt(i + 1, "　　\x17[ \x04", i + 1, " \x17]　\x05",ptr2s(tv.Total_Kill_Title[index[cp]])," \x04　", tv.Total_Kill_Need[index[cp]], " \x1FKill"); }
            if EUDElse()():
                s.printAt(i + 1, "　　\x17[ \x04", i + 1, " \x17]　\x05", ptr2s(tv.Total_Kill_Title[index[cp]]), " \x04　", tv.Total_Kill_Need[index[cp]], " \x1FKill")
                # (Line 106) }
            EUDEndIf()
            # (Line 107) else { s.printAt(i + 1, "\n"); }
        if EUDElse()():
            s.printAt(i + 1, "\n")
            # (Line 108) }
        EUDEndIf()
        # (Line 109) s.printAt(6, "\n");
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    s.printAt(6, "\n")
    # (Line 110) s.printAt(7, "　　\x04", tv.View_Title_Now[cp] + 1, " 페이지 / 이전 [\x17A\x04] 다음 [\x17D\x04] 돌아가기 [\x17Z\x04]");
    s.printAt(7, "　　\x04", tv.View_Title_Now[cp] + 1, " 페이지 / 이전 [\x17A\x04] 다음 [\x17D\x04] 돌아가기 [\x17Z\x04]")
    # (Line 112) Set_PName_Index(cp, 200);
    Set_PName_Index(cp, 200)
    # (Line 113) }
    # (Line 115) function SetTitle_CS_Text(cp)

# (Line 116) {
@EUDFunc
def SetTitle_CS_Text(cp):
    # (Line 117) totalcs.Total_CS_Setting(cp);
    totalcs.Total_CS_Setting(cp)
    # (Line 119) s.printAt(0, "　　\x17[ \x04보유 통합 크립 파괴 업적 칭호 목록 \x17]　", v.CS_Total[cp], " \x1FCS");
    s.printAt(0, "　　\x17[ \x04보유 통합 크립 파괴 업적 칭호 목록 \x17]　", v.CS_Total[cp], " \x1FCS")
    # (Line 120) for (var i = 0; i < tv.View_Title_Num; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= tv.View_Title_Num, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 121) {
        # (Line 122) index[cp] = tv.View_Title_Num * tv.View_Title_Now[cp] + i;
        _ARRW(index, cp) << (tv.View_Title_Num * tv.View_Title_Now[cp] + i)
        # (Line 124) if (tv.Title_Max[cp] > index[cp])
        if EUDIf()(tv.Title_Max[cp] <= index[cp], neg=True):
            # (Line 125) {
            # (Line 126) if (tv.Enable_Title_Num[cp] > index[cp])
            if EUDIf()(tv.Enable_Title_Num[cp] <= index[cp], neg=True):
                # (Line 127) { s.printAt(i + 1, "　　\x17[ \x04", i + 1, " \x17]　\x04",ptr2s(tv.Total_CS_Title[index[cp]])," \x04　", tv.Total_CS_Need[index[cp]], " \x1FCS"); }
                s.printAt(i + 1, "　　\x17[ \x04", i + 1, " \x17]　\x04", ptr2s(tv.Total_CS_Title[index[cp]]), " \x04　", tv.Total_CS_Need[index[cp]], " \x1FCS")
                # (Line 128) else
                # (Line 129) { s.printAt(i + 1, "　　\x17[ \x04", i + 1, " \x17]　\x05",ptr2s(tv.Total_CS_Title[index[cp]])," \x04　", tv.Total_CS_Need[index[cp]], " \x1FCS"); }
            if EUDElse()():
                s.printAt(i + 1, "　　\x17[ \x04", i + 1, " \x17]　\x05", ptr2s(tv.Total_CS_Title[index[cp]]), " \x04　", tv.Total_CS_Need[index[cp]], " \x1FCS")
                # (Line 130) }
            EUDEndIf()
            # (Line 131) else { s.printAt(i + 1, "\n"); }
        if EUDElse()():
            s.printAt(i + 1, "\n")
            # (Line 132) }
        EUDEndIf()
        # (Line 133) s.printAt(6, "\n");
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    s.printAt(6, "\n")
    # (Line 134) s.printAt(7, "　　\x04", tv.View_Title_Now[cp] + 1, " 페이지 / 이전 [\x17A\x04] 다음 [\x17D\x04] 돌아가기 [\x17Z\x04]");
    s.printAt(7, "　　\x04", tv.View_Title_Now[cp] + 1, " 페이지 / 이전 [\x17A\x04] 다음 [\x17D\x04] 돌아가기 [\x17Z\x04]")
    # (Line 136) Set_PName_Index(cp, 300);
    Set_PName_Index(cp, 300)
    # (Line 137) }
    # (Line 139) function Set_PName_Index(cp, value)

# (Line 140) {
@EUDFunc
def Set_PName_Index(cp, value):
    # (Line 141) if (Deaths(CurrentPlayer, AtLeast, 1, "Zerg Larva"))
    if EUDIf()(Deaths(CurrentPlayer, AtLeast, 1, "Zerg Larva")):
        # (Line 142) {
        # (Line 143) index[cp] = dwread_epd(EPD(0x58A364 + 48 * 35 + 4 * cp)) - 1;
        _ARRW(index, cp) << (f_dwread_epd(EPD(0x58A364 + 48 * 35 + 4 * cp)) - 1)
        # (Line 144) if ( tv.Enable_Title_Num[cp] > tv.View_Title_Num * tv.View_Title_Now[cp] + index[cp])
        if EUDIf()(tv.Enable_Title_Num[cp] <= tv.View_Title_Num * tv.View_Title_Now[cp] + index[cp], neg=True):
            # (Line 145) {
            # (Line 146) tv.Title_Name_Front[cp] = value + tv.View_Title_Num * tv.View_Title_Now[cp] + index[cp];
            _ARRW(tv.Title_Name_Front, cp) << (value + tv.View_Title_Num * tv.View_Title_Now[cp] + index[cp])
            # (Line 147) tv.View_Title[cp] = 2;
            _ARRW(tv.View_Title, cp) << (2)
            # (Line 148) s.print("\n\n\n\n\n\n\n\n\n\n\n");
            s.print("\n\n\n\n\n\n\n\n\n\n\n")
            # (Line 149) }
            # (Line 150) SetDeaths(CurrentPlayer, SetTo, 0, "Zerg Larva");
        EUDEndIf()
        # (Line 151) }
        DoActions(SetDeaths(CurrentPlayer, SetTo, 0, "Zerg Larva"))
        # (Line 152) }
    EUDEndIf()
    # (Line 154) function Set_PName(cp)

# (Line 155) {
@EUDFunc
def Set_PName(cp):
    # (Line 156) if (tv.Title_Name_Front[cp] >= 100 && tv.Title_Name_Front[cp] < 200)
    if EUDIf()(EUDSCAnd()(tv.Title_Name_Front[cp] >= 100)(tv.Title_Name_Front[cp] >= 200, neg=True)()):
        # (Line 157) {
        # (Line 158) SetPName(getcurpl(), ptr2s(tv.Total_Exp_Title[tv.Title_Name_Front[cp] - 100]), tct.str(0x57EEEB + 36 * getcurpl()));
        SetPName(f_getcurpl(), ptr2s(tv.Total_Exp_Title[tv.Title_Name_Front[cp] - 100]), tct.f_str(0x57EEEB + 36 * f_getcurpl()))
        # (Line 159) }
        # (Line 160) else if (tv.Title_Name_Front[cp] >= 200 && tv.Title_Name_Front[cp] < 300)
    if EUDElseIf()(EUDSCAnd()(tv.Title_Name_Front[cp] >= 200)(tv.Title_Name_Front[cp] >= 300, neg=True)()):
        # (Line 161) {
        # (Line 162) SetPName(getcurpl(), ptr2s(tv.Total_Kill_Title[tv.Title_Name_Front[cp] - 200]), tct.str(0x57EEEB + 36 * getcurpl()));
        SetPName(f_getcurpl(), ptr2s(tv.Total_Kill_Title[tv.Title_Name_Front[cp] - 200]), tct.f_str(0x57EEEB + 36 * f_getcurpl()))
        # (Line 163) }
        # (Line 164) else if (tv.Title_Name_Front[cp] >= 300 && tv.Title_Name_Front[cp] < 400)
    if EUDElseIf()(EUDSCAnd()(tv.Title_Name_Front[cp] >= 300)(tv.Title_Name_Front[cp] >= 400, neg=True)()):
        # (Line 165) {
        # (Line 166) SetPName(getcurpl(), ptr2s(tv.Total_CS_Title[tv.Title_Name_Front[cp] - 300]), tct.str(0x57EEEB + 36 * getcurpl()));
        SetPName(f_getcurpl(), ptr2s(tv.Total_CS_Title[tv.Title_Name_Front[cp] - 300]), tct.f_str(0x57EEEB + 36 * f_getcurpl()))
        # (Line 167) }
        # (Line 168) }
    EUDEndIf()
    # (Line 170) function Key_input(cp)

# (Line 171) {
@EUDFunc
def Key_input(cp):
    # (Line 172) if (Deaths(CurrentPlayer, Exactly, 2, "Terran SCV"))
    if EUDIf()(Deaths(CurrentPlayer, Exactly, 2, "Terran SCV")):
        # (Line 173) {
        # (Line 174) if (tv.Title_Max[cp] > tv.View_Title_Now[cp] * tv.View_Title_Num + tv.View_Title_Num) { tv.View_Title_Now[cp] += 1; }
        if EUDIf()(tv.Title_Max[cp] <= tv.View_Title_Now[cp] * tv.View_Title_Num + tv.View_Title_Num, neg=True):
            _ARRW(tv.View_Title_Now, cp).__iadd__(1)
            # (Line 175) SetDeaths(CurrentPlayer, SetTo, 0, "Terran SCV");
        EUDEndIf()
        # (Line 176) }
        DoActions(SetDeaths(CurrentPlayer, SetTo, 0, "Terran SCV"))
        # (Line 177) else if (Deaths(CurrentPlayer, Exactly, 3, "Terran SCV"))
    if EUDElseIf()(Deaths(CurrentPlayer, Exactly, 3, "Terran SCV")):
        # (Line 178) {
        # (Line 179) if (tv.View_Title_Now[cp] > 0) { tv.View_Title_Now[cp] -= 1; }
        if EUDIf()(tv.View_Title_Now[cp] <= 0, neg=True):
            _ARRW(tv.View_Title_Now, cp).__isub__(1)
            # (Line 180) SetDeaths(CurrentPlayer, SetTo, 0, "Terran SCV");
        EUDEndIf()
        # (Line 181) }
        DoActions(SetDeaths(CurrentPlayer, SetTo, 0, "Terran SCV"))
        # (Line 183) if (Deaths(CurrentPlayer, Exactly, 4, "Terran SCV"))
    EUDEndIf()
    if EUDIf()(Deaths(CurrentPlayer, Exactly, 4, "Terran SCV")):
        # (Line 184) {
        # (Line 185) SetDeaths(CurrentPlayer, SetTo, 0, "Terran SCV");
        # (Line 187) if (tv.View_Title[cp] < 1) 	{ tv.View_Title[cp] += 1; }
        DoActions(SetDeaths(CurrentPlayer, SetTo, 0, "Terran SCV"))
        if EUDIf()(tv.View_Title[cp] >= 1, neg=True):
            _ARRW(tv.View_Title, cp).__iadd__(1)
            # (Line 188) else 					{ tv.View_Title[cp] = 0; s.print("\n\n\n\n\n\n\n\n\n\n\n"); }
        if EUDElse()():
            _ARRW(tv.View_Title, cp) << (0)
            s.print("\n\n\n\n\n\n\n\n\n\n\n")
            # (Line 189) }
        EUDEndIf()
        # (Line 191) if (Deaths(CurrentPlayer, Exactly, 5, "Terran SCV"))
    EUDEndIf()
    if EUDIf()(Deaths(CurrentPlayer, Exactly, 5, "Terran SCV")):
        # (Line 192) {
        # (Line 193) tv.Select_Title[cp] = 0;
        _ARRW(tv.Select_Title, cp) << (0)
        # (Line 194) tv.View_Title_Now[cp] = 0;
        _ARRW(tv.View_Title_Now, cp) << (0)
        # (Line 195) SetDeaths(CurrentPlayer, SetTo, 0, "Terran SCV");
        # (Line 196) }
        DoActions(SetDeaths(CurrentPlayer, SetTo, 0, "Terran SCV"))
        # (Line 198) if (Deaths(CurrentPlayer, Exactly, 1, "Zerg Larva") && tv.Select_Title[cp] == 0 && tv.View_Title[cp] == 1) { tv.Select_Title[cp] = 1; SetDeaths(CurrentPlayer, SetTo, 0, "Zerg Larva"); }
    EUDEndIf()
    if EUDIf()(EUDSCAnd()(Deaths(CurrentPlayer, Exactly, 1, "Zerg Larva"))(tv.Select_Title[cp] == 0)(tv.View_Title[cp] == 1)()):
        _ARRW(tv.Select_Title, cp) << (1)
        DoActions(SetDeaths(CurrentPlayer, SetTo, 0, "Zerg Larva"))
        # (Line 199) if (Deaths(CurrentPlayer, Exactly, 2, "Zerg Larva") && tv.Select_Title[cp] == 0 && tv.View_Title[cp] == 1) { tv.Select_Title[cp] = 2; SetDeaths(CurrentPlayer, SetTo, 0, "Zerg Larva"); }
    EUDEndIf()
    if EUDIf()(EUDSCAnd()(Deaths(CurrentPlayer, Exactly, 2, "Zerg Larva"))(tv.Select_Title[cp] == 0)(tv.View_Title[cp] == 1)()):
        _ARRW(tv.Select_Title, cp) << (2)
        DoActions(SetDeaths(CurrentPlayer, SetTo, 0, "Zerg Larva"))
        # (Line 200) if (Deaths(CurrentPlayer, Exactly, 3, "Zerg Larva") && tv.Select_Title[cp] == 0 && tv.View_Title[cp] == 1) { tv.Select_Title[cp] = 3; SetDeaths(CurrentPlayer, SetTo, 0, "Zerg Larva"); }
    EUDEndIf()
    if EUDIf()(EUDSCAnd()(Deaths(CurrentPlayer, Exactly, 3, "Zerg Larva"))(tv.Select_Title[cp] == 0)(tv.View_Title[cp] == 1)()):
        _ARRW(tv.Select_Title, cp) << (3)
        DoActions(SetDeaths(CurrentPlayer, SetTo, 0, "Zerg Larva"))
        # (Line 201) if (Deaths(CurrentPlayer, Exactly, 4, "Zerg Larva") && tv.Select_Title[cp] == 0 && tv.View_Title[cp] == 1) { tv.Select_Title[cp] = 4; SetDeaths(CurrentPlayer, SetTo, 0, "Zerg Larva"); }
    EUDEndIf()
    if EUDIf()(EUDSCAnd()(Deaths(CurrentPlayer, Exactly, 4, "Zerg Larva"))(tv.Select_Title[cp] == 0)(tv.View_Title[cp] == 1)()):
        _ARRW(tv.Select_Title, cp) << (4)
        DoActions(SetDeaths(CurrentPlayer, SetTo, 0, "Zerg Larva"))
        # (Line 202) if (Deaths(CurrentPlayer, Exactly, 5, "Zerg Larva") && tv.Select_Title[cp] == 0 && tv.View_Title[cp] == 1) { tv.Select_Title[cp] = 5; SetDeaths(CurrentPlayer, SetTo, 0, "Zerg Larva"); }
    EUDEndIf()
    if EUDIf()(EUDSCAnd()(Deaths(CurrentPlayer, Exactly, 5, "Zerg Larva"))(tv.Select_Title[cp] == 0)(tv.View_Title[cp] == 1)()):
        _ARRW(tv.Select_Title, cp) << (5)
        DoActions(SetDeaths(CurrentPlayer, SetTo, 0, "Zerg Larva"))
        # (Line 203) }
    EUDEndIf()
