## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import TitleVariable as tv;
import TitleVariable as tv
# (Line 2) import Variable as v;
import Variable as v
# (Line 4) function Total_CS_Setting(cp)
# (Line 5) {
@EUDFunc
def Total_CS_Setting(cp):
    # (Line 6) if 		(v.CS_Total[cp] < tv.Total_CS_Need[0])			{ tv.Enable_Title_Num[cp] = 0; 	}
    if EUDIf()(v.CS_Total[cp] >= tv.Total_CS_Need[0], neg=True):
        _ARRW(tv.Enable_Title_Num, cp) << (0)
        # (Line 7) else if 	(v.CS_Total[cp] < tv.Total_CS_Need[1])			{ tv.Enable_Title_Num[cp] = 1; 	}
    if EUDElseIf()(v.CS_Total[cp] >= tv.Total_CS_Need[1], neg=True):
        _ARRW(tv.Enable_Title_Num, cp) << (1)
        # (Line 8) else if 	(v.CS_Total[cp] < tv.Total_CS_Need[2])			{ tv.Enable_Title_Num[cp] = 2; 	}
    if EUDElseIf()(v.CS_Total[cp] >= tv.Total_CS_Need[2], neg=True):
        _ARRW(tv.Enable_Title_Num, cp) << (2)
        # (Line 9) else if 	(v.CS_Total[cp] < tv.Total_CS_Need[3])			{ tv.Enable_Title_Num[cp] = 3; 	}
    if EUDElseIf()(v.CS_Total[cp] >= tv.Total_CS_Need[3], neg=True):
        _ARRW(tv.Enable_Title_Num, cp) << (3)
        # (Line 10) else if 	(v.CS_Total[cp] < tv.Total_CS_Need[4])			{ tv.Enable_Title_Num[cp] = 4; 	}
    if EUDElseIf()(v.CS_Total[cp] >= tv.Total_CS_Need[4], neg=True):
        _ARRW(tv.Enable_Title_Num, cp) << (4)
        # (Line 11) else if 	(v.CS_Total[cp] < tv.Total_CS_Need[5])			{ tv.Enable_Title_Num[cp] = 5; 	}
    if EUDElseIf()(v.CS_Total[cp] >= tv.Total_CS_Need[5], neg=True):
        _ARRW(tv.Enable_Title_Num, cp) << (5)
        # (Line 12) else if 	(v.CS_Total[cp] < tv.Total_CS_Need[6])			{ tv.Enable_Title_Num[cp] = 6; 	}
    if EUDElseIf()(v.CS_Total[cp] >= tv.Total_CS_Need[6], neg=True):
        _ARRW(tv.Enable_Title_Num, cp) << (6)
        # (Line 13) else if 	(v.CS_Total[cp] < tv.Total_CS_Need[7])			{ tv.Enable_Title_Num[cp] = 7; 	}
    if EUDElseIf()(v.CS_Total[cp] >= tv.Total_CS_Need[7], neg=True):
        _ARRW(tv.Enable_Title_Num, cp) << (7)
        # (Line 14) else if 	(v.CS_Total[cp] < tv.Total_CS_Need[8])			{ tv.Enable_Title_Num[cp] = 8; 	}
    if EUDElseIf()(v.CS_Total[cp] >= tv.Total_CS_Need[8], neg=True):
        _ARRW(tv.Enable_Title_Num, cp) << (8)
        # (Line 15) else if 	(v.CS_Total[cp] < tv.Total_CS_Need[9])			{ tv.Enable_Title_Num[cp] = 9; 	}
    if EUDElseIf()(v.CS_Total[cp] >= tv.Total_CS_Need[9], neg=True):
        _ARRW(tv.Enable_Title_Num, cp) << (9)
        # (Line 16) else if 	(v.CS_Total[cp] < tv.Total_CS_Need[10])		{ tv.Enable_Title_Num[cp] = 10; 	}
    if EUDElseIf()(v.CS_Total[cp] >= tv.Total_CS_Need[10], neg=True):
        _ARRW(tv.Enable_Title_Num, cp) << (10)
        # (Line 17) else if 	(v.CS_Total[cp] < tv.Total_CS_Need[11])		{ tv.Enable_Title_Num[cp] = 11; 	}
    if EUDElseIf()(v.CS_Total[cp] >= tv.Total_CS_Need[11], neg=True):
        _ARRW(tv.Enable_Title_Num, cp) << (11)
        # (Line 18) else if 	(v.CS_Total[cp] < tv.Total_CS_Need[12])		{ tv.Enable_Title_Num[cp] = 12; 	}
    if EUDElseIf()(v.CS_Total[cp] >= tv.Total_CS_Need[12], neg=True):
        _ARRW(tv.Enable_Title_Num, cp) << (12)
        # (Line 19) else if 	(v.CS_Total[cp] < tv.Total_CS_Need[13])		{ tv.Enable_Title_Num[cp] = 13; 	}
    if EUDElseIf()(v.CS_Total[cp] >= tv.Total_CS_Need[13], neg=True):
        _ARRW(tv.Enable_Title_Num, cp) << (13)
        # (Line 20) else if 	(v.CS_Total[cp] < tv.Total_CS_Need[14])		{ tv.Enable_Title_Num[cp] = 14;	}
    if EUDElseIf()(v.CS_Total[cp] >= tv.Total_CS_Need[14], neg=True):
        _ARRW(tv.Enable_Title_Num, cp) << (14)
        # (Line 21) else if 	(v.CS_Total[cp] < tv.Total_CS_Need[15])		{ tv.Enable_Title_Num[cp] = 15; 	}
    if EUDElseIf()(v.CS_Total[cp] >= tv.Total_CS_Need[15], neg=True):
        _ARRW(tv.Enable_Title_Num, cp) << (15)
        # (Line 22) else if 	(v.CS_Total[cp] < tv.Total_CS_Need[16])		{ tv.Enable_Title_Num[cp] = 16; 	}
    if EUDElseIf()(v.CS_Total[cp] >= tv.Total_CS_Need[16], neg=True):
        _ARRW(tv.Enable_Title_Num, cp) << (16)
        # (Line 23) else if 	(v.CS_Total[cp] < tv.Total_CS_Need[17])		{ tv.Enable_Title_Num[cp] = 17; 	}
    if EUDElseIf()(v.CS_Total[cp] >= tv.Total_CS_Need[17], neg=True):
        _ARRW(tv.Enable_Title_Num, cp) << (17)
        # (Line 24) else if 	(v.CS_Total[cp] < tv.Total_CS_Need[18])		{ tv.Enable_Title_Num[cp] = 18; 	}
    if EUDElseIf()(v.CS_Total[cp] >= tv.Total_CS_Need[18], neg=True):
        _ARRW(tv.Enable_Title_Num, cp) << (18)
        # (Line 25) else if 	(v.CS_Total[cp] < tv.Total_CS_Need[19])		{ tv.Enable_Title_Num[cp] = 19; 	}
    if EUDElseIf()(v.CS_Total[cp] >= tv.Total_CS_Need[19], neg=True):
        _ARRW(tv.Enable_Title_Num, cp) << (19)
        # (Line 26) else if 	(v.CS_Total[cp] < tv.Total_CS_Need[20])		{ tv.Enable_Title_Num[cp] = 20; 	}
    if EUDElseIf()(v.CS_Total[cp] >= tv.Total_CS_Need[20], neg=True):
        _ARRW(tv.Enable_Title_Num, cp) << (20)
        # (Line 27) else 												{ tv.Enable_Title_Num[cp] = 21; 	}
    if EUDElse()():
        _ARRW(tv.Enable_Title_Num, cp) << (21)
        # (Line 29) tv.Title_Max[cp] = 21;
    EUDEndIf()
    _ARRW(tv.Title_Max, cp) << (21)
    # (Line 30) }
