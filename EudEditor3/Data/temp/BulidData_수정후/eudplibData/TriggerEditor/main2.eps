const s = StringBuffer(1000);
const UnsawnTimber 	= PVariable();
const Timber 		= PVariable();
const IronOre 		= PVariable();
const keyC = PVariable();
const keyI = PVariable();
const keyZ = PVariable();
const keyX = PVariable();
const Goblin = EUDArray(5);

const num = PVariable();
const page = PVariable();

var spawnLocGoblin 		= 0;
var spawnLocBiter 		= 0;
var spawnLocOrc 		= 0;
var spawnLocLamia 		= 0;
var spawnLocFang 		= 0;
var spawnLocOger 		= 0;
var spawnLocSkeleton 	= 0;
var spawnLocLIch 		= 0;

const locGoblinX 	= EUDArray(10);
const locGoblinY 	= EUDArray(10);
const locBiterX 	= EUDArray(10);
const locBiterY 	= EUDArray(10);
const locLamiaX 	= EUDArray(10);
const locLamiaY 	= EUDArray(10);
const locOrcX 		= EUDArray(10);
const locOrcY 		= EUDArray(10);
const locFangX 		= EUDArray(10);
const locFangY 		= EUDArray(10);
const locOgerX 		= EUDArray(10);
const locOgerY 		= EUDArray(10);
const locSkeletonX 	= EUDArray(10);
const locSkeletonY 	= EUDArray(10);
const locLichX 		= EUDArray(10);
const locLichY	 	= EUDArray(10);

var temp = 0;

const nameInventory = EUDArray(24 * 6);
const amountInventory = EUDArray(24 * 6);

const userCharacter = PVariable();
const userLevel 	= PVariable();
const userExp 		= PVariable();
const userJob		= PVariable();
const userGold 		= PVariable();
const userMaxHp		= PVariable();
const userMaxMP		= PVariable();
const userCurMP		= PVariable();
const userAtk		= PVariable();
const userDef		= PVariable();
const userWeapon	= PVariable();
const userArmor 	= PVariable();
const userUseHPptn	= PVariable();
const userUesMPptn	= PVariable();
const userError 	= PVariable();

const isAlive 		= PVariable();

const openedInven 	= PVariable();
const openedSetting = PVariable();
const openedQuest 	= PVariable();

const MaxExp = [10, 20, 30, 40, 50, 60, 70, 80, 90];

const maxInventorySlot = 24;

object Item {
	var name;
	var price;
	var content;
	var max;
};

const itemUnsawnTimber 	= Item();
const itemTimber 		= Item();
const itemIronOre 		= Item();


function NewCharacter()
{
	const cp = getcurpl();
	
	userLevel[cp] = 1;
	userMaxHp[cp] = 320;
	userJob[cp] = 1;
	userCharacter[cp] = epdread_epd(EPD(0x628438));
	
	switch(cp)
	{
		case 0:
			dwwrite(0x65FD00 + 9808 + 0 * 4, userMaxHp[getcurpl()] * 256);
			CreateUnit(1, "Terran Marine", "Start", CurrentPlayer);
			break;
		case 1:
			CreateUnit(1, "Terran Ghost", "Start", CurrentPlayer);
			break;
		case 2:
			CreateUnit(1, "Sarah Kerrigan", "Start", CurrentPlayer);
			break;
	}

	s.print("\x04플레이어들의 유닛을 생성합니다.");
	
	isAlive[cp] = 1;
}

function PrintGetItem(name, amount)
{
	// 0E - 파란색
	s.print("\x0E◈ \x17", ptr2s(name), " \x04+ ", amount);
}

function AddItem(percent, name, amount)
{
	const cp = getcurpl();
	const m = maxInventorySlot;
	
	for(var i = 0; i < m; i++)
	{
		if(strcmp(name, nameInventory[m * cp + i]) == 0)
		{
			amountInventory[m * cp + i] += amount;
			//PrintGetItem(name, amount);
			return;
		}
	}
	
	for(var i = 0; i < m; i++)
	{
		if(amountInventory[m * cp + i] == 0)
		{
			nameInventory[m * cp + i] = name;
			amountInventory[m * cp + i] = amount;
			
			//if(strcmp(item, itemUnsawnTimber.name) == 0) UnsawnTimber[cp] += amount;
			//else if(strcmp(item, itemTimber.name) == 0) Timber[cp] += amount;
			
			switch(name)
			{
				case itemUnsawnTimber.name:
					UnsawnTimber[cp] += amount;
					break;
			}
			s.print(UnsawnTimber[cp]);
			PrintGetItem(name, amount);
			return;
		}
		else s.print("\x17◈ \x04인벤토리가 가득 찼습니다.");
	}
}

function KeyCheck()
{
	const cp = getcurpl();
	const keyType = dwread_epd(11 * 12 + cp);
	return keyType;
}
function KillCheck()
{
	if(Kills(CurrentPlayer, AtLeast, 1, "Zerg Drone"))
	{
		SetKills(CurrentPlayer, Subtract, 1, "Zerg Drone");
		
	}
	if(Kills(CurrentPlayer, AtLeast, 1, "Zerg Broodling"))
	{
		SetKills(CurrentPlayer, Subtract, 1, "Zerg Broodling");
		
	}
	if(Kills(CurrentPlayer, AtLeast, 1, "Zerg Zergling"))
	{
		SetKills(CurrentPlayer, Subtract, 1, "Zerg Zergling");
		
	}
	if(Kills(CurrentPlayer, AtLeast, 1, "Zerg Hydralisk"))
	{
		SetKills(CurrentPlayer, Subtract, 1, "Zerg Hydralisk");
		
	}
	if(Kills(CurrentPlayer, AtLeast, 1, "Zerg Defiler"))
	{
		SetKills(CurrentPlayer, Subtract, 1, "Zerg Defiler");
		
	}
	if(Kills(CurrentPlayer, AtLeast, 1, "Devouring One (Zergling)"))
	{
		SetKills(CurrentPlayer, Subtract, 1, "Devouring One (Zergling)");
		
	}
	if(Kills(CurrentPlayer, AtLeast, 1, "Protoss Zealot"))
	{
		SetKills(CurrentPlayer, Subtract, 1, "Protoss Zealot");
		
	}
}


function SetAlliance()
{
	if(getcurpl() < 6)
	{
		SetAllianceStatus(P1, Ally);
		SetAllianceStatus(P2, Ally);
		SetAllianceStatus(P3, Ally);
		SetAllianceStatus(P4, Ally);
		SetAllianceStatus(P5, Ally);
		SetAllianceStatus(P6, Ally);
		SetAllianceStatus(P7, Ally);
	}
	if(getcurpl() == 6)
	{
		SetAllianceStatus(P1, Ally);
		SetAllianceStatus(P2, Ally);
		SetAllianceStatus(P3, Ally);
		SetAllianceStatus(P4, Ally);
		SetAllianceStatus(P5, Ally);
		SetAllianceStatus(P6, Ally);
		SetAllianceStatus(P8, Ally);
	}
	if(getcurpl() == 7)
	{
		SetAllianceStatus(P7, Ally);
	}
}

function GoblinSpawn()
{
	for(var i = 0; i < 5; i++)
	{
		if(Goblin[i] == 0)
		{
			Goblin[i] = epdread_epd(EPD(0x628438));
			CreateUnit(1, "Zerg Zergling", "Start", P1);
		}
		
		if(bread_epd(Goblin[i] + 0x04D / 4,  0x04D % 4) == 0)
		{
			Goblin[i] = 0;
		}
	}
}
function SetEtcItemInfo()
{
	itemUnsawnTimber.name 		= Db("원목");
	itemUnsawnTimber.price 		= 20;
	itemUnsawnTimber.content 	= Db("");
	itemUnsawnTimber.max 		= 50;
	
	itemTimber.name 			= Db("목재");
	itemTimber.price 			= 20;
	itemTimber.content 			= Db("");
	itemTimber.max				= 50;
	
	itemIronOre.name 			= Db("철광석");
	itemIronOre.price 			= 20;
	itemIronOre.content 		= Db("");
	itemIronOre.max				= 99;
}

function CreatePotal()
{
	CreateUnit(1, "Terran Beacon", "Potal 01", P7);
	CreateUnit(1, "Terran Beacon", "Potal 02", P7);
	CreateUnit(1, "Terran Beacon", "Potal 03", P7);
	CreateUnit(1, "Terran Beacon", "Potal 04", P7);
	CreateUnit(1, "Terran Beacon", "Potal 05", P7);
	CreateUnit(1, "Terran Beacon", "Potal 06", P7);
	CreateUnit(1, "Terran Beacon", "Potal 07", P7);
	CreateUnit(1, "Terran Beacon", "Potal 10", P7);
	CreateUnit(1, "Terran Beacon", "Potal 12", P7);
	CreateUnit(1, "Terran Beacon", "Potal 13", P7);
	CreateUnit(1, "Terran Beacon", "Potal 14", P7);
	CreateUnit(1, "Terran Beacon", "Potal 15", P7);
	CreateUnit(1, "Terran Beacon", "Potal 16", P7);
	CreateUnit(1, "Terran Beacon", "Potal 17", P7);
	CreateUnit(1, "Terran Beacon", "Potal 18", P7);
	CreateUnit(1, "Terran Beacon", "Potal 20", P7);
	CreateUnit(1, "Terran Beacon", "Potal 21", P7);
	CreateUnit(1, "Terran Beacon", "Potal 22", P7);
	CreateUnit(1, "Terran Beacon", "Potal 23", P7);
	CreateUnit(1, "Terran Beacon", "Potal 24", P7);
	CreateUnit(1, "Terran Beacon", "Potal 25", P7);
	CreateUnit(1, "Terran Beacon", "Potal 26", P7);
	CreateUnit(1, "Terran Beacon", "Potal 27", P7);
	CreateUnit(1, "Terran Beacon", "Potal 28", P7);
	CreateUnit(1, "Terran Beacon", "Potal 29", P7);
	CreateUnit(1, "Terran Beacon", "Potal 30", P7);
	CreateUnit(1, "Terran Beacon", "Potal 31", P7);
	CreateUnit(1, "Terran Beacon", "Potal 32", P7);
	CreateUnit(1, "Terran Beacon", "Potal 33", P7);
	CreateUnit(1, "Terran Beacon", "Potal 34", P7);
}

function SetHealth(Cunit, modify: TrgModifier, val)
{
	const cp = getcurpl();
	SetMemoryEPD(userCharacter[cp] + 0x008 / 4, modify, val * 256);
	
	if(MemoryEPD(userCharacter[cp] + 0x008 / 4, AtLeast, userMaxHp[cp] * 256))
	{
		SetMemoryEPD(userCharacter[cp] + 0x008 / 4, SetTo, userMaxHp[cp] * 256);
	}
}

function Heal()
{
	const cp = getcurpl();
	SetMemoryEPD(userCharacter[cp] + 0x008 / 4, SetTo, userMaxHp[cp] * 256);
}

function LevelCheck()
{
	const cp = getcurpl();
	if(userExp[cp] >= MaxExp[userLevel[cp] - 1] && userLevel[cp] < 100)
	{
		userExp[cp] -= MaxExp[userLevel[cp] - 1];
		userLevel[cp] += 1;
	}
}

function MobSpawnLocationCheck()
{
	// 드론 수 체크
	temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Zerg Drone", "Anywhere")'));
	SetVariables(spawnLocGoblin, temp);
	// 브루들링 수 체크
	temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Zerg Broodling", "Anywhere")'));
	SetVariables(spawnLocBiter, temp);
	// 저글링 수 체크
	temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Zerg Zergling", "Anywhere")'));
	SetVariables(spawnLocOrc, temp);
	// 히드라 수 체크
	temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Zerg Hydralisk", "Anywhere")'));
	SetVariables(spawnLocLamia, temp);
	// 디파일러 수 체크
	temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Zerg Defiler", "Anywhere")'));
	SetVariables(spawnLocFang, temp);
	// 디버우링원 수 체크
	temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Devouring One (Zergling)", "Anywhere")'));
	SetVariables(spawnLocOger, temp);
	// 질럿 수 체크
	temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Protoss Zealot", "Anywhere")'));
	SetVariables(spawnLocSkeleton, temp);
	// 하이템플러 수 체크
	temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Protoss High Templar", "Anywhere")'));
	SetVariables(spawnLocLIch, temp);

	for(var i = 0; i < spawnLocGoblin; i++)
	{	
		if(Bring(P7, Exactly, 0, "Zerg Drone", "Anywhere")) break;
		MoveLocation("CreateMonster", "Zerg Drone", P7, "Anywhere");
		RemoveUnitAt(1, "Zerg Drone", "CreateMonster", P7);
		
		var left = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 0);
		var up = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 1);
		var right = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 2);
		var down = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 3);
		
		locGoblinX[i] = (left + right) / 2;
		locGoblinY[i] = (up + down) / 2;
	}
	
	for(var i = 0; i < spawnLocBiter; i++)
	{	
		if(Bring(P7, Exactly, 0, "Zerg Broodling", "Anywhere")) break;
		MoveLocation("CreateMonster", "Zerg Broodling", P7, "Anywhere");
		RemoveUnitAt(1, "Zerg Broodling", "CreateMonster", P7);
		
		const left = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 0);
		const up = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 1);
		const right = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 2);
		const down = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 3);
		
		locBiterX[i] = (left + right) / 2;
		locBiterY[i] = (up + down) / 2;
	}
	
	for(var i = 0; i < spawnLocOrc; i++)
	{	
		if(Bring(P7, Exactly, 0, "Zerg Zergling", "Anywhere")) break;
		MoveLocation("CreateMonster", "Zerg Zergling", P7, "Anywhere");
		RemoveUnitAt(1, "Zerg Zergling", "CreateMonster", P7);
		
		const left = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 0);
		const up = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 1);
		const right = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 2);
		const down = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 3);
		
		locOrcX[i] = (left + right) / 2;
		locOrcY[i] = (up + down) / 2;
	}
	
	for(var i = 0; i < spawnLocLamia; i++)
	{	
		if(Bring(P7, Exactly, 0, "Zerg Hydralisk", "Anywhere")) break;
		MoveLocation("CreateMonster", "Zerg Hydralisk", P7, "Anywhere");
		RemoveUnitAt(1, "Zerg Hydralisk", "CreateMonster", P7);
		
		const left = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 0);
		const up = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 1);
		const right = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 2);
		const down = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 3);
		
		locLamiaX[i] = (left + right) / 2;
		locLamiaY[i] = (up + down) / 2;
	}
	
	for(var i = 0; i < spawnLocFang; i++)
	{	
		if(Bring(P7, Exactly, 0, "Zerg Defiler", "Anywhere")) break;
		MoveLocation("CreateMonster", "Zerg Defiler", P7, "Anywhere");
		RemoveUnitAt(1, "Zerg Defiler", "CreateMonster", P7);
		
		const left = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 0);
		const up = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 1);
		const right = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 2);
		const down = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 3);
		
		locFangX[i] = (left + right) / 2;
		locFangY[i] = (up + down) / 2;
	}
	
	for(var i = 0; i < spawnLocOger; i++)
	{	
		if(Bring(P7, Exactly, 0, "Devouring One (Zergling)", "Anywhere")) break;
		MoveLocation("CreateMonster", "Devouring One (Zergling)", P7, "Anywhere");
		RemoveUnitAt(1, "Devouring One (Zergling)", "CreateMonster", P7);
		
		const left = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 0);
		const up = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 1);
		const right = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 2);
		const down = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 3);
		
		locOgerX[i] = (left + right) / 2;
		locOgerY[i] = (up + down) / 2;
	}
	
	for(var i = 0; i < spawnLocSkeleton; i++)
	{	
		if(Bring(P7, Exactly, 0, "Protoss Zealot", "Anywhere")) break;
		MoveLocation("CreateMonster", "Protoss Zealot", P7, "Anywhere");
		RemoveUnitAt(1, "Protoss Zealot", "CreateMonster", P7);
		
		const left = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 0);
		const up = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 1);
		const right = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 2);
		const down = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 3);
		
		locSkeletonX[i] = (left + right) / 2;
		locSkeletonY[i] = (up + down) / 2;
	}
	
	for(var i = 0; i < spawnLocLIch; i++)
	{	
		if(Bring(P7, Exactly, 0, "Protoss High Templar", "Anywhere")) break;
		MoveLocation("CreateMonster", "Protoss High Templar", P7, "Anywhere");
		RemoveUnitAt(1, "Protoss High Templar", "CreateMonster", P7);
		
		const left = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 0);
		const up = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 1);
		const right = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 2);
		const down = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 3);
		
		locLichX[i] = (left + right) / 2;
		locLichY[i] = (up + down) / 2;
	}
}
function ResetInventory()
{
	const cp = getcurpl();
	for(var i = 0; i < 24; i++)
	{
		nameInventory[maxInventorySlot * getcurpl() + i] = Db("-");
		amountInventory[maxInventorySlot * getcurpl() + i] = 0;
	}
	s.print("\x04인벤토리 초기화 완료");
}

function OpenInventory()
{
	openedInven[getcurpl()] = 1;
}

function ShowInventory()
{
	const cp = getcurpl();
	
	if(openedInven[cp] == 1)
	{
		if(page[cp] == 1) num[cp] = 0;
		else if(page[cp] == 2) num[cp] = 7;
		else if(page[cp] == 3) num[cp] = 14;
		else if(page[cp] == 4) num[cp] = 24;
		
		if(Deaths(CurrentPlayer, Exactly, 2, "Terran Dropship") && page[cp] > 1) page[cp] -= 1;
		else if(Deaths(CurrentPlayer, Exactly, 4, "Terran Dropship") && page[cp] < 4) page[cp] += 1;
		
		s.printAt(0, "  \x1cINVENTORY \x1d", page[cp], " page");		
		if(amountInventory[24 * cp + num[cp]] != 0)
			s.printAt(1, "  \x0f[2]  \x04", ptr2s(nameInventory[24 * cp + num[cp]]), " \x04 ", amountInventory[24 * cp + num[cp]], "\x04개");
		else s.printAt(1, "  \x0f[2]  \x05비어 있음");
		if(amountInventory[24 * cp + num[cp] + 1] != 0)
			s.printAt(2, "  \x0f[3]  \x04", ptr2s(nameInventory[24 * cp + num[cp] + 1]), " \x04 ", amountInventory[24 * cp + num[cp] + 1], "\x04개");
		else s.printAt(2, "  \x0f[3]  \x05비어 있음");
		if(amountInventory[24 * cp + num[cp] + 2] != 0)
			s.printAt(3, "  \x0f[4]  \x04", ptr2s(nameInventory[24 * cp + num[cp] + 2]), " \x04 ", amountInventory[24 * cp + num[cp] + 2], "\x04개");
		else s.printAt(3, "  \x0f[4]  \x05비어 있음");
		if(amountInventory[24 * cp + num[cp] + 3] != 0)
			s.printAt(4, "  \x0f[5]  \x04", ptr2s(nameInventory[24 * cp + num[cp] + 3]), " \x04 ", amountInventory[24 * cp + num[cp] + 3], "\x04개");
		else s.printAt(4, "  \x0f[5]  \x05비어 있음");
		if(amountInventory[24 * cp + num[cp] + 4] != 0)
			s.printAt(5, "  \x0f[6]  \x04", ptr2s(nameInventory[24 * cp + num[cp] + 4]), " \x04 ", amountInventory[24 * cp + num[cp] + 4], "\x04개");
		else s.printAt(5, "  \x0f[6]  \x05비어 있음");
		if(amountInventory[24 * cp + num[cp] + 5] != 0)
			s.printAt(6, "  \x0f[7]  \x04", ptr2s(nameInventory[24 * cp + num[cp] + 5]), " \x04 ", amountInventory[24 * cp + num[cp] + 5], "\x04개");
		else s.printAt(6, "  \x0f[7]  \x05비어 있음");
	}
}

function CloseInventory()
{
	openedInven[getcurpl()] = 0;
	s.print("\n\n\n\n\n\n\n\n");
}

function onPluginStart()
{
	
	// 인벤토리 초기화
	ResetInventory(); 
	// 맵 스커지 제거
	KillUnit("Zerg Scourge", P1); 
	// 몹 스폰 로케이션 체크
	MobSpawnLocationCheck(); 
	// 포탈 생성
	CreatePotal(); 
	// 아이템 정보 입력
	SetEtcItemInfo(); 
	
	EUDPlayerLoop()();
	
	// 동맹 설정
	//ally.SetAlliance();
	// 캐릭터 생성
	NewCharacter();
	
	
	EUDEndPlayerLoop();
}

function beforeTriggerExec()
{
	// sca 사용
	
	EUDPlayerLoop()();

	eprintln("레벨 : ", userLevel[getcurpl()], " 경험치 : ", userExp[getcurpl()], " / ", MaxExp[userLevel[getcurpl()]]);
	//ps.LevelCheck(); // 레벨 체크
	//mk.KillCheck(); // 몬스터 킬 체크
	//inven.ShowInventory();
	/*if(Deaths(CurrentPlayer, Exactly, 1, "Zerg Larva"))
	{
		userExp[getcurpl()] += 20;
		item.AddItem(100, iitemUnsawnTimber.name, 1);
	}
	if(Deaths(CurrentPlayer, Exactly, 1, "Terran Dropship"))
	{
		if(openedInven[getcurpl()] == 0) inven.OpenInventory();
		else inven.CloseInventory();	
	}*/
	EUDEndPlayerLoop();
	
	SetMemory(0x5124F0, SetTo, 21);
}