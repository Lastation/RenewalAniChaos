## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import OriginalCode as n0;
import OriginalCode as n0
# (Line 3) const ws = 0x58F44A;
ws = _CGFW(lambda: [0x58F44A], 1)[0]
# (Line 4) const EntryPointLength = 8;//EntryPointLength
EntryPointLength = _CGFW(lambda: [8], 1)[0]
# (Line 5) const SpaceLength = 300;//DataBufferSize
SpaceLength = _CGFW(lambda: [300], 1)[0]
# (Line 6) const ObjectCount = 1;//ObjectCount
ObjectCount = _CGFW(lambda: [1], 1)[0]
# (Line 8) function Init(){
@EUDFunc
def Init():
    # (Line 9) MPQAddFile('SCARCHIVEMAPCODE', py_open('scakeyfile', 'rb').read());
    MPQAddFile('SCARCHIVEMAPCODE', open('scakeyfile', 'rb').read())
    # (Line 10) MPQAddFile('SCARCHIVEDATA', py_open('scadatafile', 'rb').read());
    MPQAddFile('SCARCHIVEDATA', open('scadatafile', 'rb').read())
    # (Line 12) dwwrite_epd(EPD(ws) + 0, 1865786353);
    f_dwwrite_epd(EPD(ws) + 0, 1865786353)
    # (Line 13) dwwrite_epd(EPD(ws) + 1, 2431150896);
    f_dwwrite_epd(EPD(ws) + 1, 2431150896)
    # (Line 14) dwwrite_epd(EPD(ws) + 2, 1473954055);
    f_dwwrite_epd(EPD(ws) + 2, 1473954055)
    # (Line 15) dwwrite_epd(EPD(ws) + 3, 2373522391);
    f_dwwrite_epd(EPD(ws) + 3, 2373522391)
    # (Line 16) dwwrite_epd(EPD(ws) + 4, 2577026355);
    f_dwwrite_epd(EPD(ws) + 4, 2577026355)
    # (Line 17) dwwrite_epd(EPD(ws) + 5, 2144464977);
    f_dwwrite_epd(EPD(ws) + 5, 2144464977)
    # (Line 18) dwwrite_epd(EPD(ws) + 6, 3644678974);
    f_dwwrite_epd(EPD(ws) + 6, 3644678974)
    # (Line 19) dwwrite_epd(EPD(ws) + 7, 2992972701);
    f_dwwrite_epd(EPD(ws) + 7, 2992972701)
    # (Line 21) }
    # (Line 24) function Exec(){

@EUDFunc
def Exec():
    # (Line 25) Init();
    Init()
    # (Line 26) }
    # (Line 29) function ResetValue(tagNum, index){

@EUDFunc
def ResetValue(tagNum, index):
    # (Line 30) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 31) switch(tagNum){
    EUDSwitch(tagNum)
    # (Line 32) case 0:
    _t1 = EUDSwitchCase()
    # (Line 33) n0.StageClearCount[cp] = 0;
    if _t1(0):
        _ARRW(n0.StageClearCount, cp) << (0)
        # (Line 34) break;
        EUDBreak()
        # (Line 35) }
    # (Line 36) }
    EUDEndSwitch()
    # (Line 39) function SaveValue(tagNum, Value, index){

@EUDFunc
def SaveValue(tagNum, Value, index):
    # (Line 40) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 41) switch(tagNum){
    EUDSwitch(tagNum)
    # (Line 42) case 0:
    _t1 = EUDSwitchCase()
    # (Line 43) n0.StageClearCount[cp] = Value;
    if _t1(0):
        _ARRW(n0.StageClearCount, cp) << (Value)
        # (Line 44) break;
        EUDBreak()
        # (Line 45) }
    # (Line 46) }
    EUDEndSwitch()
    # (Line 49) function SaveDataWriteValue(tagNum, BaseAddress, index){

@EUDFunc
def SaveDataWriteValue(tagNum, BaseAddress, index):
    # (Line 50) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 51) switch(tagNum){
    EUDSwitch(tagNum)
    # (Line 52) case 0:
    _t1 = EUDSwitchCase()
    # (Line 53) {
    if _t1(0):
        # (Line 54) const objValue = n0.StageClearCount[cp];
        objValue = n0.StageClearCount[cp]
        # (Line 55) if(objValue != 0){
        if EUDIf()(objValue == 0, neg=True):
            # (Line 56) if (objValue > 0xFFFF){
            if EUDIf()(objValue <= 0xFFFF, neg=True):
                # (Line 57) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x1000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x1000 + tagNum)
                # (Line 58) index++;
                index.__iadd__(1)
                # (Line 59) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue // 0x10000)
                # (Line 60) index++;
                index.__iadd__(1)
                # (Line 61) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue % 0x10000)
                # (Line 62) index++;
                index.__iadd__(1)
                # (Line 63) }else{
            if EUDElse()():
                # (Line 64) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x2000 + tagNum);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x2000 + tagNum)
                # (Line 65) index++;
                index.__iadd__(1)
                # (Line 66) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue)
                # (Line 67) index++;
                index.__iadd__(1)
                # (Line 68) }
                # (Line 69) }
            EUDEndIf()
            # (Line 70) }
        EUDEndIf()
        # (Line 71) break;
        EUDBreak()
        # (Line 72) }
    # (Line 74) return index;
    EUDEndSwitch()
    EUDReturn(index)
    # (Line 75) }
    # (Line 78) function LoadDataReadValue(BaseAddress, i){

@EUDFunc
def LoadDataReadValue(BaseAddress, i):
    # (Line 79) const indicator = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
    indicator = f_wread_epd(BaseAddress + i // 2, (i % 2) * 2)
    # (Line 81) if (indicator != 0){
    if EUDIf()(indicator == 0, neg=True):
        # (Line 82) const spec = indicator / 0x1000;
        spec = indicator // 0x1000
        # (Line 83) const ObjNum = indicator % 0x1000;
        ObjNum = indicator % 0x1000
        # (Line 84) var vindex = 0;
        vindex = EUDVariable()
        vindex << (0)
        # (Line 85) var value = 0;
        value = EUDVariable()
        value << (0)
        # (Line 86) if (spec == 1){
        if EUDIf()(spec == 1):
            # (Line 88) i++;
            i.__iadd__(1)
            # (Line 89) const value1 = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            value1 = f_wread_epd(BaseAddress + i // 2, (i % 2) * 2)
            # (Line 90) i++;
            i.__iadd__(1)
            # (Line 91) const value2 = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            value2 = f_wread_epd(BaseAddress + i // 2, (i % 2) * 2)
            # (Line 92) value = value1 * 0x10000 + value2;
            value << (value1 * 0x10000 + value2)
            # (Line 93) }else if (spec == 2){
        if EUDElseIf()(spec == 2):
            # (Line 95) i++;
            i.__iadd__(1)
            # (Line 96) value = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            value << (f_wread_epd(BaseAddress + i // 2, (i % 2) * 2))
            # (Line 97) }else if (spec == 3){
        if EUDElseIf()(spec == 3):
            # (Line 99) i++;
            i.__iadd__(1)
            # (Line 100) vindex = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            vindex << (f_wread_epd(BaseAddress + i // 2, (i % 2) * 2))
            # (Line 101) i++;
            i.__iadd__(1)
            # (Line 102) const value1 = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            value1 = f_wread_epd(BaseAddress + i // 2, (i % 2) * 2)
            # (Line 103) i++;
            i.__iadd__(1)
            # (Line 104) const value2 = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            value2 = f_wread_epd(BaseAddress + i // 2, (i % 2) * 2)
            # (Line 105) value = value1 * 0x10000 + value2;
            value << (value1 * 0x10000 + value2)
            # (Line 106) }else if (spec == 4){
        if EUDElseIf()(spec == 4):
            # (Line 108) i++;
            i.__iadd__(1)
            # (Line 109) vindex = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            vindex << (f_wread_epd(BaseAddress + i // 2, (i % 2) * 2))
            # (Line 110) i++;
            i.__iadd__(1)
            # (Line 111) value = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            value << (f_wread_epd(BaseAddress + i // 2, (i % 2) * 2))
            # (Line 112) }
            # (Line 113) SaveValue(ObjNum, value, vindex);
        EUDEndIf()
        SaveValue(ObjNum, value, vindex)
        # (Line 114) }
        # (Line 115) return i;
    EUDEndIf()
    EUDReturn(i)
    # (Line 116) }
