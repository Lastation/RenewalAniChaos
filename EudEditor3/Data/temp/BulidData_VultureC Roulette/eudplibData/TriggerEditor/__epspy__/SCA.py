## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import SCArchive as sca;
import SCArchive as sca
# (Line 2) import customText as tct;
import customText as tct
# (Line 4) function scaloading() {
@EUDFunc
def f_scaloading():
    # (Line 5) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 6) if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
    if EUDIf()(EUDSCOr()(f_getcurpl() == 0)(f_getcurpl() == 1)(f_getcurpl() == 2)(f_getcurpl() == 3)(f_getcurpl() == 4)(f_getcurpl() == 5)()):
        # (Line 7) if(Deaths(CurrentPlayer,Exactly,8,"key ]")){
        if EUDIf()(Deaths(CurrentPlayer, Exactly, 8, "key ]")):
            # (Line 8) switch(sca.GetLastMessage() ){
            EUDSwitch(sca.GetLastMessage())
            # (Line 9) case 1:
            _t3 = EUDSwitchCase()
            # (Line 10) tct.chatAnnouncement("\x04데이터를 저장합니다.");
            if _t3(1):
                tct.f_chatAnnouncement("\x04데이터를 저장합니다.")
                # (Line 11) sca.SaveData(0);
                sca.SaveData(0)
                # (Line 12) case 2:
            _t4 = EUDSwitchCase()
            # (Line 13) tct.chatAnnouncement("\x04런처를 연결하세요.");
            if _t4(2):
                tct.f_chatAnnouncement("\x04런처를 연결하세요.")
                # (Line 14) case 7:
            _t5 = EUDSwitchCase()
            # (Line 15) tct.chatAnnouncement("\x04런처를 연결하세요.");
            if _t5(7):
                tct.f_chatAnnouncement("\x04런처를 연결하세요.")
                # (Line 16) }
            # (Line 17) }
            EUDEndSwitch()
            # (Line 18) }
        EUDEndIf()
        # (Line 19) EUDEndPlayerLoop();
    EUDEndIf()
    EUDEndPlayerLoop()
    # (Line 20) }
