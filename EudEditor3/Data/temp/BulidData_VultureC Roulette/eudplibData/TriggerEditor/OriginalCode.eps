import customText as tct;
import SCArchive as sca;
import SCA as scaload;
import AuraList as auralist;


const StageClearCount = PVariable();

var txtPtr, btnPtr, btnPos, oldCP;
const trgk = $T('Artanis & safhfh');
var Timer = 0;
const Vulture = [0, 0, 0, 0, 0, 0, 0, 0];
const CamTimer = [0, 0, 0, 0, 0, 0, 0, 0];
const MachineShop = [0, 0, 0, 0, 0, 0, 0, 0];
const SkipCooltime = [0, 0, 0, 0, 0, 0, 0, 0];
const ChartCheck = [0, 0, 0, 0, 0, 0, 0, 0];
const ChartCheckTimer = [0, 0, 0, 0, 0, 0, 0, 0];
var CTimer = 0;
const SkipTimer = [0, 0, 0, 0, 0, 0, 0, 0];
const Light = [0, 0, 0, 0, 0, 0, 0, 0];
const Patrol = [0, 0, 0, 0, 0, 0, 0, 0];
const Skin_Scout = [0, 0, 0, 0, 0, 0, 0, 0];
const Skin_Select = [0, 0, 0, 0, 0, 0, 0, 0];
const Vulture_Booster = [0, 0, 0, 0, 0, 0, 0, 0];
const Skin_Wraith = [0, 0, 0, 0, 0, 0, 0, 0];
const Skin_Wraith_Smoke = [0, 0, 0, 0, 0, 0, 0, 0];
const Vulture_Hitpoints = [0, 0, 0, 0, 0, 0, 0, 0];
const Ban = [0, 0, 0, 0, 0, 0, 0, 0];
const Hold_on = [0, 0, 0, 0, 0, 0, 0, 0];
const Hold_firecount = [0, 0, 0, 0, 0, 0, 0, 0];
const Hold_fireunit = [0, 0, 0, 0, 0, 0, 0, 0];
const Vulture_Direction = [0, 0, 0, 0, 0, 0, 0, 0];
const Hold_Firetimer = [0, 0, 0, 0, 0, 0, 0, 0];
var ControlDirection = 0;
const CS_Death = [0, 0, 0, 0, 0, 0, 0, 0];
var Unit_Count = 0;
var Unit = 0;
var Health = 0;
var Shield = 0;
var UnitSkillTimer = 0;
var Unit_Direction = 0;
var Bullet = 0;
var Unit_PositionX = 0;
var Unit_PositionY = 0;
var TargetUnitPositionX = 0;
var TargetUnitPositionY = 0;
const AlreadyHit = [0, 0, 0, 0, 0, 0, 0, 0];
var RandomNum = 0;
const Skin_Mutalisk = [0, 0, 0, 0, 0, 0, 0, 0];
const Skin_Mutalisk_Effect = [0, 0, 0, 0, 0, 0, 0, 0];
var RandomSkill = 0;
var Damage = 0;
const CircleAleadyHit = [0, 0, 0, 0, 0, 0, 0, 0];
var BossPhase = 0;
var PhaseChange = 0;
var RandomNum2 = 0;
var Bullet2 = 0;
var EffectTimer = 0;
var SkinBlackVulture = 0;
const Skin_BlackVulture = [0, 0, 0, 0, 0, 0, 0, 0];
var BlackVultureIndex = 0;
var Defeated = 0;
const UnitSkillTimerP = [0, 0, 0, 0, 0, 0, 0, 0];
var Clear = 0;
var AuraVIP = 0;
var AuraVIPIndex = 0;
const Skin_Scout_Effect = [0, 0, 0, 0, 0, 0, 0, 0];
var Roulette_Timer = 0;
var Roulette_Count = 3;
const Roulette_Sound = [0, 0, 0, 0, 0, 0, 0, 0];
var StageDisplay = 0;
const OpTimer = [0, 0, 0, 0, 0, 0, 0, 0];
var TrainingMode = 0;
var OptionCount = 0;
var RangeDisplay = 0;
var HealthTotal = 0;
var ShieldTotal = 0;
var Stat_Health = 0;
var Stat_Damage = 0;
var Stat_RangeL = 0;
var Stat_Speed = 0;
var Stat_RangeR = 0;
var Stat_Armor = 0;
var 러시안룰렛 = 0;
var 건전지 = 0;
var GraphicChange = 0;
var Stat_Shield = 0;
var 체력회복불가 = 0;
var 포문개방취소 = 0;
var 중상 = 0;
var HealthRegen = 0;
var autoStart = 0;
var autoStartDisplay = 0;
const WeaponSkin1 = [0, 0, 0, 0, 0, 0, 0, 0];
const WeaponSkin_Select = [0, 0, 0, 0, 0, 0, 0, 0];
const WeaponSkin2 = [0, 0, 0, 0, 0, 0, 0, 0];
var BossReward = 0;
var KukulzaReward = 0;
var RewardOption = 0;
const Reward_Sound = [0, 0, 0, 0, 0, 0, 0, 0];
var RewardCount = 0;
var ProbPlus = 0;
var 팔라딘 = 0;
var 약화 = 0;
var 잔상 = 0;
var 총기개조 = 0;
var 형님 = 0;
var 형님공격 = 0;
const ClassO = [0, 0, 0, 0, 0, 0, 0, 0];
var ClassOEffect = 0;
const SuzumuraAlrI = [0, 0, 0, 0, 0, 0, 0, 0];
const IGO_Sera = [0, 0, 0, 0, 0, 0, 0, 0];
var IGO_Sera_Attack = 0;
const WeaponSkin3 = [0, 0, 0, 0, 0, 0, 0, 0];
var Roulette_Again = 274;
var Roulette_Again_Display = 0;
var TomReward = 0;
var SkinRainbow = 0;
var SkinRainbowIndex = 0;
const Skin_Rainbow = [0, 0, 0, 0, 0, 0, 0, 0];
const RainbowEnabled = [0, 0, 0, 0, 0, 0, 0, 0];
const color = [0, 0, 0, 0, 0, 0, 0, 0];
var colorComputer = 0;
const Aura_RainbowArchon = [0, 0, 0, 0, 0, 0, 0, 0];
var AuraRainbowArchon = 0;
var AuraRainbowArchonIndex = 0;
const Aura_RainbowArchonEnabled = [0, 0, 0, 0, 0, 0, 0, 0];
const Aura_RainbowArchonP = [0, 0, 0, 0, 0, 0, 0, 0];

const PLoc = [28,29,30,31,32,33];
const EnemyP = [2,8,11,19,21,23];
const StartP = [1,6,9,18,20,22];
const KeyP = [1,3,7,8,24,56];
const RandomOption = [0,0,0,0,0,0,0,0];
const PVulture = [0,1,2,7,8,19];
const PHoldFire = [194,195,196,197,198,199];
const WeaponList = [5,15,16,28,48,53,79,9999];
const Pcolor = [0,1,2,3,4,6];


function SetUnitColorEPD(UnitEPD ,Color) {
    /*ToolTip
    Korean
    구조오프셋EPD;
    var UnitEPD;
    의 색상을;
    var Color;
    로 바꿉니다.;
    Korean
    English
    English
    */
    var spriteEPD;
    spriteEPD = epdread_epd(UnitEPD + 0x00C / 4);
    bwrite_epd(spriteEPD + 0x0A/4, 0x0A%4, Color);
}
function AttackGround(attackLoc ,targetLoc ,attackUnit ,targetUnit ,player) {
    /*ToolTip
    Korean
    var player;
    의;
    var attackUnit;
    가;
    var attackLoc;
    에서;
    var targetLoc;
    으로 공격합니다.;
    타겟 유닛 :;
    var targetUnit;
    Korean
    English
    English
    */
    var ap, ae, tp, te;
    ap, ae = cunitepdread_epd(EPD(0x628438));
    CreateUnit(1, (attackUnit), (attackLoc + 1), (player));
    if(
        Memory(0x628438, (10), ap)
    ){
        return false;
    }
    wwrite_epd(ae + 0x110 / 4,  0x110 % 4, 2);
    tp, te = cunitepdread_epd(EPD(0x628438));
    CreateUnit(1, (targetUnit), (targetLoc + 1), (player));
    if(
        Memory(0x628438, (10), tp)
    ){
        return false;
    }
    wwrite_epd(targetUnit + 0x110 / 4,  0x110 % 4, 2);
    SetMemoryEPD(attackUnit + 0x05C / 4, SetTo, targetUnit);
    return true;
}
function hotkeyUnitEPD(epd ,player ,hotkey ,slot) {
    /*ToolTip
    Korean
    구조오프셋EPD;
    var epd;
    를;
    var player;
    의 부대;
    var hotkey;
    에;
    var slot;
    위치로 부대지정합니다.;
    Korean
    English
    English
    */
    const targetOrderSpecial = dwread_epd(epd + 0xA5 / 4) & 0xFF00;
    var alphaID = 0;
    if(
        epd == 19025
    ){
        alphaID = 1 + targetOrderSpecial * 8;
    }
    else{
        alphaID = 1701 - (0x27821 - epd) / 0x54 + targetOrderSpecial * 8;
    }
    SetMemoryEPD(EPD(0x57FE60) + 216 * player + 12 * hotkey + slot, SetTo, alphaID);
}
function NameCheck(Player ,CheckName) {
    /*ToolTip
    Korean
    플레이어;
    var Player;
    의 닉네임이;
    var CheckName;
    이 맞는지 확인합니다.;
    Korean
    English
    English
    */
    const PlayerNameVar = 0x57EEEB + 36 * Player;
    const CheckNameVar = CheckName;
    if(
        strcmp(PlayerNameVar, CheckNameVar) == 0
    ){
        return True;
    }
    else{
        return False;
    }
}
function EUDMoveLocation(Location ,X ,Y) {
    /*ToolTip
    Korean
    var Location;
    을;
    var X;
    ,;
    var Y;
    만큼 평행이동합니다.;
    Korean
    English
    English
    */
    SetMemory(0x58DC60 + Location * 20 + 4 * 0, Add, X);
    SetMemory(0x58DC60 + Location * 20 + 4 * 2, Add, X);
    SetMemory(0x58DC60 + Location * 20 + 4 * 1, Add, -Y);
    SetMemory(0x58DC60 + Location * 20 + 4 * 3, Add, -Y);
}
function BuildCheckEPD(unitEPD ,Unit) {
    /*ToolTip
    Korean
    구조오프셋EPD;
    var unitEPD;
    이;
    var Unit;
    를 생산중인지 확인합니다.;
    Korean
    English
    English
    */
    if(
        wread_epd(unitEPD + 0x098 / 4,  0x098 % 4) == Unit || 
        wread_epd(unitEPD + 0x09A / 4,  0x09A % 4) == Unit || 
        wread_epd(unitEPD + 0x09C / 4,  0x09C % 4) == Unit || 
        wread_epd(unitEPD + 0x09E / 4,  0x09E % 4) == Unit || 
        wread_epd(unitEPD + 0x0A0 / 4,  0x0A0 % 4) == Unit
    ){
        return True;
    }
    return False;
}
function BuildResetEPD(unitEPD) {
    /*ToolTip
    Korean
    구조오프셋EPD;
    var unitEPD;
    의 생산 대기열을 초기화합니다.;
    Korean
    English
    English
    */
    unitEPD += 0x098 / 4;
    const oldcp = getcurpl();
    setcurpl(unitEPD);
    DoActions(list(
    SetDeaths(CurrentPlayer, SetTo, 0xE400E4, 0),
    SetMemory(0x6509B0, Add, 1),
    SetDeaths(CurrentPlayer, SetTo, 0xE400E4, 0),
    SetMemory(0x6509B0, Add, 1),
    SetDeathsX(CurrentPlayer, SetTo, 228, 0, 0xFFFF),
    SetMemory(0x6509B0, Add, 1),
    SetDeathsX(CurrentPlayer, SetTo, 0x20000, 0, 0xFF0000),
    ));
    setcurpl(oldcp);
}
function UnitClickCheck(ClickPlayer ,Index) {
    /*ToolTip
    Korean
    인덱스;
    var Index;
    + 1 을 선택한 플레이어;
    var ClickPlayer;
    을(를) 인식합니다.;
    Korean
    English
    English
    */
    if(
        Memory(0x6284E8 + ClickPlayer * 48, (10), 0x628298 - 0x150 * Index)
    ){
        return True;
    }
    return False;
}
function VultureSkinCreate() {
    EUDPlayerLoop()();
        if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
            if(
                ControlDirection == 0
            ){
                CenterView((6));
                CreateUnit(1, (84), (6), (13));
            }
            else{
                CenterView((8));
                CreateUnit(1, (84), (8), (13));
            }
            KillUnit((84), (13));
            Vulture[getcurpl()] = epdread_epd(EPD(0x628438));
            if(
                ControlDirection == 0
            ){
                if(
                    Skin_Select[getcurpl()] == 1
                ){
                    wwrite(0x665AC0 + 1696 + 244 * 2, 140);
                    // IGO_Sera
                    if(
                        IGO_Sera[getcurpl()] == 1
                    ){
                        bwrite(0x666778 + 14000 + 929 * 1, 16);
                        wwrite(0x665AC0 + 1696 + 244 * 2, 929);
                        dwwrite(0x666778 + 34000 + 141 * 4, 269);
                    }
                    // IGO_Sera
                    CreateUnit(1, (PVulture[getcurpl()]), (6), (13));
                    dwwrite(0x666778 + 34000 + 141 * 4, 275);
                }
                else{
                    if(
                        Skin_Select[getcurpl()] == 2
                    ){
                        wwrite(0x665AC0 + 1696 + 244 * 2, 243);
                        CreateUnit(1, (PVulture[getcurpl()]), (6), (13));
                    }
                    else{
                        if(
                            Skin_Select[getcurpl()] == 3
                        ){
                            wwrite(0x665AC0 + 1696 + 244 * 2, 38);
                            CreateUnit(1, (PVulture[getcurpl()]), (6), (13));
                        }
                        else{
                            if(
                                Skin_Select[getcurpl()] == 4
                            ){
                                wwrite(0x665AC0 + 1696 + 244 * 2, 256);
                                bwrite(0x666778 + 14000 + 256 * 1, 10);
                                dwwrite(0x666778 + 34000 + 256 * 4, 362);
                                dwwrite(0x666778 + 34000 + 940 * 4, 269);
                                CreateUnit(1, (PVulture[getcurpl()]), (6), (13));
                            }
                            else{
                                wwrite(0x665AC0 + 1696 + 244 * 2, 256);
                                bwrite(0x666778 + 14000 + 256 * 1, 0);
                                dwwrite(0x666778 + 34000 + 256 * 4, 86);
                                CreateUnit(1, (PVulture[getcurpl()]), (6), (13));
                            }
                        }
                    }
                }
            }
            else{
                if(
                    Skin_Select[getcurpl()] == 1
                ){
                    wwrite(0x665AC0 + 1696 + 244 * 2, 140);
                    // IGO_Sera
                    if(
                        IGO_Sera[getcurpl()] == 1
                    ){
                        bwrite(0x666778 + 14000 + 929 * 1, 16);
                        wwrite(0x665AC0 + 1696 + 244 * 2, 929);
                        dwwrite(0x666778 + 34000 + 141 * 4, 269);
                    }
                    // IGO_Sera
                    CreateUnit(1, (PVulture[getcurpl()]), (8), (13));
                    dwwrite(0x666778 + 34000 + 141 * 4, 275);
                }
                else{
                    if(
                        Skin_Select[getcurpl()] == 2
                    ){
                        wwrite(0x665AC0 + 1696 + 244 * 2, 243);
                        CreateUnit(1, (PVulture[getcurpl()]), (8), (13));
                    }
                    else{
                        if(
                            Skin_Select[getcurpl()] == 3
                        ){
                            wwrite(0x665AC0 + 1696 + 244 * 2, 38);
                            CreateUnit(1, (PVulture[getcurpl()]), (8), (13));
                        }
                        else{
                            if(
                                Skin_Select[getcurpl()] == 4
                            ){
                                wwrite(0x665AC0 + 1696 + 244 * 2, 256);
                                bwrite(0x666778 + 14000 + 256 * 1, 10);
                                dwwrite(0x666778 + 34000 + 256 * 4, 362);
                                dwwrite(0x666778 + 34000 + 940 * 4, 269);
                                CreateUnit(1, (PVulture[getcurpl()]), (8), (13));
                            }
                            else{
                                wwrite(0x665AC0 + 1696 + 244 * 2, 256);
                                bwrite(0x666778 + 14000 + 256 * 1, 0);
                                dwwrite(0x666778 + 34000 + 256 * 4, 86);
                                CreateUnit(1, (PVulture[getcurpl()]), (8), (13));
                            }
                        }
                    }
                }
            }
            if(
                Vulture_Booster[getcurpl()] == 1
            ){
                SetMemoryEPD(Vulture[getcurpl()] + 0x034 / 4, SetTo, 1575);
                wwrite_epd(Vulture[getcurpl()] + 0x048 / 4,  0x048 % 4, 46);
                bwrite_epd(Vulture[getcurpl()] + 0x022 / 4,  0x022 % 4, 60);
                if(
                    Memory(0x57F1B0, Exactly, (getcurpl()))
                ){
                    btnPtr, btnPos = EPD(0x5187EC) + 57, 5 * 5;
                    dwadd_epd(btnPtr, 0);
                    btnPos += epdread_epd(btnPtr);
                    oldCP = getcurpl();
                    DoActions(list(
                    SetMemory(0x6509B0, SetTo, btnPos),
                    SetDeaths(CurrentPlayer, SetTo, 24576007, 0),
                    SetMemory(0x6509B0, Add, 1),
                    SetDeaths(CurrentPlayer, SetTo, 4361824, 0),
                    SetMemory(0x6509B0, Add, 1),
                    SetDeaths(CurrentPlayer, SetTo, 4338864, 0),
                    SetMemory(0x6509B0, Add, 1),
                    SetDeaths(CurrentPlayer, SetTo, 327685, 0),
                    SetMemory(0x6509B0, Add, 1),
                    SetDeaths(CurrentPlayer, SetTo, 1396, 0),
                    SetMemory(0x6509B0, SetTo, oldCP),
                    ));
                }
            }
            else{
                SetMemoryEPD(Vulture[getcurpl()] + 0x034 / 4, SetTo, 1050);
                wwrite_epd(Vulture[getcurpl()] + 0x048 / 4,  0x048 % 4, 23);
                bwrite_epd(Vulture[getcurpl()] + 0x022 / 4,  0x022 % 4, 28);
                if(
                    Memory(0x57F1B0, Exactly, (getcurpl()))
                ){
                    btnPtr, btnPos = EPD(0x5187EC) + 57, 5 * 5;
                    dwadd_epd(btnPtr, 0);
                    btnPos += epdread_epd(btnPtr);
                    oldCP = getcurpl();
                    DoActions(list(
                    SetMemory(0x6509B0, SetTo, btnPos),
                    SetDeaths(CurrentPlayer, SetTo, 24510471, 0),
                    SetMemory(0x6509B0, Add, 1),
                    SetDeaths(CurrentPlayer, SetTo, 4361824, 0),
                    SetMemory(0x6509B0, Add, 1),
                    SetDeaths(CurrentPlayer, SetTo, 4338864, 0),
                    SetMemory(0x6509B0, Add, 1),
                    SetDeaths(CurrentPlayer, SetTo, 327685, 0),
                    SetMemory(0x6509B0, Add, 1),
                    SetDeaths(CurrentPlayer, SetTo, 1395, 0),
                    SetMemory(0x6509B0, SetTo, oldCP),
                    ));
                }
            }
            hotkeyUnitEPD(Vulture[getcurpl()],getcurpl(),1,0);
        }
    EUDEndPlayerLoop();
}
function EnemyCreate(Units ,Counts_1 ,Counts_2 ,Counts_3) {
    if(
        ControlDirection == 0
    ){
        CreateUnit(Counts_1, (Units), (2), (6));
        if(
            Counts_2 >= 1
        ){
            CreateUnit(Counts_2, (Units), (8), (6));
        }
        CreateUnit(Counts_3, (Units), (11), (6));
        Order((230), (6), (2), (1), (1));
        Order((230), (6), (8), (1), (6));
        Order((230), (6), (11), (1), (9));
    }
    else{
        CreateUnit(Counts_1, (Units), (1), (6));
        if(
            Counts_2 >= 1
        ){
            CreateUnit(Counts_2, (Units), (6), (6));
        }
        CreateUnit(Counts_3, (Units), (9), (6));
        Order((230), (6), (1), (1), (2));
        Order((230), (6), (6), (1), (8));
        Order((230), (6), (9), (1), (11));
    }
}
function EnemyCreateOne(Units ,Counts) {
    if(
        ControlDirection == 0
    ){
        CreateUnit(Counts, (Units), (8), (6));
        Order((230), (6), (24), (1), (6));
    }
    else{
        CreateUnit(Counts, (Units), (6), (6));
        Order((230), (6), (24), (1), (8));
    }
}
function 방향_조정(Direction ,총알 ,유닛) {
    Unit_Direction = bread_epd(유닛 + 0x021 / 4,  0x021 % 4);
    if(
        Unit_Direction + Direction > 255 && 
        Unit_Direction + Direction < 510
    ){
        Unit_Direction -= 255;
        bwrite_epd(총알 + 0x021 / 4,  0x021 % 4, Unit_Direction + Direction);
        bwrite_epd(총알 + 0x023 / 4,  0x023 % 4, Unit_Direction + Direction);
    }
    else{
        if(
            255 + Unit_Direction + Direction <= 255
        ){
            Unit_Direction += 255;
            bwrite_epd(총알 + 0x021 / 4,  0x021 % 4, Unit_Direction + Direction);
            bwrite_epd(총알 + 0x023 / 4,  0x023 % 4, Unit_Direction + Direction);
        }
        else{
            bwrite_epd(총알 + 0x021 / 4,  0x021 % 4, Unit_Direction + Direction);
            bwrite_epd(총알 + 0x023 / 4,  0x023 % 4, Unit_Direction + Direction);
        }
    }
}
function 방향_조정_수동(Direction ,총알) {
    if(
        Direction > 255 && 
        Direction < 5000
    ){
        Direction -= 255;
        bwrite_epd(총알 + 0x021 / 4,  0x021 % 4, Direction);
        bwrite_epd(총알 + 0x023 / 4,  0x023 % 4, Direction);
    }
    else{
        if(
            255 + Direction <= 255
        ){
            Direction += 255;
            bwrite_epd(총알 + 0x021 / 4,  0x021 % 4, Direction);
            bwrite_epd(총알 + 0x023 / 4,  0x023 % 4, Direction);
        }
        else{
            bwrite_epd(총알 + 0x021 / 4,  0x021 % 4, Direction);
            bwrite_epd(총알 + 0x023 / 4,  0x023 % 4, Direction);
        }
    }
}
function SetLocationToUnitPos_epd(Location ,UnitEPD) {
    const UnitXY = dwread_epd(UnitEPD + 0x28/4);
    const UnitX, UnitY = dwbreak(UnitXY)[[0, 1]];
    SetMemoryEPD(EPD(0x58DC60) + Location * 5 + 0, (7), UnitX);
    SetMemoryEPD(EPD(0x58DC60) + Location * 5 + 1, (7), UnitY);
    SetMemoryEPD(EPD(0x58DC60) + Location * 5 + 2, (7), UnitX);
    SetMemoryEPD(EPD(0x58DC60) + Location * 5 + 3, (7), UnitY);
}
function SetLocation(Location ,X ,Y ,Width ,Height) {
    /*ToolTip
    Korean
    var Location;
    의 중심 좌표를;
    var X;
    ,;
    var Y;
    로 넓이를;
    var Width;
    ,;
    var Height;
    로 변경합니다.;
    Korean
    English
    English
    */
    SetMemory(0x58DC60 + Location * 20 + 4 * 0, SetTo, X - Width / 2);
    SetMemory(0x58DC60 + Location * 20 + 4 * 2, SetTo, X + Width / 2);
    SetMemory(0x58DC60 + Location * 20 + 4 * 1, SetTo, Y - Height / 2);
    SetMemory(0x58DC60 + Location * 20 + 4 * 3, SetTo, Y + Height / 2);
}
function 팔레트(Plt_Player ,Plt_Image ,Plt_Location) {
    wwrite(0x665AC0 + 1696 + 380 * 2, Plt_Image);
    CreateUnit(1, (33), (Plt_Location + 1), (Plt_Player));
    KillUnit((33), (Plt_Player));
}
function 원모양이펙트(Loc_ ,atLoc_ ,TargetPlayer ,TargetUnit ,R ,Effect) {
    /*ToolTip
    Korean
    var Loc_;
    을;
    var atLoc_;
    에 있는;
    var TargetPlayer;
    의;
    var TargetUnit;
    으로 옮기고,;
    var R;
    만큼의 반지름으로;
    var Effect;
    이미지를 출력합니다. (32단위 추천);
    Korean
    English
    English
    */
    // 오른위
    for(var i = 1; i<R / 32 + 1; i++){
        MoveLocation((Loc_ + 1), (TargetUnit), (TargetPlayer), (atLoc_ + 1));
        EUDMoveLocation(Loc_,32 * i,sqrt(R*R - (32 * i)*(32 * i)));
        팔레트(6,Effect,Loc_);
    }
    for(var i = 1; i<R / 32; i++){
        MoveLocation((Loc_ + 1), (TargetUnit), (TargetPlayer), (atLoc_ + 1));
        EUDMoveLocation(Loc_,sqrt(R*R - (32 * i)*(32 * i)),32 * i);
        팔레트(6,Effect,Loc_);
    }
    // 오른위
    // 오른아래
    for(var i = 1; i<R / 32; i++){
        MoveLocation((Loc_ + 1), (TargetUnit), (TargetPlayer), (atLoc_ + 1));
        EUDMoveLocation(Loc_,32 * i,-sqrt(R*R - (32 * i)*(32 * i)));
        팔레트(6,Effect,Loc_);
    }
    for(var i = 1; i<R / 32 + 1; i++){
        MoveLocation((Loc_ + 1), (TargetUnit), (TargetPlayer), (atLoc_ + 1));
        EUDMoveLocation(Loc_,sqrt(R*R - (32 * i)*(32 * i)),-32 * i);
        팔레트(6,Effect,Loc_);
    }
    // 오른아래
    // 왼아래
    for(var i = 1; i<R / 32 + 1; i++){
        MoveLocation((Loc_ + 1), (TargetUnit), (TargetPlayer), (atLoc_ + 1));
        EUDMoveLocation(Loc_,-32 * i,-sqrt(R*R - (32 * i)*(32 * i)));
        팔레트(6,Effect,Loc_);
    }
    for(var i = 1; i<R / 32; i++){
        MoveLocation((Loc_ + 1), (TargetUnit), (TargetPlayer), (atLoc_ + 1));
        EUDMoveLocation(Loc_,-sqrt(R*R - (32 * i)*(32 * i)),-32 * i);
        팔레트(6,Effect,Loc_);
    }
    // 왼아래
    // 왼쪽위
    for(var i = 1; i<R / 32; i++){
        MoveLocation((Loc_ + 1), (TargetUnit), (TargetPlayer), (atLoc_ + 1));
        EUDMoveLocation(Loc_,-32 * i,sqrt(R*R - (32 * i)*(32 * i)));
        팔레트(6,Effect,Loc_);
    }
    for(var i = 1; i<R / 32 + 1; i++){
        MoveLocation((Loc_ + 1), (TargetUnit), (TargetPlayer), (atLoc_ + 1));
        EUDMoveLocation(Loc_,-sqrt(R*R - (32 * i)*(32 * i)),32 * i);
        팔레트(6,Effect,Loc_);
    }
    // 왼쪽위
}
function 원모양이펙트데미지(Loc_ ,atLoc_ ,TargetPlayer ,TargetUnit ,R ,Effect ,EDamage) {
    /*ToolTip
    Korean
    var Loc_;
    을;
    var atLoc_;
    에 있는;
    var TargetPlayer;
    의;
    var TargetUnit;
    으로 옮기고,;
    var R;
    만큼의 반지름으로;
    var Effect;
    이미지를 출력하고 (32단위);
    var EDamage;
    만큼 데미지를 줍니다.;
    Korean
    English
    English
    */
    // 오른위
    for(var i = 1; i<R / 32 + 1; i++){
        MoveLocation((Loc_ + 1), (TargetUnit), (TargetPlayer), (atLoc_ + 1));
        EUDMoveLocation(Loc_,32 * i,sqrt(R*R - (32 * i)*(32 * i)));
        팔레트(6,Effect,Loc_);
        // 플레이어 피격
        EUDPlayerLoop()();
            if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                if(
                    Bring((13), (10), 1, (19), (Loc_ + 1)) && 
                    Deaths((13), (10), 0, (197)) && 
                    CircleAleadyHit[getcurpl()] == 0
                ){
                    SetDeaths((13), (8), EDamage, (197));
                    CreateUnitWithProperties(1, (94), (PLoc[getcurpl()]), (6), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                    KillUnit((94), (6));
                    CircleAleadyHit[getcurpl()] = 1;
                }
            }
        EUDEndPlayerLoop();
        // 플레이어 피격
    }
    for(var i = 1; i<R / 32; i++){
        MoveLocation((Loc_ + 1), (TargetUnit), (TargetPlayer), (atLoc_ + 1));
        EUDMoveLocation(Loc_,sqrt(R*R - (32 * i)*(32 * i)),32 * i);
        팔레트(6,Effect,Loc_);
        // 플레이어 피격
        EUDPlayerLoop()();
            if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                if(
                    Bring((13), (10), 1, (19), (Loc_ + 1)) && 
                    Deaths((13), (10), 0, (197)) && 
                    CircleAleadyHit[getcurpl()] == 0
                ){
                    SetDeaths((13), (8), EDamage, (197));
                    CreateUnitWithProperties(1, (94), (PLoc[getcurpl()]), (6), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                    KillUnit((94), (6));
                    CircleAleadyHit[getcurpl()] = 1;
                }
            }
        EUDEndPlayerLoop();
        // 플레이어 피격
    }
    // 오른위
    // 오른아래
    for(var i = 1; i<R / 32; i++){
        MoveLocation((Loc_ + 1), (TargetUnit), (TargetPlayer), (atLoc_ + 1));
        EUDMoveLocation(Loc_,32 * i,-sqrt(R*R - (32 * i)*(32 * i)));
        팔레트(6,Effect,Loc_);
        // 플레이어 피격
        EUDPlayerLoop()();
            if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                if(
                    Bring((13), (10), 1, (19), (Loc_ + 1)) && 
                    Deaths((13), (10), 0, (197)) && 
                    CircleAleadyHit[getcurpl()] == 0
                ){
                    SetDeaths((13), (8), EDamage, (197));
                    CreateUnitWithProperties(1, (94), (PLoc[getcurpl()]), (6), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                    KillUnit((94), (6));
                    CircleAleadyHit[getcurpl()] = 1;
                }
            }
        EUDEndPlayerLoop();
        // 플레이어 피격
    }
    for(var i = 1; i<R / 32 + 1; i++){
        MoveLocation((Loc_ + 1), (TargetUnit), (TargetPlayer), (atLoc_ + 1));
        EUDMoveLocation(Loc_,sqrt(R*R - (32 * i)*(32 * i)),-32 * i);
        팔레트(6,Effect,Loc_);
        // 플레이어 피격
        EUDPlayerLoop()();
            if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                if(
                    Bring((13), (10), 1, (19), (Loc_ + 1)) && 
                    Deaths((13), (10), 0, (197)) && 
                    CircleAleadyHit[getcurpl()] == 0
                ){
                    SetDeaths((13), (8), EDamage, (197));
                    CreateUnitWithProperties(1, (94), (PLoc[getcurpl()]), (6), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                    KillUnit((94), (6));
                    CircleAleadyHit[getcurpl()] = 1;
                }
            }
        EUDEndPlayerLoop();
        // 플레이어 피격
    }
    // 오른아래
    // 왼아래
    for(var i = 1; i<R / 32 + 1; i++){
        MoveLocation((Loc_ + 1), (TargetUnit), (TargetPlayer), (atLoc_ + 1));
        EUDMoveLocation(Loc_,-32 * i,-sqrt(R*R - (32 * i)*(32 * i)));
        팔레트(6,Effect,Loc_);
        // 플레이어 피격
        EUDPlayerLoop()();
            if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                if(
                    Bring((13), (10), 1, (19), (Loc_ + 1)) && 
                    Deaths((13), (10), 0, (197)) && 
                    CircleAleadyHit[getcurpl()] == 0
                ){
                    SetDeaths((13), (8), EDamage, (197));
                    CreateUnitWithProperties(1, (94), (PLoc[getcurpl()]), (6), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                    KillUnit((94), (6));
                    CircleAleadyHit[getcurpl()] = 1;
                }
            }
        EUDEndPlayerLoop();
        // 플레이어 피격
    }
    for(var i = 1; i<R / 32; i++){
        MoveLocation((Loc_ + 1), (TargetUnit), (TargetPlayer), (atLoc_ + 1));
        EUDMoveLocation(Loc_,-sqrt(R*R - (32 * i)*(32 * i)),-32 * i);
        팔레트(6,Effect,Loc_);
        // 플레이어 피격
        EUDPlayerLoop()();
            if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                if(
                    Bring((13), (10), 1, (19), (Loc_ + 1)) && 
                    Deaths((13), (10), 0, (197)) && 
                    CircleAleadyHit[getcurpl()] == 0
                ){
                    SetDeaths((13), (8), EDamage, (197));
                    CreateUnitWithProperties(1, (94), (PLoc[getcurpl()]), (6), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                    KillUnit((94), (6));
                    CircleAleadyHit[getcurpl()] = 1;
                }
            }
        EUDEndPlayerLoop();
        // 플레이어 피격
    }
    // 왼아래
    // 왼쪽위
    for(var i = 1; i<R / 32; i++){
        MoveLocation((Loc_ + 1), (TargetUnit), (TargetPlayer), (atLoc_ + 1));
        EUDMoveLocation(Loc_,-32 * i,sqrt(R*R - (32 * i)*(32 * i)));
        팔레트(6,Effect,Loc_);
        // 플레이어 피격
        EUDPlayerLoop()();
            if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                if(
                    Bring((13), (10), 1, (19), (Loc_ + 1)) && 
                    Deaths((13), (10), 0, (197)) && 
                    CircleAleadyHit[getcurpl()] == 0
                ){
                    SetDeaths((13), (8), EDamage, (197));
                    CreateUnitWithProperties(1, (94), (PLoc[getcurpl()]), (6), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                    KillUnit((94), (6));
                    CircleAleadyHit[getcurpl()] = 1;
                }
            }
        EUDEndPlayerLoop();
        // 플레이어 피격
    }
    for(var i = 1; i<R / 32 + 1; i++){
        MoveLocation((Loc_ + 1), (TargetUnit), (TargetPlayer), (atLoc_ + 1));
        EUDMoveLocation(Loc_,-sqrt(R*R - (32 * i)*(32 * i)),32 * i);
        팔레트(6,Effect,Loc_);
        // 플레이어 피격
        EUDPlayerLoop()();
            if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                if(
                    Bring((13), (10), 1, (19), (Loc_ + 1)) && 
                    Deaths((13), (10), 0, (197)) && 
                    CircleAleadyHit[getcurpl()] == 0
                ){
                    SetDeaths((13), (8), EDamage, (197));
                    CreateUnitWithProperties(1, (94), (PLoc[getcurpl()]), (6), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                    KillUnit((94), (6));
                    CircleAleadyHit[getcurpl()] = 1;
                }
            }
        EUDEndPlayerLoop();
        // 플레이어 피격
    }
    // 왼쪽위
}
function 원모양이펙트데미지2(Loc_ ,targetpositionX ,targetpositionY ,Loc_Size ,R ,Effect ,EDamage) {
    /*ToolTip
    Korean
    var Loc_;
    을;
    var targetpositionX;
    ,;
    var targetpositionY;
    로 옮기고, 넓이를;
    var Loc_Size;
    로 바꾼 뒤;
    var R;
    만큼의 반지름으로;
    var Effect;
    이미지를 출력하고 (32단위);
    var EDamage;
    만큼 데미지를 줍니다.;
    Korean
    English
    English
    */
    // 오른위
    for(var i = 1; i<R / 32 + 1; i++){
        SetLocation(Loc_,targetpositionX,targetpositionY,Loc_Size,Loc_Size);
        EUDMoveLocation(Loc_,32 * i,sqrt(R*R - (32 * i)*(32 * i)));
        팔레트(6,Effect,Loc_);
        // 플레이어 피격
        EUDPlayerLoop()();
            if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                if(
                    Bring((13), (10), 1, (19), (Loc_ + 1)) && 
                    Deaths((13), (10), 0, (197)) && 
                    CircleAleadyHit[getcurpl()] == 0
                ){
                    SetDeaths((13), (8), EDamage, (197));
                    CreateUnitWithProperties(1, (94), (PLoc[getcurpl()]), (6), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                    KillUnit((94), (6));
                    CircleAleadyHit[getcurpl()] = 1;
                }
            }
        EUDEndPlayerLoop();
        // 플레이어 피격
    }
    for(var i = 1; i<R / 32; i++){
        SetLocation(Loc_,targetpositionX,targetpositionY,Loc_Size,Loc_Size);
        EUDMoveLocation(Loc_,sqrt(R*R - (32 * i)*(32 * i)),32 * i);
        팔레트(6,Effect,Loc_);
        // 플레이어 피격
        EUDPlayerLoop()();
            if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                if(
                    Bring((13), (10), 1, (19), (Loc_ + 1)) && 
                    Deaths((13), (10), 0, (197)) && 
                    CircleAleadyHit[getcurpl()] == 0
                ){
                    SetDeaths((13), (8), EDamage, (197));
                    CreateUnitWithProperties(1, (94), (PLoc[getcurpl()]), (6), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                    KillUnit((94), (6));
                    CircleAleadyHit[getcurpl()] = 1;
                }
            }
        EUDEndPlayerLoop();
        // 플레이어 피격
    }
    // 오른위
    // 오른아래
    for(var i = 1; i<R / 32; i++){
        SetLocation(Loc_,targetpositionX,targetpositionY,Loc_Size,Loc_Size);
        EUDMoveLocation(Loc_,32 * i,-sqrt(R*R - (32 * i)*(32 * i)));
        팔레트(6,Effect,Loc_);
        // 플레이어 피격
        EUDPlayerLoop()();
            if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                if(
                    Bring((13), (10), 1, (19), (Loc_ + 1)) && 
                    Deaths((13), (10), 0, (197)) && 
                    CircleAleadyHit[getcurpl()] == 0
                ){
                    SetDeaths((13), (8), EDamage, (197));
                    CreateUnitWithProperties(1, (94), (PLoc[getcurpl()]), (6), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                    KillUnit((94), (6));
                    CircleAleadyHit[getcurpl()] = 1;
                }
            }
        EUDEndPlayerLoop();
        // 플레이어 피격
    }
    for(var i = 1; i<R / 32 + 1; i++){
        SetLocation(Loc_,targetpositionX,targetpositionY,Loc_Size,Loc_Size);
        EUDMoveLocation(Loc_,sqrt(R*R - (32 * i)*(32 * i)),-32 * i);
        팔레트(6,Effect,Loc_);
        // 플레이어 피격
        EUDPlayerLoop()();
            if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                if(
                    Bring((13), (10), 1, (19), (Loc_ + 1)) && 
                    Deaths((13), (10), 0, (197)) && 
                    CircleAleadyHit[getcurpl()] == 0
                ){
                    SetDeaths((13), (8), EDamage, (197));
                    CreateUnitWithProperties(1, (94), (PLoc[getcurpl()]), (6), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                    KillUnit((94), (6));
                    CircleAleadyHit[getcurpl()] = 1;
                }
            }
        EUDEndPlayerLoop();
        // 플레이어 피격
    }
    // 오른아래
    // 왼아래
    for(var i = 1; i<R / 32 + 1; i++){
        SetLocation(Loc_,targetpositionX,targetpositionY,Loc_Size,Loc_Size);
        EUDMoveLocation(Loc_,-32 * i,-sqrt(R*R - (32 * i)*(32 * i)));
        팔레트(6,Effect,Loc_);
        // 플레이어 피격
        EUDPlayerLoop()();
            if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                if(
                    Bring((13), (10), 1, (19), (Loc_ + 1)) && 
                    Deaths((13), (10), 0, (197)) && 
                    CircleAleadyHit[getcurpl()] == 0
                ){
                    SetDeaths((13), (8), EDamage, (197));
                    CreateUnitWithProperties(1, (94), (PLoc[getcurpl()]), (6), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                    KillUnit((94), (6));
                    CircleAleadyHit[getcurpl()] = 1;
                }
            }
        EUDEndPlayerLoop();
        // 플레이어 피격
    }
    for(var i = 1; i<R / 32; i++){
        SetLocation(Loc_,targetpositionX,targetpositionY,Loc_Size,Loc_Size);
        EUDMoveLocation(Loc_,-sqrt(R*R - (32 * i)*(32 * i)),-32 * i);
        팔레트(6,Effect,Loc_);
        // 플레이어 피격
        EUDPlayerLoop()();
            if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                if(
                    Bring((13), (10), 1, (19), (Loc_ + 1)) && 
                    Deaths((13), (10), 0, (197)) && 
                    CircleAleadyHit[getcurpl()] == 0
                ){
                    SetDeaths((13), (8), EDamage, (197));
                    CreateUnitWithProperties(1, (94), (PLoc[getcurpl()]), (6), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                    KillUnit((94), (6));
                    CircleAleadyHit[getcurpl()] = 1;
                }
            }
        EUDEndPlayerLoop();
        // 플레이어 피격
    }
    // 왼아래
    // 왼쪽위
    for(var i = 1; i<R / 32; i++){
        SetLocation(Loc_,targetpositionX,targetpositionY,Loc_Size,Loc_Size);
        EUDMoveLocation(Loc_,-32 * i,sqrt(R*R - (32 * i)*(32 * i)));
        팔레트(6,Effect,Loc_);
        // 플레이어 피격
        EUDPlayerLoop()();
            if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                if(
                    Bring((13), (10), 1, (19), (Loc_ + 1)) && 
                    Deaths((13), (10), 0, (197)) && 
                    CircleAleadyHit[getcurpl()] == 0
                ){
                    SetDeaths((13), (8), EDamage, (197));
                    CreateUnitWithProperties(1, (94), (PLoc[getcurpl()]), (6), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                    KillUnit((94), (6));
                    CircleAleadyHit[getcurpl()] = 1;
                }
            }
        EUDEndPlayerLoop();
        // 플레이어 피격
    }
    for(var i = 1; i<R / 32 + 1; i++){
        SetLocation(Loc_,targetpositionX,targetpositionY,Loc_Size,Loc_Size);
        EUDMoveLocation(Loc_,-sqrt(R*R - (32 * i)*(32 * i)),32 * i);
        팔레트(6,Effect,Loc_);
        // 플레이어 피격
        EUDPlayerLoop()();
            if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                if(
                    Bring((13), (10), 1, (19), (Loc_ + 1)) && 
                    Deaths((13), (10), 0, (197)) && 
                    CircleAleadyHit[getcurpl()] == 0
                ){
                    SetDeaths((13), (8), EDamage, (197));
                    CreateUnitWithProperties(1, (94), (PLoc[getcurpl()]), (6), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                    KillUnit((94), (6));
                    CircleAleadyHit[getcurpl()] = 1;
                }
            }
        EUDEndPlayerLoop();
        // 플레이어 피격
    }
    // 왼쪽위
}
function 원모양이펙트보스(Loc_ ,atLoc_ ,TargetPlayer ,TargetUnit ,R ,Effect) {
    /*ToolTip
    Korean
    var Loc_;
    을;
    var atLoc_;
    에 있는;
    var TargetPlayer;
    의;
    var TargetUnit;
    으로 옮기고,;
    var R;
    만큼의 반지름으로;
    var Effect;
    이미지를 출력합니다. (32단위 추천);
    Korean
    English
    English
    */
    RandomNum = dwrand() % (1 + 1);
    var RandomPosition = 0;
    // 오른위
    for(var i = 1; i<R / 32 + 1; i++){
        MoveLocation((Loc_ + 1), (TargetUnit), (TargetPlayer), (atLoc_ + 1));
        EUDMoveLocation(Loc_,32 * i,sqrt(R*R - (32 * i)*(32 * i)));
        팔레트(6,Effect,Loc_);
        // 유닛 생성
        if(
            RandomNum == 0
        ){
            RandomPosition = dwrand() % (R / 32 + 1);
            if(
                i == RandomPosition
            ){
                CreateUnitWithProperties(1, (195), (Loc_ + 1), (6), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                Order((195), (6), (64), (0), (14));
            }
        }
        // 유닛 생성
    }
    for(var i = 1; i<R / 32; i++){
        MoveLocation((Loc_ + 1), (TargetUnit), (TargetPlayer), (atLoc_ + 1));
        EUDMoveLocation(Loc_,sqrt(R*R - (32 * i)*(32 * i)),32 * i);
        팔레트(6,Effect,Loc_);
        // 유닛 생성
        if(
            RandomNum == 1
        ){
            RandomPosition = dwrand() % (R / 32 + 1);
            if(
                i == RandomPosition
            ){
                CreateUnitWithProperties(1, (195), (Loc_ + 1), (6), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                Order((195), (6), (64), (0), (14));
            }
        }
        // 유닛 생성
    }
    // 오른위
    // 오른아래
    for(var i = 1; i<R / 32; i++){
        MoveLocation((Loc_ + 1), (TargetUnit), (TargetPlayer), (atLoc_ + 1));
        EUDMoveLocation(Loc_,32 * i,-sqrt(R*R - (32 * i)*(32 * i)));
        팔레트(6,Effect,Loc_);
        // 유닛 생성
        if(
            RandomNum == 0
        ){
            RandomPosition = dwrand() % (R / 32 + 1);
            if(
                i == RandomPosition
            ){
                CreateUnitWithProperties(1, (195), (Loc_ + 1), (6), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                Order((195), (6), (64), (0), (14));
            }
        }
        // 유닛 생성
    }
    for(var i = 1; i<R / 32 + 1; i++){
        MoveLocation((Loc_ + 1), (TargetUnit), (TargetPlayer), (atLoc_ + 1));
        EUDMoveLocation(Loc_,sqrt(R*R - (32 * i)*(32 * i)),-32 * i);
        팔레트(6,Effect,Loc_);
        // 유닛 생성
        if(
            RandomNum == 1
        ){
            RandomPosition = dwrand() % (R / 32 + 1);
            if(
                i == RandomPosition
            ){
                CreateUnitWithProperties(1, (195), (Loc_ + 1), (6), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                Order((195), (6), (64), (0), (14));
            }
        }
        // 유닛 생성
    }
    // 오른아래
    // 왼아래
    for(var i = 1; i<R / 32 + 1; i++){
        MoveLocation((Loc_ + 1), (TargetUnit), (TargetPlayer), (atLoc_ + 1));
        EUDMoveLocation(Loc_,-32 * i,-sqrt(R*R - (32 * i)*(32 * i)));
        팔레트(6,Effect,Loc_);
        // 유닛 생성
        if(
            RandomNum == 0
        ){
            RandomPosition = dwrand() % (R / 32 + 1);
            if(
                i == RandomPosition
            ){
                CreateUnitWithProperties(1, (195), (Loc_ + 1), (6), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                Order((195), (6), (64), (0), (14));
            }
        }
        // 유닛 생성
    }
    for(var i = 1; i<R / 32; i++){
        MoveLocation((Loc_ + 1), (TargetUnit), (TargetPlayer), (atLoc_ + 1));
        EUDMoveLocation(Loc_,-sqrt(R*R - (32 * i)*(32 * i)),-32 * i);
        팔레트(6,Effect,Loc_);
        // 유닛 생성
        if(
            RandomNum == 1
        ){
            RandomPosition = dwrand() % (R / 32 + 1);
            if(
                i == RandomPosition
            ){
                CreateUnitWithProperties(1, (195), (Loc_ + 1), (6), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                Order((195), (6), (64), (0), (14));
            }
        }
        // 유닛 생성
    }
    // 왼아래
    // 왼쪽위
    for(var i = 1; i<R / 32; i++){
        MoveLocation((Loc_ + 1), (TargetUnit), (TargetPlayer), (atLoc_ + 1));
        EUDMoveLocation(Loc_,-32 * i,sqrt(R*R - (32 * i)*(32 * i)));
        팔레트(6,Effect,Loc_);
        // 유닛 생성
        if(
            RandomNum == 0
        ){
            RandomPosition = dwrand() % (R / 32 + 1);
            if(
                i == RandomPosition
            ){
                CreateUnitWithProperties(1, (195), (Loc_ + 1), (6), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                Order((195), (6), (64), (0), (14));
            }
        }
        // 유닛 생성
    }
    for(var i = 1; i<R / 32 + 1; i++){
        MoveLocation((Loc_ + 1), (TargetUnit), (TargetPlayer), (atLoc_ + 1));
        EUDMoveLocation(Loc_,-sqrt(R*R - (32 * i)*(32 * i)),32 * i);
        팔레트(6,Effect,Loc_);
        // 유닛 생성
        if(
            RandomNum == 1
        ){
            RandomPosition = dwrand() % (R / 32 + 1);
            if(
                i == RandomPosition
            ){
                CreateUnitWithProperties(1, (195), (Loc_ + 1), (6), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                Order((195), (6), (64), (0), (14));
            }
        }
        // 유닛 생성
    }
    // 왼쪽위
}
function perSpeedUp(perNum) {
    var speed_;
    speed_ = dwread(0x6C9858 + 1696 + 70 * 4);
    speed_ = speed_ * (100 + perNum) / 100;
    dwwrite(0x6C9858 + 1696 + 70 * 4, speed_);
}
function perAttSpeedUp(perNum) {
    var attackspeed_;
    attackspeed_ = bread(0x6564E0 + 2776 + 19 * 1);
    attackspeed_ = attackspeed_ * (100 + perNum) / 100;
    bwrite(0x6564E0 + 2776 + 19 * 1, attackspeed_);
}
function perDamageUp(perNum) {
    var damage_;
    damage_ = wread(0x6564E0 + 2512 + 19 * 2);
    damage_ = damage_ * (100 + perNum) / 100;
    wwrite(0x6564E0 + 2512 + 19 * 2, damage_);
}
function perHealthUp(perNum) {
    var health_;
    health_ = dwread(0x65FD00 + 9808 + 12 * 4);
    health_ = health_ * (100 + perNum) / 100;
    dwwrite(0x65FD00 + 9808 + 12 * 4, health_);
}
function perShieldUp(perNum) {
    var shield_;
    shield_ = wread(0x65FD00 + 4352 + 12 * 2);
    shield_ = shield_ * (100 + perNum) / 100;
    wwrite(0x65FD00 + 4352 + 12 * 2, shield_);
}
function SetBossStats() {
    // 초기화
    dwwrite(0x65FD00 + 9808 + 12 * 4, 400 * 256);
    bwrite(0x65FD00 + 456 + 12 * 1, 0);
    bwrite(0x65FD00 + 19120 + 12 * 1, 0);
    wwrite(0x65FD00 + 4352 + 12 * 2, 0);
    bwrite(0x65FD00 + 13392 + 12 * 1, 16);
    wwrite(0x65FD00 + 12936 + 12 * 2, 11);
    wwrite(0x6C9858 + 2752 + 70 * 2, 225);
    SetMemory(0x661828, (7), 1900581);
    SetMemory(0x66182C, (7), 1900581);
    dwwrite(0x6564E0 + 1992 + 19 * 4, 148);
    wwrite(0x6564E0 + 2512 + 19 * 2, 20);
    dwwrite(0x6564E0 + 3984 + 19 * 4, 128);
    bwrite(0x6564E0 + 5168 + 19 * 1, 75);
    bwrite(0x6564E0 + 400 + 19 * 1, 0);
    bwrite(0x6564E0 + 1200 + 19 * 1, 25);
    bwrite(0x6564E0 + 2776 + 19 * 1, 17);
    wwrite(0x6564E0 + 672 + 19 * 2, 333);
    dwwrite(0x6C9858 + 1696 + 70 * 4, 325);
    wwrite(0x6C9858 + 1056 + 70 * 2, 9);
    dwwrite(0x6C9858 + 216 + 70 * 4, 2850);
    bwrite(0x6C9858 + 1480 + 70 * 1, 27);
    GraphicChange = 0;
    건전지 = 0;
    체력회복불가 = 0;
    HealthRegen = 0;
    for(var i=0;i>=0;i++){
        if (WeaponList[i] == 9999) break;
        wwrite(0x6564E0 + 2512 + WeaponList[i] * 2, 10);
        bwrite(0x6564E0 + 3448 + WeaponList[i] * 1, 3);
        bwrite(0x6564E0 + 5032 + WeaponList[i] * 1, 0);
        bwrite(0x6564E0 + 0 + WeaponList[i] * 1, 1);
    }
    EUDPlayerLoop()();
        if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
            dwwrite(0x65FD00 + 9808 + PVulture[getcurpl()] * 4, 256 * 100);
            SetDeaths((18), (7), 0, (PVulture[getcurpl()]));
        }
    EUDEndPlayerLoop();
    // 초기화
    // 합연산
    for(var i=0; i<Roulette_Count; i++){
        // 1~60
        // 1. 발톱
        if(
            RandomOption[i] == 1
        ){
            wwrite(0x6564E0 + 2512 + 19 * 2, wread(0x6564E0 + 2512 + 19 * 2) + 5);
        }
        // 1. 발톱
        // 2. 소형 갑피
        if(
            RandomOption[i] == 2
        ){
            dwwrite(0x65FD00 + 9808 + 12 * 4, dwread(0x65FD00 + 9808 + 12 * 4) + 75 * 256);
        }
        // 2. 소형 갑피
        // 4. 맷집
        if(
            RandomOption[i] == 4
        ){
            dwwrite(0x65FD00 + 9808 + 12 * 4, dwread(0x65FD00 + 9808 + 12 * 4) + 100 * 256);
        }
        // 4. 맷집
        // 5. 갑옷
        if(
            RandomOption[i] == 5
        ){
            bwrite(0x65FD00 + 456 + 12 * 1, bread(0x65FD00 + 456 + 12 * 1) + 1);
        }
        // 5. 갑옷
        // 6. 신경쇠약
        if(
            RandomOption[i] == 6
        ){
            dwwrite(0x65FD00 + 9808 + 12 * 4, dwread(0x65FD00 + 9808 + 12 * 4) + -70 * 256);
            wwrite(0x6564E0 + 2512 + 19 * 2, wread(0x6564E0 + 2512 + 19 * 2) + 7);
        }
        // 6. 신경쇠약
        // 7. 공격적
        if(
            RandomOption[i] == 7
        ){
            wwrite(0x6564E0 + 2512 + 19 * 2, wread(0x6564E0 + 2512 + 19 * 2) + 7);
            dwwrite(0x6564E0 + 3984 + 19 * 4, dwread(0x6564E0 + 3984 + 19 * 4) + 4);
        }
        // 7. 공격적
        // 8. 포악함
        if(
            RandomOption[i] == 8
        ){
            wwrite(0x6564E0 + 2512 + 19 * 2, wread(0x6564E0 + 2512 + 19 * 2) + 15);
        }
        // 8. 포악함
        // 11. 정밀사격
        if(
            RandomOption[i] == 11
        ){
            dwwrite(0x6564E0 + 3984 + 19 * 4, dwread(0x6564E0 + 3984 + 19 * 4) + 8);
        }
        // 11. 정밀사격
        // 13. 외골격
        if(
            RandomOption[i] == 13
        ){
            bwrite(0x65FD00 + 456 + 12 * 1, bread(0x65FD00 + 456 + 12 * 1) + 2);
        }
        // 13. 외골격
        // 14. 강인함
        if(
            RandomOption[i] == 14
        ){
            dwwrite(0x65FD00 + 9808 + 12 * 4, dwread(0x65FD00 + 9808 + 12 * 4) + 200 * 256);
        }
        // 14. 강인함
        // 16. 격분
        if(
            RandomOption[i] == 16
        ){
            wwrite(0x6564E0 + 2512 + 19 * 2, wread(0x6564E0 + 2512 + 19 * 2) + 35);
        }
        // 16. 격분
        // 18. 조준
        if(
            RandomOption[i] == 18
        ){
            dwwrite(0x6564E0 + 3984 + 19 * 4, dwread(0x6564E0 + 3984 + 19 * 4) + 6);
        }
        // 18. 조준
        // 21. 강철 갑판
        if(
            RandomOption[i] == 21
        ){
            bwrite(0x65FD00 + 456 + 12 * 1, bread(0x65FD00 + 456 + 12 * 1) + 3);
        }
        // 21. 강철 갑판
        // 22. 샷건
        if(
            RandomOption[i] == 22
        ){
            dwwrite(0x6564E0 + 3984 + 19 * 4, dwread(0x6564E0 + 3984 + 19 * 4) + -4);
            wwrite(0x6564E0 + 2512 + 19 * 2, wread(0x6564E0 + 2512 + 19 * 2) + 20);
        }
        // 22. 샷건
        // 24. 호크아이
        if(
            RandomOption[i] == 24
        ){
            dwwrite(0x6564E0 + 3984 + 19 * 4, dwread(0x6564E0 + 3984 + 19 * 4) + 8);
        }
        // 24. 호크아이
        // 25. Lv+1
        if(
            RandomOption[i] == 25
        ){
            wwrite(0x6564E0 + 2512 + 19 * 2, wread(0x6564E0 + 2512 + 19 * 2) + 2);
            dwwrite(0x65FD00 + 9808 + 12 * 4, dwread(0x65FD00 + 9808 + 12 * 4) + 25 * 256);
        }
        // 25. Lv+1
        // 26. Lv+2
        if(
            RandomOption[i] == 26
        ){
            wwrite(0x6564E0 + 2512 + 19 * 2, wread(0x6564E0 + 2512 + 19 * 2) + 5);
            dwwrite(0x65FD00 + 9808 + 12 * 4, dwread(0x65FD00 + 9808 + 12 * 4) + 50 * 256);
            bwrite(0x65FD00 + 456 + 12 * 1, bread(0x65FD00 + 456 + 12 * 1) + 1);
        }
        // 26. Lv+2
        // 27. Lv+3
        if(
            RandomOption[i] == 27
        ){
            wwrite(0x6564E0 + 2512 + 19 * 2, wread(0x6564E0 + 2512 + 19 * 2) + 12);
            dwwrite(0x65FD00 + 9808 + 12 * 4, dwread(0x65FD00 + 9808 + 12 * 4) + 100 * 256);
            bwrite(0x65FD00 + 456 + 12 * 1, bread(0x65FD00 + 456 + 12 * 1) + 1);
        }
        // 27. Lv+3
        // 35. 바바리안
        if(
            RandomOption[i] == 35
        ){
            wwrite(0x6564E0 + 2512 + 19 * 2, wread(0x6564E0 + 2512 + 19 * 2) + 70);
        }
        // 35. 바바리안
        // 38. 정비공
        if(
            RandomOption[i] == 38
        ){
            EUDPlayerLoop()();
                if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                    dwwrite(0x65FD00 + 9808 + PVulture[getcurpl()] * 4, dwread(0x65FD00 + 9808 + PVulture[getcurpl()] * 4) + 75 * 256);
                }
            EUDEndPlayerLoop();
        }
        // 38. 정비공
        // 41. 방탄복
        if(
            RandomOption[i] == 41
        ){
            bwrite(0x65FD00 + 19120 + 12 * 1, bread(0x65FD00 + 19120 + 12 * 1) + 1);
            wwrite(0x65FD00 + 4352 + 12 * 2, wread(0x65FD00 + 4352 + 12 * 2) + 300);
        }
        // 41. 방탄복
        // 45. 하이브리드
        if(
            RandomOption[i] == 45
        ){
            bwrite(0x65FD00 + 19120 + 12 * 1, bread(0x65FD00 + 19120 + 12 * 1) + 1);
            wwrite(0x65FD00 + 4352 + 12 * 2, wread(0x65FD00 + 4352 + 12 * 2) + 100);
            dwwrite(0x65FD00 + 9808 + 12 * 4, dwread(0x65FD00 + 9808 + 12 * 4) + 100 * 256);
        }
        // 45. 하이브리드
        // 50. 겁쟁이
        if(
            RandomOption[i] == 50
        ){
            bwrite(0x65FD00 + 19120 + 12 * 1, bread(0x65FD00 + 19120 + 12 * 1) + 1);
            wwrite(0x65FD00 + 4352 + 12 * 2, wread(0x65FD00 + 4352 + 12 * 2) + 150);
        }
        // 50. 겁쟁이
        // 54. 저격
        if(
            RandomOption[i] == 54
        ){
            dwwrite(0x6564E0 + 3984 + 19 * 4, dwread(0x6564E0 + 3984 + 19 * 4) + 6);
            wwrite(0x6564E0 + 2512 + 19 * 2, wread(0x6564E0 + 2512 + 19 * 2) + 15);
        }
        // 54. 저격
        // 55. 망원경
        if(
            RandomOption[i] == 55
        ){
            dwwrite(0x6564E0 + 3984 + 19 * 4, dwread(0x6564E0 + 3984 + 19 * 4) + 8);
        }
        // 55. 망원경
        // 58. 목검
        if(
            RandomOption[i] == 58
        ){
            wwrite(0x6564E0 + 2512 + 19 * 2, wread(0x6564E0 + 2512 + 19 * 2) + 7);
        }
        // 58. 목검
        // 59. 약골
        if(
            RandomOption[i] == 59
        ){
            dwwrite(0x65FD00 + 9808 + 12 * 4, dwread(0x65FD00 + 9808 + 12 * 4) + -40 * 256);
        }
        // 59. 약골
        // 1~60
        // 61~100
        // 61. 기마병
        if(
            RandomOption[i] == 61
        ){
            dwwrite(0x6564E0 + 3984 + 19 * 4, dwread(0x6564E0 + 3984 + 19 * 4) + 4);
        }
        // 61. 기마병
        // 69. Lv+4
        if(
            RandomOption[i] == 69
        ){
            wwrite(0x6564E0 + 2512 + 19 * 2, wread(0x6564E0 + 2512 + 19 * 2) + 25);
            dwwrite(0x65FD00 + 9808 + 12 * 4, dwread(0x65FD00 + 9808 + 12 * 4) + 150 * 256);
            bwrite(0x65FD00 + 456 + 12 * 1, bread(0x65FD00 + 456 + 12 * 1) + 2);
        }
        // 69. Lv+4
        // 70. 물주먹
        if(
            RandomOption[i] == 70
        ){
            wwrite(0x6564E0 + 2512 + 19 * 2, wread(0x6564E0 + 2512 + 19 * 2) + -5);
        }
        // 70. 물주먹
        // 79. 가시
        if(
            RandomOption[i] == 79
        ){
            wwrite(0x6564E0 + 2512 + 19 * 2, wread(0x6564E0 + 2512 + 19 * 2) + 15);
        }
        // 79. 가시
        // 61~100
    }
    // 합연산
    // 곱연산
    for(var i=0; i<Roulette_Count; i++){
        // 3. 날렵함
        if(
            RandomOption[i] == 3
        ){
            perSpeedUp(15);
            wwrite(0x6C9858 + 1056 + 70 * 2, wread(0x6C9858 + 1056 + 70 * 2) + 2);
        }
        // 3. 날렵함
        // 9. 날개
        if(
            RandomOption[i] == 9
        ){
            perSpeedUp(40);
            wwrite(0x6C9858 + 1056 + 70 * 2, wread(0x6C9858 + 1056 + 70 * 2) + 3);
        }
        // 9. 날개
        // 10. 굶주림
        if(
            RandomOption[i] == 10
        ){
            perSpeedUp(10);
            perDamageUp(10);
        }
        // 10. 굶주림
        // 11. 정밀사격
        if(
            RandomOption[i] == 11
        ){
            perSpeedUp(-20);
            wwrite(0x6C9858 + 1056 + 70 * 2, wread(0x6C9858 + 1056 + 70 * 2) + -2);
        }
        // 11. 정밀사격
        // 12. 훈련
        if(
            RandomOption[i] == 12
        ){
            perDamageUp(25);
        }
        // 12. 훈련
        // 13. 외골격
        if(
            RandomOption[i] == 13
        ){
            perHealthUp(-20);
        }
        // 13. 외골격
        // 17. 터보
        if(
            RandomOption[i] == 17
        ){
            perSpeedUp(70);
            wwrite(0x6C9858 + 1056 + 70 * 2, wread(0x6C9858 + 1056 + 70 * 2) + 3);
        }
        // 17. 터보
        // 20. 마라토너
        if(
            RandomOption[i] == 20
        ){
            perSpeedUp(30);
            wwrite(0x6C9858 + 1056 + 70 * 2, wread(0x6C9858 + 1056 + 70 * 2) + 2);
            perHealthUp(30);
        }
        // 20. 마라토너
        // 25. Lv+1
        if(
            RandomOption[i] == 25
        ){
            perSpeedUp(10);
        }
        // 25. Lv+1
        // 26. Lv+2
        if(
            RandomOption[i] == 26
        ){
            perSpeedUp(25);
            wwrite(0x6C9858 + 1056 + 70 * 2, wread(0x6C9858 + 1056 + 70 * 2) + 1);
        }
        // 26. Lv+2
        // 27. Lv+3
        if(
            RandomOption[i] == 27
        ){
            perSpeedUp(30);
            wwrite(0x6C9858 + 1056 + 70 * 2, wread(0x6C9858 + 1056 + 70 * 2) + 2);
        }
        // 27. Lv+3
        // 28. 축지법
        if(
            RandomOption[i] == 28
        ){
            perSpeedUp(100);
            wwrite(0x6C9858 + 1056 + 70 * 2, wread(0x6C9858 + 1056 + 70 * 2) + 9);
        }
        // 28. 축지법
        // 31. 여포
        if(
            RandomOption[i] == 31
        ){
            for(var j=0;j>=0;j++){
                if (WeaponList[j] == 9999) break;
                var damage_;
                damage_ = wread(0x6564E0 + 2512 + WeaponList[j] * 2);
                damage_ = damage_ * 200 / 100;
                wwrite(0x6564E0 + 2512 + WeaponList[j] * 2, damage_);
            }
        }
        // 31. 여포
        // 33. 게으름
        if(
            RandomOption[i] == 33
        ){
            perSpeedUp(-20);
            wwrite(0x6C9858 + 1056 + 70 * 2, wread(0x6C9858 + 1056 + 70 * 2) + -3);
            perHealthUp(30);
        }
        // 33. 게으름
        // 40. 미련함
        if(
            RandomOption[i] == 40
        ){
            perSpeedUp(60);
            wwrite(0x6C9858 + 1056 + 70 * 2, wread(0x6C9858 + 1056 + 70 * 2) + 5);
            perHealthUp(-15);
        }
        // 40. 미련함
        // 44. 닌자
        if(
            RandomOption[i] == 44
        ){
            perSpeedUp(30);
            wwrite(0x6C9858 + 1056 + 70 * 2, wread(0x6C9858 + 1056 + 70 * 2) + 2);
            perAttSpeedUp(-30);
        }
        // 44. 닌자
        // 50. 겁쟁이
        if(
            RandomOption[i] == 50
        ){
            perSpeedUp(20);
            wwrite(0x6C9858 + 1056 + 70 * 2, wread(0x6C9858 + 1056 + 70 * 2) + 2);
        }
        // 50. 겁쟁이
        // 53. 헬창
        if(
            RandomOption[i] == 53
        ){
            perHealthUp(20);
            perDamageUp(30);
        }
        // 53. 헬창
        // 55. 망원경
        if(
            RandomOption[i] == 55
        ){
            var angle_;
            angle_ = bread(0x6564E0 + 1200 + 19 * 1);
            angle_ = angle_ * 80 / 100;
            bwrite(0x6564E0 + 1200 + 19 * 1, angle_);
        }
        // 55. 망원경
        // 61. 기마병
        if(
            RandomOption[i] == 61
        ){
            perSpeedUp(40);
            wwrite(0x6C9858 + 1056 + 70 * 2, wread(0x6C9858 + 1056 + 70 * 2) + 3);
        }
        // 61. 기마병
        // 69. Lv+4
        if(
            RandomOption[i] == 69
        ){
            perSpeedUp(45);
            wwrite(0x6C9858 + 1056 + 70 * 2, wread(0x6C9858 + 1056 + 70 * 2) + 3);
        }
        // 69. Lv+4
        // 76. 광폭
        if(
            RandomOption[i] == 76
        ){
            perDamageUp(70);
        }
        // 76. 광폭
        // 78. 보험
        if(
            RandomOption[i] == 78
        ){
            perHealthUp(-25);
            perShieldUp(75);
        }
        // 78. 보험
        // 79. 가시
        if(
            RandomOption[i] == 79
        ){
            perDamageUp(10);
        }
        // 79. 가시
    }
    // 곱연산
    // 유니크 & 회복
    for(var i=0; i<Roulette_Count; i++){
        // 피 & 쉴드 회복
        // 19. 재생 갑판
        if(
            RandomOption[i] == 19
        ){
            HealthRegen += 8;
        }
        // 19. 재생 갑판
        // 30. 건전지
        if(
            RandomOption[i] == 30
        ){
            bwrite(0x65FD00 + 19120 + 12 * 1, 1);
            wwrite(0x65FD00 + 4352 + 12 * 2, wread(0x65FD00 + 4352 + 12 * 2) + 30);
            건전지 = 1;
        }
        // 30. 건전지
        // 46. 뮤탈
        if(
            RandomOption[i] == 46
        ){
            HealthRegen += 21;
        }
        // 46. 뮤탈
        // 52. 링거
        if(
            RandomOption[i] == 52
        ){
            HealthRegen += 16;
        }
        // 52. 링거
        // 73. 쿠쿨자
        if(
            RandomOption[i] == 73
        ){
            HealthRegen += 32;
        }
        // 73. 쿠쿨자
        // 피 & 쉴드 회복
        // 15. 착륙
        if(
            RandomOption[i] == 15
        ){
            bwrite(0x65FD00 + 13392 + 12 * 1, 4);
            bwrite(0x6C9858 + 1480 + 70 * 1, 40);
        }
        // 15. 착륙
        // 23. 국룰
        if(
            RandomOption[i] == 23
        ){
            dwwrite(0x6564E0 + 3984 + 19 * 4, 144);
        }
        // 23. 국룰
        // 29. 러시안 룰렛
        if(
            RandomOption[i] == 29
        ){
            러시안룰렛 = 1;
        }
        // 29. 러시안 룰렛
        // 34. 기회주의자
        if(
            RandomOption[i] == 34
        ){
            var speed_;
            speed_ = dwread(0x6C9858 + 1696 + 70 * 4);
            speed_ = speed_ * 80 / 100;
            dwwrite(0x6C9858 + 1696 + 70 * 4, speed_);
            wwrite(0x6C9858 + 1056 + 70 * 2, wread(0x6C9858 + 1056 + 70 * 2) + 20);
            speed_ = wread(0x6C9858 + 1056 + 70 * 2);
            speed_ = speed_ * 200 / 100;
            wwrite(0x6C9858 + 1056 + 70 * 2, speed_);
            dwwrite(0x6C9858 + 216 + 70 * 4, dwread(0x6C9858 + 216 + 70 * 4) + 13000);
        }
        // 34. 기회주의자
        // 37. 포문 개방
        if(
            RandomOption[i] == 37
        ){
            bwrite(0x6564E0 + 1200 + 19 * 1, 127);
            var damage_;
            damage_ = wread(0x6564E0 + 2512 + 19 * 2);
            damage_ = damage_ * 110 / 100;
            wwrite(0x6564E0 + 2512 + 19 * 2, damage_);
        }
        // 37. 포문 개방
        // 39. 관통상
        if(
            RandomOption[i] == 39
        ){
            for(var j=0;j>=0;j++){
                if (WeaponList[j] == 9999) break;
                bwrite(0x6564E0 + 3448 + WeaponList[j] * 1, 4);
            }
        }
        // 39. 관통상
        // 49. 중상
        if(
            RandomOption[i] == 49
        ){
            중상 = 1;
        }
        // 49. 중상
        // 51. 무대포
        if(
            RandomOption[i] == 51
        ){
            dwwrite(0x6C9858 + 216 + 70 * 4, 0);
        }
        // 51. 무대포
        // 56. 난사
        if(
            RandomOption[i] == 56
        ){
            for(var j=0;j>=0;j++){
                if (WeaponList[j] == 9999) break;
                bwrite(0x6564E0 + 5032 + WeaponList[j] * 1, 64);
                bwrite(0x6564E0 + 0 + WeaponList[j] * 1, 2);
            }
        }
        // 56. 난사
    }
    // 유니크 & 회복
    // 뺄셈연산
    for(var i=0; i<Roulette_Count; i++){
        // 44. 닌자
        if(
            RandomOption[i] == 44
        ){
            for(var s = 0 ; s < 2 ; s++){
                if(
                    bread(0x65FD00 + 456 + 12 * 1) >= 1
                ){
                    bwrite(0x65FD00 + 456 + 12 * 1, bread(0x65FD00 + 456 + 12 * 1) + -1);
                }
            }
        }
        // 44. 닌자
        // 76. 광폭
        if(
            RandomOption[i] == 76
        ){
            for(var s = 0 ; s < 3 ; s++){
                if(
                    bread(0x65FD00 + 456 + 12 * 1) >= 1
                ){
                    bwrite(0x65FD00 + 456 + 12 * 1, bread(0x65FD00 + 456 + 12 * 1) + -1);
                }
            }
        }
        // 76. 광폭
    }
    // 뺄셈연산
    // 외형 변경
    for(var i=0; i<Roulette_Count; i++){
        // 룰렛에서도 설정 -ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
        // 룰렛에서도 설정 -ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
        // 32. 발키리
        if(
            RandomOption[i] == 32
        ){
            wwrite(0x6C9858 + 2752 + 70 * 2, 491);
            wwrite(0x65FD00 + 12936 + 12 * 2, 91);
            SetMemory(0x661828, (7), 1048600);
            SetMemory(0x66182C, (7), 1310744);
            dwwrite(0x666778 + 34000 + 940 * 4, 275);
            dwwrite(0x6564E0 + 1992 + 19 * 4, 202);
            bwrite(0x6564E0 + 5168 + 19 * 1, 20);
            bwrite(0x6564E0 + 400 + 19 * 1, 1);
            dwwrite(0x6C9858 + 1696 + 70 * 4, 732);
            wwrite(0x6C9858 + 1056 + 70 * 2, wread(0x6C9858 + 1056 + 70 * 2) + 8);
        }
        // 32. 발키리
        // 36. 생마린
        if(
            RandomOption[i] == 36
        ){
            wwrite(0x6C9858 + 2752 + 70 * 2, 235);
            wwrite(0x65FD00 + 12936 + 12 * 2, 0);
            SetMemory(0x661828, (7), 589832);
            SetMemory(0x66182C, (7), 655368);
            dwwrite(0x65FD00 + 9808 + 12 * 4, dwread(0x65FD00 + 9808 + 12 * 4) + 250 * 256);
            dwwrite(0x6564E0 + 1992 + 19 * 4, 152);
            bwrite(0x6564E0 + 400 + 19 * 1, 2);
            체력회복불가 = 1;
            wwrite(0x6C9858 + 1056 + 70 * 2, 300);
        }
        // 36. 생마린
        // 42. 히드라
        if(
            RandomOption[i] == 42
        ){
            wwrite(0x6C9858 + 2752 + 70 * 2, 146);
            wwrite(0x65FD00 + 12936 + 12 * 2, 21);
            SetMemory(0x661828, (7), 655370);
            SetMemory(0x66182C, (7), 786442);
            bwrite(0x65FD00 + 13392 + 12 * 1, 4);
            dwwrite(0x6564E0 + 1992 + 19 * 4, 171);
            bwrite(0x6564E0 + 400 + 19 * 1, 2);
            dwwrite(0x6564E0 + 3984 + 19 * 4, dwread(0x6564E0 + 3984 + 19 * 4) + 4);
            wwrite(0x6C9858 + 1056 + 70 * 2, 300);
        }
        // 42. 히드라
        // 43. 질럿
        if(
            RandomOption[i] == 43
        ){
            wwrite(0x6C9858 + 2752 + 70 * 2, 201);
            wwrite(0x65FD00 + 12936 + 12 * 2, 40);
            SetMemory(0x661828, (7), 327691);
            SetMemory(0x66182C, (7), 851979);
            dwwrite(0x6564E0 + 1992 + 19 * 4, 0);
            bwrite(0x6564E0 + 400 + 19 * 1, 5);
            dwwrite(0x666778 + 34000 + 151 * 4, 31);
            perHealthUp(-20);
            perShieldUp(50);
            wwrite(0x6C9858 + 1056 + 70 * 2, 300);
        }
        // 43. 질럿
        // 46. 뮤탈
        if(
            RandomOption[i] == 46
        ){
            wwrite(0x6C9858 + 2752 + 70 * 2, 151);
            wwrite(0x65FD00 + 12936 + 12 * 2, 26);
            SetMemory(0x661828, (7), 1441814);
            SetMemory(0x66182C, (7), 1376277);
            dwwrite(0x6564E0 + 1992 + 19 * 4, 165);
            bwrite(0x6564E0 + 5168 + 19 * 1, 5);
            bwrite(0x6564E0 + 400 + 19 * 1, 0);
            bwrite(0x65FD00 + 456 + 12 * 1, 0);
        }
        // 46. 뮤탈
        // 47. 울트라
        if(
            RandomOption[i] == 47
        ){
            wwrite(0x6C9858 + 2752 + 70 * 2, 157);
            wwrite(0x65FD00 + 12936 + 12 * 2, 22);
            SetMemory(0x661828, (7), 1048595);
            SetMemory(0x66182C, (7), 983058);
            dwwrite(0x6564E0 + 1992 + 19 * 4, 0);
            bwrite(0x6564E0 + 400 + 19 * 1, 5);
            var shield_;
            shield_ = wread(0x65FD00 + 4352 + 12 * 2);
            shield_ = shield_ * 256;
            dwwrite(0x65FD00 + 9808 + 12 * 4, dwread(0x65FD00 + 9808 + 12 * 4) + shield_);
            wwrite(0x65FD00 + 4352 + 12 * 2, 0);
            bwrite(0x65FD00 + 19120 + 12 * 1, 0);
            wwrite(0x6C9858 + 1056 + 70 * 2, 300);
        }
        // 47. 울트라
        // 48. 가디언
        if(
            RandomOption[i] == 48
        ){
            wwrite(0x6C9858 + 2752 + 70 * 2, 144);
            wwrite(0x65FD00 + 12936 + 12 * 2, 27);
            SetMemory(0x661828, (7), 1441814);
            SetMemory(0x66182C, (7), 1376277);
            dwwrite(0x6564E0 + 1992 + 19 * 4, 163);
            bwrite(0x6564E0 + 5168 + 19 * 1, 0);
            bwrite(0x6564E0 + 400 + 19 * 1, 0);
            var speed_;
            speed_ = dwread(0x6C9858 + 1696 + 70 * 4);
            speed_ = speed_ * 80 / 100;
            dwwrite(0x6C9858 + 1696 + 70 * 4, speed_);
            dwwrite(0x6564E0 + 3984 + 19 * 4, dwread(0x6564E0 + 3984 + 19 * 4) + 6);
        }
        // 48. 가디언
        // 57. 인터셉터
        if(
            RandomOption[i] == 57
        ){
            wwrite(0x6C9858 + 2752 + 70 * 2, 193);
            wwrite(0x65FD00 + 12936 + 12 * 2, 48);
            SetMemory(0x661828, (7), 524296);
            SetMemory(0x66182C, (7), 458759);
            dwwrite(0x6564E0 + 1992 + 19 * 4, 155);
            bwrite(0x6564E0 + 5168 + 19 * 1, 20);
            bwrite(0x6564E0 + 400 + 19 * 1, 0);
            perSpeedUp(30);
        }
        // 57. 인터셉터
        // 60. 아칸
        if(
            RandomOption[i] == 60
        ){
            wwrite(0x6C9858 + 2752 + 70 * 2, 189);
            wwrite(0x65FD00 + 12936 + 12 * 2, 43);
            SetMemory(0x661828, (7), 1048592);
            SetMemory(0x66182C, (7), 983055);
            dwwrite(0x6564E0 + 1992 + 19 * 4, 156);
            bwrite(0x6564E0 + 5168 + 19 * 1, 0);
            bwrite(0x6564E0 + 400 + 19 * 1, 2);
            var shield_;
            shield_ = dwread(0x65FD00 + 9808 + 12 * 4);
            shield_ = shield_ / 256;
            wwrite(0x65FD00 + 4352 + 12 * 2, wread(0x65FD00 + 4352 + 12 * 2) + shield_);
            dwwrite(0x65FD00 + 9808 + 12 * 4, 256);
            bwrite(0x65FD00 + 19120 + 12 * 1, 1);
            shield_ = wread(0x65FD00 + 4352 + 12 * 2);
            shield_ = shield_ * 120 / 100;
            wwrite(0x65FD00 + 4352 + 12 * 2, shield_);
            wwrite(0x6C9858 + 1056 + 70 * 2, 300);
        }
        // 60. 아칸
        // 64. 레이스
        if(
            RandomOption[i] == 64
        ){
            wwrite(0x6C9858 + 2752 + 70 * 2, 238);
            wwrite(0x65FD00 + 12936 + 12 * 2, 8);
            SetMemory(0x661828, (7), 983059);
            SetMemory(0x66182C, (7), 917522);
            dwwrite(0x6564E0 + 1992 + 19 * 4, 149);
            bwrite(0x6564E0 + 5168 + 19 * 1, 45);
            bwrite(0x6564E0 + 400 + 19 * 1, 0);
            dwwrite(0x65FD00 + 9808 + 12 * 4, dwread(0x65FD00 + 9808 + 12 * 4) + -150 * 256);
            perSpeedUp(40);
        }
        // 64. 레이스
        // 67. 고스트
        if(
            RandomOption[i] == 67
        ){
            wwrite(0x6C9858 + 2752 + 70 * 2, 229);
            wwrite(0x65FD00 + 12936 + 12 * 2, 1);
            SetMemory(0x661828, (7), 655367);
            SetMemory(0x66182C, (7), 720903);
            dwwrite(0x6564E0 + 1992 + 19 * 4, 143);
            bwrite(0x6564E0 + 5168 + 19 * 1, 0);
            bwrite(0x6564E0 + 400 + 19 * 1, 2);
            dwwrite(0x65FD00 + 9808 + 12 * 4, dwread(0x65FD00 + 9808 + 12 * 4) + -150 * 256);
            wwrite(0x6564E0 + 2512 + 19 * 2, wread(0x6564E0 + 2512 + 19 * 2) + 25);
            wwrite(0x6C9858 + 1056 + 70 * 2, 300);
        }
        // 67. 고스트
        // 68. 저글링
        if(
            RandomOption[i] == 68
        ){
            wwrite(0x6C9858 + 2752 + 70 * 2, 159);
            wwrite(0x65FD00 + 12936 + 12 * 2, 20);
            SetMemory(0x661828, (7), 262152);
            SetMemory(0x66182C, (7), 720903);
            dwwrite(0x6564E0 + 1992 + 19 * 4, 0);
            bwrite(0x6564E0 + 5168 + 19 * 1, 0);
            bwrite(0x6564E0 + 400 + 19 * 1, 5);
            perSpeedUp(25);
            perAttSpeedUp(-25);
            wwrite(0x6C9858 + 1056 + 70 * 2, 300);
        }
        // 68. 저글링
        // 71. 드론
        if(
            RandomOption[i] == 71
        ){
            wwrite(0x6C9858 + 2752 + 70 * 2, 140);
            wwrite(0x65FD00 + 12936 + 12 * 2, 24);
            SetMemory(0x661828, (7), 65547);
            SetMemory(0x66182C, (7), 720907);
            dwwrite(0x6564E0 + 1992 + 19 * 4, 171);
            bwrite(0x6564E0 + 5168 + 19 * 1, 0);
            bwrite(0x6564E0 + 400 + 19 * 1, 2);
            perHealthUp(-50);
            bwrite(0x65FD00 + 456 + 12 * 1, 5);
        }
        // 71. 드론
        // 72. 스카웃
        if(
            RandomOption[i] == 72
        ){
            wwrite(0x6C9858 + 2752 + 70 * 2, 195);
            wwrite(0x65FD00 + 12936 + 12 * 2, 45);
            SetMemory(0x661828, (7), 1048594);
            SetMemory(0x66182C, (7), 983057);
            dwwrite(0x6564E0 + 1992 + 19 * 4, 152);
            bwrite(0x6564E0 + 5168 + 19 * 1, 0);
            bwrite(0x6564E0 + 400 + 19 * 1, 2);
            perSpeedUp(30);
            wwrite(0x65FD00 + 4352 + 12 * 2, wread(0x65FD00 + 4352 + 12 * 2) + 100);
            bwrite(0x65FD00 + 19120 + 12 * 1, 1);
        }
        // 72. 스카웃
    }
    // 외형 변경
    // 영웅외형 변경
    for(var i=0; i<Roulette_Count; i++){
        // 룰렛에서도 설정 -ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
        // 룰렛에서도 설정 -ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
        // 73. 쿠쿨자
        if(
            RandomOption[i] == 73
        ){
            wwrite(0x6C9858 + 2752 + 70 * 2, 151);
            wwrite(0x65FD00 + 12936 + 12 * 2, 26);
            SetMemory(0x661828, (7), 1441814);
            SetMemory(0x66182C, (7), 1376277);
            dwwrite(0x6564E0 + 1992 + 19 * 4, 166);
            bwrite(0x6564E0 + 5168 + 19 * 1, 5);
            bwrite(0x6564E0 + 400 + 19 * 1, 0);
            bwrite(0x65FD00 + 456 + 12 * 1, 1);
            wwrite(0x6564E0 + 2512 + 19 * 2, wread(0x6564E0 + 2512 + 19 * 2) + 30);
            BossReward = 1;
            KukulzaReward = 1;
        }
        // 73. 쿠쿨자
        // 74. 아르타니스
        if(
            RandomOption[i] == 74
        ){
            wwrite(0x6C9858 + 2752 + 70 * 2, 195);
            wwrite(0x65FD00 + 12936 + 12 * 2, 95);
            SetMemory(0x661828, (7), 1048594);
            SetMemory(0x66182C, (7), 983057);
            dwwrite(0x6564E0 + 1992 + 19 * 4, 154);
            bwrite(0x6564E0 + 5168 + 19 * 1, 0);
            bwrite(0x6564E0 + 400 + 19 * 1, 1);
            perSpeedUp(45);
            wwrite(0x65FD00 + 4352 + 12 * 2, wread(0x65FD00 + 4352 + 12 * 2) + 150);
            bwrite(0x65FD00 + 19120 + 12 * 1, 1);
            dwwrite(0x6564E0 + 3984 + 19 * 4, dwread(0x6564E0 + 3984 + 19 * 4) + 4);
            BossReward = 1;
        }
        // 74. 아르타니스
        // 75. 형님
        if(
            RandomOption[i] == 75
        ){
            wwrite(0x6C9858 + 2752 + 70 * 2, 201);
            wwrite(0x65FD00 + 12936 + 12 * 2, 50);
            SetMemory(0x661828, (7), 327691);
            SetMemory(0x66182C, (7), 851979);
            dwwrite(0x6564E0 + 1992 + 19 * 4, 0);
            bwrite(0x6564E0 + 400 + 19 * 1, 5);
            dwwrite(0x666778 + 34000 + 151 * 4, 163);
            perSpeedUp(40);
            perDamageUp(50);
            형님 = 1;
            BossReward = 1;
            wwrite(0x6C9858 + 1056 + 70 * 2, 300);
        }
        // 75. 형님
        // 77. 톰 카잔스키
        if(
            RandomOption[i] == 77
        ){
            wwrite(0x6C9858 + 2752 + 70 * 2, 238);
            wwrite(0x65FD00 + 12936 + 12 * 2, 8);
            SetMemory(0x661828, (7), 983059);
            SetMemory(0x66182C, (7), 917522);
            dwwrite(0x6564E0 + 1992 + 19 * 4, 149);
            bwrite(0x6564E0 + 5168 + 19 * 1, 45);
            bwrite(0x6564E0 + 400 + 19 * 1, 0);
            perSpeedUp(70);
            perHealthUp(-20);
            wwrite(0x6564E0 + 2512 + 19 * 2, wread(0x6564E0 + 2512 + 19 * 2) + 30);
            TomReward = 1;
            BossReward = 1;
        }
        // 77. 톰 카잔스키
    }
    // 영웅외형 변경
    // 사거리표시
    RangeDisplay = dwread(0x6564E0 + 3984 + 19 * 4);
    if(
        dwread(0x6564E0 + 3984 + 19 * 4) >= 129 && 
        dwread(0x6564E0 + 3984 + 19 * 4) <= 131
    ){
        tct.setTbl((247), 25, 1, "\x0D");
        tct.setTbl((247), 25, 1, RangeDisplay * 10000 / 32 / 10000);
        tct.setTbl((247), 27, 7, "\x0D\x0D\x0D\x0D\x0D\x0D\x0D");
        tct.setTbl((247), 27, 7, "0",(RangeDisplay * 10000 / 32) % 1000);
    }
    else{
        tct.setTbl((247), 25, 1, "\x0D");
        tct.setTbl((247), 25, 1, RangeDisplay * 10000 / 32 / 10000);
        tct.setTbl((247), 27, 7, "\x0D\x0D\x0D\x0D\x0D\x0D\x0D");
        tct.setTbl((247), 27, 7, (RangeDisplay * 10000 / 32) % 10000);
    }
    // 사거리표시
    // 초과회복 불가
    HealthTotal = dwread(0x65FD00 + 9808 + 12 * 4);
    ShieldTotal = wread(0x65FD00 + 4352 + 12 * 2);
    ShieldTotal = ShieldTotal * 256;
    // 초과회복 불가
    // 보스 보상
    // 1. 작은 행운
    if(
        RewardOption == 1
    ){
        ProbPlus += 5;
    }
    // 1. 작은 행운
    // 2. 행운
    if(
        RewardOption == 2
    ){
        ProbPlus += 10;
    }
    // 2. 행운
    // 3. 용접
    if(
        RewardOption == 3
    ){
        EUDPlayerLoop()();
            if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                dwwrite(0x65FD00 + 9808 + PVulture[getcurpl()] * 4, dwread(0x65FD00 + 9808 + PVulture[getcurpl()] * 4) + 50 * 256);
            }
        EUDEndPlayerLoop();
    }
    // 3. 용접
    // 4. 합금
    if(
        RewardOption == 4
    ){
        EUDPlayerLoop()();
            if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                dwwrite(0x65FD00 + 9808 + PVulture[getcurpl()] * 4, dwread(0x65FD00 + 9808 + PVulture[getcurpl()] * 4) + 100 * 256);
            }
        EUDEndPlayerLoop();
    }
    // 4. 합금
    // 5. 총기 개조
    if(
        RewardOption == 5
    ){
        총기개조 += 2;
    }
    // 5. 총기 개조
    // 6. 팔라딘
    if(
        RewardOption == 6
    ){
        팔라딘 += 3;
    }
    // 6. 팔라딘
    // 7. 약화
    if(
        RewardOption == 7
    ){
        약화 += 3;
    }
    // 7. 약화
    // 8. 잔상
    if(
        RewardOption == 8
    ){
        잔상 += 2;
    }
    // 8. 잔상
    // 10. 강화탄
    if(
        RewardOption == 10
    ){
        for(var j=0;j>=0;j++){
            if (WeaponList[j] == 9999) break;
            wwrite(0x6564E0 + 2512 + WeaponList[j] * 2, wread(0x6564E0 + 2512 + WeaponList[j] * 2) + 7);
        }
    }
    // 10. 강화탄
    // 12. 일격
    if(
        RewardOption == 12
    ){
        for(var j=0;j>=0;j++){
            if (WeaponList[j] == 9999) break;
            wwrite(0x6564E0 + 2512 + WeaponList[j] * 2, wread(0x6564E0 + 2512 + WeaponList[j] * 2) + 15);
        }
    }
    // 12. 일격
    // 13. 네잎클로버
    if(
        RewardOption == 13
    ){
        ProbPlus += 20;
    }
    // 13. 네잎클로버
    // 14. 티켓
    if(
        RewardOption == 14
    ){
        Roulette_Again += 137;
    }
    // 14. 티켓
    RewardOption = 0;
    // 지속 보상
    // 5. 총기 개조
    if(
        총기개조 >= 1
    ){
        총기개조 -= 1;
        for(var j=0;j>=0;j++){
            if (WeaponList[j] == 9999) break;
            wwrite(0x6564E0 + 2512 + WeaponList[j] * 2, wread(0x6564E0 + 2512 + WeaponList[j] * 2) + 5);
        }
    }
    // 5. 총기 개조
    // 6. 팔라딘
    if(
        팔라딘 >= 1
    ){
        팔라딘 -= 1;
        EUDPlayerLoop()();
            if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                dwwrite(0x65FD00 + 9808 + PVulture[getcurpl()] * 4, dwread(0x65FD00 + 9808 + PVulture[getcurpl()] * 4) + 25 * 256);
            }
        EUDEndPlayerLoop();
    }
    // 6. 팔라딘
    // 7. 약화
    if(
        약화 >= 1
    ){
        약화 -= 1;
        perHealthUp(-20);
    }
    // 7. 약화
    // 8. 잔상
    if(
        잔상 >= 1
    ){
        잔상 -= 1;
        perDamageUp(-30);
    }
    // 8. 잔상
    // 지속 보상
    // 보스 보상
}
function OptionDescribe() {
    for(var i=0; i<8; i++){
        // 0~30
        // 0. 빈 칸
        if(
            RandomOption[i] == 0
        ){
            DisplayText(" ", (0));
            continue;
        }
        // 0. 빈 칸
        // 1. 발톱) 공격력+5
        if(
            Roulette_Sound[getcurpl()] == 1
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\LASRHIT1.wav");
        }
        if(
            RandomOption[i] == 1
        ){
            DisplayText("\x13\x17[ 발톱 ] \x1E공격력 + 5", (0));
            continue;
        }
        // 1. 발톱) 공격력+5
        // 2. 소형 갑피) 체력+75
        if(
            Roulette_Sound[getcurpl()] == 2
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\LASRHIT1.wav");
        }
        if(
            RandomOption[i] == 2
        ){
            DisplayText("\x13\x17[ 소형 갑피 ] \x1E체력 + 75", (0));
            continue;
        }
        // 2. 소형 갑피) 체력+75
        // 3. 날렵함) 이동속도+15%
        if(
            Roulette_Sound[getcurpl()] == 3
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\LASRHIT1.wav");
        }
        if(
            RandomOption[i] == 3
        ){
            DisplayText("\x13\x17[ 날렵함 ] \x1E이동속도 + 15%", (0));
            continue;
        }
        // 3. 날렵함) 이동속도+15%
        // 4. 맷집) 체력+100
        if(
            Roulette_Sound[getcurpl()] == 4
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\LASRHIT1.wav");
        }
        if(
            RandomOption[i] == 4
        ){
            DisplayText("\x13\x17[ 맷집 ] \x1E체력 + 100", (0));
            continue;
        }
        // 4. 맷집) 체력+100
        // 5. 갑옷) 방어력+1
        if(
            Roulette_Sound[getcurpl()] == 5
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\LASRHIT1.wav");
        }
        if(
            RandomOption[i] == 5
        ){
            DisplayText("\x13\x17[ 갑옷 ] \x1E방어력 + 1", (0));
            continue;
        }
        // 5. 갑옷) 방어력+1
        // 6. 신경쇠약) 체력-70, 공격력+7
        if(
            Roulette_Sound[getcurpl()] == 6
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\LASRHIT1.wav");
        }
        if(
            RandomOption[i] == 6
        ){
            DisplayText("\x13\x17[ 신경쇠약 ] \x1E체 -70, 공 +7", (0));
            continue;
        }
        // 6. 신경쇠약) 체력-70, 공격력+7
        // 7. 공격적) 공격력+7 사거리+0.125
        if(
            Roulette_Sound[getcurpl()] == 7
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TTaFi200.wav");
        }
        if(
            RandomOption[i] == 7
        ){
            DisplayText("\x13\x11[ 공격적 ] \x04공 +7, 사거리+0.125", (0));
            continue;
        }
        // 7. 공격적) 공격력+7 사거리+0.125
        // 8. 포악함) 공격력+15
        if(
            Roulette_Sound[getcurpl()] == 8
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TTaFi200.wav");
        }
        if(
            RandomOption[i] == 8
        ){
            DisplayText("\x13\x11[ 포악함 ] \x04공격력 + 15", (0));
            continue;
        }
        // 8. 포악함) 공격력+15
        // 9. 날개) 이동속도+40%
        if(
            Roulette_Sound[getcurpl()] == 9
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TTaFi200.wav");
        }
        if(
            RandomOption[i] == 9
        ){
            DisplayText("\x13\x11[ 날개 ] \x04이동속도 + 40%", (0));
            continue;
        }
        // 9. 날개) 이동속도+40%
        // 10. 굶주림) 공격력 & 이속+10%
        if(
            Roulette_Sound[getcurpl()] == 10
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\LASRHIT1.wav");
        }
        if(
            RandomOption[i] == 10
        ){
            DisplayText("\x13\x17[ 굶주림 ] \x1E공격력 & 이속+10%", (0));
            continue;
        }
        // 10. 굶주림) 공격력 & 이속+10%
        // 11. 정밀사격) 이속-20%, 사거리+0.25
        if(
            Roulette_Sound[getcurpl()] == 11
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TTaFi200.wav");
        }
        if(
            RandomOption[i] == 11
        ){
            DisplayText("\x13\x11[ 정밀사격 ] \x04이속 -20% & 사거리 +0.25", (0));
            continue;
        }
        // 11. 정밀사격) 이속-20%, 사거리+0.25
        // 12. 훈련) 공격력+20%
        if(
            Roulette_Sound[getcurpl()] == 12
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TTaFi200.wav");
        }
        if(
            RandomOption[i] == 12
        ){
            DisplayText("\x13\x11[ 훈련 ] \x04공격력 + 20%", (0));
            continue;
        }
        // 12. 훈련) 공격력+20%
        // 13. 외골격) 체력 -20%, 방어+2
        if(
            Roulette_Sound[getcurpl()] == 13
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TTaFi200.wav");
        }
        if(
            RandomOption[i] == 13
        ){
            DisplayText("\x13\x11[ 외골격 ] \x04체력 -20%, 방어 +2", (0));
            continue;
        }
        // 13. 외골격) 체력 -20%, 방어+2
        // 14. 강인함) 체력+200
        if(
            Roulette_Sound[getcurpl()] == 14
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TTaFi200.wav");
        }
        if(
            RandomOption[i] == 14
        ){
            DisplayText("\x13\x11[ 강인함 ] \x04체력 + 200", (0));
            continue;
        }
        // 14. 강인함) 체력+200
        // 15. 착륙) 지상화
        if(
            Roulette_Sound[getcurpl()] == 15
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Misc\\ZRescue.wav");
        }
        if(
            RandomOption[i] == 15
        ){
            DisplayText("\x13\x10[ 착륙 ] \x04지상화", (0));
            continue;
        }
        // 15. 착륙) 지상화
        // 16. 격분) 공격력+35
        if(
            Roulette_Sound[getcurpl()] == 16
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TNsFir00.wav");
        }
        if(
            RandomOption[i] == 16
        ){
            DisplayText("\x13\x08[ 격분 ] \x04공격력 + 35", (0));
            continue;
        }
        // 16. 격분) 공격력+35
        // 17. 터보) 이동속도+70%
        if(
            Roulette_Sound[getcurpl()] == 17
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TNsFir00.wav");
        }
        if(
            RandomOption[i] == 17
        ){
            DisplayText("\x13\x08[ 터보 ] \x04이동속도 + 70%", (0));
            continue;
        }
        // 17. 터보) 이동속도+70%
        // 18. 조준) 사거리+0.1875
        if(
            Roulette_Sound[getcurpl()] == 18
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TTaFi200.wav");
        }
        if(
            RandomOption[i] == 18
        ){
            DisplayText("\x13\x11[ 조준 ] \x04사거리 + 0.1875", (0));
            continue;
        }
        // 18. 조준) 사거리+0.1875
        // 19. 재생 갑판) 피회복 +1.5/s
        if(
            Roulette_Sound[getcurpl()] == 19
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\LASRHIT1.wav");
        }
        if(
            RandomOption[i] == 19
        ){
            DisplayText("\x13\x17[ 재생 갑판 ] \x1E피 회복 +1.5/s", (0));
            continue;
        }
        // 19. 재생 갑판) 피회복 +1.5/s
        // 20. 마라토너) 체력 & 이속+30%
        if(
            Roulette_Sound[getcurpl()] == 20
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TNsFir00.wav");
        }
        if(
            RandomOption[i] == 20
        ){
            DisplayText("\x13\x08[ 마라토너 ] \x04체력 & 이속 +30%", (0));
            continue;
        }
        // 20. 마라토너) 체력 & 이속+30%
        // 21. 강철 갑판) 방어력+3
        if(
            Roulette_Sound[getcurpl()] == 21
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TNsFir00.wav");
        }
        if(
            RandomOption[i] == 21
        ){
            DisplayText("\x13\x08[ 강철 갑판 ] \x04방어력 + 3", (0));
            continue;
        }
        // 21. 강철 갑판) 방어력+3
        // 22. 샷건) 사거리-0.125, 공격력+20
        if(
            Roulette_Sound[getcurpl()] == 22
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TTaFi200.wav");
        }
        if(
            RandomOption[i] == 22
        ){
            DisplayText("\x13\x11[ 샷건 ] \x04공 +20, 사거리 -0.125", (0));
            continue;
        }
        // 22. 샷건) 사거리-0.125, 공격력+20
        // 23. 국룰) 사거리 4.5 고정
        if(
            Roulette_Sound[getcurpl()] == 23
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Misc\\ZRescue.wav");
        }
        if(
            RandomOption[i] == 23
        ){
            DisplayText("\x13\x10[ 국룰 ] \x04사거리 4.5 고정", (0));
            continue;
        }
        // 23. 국룰) 사거리 4.5 고정
        // 24. 호크아이) 사거리 + 0.25
        if(
            Roulette_Sound[getcurpl()] == 24
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TNsFir00.wav");
        }
        if(
            RandomOption[i] == 24
        ){
            DisplayText("\x13\x08[ 호크아이 ] \x04사거리 + 0.25", (0));
            continue;
        }
        // 24. 호크아이) 사거리 + 0.25
        // 25. Lv+1) 공+2,체+25,이속+10%
        if(
            Roulette_Sound[getcurpl()] == 25
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\LASRHIT1.wav");
        }
        if(
            RandomOption[i] == 25
        ){
            DisplayText("\x13\x17[ Lv+1 ] \x1E공+2, 체+25, 이속+10%", (0));
            continue;
        }
        // 25. Lv+1) 공+2,체+25,이속+10%
        // 26. Lv+2) 공+5,체+50,이속+25%, 방+1
        if(
            Roulette_Sound[getcurpl()] == 26
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TTaFi200.wav");
        }
        if(
            RandomOption[i] == 26
        ){
            DisplayText("\x13\x11[ Lv+2 ] \x04공+5, 체+50, 이속+25%, 방+1", (0));
            continue;
        }
        // 26. Lv+2) 공+5,체+50,이속+25%, 방+1
        // 27. Lv+3) 공+12,체+100,이속+30%, 방+1
        if(
            Roulette_Sound[getcurpl()] == 27
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TNsFir00.wav");
        }
        if(
            RandomOption[i] == 27
        ){
            DisplayText("\x13\x08[ Lv+3 ] \x04공+12, 체+100, 이속+30%, 방+1", (0));
            continue;
        }
        // 27. Lv+3) 공+12,체+100,이속+30%, 방+1
        // 28. 축지법) 이동속도 + 100%
        if(
            Roulette_Sound[getcurpl()] == 28
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("staredit\\wav\\chookjibub.wav");
        }
        if(
            RandomOption[i] == 28
        ){
            DisplayText("\x13\x1F[ 축지법 ] \x04이동속도 + 100%", (0));
            continue;
        }
        // 28. 축지법) 이동속도 + 100%
        // 29. 러시안 룰렛) ???
        if(
            Roulette_Sound[getcurpl()] == 29
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("staredit\\wav\\reloading.ogg");
        }
        if(
            RandomOption[i] == 29
        ){
            DisplayText("\x13\x1F[ 러시안 룰렛 ] \x04???", (0));
            continue;
        }
        // 29. 러시안 룰렛) ???
        // 30. 건전지) 쉴드+30, 재생+4/s
        if(
            Roulette_Sound[getcurpl()] == 30
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TTaFi200.wav");
        }
        if(
            RandomOption[i] == 30
        ){
            DisplayText("\x13\x11[ 건전지 ] \x04쉴드 +30, 재생 +4/s", (0));
            continue;
        }
        // 30. 건전지) 쉴드+30, 재생+4/s
        // 0~30
        // 31~60
        // 31. 여포) 벌쳐 공격력 + 100%
        if(
            Roulette_Sound[getcurpl()] == 31
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("staredit\\wav\\legendary drop.ogg");
        }
        if(
            RandomOption[i] == 31
        ){
            DisplayText("\x13\x07[ 여포 ] \x11벌쳐 공격력 + 100%", (0));
            continue;
        }
        // 31. 여포) 벌쳐 공격력 + 100%
        // 32. 발키리) 이동속도 225% 고정
        if(
            Roulette_Sound[getcurpl()] == 32
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Terran\\FRIGATE\\TVkWht03.WAV");
        }
        if(
            RandomOption[i] == 32
        ){
            DisplayText("\x13\x18[ 발키리 ] \x04이동속도 225% 고정", (0));
            continue;
        }
        // 32. 발키리) 이동속도 225% 고정
        // 33. 게으름) 이속 -20%, 체력 +30%
        if(
            Roulette_Sound[getcurpl()] == 33
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TTaFi200.wav");
        }
        if(
            RandomOption[i] == 33
        ){
            DisplayText("\x13\x11[ 게으름 ] \x04이속 -20%, 체력 +30%", (0));
            continue;
        }
        // 33. 게으름) 이속 -20%, 체력 +30%
        // 34. 기회주의자) 최고속도 -20%, 가속 +200%
        if(
            Roulette_Sound[getcurpl()] == 34
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Misc\\ZRescue.wav");
        }
        if(
            RandomOption[i] == 34
        ){
            DisplayText("\x13\x10[ 기회주의자 ] \x04최고속도 -20%, 가속 +200%", (0));
            continue;
        }
        // 34. 기회주의자) 최고속도 -20%, 가속 +200%
        // 35. 바바리안) 공격력 + 70
        if(
            Roulette_Sound[getcurpl()] == 35
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("staredit\\wav\\barbarian.ogg");
        }
        if(
            RandomOption[i] == 35
        ){
            DisplayText("\x13\x1F[ 바바리안 ] \x04공격력 + 70", (0));
            continue;
        }
        // 35. 바바리안) 공격력 + 70
        // 36. 생마린) 체력 +250, 체력회복 불가
        if(
            Roulette_Sound[getcurpl()] == 36
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Terran\\MARINE\\TMaPss00.WAV");
        }
        if(
            RandomOption[i] == 36
        ){
            DisplayText("\x13\x18[ 생마린 ] \x04체력 +250, 체력회복 불가", (0));
            continue;
        }
        // 36. 생마린) 체력 +250, 체력회복 불가
        // 37. 포문 개방) 발사각 360°, 공격력 +10%
        if(
            RandomOption[i] == 37 && 
            포문개방취소 == 0
        ){
            DisplayText("\x13\x1F[ 포문 개방 ] \x04공 +10%, 발사각 360°", (0));
        }
        if(
            RandomOption[i] == 37 && 
            포문개방취소 == 1
        ){
            DisplayText("\x13\x1F[ 포문 개방 ] \x04공 +10%, \x05발사각 360°(취소됨)", (0));
        }
        if(
            Roulette_Sound[getcurpl()] == 37
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Terran\\TANK\\TTaTra00.WAV");
        }
        // 37. 포문 개방) 발사각 360°, 공격력 +10%
        // 38. 정비공) 벌쳐 체력 + 75
        if(
            Roulette_Sound[getcurpl()] == 38
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("staredit\\wav\\legendary drop.ogg");
        }
        if(
            RandomOption[i] == 38
        ){
            DisplayText("\x13\x07[ 정비공 ] \x11벌쳐 체력 + 75", (0));
            continue;
        }
        // 38. 정비공) 벌쳐 체력 + 75
        // 39. 관통상) 벌쳐 공격이 방어를 무시
        if(
            Roulette_Sound[getcurpl()] == 39
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("staredit\\wav\\legendary drop.ogg");
        }
        if(
            RandomOption[i] == 39
        ){
            DisplayText("\x13\x07[ 관통상 ] \x11벌쳐 공격이 방어를 무시", (0));
            continue;
        }
        // 39. 관통상) 벌쳐 공격이 방어를 무시
        // 40. 미련함) 체력 -15%, 이속 +60%
        if(
            Roulette_Sound[getcurpl()] == 40
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TNsFir00.wav");
        }
        if(
            RandomOption[i] == 40
        ){
            DisplayText("\x13\x08[ 미련함 ] \x04체력 -15%, 이속 +60%", (0));
            continue;
        }
        // 40. 미련함) 체력 -15%, 이속 +60%
        // 41. 방탄복) 쉴드 + 300
        if(
            Roulette_Sound[getcurpl()] == 41
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TNsFir00.wav");
        }
        if(
            RandomOption[i] == 41
        ){
            DisplayText("\x13\x08[ 방탄복 ] \x04쉴드 + 300", (0));
            continue;
        }
        // 41. 방탄복) 쉴드 + 300
        // 42. 히드라) 사거리 +0.125, 지상화
        if(
            Roulette_Sound[getcurpl()] == 42
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Zerg\\Hydra\\ZHyYes00.WAV");
        }
        if(
            RandomOption[i] == 42
        ){
            DisplayText("\x13\x18[ 히드라 ] \x04사거리 +0.125, 지상화", (0));
            continue;
        }
        // 42. 히드라) 사거리 +0.125, 지상화
        // 43. 질럿) 체력 -20%, 쉴드 +50%
        if(
            Roulette_Sound[getcurpl()] == 43
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Protoss\\ZEALOT\\PZeYes00.WAV");
        }
        if(
            RandomOption[i] == 43
        ){
            DisplayText("\x13\x18[ 질럿 ] \x04체력 -20%, 쉴드 +50%", (0));
            continue;
        }
        // 43. 질럿) 체력 -20%, 쉴드 +50%
        // 44. 닌자) 공속&이속 +30%, 방어 -2
        if(
            Roulette_Sound[getcurpl()] == 44
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TTaFi200.wav");
        }
        if(
            RandomOption[i] == 44
        ){
            DisplayText("\x13\x11[ 닌자 ] \x04공속&이속 +30%, 방어 -2", (0));
            continue;
        }
        // 44. 닌자) 공속&이속 +30%, 방어 -2
        // 45. 하이브리드) 체력 & 쉴드 + 100
        if(
            Roulette_Sound[getcurpl()] == 45
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TTaFi200.wav");
        }
        if(
            RandomOption[i] == 45
        ){
            DisplayText("\x13\x11[ 하이브리드 ] \x04체력 & 쉴드 + 100", (0));
            continue;
        }
        // 45. 하이브리드) 체력 & 쉴드 + 100
        // 46. 뮤탈) 방어 0 고정, 피 회복 +4/s
        if(
            Roulette_Sound[getcurpl()] == 46
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Zerg\\Mutalid\\ZMuWht00.WAV");
        }
        if(
            RandomOption[i] == 46
        ){
            DisplayText("\x13\x18[ 뮤탈 ] \x04방어 0 고정, 피 회복 +4/s", (0));
            continue;
        }
        // 46. 뮤탈) 방어 0 고정, 피 회복 +4/s
        // 47. 울트라) 쉴드를 모두 체력으로 전환
        if(
            Roulette_Sound[getcurpl()] == 47
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Zerg\\Ultra\\zulAtt01.WAV");
        }
        if(
            RandomOption[i] == 47
        ){
            DisplayText("\x13\x18[ 울트라 ] \x04쉴드를 모두 체력으로 전환", (0));
            continue;
        }
        // 47. 울트라) 쉴드를 모두 체력으로 전환
        // 48. 가디언) 이속 -20%, 사거리 +0.1875
        if(
            Roulette_Sound[getcurpl()] == 48
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Zerg\\Guardian\\ZGuYes00.WAV");
        }
        if(
            RandomOption[i] == 48
        ){
            DisplayText("\x13\x18[ 가디언 ] \x04이속 -20%, 사거리 +0.1875", (0));
            continue;
        }
        // 48. 가디언) 이속 -20%, 사거리 +0.1875
        // 49. 중상) 벌쳐 체력 70% 감소
        if(
            Roulette_Sound[getcurpl()] == 49
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("staredit\\wav\\huhhuhhuhhuh.ogg");
        }
        if(
            RandomOption[i] == 49
        ){
            DisplayText("\x13\x1F[ 중상 ] \x04벌쳐 체력 70% 감소", (0));
            continue;
        }
        // 49. 중상) 벌쳐 체력 70% 감소
        // 50. 겁쟁이) 이속 +20%, 쉴드 +150
        if(
            Roulette_Sound[getcurpl()] == 50
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TTaFi200.wav");
        }
        if(
            RandomOption[i] == 50
        ){
            DisplayText("\x13\x11[ 겁쟁이 ] \x04이속 +20%, 쉴드 +150", (0));
            continue;
        }
        // 50. 겁쟁이) 이속 +20%, 쉴드 +150
        // 51. 무대포) 브레이크 제거
        if(
            Roulette_Sound[getcurpl()] == 51
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Misc\\ZRescue.wav");
        }
        if(
            RandomOption[i] == 51
        ){
            DisplayText("\x13\x10[ 무대포 ] \x04브레이크 제거", (0));
            continue;
        }
        // 51. 무대포) 브레이크 제거
        // 52. 링거) 피 회복 + 3/s
        if(
            Roulette_Sound[getcurpl()] == 52
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TTaFi200.wav");
        }
        if(
            RandomOption[i] == 52
        ){
            DisplayText("\x13\x11[ 링거 ] \x04피 회복 + 3/s", (0));
            continue;
        }
        // 52. 링거) 피 회복 + 3/s
        // 53. 헬창) 체력 +20% 공격력 +30%
        if(
            Roulette_Sound[getcurpl()] == 53
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TNsFir00.wav");
        }
        if(
            RandomOption[i] == 53
        ){
            DisplayText("\x13\x08[ 헬창 ] \x04체력 +20%, 공격력 +30%", (0));
            continue;
        }
        // 53. 헬창) 체력 +20% 공격력 +30%
        // 54. 저격) 사거리 +0.1875, 공 +15
        if(
            Roulette_Sound[getcurpl()] == 54
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TNsFir00.wav");
        }
        if(
            RandomOption[i] == 54
        ){
            DisplayText("\x13\x08[ 저격 ] \x04사거리 +0.1875, 공 +15", (0));
            continue;
        }
        // 54. 저격) 사거리 +0.1875, 공 +15
        // 55. 망원경) 사거리 +0.25, 발사각 -20%
        if(
            Roulette_Sound[getcurpl()] == 55
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TNsFir00.wav");
        }
        if(
            RandomOption[i] == 55
        ){
            DisplayText("\x13\x08[ 망원경 ] \x04사거리 +0.25, 발사각 -20%", (0));
            continue;
        }
        // 55. 망원경) 사거리 +0.25, 발사각 -20%
        // 56. 난사) 벌쳐가 탄환을 두 배로 발사
        if(
            Roulette_Sound[getcurpl()] == 56
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("staredit\\wav\\legendary drop.ogg");
        }
        if(
            RandomOption[i] == 56
        ){
            DisplayText("\x13\x07[ 난사 ] \x11벌쳐가 탄환을 두 배로 발사", (0));
            continue;
        }
        // 56. 난사) 벌쳐가 탄환을 두 배로 발사
        // 57. 인터셉터) 이속 + 30%
        if(
            Roulette_Sound[getcurpl()] == 57
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\bullet\\psibolt.wav");
        }
        if(
            RandomOption[i] == 57
        ){
            DisplayText("\x13\x18[ 인터셉터 ] \x04이속 + 30%", (0));
            continue;
        }
        // 57. 인터셉터) 이속 + 30%
        // 58. 목검) 공격력+7
        if(
            Roulette_Sound[getcurpl()] == 58
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\LASRHIT1.wav");
        }
        if(
            RandomOption[i] == 58
        ){
            DisplayText("\x13\x17[ 목검 ] \x1E공격력 + 7", (0));
            continue;
        }
        // 58. 목검) 공격력+7
        // 59. 약골) 체력 - 40
        if(
            Roulette_Sound[getcurpl()] == 59
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\LASRHIT1.wav");
        }
        if(
            RandomOption[i] == 59
        ){
            DisplayText("\x13\x17[ 약골 ] \x1E체력 - 40", (0));
            continue;
        }
        // 59. 약골) 체력 - 40
        // 60. 아칸) 체력을 모두 쉴드로 전환
        if(
            Roulette_Sound[getcurpl()] == 60
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\protoss\\archon\\parwht02.wav");
        }
        if(
            RandomOption[i] == 60
        ){
            DisplayText("\x13\x18[ 아칸 ] \x04체력을 모두 쉴드로 전환, 쉴드 +20%", (0));
            continue;
        }
        // 60. 아칸) 체력을 모두 쉴드로 전환
        // 31~60
        // 61~90
        // 61. 기마병) 사거리 +0.125, 이속 +40%
        if(
            Roulette_Sound[getcurpl()] == 61
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TNsFir00.wav");
        }
        if(
            RandomOption[i] == 61
        ){
            DisplayText("\x13\x08[ 기마병 ] \x04사거리 +0.125, 이속 +40%", (0));
            continue;
        }
        // 61. 기마병) 사거리 +0.125, 이속 +40%
        // 62. 아칸 오라) F10 + J 참고
        if(
            Roulette_Sound[getcurpl()] == 62
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("staredit\\wav\\UniqueDropOGG.ogg");
        }
        if(
            RandomOption[i] == 62
        ){
            DisplayText("\x13\x08[ \x04아칸 오라 \x08] \x1FF10 + J 참고", (0));
            continue;
        }
        // 62. 아칸 오라) F10 + J 참고
        // 63. 레이스 스킨) F10 + J 참고
        if(
            Roulette_Sound[getcurpl()] == 63
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("staredit\\wav\\UniqueDropOGG.ogg");
        }
        if(
            RandomOption[i] == 63
        ){
            DisplayText("\x13\x08[ \x04레이스 스킨 \x08] \x1FF10 + J 참고", (0));
            continue;
        }
        // 63. 레이스 스킨) F10 + J 참고
        // 64. 레이스) 체력 -150, 이속 +40%
        if(
            Roulette_Sound[getcurpl()] == 64
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\terran\\phoenix\\tphwht03.wav");
        }
        if(
            RandomOption[i] == 64
        ){
            DisplayText("\x13\x18[ 레이스 ] \x04체력 -150, 이속 +40%", (0));
            continue;
        }
        // 64. 레이스) 체력 -150, 이속 +40%
        // 65. 뮤탈 스킨) F10 + J 참고
        if(
            Roulette_Sound[getcurpl()] == 65
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("staredit\\wav\\UniqueDropOGG.ogg");
        }
        if(
            RandomOption[i] == 65
        ){
            DisplayText("\x13\x08[ \x04뮤탈 스킨 \x08] \x1FF10 + J 참고", (0));
            continue;
        }
        // 65. 뮤탈 스킨) F10 + J 참고
        // 66. 마엘 오라) F10 + J 참고
        if(
            Roulette_Sound[getcurpl()] == 66
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("staredit\\wav\\UniqueDropOGG.ogg");
        }
        if(
            RandomOption[i] == 66
        ){
            DisplayText("\x13\x08[ \x04마엘 오라 \x08] \x1FF10 + J 참고", (0));
            continue;
        }
        // 66. 마엘 오라) F10 + J 참고
        // 67. 고스트) 체력 -150, 공 +25
        if(
            Roulette_Sound[getcurpl()] == 67
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\terran\\ghost\\tghyes01.wav");
        }
        if(
            RandomOption[i] == 67
        ){
            DisplayText("\x13\x18[ 고스트 ] \x04체력 -150, 공 +25", (0));
            continue;
        }
        // 67. 고스트) 체력 -150, 공 +25
        // 68. 저글링) 공속 & 이속 +25%
        if(
            Roulette_Sound[getcurpl()] == 68
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\zerg\\zergling\\zzeyes00.wav");
        }
        if(
            RandomOption[i] == 68
        ){
            DisplayText("\x13\x18[ 저글링 ] \x04공속 & 이속 +25%", (0));
            continue;
        }
        // 68. 저글링) 공속 & 이속 +25%
        // 69. Lv+4) 공+25, 체+150, 이속+45%, 방+2
        if(
            Roulette_Sound[getcurpl()] == 69
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("staredit\\wav\\power up.ogg");
        }
        if(
            RandomOption[i] == 69
        ){
            DisplayText("\x13\x1F[ Lv+4 ] \x04공 +25, 체 +150, 이속 +45%, 방+2", (0));
            continue;
        }
        // 69. Lv+4) 공+25, 체+150, 이속+45%, 방+2
        // 70. 물주먹) 공격력 - 5
        if(
            Roulette_Sound[getcurpl()] == 70
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\LASRHIT1.wav");
        }
        if(
            RandomOption[i] == 70
        ){
            DisplayText("\x13\x17[ 물주먹 ] \x1E공격력 - 5", (0));
            continue;
        }
        // 70. 물주먹) 공격력 - 5
        // 71. 드론) 체력 -50%, 방어 5 고정
        if(
            Roulette_Sound[getcurpl()] == 71
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\zerg\\drone\\zdrwht04.wav");
        }
        if(
            RandomOption[i] == 71
        ){
            DisplayText("\x13\x18[ 드론 ] \x04체력 -50%, 방어 5 고정", (0));
            continue;
        }
        // 71. 드론) 체력 -50%, 방어 5 고정
        // 72. 스카웃) 이속 +30%, 쉴드 +100
        if(
            Roulette_Sound[getcurpl()] == 72
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\protoss\\scout\\pscwht02.wav");
        }
        if(
            RandomOption[i] == 72
        ){
            DisplayText("\x13\x18[ 스카웃 ] \x04이속 +30%, 쉴드 +100", (0));
            continue;
        }
        // 72. 스카웃) 이속 +30%, 쉴드 +100
        // 73. 쿠쿨자) 방어 1 고정, 피 회복 +6/s, 공 +30
        if(
            Roulette_Sound[getcurpl()] == 73
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\zerg\\mutalid\\zmupss00.wav");
            PlayWAV("sound\\zerg\\mutalid\\zmupss01.wav");
        }
        if(
            RandomOption[i] == 73
        ){
            DisplayText("\x13\x08{ \x1F쿠쿨자 \x08} \x11방어 1 고정, 피 회복 +6/s, 공 +30", (0));
            continue;
        }
        // 73. 쿠쿨자) 방어 1 고정, 피 회복 +6/s, 공 +30
        // 74. 아르타니스) 이속 +45%, 쉴드+150, 사거리 +0.125
        if(
            Roulette_Sound[getcurpl()] == 74
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\protoss\\artanis\\patwht00.wav");
        }
        if(
            RandomOption[i] == 74
        ){
            DisplayText("\x13\x08{ \x1F아르타니스 \x08} \x11이속 +45%, 쉴드 +150, 사거리 +0.125", (0));
            continue;
        }
        // 74. 아르타니스) 이속 +45%, 쉴드+150, 사거리 +0.125
        // 75. 형님) 이속 +40%, 공 +50%, 2회 타격
        if(
            Roulette_Sound[getcurpl()] == 75
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("staredit\\wav\\ang.ogg");
        }
        if(
            RandomOption[i] == 75
        ){
            DisplayText("\x13\x08{ \x1F형님 \x08} \x11이속 +40%, 공격력 +50%, 2회 타격", (0));
            continue;
        }
        // 75. 형님) 이속 +40%, 공 +50%, 2회 타격
        // 76. 광폭) 방어 -3, 공격력 +70%
        if(
            Roulette_Sound[getcurpl()] == 76
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TNsFir00.wav");
        }
        if(
            RandomOption[i] == 76
        ){
            DisplayText("\x13\x08[ 광폭 ] \x04방어 -3, 공격력 +70%", (0));
            continue;
        }
        // 76. 광폭) 방어 -3, 공격력 +70%
        // 77. 톰 카잔스키) 이속 +70%, 공 +30, 체력 -20%
        if(
            Roulette_Sound[getcurpl()] == 77
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\terran\\phoenix\\tphpss04.wav");
        }
        if(
            RandomOption[i] == 77
        ){
            DisplayText("\x13\x08{ \x1F톰 카잔스키 \x08} \x11이속 +70%, 공 +30, 체력 -10%", (0));
            continue;
        }
        // 77. 톰 카잔스키) 이속 +70%, 공 +30, 체력 -20%
        // 78. 보험) 체력 -25%, 쉴드 +75%
        if(
            Roulette_Sound[getcurpl()] == 78
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TNsFir00.wav");
        }
        if(
            RandomOption[i] == 78
        ){
            DisplayText("\x13\x08[ 보험 ] \x04체력 -25%, 쉴드 +75%", (0));
            continue;
        }
        // 78. 보험) 체력 -25%, 쉴드 +75%
        // 79. 가시) 공 + 15, 공 + 10%
        if(
            Roulette_Sound[getcurpl()] == 79
        ){
            Roulette_Sound[getcurpl()] = 0;
            PlayWAV("sound\\Bullet\\TTaFi200.wav");
        }
        if(
            RandomOption[i] == 79
        ){
            DisplayText("\x13\x11[ 가시 ] \x04공 + 15, 공 + 10%", (0));
            continue;
        }
        // 79. 가시) 공 + 15, 공 + 10%
        // 61~90
    }
}
function RewardDescribe() {
    // 0~30
    // 0. 빈 칸
    if(
        RewardOption == 0
    ){
        DisplayText(" ", (0));
    }
    // 0. 빈 칸
    // 1. 작은 행운) 스킨/오라 등장 확률 + 5% (영구)
    if(
        Reward_Sound[getcurpl()] == 1
    ){
        Reward_Sound[getcurpl()] = 0;
        PlayWAV("staredit\\wav\\legendary drop.ogg");
    }
    if(
        RewardOption == 1
    ){
        DisplayText("\x13\x07[ 작은 행운 ] \x11스킨/오라 등장확률 + 5% \x04(영구)", (0));
    }
    // 1. 작은 행운) 스킨/오라 등장 확률 + 5% (영구)
    // 2. 행운) 스킨/오라 등장 확률 + 10% (영구)
    if(
        Reward_Sound[getcurpl()] == 2
    ){
        Reward_Sound[getcurpl()] = 0;
        PlayWAV("staredit\\wav\\legendary drop.ogg");
    }
    if(
        RewardOption == 2
    ){
        DisplayText("\x13\x07[ 행운 ] \x11스킨/오라 등장확률 + 10% \x04(영구)", (0));
    }
    // 2. 행운) 스킨/오라 등장 확률 + 10% (영구)
    // 3. 용접) 벌쳐 체력 + 50 (1회)
    if(
        Reward_Sound[getcurpl()] == 3
    ){
        Reward_Sound[getcurpl()] = 0;
        PlayWAV("staredit\\wav\\legendary drop.ogg");
    }
    if(
        RewardOption == 3
    ){
        DisplayText("\x13\x07[ 용접 ] \x11벌쳐 체력 + 50 \x04(1회)", (0));
    }
    // 3. 용접) 벌쳐 체력 + 50 (1회)
    // 4. 합금) 벌쳐 체력 + 100 (1회)
    if(
        Reward_Sound[getcurpl()] == 4
    ){
        Reward_Sound[getcurpl()] = 0;
        PlayWAV("staredit\\wav\\legendary drop.ogg");
    }
    if(
        RewardOption == 4
    ){
        DisplayText("\x13\x07[ 합금 ] \x11벌쳐 체력 + 100 \x04(1회)", (0));
    }
    // 4. 합금) 벌쳐 체력 + 100 (1회)
    // 5. 총기 개조) 벌쳐 공격력 + 5 (2회)
    if(
        Reward_Sound[getcurpl()] == 5
    ){
        Reward_Sound[getcurpl()] = 0;
        PlayWAV("staredit\\wav\\legendary drop.ogg");
    }
    if(
        RewardOption == 5
    ){
        DisplayText("\x13\x07[ 총기 개조 ] \x11벌쳐 공격력 + 5 \x04(2회)", (0));
    }
    // 5. 총기 개조) 벌쳐 공격력 + 5 (2회)
    // 6. 팔라딘) 벌쳐 체력 + 25 (3회)
    if(
        Reward_Sound[getcurpl()] == 6
    ){
        Reward_Sound[getcurpl()] = 0;
        PlayWAV("staredit\\wav\\legendary drop.ogg");
    }
    if(
        RewardOption == 6
    ){
        DisplayText("\x13\x07[ 팔라딘 ] \x11벌쳐 체력 + 25 \x04(3회)", (0));
    }
    // 6. 팔라딘) 벌쳐 체력 + 25 (3회)
    // 7. 약화) 적 체력 - 20% (3회)
    if(
        Reward_Sound[getcurpl()] == 7
    ){
        Reward_Sound[getcurpl()] = 0;
        PlayWAV("staredit\\wav\\legendary drop.ogg");
    }
    if(
        RewardOption == 7
    ){
        DisplayText("\x13\x07[ 약화 ] \x11적 체력 - 20% \x04(3회)", (0));
    }
    // 7. 약화) 적 체력 - 20% (3회)
    // 8. 잔상) 적 공격력 - 30% (2회)
    if(
        Reward_Sound[getcurpl()] == 8
    ){
        Reward_Sound[getcurpl()] = 0;
        PlayWAV("staredit\\wav\\legendary drop.ogg");
    }
    if(
        RewardOption == 8
    ){
        DisplayText("\x13\x07[ 잔상 ] \x11적 공격력 - 30% \x04(2회)", (0));
    }
    // 8. 잔상) 적 공격력 - 30% (2회)
    // 9. 글레이브 웜)
    if(
        Reward_Sound[getcurpl()] == 9
    ){
        Reward_Sound[getcurpl()] = 0;
        PlayWAV("staredit\\wav\\UniqueDropOGG.ogg");
    }
    if(
        RewardOption == 9
    ){
        DisplayText("\x13\x08[ \x04글레이브 웜 \x08] \x1FF10 + J 참고", (0));
    }
    // 9. 글레이브 웜)
    // 10. 강화탄) 벌쳐 공격력 + 7 (1회)
    if(
        Reward_Sound[getcurpl()] == 10
    ){
        Reward_Sound[getcurpl()] = 0;
        PlayWAV("staredit\\wav\\legendary drop.ogg");
    }
    if(
        RewardOption == 10
    ){
        DisplayText("\x13\x07[ 강화탄 ] \x11벌쳐 공격력 + 7 \x04(1회)", (0));
    }
    // 10. 강화탄) 벌쳐 공격력 + 7 (1회)
    // 11. 펄스 캐넌)
    if(
        Reward_Sound[getcurpl()] == 11
    ){
        Reward_Sound[getcurpl()] = 0;
        PlayWAV("staredit\\wav\\UniqueDropOGG.ogg");
    }
    if(
        RewardOption == 11
    ){
        DisplayText("\x13\x08[ \x04펄스 캐넌 \x08] \x1FF10 + J 참고", (0));
    }
    // 11. 펄스 캐넌)
    // 12. 일격) 벌쳐 공격력 + 15 (1회)
    if(
        Reward_Sound[getcurpl()] == 12
    ){
        Reward_Sound[getcurpl()] = 0;
        PlayWAV("staredit\\wav\\legendary drop.ogg");
    }
    if(
        RewardOption == 12
    ){
        DisplayText("\x13\x07[ 일격 ] \x11벌쳐 공격력 + 15 \x04(1회)", (0));
    }
    // 12. 일격) 벌쳐 공격력 + 15 (1회)
    // 13. 네잎클로버) 스킨/오라 등장 확률 + 20% (영구)
    if(
        Reward_Sound[getcurpl()] == 13
    ){
        Reward_Sound[getcurpl()] = 0;
        PlayWAV("staredit\\wav\\legendary drop.ogg");
    }
    if(
        RewardOption == 13
    ){
        DisplayText("\x13\x07[ 네잎클로버 ] \x11스킨/오라 등장확률 + 20% \x04(영구)", (0));
    }
    // 13. 네잎클로버) 스킨/오라 등장 확률 + 20% (영구)
    // 14. 티켓) 룰렛 초기화 기회 + 1
    if(
        Reward_Sound[getcurpl()] == 14
    ){
        Reward_Sound[getcurpl()] = 0;
        PlayWAV("staredit\\wav\\legendary drop.ogg");
    }
    if(
        RewardOption == 14
    ){
        DisplayText("\x13\x07[ 티켓 ] \x11룰렛 초기화 기회 + 1", (0));
    }
    // 14. 티켓) 룰렛 초기화 기회 + 1
    // 15. 버스트 레이저)
    if(
        Reward_Sound[getcurpl()] == 15
    ){
        Reward_Sound[getcurpl()] = 0;
        PlayWAV("staredit\\wav\\UniqueDropOGG.ogg");
    }
    if(
        RewardOption == 15
    ){
        DisplayText("\x13\x08[ \x04버스트 레이저 \x08] \x1FF10 + J 참고", (0));
    }
    // 15. 버스트 레이저)
    // 0~30
}

function ClassicTriggerExec() {
}
function ClassicTriggerStarter() {
    //플레이어 1
    if (playerexist(0)){
        setcurpl(0);
    }
    //플레이어 2
    if (playerexist(1)){
        setcurpl(1);
    }
    //플레이어 3
    if (playerexist(2)){
        setcurpl(2);
    }
    //플레이어 4
    if (playerexist(3)){
        setcurpl(3);
    }
    //플레이어 5
    if (playerexist(4)){
        setcurpl(4);
    }
    //플레이어 6
    if (playerexist(5)){
        setcurpl(5);
    }
    //플레이어 7
    if (playerexist(6)){
        setcurpl(6);
    }
    //플레이어 8
    if (playerexist(7)){
        setcurpl(7);
    }
}
function WaitableTriggerExec() {
}
function onPluginStart() {
    sca.Init();
    randomize();
    // 옵션 개수 정하기 (옵션개수 - 1 만큼 대입)---------------------------------------------*************************************-----
    OptionCount = 78;
    RewardCount = 14;
    // 옵션 개수 정하기 (옵션개수 - 1 만큼 대입)---------------------------------------------*************************************-----
    
   auralist.auralists();
    
    // 머신샵 
    EUDPlayerLoop()();
        if (getcurpl() == 0) {
            MachineShop[getcurpl()] = epdread_epd(EPD(0x628438));
            CreateUnitWithProperties(1, (120), (53), (13), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
            hotkeyUnitEPD(MachineShop[getcurpl()],getcurpl(),2,0); 
            hotkeyUnitEPD(MachineShop[getcurpl()],getcurpl(),3,0);
        }
    EUDEndPlayerLoop();
    // 머신샵
    // 기본속업
    EUDPlayerLoop()();
        if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
            Vulture_Booster[getcurpl()] = 1;
        }
    EUDEndPlayerLoop();
    // 기본속업
    // 블랙 벌쳐스킨 생성
    bwrite(0x666778 + 14000 + 256 * 1, 10);
    dwwrite(0x666778 + 34000 + 256 * 4, 362);
    SkinBlackVulture = epdread_epd(EPD(0x628438));
    CreateUnit(1, (167), (26), (7));
    bwrite(0x666778 + 14000 + 256 * 1, 0);
    dwwrite(0x666778 + 34000 + 256 * 4, 86);
    팔레트(7,928,25);
    bwrite(0x666778 + 14000 + 928 * 1, 16);
    dwwrite(0x666778 + 34000 + 928 * 4, 368);
    if(
        Bring((7), (0), 1, (167), (64))
    ){
        if(
            SkinBlackVulture == EPD(0x59CCA8)
        ){
            BlackVultureIndex = 0;
        }
        else{
            BlackVultureIndex = (EPD(0x628298) - SkinBlackVulture)/84;
        }
    }
    // 블랙 벌쳐스킨 생성
    // 레인보우 스킨 생성
    bwrite(0x666778 + 14000 + 256 * 1, 0);
    dwwrite(0x666778 + 34000 + 256 * 4, 86);
    SkinRainbow = epdread_epd(EPD(0x628438));
    CreateUnit(1, (167), (39), (7));
    if(
        Bring((7), (0), 1, (167), (64))
    ){
        if(
            SkinRainbow == EPD(0x59CCA8)
        ){
            SkinRainbowIndex = 0;
        }
        else{
            SkinRainbowIndex = (EPD(0x628298) - SkinRainbow)/84;
        }
    } 
    // 레인보우 스킨 생성
    // 레인보우 아칸 오라 생성
    wwrite(0x665AC0 + 1696 + 244 * 2, 136);
    AuraRainbowArchon = epdread_epd(EPD(0x628438));
    CreateUnit(1, (167), (40), (7));
    if(
        Bring((7), (0), 1, (167), (64))
    ){
        if(
            AuraRainbowArchon == EPD(0x59CCA8)
        ){
            AuraRainbowArchonIndex = 0;
        }
        else{
            AuraRainbowArchonIndex = (EPD(0x628298) - AuraRainbowArchon)/84;
        }
    }
    wwrite(0x665AC0 + 1696 + 244 * 2, 256);
    bwrite(0x666778 + 14000 + 256 * 1, 0);
    dwwrite(0x666778 + 34000 + 256 * 4, 86);
    // 레인보우 아칸 오라 생성
    // VIP 오라 생성
    bwrite(0x666778 + 14000 + 983 * 1, 16);
    AuraVIP = epdread_epd(EPD(0x628438));
    CreateUnit(1, (113), (45), (7));
    bwrite(0x666778 + 14000 + 983 * 1, 9);
    // VIP 오라 생성

}
function beforeTriggerExec() {
    EUDPlayerLoop()();
        WaitableTriggerExec();
        ClassicTriggerExec();
    EUDEndPlayerLoop();
    ClassicTriggerStarter();
    // 레인보우 이펙트
    if(
        SkinRainbow != 0
    ){
        colorComputer += 1;
        if(
            colorComputer >= 13
        ){
            colorComputer = 0;
        }
        SetUnitColorEPD(SkinRainbow,colorComputer);
        SetUnitColorEPD(AuraRainbowArchon,colorComputer);
    }
    EUDPlayerLoop()();
        if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
            if(
                Vulture[getcurpl()] != 0 && 
                Bring((13), (0), 1, (PVulture[getcurpl()]), (64))
            ){
                if(
                    RainbowEnabled[getcurpl()] == 1 || 
                    Aura_RainbowArchonEnabled[getcurpl()] == 1
                ){
                    color[getcurpl()] += 1;
                    if(
                        color[getcurpl()] >= 13
                    ){
                        color[getcurpl()] = 0;
                    }
                }
                if(
                    RainbowEnabled[getcurpl()] == 1
                ){
                    SetUnitColorEPD(Vulture[getcurpl()],color[getcurpl()]);
                }
                if(
                    Aura_RainbowArchonEnabled[getcurpl()] == 1
                ){
                    if(
                        Bring((13), (0), 1, (114), (64)) && 
                        Aura_RainbowArchonP[getcurpl()] != 0 && 
                        Aura_RainbowArchonEnabled[getcurpl()] == 1
                    ){
                        SetUnitColorEPD(Aura_RainbowArchonP[getcurpl()],color[getcurpl()]);
                    }
                }
            }
        }
    EUDEndPlayerLoop();
    // 레인보우 이펙트
    EUDPlayerLoop()();
        if (getcurpl() == 0) {
            if(
                Deaths((13), (10), 1, (132)) && 
                Deaths((13), (10), 1, (209)) && 
                Deaths((13), (10), 1, (90))
            ){
                RandomOption[0] = 60;
            }
        }
    EUDEndPlayerLoop();
    // 특수제작 공격
    EUDPlayerLoop()();
        if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
            // SuzumuraAlrI
            if(
                SuzumuraAlrI[getcurpl()] == 1 && 
                bread(0x65FD00 + 14776 + PVulture[getcurpl()] * 1) == 53
            ){
                if(
                    bread_epd(Vulture[getcurpl()] + 0x04D / 4,  0x04D % 4) == 107 || 
                    bread_epd(Vulture[getcurpl()] + 0x04D / 4,  0x04D % 4) == 10
                ){
                    TargetUnitPositionX = wread_epd(Vulture[getcurpl()] + 0x058 / 4,  0x058 % 4);
                    TargetUnitPositionY = wread_epd(Vulture[getcurpl()] + 0x05A / 4,  0x05A % 4);
                }
                if(
                    bread_epd(Vulture[getcurpl()] + 0x055 / 4,  0x055 % 4) == 21
                ){
                    dwwrite(0x666778 + 34000 + 506 * 4, 380);
                    for(var i = 0 ; i < 4 ; i++){
                        SetLocation(15,TargetUnitPositionX + 16 * (1 + i),TargetUnitPositionY + 16 * (1 + i),57,57);
                        팔레트(getcurpl(),506,15);
                        SetLocation(15,TargetUnitPositionX - 16 * (1 + i),TargetUnitPositionY + 16 * (1 + i),57,57);
                        팔레트(getcurpl(),506,15);
                        SetLocation(15,TargetUnitPositionX + 16 * (1 + i),TargetUnitPositionY - 16 * (1 + i),57,57);
                        팔레트(getcurpl(),506,15);
                        SetLocation(15,TargetUnitPositionX - 16 * (1 + i),TargetUnitPositionY - 16 * (1 + i),57,57);
                        팔레트(getcurpl(),506,15);
                    }
                    dwwrite(0x666778 + 34000 + 506 * 4, 258);
                }
                if(
                    Bring((13), (0), 1, (PHoldFire[getcurpl()]), (24)) && 
                    bread_epd(Hold_fireunit[getcurpl()] + 0x055 / 4,  0x055 % 4) >= 21
                ){
                    TargetUnitPositionX = wread_epd(Hold_fireunit[getcurpl()] + 0x058 / 4,  0x058 % 4);
                    TargetUnitPositionY = wread_epd(Hold_fireunit[getcurpl()] + 0x05A / 4,  0x05A % 4);
                    dwwrite(0x666778 + 34000 + 506 * 4, 380);
                    for(var i = 0 ; i < 4 ; i++){
                        SetLocation(15,TargetUnitPositionX + 16 * (1 + i),TargetUnitPositionY + 16 * (1 + i),57,57);
                        팔레트(getcurpl(),506,15);
                        SetLocation(15,TargetUnitPositionX - 16 * (1 + i),TargetUnitPositionY + 16 * (1 + i),57,57);
                        팔레트(getcurpl(),506,15);
                        SetLocation(15,TargetUnitPositionX + 16 * (1 + i),TargetUnitPositionY - 16 * (1 + i),57,57);
                        팔레트(getcurpl(),506,15);
                        SetLocation(15,TargetUnitPositionX - 16 * (1 + i),TargetUnitPositionY - 16 * (1 + i),57,57);
                        팔레트(getcurpl(),506,15);
                    }
                    dwwrite(0x666778 + 34000 + 506 * 4, 258);
                }
            }
            // SuzumuraAlrI
            // IGO_Sera
            if(
                IGO_Sera[getcurpl()] == 1
            ){
                if(
                    bread(0x65FD00 + 14776 + PVulture[getcurpl()] * 1) == 28
                ){
                    if(
                        IGO_Sera_Attack == 0
                    ){
                        if(
                            bread_epd(Vulture[getcurpl()] + 0x04D / 4,  0x04D % 4) == 107 || 
                            bread_epd(Vulture[getcurpl()] + 0x04D / 4,  0x04D % 4) == 10
                        ){
                            TargetUnitPositionX = wread_epd(Vulture[getcurpl()] + 0x058 / 4,  0x058 % 4);
                            TargetUnitPositionY = wread_epd(Vulture[getcurpl()] + 0x05A / 4,  0x05A % 4);
                        }
                        if(
                            bread_epd(Vulture[getcurpl()] + 0x055 / 4,  0x055 % 4) == 20
                        ){
                            IGO_Sera_Attack = 1;
                            EUDPlayerLoop()();
                                if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                                    PlayWAV("sound\\Misc\\Explo5.wav");
                                    PlayWAV("sound\\Misc\\Explo5.wav");
                                }
                            EUDEndPlayerLoop();
                        }
                        if(
                            bread_epd(Hold_fireunit[getcurpl()] + 0x055 / 4,  0x055 % 4) == 20 && 
                            Bring((13), (0), 1, (PHoldFire[getcurpl()]), (24))
                        ){
                            IGO_Sera_Attack = 1;
                            EUDPlayerLoop()();
                                if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                                    PlayWAV("sound\\Misc\\Explo5.wav");
                                    PlayWAV("sound\\Misc\\Explo5.wav");
                                }
                            EUDEndPlayerLoop();
                        }
                    }
                }
                if(
                    bread(0x65FD00 + 14776 + PVulture[getcurpl()] * 1) == 28 && 
                    IGO_Sera_Attack >= 1
                ){
                    IGO_Sera_Attack += 1;
                    if(
                        IGO_Sera_Attack >= 13
                    ){
                        IGO_Sera_Attack = 0;
                    }
                    for(var i = 0 ; i < 5 ; i++){
                        if(
                            IGO_Sera_Attack == 3 + 2 * i
                        ){
                            dwwrite(0x666778 + 34000 + 533 * 4, 144);
                            SetLocation(15,TargetUnitPositionX + 25 * (1 + i),TargetUnitPositionY,57,57);
                            팔레트(getcurpl(),533,15);
                            SetLocation(15,TargetUnitPositionX,TargetUnitPositionY + 25 * (1 + i),57,57);
                            팔레트(getcurpl(),533,15);
                            SetLocation(15,TargetUnitPositionX,TargetUnitPositionY - 25 * (1 + i),57,57);
                            팔레트(getcurpl(),533,15);
                            SetLocation(15,TargetUnitPositionX - 25 * (1 + i),TargetUnitPositionY,57,57);
                            팔레트(getcurpl(),533,15);
                            dwwrite(0x666778 + 34000 + 533 * 4, 246);
                        }
                    }
                }
            }
            // IGO_Sera
        }
    EUDEndPlayerLoop();
    // 특수제작 공격
    // 벌쳐&카메라 로케이션 & 벌쳐쉴드회복
    EUDPlayerLoop()();
        if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
            if(
                Bring((13), (10), 1, (PVulture[getcurpl()]), (24))
            ){
                MoveLocation((PLoc[getcurpl()]), (PVulture[getcurpl()]), (13), (24));
                ModifyUnitShields(255, (PVulture[getcurpl()]), (13), (24), 100);
                if(
                    Deaths((13), (10), 1, (130))
                ){
                    MoveLocation((5), (PVulture[getcurpl()]), (13), (24));
                }
            }
        }
    EUDEndPlayerLoop();
    // 벌쳐&카메라 로케이션 & 벌쳐쉴드회복
    // 능력
    if(
        Switch((1), (2))
    ){
        // 하한, 상한선
        // 사거리
        if(
            dwread(0x6564E0 + 3984 + 19 * 4) > 153
        ){
            dwwrite(0x6564E0 + 3984 + 19 * 4, 153);
            EUDPlayerLoop()();
                if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                    Stat_RangeL = dwread(0x6564E0 + 3984 + 19 * 4);
                    Stat_RangeR = dwread(0x6564E0 + 3984 + 19 * 4);
                    Stat_RangeL = Stat_RangeL * 10000 / 32 / 10000;
                    Stat_RangeR = (Stat_RangeR * 10000 / 32) % 10000;
                    // 사거리표시
                    RangeDisplay = dwread(0x6564E0 + 3984 + 19 * 4);
                    tct.setTbl((247), 25, 1, "\x0D");
                    tct.setTbl((247), 25, 1, RangeDisplay * 10000 / 32 / 10000);
                    tct.setTbl((247), 27, 7, "\x0D\x0D\x0D\x0D\x0D\x0D\x0D");
                    tct.setTbl((247), 27, 7, RangeDisplay * 10000 / 32 % 10000);
                    // 사거리표시
                    DisplayText("\x13\x07사거리\x04가 상한선을 초과하여 \x1F4.78125 \x04로 고정됩니다.", (0));
                    PlayWAV("staredit\\wav\\siren.wav");
                }
            EUDEndPlayerLoop();
        }
        // 사거리
        // 방어
        if(
            bread(0x65FD00 + 456 + 12 * 1) > 8
        ){
            bwrite(0x65FD00 + 456 + 12 * 1, 8);
            EUDPlayerLoop()();
                if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                    Stat_Armor = bread(0x65FD00 + 456 + 12 * 1);
                    DisplayText("\x13\x07방어\x04가 상한선을 초과하여 \x1F8 \x04로 고정됩니다.", (0));
                    PlayWAV("staredit\\wav\\siren.wav");
                }
            EUDEndPlayerLoop();
        }
        // 방어
        // 이동속도
        if(
            dwread(0x6C9858 + 1696 + 70 * 4) > 1382
        ){
            dwwrite(0x6C9858 + 1696 + 70 * 4, 1382);
            EUDPlayerLoop()();
                if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                    Stat_Speed = dwread(0x6C9858 + 1696 + 70 * 4);
                    Stat_Speed = Stat_Speed * 100 / 325;
                    DisplayText("\x13\x07이동속도\x04가 상한선을 초과하여 \x1F425% \x04로 고정됩니다.", (0));
                    PlayWAV("staredit\\wav\\siren.wav");
                }
            EUDEndPlayerLoop();
        }
        // 이동속도
        // 하한, 상한선
        // 피 회복
        if(
            !MemoryEPD(Unit + 0x008 / 4, AtMost, HealthTotal)
        ){
            SetMemoryEPD(Unit + 0x008 / 4, SetTo, HealthTotal);
        }
        if(
            체력회복불가 == 0
        ){
            if(
                !MemoryEPD(Unit + 0x008 / 4, AtLeast, HealthTotal)
            ){
                SetMemoryEPD(Unit + 0x008 / 4, Add, HealthRegen * 1);
            }
        }
        // 피 회복
        // 쉴드 회복
        if(
            !MemoryEPD(Unit + 0x060 / 4, AtMost, ShieldTotal)
        ){
            SetMemoryEPD(Unit + 0x060 / 4, SetTo, ShieldTotal);
        }
        // 30. 건전지
        if(
            건전지 == 1 && 
            !MemoryEPD(Unit + 0x060 / 4, AtLeast, ShieldTotal)
        ){
            SetMemoryEPD(Unit + 0x060 / 4, Add, 21 * 1);
        }
        // 30. 건전지
        // 쉴드 회복
        // 29. 러시안 룰렛
        if(
            러시안룰렛 >= 1
        ){
            러시안룰렛 += 1;
            EUDPlayerLoop()();
                if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                    SetMemoryEPD(Vulture[getcurpl()] + 0x034 / 4, SetTo, 1);
                }
            EUDEndPlayerLoop();
        }
        if(
            러시안룰렛 == 60
        ){
            EUDPlayerLoop()();
                if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                    DisplayText("\n\n\n\n\x13\x1F[ 러시안 룰렛 ] \x04의 효과가 곧 발동합니다.\n\n\n\n\n\n", (0));
                    PlayWAV("staredit\\wav\\reloading.ogg");
                }
            EUDEndPlayerLoop();
        }
        if(
            러시안룰렛 == 100
        ){
            EUDPlayerLoop()();
                if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                    DisplayText("\n\n\n\n\x13\x17[ 3 ]\n\n\n\n\n\n", (0));
                    PlayWAV("staredit\\wav\\3s.wav");
                }
            EUDEndPlayerLoop();
        }
        if(
            러시안룰렛 == 140
        ){
            EUDPlayerLoop()();
                if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                    DisplayText("\n\n\n\n\x13\x11[ 2 ]\n\n\n\n\n\n", (0));
                    PlayWAV("staredit\\wav\\2s.wav");
                }
            EUDEndPlayerLoop();
        }
        if(
            러시안룰렛 == 180
        ){
            EUDPlayerLoop()();
                if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                    DisplayText("\n\n\n\n\x13\x08[ 1 ]\n\n\n\n\n\n", (0));
                    PlayWAV("staredit\\wav\\1s.wav");
                }
            EUDEndPlayerLoop();
        }
        if(
            러시안룰렛 == 220
        ){
            for(var i=0 ; i<6 ; i++){
                RandomNum = dwrand() % (5 + 1);
                if(
                    Bring((RandomNum), (0), 1, (230), (24))
                ){
                    KillUnitAt(255, (230), (24), (RandomNum));
                    러시안룰렛 = 0;
                    EUDPlayerLoop()();
                        if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                            if(
                                RandomNum == 0
                            ){
                                tct.print("\n\n\n\n\n\x13\x07", tct.str(0x57EEEB + 36 * 0), " \x04님이 \x08총에 맞았습니다.\n\n\n\n\n");
                            }
                            else{
                                if(
                                    RandomNum == 1
                                ){
                                    tct.print("\n\n\n\n\n\x13\x07", tct.str(0x57EEEB + 36 * 1), " \x04님이 \x08총에 맞았습니다.\n\n\n\n\n");
                                }
                                else{
                                    if(
                                        RandomNum == 2
                                    ){
                                        tct.print("\n\n\n\n\n\x13\x07", tct.str(0x57EEEB + 36 * 2), " \x04님이 \x08총에 맞았습니다.\n\n\n\n\n");
                                    }
                                    else{
                                        if(
                                            RandomNum == 3
                                        ){
                                            tct.print("\n\n\n\n\n\x13\x07", tct.str(0x57EEEB + 36 * 3), " \x04님이 \x08총에 맞았습니다.\n\n\n\n\n");
                                        }
                                        else{
                                            if(
                                                RandomNum == 4
                                            ){
                                                tct.print("\n\n\n\n\n\x13\x07", tct.str(0x57EEEB + 36 * 4), " \x04님이 \x08총에 맞았습니다.\n\n\n\n\n");
                                            }
                                            else{
                                                tct.print("\n\n\n\n\n\x13\x07", tct.str(0x57EEEB + 36 * 5), " \x04님이 \x08총에 맞았습니다.\n\n\n\n\n");
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    EUDEndPlayerLoop();
                    break;
                }
                i--;
            }
            EUDPlayerLoop()();
                if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                    SetMemoryEPD(Vulture[getcurpl()] + 0x034 / 4, SetTo, 1575);
                    PlayWAV("staredit\\wav\\pistol fire.ogg");
                    PlayWAV("staredit\\wav\\scream.ogg");
                }
            EUDEndPlayerLoop();
        }
        // 29. 러시안 룰렛
        // 37. 포문 개방
        if(
            dwread(0x6C9858 + 1696 + 70 * 4) > 1300 && 
            bread(0x6564E0 + 1200 + 19 * 1) == 127
        ){
            EUDPlayerLoop()();
                if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                    PlayWAV("sound\\Terran\\TANK\\TTaTra01.WAV");
                    DisplayText("\x13\x04이동 속도가 \x07400% \x04를 돌파하여 \x1F포문을 접습니다.", (0));
                }
            EUDEndPlayerLoop();
            bwrite(0x6564E0 + 1200 + 19 * 1, 20);
            포문개방취소 = 1;
        }
        // 37. 포문 개방
        // 49. 중상
        if(
            중상 == 1 && 
            Bring((18), (0), 1, (230), (24))
        ){
            중상 = 0;
            ModifyUnitHitPoints(255, (230), (18), (24), 30);
        }
        // 49. 중상
        // 75. 형님 사운드
        if(
            형님 == 1
        ){
            EUDPlayerLoop()();
                if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                    if(
                        Deaths((18), (0), 1, (PVulture[getcurpl()]))
                    ){
                        SetDeaths((18), (7), 0, (PVulture[getcurpl()]));
                        RandomNum = dwrand() % (2 + 1);
                        if(
                            RandomNum == 0
                        ){
                            EUDPlayerLoop()();
                                if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                                    PlayWAV("staredit\\wav\\manScream1.ogg");
                                }
                            EUDEndPlayerLoop();
                        }
                        else{
                            if(
                                RandomNum == 1
                            ){
                                EUDPlayerLoop()();
                                    if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                                        PlayWAV("staredit\\wav\\manScream2.ogg");
                                    }
                                EUDEndPlayerLoop();
                            }
                            else{
                                EUDPlayerLoop()();
                                    if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                                        PlayWAV("staredit\\wav\\manScream3.ogg");
                                    }
                                EUDEndPlayerLoop();
                            }
                        }
                    }
                }
            EUDEndPlayerLoop();
            if(
                bread_epd(Unit + 0x055 / 4,  0x055 % 4) >= 1 && 
                형님공격 == 0
            ){
                형님공격 = 1;
                RandomNum = dwrand() % (1 + 1);
                if(
                    RandomNum == 0
                ){
                    EUDPlayerLoop()();
                        if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                            PlayWAV("staredit\\wav\\assattack.ogg");
                        }
                    EUDEndPlayerLoop();
                }
                else{
                    EUDPlayerLoop()();
                        if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                            PlayWAV("staredit\\wav\\assattack2.ogg");
                        }
                    EUDEndPlayerLoop();
                }
            }
            if(
                bread_epd(Unit + 0x055 / 4,  0x055 % 4) == 0
            ){
                형님공격 = 0;
            }
        }
        // 75. 형님 사운드
    }
    // 능력
    // 초반 1회용 트리거
    // VIP 오라 인덱스 대입
    if(
        Bring((7), (0), 1, (113), (64)) && 
        AuraVIPIndex <= 1
    ){
        if(
            AuraVIP == EPD(0x59CCA8)
        ){
            AuraVIPIndex = 0;
        }
        else{
            AuraVIPIndex = (EPD(0x628298) - AuraVIP)/84;
        }
    }
    // VIP 오라 인덱스 대입
    // 무기스킨 스크립트
    if(
        ElapsedTime((10), 10)
    ){
        dwwrite(0x666778 + 34000 + 511 * 4, 264);
        dwwrite(0x666778 + 34000 + 522 * 4, 233);
        dwwrite(0x666778 + 34000 + 535 * 4, 243);
        bwrite(0x666778 + 14000 + 535 * 1, 17);
    }
    // 무기스킨 스크립트
    // 초반 1회용 트리거
    // X 시작
    if(
        Switch((15), (2))
    ){
        var Loading;
        EUDPlayerLoop()();
            if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                if(
                    Loading == 0
                ){
                    if(
                        autoStart >= 1
                    ){
                        autoStartDisplay = 10 - autoStart / 48;
                        Roulette_Again_Display = Roulette_Again / 137;
                        tct.chatAnnouncement("\x08", tct.str(0x57EEEB + 36 * 0), "\x04은(는) \x07X\x04 를 꾹 눌러 시작하세요 \x07", autoStartDisplay, "초          \x11다시 굴리기 \x04: \x07E \x04(남은 기회 : \x17", Roulette_Again_Display, "\x04)");
                    }
                    else{
                        tct.chatAnnouncement("\x08", tct.str(0x57EEEB + 36 * 0), "\x04은(는) \x07X\x04 를 꾹 눌러 시작하세요          \x11다시 굴리기 \x04: \x07E \x04(남은 기회 : \x17", Roulette_Again_Display, "\x04)");
                    }
                }
                if(
                    Loading >= 1
                ){
                    tct.chatAnnouncement("\x07Loading : \x04", Loading, "%");
                }
            }
        EUDEndPlayerLoop();
        if(
            Deaths((0), (10), 1, (209))
        ){
            Loading += 4;
            autoStart = 0;
        }
        else{
            for(var i = 0 ; i < 4 ; i++){
                if(
                    Loading >= 1
                ){
                    Loading -= 1;
                }
            }
        }
        if(
            Loading >= 100 || 
            autoStart >= 480
        ){
            SetSwitch((15), (5));
            SetSwitch((16), (5));
            SetSwitch((1), (4));
            Loading = 0;
        }
        if(
            autoStart >= 1
        ){
            autoStart += 1;
        }
        if(
            Deaths((0), (10), 4, (207)) && 
            Roulette_Again >= 137
        ){
            Roulette_Again -= 137;
            SetSwitch((16), (4));
            SetSwitch((15), (5));
            Roulette_Timer = 0;
            for(var i = 0 ; i < 8 ; i++){
                RandomOption[i] = 0;
            }
        }
    }
    // X 시작
    // 벌쳐 피격
    EUDPlayerLoop()();
        if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
            if(
                Bring((13), (10), 1, (19), (24))
            ){
                // 탄환 맞음
                if(
                    Bring((6), (0), 1, (195), (PLoc[getcurpl()]))
                ){
                    if(
                        Deaths((6), (10), 3, (193))
                    ){
                        KillUnitAt(255, (195), (PLoc[getcurpl()]), (6));
                        SetDeaths((13), (8), 25, (197));
                        wwrite(0x665AC0 + 1696 + 380 * 2, 427);
                        CreateUnit(1, (33), (PLoc[getcurpl()]), (6));
                        KillUnit((33), (6));
                    }
                }
                if(
                    MemoryEPD(Vulture[getcurpl()] + 0x08/4, (1), 128)
                ){
                    SetDeaths((13), (7), 0, (197));
                    KillUnitAt(1, (19), (24), (13));
                    SetDeaths((13), (8), 1, (19));
                }
                if(
                    Deaths((13), (0), 10, (197))
                ){
                    while(
                        Deaths((13), (0), 10, (197))
                    ){
                        SetDeaths((13), (9), 10, (197));
                        SetMemoryEPD(Vulture[getcurpl()] + 0x08/4, (9), 2560);
                    }
                }
                else{
                    while(
                        Deaths((13), (0), 1, (197))
                    ){
                        SetDeaths((13), (9), 1, (197));
                        SetMemoryEPD(Vulture[getcurpl()] + 0x08/4, (9), 256);
                    }
                }
                // 탄환 맞음
            }
        }
    EUDEndPlayerLoop();
    // 벌쳐 피격
    // 오라&스킨 탈부착
    EUDPlayerLoop()();
        if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
            // 오라 해제
            if(
                UnitClickCheck(getcurpl(),200)
            ){
                if(
                    Deaths((13), (0), 1, (179))
                ){
                    SetDeaths((13), (7), 0, (179));
                    SetDeaths((13), (7), 1, (180));
                    GiveUnits(1, (230), (7), (51), (6));
                    GiveUnits(1, (230), (6), (51), (7));
                    PlayWAV("sound\\Misc\\PBldgPlc.wav");
                    if(
                        Bring((13), (0), 1, (230), (24))
                    ){
                        CenterView((PLoc[getcurpl()]));
                    }
                    DisplayText("\x13\x1C오라\x04가 \x08해제\x04되었습니다.", (0));
                }
                else{
                    GiveUnits(1, (230), (7), (51), (6));
                    GiveUnits(1, (230), (6), (51), (7));
                    PlayWAV("sound\\Misc\\PError.WAV");
                    DisplayText("\x13\x07장착\x04된 \x1C오라\x04가 없습니다.", (0));
                }
            }
            // 오라 해제
            // 마엘 오라
            if(
                UnitClickCheck(getcurpl(),201)
            ){
                if(
                    Deaths((13), (10), 1, (109))
                ){
                    SetDeaths((13), (7), 1, (179));
                    SetDeaths((13), (7), 1, (180));
                    GiveUnits(1, (230), (7), (60), (6));
                    GiveUnits(1, (230), (6), (60), (7));
                    PlayWAV("sound\\Misc\\PBldgPlc.wav");
                    if(
                        Bring((13), (0), 1, (230), (24))
                    ){
                        CenterView((PLoc[getcurpl()]));
                    }
                    DisplayText("\x13\x1C오라\x04가 \x07장착\x04되었습니다.", (0));
                }
                else{
                    GiveUnits(1, (230), (7), (60), (6));
                    GiveUnits(1, (230), (6), (60), (7));
                    PlayWAV("sound\\Misc\\PError.WAV");
                    DisplayText("\n\x13\x04이 \x1C오라\x04를 \x07장착\x04할 수 없습니다.\n\x13\x1C획득 조건 \x04- \x08[ \x04마엘 오라 \x08] \x04옵션이 뜬 라운드의 클리어 영상을 인증받음\n\n", (0));
                }
            }
            // 마엘 오라
            // 아칸 오라
            if(
                UnitClickCheck(getcurpl(),202)
            ){
                if(
                    Deaths((13), (10), 1, (114))
                ){
                    SetDeaths((13), (7), 2, (179));
                    SetDeaths((13), (7), 1, (180));
                    GiveUnits(1, (230), (7), (61), (6));
                    GiveUnits(1, (230), (6), (61), (7));
                    PlayWAV("sound\\Misc\\PBldgPlc.wav");
                    if(
                        Bring((13), (0), 1, (230), (24))
                    ){
                        CenterView((PLoc[getcurpl()]));
                    }
                    Aura_RainbowArchonEnabled[getcurpl()] = 0;
                    DisplayText("\x13\x1C오라\x04가 \x07장착\x04되었습니다.", (0));
                }
                else{
                    GiveUnits(1, (230), (7), (61), (6));
                    GiveUnits(1, (230), (6), (61), (7));
                    PlayWAV("sound\\Misc\\PError.WAV");
                    DisplayText("\n\x13\x04이 \x1C오라\x04를 \x07장착\x04할 수 없습니다.\n\x13\x1C획득 조건 \x04- \x11\x08[ \x04아칸 오라 \x08] \x04옵션이 뜬 라운드의 클리어 영상을 인증받음\n", (0));
                }
            }
            if(
                ClassO[getcurpl()] == 1
            ){
                if(
                    ClassOEffect >= 1
                ){
                    ClassOEffect -= 1;
                }
                if(
                    Bring((13), (0), 1, (114), (24)) && 
                    MemoryEPD(Vulture[getcurpl()] + 0x038 / 4, AtLeast, 870) && 
                    ClassOEffect == 0
                ){
                    ClassOEffect = 24;
                    wwrite(0x665AC0 + 1696 + 380 * 2, 391);
                    CreateUnit(1, (33), (PLoc[getcurpl()]), (13));
                    KillUnit((33), (13));
                }
            }
            // 아칸 오라
            // 땡스
            if(
                UnitClickCheck(getcurpl(),203)
            ){
                if(
                    Deaths((13), (10), 1, (123))
                ){
                    SetDeaths((13), (7), 3, (179));
                    SetDeaths((13), (7), 1, (180));
                    GiveUnits(1, (230), (7), (62), (6));
                    GiveUnits(1, (230), (6), (62), (7));
                    // SuzumuraAlRI
                    if(
                        SuzumuraAlrI[getcurpl()] == 1
                    ){
                        bwrite(0x65FD00 + 14776 + PVulture[getcurpl()] * 1, 53);
                        bwrite(0x65FD00 + 14776 + PHoldFire[getcurpl()] * 1, 53);
                    }
                    // SuzumuraAlRI
                    // IGO_Sera
                    if(
                        IGO_Sera[getcurpl()] == 1
                    ){
                        bwrite(0x65FD00 + 14776 + PVulture[getcurpl()] * 1, 28);
                        bwrite(0x65FD00 + 14776 + PHoldFire[getcurpl()] * 1, 28);
                    }
                    // IGO_Sera
                    PlayWAV("sound\\Misc\\PBldgPlc.wav");
                    if(
                        Bring((13), (0), 1, (230), (24))
                    ){
                        CenterView((PLoc[getcurpl()]));
                    }
                    DisplayText("\x13\x1C오라\x04가 \x07장착\x04되었습니다.", (0));
                }
                else{
                    GiveUnits(1, (230), (7), (62), (6));
                    GiveUnits(1, (230), (6), (62), (7));
                    PlayWAV("sound\\Misc\\PError.WAV");
                    DisplayText("\n\x13\x04이 \x1C오라\x04를 \x07장착\x04할 수 없습니다.\n\x13\x1C획득 조건 \x04- 맵 테스트 지속적인 참여, 버그 제보 등 맵 제작에 기여\n", (0));
                }
            }
            // 땡스
            // 스페셜 땡스
            if(
                UnitClickCheck(getcurpl(),204)
            ){
                if(
                    Deaths((13), (10), 1, (111))
                ){
                    SetDeaths((13), (7), 4, (179));
                    SetDeaths((13), (7), 1, (180));
                    GiveUnits(1, (230), (7), (15), (6));
                    GiveUnits(1, (230), (6), (15), (7));
                    PlayWAV("sound\\Misc\\PBldgPlc.wav");
                    if(
                        Bring((13), (0), 1, (230), (24))
                    ){
                        CenterView((PLoc[getcurpl()]));
                    }
                    DisplayText("\x13\x1C오라\x04가 \x07장착\x04되었습니다.", (0));
                }
                else{
                    GiveUnits(1, (230), (7), (15), (6));
                    GiveUnits(1, (230), (6), (15), (7));
                    PlayWAV("sound\\Misc\\PError.WAV");
                    DisplayText("\n\x13\x04이 \x1C오라\x04를 \x07장착\x04할 수 없습니다.\n\x13\x1C획득 조건 \x04- 맵 테스트 지속적인 참여, 버그 제보 등 맵 제작에 \x1F큰 \x04기여\n", (0));
                }
            }
            // 스페셜 땡스
            // VIP 오라
            if(
                UnitClickCheck(getcurpl(),AuraVIPIndex)
            ){
                if(
                    Deaths((13), (10), 1, (113))
                ){
                    SetDeaths((13), (7), 5, (179));
                    SetDeaths((13), (7), 1, (180));
                    GiveUnits(1, (230), (7), (45), (6));
                    GiveUnits(1, (230), (6), (45), (7));
                    PlayWAV("sound\\Misc\\PBldgPlc.wav");
                    if(
                        Bring((13), (0), 1, (230), (24))
                    ){
                        CenterView((PLoc[getcurpl()]));
                    }
                    DisplayText("\x13\x1C오라\x04가 \x07장착\x04되었습니다.", (0));
                }
                else{
                    GiveUnits(1, (230), (7), (45), (6));
                    GiveUnits(1, (230), (6), (45), (7));
                    PlayWAV("sound\\Misc\\PError.WAV");
                    DisplayText("\n\x13\x04이 \x1C오라\x04를 \x07장착\x04할 수 없습니다.\n\x13\x1C획득 조건 \x04- \x11블랙벌쳐, 아칸오라, 마엘오라, 뮤탈 및 레이스 스킨 모두 소유\n", (0));
                }
            }
            // VIP 오라
            // 스킨 해제
            if(
                UnitClickCheck(getcurpl(),299)
            ){
                if(
                    Skin_Select[getcurpl()] >= 1 || 
                    RainbowEnabled[getcurpl()] >= 1
                ){
                    Skin_Select[getcurpl()] = 0;
                    RainbowEnabled[getcurpl()] = 0;
                    GiveUnits(1, (230), (7), (68), (6));
                    GiveUnits(1, (230), (6), (68), (7));
                    PlayWAV("sound\\Misc\\PBldgPlc.wav");
                    DisplayText("\x13\x1C스킨\x04이 \x08해제\x04되었습니다.", (0));
                    if(
                        Vulture[getcurpl()] != 0 && 
                        Bring((13), (0), 1, (PVulture[getcurpl()]), (64))
                    ){
                        SetUnitColorEPD(Vulture[getcurpl()],Pcolor[getcurpl()]);
                    }
                    // 바로적용
                    if(
                        Bring((13), (0), 1, (230), (24))
                    ){
                        Vulture_Hitpoints[getcurpl()] = dwread_epd(Vulture[getcurpl()] + 0x008 / 4);
                        RemoveUnit((PVulture[getcurpl()]), (13));
                        Vulture[getcurpl()] = epdread_epd(EPD(0x628438));
                        wwrite(0x665AC0 + 1696 + 244 * 2, 256);
                        bwrite(0x666778 + 14000 + 256 * 1, 0);
                        dwwrite(0x666778 + 34000 + 256 * 4, 86);
                        CreateUnit(1, (PVulture[getcurpl()]), (PLoc[getcurpl()]), (13));
                        SetMemoryEPD(Vulture[getcurpl()] + 0x008 / 4, SetTo, Vulture_Hitpoints[getcurpl()]);
                        if(
                            Bring((13), (0), 1, (230), (24))
                        ){
                            CenterView((PLoc[getcurpl()]));
                        }
                        // 부스터 조절
                        if(
                            Vulture_Booster[getcurpl()] == 1
                        ){
                            SetMemoryEPD(Vulture[getcurpl()] + 0x034 / 4, SetTo, 1575);
                            wwrite_epd(Vulture[getcurpl()] + 0x048 / 4,  0x048 % 4, 46);
                            bwrite_epd(Vulture[getcurpl()] + 0x022 / 4,  0x022 % 4, 50);
                            if(
                                Memory(0x57F1B0, Exactly, (getcurpl()))
                            ){
                                btnPtr, btnPos = EPD(0x5187EC) + 57, 5 * 5;
                                dwadd_epd(btnPtr, 0);
                                btnPos += epdread_epd(btnPtr);
                                oldCP = getcurpl();
                                DoActions(list(
                                SetMemory(0x6509B0, SetTo, btnPos),
                                SetDeaths(CurrentPlayer, SetTo, 24576007, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4361824, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4338864, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 327685, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 1396, 0),
                                SetMemory(0x6509B0, SetTo, oldCP),
                                ));
                            }
                        }
                        else{
                            SetMemoryEPD(Vulture[getcurpl()] + 0x034 / 4, SetTo, 1050);
                            wwrite_epd(Vulture[getcurpl()] + 0x048 / 4,  0x048 % 4, 23);
                            bwrite_epd(Vulture[getcurpl()] + 0x022 / 4,  0x022 % 4, 25);
                            if(
                                Memory(0x57F1B0, Exactly, (getcurpl()))
                            ){
                                btnPtr, btnPos = EPD(0x5187EC) + 57, 5 * 5;
                                dwadd_epd(btnPtr, 0);
                                btnPos += epdread_epd(btnPtr);
                                oldCP = getcurpl();
                                DoActions(list(
                                SetMemory(0x6509B0, SetTo, btnPos),
                                SetDeaths(CurrentPlayer, SetTo, 24510471, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4361824, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4338864, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 327685, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 1395, 0),
                                SetMemory(0x6509B0, SetTo, oldCP),
                                ));
                            }
                        }
                        // 부스터 조절
                        hotkeyUnitEPD(Vulture[getcurpl()],getcurpl(),1,0);
                    }
                    // 바로적용
                }
                else{
                    GiveUnits(1, (230), (7), (68), (6));
                    GiveUnits(1, (230), (6), (68), (7));
                    PlayWAV("sound\\Misc\\PError.WAV");
                    DisplayText("\x13\x07장착\x04된 \x1C스킨\x04이 없습니다.", (0));
                }
            }
            // 스킨 해제
            // 스카웃
            if(
                UnitClickCheck(getcurpl(),300)
            ){
                if(
                    Skin_Scout[getcurpl()] >= 0
                ){
                    Skin_Select[getcurpl()] = 1;
                    GiveUnits(1, (230), (7), (67), (6));
                    GiveUnits(1, (230), (6), (67), (7));
                    PlayWAV("sound\\Misc\\PBldgPlc.wav");
                    DisplayText("\x13\x1C스킨\x04이 \x07장착\x04되었습니다.", (0));
                    // 바로적용
                    if(
                        Bring((13), (0), 1, (230), (24))
                    ){
                        Vulture_Hitpoints[getcurpl()] = dwread_epd(Vulture[getcurpl()] + 0x008 / 4);
                        RemoveUnit((PVulture[getcurpl()]), (13));
                        Vulture[getcurpl()] = epdread_epd(EPD(0x628438));
                        wwrite(0x665AC0 + 1696 + 244 * 2, 140);
                        // IGO_Sera
                        if(
                            IGO_Sera[getcurpl()] == 1
                        ){
                            bwrite(0x666778 + 14000 + 929 * 1, 16);
                            wwrite(0x665AC0 + 1696 + 244 * 2, 929);
                            dwwrite(0x666778 + 34000 + 141 * 4, 269);
                        }
                        // IGO_Sera
                        CreateUnit(1, (PVulture[getcurpl()]), (PLoc[getcurpl()]), (13));
                        dwwrite(0x666778 + 34000 + 141 * 4, 275);
                        wwrite(0x665AC0 + 1696 + 244 * 2, 256);
                        SetMemoryEPD(Vulture[getcurpl()] + 0x008 / 4, SetTo, Vulture_Hitpoints[getcurpl()]);
                        if(
                            Bring((13), (0), 1, (230), (24))
                        ){
                            CenterView((PLoc[getcurpl()]));
                        }
                        // 부스터 조절
                        if(
                            Vulture_Booster[getcurpl()] == 1
                        ){
                            SetMemoryEPD(Vulture[getcurpl()] + 0x034 / 4, SetTo, 1575);
                            wwrite_epd(Vulture[getcurpl()] + 0x048 / 4,  0x048 % 4, 46);
                            bwrite_epd(Vulture[getcurpl()] + 0x022 / 4,  0x022 % 4, 60);
                            if(
                                Memory(0x57F1B0, Exactly, (getcurpl()))
                            ){
                                btnPtr, btnPos = EPD(0x5187EC) + 57, 5 * 5;
                                dwadd_epd(btnPtr, 0);
                                btnPos += epdread_epd(btnPtr);
                                oldCP = getcurpl();
                                DoActions(list(
                                SetMemory(0x6509B0, SetTo, btnPos),
                                SetDeaths(CurrentPlayer, SetTo, 24576007, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4361824, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4338864, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 327685, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 1396, 0),
                                SetMemory(0x6509B0, SetTo, oldCP),
                                ));
                            }
                        }
                        else{
                            SetMemoryEPD(Vulture[getcurpl()] + 0x034 / 4, SetTo, 1050);
                            wwrite_epd(Vulture[getcurpl()] + 0x048 / 4,  0x048 % 4, 23);
                            bwrite_epd(Vulture[getcurpl()] + 0x022 / 4,  0x022 % 4, 28);
                            if(
                                Memory(0x57F1B0, Exactly, (getcurpl()))
                            ){
                                btnPtr, btnPos = EPD(0x5187EC) + 57, 5 * 5;
                                dwadd_epd(btnPtr, 0);
                                btnPos += epdread_epd(btnPtr);
                                oldCP = getcurpl();
                                DoActions(list(
                                SetMemory(0x6509B0, SetTo, btnPos),
                                SetDeaths(CurrentPlayer, SetTo, 24510471, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4361824, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4338864, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 327685, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 1395, 0),
                                SetMemory(0x6509B0, SetTo, oldCP),
                                ));
                            }
                        }
                        // 부스터 조절
                        hotkeyUnitEPD(Vulture[getcurpl()],getcurpl(),1,0);
                    }
                    // 바로적용
                }
                else{
                    GiveUnits(1, (230), (7), (67), (6));
                    GiveUnits(1, (230), (6), (67), (7));
                    PlayWAV("sound\\Misc\\PError.WAV");
                    DisplayText("\n\x13\x04이 \x1C스킨\x04을 \x07장착\x04할 수 없습니다.\n\x13\x1C획득 조건 \x04- 미정\n", (0));
                }
            }
            if(
                Skin_Scout_Effect[getcurpl()] >= 1
            ){
                Skin_Scout_Effect[getcurpl()] -= 1;
            }
            if(
                Skin_Select[getcurpl()] == 1 && 
                Bring((13), (0), 1, (230), (24)) && 
                MemoryEPD(Vulture[getcurpl()] + 0x038 / 4, AtLeast, 870) && 
                Skin_Scout_Effect[getcurpl()] == 0 && 
                Bring((13), (10), 1, (113), (64))
            ){
                Skin_Scout_Effect[getcurpl()] = 5;
                wwrite(0x665AC0 + 1696 + 380 * 2, 512);
                bwrite(0x666778 + 14000 + 512 * 1, 16);
                CreateUnit(1, (33), (PLoc[getcurpl()]), (13));
                bwrite(0x666778 + 14000 + 512 * 1, 13);
                KillUnit((33), (13));
            }
            // 스카웃
            // 레이스
            if(
                UnitClickCheck(getcurpl(),301)
            ){
                if(
                    Skin_Wraith[getcurpl()] == 1
                ){
                    Skin_Select[getcurpl()] = 2;
                    GiveUnits(1, (230), (7), (70), (6));
                    GiveUnits(1, (230), (6), (70), (7));
                    PlayWAV("sound\\Misc\\PBldgPlc.wav");
                    DisplayText("\x13\x1C스킨\x04이 \x07장착\x04되었습니다.", (0));
                    // 바로적용
                    if(
                        Bring((13), (0), 1, (230), (24))
                    ){
                        Vulture_Hitpoints[getcurpl()] = dwread_epd(Vulture[getcurpl()] + 0x008 / 4);
                        RemoveUnit((PVulture[getcurpl()]), (13));
                        Vulture[getcurpl()] = epdread_epd(EPD(0x628438));
                        wwrite(0x665AC0 + 1696 + 244 * 2, 243);
                        CreateUnit(1, (PVulture[getcurpl()]), (PLoc[getcurpl()]), (13));
                        wwrite(0x665AC0 + 1696 + 244 * 2, 256);
                        SetMemoryEPD(Vulture[getcurpl()] + 0x008 / 4, SetTo, Vulture_Hitpoints[getcurpl()]);
                        if(
                            Bring((13), (0), 1, (230), (24))
                        ){
                            CenterView((PLoc[getcurpl()]));
                        }
                        // 부스터 조절
                        if(
                            Vulture_Booster[getcurpl()] == 1
                        ){
                            SetMemoryEPD(Vulture[getcurpl()] + 0x034 / 4, SetTo, 1575);
                            wwrite_epd(Vulture[getcurpl()] + 0x048 / 4,  0x048 % 4, 46);
                            bwrite_epd(Vulture[getcurpl()] + 0x022 / 4,  0x022 % 4, 60);
                            if(
                                Memory(0x57F1B0, Exactly, (getcurpl()))
                            ){
                                btnPtr, btnPos = EPD(0x5187EC) + 57, 5 * 5;
                                dwadd_epd(btnPtr, 0);
                                btnPos += epdread_epd(btnPtr);
                                oldCP = getcurpl();
                                DoActions(list(
                                SetMemory(0x6509B0, SetTo, btnPos),
                                SetDeaths(CurrentPlayer, SetTo, 24576007, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4361824, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4338864, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 327685, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 1396, 0),
                                SetMemory(0x6509B0, SetTo, oldCP),
                                ));
                            }
                        }
                        else{
                            SetMemoryEPD(Vulture[getcurpl()] + 0x034 / 4, SetTo, 1050);
                            wwrite_epd(Vulture[getcurpl()] + 0x048 / 4,  0x048 % 4, 23);
                            bwrite_epd(Vulture[getcurpl()] + 0x022 / 4,  0x022 % 4, 28);
                            if(
                                Memory(0x57F1B0, Exactly, (getcurpl()))
                            ){
                                btnPtr, btnPos = EPD(0x5187EC) + 57, 5 * 5;
                                dwadd_epd(btnPtr, 0);
                                btnPos += epdread_epd(btnPtr);
                                oldCP = getcurpl();
                                DoActions(list(
                                SetMemory(0x6509B0, SetTo, btnPos),
                                SetDeaths(CurrentPlayer, SetTo, 24510471, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4361824, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4338864, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 327685, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 1395, 0),
                                SetMemory(0x6509B0, SetTo, oldCP),
                                ));
                            }
                        }
                        // 부스터 조절
                        hotkeyUnitEPD(Vulture[getcurpl()],getcurpl(),1,0);
                    }
                    // 바로적용
                }
                else{
                    GiveUnits(1, (230), (7), (70), (6));
                    GiveUnits(1, (230), (6), (70), (7));
                    PlayWAV("sound\\Misc\\PError.WAV");
                    DisplayText("\n\x13\x04이 \x1C스킨\x04을 \x07장착\x04할 수 없습니다.\n\x13\x1C획득 조건 \x04- \x08[ \x04레이스 스킨 \x08] \x04옵션이 뜬 라운드의 클리어 영상을 인증받음\n", (0));
                }
            }
            if(
                Skin_Wraith_Smoke[getcurpl()] >= 1
            ){
                Skin_Wraith_Smoke[getcurpl()] -= 1;
            }
            if(
                Skin_Select[getcurpl()] == 2 && 
                Bring((13), (0), 1, (230), (24)) && 
                MemoryEPD(Vulture[getcurpl()] + 0x038 / 4, AtLeast, 870) && 
                Skin_Wraith_Smoke[getcurpl()] == 0
            ){
                Skin_Wraith_Smoke[getcurpl()] = 5;
                wwrite(0x665AC0 + 1696 + 380 * 2, 441);
                CreateUnit(1, (33), (PLoc[getcurpl()]), (13));
                KillUnit((33), (13));
            }
            // 레이스
            // 뮤탈
            if(
                UnitClickCheck(getcurpl(),302)
            ){
                if(
                    Skin_Mutalisk[getcurpl()] == 1
                ){
                    Skin_Select[getcurpl()] = 3;
                    GiveUnits(1, (230), (7), (22), (6));
                    GiveUnits(1, (230), (6), (22), (7));
                    PlayWAV("sound\\Misc\\PBldgPlc.wav");
                    DisplayText("\x13\x1C스킨\x04이 \x07장착\x04되었습니다.", (0));
                    // 바로적용
                    if(
                        Bring((13), (0), 1, (230), (24))
                    ){
                        Vulture_Hitpoints[getcurpl()] = dwread_epd(Vulture[getcurpl()] + 0x008 / 4);
                        RemoveUnit((PVulture[getcurpl()]), (13));
                        Vulture[getcurpl()] = epdread_epd(EPD(0x628438));
                        wwrite(0x665AC0 + 1696 + 244 * 2, 38);
                        CreateUnit(1, (PVulture[getcurpl()]), (PLoc[getcurpl()]), (13));
                        wwrite(0x665AC0 + 1696 + 244 * 2, 256);
                        SetMemoryEPD(Vulture[getcurpl()] + 0x008 / 4, SetTo, Vulture_Hitpoints[getcurpl()]);
                        if(
                            Bring((13), (0), 1, (230), (24))
                        ){
                            CenterView((PLoc[getcurpl()]));
                        }
                        // 부스터 조절
                        if(
                            Vulture_Booster[getcurpl()] == 1
                        ){
                            SetMemoryEPD(Vulture[getcurpl()] + 0x034 / 4, SetTo, 1575);
                            wwrite_epd(Vulture[getcurpl()] + 0x048 / 4,  0x048 % 4, 46);
                            bwrite_epd(Vulture[getcurpl()] + 0x022 / 4,  0x022 % 4, 60);
                            if(
                                Memory(0x57F1B0, Exactly, (getcurpl()))
                            ){
                                btnPtr, btnPos = EPD(0x5187EC) + 57, 5 * 5;
                                dwadd_epd(btnPtr, 0);
                                btnPos += epdread_epd(btnPtr);
                                oldCP = getcurpl();
                                DoActions(list(
                                SetMemory(0x6509B0, SetTo, btnPos),
                                SetDeaths(CurrentPlayer, SetTo, 24576007, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4361824, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4338864, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 327685, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 1396, 0),
                                SetMemory(0x6509B0, SetTo, oldCP),
                                ));
                            }
                        }
                        else{
                            SetMemoryEPD(Vulture[getcurpl()] + 0x034 / 4, SetTo, 1050);
                            wwrite_epd(Vulture[getcurpl()] + 0x048 / 4,  0x048 % 4, 23);
                            bwrite_epd(Vulture[getcurpl()] + 0x022 / 4,  0x022 % 4, 28);
                            if(
                                Memory(0x57F1B0, Exactly, (getcurpl()))
                            ){
                                btnPtr, btnPos = EPD(0x5187EC) + 57, 5 * 5;
                                dwadd_epd(btnPtr, 0);
                                btnPos += epdread_epd(btnPtr);
                                oldCP = getcurpl();
                                DoActions(list(
                                SetMemory(0x6509B0, SetTo, btnPos),
                                SetDeaths(CurrentPlayer, SetTo, 24510471, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4361824, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4338864, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 327685, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 1395, 0),
                                SetMemory(0x6509B0, SetTo, oldCP),
                                ));
                            }
                        }
                        // 부스터 조절
                        hotkeyUnitEPD(Vulture[getcurpl()],getcurpl(),1,0);
                    }
                    // 바로적용
                }
                else{
                    GiveUnits(1, (230), (7), (22), (6));
                    GiveUnits(1, (230), (6), (22), (7));
                    PlayWAV("sound\\Misc\\PError.WAV");
                    DisplayText("\n\x13\x04이 \x1C스킨\x04을 \x07장착\x04할 수 없습니다.\n\x13\x1C획득 조건 \x04- \x08[ \x04뮤탈 스킨 \x08] \x04옵션이 뜬 라운드의 클리어 영상을 인증받음\n", (0));
                }
            }
            if(
                Skin_Mutalisk_Effect[getcurpl()] >= 1
            ){
                Skin_Mutalisk_Effect[getcurpl()] -= 1;
            }
            if(
                Skin_Select[getcurpl()] == 3 && 
                Bring((13), (0), 1, (230), (24)) && 
                MemoryEPD(Vulture[getcurpl()] + 0x038 / 4, AtLeast, 870) && 
                Skin_Mutalisk_Effect[getcurpl()] == 0
            ){
                Skin_Mutalisk_Effect[getcurpl()] = 5;
                wwrite(0x665AC0 + 1696 + 380 * 2, 37);
                CreateUnit(1, (33), (PLoc[getcurpl()]), (13));
                KillUnit((33), (13));
            }
            // 뮤탈
            // 블랙 벌쳐
            if(
                UnitClickCheck(getcurpl(),BlackVultureIndex)
            ){
                if(
                    Skin_BlackVulture[getcurpl()] == 1
                ){
                    Skin_Select[getcurpl()] = 4;
                    GiveUnits(1, (230), (7), (26), (6));
                    GiveUnits(1, (230), (6), (26), (7));
                    PlayWAV("sound\\Misc\\PBldgPlc.wav");
                    DisplayText("\x13\x1C스킨\x04이 \x07장착\x04되었습니다.", (0));
                    // 바로적용
                    if(
                        Bring((13), (0), 1, (230), (24))
                    ){
                        Vulture_Hitpoints[getcurpl()] = dwread_epd(Vulture[getcurpl()] + 0x008 / 4);
                        RemoveUnit((PVulture[getcurpl()]), (13));
                        Vulture[getcurpl()] = epdread_epd(EPD(0x628438));
                        wwrite(0x665AC0 + 1696 + 244 * 2, 256);
                        bwrite(0x666778 + 14000 + 256 * 1, 10);
                        dwwrite(0x666778 + 34000 + 256 * 4, 362);
                        dwwrite(0x666778 + 34000 + 940 * 4, 269);
                        CreateUnit(1, (PVulture[getcurpl()]), (PLoc[getcurpl()]), (13));
                        bwrite(0x666778 + 14000 + 256 * 1, 0);
                        dwwrite(0x666778 + 34000 + 256 * 4, 86);
                        SetMemoryEPD(Vulture[getcurpl()] + 0x008 / 4, SetTo, Vulture_Hitpoints[getcurpl()]);
                        if(
                            Bring((13), (0), 1, (230), (24))
                        ){
                            CenterView((PLoc[getcurpl()]));
                        }
                        // 부스터 조절
                        if(
                            Vulture_Booster[getcurpl()] == 1
                        ){
                            SetMemoryEPD(Vulture[getcurpl()] + 0x034 / 4, SetTo, 1575);
                            wwrite_epd(Vulture[getcurpl()] + 0x048 / 4,  0x048 % 4, 46);
                            bwrite_epd(Vulture[getcurpl()] + 0x022 / 4,  0x022 % 4, 60);
                            if(
                                Memory(0x57F1B0, Exactly, (getcurpl()))
                            ){
                                btnPtr, btnPos = EPD(0x5187EC) + 57, 5 * 5;
                                dwadd_epd(btnPtr, 0);
                                btnPos += epdread_epd(btnPtr);
                                oldCP = getcurpl();
                                DoActions(list(
                                SetMemory(0x6509B0, SetTo, btnPos),
                                SetDeaths(CurrentPlayer, SetTo, 24576007, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4361824, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4338864, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 327685, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 1396, 0),
                                SetMemory(0x6509B0, SetTo, oldCP),
                                ));
                            }
                        }
                        else{
                            SetMemoryEPD(Vulture[getcurpl()] + 0x034 / 4, SetTo, 1050);
                            wwrite_epd(Vulture[getcurpl()] + 0x048 / 4,  0x048 % 4, 23);
                            bwrite_epd(Vulture[getcurpl()] + 0x022 / 4,  0x022 % 4, 28);
                            if(
                                Memory(0x57F1B0, Exactly, (getcurpl()))
                            ){
                                btnPtr, btnPos = EPD(0x5187EC) + 57, 5 * 5;
                                dwadd_epd(btnPtr, 0);
                                btnPos += epdread_epd(btnPtr);
                                oldCP = getcurpl();
                                DoActions(list(
                                SetMemory(0x6509B0, SetTo, btnPos),
                                SetDeaths(CurrentPlayer, SetTo, 24510471, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4361824, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4338864, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 327685, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 1395, 0),
                                SetMemory(0x6509B0, SetTo, oldCP),
                                ));
                            }
                        }
                        // 부스터 조절
                        hotkeyUnitEPD(Vulture[getcurpl()],getcurpl(),1,0);
                    }
                    // 바로적용
                }
                else{
                    GiveUnits(1, (230), (7), (26), (6));
                    GiveUnits(1, (230), (6), (26), (7));
                    PlayWAV("sound\\Misc\\PError.WAV");
                    DisplayText("\n\x13\x04이 \x1C스킨\x04을 \x07장착\x04할 수 없습니다.\n\x13\x1C획득 조건 \x04- \x04룰렛 옵션이 \x08모두 빨강 \x04혹은 \x087 빨강 \x04& \x181 외형(or영웅외형)\x04인 채로 클리어 인증\n", (0));
                }
            }
            // 블랙 벌쳐
            // 레인보우
            if(
                UnitClickCheck(getcurpl(),SkinRainbowIndex)
            ){
                if(
                    Skin_Rainbow[getcurpl()] == 1
                ){
                    GiveUnits(1, (230), (7), (39), (6));
                    GiveUnits(1, (230), (6), (39), (7));
                    PlayWAV("sound\\Misc\\PBldgPlc.wav");
                    if(
                        RainbowEnabled[getcurpl()] == 0
                    ){
                        RainbowEnabled[getcurpl()] = 1;
                        DisplayText("\x13\x1C이펙트\x04가 \x07장착\x04되었습니다.", (0));
                    }
                    else{
                        RainbowEnabled[getcurpl()] = 0;
                        DisplayText("\x13\x1C이펙트\x04가 \x07해제\x04되었습니다.", (0));
                        if(
                            Vulture[getcurpl()] != 0 && 
                            Bring((13), (0), 1, (PVulture[getcurpl()]), (64))
                        ){
                            SetUnitColorEPD(Vulture[getcurpl()],Pcolor[getcurpl()]);
                        }
                    }
                    if(
                        Bring((13), (0), 1, (230), (24))
                    ){
                        CenterView((PLoc[getcurpl()]));
                    }
                }
                else{
                    GiveUnits(1, (230), (7), (39), (6));
                    GiveUnits(1, (230), (6), (39), (7));
                    PlayWAV("sound\\Misc\\PError.WAV");
                    DisplayText("\n\x13\x04이 \x1C이펙트\x04를 \x07장착\x04할 수 없습니다.\n\x13\x1C획득 조건 \x04- \x1146 ~ 50 라운드 \x04클리어 영상을 인증 받음\n", (0));
                }
            }
            // 레인보우
            // 레인보우 아칸
            if(
                UnitClickCheck(getcurpl(),AuraRainbowArchonIndex)
            ){
                if(
                    Aura_RainbowArchon[getcurpl()] == 1
                ){
                    GiveUnits(1, (230), (7), (40), (6));
                    GiveUnits(1, (230), (6), (40), (7));
                    SetDeaths((13), (7), 2, (179));
                    SetDeaths((13), (7), 1, (180));
                    PlayWAV("sound\\Misc\\PBldgPlc.wav");
                    Aura_RainbowArchonEnabled[getcurpl()] = 1;
                    DisplayText("\x13\x1C오라\x04가 \x07장착\x04되었습니다.", (0));
                    if(
                        Bring((13), (0), 1, (230), (24))
                    ){
                        CenterView((PLoc[getcurpl()]));
                    }
                }
                else{
                    GiveUnits(1, (230), (7), (40), (6));
                    GiveUnits(1, (230), (6), (40), (7));
                    PlayWAV("sound\\Misc\\PError.WAV");
                    DisplayText("\n\x13\x04이 \x1C오라\x04를 \x07장착\x04할 수 없습니다.\n\x13\x1C획득 조건 \x04- \x04업데이트 예정\n", (0));
                }
            }
            // 레인보우 아칸
            // 무기스킨 해제
            if(
                UnitClickCheck(getcurpl(),399)
            ){
                if(
                    WeaponSkin_Select[getcurpl()] >= 1
                ){
                    WeaponSkin_Select[getcurpl()] = 0;
                    bwrite(0x65FD00 + 14776 + PVulture[getcurpl()] * 1, 5);
                    bwrite(0x65FD00 + 14776 + PHoldFire[getcurpl()] * 1, 5);
                    if(
                        ClassO[getcurpl()] == 1
                    ){
                        bwrite(0x65FD00 + 14776 + PVulture[getcurpl()] * 1, 15);
                        bwrite(0x65FD00 + 14776 + PHoldFire[getcurpl()] * 1, 15);
                    }
                    GiveUnits(1, (230), (7), (17), (6));
                    GiveUnits(1, (230), (6), (17), (7));
                    PlayWAV("sound\\Misc\\PBldgPlc.wav");
                    DisplayText("\x13\x07무기스킨\x04이 \x08해제\x04되었습니다.", (0));
                    // 바로적용
                    if(
                        Bring((13), (0), 1, (230), (24))
                    ){
                        CenterView((PLoc[getcurpl()]));
                    }
                    // 바로적용
                }
                else{
                    GiveUnits(1, (230), (7), (17), (6));
                    GiveUnits(1, (230), (6), (17), (7));
                    PlayWAV("sound\\Misc\\PError.WAV");
                    DisplayText("\x13\x1C장착\x04된 \x07무기스킨\x04이 없습니다.", (0));
                    if(
                        ClassO[getcurpl()] == 1
                    ){
                        bwrite(0x65FD00 + 14776 + PVulture[getcurpl()] * 1, 15);
                        bwrite(0x65FD00 + 14776 + PHoldFire[getcurpl()] * 1, 15);
                    }
                }
            }
            // 무기스킨 해제
            // GlaveWurm 무기스킨
            if(
                UnitClickCheck(getcurpl(),400)
            ){
                if(
                    WeaponSkin1[getcurpl()] == 1
                ){
                    WeaponSkin_Select[getcurpl()] = 1;
                    bwrite(0x65FD00 + 14776 + PVulture[getcurpl()] * 1, 48);
                    bwrite(0x65FD00 + 14776 + PHoldFire[getcurpl()] * 1, 48);
                    GiveUnits(1, (230), (7), (35), (6));
                    GiveUnits(1, (230), (6), (35), (7));
                    PlayWAV("sound\\Misc\\PBldgPlc.wav");
                    if(
                        Bring((13), (0), 1, (230), (24))
                    ){
                        CenterView((PLoc[getcurpl()]));
                    }
                    DisplayText("\x13\x1C무기스킨\x04이 \x07장착\x04되었습니다.", (0));
                }
                else{
                    GiveUnits(1, (230), (7), (35), (6));
                    GiveUnits(1, (230), (6), (35), (7));
                    PlayWAV("sound\\Misc\\PError.WAV");
                    DisplayText("\n\x13\x04이 \x1C무기스킨\x04을 \x07장착\x04할 수 없습니다.\n\x13\x1C획득 조건 \x04- \x1F쿠쿨자 \x04보상 \x08[ \x04글레이브 웜 \x08] \x04부터 직후 라운드까지 클리어 인증\n", (0));
                }
            }
            // GlaveWurm 무기스킨
            // PulseCannon 무기스킨
            if(
                UnitClickCheck(getcurpl(),401)
            ){
                if(
                    WeaponSkin2[getcurpl()] == 1
                ){
                    WeaponSkin_Select[getcurpl()] = 1;
                    bwrite(0x65FD00 + 14776 + PVulture[getcurpl()] * 1, 79);
                    bwrite(0x65FD00 + 14776 + PHoldFire[getcurpl()] * 1, 79);
                    GiveUnits(1, (230), (7), (36), (6));
                    GiveUnits(1, (230), (6), (36), (7));
                    PlayWAV("sound\\Misc\\PBldgPlc.wav");
                    if(
                        Bring((13), (0), 1, (230), (24))
                    ){
                        CenterView((PLoc[getcurpl()]));
                    }
                    DisplayText("\x13\x1C무기스킨\x04이 \x07장착\x04되었습니다.", (0));
                }
                else{
                    GiveUnits(1, (230), (7), (36), (6));
                    GiveUnits(1, (230), (6), (36), (7));
                    PlayWAV("sound\\Misc\\PError.WAV");
                    DisplayText("\n\x13\x04이 \x1C무기스킨\x04을 \x07장착\x04할 수 없습니다.\n\x13\x1C획득 조건 \x04- \x1F영웅 외형 \x04등장부터 \x08[ \x04펄스 캐넌 \x08] \x04보상까지의 영상 인증\n", (0));
                }
            }
            // PulseCannon 무기스킨
            // BurstLasers 무기스킨
            if(
                UnitClickCheck(getcurpl(),402)
            ){
                if(
                    WeaponSkin3[getcurpl()] == 1
                ){
                    WeaponSkin_Select[getcurpl()] = 1;
                    bwrite(0x65FD00 + 14776 + PVulture[getcurpl()] * 1, 16);
                    bwrite(0x65FD00 + 14776 + PHoldFire[getcurpl()] * 1, 16);
                    GiveUnits(1, (230), (7), (37), (6));
                    GiveUnits(1, (230), (6), (37), (7));
                    PlayWAV("sound\\Misc\\PBldgPlc.wav");
                    if(
                        Bring((13), (0), 1, (230), (24))
                    ){
                        CenterView((PLoc[getcurpl()]));
                    }
                    DisplayText("\x13\x1C무기스킨\x04이 \x07장착\x04되었습니다.", (0));
                }
                else{
                    GiveUnits(1, (230), (7), (37), (6));
                    GiveUnits(1, (230), (6), (37), (7));
                    PlayWAV("sound\\Misc\\PError.WAV");
                    DisplayText("\n\x13\x04이 \x1C무기스킨\x04을 \x07장착\x04할 수 없습니다.\n\x13\x1C획득 조건 \x04- \x1F톰 카잔스키 \x04보상 \x08[ \x04버스트 레이저 \x08] \x04부터 직후 라운드까지 클리어 인증\n", (0));
                }
            }
            // BurstLasers 무기스킨
        }
    EUDEndPlayerLoop();
    // 오라&스킨 탈부착
    // 오라 생성
    EUDPlayerLoop()();
        if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
            // 땡스 오라
            if(
                Deaths((13), (10), 3, (179)) && 
                Bring((13), (0), 1, (230), (24)) && 
                Bring((13), (10), 0, (123), (64))
            ){
                var aura;
                aura = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (123), (1), (13), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                SetMemoryEPD(aura + 0x0DC / 4, Add, 2048 * 1);
                SetMemoryEPD(aura + 0x0DC / 4, Add, 512 * 1);
            }
            // 땡스 오라
            // 스페셜 땡스 오라
            if(
                Deaths((13), (10), 4, (179)) && 
                Bring((13), (0), 1, (230), (24)) && 
                Bring((13), (10), 0, (111), (64))
            ){
                var aura;
                aura = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (111), (1), (13), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = False));
                SetMemoryEPD(aura + 0x0DC / 4, Add, 2048 * 1);
                SetMemoryEPD(aura + 0x0DC / 4, Add, 512 * 1);
            }
            // 스페셜 땡스 오라
            // 아칸 오라
            if(
                Deaths((13), (10), 2, (179)) && 
                Bring((13), (0), 1, (230), (24)) && 
                Bring((13), (10), 0, (114), (64))
            ){
                var aura;
                aura = epdread_epd(EPD(0x628438));
                Aura_RainbowArchonP[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (114), (1), (13), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                SetMemoryEPD(aura + 0x0DC / 4, Add, 2048 * 1);
                SetMemoryEPD(aura + 0x0DC / 4, Add, 512 * 1);
            }
            // 아칸 오라
            // 마엘 오라
            if(
                Deaths((13), (10), 1, (179)) && 
                Bring((13), (0), 1, (230), (24)) && 
                Bring((13), (10), 0, (109), (64))
            ){
                bwrite(0x666778 + 14000 + 983 * 1, 9);
                var aura;
                aura = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (109), (1), (13), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                SetMemoryEPD(aura + 0x0DC / 4, Add, 2048 * 1);
                SetMemoryEPD(aura + 0x0DC / 4, Add, 512 * 1);
            }
            // 마엘 오라
            // VIP 오라
            if(
                Deaths((13), (10), 5, (179)) && 
                Bring((13), (0), 1, (230), (24)) && 
                Bring((13), (10), 0, (113), (64))
            ){
                bwrite(0x666778 + 14000 + 983 * 1, 16);
                var aura;
                aura = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (113), (1), (13), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                SetMemoryEPD(aura + 0x0DC / 4, Add, 2048 * 1);
                SetMemoryEPD(aura + 0x0DC / 4, Add, 512 * 1);
            }
            // VIP 오라
            MoveUnit(1, (123), (13), (64), (PLoc[getcurpl()]));
            MoveUnit(1, (111), (13), (64), (PLoc[getcurpl()]));
            MoveUnit(1, (114), (13), (64), (PLoc[getcurpl()]));
            MoveUnit(1, (109), (13), (64), (PLoc[getcurpl()]));
            MoveUnit(1, (113), (13), (64), (PLoc[getcurpl()]));
            if(
                Bring((13), (10), 0, (PVulture[getcurpl()]), (24))
            ){
                RemoveUnit((123), (13));
                RemoveUnit((111), (13));
                RemoveUnit((114), (13));
                RemoveUnit((109), (13));
                RemoveUnit((113), (13));
            }
        }
    EUDEndPlayerLoop();
    // 오라 생성
    // 스테이지
    // 룰렛
    // 옵션 확인
    if(
        Switch((1), (2)) && 
        Switch((16), (3))
    ){
        EUDPlayerLoop()();
            if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                if(
                    OpTimer[getcurpl()] >= 1
                ){
                    OpTimer[getcurpl()] -= 1;
                }
                if(
                    OpTimer[getcurpl()] == 0 && 
                    Deaths((13), (10), 2, (207))
                ){
                    OpTimer[getcurpl()] = 30;
                    DisplayText("\n\n\n\n\n", (0));
                    OptionDescribe();
                    PlayWAV("staredit\\wav\\paper.wav");
                }
            }
        EUDEndPlayerLoop();
    }
    // 옵션 확인
    if(
        Switch((16), (2)) && 
        Switch((15), (3))
    ){
        EUDPlayerLoop()();
            if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                tct.chatAnnouncement(" ");
            }
        EUDEndPlayerLoop();
        // 비복원추출 
        if(
            Roulette_Timer >= 30
        ){
            Roulette_Timer = 0;
            for(var i=0; i<Roulette_Count+1; i++){
                if(
                    i == Roulette_Count
                ){
                    SetSwitch((15), (4));
                    autoStart = 1;
                    break;
                }
                if(
                    RandomOption[i] == 0
                ){
                    RandomOption[i] = dwrand() % (OptionCount + 1);
                    RandomOption[i] += 1;
                    for(var k=0; k<i || i==0; ){
                        if(
                            i != 0
                        ){
                            if(
                                RandomOption[i] != RandomOption[k]
                            ){
                                k += 1;
                            }
                            else{
                                RandomOption[i] = 0;
                                i--;
                                break;
                            }
                        }
                        if(
                            i == k
                        ){
                            // 개별 옵션 확률 조정
                            // 15. 착륙
                            if(
                                RandomOption[i] == 15
                            ){
                                RandomNum = dwrand() % (2 + 1);
                                if(
                                    RandomNum != 0
                                ){
                                    RandomOption[i] = 0;
                                    i--;
                                    break;
                                }
                            }
                            // 15. 착륙
                            // 23. 국룰
                            if(
                                RandomOption[i] == 23
                            ){
                                RandomNum = dwrand() % (2 + 1);
                                if(
                                    RandomNum != 0
                                ){
                                    RandomOption[i] = 0;
                                    i--;
                                    break;
                                }
                            }
                            // 23. 국룰
                            // 28. 축지법
                            if(
                                RandomOption[i] == 28
                            ){
                                if(
                                    Deaths((6), (1), 15, (193))
                                ){
                                    RandomNum = dwrand() % (3 + 1);
                                }
                                if(
                                    Deaths((6), (0), 16, (193))
                                ){
                                    RandomNum = dwrand() % (1 + 1);
                                }
                                if(
                                    RandomNum != 0
                                ){
                                    RandomOption[i] = 0;
                                    i--;
                                    break;
                                }
                            }
                            // 28. 축지법
                            // 29. 러시안 룰렛
                            if(
                                RandomOption[i] == 29
                            ){
                                if(
                                    Bring((18), (1), 3, (230), (52))
                                ){
                                    RandomOption[i] = 0;
                                    i--;
                                    break;
                                }
                                RandomNum = dwrand() % (10 + 1);
                                if(
                                    RandomNum != 0
                                ){
                                    RandomOption[i] = 0;
                                    i--;
                                    break;
                                }
                            }
                            // 29. 러시안 룰렛
                            // 31. 여포
                            if(
                                RandomOption[i] == 31
                            ){
                                RandomNum = dwrand() % (10 + 1);
                                if(
                                    RandomNum != 0
                                ){
                                    RandomOption[i] = 0;
                                    i--;
                                    break;
                                }
                            }
                            // 31. 여포
                            // 34. 기회주의자
                            if(
                                RandomOption[i] == 34
                            ){
                                RandomNum = dwrand() % (2 + 1);
                                if(
                                    RandomNum != 0
                                ){
                                    RandomOption[i] = 0;
                                    i--;
                                    break;
                                }
                            }
                            // 34. 기회주의자
                            // 35. 바바리안
                            if(
                                RandomOption[i] == 35
                            ){
                                if(
                                    Deaths((6), (1), 15, (193))
                                ){
                                    RandomNum = dwrand() % (3 + 1);
                                }
                                if(
                                    Deaths((6), (0), 16, (193))
                                ){
                                    RandomNum = dwrand() % (1 + 1);
                                }
                                if(
                                    RandomNum != 0
                                ){
                                    RandomOption[i] = 0;
                                    i--;
                                    break;
                                }
                            }
                            // 35. 바바리안
                            // 37. 포문 개방
                            if(
                                RandomOption[i] == 37
                            ){
                                if(
                                    Deaths((6), (1), 15, (193))
                                ){
                                    RandomNum = dwrand() % (3 + 1);
                                }
                                if(
                                    Deaths((6), (0), 16, (193))
                                ){
                                    RandomNum = dwrand() % (1 + 1);
                                }
                                if(
                                    RandomNum != 0
                                ){
                                    RandomOption[i] = 0;
                                    i--;
                                    break;
                                }
                            }
                            // 37. 포문 개방
                            // 38. 정비공
                            if(
                                RandomOption[i] == 38
                            ){
                                RandomNum = dwrand() % (8 + 1);
                                if(
                                    RandomNum != 0
                                ){
                                    RandomOption[i] = 0;
                                    i--;
                                    break;
                                }
                            }
                            // 38. 정비공
                            // 39. 관통상
                            if(
                                RandomOption[i] == 39
                            ){
                                RandomNum = dwrand() % (8 + 1);
                                if(
                                    RandomNum != 0
                                ){
                                    RandomOption[i] = 0;
                                    i--;
                                    break;
                                }
                            }
                            // 39. 관통상
                            // 49. 중상
                            if(
                                RandomOption[i] == 49
                            ){
                                if(
                                    Deaths((6), (1), 15, (193))
                                ){
                                    RandomNum = dwrand() % (3 + 1);
                                }
                                if(
                                    Deaths((6), (0), 16, (193))
                                ){
                                    RandomNum = dwrand() % (1 + 1);
                                }
                                if(
                                    RandomNum != 0
                                ){
                                    RandomOption[i] = 0;
                                    i--;
                                    break;
                                }
                            }
                            // 49. 중상
                            // 51. 무대포
                            if(
                                RandomOption[i] == 51
                            ){
                                RandomNum = dwrand() % (2 + 1);
                                if(
                                    RandomNum != 0
                                ){
                                    RandomOption[i] = 0;
                                    i--;
                                    break;
                                }
                            }
                            // 51. 무대포
                            // 56. 난사
                            if(
                                RandomOption[i] == 56
                            ){
                                RandomNum = dwrand() % (11 + 1);
                                if(
                                    RandomNum != 0
                                ){
                                    RandomOption[i] = 0;
                                    i--;
                                    break;
                                }
                            }
                            // 56. 난사
                            // 62. 아칸 오라
                            if(
                                RandomOption[i] == 62
                            ){
                                if(
                                    Deaths((6), (1), 6, (193))
                                ){
                                    RandomOption[i] = 0;
                                    i--;
                                    break;
                                }
                                RandomNum = dwrand() % (50 * 100 / (91 + ProbPlus + dwread_epd(EPD(0x58A364 + 48 * 193 + 4 * 6))) + 1);
                                if(
                                    RandomNum != 0
                                ){
                                    RandomOption[i] = 0;
                                    i--;
                                    break;
                                }
                            }
                            // 62. 아칸 오라
                            // 63. 레이스 스킨
                            if(
                                RandomOption[i] == 63
                            ){
                                if(
                                    Deaths((6), (1), 6, (193))
                                ){
                                    RandomOption[i] = 0;
                                    i--;
                                    break;
                                }
                                RandomNum = dwrand() % (50 * 100 / (91 + ProbPlus + dwread_epd(EPD(0x58A364 + 48 * 193 + 4 * 6))) + 1);
                                if(
                                    RandomNum != 0
                                ){
                                    RandomOption[i] = 0;
                                    i--;
                                    break;
                                }
                            }
                            // 63. 레이스 스킨
                            // 65. 뮤탈 스킨
                            if(
                                RandomOption[i] == 65
                            ){
                                if(
                                    Deaths((6), (1), 6, (193))
                                ){
                                    RandomOption[i] = 0;
                                    i--;
                                    break;
                                }
                                RandomNum = dwrand() % (100 * 100 / (91 + ProbPlus + dwread_epd(EPD(0x58A364 + 48 * 193 + 4 * 6))) + 1);
                                if(
                                    RandomNum != 0
                                ){
                                    RandomOption[i] = 0;
                                    i--;
                                    break;
                                }
                            }
                            // 65. 뮤탈 스킨
                            // 66. 마엘 오라
                            if(
                                RandomOption[i] == 66
                            ){
                                if(
                                    Deaths((6), (1), 6, (193))
                                ){
                                    RandomOption[i] = 0;
                                    i--;
                                    break;
                                }
                                RandomNum = dwrand() % (100 * 100 / (91 + ProbPlus + dwread_epd(EPD(0x58A364 + 48 * 193 + 4 * 6))) + 1);
                                if(
                                    RandomNum != 0
                                ){
                                    RandomOption[i] = 0;
                                    i--;
                                    break;
                                }
                            }
                            // 66. 마엘 오라
                            // 69. Lv+4
                            if(
                                RandomOption[i] == 69
                            ){
                                if(
                                    Deaths((6), (1), 15, (193))
                                ){
                                    RandomNum = dwrand() % (3 + 1);
                                }
                                if(
                                    Deaths((6), (0), 16, (193))
                                ){
                                    RandomNum = dwrand() % (1 + 1);
                                }
                                if(
                                    RandomNum != 0
                                ){
                                    RandomOption[i] = 0;
                                    i--;
                                    break;
                                }
                            }
                            // 69. Lv+4
                            // 개별 옵션 확률 조정
                            // 스테이지 확률 조정
                            // 8 스테이지 이상
                            if(
                                Deaths((6), (0), 7, (193))
                            ){
                                if(
                                    RandomOption[i] == 1 || 
                                    RandomOption[i] == 2 || 
                                    RandomOption[i] == 59
                                ){
                                    RandomNum = dwrand() % (1 + 1);
                                    if(
                                        RandomNum != 0
                                    ){
                                        RandomOption[i] = 0;
                                        i--;
                                        break;
                                    }
                                }
                            }
                            // 8 스테이지 이상
                            // 9 스테이지 이상
                            if(
                                Deaths((6), (0), 8, (193))
                            ){
                                if(
                                    RandomOption[i] == 1 || 
                                    RandomOption[i] == 2 || 
                                    RandomOption[i] == 3 || 
                                    RandomOption[i] == 4 || 
                                    RandomOption[i] == 59
                                ){
                                    RandomNum = dwrand() % (1 + 1);
                                    if(
                                        RandomNum != 0
                                    ){
                                        RandomOption[i] = 0;
                                        i--;
                                        break;
                                    }
                                }
                            }
                            // 9 스테이지 이상
                            // 10 스테이지 이상
                            if(
                                Deaths((6), (0), 9, (193))
                            ){
                                if(
                                    RandomOption[i] == 1 || 
                                    RandomOption[i] == 2 || 
                                    RandomOption[i] == 3 || 
                                    RandomOption[i] == 4 || 
                                    RandomOption[i] == 6 || 
                                    RandomOption[i] == 10 || 
                                    RandomOption[i] == 58 || 
                                    RandomOption[i] == 59 || 
                                    RandomOption[i] == 70
                                ){
                                    RandomNum = dwrand() % (1 + 1);
                                    if(
                                        RandomNum != 0
                                    ){
                                        RandomOption[i] = 0;
                                        i--;
                                        break;
                                    }
                                }
                            }
                            // 10 스테이지 이상
                            // 11 스테이지 이상
                            if(
                                Deaths((6), (0), 10, (193))
                            ){
                                if(
                                    RandomOption[i] == 1 || 
                                    RandomOption[i] == 2 || 
                                    RandomOption[i] == 3 || 
                                    RandomOption[i] == 4 || 
                                    RandomOption[i] == 5 || 
                                    RandomOption[i] == 6 || 
                                    RandomOption[i] == 7 || 
                                    RandomOption[i] == 8 || 
                                    RandomOption[i] == 10 || 
                                    RandomOption[i] == 19 || 
                                    RandomOption[i] == 25 || 
                                    RandomOption[i] == 58 || 
                                    RandomOption[i] == 59 || 
                                    RandomOption[i] == 70
                                ){
                                    RandomNum = dwrand() % (1 + 1);
                                    if(
                                        RandomNum != 0
                                    ){
                                        RandomOption[i] = 0;
                                        i--;
                                        break;
                                    }
                                }
                            }
                            // 11 스테이지 이상
                            // 12 스테이지 이상
                            if(
                                Deaths((6), (0), 11, (193))
                            ){
                                if(
                                    RandomOption[i] <= 10 || 
                                    RandomOption[i] == 19 || 
                                    RandomOption[i] == 22 || 
                                    RandomOption[i] == 25 || 
                                    RandomOption[i] == 26 || 
                                    RandomOption[i] == 58 || 
                                    RandomOption[i] == 59 || 
                                    RandomOption[i] == 70 || 
                                    RandomOption[i] == 79
                                ){
                                    RandomNum = dwrand() % (1 + 1);
                                    if(
                                        RandomNum != 0
                                    ){
                                        RandomOption[i] = 0;
                                        i--;
                                        break;
                                    }
                                }
                            }
                            // 12 스테이지 이상
                            // 13 스테이지 이상
                            if(
                                Deaths((6), (0), 12, (193))
                            ){
                                if(
                                    RandomOption[i] <= 10 || 
                                    RandomOption[i] == 19 || 
                                    RandomOption[i] == 22 || 
                                    RandomOption[i] == 25 || 
                                    RandomOption[i] == 26 || 
                                    RandomOption[i] == 33 || 
                                    RandomOption[i] == 45 || 
                                    RandomOption[i] == 58 || 
                                    RandomOption[i] == 59 || 
                                    RandomOption[i] == 70 || 
                                    RandomOption[i] == 79
                                ){
                                    RandomNum = dwrand() % (1 + 1);
                                    if(
                                        RandomNum != 0
                                    ){
                                        RandomOption[i] = 0;
                                        i--;
                                        break;
                                    }
                                }
                            }
                            // 13 스테이지 이상
                            // 14 스테이지 이상
                            if(
                                Deaths((6), (0), 13, (193))
                            ){
                                if(
                                    RandomOption[i] <= 10 || 
                                    RandomOption[i] == 19 || 
                                    RandomOption[i] == 22 || 
                                    RandomOption[i] == 25 || 
                                    RandomOption[i] == 26 || 
                                    RandomOption[i] == 30 || 
                                    RandomOption[i] == 33 || 
                                    RandomOption[i] == 45 || 
                                    RandomOption[i] == 50 || 
                                    RandomOption[i] == 58 || 
                                    RandomOption[i] == 59 || 
                                    RandomOption[i] == 70 || 
                                    RandomOption[i] == 79
                                ){
                                    RandomNum = dwrand() % (1 + 1);
                                    if(
                                        RandomNum != 0
                                    ){
                                        RandomOption[i] = 0;
                                        i--;
                                        break;
                                    }
                                }
                            }
                            // 14 스테이지 이상
                            // 스테이지 확률 조정
                            // 영웅외형
                            if(
                                Deaths((6), (1), 13, (193))
                            ){
                                if(
                                    RandomOption[i] == 73 || 
                                    RandomOption[i] == 74 || 
                                    RandomOption[i] == 75 || 
                                    RandomOption[i] == 77
                                ){
                                    RandomOption[i] = 0;
                                    i--;
                                    break;
                                }
                            }
                            // 영웅외형
                            // 외형 변경
                            if(
                                RandomOption[i] == 32 || 
                                RandomOption[i] == 36 || 
                                RandomOption[i] == 42 || 
                                RandomOption[i] == 43 || 
                                RandomOption[i] == 46 || 
                                RandomOption[i] == 47 || 
                                RandomOption[i] == 48 || 
                                RandomOption[i] == 57 || 
                                RandomOption[i] == 60 || 
                                RandomOption[i] == 64 || 
                                RandomOption[i] == 67 || 
                                RandomOption[i] == 68 || 
                                RandomOption[i] == 71 || 
                                RandomOption[i] == 72 || 
                                RandomOption[i] == 73 || 
                                RandomOption[i] == 74 || 
                                RandomOption[i] == 75 || 
                                RandomOption[i] == 77
                            ){
                                if(
                                    GraphicChange == 0
                                ){
                                    GraphicChange = 1;
                                }
                                else{
                                    RandomOption[i] = 0;
                                    i--;
                                    break;
                                }
                            }
                            // 외형 변경
                            EUDPlayerLoop()();
                                if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                                    Roulette_Sound[getcurpl()] = RandomOption[i];
                                }
                            EUDEndPlayerLoop();
                            i = 9999;
                            break;
                        }
                    }
                }
            }
        }
        // 비복원추출 
    }
    if(
        Switch((16), (2))
    ){
        Roulette_Timer += 1;
        EUDPlayerLoop()();
            if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                CenterView((4));
            }
        EUDEndPlayerLoop();
        // 룰렛 텍스트
        if(
            Roulette_Timer % 2 == 1
        ){
            EUDPlayerLoop()();
                if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                    txtPtr = dwread_epd_safe(EPD(0x640B58));
                    DisplayText("\x13\x07룰렛\x04을 돌립니다.", (0));
                    OptionDescribe();
                    SetMemory(0x640B58, SetTo, txtPtr);
                }
            EUDEndPlayerLoop();
        }
        // 룰렛 텍스트
    }
    // 룰렛
    if(
        Switch((1), (2))
    ){
        // 패배
        if(
            Bring((18), (10), 0, (230), (24)) && 
            Bring((6), (0), 1, (230), (64)) && 
            TrainingMode == 0
        ){
            Defeated = 1;
            EUDPlayerLoop()();
                if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                    DisplayText("\x13\x08패배\x04하였습니다.", (0));
                    Defeat();
                }
            EUDEndPlayerLoop();
        }
        // 패배
        // 스테이지 시작
        if(
            Defeated == 0
        ){
            if(
                Bring((6), (10), 0, (230), (64)) && 
                Bring((18), (10), 0, (230), (24))
            ){
                RemoveUnitAt(255, (229), (24), (6));
                SetBossStats();
                Unit = epdread_epd(EPD(0x628438));
                EnemyCreateOne(12,1);
                VultureSkinCreate();
                Roulette_Timer = 0;
                // 형님 사운드
                if(
                    형님 == 1
                ){
                    EUDPlayerLoop()();
                        if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                            PlayWAV("staredit\\wav\\sonofbitch.ogg");
                        }
                    EUDEndPlayerLoop();
                }
                // 형님 사운드
                // 스테이지 정보 표시
                StageDisplay = dwread_epd(EPD(0x58A364 + 48 * 193 + 4 * 6)) + 1;
                tct.setTbl((1346), 8, 3, "\x0D\x0D\x0D");
                tct.setTbl((1346), 8, 3, StageDisplay);
                Stat_Health = dwread(0x65FD00 + 9808 + 12 * 4);
                Stat_Health /= 256;
                Stat_Armor = bread(0x65FD00 + 456 + 12 * 1);
                Stat_Damage = wread(0x6564E0 + 2512 + 19 * 2);
                Stat_Speed = dwread(0x6C9858 + 1696 + 70 * 4);
                Stat_Speed = Stat_Speed  * 100 / 325;
                Stat_RangeL = dwread(0x6564E0 + 3984 + 19 * 4);
                Stat_RangeR = dwread(0x6564E0 + 3984 + 19 * 4);
                Stat_RangeL = Stat_RangeL * 10000 / 32 / 10000;
                if(
                    dwread(0x6564E0 + 3984 + 19 * 4) >= 129 && 
                    dwread(0x6564E0 + 3984 + 19 * 4) <= 131
                ){
                    Stat_RangeR = (Stat_RangeR * 10000 / 32) % 1000;
                }
                else{
                    Stat_RangeR = (Stat_RangeR * 10000 / 32) % 10000;
                }
                Stat_Shield = ShieldTotal;
                Stat_Shield /= 256;
                EUDPlayerLoop()();
                    if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                        if(
                            dwread(0x6564E0 + 3984 + 19 * 4) >= 129 && 
                            dwread(0x6564E0 + 3984 + 19 * 4) <= 131
                        ){
                            tct.print("\n\n\x13\x08스\x04테이지 \x08", StageDisplay, "\n\n\x13\x04 체력/쉴드 : \x07", Stat_Health, "\x04/\x1F", Stat_Shield, "\n\x13\x04 데미지 : \x07", Stat_Damage, "\n\x13\x04 사거리 : \x07", Stat_RangeL, ".0", Stat_RangeR, "\n\x13\x04 이동속도 : \x07", Stat_Speed, "\x04%\n\x13\x04 방어력 : \x07", Stat_Armor, "\n");
                        }
                        else{
                            tct.print("\n\n\x13\x08스\x04테이지 \x08", StageDisplay, "\n\n\x13\x04 체력/쉴드 : \x07", Stat_Health, "\x04/\x1F", Stat_Shield, "\n\x13\x04 데미지 : \x07", Stat_Damage, "\n\x13\x04 사거리 : \x07", Stat_RangeL, ".", Stat_RangeR, "\n\x13\x04 이동속도 : \x07", Stat_Speed, "\x04%\n\x13\x04 방어력 : \x07", Stat_Armor, "\n");
                        }
                    }
                EUDEndPlayerLoop();
                // 스테이지 정보 표시
            }
        }
        // 스테이지 시작
    }
    // 다음 스테이지
    if(
        Switch((1), (2)) && 
        Bring((18), (0), 1, (230), (24)) && 
        Bring((6), (10), 0, (230), (64))
    ){
        포문개방취소 = 0;
        형님 = 0;
        SetDeaths((6), (8), 1, (193));
        KillUnitAt(255, (230), (24), (18));
        SetResources((18), (7), 0, (1));
        SetSwitch((1), (5));
        if(
            Roulette_Count < 8
        ){
            Roulette_Count += 1;
        }
        for(var i = 0 ; i < 8 ; i++){
            RandomOption[i] = 0;
        }
        SetSwitch((17), (4));
    }
    // 다음 스테이지
    // 보스 보상
    if(
        Switch((17), (2))
    ){
        Roulette_Timer += 1;
        if(
            BossReward >= 1
        ){
            EUDPlayerLoop()();
                if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                    CenterView((4));
                }
            EUDEndPlayerLoop();
            // 룰렛 텍스트
            if(
                Roulette_Timer % 2 == 1
            ){
                if(
                    Roulette_Timer <= 68
                ){
                    RewardOption = dwrand() % (RewardCount + 1);
                    RewardOption += 1;
                }
                EUDPlayerLoop()();
                    if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                        txtPtr = dwread_epd_safe(EPD(0x640B58));
                        DisplayText("\x13\x11보상\x04을 뽑습니다.", (0));
                        RewardDescribe();
                        DisplayText("\n\n\n\n\n\n", (0));
                        SetMemory(0x640B58, SetTo, txtPtr);
                    }
                EUDEndPlayerLoop();
            }
            if(
                Roulette_Timer == 69
            ){
                RewardOption = 0;
            }
            // 룰렛 텍스트
            if(
                Roulette_Timer >= 70 && 
                RewardOption == 0
            ){
                for(var i=0;i>=0;){
                    RewardOption = dwrand() % (RewardCount + 1);
                    RewardOption += 1;
                    // 쿠쿨자 - 글레이브 웜
                    if(
                        RewardOption == 9
                    ){
                        if(
                            KukulzaReward == 0
                        ){
                            continue;
                        }
                        else{
                            RandomNum = dwrand() % (3 + 1);
                            if(
                                RandomNum != 0
                            ){
                                continue;
                            }
                            break;
                        }
                    }
                    // 쿠쿨자 - 글레이브 웜
                    // 펄스 캐넌
                    if(
                        RewardOption == 11
                    ){
                        RandomNum = dwrand() % (5 + 1);
                        if(
                            RandomNum != 0
                        ){
                            continue;
                        }
                        break;
                    }
                    // 펄스 캐넌
                    // 톰 카잔스키 - 버스트 레이저
                    if(
                        RewardOption == 15
                    ){
                        if(
                            TomReward == 0
                        ){
                            continue;
                        }
                        else{
                            RandomNum = dwrand() % (3 + 1);
                            if(
                                RandomNum != 0
                            ){
                                continue;
                            }
                            break;
                        }
                    }
                    // 톰 카잔스키 - 버스트 레이저
                    break;
                }
                EUDPlayerLoop()();
                    if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                        Reward_Sound[getcurpl()] = RewardOption;
                    }
                EUDEndPlayerLoop();
                KukulzaReward = 0;
                TomReward = 0;
            }
            if(
                Roulette_Timer >= 120
            ){
                SetSwitch((18), (4));
                autoStart = 1;
            }
        }
        else{
            SetSwitch((16), (4));
            SetSwitch((17), (5));
        }
        // X 시작
        if(
            Switch((18), (2))
        ){
            var Loading;
            EUDPlayerLoop()();
                if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                    if(
                        Loading == 0
                    ){
                        if(
                            autoStart >= 1
                        ){
                            autoStartDisplay = 10 - autoStart / 48;
                            tct.chatAnnouncement("\x08", tct.str(0x57EEEB + 36 * 0), "\x04은(는) \x07X\x04 를 꾹 눌러 시작하세요 \x07", autoStartDisplay, "초");
                        }
                        else{
                            tct.chatAnnouncement("\x08", tct.str(0x57EEEB + 36 * 0), "\x04은(는) \x07X\x04 를 꾹 눌러 시작하세요");
                        }
                    }
                    if(
                        Loading >= 1
                    ){
                        tct.chatAnnouncement("\x07Loading : \x04", Loading, "%");
                    }
                }
            EUDEndPlayerLoop();
            if(
                Deaths((0), (10), 1, (209))
            ){
                Loading += 4;
                autoStart = 0;
            }
            else{
                for(var i = 0 ; i < 4 ; i++){
                    if(
                        Loading >= 1
                    ){
                        Loading -= 1;
                    }
                }
            }
            if(
                Loading >= 100 || 
                autoStart >= 480
            ){
                BossReward = 0;
                SetSwitch((18), (5));
                SetSwitch((17), (5));
                SetSwitch((16), (4));
                Loading = 0;
                Roulette_Timer = 0;
            }
            if(
                autoStart >= 1
            ){
                autoStart += 1;
            }
        }
        // X 시작
    }
    // 보스 보상
    EUDPlayerLoop()();
        if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
            // 통계
            if(
                Switch((1), (2))
            ){
                // 타이머
                if(
                    ChartCheckTimer[getcurpl()] >= 1
                ){
                    ChartCheckTimer[getcurpl()] -= 1;
                }
                // 타이머
                // 스테이지 정보 표시
                if(
                    Deaths((13), (10), 1, (207)) && 
                    ChartCheckTimer[getcurpl()] == 0
                ){
                    ChartCheckTimer[getcurpl()] = 15;
                    PlayWAV("staredit\\wav\\paper.wav");
                    if(
                        dwread(0x6564E0 + 3984 + 19 * 4) >= 129 && 
                        dwread(0x6564E0 + 3984 + 19 * 4) <= 131
                    ){
                        tct.print("\n\n\x13\x08스\x04테이지 \x08", StageDisplay, "\n\n\x13\x04 체력/쉴드 : \x07", Stat_Health, "\x04/\x1F", Stat_Shield, "\n\x13\x04 데미지 : \x07", Stat_Damage, "\n\x13\x04 사거리 : \x07", Stat_RangeL, ".0", Stat_RangeR, "\n\x13\x04 이동속도 : \x07", Stat_Speed, "\x04%\n\x13\x04 방어력 : \x07", Stat_Armor, "\n");
                    }
                    else{
                        tct.print("\n\n\x13\x08스\x04테이지 \x08", StageDisplay, "\n\n\x13\x04 체력/쉴드 : \x07", Stat_Health, "\x04/\x1F", Stat_Shield, "\n\x13\x04 데미지 : \x07", Stat_Damage, "\n\x13\x04 사거리 : \x07", Stat_RangeL, ".", Stat_RangeR, "\n\x13\x04 이동속도 : \x07", Stat_Speed, "\x04%\n\x13\x04 방어력 : \x07", Stat_Armor, "\n");
                    }
                }
                // 스테이지 정보 표시
                // 룰렛 옵션 표시
                if(
                    CTimer == 0 && 
                    ChartCheck[getcurpl()] == 0
                ){
                    txtPtr = dwread_epd(EPD(0x640B58));
                    tct.print("\x12\x07스테이지 정보\x04: ]\n\x12\x07룰렛옵션 보기\x04: [");
                    SetMemory(0x640B58, SetTo, txtPtr);
                }
                // 룰렛 옵션 표시
            }
            // 통계
        }
    EUDEndPlayerLoop();
    // 스테이지
    // 텔레포트
    EUDPlayerLoop()();
        if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
            SetResources((13), (9), 1, (1));
            if(
                Bring((13), (10), 1, (230), (38))
            ){
                if(
                    Accumulate((13), (10), 0, (1))
                ){
                    MoveUnit(255, (230), (13), (24), (18));
                    CenterView((18));
                    PlayWAV("sound\\Bullet\\LASRHIT1.wav");
                    DisplayText("\n\n\x13\x1C텔레포트\x04하였습니다.\n\x13\x17쿨타임 + 5초 \x07(가스)\n\n", (0));
                    SetResources((13), (7), 240, (1));
                }
                else{
                    MoveLocation((41), (230), (13), (24));
                    EUDMoveLocation(40,0,-32);
                    MoveUnit(255, (230), (13), (24), (41));
                    CenterView((41));
                    PlayWAV("sound\\Bullet\\LASRHIT1.wav");
                    DisplayText("\n\n\x13\x1C텔레포트\x04가 \x08불가능\x04합니다.\n\x13\x07가스\x04가 \x11남아\x04있습니다.\n\n", (0));
                }
            }
            if(
                Bring((13), (10), 1, (230), (42))
            ){
                if(
                    Accumulate((13), (10), 0, (1))
                ){
                    MoveUnit(255, (230), (13), (24), (19));
                    CenterView((19));
                    PlayWAV("sound\\Bullet\\LASRHIT1.wav");
                    DisplayText("\n\n\x13\x1C텔레포트\x04하였습니다.\n\x13\x17쿨타임 + 5초 \x07(가스)\n\n", (0));
                    SetResources((13), (7), 240, (1));
                }
                else{
                    MoveLocation((41), (230), (13), (24));
                    EUDMoveLocation(40,-32,0);
                    MoveUnit(255, (230), (13), (24), (41));
                    CenterView((41));
                    PlayWAV("sound\\Bullet\\LASRHIT1.wav");
                    DisplayText("\n\n\x13\x1C텔레포트\x04가 \x08불가능\x04합니다.\n\x13\x07가스\x04가 \x11남아\x04있습니다.\n\n", (0));
                }
            }
            if(
                Bring((13), (10), 1, (230), (44))
            ){
                if(
                    Accumulate((13), (10), 0, (1))
                ){
                    MoveUnit(255, (230), (13), (24), (20));
                    CenterView((20));
                    PlayWAV("sound\\Bullet\\LASRHIT1.wav");
                    DisplayText("\n\n\x13\x1C텔레포트\x04하였습니다.\n\x13\x17쿨타임 + 5초 \x07(가스)\n\n", (0));
                    SetResources((13), (7), 240, (1));
                }
                else{
                    MoveLocation((41), (230), (13), (24));
                    EUDMoveLocation(40,0,32);
                    MoveUnit(255, (230), (13), (24), (41));
                    CenterView((41));
                    PlayWAV("sound\\Bullet\\LASRHIT1.wav");
                    DisplayText("\n\n\x13\x1C텔레포트\x04가 \x08불가능\x04합니다.\n\x13\x07가스\x04가 \x11남아\x04있습니다.\n\n", (0));
                }
            }
            if(
                Bring((13), (10), 1, (230), (47))
            ){
                if(
                    Accumulate((13), (10), 0, (1))
                ){
                    MoveUnit(255, (230), (13), (24), (21));
                    CenterView((21));
                    PlayWAV("sound\\Bullet\\LASRHIT1.wav");
                    DisplayText("\n\n\x13\x1C텔레포트\x04하였습니다.\n\x13\x17쿨타임 + 5초 \x07(가스)\n\n", (0));
                    SetResources((13), (7), 240, (1));
                }
                else{
                    MoveLocation((41), (230), (13), (24));
                    EUDMoveLocation(40,32,0);
                    MoveUnit(255, (230), (13), (24), (41));
                    CenterView((41));
                    PlayWAV("sound\\Bullet\\LASRHIT1.wav");
                    DisplayText("\n\n\x13\x1C텔레포트\x04가 \x08불가능\x04합니다.\n\x13\x07가스\x04가 \x11남아\x04있습니다.\n\n", (0));
                }
            }
        }
    EUDEndPlayerLoop();
    // 텔레포트
    // 카메라
    EUDPlayerLoop()();
        if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
            // 타이머
            if(
                CamTimer[getcurpl()] >= 1
            ){
                CamTimer[getcurpl()] -= 1;
            }
            // 타이머
            if(
                Bring((13), (0), 1, (230), (24)) && 
                Deaths((13), (10), 1, (95)) && 
                CamTimer[getcurpl()] == 0 && 
                Deaths((13), (10), 0, (130)) && 
                Memory(0x57F1B0, Exactly, (getcurpl()))
            ){
                CamTimer[getcurpl()] = 48;
                SetDeaths((13), (7), 1, (130));
                PlayWAV("staredit\\wav\\Camera on.wav");
                DisplayText("\n\n\n\n\n\n\x13\x1C카메라\x04를 \x11적용\x04합니다.\n\n\n\n", (0));
                SetSwitch((0), (4));
            }
            if(
                Deaths((13), (10), 1, (95)) && 
                CamTimer[getcurpl()] == 0 && 
                Deaths((13), (10), 1, (130)) && 
                Memory(0x57F1B0, Exactly, (getcurpl()))
            ){
                CamTimer[getcurpl()] = 48;
                SetDeaths((13), (7), 0, (130));
                PlayWAV("staredit\\wav\\Camera off.wav");
                DisplayText("\n\n\n\n\n\n\x13\x1C카메라\x04를 \x08해제\x04합니다.\n\n\n\n", (0));
                SetSwitch((0), (5));
            }
            if(
                Bring((13), (10), 0, (230), (24)) && 
                Deaths((13), (10), 1, (130)) && 
                Memory(0x57F1B0, Exactly, (getcurpl()))
            ){
                CamTimer[getcurpl()] = 48;
                SetDeaths((13), (7), 0, (130));
                PlayWAV("staredit\\wav\\Camera off.wav");
                DisplayText("\n\x13\x1C카메라\x04를 \x08해제\x04합니다.\n", (0));
                SetSwitch((0), (5));
            }
        }
    EUDEndPlayerLoop();
    // 카메라
    // 부활
    EUDPlayerLoop()();
        if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
            if(
                Deaths((13), (10), 1, (132))
            ){
                for(var i = 0 ; i < 6 ; i++){
                    if(
                        Deaths((13), (10), KeyP[i], (205)) && 
                        Deaths((13), (10), 1, (209)) && 
                        Bring((i), (10), 0, (230), (24)) && 
                        Bring((i), (10), 1, (230), (52))
                    ){
                        Vulture[i] = epdread_epd(EPD(0x628438));
                        if(
                            ControlDirection == 0
                        ){
                            if(
                                Skin_Select[i] == 1
                            ){
                                wwrite(0x665AC0 + 1696 + 244 * 2, 140);
                                CreateUnit(1, (PVulture[i]), (6), (i));
                            }
                            else{
                                if(
                                    Skin_Select[i] == 2
                                ){
                                    wwrite(0x665AC0 + 1696 + 244 * 2, 243);
                                    CreateUnit(1, (PVulture[i]), (6), (i));
                                }
                                else{
                                    if(
                                        Skin_Select[i] == 3
                                    ){
                                        wwrite(0x665AC0 + 1696 + 244 * 2, 38);
                                        CreateUnit(1, (PVulture[i]), (6), (i));
                                    }
                                    else{
                                        if(
                                            Skin_Select[i] == 4
                                        ){
                                            wwrite(0x665AC0 + 1696 + 244 * 2, 256);
                                            bwrite(0x666778 + 14000 + 256 * 1, 10);
                                            dwwrite(0x666778 + 34000 + 256 * 4, 362);
                                            CreateUnit(1, (PVulture[i]), (6), (i));
                                        }
                                        else{
                                            wwrite(0x665AC0 + 1696 + 244 * 2, 256);
                                            bwrite(0x666778 + 14000 + 256 * 1, 0);
                                            dwwrite(0x666778 + 34000 + 256 * 4, 86);
                                            CreateUnit(1, (PVulture[i]), (6), (i));
                                        }
                                    }
                                }
                            }
                        }
                        else{
                            if(
                                Skin_Select[i] == 1
                            ){
                                wwrite(0x665AC0 + 1696 + 244 * 2, 140);
                                CreateUnit(1, (PVulture[i]), (8), (i));
                            }
                            else{
                                if(
                                    Skin_Select[i] == 2
                                ){
                                    wwrite(0x665AC0 + 1696 + 244 * 2, 243);
                                    CreateUnit(1, (PVulture[i]), (8), (i));
                                }
                                else{
                                    if(
                                        Skin_Select[i] == 3
                                    ){
                                        wwrite(0x665AC0 + 1696 + 244 * 2, 38);
                                        CreateUnit(1, (PVulture[i]), (8), (i));
                                    }
                                    else{
                                        if(
                                            Skin_Select[i] == 4
                                        ){
                                            wwrite(0x665AC0 + 1696 + 244 * 2, 256);
                                            bwrite(0x666778 + 14000 + 256 * 1, 10);
                                            dwwrite(0x666778 + 34000 + 256 * 4, 362);
                                            CreateUnit(1, (PVulture[i]), (8), (i));
                                        }
                                        else{
                                            wwrite(0x665AC0 + 1696 + 244 * 2, 256);
                                            bwrite(0x666778 + 14000 + 256 * 1, 0);
                                            dwwrite(0x666778 + 34000 + 256 * 4, 86);
                                            CreateUnit(1, (PVulture[i]), (8), (i));
                                        }
                                    }
                                }
                            }
                        }
                        if(
                            Vulture_Booster[i] == 1
                        ){
                            SetMemoryEPD(Vulture[i] + 0x034 / 4, SetTo, 1575);
                            wwrite_epd(Vulture[i] + 0x048 / 4,  0x048 % 4, 46);
                            bwrite_epd(Vulture[i] + 0x022 / 4,  0x022 % 4, 60);
                            if(
                                Memory(0x57F1B0, Exactly, (i))
                            ){
                                btnPtr, btnPos = EPD(0x5187EC) + 57, 5 * 5;
                                dwadd_epd(btnPtr, 0);
                                btnPos += epdread_epd(btnPtr);
                                oldCP = getcurpl();
                                DoActions(list(
                                SetMemory(0x6509B0, SetTo, btnPos),
                                SetDeaths(CurrentPlayer, SetTo, 24576007, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4361824, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4338864, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 327685, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 1396, 0),
                                SetMemory(0x6509B0, SetTo, oldCP),
                                ));
                            }
                        }
                        else{
                            SetMemoryEPD(Vulture[i] + 0x034 / 4, SetTo, 1050);
                            wwrite_epd(Vulture[i] + 0x048 / 4,  0x048 % 4, 23);
                            bwrite_epd(Vulture[i] + 0x022 / 4,  0x022 % 4, 28);
                            if(
                                Memory(0x57F1B0, Exactly, (i))
                            ){
                                btnPtr, btnPos = EPD(0x5187EC) + 57, 5 * 5;
                                dwadd_epd(btnPtr, 0);
                                btnPos += epdread_epd(btnPtr);
                                oldCP = getcurpl();
                                DoActions(list(
                                SetMemory(0x6509B0, SetTo, btnPos),
                                SetDeaths(CurrentPlayer, SetTo, 24510471, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4361824, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4338864, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 327685, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 1395, 0),
                                SetMemory(0x6509B0, SetTo, oldCP),
                                ));
                            }
                        }
                        hotkeyUnitEPD(Vulture[i],i,1,0);
                    }
                }
            }
        }
    EUDEndPlayerLoop();
    // 부활
}
function afterTriggerExec() {
    sca.Exec();
    scaload.scaloading();
    // 대기열인식
    EUDPlayerLoop()();
        if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
            if(
                Deaths((13), (10), 1, (132)) && 
                Bring((13), (10), 0, (120), (64))
            ){
                MachineShop[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (120), (46), (13), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                hotkeyUnitEPD(MachineShop[getcurpl()],getcurpl(),2,0);
                hotkeyUnitEPD(MachineShop[getcurpl()],getcurpl(),3,0);
            }
            if(
                MachineShop[getcurpl()] > 0
            ){
                // 머신샵 테스트인증
                if(
                    Deaths((13), (10), 1, (132)) && 
                    Memory(0x57F1B0, Exactly, (getcurpl()))
                ){
                    wwrite_epd(MachineShop[getcurpl()] + 0x094 / 4,  0x094 % 4, 121);
                }
                // 머신샵 테스트인증
                // 이전
                if(
                    BuildCheckEPD(MachineShop[getcurpl()],0)
                ){
                    BuildResetEPD(MachineShop[getcurpl()]);
                    if(
                        SkipCooltime[getcurpl()] == 0
                    ){
                        SkipCooltime[getcurpl()] = 5;
                        if(
                            Deaths((6), (0), 1, (193))
                        ){
                            PlayWAV("sound\\Bullet\\LASRHIT1.wav");
                            SetDeaths((6), (9), 1, (193));
                            RemoveUnit((19), (18));
                            RemoveUnitAt(255, (229), (24), (6));
                            if(
                                Switch((1), (3))
                            ){
                                const ChangeStageBeforeStart = [0, 0, 0, 0, 0, 0, 0, 0];
                                ChangeStageBeforeStart[getcurpl()] = dwread_epd(EPD(0x58A364 + 48 * 193 + 4 * 6));
                                tct.chatAnnouncement("\x04", ChangeStageBeforeStart[getcurpl()], "");
                            }
                        }
                        else{
                            DisplayText("\n\n\n\n\n\n\x13\x08[ 오류 ] \x04첫 스테이지입니다.\n\n\n\n", (0));
                            PlayWAV("sound\\Misc\\PError.WAV");
                        }
                    }
                    else{
                        PlayWAV("staredit\\wav\\no sound.wav");
                    }
                }
                // 이전
                // 다음
                if(
                    BuildCheckEPD(MachineShop[getcurpl()],1)
                ){
                    BuildResetEPD(MachineShop[getcurpl()]);
                    if(
                        SkipCooltime[getcurpl()] == 0
                    ){
                        SkipCooltime[getcurpl()] = 5;
                        PlayWAV("sound\\Bullet\\LASRHIT1.wav");
                        SetDeaths((6), (8), 1, (193));
                        RemoveUnit((19), (18));
                        RemoveUnitAt(255, (229), (24), (6));
                        if(
                            Switch((1), (3))
                        ){
                            const ChangeStageBeforeStart = [0, 0, 0, 0, 0, 0, 0, 0];
                            ChangeStageBeforeStart[getcurpl()] = dwread_epd(EPD(0x58A364 + 48 * 193 + 4 * 6));
                            tct.chatAnnouncement("\x04", ChangeStageBeforeStart[getcurpl()], "");
                        }
                    }
                    else{
                        PlayWAV("staredit\\wav\\no sound.wav");
                    }
                }
                // 다음
                // 컨트롤방향
                if(
                    BuildCheckEPD(MachineShop[getcurpl()],3)
                ){
                    BuildResetEPD(MachineShop[getcurpl()]);
                    if(
                        SkipCooltime[getcurpl()] == 0
                    ){
                        SkipCooltime[getcurpl()] = 5;
                        if(
                            ControlDirection == 0
                        ){
                            ControlDirection = 1;
                            EUDPlayerLoop()();
                                if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                                    DisplayText("\x13\x04다음부터 벌쳐가 \x07오른쪽\x04에서 \x17생산\x04됩니다.", (0));
                                    PlayWAV("sound\\Misc\\PBldgPlc.wav");
                                }
                            EUDEndPlayerLoop();
                        }
                        else{
                            ControlDirection = 0;
                            EUDPlayerLoop()();
                                if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                                    DisplayText("\x13\x04다음부터 벌쳐가 \x07왼쪽\x04에서 \x17생산\x04됩니다.", (0));
                                    PlayWAV("sound\\Misc\\PBldgPlc.wav");
                                }
                            EUDEndPlayerLoop();
                        }
                    }
                    else{
                        PlayWAV("staredit\\wav\\no sound.wav");
                    }
                }
                // 컨트롤방향
                // 트레이닝 모드
                if(
                    BuildCheckEPD(MachineShop[getcurpl()],2)
                ){
                    BuildResetEPD(MachineShop[getcurpl()]);
                    if(
                        SkipCooltime[getcurpl()] == 0
                    ){
                        SkipCooltime[getcurpl()] = 5;
                        if(
                            TrainingMode == 0
                        ){
                            TrainingMode = 1;
                            EUDPlayerLoop()();
                                if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                                    DisplayText("\x13\x07트레이닝 모드\x04가 \x1F활성화 \x04되었습니다.", (0));
                                    PlayWAV("sound\\Misc\\PBldgPlc.wav");
                                }
                            EUDEndPlayerLoop();
                        }
                        else{
                            TrainingMode = 0;
                            EUDPlayerLoop()();
                                if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                                    DisplayText("\x13\x07트레이닝 모드\x04가 \x08비활성화 \x04되었습니다.", (0));
                                    PlayWAV("sound\\Misc\\PBldgPlc.wav");
                                }
                            EUDEndPlayerLoop();
                        }
                    }
                    else{
                        PlayWAV("staredit\\wav\\no sound.wav");
                    }
                }
                // 트레이닝 모드
                // 재룰렛권
                if(
                    BuildCheckEPD(MachineShop[getcurpl()],5)
                ){
                    BuildResetEPD(MachineShop[getcurpl()]);
                    if(
                        SkipCooltime[getcurpl()] == 0
                    ){
                        SkipCooltime[getcurpl()] = 5;
                        Roulette_Again += 137;
                        EUDPlayerLoop()();
                            if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                                DisplayText("\x13\x07룰렛 초기화 기회\x04를 \x1F획득\x04하였습니다.", (0));
                                PlayWAV("sound\\Misc\\TRescue.wav");
                            }
                        EUDEndPlayerLoop();
                    }
                    else{
                        PlayWAV("staredit\\wav\\no sound.wav");
                    }
                }
                // 재룰렛권
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
            // 타이머
            if(
                SkipCooltime[getcurpl()] >= 1
            ){
                SkipCooltime[getcurpl()] -= 1;
            }
            // 타이머
            if(
                Vulture[getcurpl()] > 0
            ){
                // 벌쳐 속업
                if(
                    BuildCheckEPD(Vulture[getcurpl()],5)
                ){
                    BuildResetEPD(Vulture[getcurpl()]);
                    if(
                        SkipCooltime[getcurpl()] == 0
                    ){
                        SkipCooltime[getcurpl()] = 15;
                        if(
                            Vulture_Booster[getcurpl()] == 0
                        ){
                            Vulture_Booster[getcurpl()] = 1;
                            SetMemoryEPD(Vulture[getcurpl()] + 0x034 / 4, SetTo, 1575);
                            wwrite_epd(Vulture[getcurpl()] + 0x048 / 4,  0x048 % 4, 46);
                            bwrite_epd(Vulture[getcurpl()] + 0x022 / 4,  0x022 % 4, 55);
                            DisplayText("\n\n\n\n\n\n\x13\x04부스터 활성화\n\n\n\n", (0));
                            PlayWAV("staredit\\wav\\AfterOn.wav");
                            if(
                                Memory(0x57F1B0, Exactly, (getcurpl()))
                            ){
                                btnPtr, btnPos = EPD(0x5187EC) + 0, 5 * 5;
                                dwadd_epd(btnPtr, 0);
                                btnPos += epdread_epd(btnPtr);
                                oldCP = getcurpl();
                                DoActions(list(
                                SetMemory(0x6509B0, SetTo, btnPos),
                                SetDeaths(CurrentPlayer, SetTo, 24576007, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4361824, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4338864, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 327685, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 1396, 0),
                                SetMemory(0x6509B0, SetTo, oldCP),
                                ));
                                btnPtr, btnPos = EPD(0x5187EC) + 3, 5 * 5;
                                dwadd_epd(btnPtr, 0);
                                btnPos += epdread_epd(btnPtr);
                                oldCP = getcurpl();
                                DoActions(list(
                                SetMemory(0x6509B0, SetTo, btnPos),
                                SetDeaths(CurrentPlayer, SetTo, 24576007, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4361824, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4338864, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 327685, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 1396, 0),
                                SetMemory(0x6509B0, SetTo, oldCP),
                                ));
                                btnPtr, btnPos = EPD(0x5187EC) + 6, 5 * 5;
                                dwadd_epd(btnPtr, 0);
                                btnPos += epdread_epd(btnPtr);
                                oldCP = getcurpl();
                                DoActions(list(
                                SetMemory(0x6509B0, SetTo, btnPos),
                                SetDeaths(CurrentPlayer, SetTo, 24576007, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4361824, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4338864, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 327685, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 1396, 0),
                                SetMemory(0x6509B0, SetTo, oldCP),
                                ));
                                btnPtr, btnPos = EPD(0x5187EC) + 21, 5 * 5;
                                dwadd_epd(btnPtr, 0);
                                btnPos += epdread_epd(btnPtr);
                                oldCP = getcurpl();
                                DoActions(list(
                                SetMemory(0x6509B0, SetTo, btnPos),
                                SetDeaths(CurrentPlayer, SetTo, 24576007, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4361824, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4338864, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 327685, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 1396, 0),
                                SetMemory(0x6509B0, SetTo, oldCP),
                                ));
                                btnPtr, btnPos = EPD(0x5187EC) + 24, 5 * 5;
                                dwadd_epd(btnPtr, 0);
                                btnPos += epdread_epd(btnPtr);
                                oldCP = getcurpl();
                                DoActions(list(
                                SetMemory(0x6509B0, SetTo, btnPos),
                                SetDeaths(CurrentPlayer, SetTo, 24576007, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4361824, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4338864, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 327685, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 1396, 0),
                                SetMemory(0x6509B0, SetTo, oldCP),
                                ));
                                btnPtr, btnPos = EPD(0x5187EC) + 57, 5 * 5;
                                dwadd_epd(btnPtr, 0);
                                btnPos += epdread_epd(btnPtr);
                                oldCP = getcurpl();
                                DoActions(list(
                                SetMemory(0x6509B0, SetTo, btnPos),
                                SetDeaths(CurrentPlayer, SetTo, 24576007, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4361824, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4338864, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 327685, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 1396, 0),
                                SetMemory(0x6509B0, SetTo, oldCP),
                                ));
                            }
                        }
                        else{
                            Vulture_Booster[getcurpl()] = 0;
                            SetMemoryEPD(Vulture[getcurpl()] + 0x034 / 4, SetTo, 1050);
                            wwrite_epd(Vulture[getcurpl()] + 0x048 / 4,  0x048 % 4, 23);
                            bwrite_epd(Vulture[getcurpl()] + 0x022 / 4,  0x022 % 4, 28);
                            DisplayText("\n\n\n\n\n\n\x13\x04부스터 비활성화\n\n\n\n", (0));
                            PlayWAV("staredit\\wav\\AfterOff.wav");
                            if(
                                Memory(0x57F1B0, Exactly, (getcurpl()))
                            ){
                                btnPtr, btnPos = EPD(0x5187EC) + 0, 5 * 5;
                                dwadd_epd(btnPtr, 0);
                                btnPos += epdread_epd(btnPtr);
                                oldCP = getcurpl();
                                DoActions(list(
                                SetMemory(0x6509B0, SetTo, btnPos),
                                SetDeaths(CurrentPlayer, SetTo, 24510471, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4361824, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4338864, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 327685, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 1395, 0),
                                SetMemory(0x6509B0, SetTo, oldCP),
                                ));
                                btnPtr, btnPos = EPD(0x5187EC) + 3, 5 * 5;
                                dwadd_epd(btnPtr, 0);
                                btnPos += epdread_epd(btnPtr);
                                oldCP = getcurpl();
                                DoActions(list(
                                SetMemory(0x6509B0, SetTo, btnPos),
                                SetDeaths(CurrentPlayer, SetTo, 24510471, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4361824, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4338864, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 327685, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 1395, 0),
                                SetMemory(0x6509B0, SetTo, oldCP),
                                ));
                                btnPtr, btnPos = EPD(0x5187EC) + 6, 5 * 5;
                                dwadd_epd(btnPtr, 0);
                                btnPos += epdread_epd(btnPtr);
                                oldCP = getcurpl();
                                DoActions(list(
                                SetMemory(0x6509B0, SetTo, btnPos),
                                SetDeaths(CurrentPlayer, SetTo, 24510471, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4361824, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4338864, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 327685, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 1395, 0),
                                SetMemory(0x6509B0, SetTo, oldCP),
                                ));
                                btnPtr, btnPos = EPD(0x5187EC) + 21, 5 * 5;
                                dwadd_epd(btnPtr, 0);
                                btnPos += epdread_epd(btnPtr);
                                oldCP = getcurpl();
                                DoActions(list(
                                SetMemory(0x6509B0, SetTo, btnPos),
                                SetDeaths(CurrentPlayer, SetTo, 24510471, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4361824, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4338864, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 327685, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 1395, 0),
                                SetMemory(0x6509B0, SetTo, oldCP),
                                ));
                                btnPtr, btnPos = EPD(0x5187EC) + 24, 5 * 5;
                                dwadd_epd(btnPtr, 0);
                                btnPos += epdread_epd(btnPtr);
                                oldCP = getcurpl();
                                DoActions(list(
                                SetMemory(0x6509B0, SetTo, btnPos),
                                SetDeaths(CurrentPlayer, SetTo, 24510471, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4361824, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4338864, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 327685, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 1395, 0),
                                SetMemory(0x6509B0, SetTo, oldCP),
                                ));
                                btnPtr, btnPos = EPD(0x5187EC) + 57, 5 * 5;
                                dwadd_epd(btnPtr, 0);
                                btnPos += epdread_epd(btnPtr);
                                oldCP = getcurpl();
                                DoActions(list(
                                SetMemory(0x6509B0, SetTo, btnPos),
                                SetDeaths(CurrentPlayer, SetTo, 24510471, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4361824, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 4338864, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 327685, 0),
                                SetMemory(0x6509B0, Add, 1),
                                SetDeaths(CurrentPlayer, SetTo, 1395, 0),
                                SetMemory(0x6509B0, SetTo, oldCP),
                                ));
                            }
                        }
                    }
                    else{
                        PlayWAV("staredit\\wav\\no sound.wav");
                    }
                }
                // 벌쳐 속업
            }
        }
    EUDEndPlayerLoop();
    // 대기열인식
    // 남은체력/수
    // 타이머
    if(
        CTimer == 0
    ){
        CTimer = 2;
    }
    if(
        CTimer >= 1
    ){
        CTimer -= 1;
    }
    // 타이머
    EUDPlayerLoop()();
        if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
            if(
                Switch((1), (2)) && 
                CTimer == 0
            ){
                if(
                    Switch((1), (2))
                ){
                    Health = dwread_epd(Unit + 0x008 / 4);
                    Shield = dwread_epd(Unit + 0x060 / 4);
                    Health = Health / 256;
                    Shield = Shield / 256;
                    tct.chatAnnouncement("\x04남은 체력 \x04: \x17", Health, " \x04/ \x1F", Shield, "");
                }
            }
        }
    EUDEndPlayerLoop();
    // 남은체력/수
    // 강퇴
    EUDPlayerLoop()();
        if (getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
            if(
                Bring((13), (10), 0, (64), (52)) && 
                Ban[getcurpl()] == 0
            ){
                Ban[getcurpl()] = 1;
                if(
                    Memory(0x57F1B0, Exactly, (getcurpl()))
                ){
                    DisplayText("\n\n\n\n\n\n\n\n\x13\x08강퇴\x04당했습니다.\n\n", (0));
                    SetResources((13), (8), 500, (1));
                }
            }
        }
    EUDEndPlayerLoop();
    // 강퇴
    // 벌쳐 4발 발사
    EUDPlayerLoop()();
        if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
            if(
                Bring((13), (0), 1, (230), (24))
            ){
                if(
                    bread_epd(Vulture[getcurpl()] + 0x04D / 4,  0x04D % 4) == 107 || 
                    bread_epd(Vulture[getcurpl()] + 0x04D / 4,  0x04D % 4) == 152
                ){
                    if(
                        Hold_on[getcurpl()] == 0
                    ){
                        Hold_firecount[getcurpl()] = 3;
                        Hold_on[getcurpl()] = 1;
                    }
                }
                else{
                    Hold_firecount[getcurpl()] = 0;
                    if(
                        bread_epd(Vulture[getcurpl()] + 0x055 / 4,  0x055 % 4) == 0
                    ){
                        Hold_on[getcurpl()] = 0;
                    }
                }
                if(
                    Hold_Firetimer[getcurpl()] == 0
                ){
                    RemoveUnit((PHoldFire[getcurpl()]), (13));
                    Hold_fireunit[getcurpl()] = 0;
                }
                if(
                    Hold_firecount[getcurpl()] >= 1 && 
                    Hold_Firetimer[getcurpl()] == 0
                ){
                    Hold_Firetimer[getcurpl()] = 2;
                    Vulture_Direction[getcurpl()] = bread_epd(Vulture[getcurpl()] + 0x021 / 4,  0x021 % 4);
                    Hold_fireunit[getcurpl()] = epdread_epd(EPD(0x628438));
                    wwrite(0x665AC0 + 1696 + 244 * 2, 256);
                    CreateUnitWithProperties(1, (PHoldFire[getcurpl()]), (PLoc[getcurpl()]), (13), UnitProperty(hitpoint = 100, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                    bwrite_epd(Hold_fireunit[getcurpl()] + 0x021 / 4,  0x021 % 4, Vulture_Direction[getcurpl()]);
                    bwrite_epd(Hold_fireunit[getcurpl()] + 0x04A / 4,  0x04A % 4, Vulture_Direction[getcurpl()]);
                    bwrite_epd(Hold_fireunit[getcurpl()] + 0x023 / 4,  0x023 % 4, Vulture_Direction[getcurpl()]);
                    bwrite_epd(Hold_fireunit[getcurpl()] + 0x04B / 4,  0x04B % 4, Vulture_Direction[getcurpl()]);
                    Hold_firecount[getcurpl()] -= 1;
                    bwrite_epd(Hold_fireunit[getcurpl()] + 0x04D / 4,  0x04D % 4, 107);
                }
                if(
                    Hold_Firetimer[getcurpl()] >= 1
                ){
                    Hold_Firetimer[getcurpl()] -= 1;
                }
            }
            if(
                Bring((13), (10), 0, (230), (24))
            ){
                RemoveUnit((PHoldFire[getcurpl()]), (13));
                Hold_fireunit[getcurpl()] = 0;
            }
        }
    EUDEndPlayerLoop();
    // 벌쳐 4발 발사
    
}
