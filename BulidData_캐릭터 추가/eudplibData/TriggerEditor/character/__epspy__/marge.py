## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import func.trig as trg;
from func import trig as trg
# (Line 3) import variable as v;
import variable as v
# (Line 4) import system.text as text;
from system import text as text
# (Line 6) import character.group6.hodaka.main 	as hodaka;
from character.group6.hodaka import main as hodaka
# (Line 9) function main(playerID)
# (Line 10) {
@EUDFunc
def f_main(playerID):
    # (Line 11) trg.Main_WaitLoop();
    trg.Main_WaitLoop()
    # (Line 13) text.BuildingText(playerID);
    text.BuildingText(playerID)
    # (Line 14) text.ShopText(playerID);
    text.ShopText(playerID)
    # (Line 16) v.P_UltimateGauge[playerID] = 1000;
    _ARRW(v.P_UltimateGauge, playerID) << (1000)
    # (Line 18) ModifyUnitHitPoints(1, 155, playerID, "Anywhere", 100 - (v.P_UniqueCool[playerID] / 10));
    # (Line 19) ModifyUnitShields(1, 167, playerID, "Anywhere", v.P_UltimateGauge[playerID] / 10);
    DoActions(ModifyUnitHitPoints(1, 155, playerID, "Anywhere", 100 - (v.P_UniqueCool[playerID] // 10)))
    # (Line 21) if 	(v.P_HeroID[playerID] == 32) 	hodaka.main(playerID);
    DoActions(ModifyUnitShields(1, 167, playerID, "Anywhere", v.P_UltimateGauge[playerID] // 10))
    if EUDIf()(v.P_HeroID[playerID] == 32):
        hodaka.f_main(playerID)
        # (Line 23) SetDeaths(playerID, SetTo, v.P_Shield[playerID], " `SystemShield");
    EUDEndIf()
    # (Line 26) if(playerID < 6 && bread(0x58D2B0 + 0x207C * (0 / 46) + playerID * (46 - 31 * (0 / 46)) + (0 % 46)) != 80)
    DoActions(SetDeaths(playerID, SetTo, v.P_Shield[playerID], " `SystemShield"))
    if EUDIf()(EUDSCAnd()(playerID >= 6, neg=True)(f_bread(0x58D2B0 + 0x207C * (0 // 46) + playerID * (46 - 31 * (0 // 46)) + (0 % 46)) == 80, neg=True)()):
        # (Line 27) {
        # (Line 28) bwrite(0x58D2B0 + 0x207C * (0 / 46) + playerID * (46 - 31 * (0 / 46)) + (0 % 46), 60);
        f_bwrite(0x58D2B0 + 0x207C * (0 // 46) + playerID * (46 - 31 * (0 // 46)) + (0 % 46), 60)
        # (Line 29) bwrite(0x58D2B0 + 0x207C * (7 / 46) + playerID * (46 - 31 * (7 / 46)) + (7 % 46), 80);
        f_bwrite(0x58D2B0 + 0x207C * (7 // 46) + playerID * (46 - 31 * (7 // 46)) + (7 % 46), 80)
        # (Line 31) bwrite(0x58D2B0 + 0x207C * (2 / 46) + playerID * (46 - 31 * (2 / 46)) + (2 % 46), 60); 	//방어력 최종 적용
        f_bwrite(0x58D2B0 + 0x207C * (2 // 46) + playerID * (46 - 31 * (2 // 46)) + (2 % 46), 60)
        # (Line 32) bwrite(0x58D2B0 + 0x207C * (9 / 46) + playerID * (46 - 31 * (9 / 46)) + (9 % 46), 80);		//공격력 최종 적용
        f_bwrite(0x58D2B0 + 0x207C * (9 // 46) + playerID * (46 - 31 * (9 // 46)) + (9 % 46), 80)
        # (Line 33) }
        # (Line 34) }
    EUDEndIf()
