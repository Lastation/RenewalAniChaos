## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 9) function MoveLoc(unit : TrgUnit, playerID : TrgPlayer, pos_x, pos_y)
# (Line 10) {
@EUDTypedFunc([TrgUnit, TrgPlayer, None, None])
def MoveLoc(unit, playerID, pos_x, pos_y):
    # (Line 11) MoveLocation(v.P_LocationID[playerID], unit, playerID, "Anywhere");
    # (Line 12) addloc(v.P_LocationID[playerID], pos_x, pos_y);
    DoActions(MoveLocation(v.P_LocationID[playerID], unit, playerID, "Anywhere"))
    f_addloc(v.P_LocationID[playerID], pos_x, pos_y)
    # (Line 13) }
    # (Line 33) function SkillUnit(playerID : TrgPlayer, count, unit : TrgUnit, type : TrgCount)

# (Line 34) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, TrgCount])
def SkillUnit(playerID, count, unit, type):
    # (Line 35) switch (type)
    EUDSwitch(type)
    # (Line 36) {
    # (Line 37) case 0:
    _t1 = EUDSwitchCase()
    # (Line 38) CreateUnitWithProperties(count, unit, dwrand() % 8 + 33, playerID, UnitProperty(burrowed = true));
    if _t1(0):
        # (Line 39) break;
        DoActions(CreateUnitWithProperties(count, unit, f_dwrand() % 8 + 33, playerID, UnitProperty(burrowed=True)))
        EUDBreak()
        # (Line 40) case 1:
    _t2 = EUDSwitchCase()
    # (Line 41) CreateUnitWithProperties(count, unit, dwrand() % 8 + 33, playerID, UnitProperty(hallucinated = true));
    if _t2(1):
        # (Line 42) break;
        DoActions(CreateUnitWithProperties(count, unit, f_dwrand() % 8 + 33, playerID, UnitProperty(hallucinated=True)))
        EUDBreak()
        # (Line 43) case 2:
    _t3 = EUDSwitchCase()
    # (Line 44) CreateUnitWithProperties(count, unit, dwrand() % 8 + 33, playerID, UnitProperty(hallucinated = true, burrowed = true));
    if _t3(2):
        # (Line 45) break;
        DoActions(CreateUnitWithProperties(count, unit, f_dwrand() % 8 + 33, playerID, UnitProperty(hallucinated=True, burrowed=True)))
        EUDBreak()
        # (Line 46) }
    # (Line 48) SetInvincibility(Enable, unit, playerID, "[Skill]Unit_Wait_ALL");
    EUDEndSwitch()
    # (Line 49) MoveUnit(count, unit, playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
    DoActions(SetInvincibility(Enable, unit, playerID, "[Skill]Unit_Wait_ALL"))
    # (Line 50) }
    DoActions(MoveUnit(count, unit, playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
    # (Line 74) function Shape_Dot(playerID : TrgPlayer, count, Unit : TrgUnit, x, y, type)

# (Line 75) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None])
def Shape_Dot(playerID, count, Unit, x, y, type):
    # (Line 76) MoveLoc(v.P_UnitID[playerID], playerID, x, y);
    MoveLoc(v.P_UnitID[playerID], playerID, x, y)
    # (Line 77) SkillUnit(playerID, count, Unit, type);
    SkillUnit(playerID, count, Unit, type)
    # (Line 78) }
    # (Line 103) function Shape_Double(playerID : TrgPlayer, count, unit : TrgUnit, pos_x, pos_y, type : TrgCount)

# (Line 104) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, TrgCount])
def Shape_Double(playerID, count, unit, pos_x, pos_y, type):
    # (Line 105) Shape_Dot(playerID, count, unit, pos_x, pos_y, type);
    Shape_Dot(playerID, count, unit, pos_x, pos_y, type)
    # (Line 106) Shape_Dot(playerID, count, unit, -pos_x, -pos_y, type);
    Shape_Dot(playerID, count, unit, -pos_x, -pos_y, type)
    # (Line 107) }
    # (Line 135) function Shape_DoubleAt(playerID : TrgPlayer, count, unit : TrgUnit, pos_x, pos_y, distance_x, distance_y, type : TrgCount)

# (Line 136) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None, TrgCount])
def Shape_DoubleAt(playerID, count, unit, pos_x, pos_y, distance_x, distance_y, type):
    # (Line 137) Shape_Dot(playerID, count, unit, pos_x + distance_x, pos_y + distance_y, type);
    Shape_Dot(playerID, count, unit, pos_x + distance_x, pos_y + distance_y, type)
    # (Line 138) Shape_Dot(playerID, count, unit, -pos_x + distance_x, -pos_y + distance_y, type);
    Shape_Dot(playerID, count, unit, -pos_x + distance_x, -pos_y + distance_y, type)
    # (Line 139) }
    # (Line 165) function Shape_Square(playerID : TrgPlayer, count, Unit : TrgUnit, x, y, type)

# (Line 166) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None])
def Shape_Square(playerID, count, Unit, x, y, type):
    # (Line 167) MoveLoc(v.P_UnitID[playerID], playerID, x, y);
    MoveLoc(v.P_UnitID[playerID], playerID, x, y)
    # (Line 168) SkillUnit(playerID, count, Unit, type);
    SkillUnit(playerID, count, Unit, type)
    # (Line 169) MoveLoc(v.P_UnitID[playerID], playerID, -y, x);
    MoveLoc(v.P_UnitID[playerID], playerID, -y, x)
    # (Line 170) SkillUnit(playerID, count, Unit, type);
    SkillUnit(playerID, count, Unit, type)
    # (Line 171) MoveLoc(v.P_UnitID[playerID], playerID, -x, -y);
    MoveLoc(v.P_UnitID[playerID], playerID, -x, -y)
    # (Line 172) SkillUnit(playerID, count, Unit, type);
    SkillUnit(playerID, count, Unit, type)
    # (Line 173) MoveLoc(v.P_UnitID[playerID], playerID, y, -x);
    MoveLoc(v.P_UnitID[playerID], playerID, y, -x)
    # (Line 174) SkillUnit(playerID, count, Unit, type);
    SkillUnit(playerID, count, Unit, type)
    # (Line 175) }
    # (Line 204) function Shape_SquareAt(playerID : TrgPlayer, count, Unit : TrgUnit, x, y, distance_x, distance_y, type)

# (Line 205) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None, None])
def Shape_SquareAt(playerID, count, Unit, x, y, distance_x, distance_y, type):
    # (Line 206) MoveLoc(v.P_UnitID[playerID], playerID, x + distance_x, y + distance_y);
    MoveLoc(v.P_UnitID[playerID], playerID, x + distance_x, y + distance_y)
    # (Line 207) SkillUnit(playerID, count, Unit, type);
    SkillUnit(playerID, count, Unit, type)
    # (Line 208) MoveLoc(v.P_UnitID[playerID], playerID, -y + distance_x, x + distance_y);
    MoveLoc(v.P_UnitID[playerID], playerID, -y + distance_x, x + distance_y)
    # (Line 209) SkillUnit(playerID, count, Unit, type);
    SkillUnit(playerID, count, Unit, type)
    # (Line 210) MoveLoc(v.P_UnitID[playerID], playerID, -x + distance_x, -y + distance_y);
    MoveLoc(v.P_UnitID[playerID], playerID, -x + distance_x, -y + distance_y)
    # (Line 211) SkillUnit(playerID, count, Unit, type);
    SkillUnit(playerID, count, Unit, type)
    # (Line 212) MoveLoc(v.P_UnitID[playerID], playerID, y + distance_x, -x + distance_y);
    MoveLoc(v.P_UnitID[playerID], playerID, y + distance_x, -x + distance_y)
    # (Line 213) SkillUnit(playerID, count, Unit, type);
    SkillUnit(playerID, count, Unit, type)
    # (Line 214) }
    # (Line 239) function Shape_NxNSquare(playerID : TrgPlayer, count, unit : TrgUnit, size, interval, type)

# (Line 240) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None])
def Shape_NxNSquare(playerID, count, unit, size, interval, type):
    # (Line 241) var loop = (size * size) / 4;
    loop = EUDVariable()
    loop << ((size * size) // 4)
    # (Line 242) var space = interval / 2;
    space = EUDVariable()
    space << (interval // 2)
    # (Line 243) var dis_x, dis_y;
    dis_x, dis_y = EUDCreateVariables(2)
    # (Line 245) if (size == 1)
    if EUDIf()(size == 1):
        # (Line 246) {
        # (Line 247) Shape_Dot(playerID, count, unit, 0, 0, type);
        Shape_Dot(playerID, count, unit, 0, 0, type)
        # (Line 248) }
        # (Line 249) else if (size > 1)
    if EUDElseIf()(size <= 1, neg=True):
        # (Line 250) {
        # (Line 251) foreach(idx : EUDLoopRange(loop))
        for idx in EUDLoopRange(loop):
            # (Line 252) {
            # (Line 253) if (size % 2 == 0)
            if EUDIf()(size % 2 == 0):
                # (Line 254) {
                # (Line 255) dis_x = idx % (size / 2) + 1;
                dis_x << (idx % (size // 2) + 1)
                # (Line 256) dis_y = idx / (size / 2) + 1;
                dis_y << (idx // (size // 2) + 1)
                # (Line 257) if (dis_x == 1)
                if EUDIf()(dis_x == 1):
                    # (Line 258) { Shape_Square(playerID, count, unit, space, dis_y * interval - space, type); }
                    Shape_Square(playerID, count, unit, space, dis_y * interval - space, type)
                    # (Line 259) else if (dis_y == 1)
                if EUDElseIf()(dis_y == 1):
                    # (Line 260) { Shape_Square(playerID, count, unit, dis_x * interval - space, space, type); }
                    Shape_Square(playerID, count, unit, dis_x * interval - space, space, type)
                    # (Line 261) else
                    # (Line 262) { Shape_Square(playerID, count, unit, dis_x * interval - space, dis_y * interval - space, type); }
                if EUDElse()():
                    Shape_Square(playerID, count, unit, dis_x * interval - space, dis_y * interval - space, type)
                    # (Line 263) }
                EUDEndIf()
                # (Line 264) else if (size % 2 == 1)
            if EUDElseIf()(size % 2 == 1):
                # (Line 265) {
                # (Line 266) dis_x = idx % (size / 2);
                dis_x << (idx % (size // 2))
                # (Line 267) dis_y = idx / (size / 2);
                dis_y << (idx // (size // 2))
                # (Line 269) if (idx == 0)
                if EUDIf()(idx == 0):
                    # (Line 270) { Shape_Dot(playerID, count, unit, 0, 0, type); }
                    Shape_Dot(playerID, count, unit, 0, 0, type)
                    # (Line 271) else if (dis_y == 0)
                if EUDElseIf()(dis_y == 0):
                    # (Line 272) { Shape_Square(playerID, count, unit, dis_x * interval, 0, type); }
                    Shape_Square(playerID, count, unit, dis_x * interval, 0, type)
                    # (Line 273) else
                    # (Line 274) { Shape_Square(playerID, count, unit, dis_x * interval + interval, dis_y * interval, type); }
                if EUDElse()():
                    Shape_Square(playerID, count, unit, dis_x * interval + interval, dis_y * interval, type)
                    # (Line 276) if (idx == loop - 1)
                EUDEndIf()
                if EUDIf()(idx == loop - 1):
                    # (Line 277) { Shape_Square(playerID, count, unit, (size / 2) * interval, 0, type); }
                    Shape_Square(playerID, count, unit, (size // 2) * interval, 0, type)
                    # (Line 278) }
                EUDEndIf()
                # (Line 279) }
            EUDEndIf()
            # (Line 280) }

        # (Line 281) }
    EUDEndIf()
    # (Line 311) function Shape_Edge(playerID : TrgPlayer, count, Unit : TrgUnit, degree, n, interval, property)

# (Line 312) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None])
def Shape_Edge(playerID, count, Unit, degree, n, interval, property):
    # (Line 313) var i = 0;
    i = EUDVariable()
    i << (0)
    # (Line 315) trg.Table_Sin(playerID, degree, interval * 14 / 10);
    trg.Table_Sin(playerID, degree, interval * 14 // 10)
    # (Line 316) trg.Table_Cos(playerID, degree, interval * 14 / 10);
    trg.Table_Cos(playerID, degree, interval * 14 // 10)
    # (Line 318) var x_o = v.P_AngleCos[playerID];
    x_o = EUDVariable()
    x_o << (v.P_AngleCos[playerID])
    # (Line 319) var y_o = v.P_AngleSin[playerID];
    y_o = EUDVariable()
    y_o << (v.P_AngleSin[playerID])
    # (Line 321) var distance = (interval * 2) / (n - 1);
    distance = EUDVariable()
    distance << ((interval * 2) // (n - 1))
    # (Line 323) trg.Table_Sin(playerID, degree + 45, distance);
    trg.Table_Sin(playerID, degree + 45, distance)
    # (Line 324) trg.Table_Cos(playerID, degree + 45, distance);
    trg.Table_Cos(playerID, degree + 45, distance)
    # (Line 326) var distance_x = v.P_AngleCos[playerID];
    distance_x = EUDVariable()
    distance_x << (v.P_AngleCos[playerID])
    # (Line 327) var distance_y = v.P_AngleSin[playerID];
    distance_y = EUDVariable()
    distance_y << (v.P_AngleSin[playerID])
    # (Line 329) if (n == 1)
    if EUDIf()(n == 1):
        # (Line 330) {
        # (Line 331) Shape_Dot(playerID, 1, Unit, 0, 0, property);
        Shape_Dot(playerID, 1, Unit, 0, 0, property)
        # (Line 332) }
        # (Line 333) else if (n > 1)
    if EUDElseIf()(n <= 1, neg=True):
        # (Line 334) {
        # (Line 335) for (; i < n - 1; i++)
        if EUDWhile()(i >= n - 1, neg=True):
            def _t4():
                i.__iadd__(1)
            # (Line 336) {
            # (Line 337) Shape_Square(playerID, 1, Unit, x_o - (distance_x * i), y_o - (distance_y * i), property);
            Shape_Square(playerID, 1, Unit, x_o - (distance_x * i), y_o - (distance_y * i), property)
            # (Line 338) }
            # (Line 339) }
            EUDSetContinuePoint()
            _t4()
        EUDEndWhile()
        # (Line 340) }
    EUDEndIf()
    # (Line 374) function Shape_EdgeAt(playerID : TrgPlayer, count, unit : TrgUnit, degree, size, interval, x, y, type)

# (Line 375) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None, None, None])
def Shape_EdgeAt(playerID, count, unit, degree, size, interval, x, y, type):
    # (Line 376) trg.Table_Sin(playerID, degree, interval * 14 / 10);
    trg.Table_Sin(playerID, degree, interval * 14 // 10)
    # (Line 377) trg.Table_Cos(playerID, degree, interval * 14 / 10);
    trg.Table_Cos(playerID, degree, interval * 14 // 10)
    # (Line 379) var x_o = v.P_AngleCos[playerID];
    x_o = EUDVariable()
    x_o << (v.P_AngleCos[playerID])
    # (Line 380) var y_o = v.P_AngleSin[playerID];
    y_o = EUDVariable()
    y_o << (v.P_AngleSin[playerID])
    # (Line 382) var distance = (interval * 2) / (size - 1);
    distance = EUDVariable()
    distance << ((interval * 2) // (size - 1))
    # (Line 384) trg.Table_Sin(playerID, degree + 45, distance);
    trg.Table_Sin(playerID, degree + 45, distance)
    # (Line 385) trg.Table_Cos(playerID, degree + 45, distance);
    trg.Table_Cos(playerID, degree + 45, distance)
    # (Line 387) var distance_x = v.P_AngleCos[playerID];
    distance_x = EUDVariable()
    distance_x << (v.P_AngleCos[playerID])
    # (Line 388) var distance_y = v.P_AngleSin[playerID];
    distance_y = EUDVariable()
    distance_y << (v.P_AngleSin[playerID])
    # (Line 390) if (size == 1)
    if EUDIf()(size == 1):
        # (Line 391) { Shape_Dot(playerID, 1, unit, x, y, type); }
        Shape_Dot(playerID, 1, unit, x, y, type)
        # (Line 392) else if (size > 1)
    if EUDElseIf()(size <= 1, neg=True):
        # (Line 393) { foreach(idx : EUDLoopRange(size - 1)) { Shape_SquareAt(playerID, 1, unit,x_o - (distance_x * idx),y_o - (distance_y * idx), x, y, type); } }
        for idx in EUDLoopRange(size - 1):
            Shape_SquareAt(playerID, 1, unit, x_o - (distance_x * idx), y_o - (distance_y * idx), x, y, type)

        # (Line 394) }
    EUDEndIf()
    # (Line 424) function Shape_Line(playerID : TrgPlayer, count, unit : TrgUnit, degree, size, interval, distance, type)

# (Line 425) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None, None])
def Shape_Line(playerID, count, unit, degree, size, interval, distance, type):
    # (Line 426) trg.Table_Sin(playerID, degree + 90, distance);
    trg.Table_Sin(playerID, degree + 90, distance)
    # (Line 427) trg.Table_Cos(playerID, degree + 90, distance);
    trg.Table_Cos(playerID, degree + 90, distance)
    # (Line 429) var initial_x = v.P_AngleCos[playerID];
    initial_x = EUDVariable()
    initial_x << (v.P_AngleCos[playerID])
    # (Line 430) var initial_y = v.P_AngleSin[playerID];
    initial_y = EUDVariable()
    initial_y << (v.P_AngleSin[playerID])
    # (Line 432) if (size % 2 == 0)
    if EUDIf()(size % 2 == 0):
        # (Line 433) { trg.Table_Sin(playerID, degree, interval * (size / 2) - interval / 2); trg.Table_Cos(playerID, degree, interval * (size / 2) - interval / 2); }
        trg.Table_Sin(playerID, degree, interval * (size // 2) - interval // 2)
        trg.Table_Cos(playerID, degree, interval * (size // 2) - interval // 2)
        # (Line 434) else
        # (Line 435) { trg.Table_Sin(playerID, degree, interval * (size / 2)); trg.Table_Cos(playerID, degree, interval * (size / 2)); }
    if EUDElse()():
        trg.Table_Sin(playerID, degree, interval * (size // 2))
        trg.Table_Cos(playerID, degree, interval * (size // 2))
        # (Line 437) initial_x = initial_x + v.P_AngleCos[playerID];
    EUDEndIf()
    initial_x << (initial_x + v.P_AngleCos[playerID])
    # (Line 438) initial_y = initial_y + v.P_AngleSin[playerID];
    initial_y << (initial_y + v.P_AngleSin[playerID])
    # (Line 440) trg.Table_Sin(playerID, degree, interval);
    trg.Table_Sin(playerID, degree, interval)
    # (Line 441) trg.Table_Cos(playerID, degree, interval);
    trg.Table_Cos(playerID, degree, interval)
    # (Line 443) if (size == 1)
    if EUDIf()(size == 1):
        # (Line 444) { Shape_Dot(playerID, count, unit, 0, 0, type); }
        Shape_Dot(playerID, count, unit, 0, 0, type)
        # (Line 445) else if (size > 1)
    if EUDElseIf()(size <= 1, neg=True):
        # (Line 446) { foreach(idx : EUDLoopRange(size)) { Shape_Dot(playerID, count, unit, initial_x - idx * v.P_AngleCos[playerID], initial_y - idx * v.P_AngleSin[playerID], type); } }
        for idx in EUDLoopRange(size):
            Shape_Dot(playerID, count, unit, initial_x - idx * v.P_AngleCos[playerID], initial_y - idx * v.P_AngleSin[playerID], type)

        # (Line 447) }
    EUDEndIf()
