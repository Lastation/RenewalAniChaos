## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 17) function Table_Cos(playerID : TrgPlayer, degree, distance)
# (Line 18) {
@EUDTypedFunc([TrgPlayer, None, None])
def Table_Cos(playerID, degree, distance):
    # (Line 19) degree = degree % 360;
    degree << (degree % 360)
    # (Line 20) v.P_AngleCos[playerID] = v.P_Table_Cos[degree];
    _ARRW(v.P_AngleCos, playerID) << (v.P_Table_Cos[degree])
    # (Line 22) if (v.P_AngleCos[playerID] > 2147483648)
    if EUDIf()(v.P_AngleCos[playerID] <= 2147483648, neg=True):
        # (Line 23) {
        # (Line 24) v.P_AngleCos[playerID] = -v.P_AngleCos[playerID];
        _ARRW(v.P_AngleCos, playerID) << (-v.P_AngleCos[playerID])
        # (Line 25) v.P_AngleCos[playerID] = (v.P_AngleCos[playerID] * distance) / 100;
        _ARRW(v.P_AngleCos, playerID) << ((v.P_AngleCos[playerID] * distance) // 100)
        # (Line 26) v.P_AngleCos[playerID] = -v.P_AngleCos[playerID];
        _ARRW(v.P_AngleCos, playerID) << (-v.P_AngleCos[playerID])
        # (Line 27) }
        # (Line 28) else
        # (Line 29) { v.P_AngleCos[playerID] = (v.P_AngleCos[playerID] * distance) / 100; }
    if EUDElse()():
        _ARRW(v.P_AngleCos, playerID) << ((v.P_AngleCos[playerID] * distance) // 100)
        # (Line 30) }
    EUDEndIf()
    # (Line 45) function Table_Sin(playerID : TrgPlayer, degree, distance)

# (Line 46) {
@EUDTypedFunc([TrgPlayer, None, None])
def Table_Sin(playerID, degree, distance):
    # (Line 47) degree = degree % 360;
    degree << (degree % 360)
    # (Line 48) v.P_AngleSin[playerID] = v.P_Table_Sin[degree];
    _ARRW(v.P_AngleSin, playerID) << (v.P_Table_Sin[degree])
    # (Line 50) if (v.P_AngleSin[playerID] > 2147483648)
    if EUDIf()(v.P_AngleSin[playerID] <= 2147483648, neg=True):
        # (Line 51) {
        # (Line 52) v.P_AngleSin[playerID] = -v.P_AngleSin[playerID];
        _ARRW(v.P_AngleSin, playerID) << (-v.P_AngleSin[playerID])
        # (Line 53) v.P_AngleSin[playerID] = (v.P_AngleSin[playerID] * distance) / 100;
        _ARRW(v.P_AngleSin, playerID) << ((v.P_AngleSin[playerID] * distance) // 100)
        # (Line 54) v.P_AngleSin[playerID] = -v.P_AngleSin[playerID];
        _ARRW(v.P_AngleSin, playerID) << (-v.P_AngleSin[playerID])
        # (Line 55) }
        # (Line 56) else
        # (Line 57) { v.P_AngleSin[playerID] = (v.P_AngleSin[playerID] * distance) / 100; }
    if EUDElse()():
        _ARRW(v.P_AngleSin, playerID) << ((v.P_AngleSin[playerID] * distance) // 100)
        # (Line 58) }
    EUDEndIf()
    # (Line 75) function MoveLoc(unit : TrgUnit, playerID : TrgPlayer, pos_x, pos_y)

# (Line 76) {
@EUDTypedFunc([TrgUnit, TrgPlayer, None, None])
def MoveLoc(unit, playerID, pos_x, pos_y):
    # (Line 77) MoveLocation(v.P_LocationID[playerID], unit, playerID, "Anywhere");
    # (Line 78) addloc(v.P_LocationID[playerID], pos_x, pos_y);
    DoActions(MoveLocation(v.P_LocationID[playerID], unit, playerID, "Anywhere"))
    f_addloc(v.P_LocationID[playerID], pos_x, pos_y)
    # (Line 79) }
    # (Line 94) function SkillUnit(playerID : TrgPlayer, count, unit : TrgUnit)

# (Line 95) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit])
def SkillUnit(playerID, count, unit):
    # (Line 96) CreateUnit(count, unit, dwrand() % 8 + 33, playerID);
    # (Line 97) SetInvincibility(Enable, unit, playerID, "Anywhere");
    DoActions(CreateUnit(count, unit, f_dwrand() % 8 + 33, playerID))
    # (Line 98) MoveUnit(count, unit, playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
    DoActions(SetInvincibility(Enable, unit, playerID, "Anywhere"))
    # (Line 99) }
    DoActions(MoveUnit(count, unit, playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
    # (Line 118) function Shape_Dot(playerID : TrgPlayer, count, unit : TrgUnit, pos_x, pos_y)

# (Line 119) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def Shape_Dot(playerID, count, unit, pos_x, pos_y):
    # (Line 120) MoveLoc(v.P_CharacterID[playerID], playerID, pos_x, pos_y);
    MoveLoc(v.P_CharacterID[playerID], playerID, pos_x, pos_y)
    # (Line 121) SkillUnit(playerID, count, unit);
    SkillUnit(playerID, count, unit)
    # (Line 122) }
    # (Line 143) function Shape_Square(playerID : TrgPlayer, count, unit : TrgUnit, pos_x, pos_y)

# (Line 144) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def Shape_Square(playerID, count, unit, pos_x, pos_y):
    # (Line 145) MoveLoc(v.P_CharacterID[playerID], playerID, pos_x, pos_y);
    MoveLoc(v.P_CharacterID[playerID], playerID, pos_x, pos_y)
    # (Line 146) SkillUnit(playerID, count, unit);
    SkillUnit(playerID, count, unit)
    # (Line 147) MoveLoc(v.P_CharacterID[playerID], playerID, -pos_y, pos_x);
    MoveLoc(v.P_CharacterID[playerID], playerID, -pos_y, pos_x)
    # (Line 148) SkillUnit(playerID, count, unit);
    SkillUnit(playerID, count, unit)
    # (Line 149) MoveLoc(v.P_CharacterID[playerID], playerID, -pos_x, -pos_y);
    MoveLoc(v.P_CharacterID[playerID], playerID, -pos_x, -pos_y)
    # (Line 150) SkillUnit(playerID, count, unit);
    SkillUnit(playerID, count, unit)
    # (Line 151) MoveLoc(v.P_CharacterID[playerID], playerID, pos_y, -pos_x);
    MoveLoc(v.P_CharacterID[playerID], playerID, pos_y, -pos_x)
    # (Line 152) SkillUnit(playerID, count, unit);
    SkillUnit(playerID, count, unit)
    # (Line 153) }
    # (Line 173) function Shape_NxNSquare(playerID : TrgPlayer, count, unit : TrgUnit, size, interval)

# (Line 174) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def Shape_NxNSquare(playerID, count, unit, size, interval):
    # (Line 175) var loop = (size * size) / 4;
    loop = EUDVariable()
    loop << ((size * size) // 4)
    # (Line 176) var space = interval / 2;
    space = EUDVariable()
    space << (interval // 2)
    # (Line 177) var dis_x, dis_y;
    dis_x, dis_y = EUDCreateVariables(2)
    # (Line 179) foreach(idx : EUDLoopRange(loop))
    for idx in EUDLoopRange(loop):
        # (Line 180) {
        # (Line 181) if (size == 1)
        if EUDIf()(size == 1):
            # (Line 182) { Shape_Dot(playerID, count, unit, 0, 0); }
            Shape_Dot(playerID, count, unit, 0, 0)
            # (Line 183) else if (size % 2 == 0)
        if EUDElseIf()(size % 2 == 0):
            # (Line 184) {
            # (Line 185) dis_x = idx % (size / 2) + 1;
            dis_x << (idx % (size // 2) + 1)
            # (Line 186) dis_y = idx / (size / 2) + 1;
            dis_y << (idx // (size // 2) + 1)
            # (Line 187) if (dis_x == 1)
            if EUDIf()(dis_x == 1):
                # (Line 188) { Shape_Square(playerID, count, unit, space, dis_y * interval - space); }
                Shape_Square(playerID, count, unit, space, dis_y * interval - space)
                # (Line 189) else if (dis_y == 1)
            if EUDElseIf()(dis_y == 1):
                # (Line 190) { Shape_Square(playerID, count, unit, dis_x * interval - space, space); }
                Shape_Square(playerID, count, unit, dis_x * interval - space, space)
                # (Line 191) else
                # (Line 192) { Shape_Square(playerID, count, unit, dis_x * interval - space, dis_y * interval - space); }
            if EUDElse()():
                Shape_Square(playerID, count, unit, dis_x * interval - space, dis_y * interval - space)
                # (Line 193) }
            EUDEndIf()
            # (Line 194) else if (size % 2 == 1)
        if EUDElseIf()(size % 2 == 1):
            # (Line 195) {
            # (Line 196) dis_x = idx % (size / 2);
            dis_x << (idx % (size // 2))
            # (Line 197) dis_y = idx / (size / 2);
            dis_y << (idx // (size // 2))
            # (Line 199) if (idx == 0)
            if EUDIf()(idx == 0):
                # (Line 200) { Shape_Dot(playerID, count, unit, 0, 0); }
                Shape_Dot(playerID, count, unit, 0, 0)
                # (Line 201) else if (dis_y == 0)
            if EUDElseIf()(dis_y == 0):
                # (Line 202) { Shape_Square(playerID, count, unit, dis_x * interval, 0); }
                Shape_Square(playerID, count, unit, dis_x * interval, 0)
                # (Line 203) else
                # (Line 204) { Shape_Square(playerID, count, unit, dis_x * interval + interval, dis_y * interval); }
            if EUDElse()():
                Shape_Square(playerID, count, unit, dis_x * interval + interval, dis_y * interval)
                # (Line 206) if (idx == loop - 1)
            EUDEndIf()
            if EUDIf()(idx == loop - 1):
                # (Line 207) { Shape_Square(playerID, count, unit, (idx / 2) * interval, 0); }
                Shape_Square(playerID, count, unit, (idx // 2) * interval, 0)
                # (Line 208) }
            EUDEndIf()
            # (Line 209) }
        EUDEndIf()
        # (Line 210) }

    # (Line 234) function Shape_Line(playerID : TrgPlayer, count, unit : TrgUnit, degree, size, interval, distance)

# (Line 235) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None])
def Shape_Line(playerID, count, unit, degree, size, interval, distance):
    # (Line 236) Table_Sin(playerID, degree + 90, distance);
    Table_Sin(playerID, degree + 90, distance)
    # (Line 237) Table_Cos(playerID, degree + 90, distance);
    Table_Cos(playerID, degree + 90, distance)
    # (Line 239) var initial_x = v.P_AngleCos[playerID];
    initial_x = EUDVariable()
    initial_x << (v.P_AngleCos[playerID])
    # (Line 240) var initial_y = v.P_AngleSin[playerID];
    initial_y = EUDVariable()
    initial_y << (v.P_AngleSin[playerID])
    # (Line 242) if (size % 2 == 0)
    if EUDIf()(size % 2 == 0):
        # (Line 243) { Table_Sin(playerID, degree, interval * (size / 2) - interval / 2); Table_Cos(playerID, degree, interval * (size / 2) - interval / 2); }
        Table_Sin(playerID, degree, interval * (size // 2) - interval // 2)
        Table_Cos(playerID, degree, interval * (size // 2) - interval // 2)
        # (Line 244) else
        # (Line 245) { Table_Sin(playerID, degree, interval * (size / 2)); Table_Cos(playerID, degree, interval * (size / 2)); }
    if EUDElse()():
        Table_Sin(playerID, degree, interval * (size // 2))
        Table_Cos(playerID, degree, interval * (size // 2))
        # (Line 247) initial_x = initial_x + v.P_AngleCos[playerID];
    EUDEndIf()
    initial_x << (initial_x + v.P_AngleCos[playerID])
    # (Line 248) initial_y = initial_y + v.P_AngleSin[playerID];
    initial_y << (initial_y + v.P_AngleSin[playerID])
    # (Line 250) Table_Sin(playerID, degree, interval);
    Table_Sin(playerID, degree, interval)
    # (Line 251) Table_Cos(playerID, degree, interval);
    Table_Cos(playerID, degree, interval)
    # (Line 253) foreach(idx : EUDLoopRange(size))
    for idx in EUDLoopRange(size):
        # (Line 254) { Shape_Dot(playerID, count, unit, initial_x - idx * v.P_AngleCos[playerID], initial_y - idx * v.P_AngleSin[playerID]); }
        Shape_Dot(playerID, count, unit, initial_x - idx * v.P_AngleCos[playerID], initial_y - idx * v.P_AngleSin[playerID])
        # (Line 255) }

    # (Line 277) function Shape_Cross(playerID : TrgPlayer, count, unit : TrgUnit, degree, size, interval)

# (Line 278) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None])
def Shape_Cross(playerID, count, unit, degree, size, interval):
    # (Line 279) var distance = interval / 2;
    distance = EUDVariable()
    distance << (interval // 2)
    # (Line 281) Table_Sin(playerID, degree, distance);
    Table_Sin(playerID, degree, distance)
    # (Line 282) Table_Cos(playerID, degree, distance);
    Table_Cos(playerID, degree, distance)
    # (Line 284) var gradient_x = v.P_AngleCos[playerID] / 2;
    gradient_x = EUDVariable()
    gradient_x << (v.P_AngleCos[playerID] // 2)
    # (Line 285) var gradient_y = v.P_AngleSin[playerID] / 2;
    gradient_y = EUDVariable()
    gradient_y << (v.P_AngleSin[playerID] // 2)
    # (Line 287) var angle_x, angle_y;
    angle_x, angle_y = EUDCreateVariables(2)
    # (Line 289) Table_Sin(playerID, degree, interval);
    Table_Sin(playerID, degree, interval)
    # (Line 290) Table_Cos(playerID, degree, interval);
    Table_Cos(playerID, degree, interval)
    # (Line 292) foreach(idx : EUDLoopRange(size))
    for idx in EUDLoopRange(size):
        # (Line 293) {
        # (Line 294) angle_x = v.P_AngleCos[playerID] * idx;
        angle_x << (v.P_AngleCos[playerID] * idx)
        # (Line 295) angle_y = v.P_AngleSin[playerID] * idx;
        angle_y << (v.P_AngleSin[playerID] * idx)
        # (Line 297) if (size % 2 == 0 && idx != size / 2)
        if EUDIf()(EUDSCAnd()(size % 2 == 0)(idx == size // 2, neg=True)()):
            # (Line 298) { Shape_Square(playerID, count, unit, angle_x + gradient_x, angle_y + gradient_y); }
            Shape_Square(playerID, count, unit, angle_x + gradient_x, angle_y + gradient_y)
            # (Line 299) else if (size % 2 == 1)
        if EUDElseIf()(size % 2 == 1):
            # (Line 300) {
            # (Line 301) if (idx == 0)
            if EUDIf()(idx == 0):
                # (Line 302) { Shape_Dot(playerID, count, unit, 0, 0); }
                Shape_Dot(playerID, count, unit, 0, 0)
                # (Line 303) else
                # (Line 304) { Shape_Square(playerID, count, unit, angle_x, angle_y); }
            if EUDElse()():
                Shape_Square(playerID, count, unit, angle_x, angle_y)
                # (Line 305) }
            EUDEndIf()
            # (Line 306) }
        EUDEndIf()
        # (Line 307) }

    # (Line 329) function Shape_Edge(playerID : TrgPlayer, count, unit : TrgUnit, degree, size, interval)

# (Line 330) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None])
def Shape_Edge(playerID, count, unit, degree, size, interval):
    # (Line 331) Table_Sin(playerID, degree, interval * 14 / 10);
    Table_Sin(playerID, degree, interval * 14 // 10)
    # (Line 332) Table_Cos(playerID, degree, interval * 14 / 10);
    Table_Cos(playerID, degree, interval * 14 // 10)
    # (Line 334) var x_o = v.P_AngleCos[playerID];
    x_o = EUDVariable()
    x_o << (v.P_AngleCos[playerID])
    # (Line 335) var y_o = v.P_AngleSin[playerID];
    y_o = EUDVariable()
    y_o << (v.P_AngleSin[playerID])
    # (Line 337) var distance = (interval * 2) / (size - 1);
    distance = EUDVariable()
    distance << ((interval * 2) // (size - 1))
    # (Line 339) Table_Sin(playerID, degree + 45, distance);
    Table_Sin(playerID, degree + 45, distance)
    # (Line 340) Table_Cos(playerID, degree + 45, distance);
    Table_Cos(playerID, degree + 45, distance)
    # (Line 342) var distance_x = v.P_AngleCos[playerID];
    distance_x = EUDVariable()
    distance_x << (v.P_AngleCos[playerID])
    # (Line 343) var distance_y = v.P_AngleSin[playerID];
    distance_y = EUDVariable()
    distance_y << (v.P_AngleSin[playerID])
    # (Line 345) if (size == 1)
    if EUDIf()(size == 1):
        # (Line 346) { Shape_Dot(playerID, 1, unit, 0, 0); }
        Shape_Dot(playerID, 1, unit, 0, 0)
        # (Line 347) else if (size > 1)
    if EUDElseIf()(size <= 1, neg=True):
        # (Line 348) { foreach(idx : EUDLoopRange(size)) { Shape_Square(playerID, 1, unit, x_o - (distance_x * idx), y_o - (distance_y * idx)); } }
        for idx in EUDLoopRange(size):
            Shape_Square(playerID, 1, unit, x_o - (distance_x * idx), y_o - (distance_y * idx))

        # (Line 349) }
    EUDEndIf()
