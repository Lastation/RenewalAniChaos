## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import variable as v;
import variable as v
# (Line 2) import func.trig as trg;
from func import trig as trg
# (Line 23) function Shape_DotAt(playerID : TrgPlayer, baseunit : TrgUnit, count, unit : TrgUnit, pos_x, pos_y)
# (Line 24) {
@EUDTypedFunc([TrgPlayer, TrgUnit, None, TrgUnit, None, None])
def Shape_DotAt(playerID, baseunit, count, unit, pos_x, pos_y):
    # (Line 25) trg.MoveLoc(baseunit ,playerID, pos_x, pos_y);
    trg.MoveLoc(baseunit, playerID, pos_x, pos_y)
    # (Line 26) trg.SkillUnit(playerID, count, unit);
    trg.SkillUnit(playerID, count, unit)
    # (Line 27) }
    # (Line 33) function Shape_DotAt2(playerID : TrgPlayer, count, unit : TrgUnit, pos_x, pos_y)

# (Line 34) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def Shape_DotAt2(playerID, count, unit, pos_x, pos_y):
    # (Line 35) trg.MoveLoc(v.P_UnitID[playerID] ,playerID, pos_x, pos_y);
    trg.MoveLoc(v.P_UnitID[playerID], playerID, pos_x, pos_y)
    # (Line 36) trg.SkillUnit(playerID, count, unit);
    trg.SkillUnit(playerID, count, unit)
    # (Line 37) }
    # (Line 59) function Shape_DoubleAt(playerID : TrgPlayer, baseunit : TrgUnit, count, unit : TrgUnit, pos_x, pos_y)

# (Line 60) {
@EUDTypedFunc([TrgPlayer, TrgUnit, None, TrgUnit, None, None])
def Shape_DoubleAt(playerID, baseunit, count, unit, pos_x, pos_y):
    # (Line 61) Shape_DotAt(playerID, baseunit, count, unit, pos_x, pos_y);
    Shape_DotAt(playerID, baseunit, count, unit, pos_x, pos_y)
    # (Line 62) Shape_DotAt(playerID, baseunit, count, unit, -pos_x, -pos_y);
    Shape_DotAt(playerID, baseunit, count, unit, -pos_x, -pos_y)
    # (Line 63) }
    # (Line 69) function Shape_DoubleAt2(playerID : TrgPlayer, count, unit : TrgUnit, pos_x, pos_y)

# (Line 70) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def Shape_DoubleAt2(playerID, count, unit, pos_x, pos_y):
    # (Line 71) Shape_DotAt2(playerID, v.P_UnitID[playerID], count, unit, pos_x, pos_y);
    Shape_DotAt2(playerID, v.P_UnitID[playerID], count, unit, pos_x, pos_y)
    # (Line 72) Shape_DotAt2(playerID, v.P_UnitID[playerID], count, unit, -pos_x, -pos_y);
    Shape_DotAt2(playerID, v.P_UnitID[playerID], count, unit, -pos_x, -pos_y)
    # (Line 73) }
    # (Line 96) function Shape_SquareAt(playerID : TrgPlayer, baseunit : TrgUnit, count, unit : TrgUnit, pos_x, pos_y)

# (Line 97) {
@EUDTypedFunc([TrgPlayer, TrgUnit, None, TrgUnit, None, None])
def Shape_SquareAt(playerID, baseunit, count, unit, pos_x, pos_y):
    # (Line 98) trg.MoveLoc(baseunit, playerID, pos_x, pos_y);
    trg.MoveLoc(baseunit, playerID, pos_x, pos_y)
    # (Line 99) trg.SkillUnit(playerID, count, unit);
    trg.SkillUnit(playerID, count, unit)
    # (Line 100) trg.MoveLoc(baseunit, playerID, -pos_y, pos_x);
    trg.MoveLoc(baseunit, playerID, -pos_y, pos_x)
    # (Line 101) trg.SkillUnit(playerID, count, unit);
    trg.SkillUnit(playerID, count, unit)
    # (Line 102) trg.MoveLoc(baseunit, playerID, -pos_x, -pos_y);
    trg.MoveLoc(baseunit, playerID, -pos_x, -pos_y)
    # (Line 103) trg.SkillUnit(playerID, count, unit);
    trg.SkillUnit(playerID, count, unit)
    # (Line 104) trg.MoveLoc(baseunit, playerID, pos_y, -pos_x);
    trg.MoveLoc(baseunit, playerID, pos_y, -pos_x)
    # (Line 105) trg.SkillUnit(playerID, count, unit);
    trg.SkillUnit(playerID, count, unit)
    # (Line 106) }
    # (Line 113) function Shape_SquareAt2(playerID : TrgPlayer, count, unit : TrgUnit, pos_x, pos_y, distance_x, distance_y)

# (Line 114) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None])
def Shape_SquareAt2(playerID, count, unit, pos_x, pos_y, distance_x, distance_y):
    # (Line 115) trg.MoveLoc(v.P_UnitID[playerID] ,playerID, distance_x + pos_x, distance_y + pos_y);
    trg.MoveLoc(v.P_UnitID[playerID], playerID, distance_x + pos_x, distance_y + pos_y)
    # (Line 116) trg.SkillUnit(playerID, count, unit);
    trg.SkillUnit(playerID, count, unit)
    # (Line 117) trg.MoveLoc(v.P_UnitID[playerID] ,playerID, distance_x + -pos_y, distance_y + pos_x);
    trg.MoveLoc(v.P_UnitID[playerID], playerID, distance_x + -pos_y, distance_y + pos_x)
    # (Line 118) trg.SkillUnit(playerID, count, unit);
    trg.SkillUnit(playerID, count, unit)
    # (Line 119) trg.MoveLoc(v.P_UnitID[playerID] ,playerID, distance_x + -pos_x, distance_y + -pos_y);
    trg.MoveLoc(v.P_UnitID[playerID], playerID, distance_x + -pos_x, distance_y + -pos_y)
    # (Line 120) trg.SkillUnit(playerID, count, unit);
    trg.SkillUnit(playerID, count, unit)
    # (Line 121) trg.MoveLoc(v.P_UnitID[playerID] ,playerID, distance_x + pos_y, distance_y + -pos_x);
    trg.MoveLoc(v.P_UnitID[playerID], playerID, distance_x + pos_y, distance_y + -pos_x)
    # (Line 122) trg.SkillUnit(playerID, count, unit);
    trg.SkillUnit(playerID, count, unit)
    # (Line 123) }
    # (Line 145) function Shape_NxNSquareAt(playerID : TrgPlayer, baseunit : TrgUnit, count, unit : TrgUnit, size, interval)

# (Line 146) {
@EUDTypedFunc([TrgPlayer, TrgUnit, None, TrgUnit, None, None])
def Shape_NxNSquareAt(playerID, baseunit, count, unit, size, interval):
    # (Line 147) var loop = (size * size) / 4;
    loop = EUDVariable()
    loop << ((size * size) // 4)
    # (Line 148) var space = interval / 2;
    space = EUDVariable()
    space << (interval // 2)
    # (Line 149) var dis_x, dis_y;
    dis_x, dis_y = EUDCreateVariables(2)
    # (Line 151) if (size == 1)
    if EUDIf()(size == 1):
        # (Line 152) {
        # (Line 153) Shape_DotAt(playerID, baseunit, count, unit, 0, 0);
        Shape_DotAt(playerID, baseunit, count, unit, 0, 0)
        # (Line 154) }
        # (Line 155) else if (size > 1)
    if EUDElseIf()(size <= 1, neg=True):
        # (Line 156) {
        # (Line 157) foreach(idx : EUDLoopRange(loop))
        for idx in EUDLoopRange(loop):
            # (Line 158) {
            # (Line 159) if (size % 2 == 0)
            if EUDIf()(size % 2 == 0):
                # (Line 160) {
                # (Line 161) dis_x = idx % (size / 2) + 1;
                dis_x << (idx % (size // 2) + 1)
                # (Line 162) dis_y = idx / (size / 2) + 1;
                dis_y << (idx // (size // 2) + 1)
                # (Line 163) if (dis_x == 1)
                if EUDIf()(dis_x == 1):
                    # (Line 164) { Shape_SquareAt(playerID, baseunit, count, unit, space, dis_y * interval - space); }
                    Shape_SquareAt(playerID, baseunit, count, unit, space, dis_y * interval - space)
                    # (Line 165) else if (dis_y == 1)
                if EUDElseIf()(dis_y == 1):
                    # (Line 166) { Shape_SquareAt(playerID, baseunit, count, unit, dis_x * interval - space, space); }
                    Shape_SquareAt(playerID, baseunit, count, unit, dis_x * interval - space, space)
                    # (Line 167) else
                    # (Line 168) { Shape_SquareAt(playerID, baseunit, count, unit, dis_x * interval - space, dis_y * interval - space); }
                if EUDElse()():
                    Shape_SquareAt(playerID, baseunit, count, unit, dis_x * interval - space, dis_y * interval - space)
                    # (Line 169) }
                EUDEndIf()
                # (Line 170) else if (size % 2 == 1)
            if EUDElseIf()(size % 2 == 1):
                # (Line 171) {
                # (Line 172) dis_x = idx % (size / 2);
                dis_x << (idx % (size // 2))
                # (Line 173) dis_y = idx / (size / 2);
                dis_y << (idx // (size // 2))
                # (Line 175) if (idx == 0)
                if EUDIf()(idx == 0):
                    # (Line 176) { Shape_DotAt(playerID, baseunit, count, unit, 0, 0); }
                    Shape_DotAt(playerID, baseunit, count, unit, 0, 0)
                    # (Line 177) else if (dis_y == 0)
                if EUDElseIf()(dis_y == 0):
                    # (Line 178) { Shape_SquareAt(playerID, baseunit, count, unit, dis_x * interval, 0); }
                    Shape_SquareAt(playerID, baseunit, count, unit, dis_x * interval, 0)
                    # (Line 179) else
                    # (Line 180) { Shape_SquareAt(playerID, baseunit, count, unit, dis_x * interval + interval, dis_y * interval); }
                if EUDElse()():
                    Shape_SquareAt(playerID, baseunit, count, unit, dis_x * interval + interval, dis_y * interval)
                    # (Line 182) if (idx == loop - 1)
                EUDEndIf()
                if EUDIf()(idx == loop - 1):
                    # (Line 183) { Shape_SquareAt(playerID, baseunit, count, unit, (size / 2) * interval, 0); }
                    Shape_SquareAt(playerID, baseunit, count, unit, (size // 2) * interval, 0)
                    # (Line 184) }
                EUDEndIf()
                # (Line 185) }
            EUDEndIf()
            # (Line 186) }

        # (Line 187) }
    EUDEndIf()
    # (Line 209) function Shape_NxNSquareAt2(playerID : TrgPlayer, count, unit : TrgUnit, size, interval, x, y)

# (Line 210) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None])
def Shape_NxNSquareAt2(playerID, count, unit, size, interval, x, y):
    # (Line 211) var loop = (size * size) / 4;
    loop = EUDVariable()
    loop << ((size * size) // 4)
    # (Line 212) var space = interval / 2;
    space = EUDVariable()
    space << (interval // 2)
    # (Line 213) var dis_x, dis_y;
    dis_x, dis_y = EUDCreateVariables(2)
    # (Line 215) if (size == 1)
    if EUDIf()(size == 1):
        # (Line 216) {
        # (Line 217) Shape_DotAt2(playerID, count, unit, x, y);
        Shape_DotAt2(playerID, count, unit, x, y)
        # (Line 218) }
        # (Line 219) else if (size > 1)
    if EUDElseIf()(size <= 1, neg=True):
        # (Line 220) {
        # (Line 221) foreach(idx : EUDLoopRange(loop))
        for idx in EUDLoopRange(loop):
            # (Line 222) {
            # (Line 223) if (size % 2 == 0)
            if EUDIf()(size % 2 == 0):
                # (Line 224) {
                # (Line 225) dis_x = idx % (size / 2) + 1;
                dis_x << (idx % (size // 2) + 1)
                # (Line 226) dis_y = idx / (size / 2) + 1;
                dis_y << (idx // (size // 2) + 1)
                # (Line 227) if (dis_x == 1)
                if EUDIf()(dis_x == 1):
                    # (Line 228) { Shape_SquareAt2(playerID, count, unit, space, dis_y * interval - space, x, y); }
                    Shape_SquareAt2(playerID, count, unit, space, dis_y * interval - space, x, y)
                    # (Line 229) else if (dis_y == 1)
                if EUDElseIf()(dis_y == 1):
                    # (Line 230) { Shape_SquareAt2(playerID, count, unit, dis_x * interval - space, space, x, y); }
                    Shape_SquareAt2(playerID, count, unit, dis_x * interval - space, space, x, y)
                    # (Line 231) else
                    # (Line 232) { Shape_SquareAt2(playerID, count, unit, dis_x * interval - space, dis_y * interval - space, x, y); }
                if EUDElse()():
                    Shape_SquareAt2(playerID, count, unit, dis_x * interval - space, dis_y * interval - space, x, y)
                    # (Line 233) }
                EUDEndIf()
                # (Line 234) else if (size % 2 == 1)
            if EUDElseIf()(size % 2 == 1):
                # (Line 235) {
                # (Line 236) dis_x = idx % (size / 2);
                dis_x << (idx % (size // 2))
                # (Line 237) dis_y = idx / (size / 2);
                dis_y << (idx // (size // 2))
                # (Line 239) if (idx == 0)
                if EUDIf()(idx == 0):
                    # (Line 240) { Shape_DotAt2(playerID, count, unit, x, y); }
                    Shape_DotAt2(playerID, count, unit, x, y)
                    # (Line 241) else if (dis_y == 0)
                if EUDElseIf()(dis_y == 0):
                    # (Line 242) { Shape_SquareAt2(playerID, count, unit, dis_x * interval, 0, x, y); }
                    Shape_SquareAt2(playerID, count, unit, dis_x * interval, 0, x, y)
                    # (Line 243) else
                    # (Line 244) { Shape_SquareAt2(playerID, count, unit, dis_x * interval + interval, dis_y * interval, x, y); }
                if EUDElse()():
                    Shape_SquareAt2(playerID, count, unit, dis_x * interval + interval, dis_y * interval, x, y)
                    # (Line 246) if (idx == loop - 1)
                EUDEndIf()
                if EUDIf()(idx == loop - 1):
                    # (Line 247) { Shape_SquareAt2(playerID, count, unit, (size / 2) * interval, 0, x, y); }
                    Shape_SquareAt2(playerID, count, unit, (size // 2) * interval, 0, x, y)
                    # (Line 248) }
                EUDEndIf()
                # (Line 249) }
            EUDEndIf()
            # (Line 250) }

        # (Line 251) }
    EUDEndIf()
    # (Line 277) function Shape_LineAt(playerID : TrgPlayer, count, baseunit : TrgUnit, unit : TrgUnit, degree, size, interval, distance)

# (Line 278) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, TrgUnit, None, None, None, None])
def Shape_LineAt(playerID, count, baseunit, unit, degree, size, interval, distance):
    # (Line 279) trg.Table_Sin(playerID, degree + 90, distance);
    trg.Table_Sin(playerID, degree + 90, distance)
    # (Line 280) trg.Table_Cos(playerID, degree + 90, distance);
    trg.Table_Cos(playerID, degree + 90, distance)
    # (Line 282) var initial_x = v.P_AngleCos[playerID];
    initial_x = EUDVariable()
    initial_x << (v.P_AngleCos[playerID])
    # (Line 283) var initial_y = v.P_AngleSin[playerID];
    initial_y = EUDVariable()
    initial_y << (v.P_AngleSin[playerID])
    # (Line 285) if (size % 2 == 0)
    if EUDIf()(size % 2 == 0):
        # (Line 286) { trg.Table_Sin(playerID, degree, interval * (size / 2) - interval / 2); trg.Table_Cos(playerID, degree, interval * (size / 2) - interval / 2); }
        trg.Table_Sin(playerID, degree, interval * (size // 2) - interval // 2)
        trg.Table_Cos(playerID, degree, interval * (size // 2) - interval // 2)
        # (Line 287) else
        # (Line 288) { trg.Table_Sin(playerID, degree, interval * (size / 2)); trg.Table_Cos(playerID, degree, interval * (size / 2)); }
    if EUDElse()():
        trg.Table_Sin(playerID, degree, interval * (size // 2))
        trg.Table_Cos(playerID, degree, interval * (size // 2))
        # (Line 290) initial_x = initial_x + v.P_AngleCos[playerID];
    EUDEndIf()
    initial_x << (initial_x + v.P_AngleCos[playerID])
    # (Line 291) initial_y = initial_y + v.P_AngleSin[playerID];
    initial_y << (initial_y + v.P_AngleSin[playerID])
    # (Line 293) trg.Table_Sin(playerID, degree, interval);
    trg.Table_Sin(playerID, degree, interval)
    # (Line 294) trg.Table_Cos(playerID, degree, interval);
    trg.Table_Cos(playerID, degree, interval)
    # (Line 296) if (size == 1)
    if EUDIf()(size == 1):
        # (Line 297) { Shape_DotAt(playerID, baseunit, count, unit, 0, 0); }
        Shape_DotAt(playerID, baseunit, count, unit, 0, 0)
        # (Line 298) else if (size > 1)
    if EUDElseIf()(size <= 1, neg=True):
        # (Line 299) { foreach(idx : EUDLoopRange(size)) { Shape_DotAt(playerID, baseunit, count, unit, initial_x - idx * v.P_AngleCos[playerID], initial_y - idx * v.P_AngleSin[playerID]); } }
        for idx in EUDLoopRange(size):
            Shape_DotAt(playerID, baseunit, count, unit, initial_x - idx * v.P_AngleCos[playerID], initial_y - idx * v.P_AngleSin[playerID])

        # (Line 300) }
    EUDEndIf()
    # (Line 306) function Shape_LineAt2(playerID : TrgPlayer, count, unit : TrgUnit, degree, size, interval, distanceX, distanceY)

# (Line 307) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None, None])
def Shape_LineAt2(playerID, count, unit, degree, size, interval, distanceX, distanceY):
    # (Line 308) var i = 0;
    i = EUDVariable()
    i << (0)
    # (Line 309) var distance = interval / 2;
    distance = EUDVariable()
    distance << (interval // 2)
    # (Line 311) trg.Table_Sin(playerID, degree, distance);
    trg.Table_Sin(playerID, degree, distance)
    # (Line 312) trg.Table_Cos(playerID, degree, distance);
    trg.Table_Cos(playerID, degree, distance)
    # (Line 314) var gradientX = v.P_AngleCos[playerID];
    gradientX = EUDVariable()
    gradientX << (v.P_AngleCos[playerID])
    # (Line 315) var gradientY = v.P_AngleSin[playerID] ;
    gradientY = EUDVariable()
    gradientY << (v.P_AngleSin[playerID])
    # (Line 316) var Angle_X, Angle_Y;
    Angle_X, Angle_Y = EUDCreateVariables(2)
    # (Line 318) trg.Table_Sin(playerID, degree, interval);
    trg.Table_Sin(playerID, degree, interval)
    # (Line 319) trg.Table_Cos(playerID, degree, interval);
    trg.Table_Cos(playerID, degree, interval)
    # (Line 321) for (; i <= size / 2; i++)
    if EUDWhile()(i <= size // 2):
        def _t2():
            i.__iadd__(1)
        # (Line 322) {
        # (Line 323) Angle_X = v.P_AngleCos[playerID] * i;
        Angle_X << (v.P_AngleCos[playerID] * i)
        # (Line 324) Angle_Y = v.P_AngleSin[playerID] * i;
        Angle_Y << (v.P_AngleSin[playerID] * i)
        # (Line 326) if (size % 2 == 0 && i != size / 2)
        if EUDIf()(EUDSCAnd()(size % 2 == 0)(i == size // 2, neg=True)()):
            # (Line 327) {
            # (Line 328) trg.MoveLoc(v.P_UnitID[playerID], playerID, -Angle_X - gradientX + distanceX, Angle_Y + gradientY + distanceY);
            trg.MoveLoc(v.P_UnitID[playerID], playerID, -Angle_X - gradientX + distanceX, Angle_Y + gradientY + distanceY)
            # (Line 329) trg.SkillUnit(playerID, count, unit);
            trg.SkillUnit(playerID, count, unit)
            # (Line 330) trg.MoveLoc(v.P_UnitID[playerID], playerID, Angle_X + gradientX + distanceX, -Angle_Y - gradientY + distanceY);
            trg.MoveLoc(v.P_UnitID[playerID], playerID, Angle_X + gradientX + distanceX, -Angle_Y - gradientY + distanceY)
            # (Line 331) trg.SkillUnit(playerID, count, unit);
            trg.SkillUnit(playerID, count, unit)
            # (Line 332) }
            # (Line 333) else if (size % 2 == 1)
        if EUDElseIf()(size % 2 == 1):
            # (Line 334) {
            # (Line 335) if (i == 0)
            if EUDIf()(i == 0):
                # (Line 336) {
                # (Line 337) trg.MoveLoc(v.P_UnitID[playerID], playerID, distanceX, distanceY);
                trg.MoveLoc(v.P_UnitID[playerID], playerID, distanceX, distanceY)
                # (Line 338) trg.SkillUnit(playerID, count, unit);
                trg.SkillUnit(playerID, count, unit)
                # (Line 339) }
                # (Line 340) else
                # (Line 341) {
            if EUDElse()():
                # (Line 342) trg.MoveLoc(v.P_UnitID[playerID], playerID, -Angle_X + distanceX, Angle_Y + distanceY);
                trg.MoveLoc(v.P_UnitID[playerID], playerID, -Angle_X + distanceX, Angle_Y + distanceY)
                # (Line 343) trg.SkillUnit(playerID, count, unit);
                trg.SkillUnit(playerID, count, unit)
                # (Line 344) trg.MoveLoc(v.P_UnitID[playerID], playerID, Angle_X + distanceX, -Angle_Y + distanceY);
                trg.MoveLoc(v.P_UnitID[playerID], playerID, Angle_X + distanceX, -Angle_Y + distanceY)
                # (Line 345) trg.SkillUnit(playerID, count, unit);
                trg.SkillUnit(playerID, count, unit)
                # (Line 346) }
                # (Line 347) }
            EUDEndIf()
            # (Line 348) }
        EUDEndIf()
        # (Line 349) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 373) function Shape_CrossAt(playerID : TrgPlayer, count, baseunit : TrgUnit, unit : TrgUnit, degree, size, interval)

# (Line 374) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, TrgUnit, None, None, None])
def Shape_CrossAt(playerID, count, baseunit, unit, degree, size, interval):
    # (Line 375) var distance = interval / 2;
    distance = EUDVariable()
    distance << (interval // 2)
    # (Line 377) trg.Table_Sin(playerID, degree, distance);
    trg.Table_Sin(playerID, degree, distance)
    # (Line 378) trg.Table_Cos(playerID, degree, distance);
    trg.Table_Cos(playerID, degree, distance)
    # (Line 380) var gradient_x = v.P_AngleCos[playerID] / 2;
    gradient_x = EUDVariable()
    gradient_x << (v.P_AngleCos[playerID] // 2)
    # (Line 381) var gradient_y = v.P_AngleSin[playerID] / 2;
    gradient_y = EUDVariable()
    gradient_y << (v.P_AngleSin[playerID] // 2)
    # (Line 383) var angle_x, angle_y;
    angle_x, angle_y = EUDCreateVariables(2)
    # (Line 385) trg.Table_Sin(playerID, degree, interval);
    trg.Table_Sin(playerID, degree, interval)
    # (Line 386) trg.Table_Cos(playerID, degree, interval);
    trg.Table_Cos(playerID, degree, interval)
    # (Line 388) if (size == 1)
    if EUDIf()(size == 1):
        # (Line 389) {
        # (Line 390) Shape_DotAt(playerID, baseunit, count, unit, 0, 0);
        Shape_DotAt(playerID, baseunit, count, unit, 0, 0)
        # (Line 391) }
        # (Line 392) else if (size > 1)
    if EUDElseIf()(size <= 1, neg=True):
        # (Line 393) {
        # (Line 394) foreach(idx : EUDLoopRange(size))
        for idx in EUDLoopRange(size):
            # (Line 395) {
            # (Line 396) angle_x = v.P_AngleCos[playerID] * idx;
            angle_x << (v.P_AngleCos[playerID] * idx)
            # (Line 397) angle_y = v.P_AngleSin[playerID] * idx;
            angle_y << (v.P_AngleSin[playerID] * idx)
            # (Line 399) if (size % 2 == 0 && idx != size / 2)
            if EUDIf()(EUDSCAnd()(size % 2 == 0)(idx == size // 2, neg=True)()):
                # (Line 400) { Shape_SquareAt(playerID, baseunit, count, unit, angle_x + gradient_x, angle_y + gradient_y); }
                Shape_SquareAt(playerID, baseunit, count, unit, angle_x + gradient_x, angle_y + gradient_y)
                # (Line 401) else if (size % 2 == 1)
            if EUDElseIf()(size % 2 == 1):
                # (Line 402) {
                # (Line 403) if (idx == 0)
                if EUDIf()(idx == 0):
                    # (Line 404) { Shape_DotAt(playerID, baseunit, count, unit, 0, 0); }
                    Shape_DotAt(playerID, baseunit, count, unit, 0, 0)
                    # (Line 405) else
                    # (Line 406) { Shape_SquareAt(playerID, baseunit, count, unit, angle_x, angle_y); }
                if EUDElse()():
                    Shape_SquareAt(playerID, baseunit, count, unit, angle_x, angle_y)
                    # (Line 407) }
                EUDEndIf()
                # (Line 408) }
            EUDEndIf()
            # (Line 409) }

        # (Line 410) }
    EUDEndIf()
    # (Line 434) function Shape_EdgeAt(playerID : TrgPlayer, count, unit : TrgUnit, degree, size, interval, x, y)

# (Line 435) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None, None])
def Shape_EdgeAt(playerID, count, unit, degree, size, interval, x, y):
    # (Line 436) trg.Table_Sin(playerID, degree, interval * 14 / 10);
    trg.Table_Sin(playerID, degree, interval * 14 // 10)
    # (Line 437) trg.Table_Cos(playerID, degree, interval * 14 / 10);
    trg.Table_Cos(playerID, degree, interval * 14 // 10)
    # (Line 439) var x_o = v.P_AngleCos[playerID];
    x_o = EUDVariable()
    x_o << (v.P_AngleCos[playerID])
    # (Line 440) var y_o = v.P_AngleSin[playerID];
    y_o = EUDVariable()
    y_o << (v.P_AngleSin[playerID])
    # (Line 442) var distance = (interval * 2) / (size - 1);
    distance = EUDVariable()
    distance << ((interval * 2) // (size - 1))
    # (Line 444) trg.Table_Sin(playerID, degree + 45, distance);
    trg.Table_Sin(playerID, degree + 45, distance)
    # (Line 445) trg.Table_Cos(playerID, degree + 45, distance);
    trg.Table_Cos(playerID, degree + 45, distance)
    # (Line 447) var distance_x = v.P_AngleCos[playerID];
    distance_x = EUDVariable()
    distance_x << (v.P_AngleCos[playerID])
    # (Line 448) var distance_y = v.P_AngleSin[playerID];
    distance_y = EUDVariable()
    distance_y << (v.P_AngleSin[playerID])
    # (Line 450) if (size == 1)
    if EUDIf()(size == 1):
        # (Line 451) { Shape_DotAt(playerID, v.P_UnitID[playerID], 1, unit, x, y); }
        Shape_DotAt(playerID, v.P_UnitID[playerID], 1, unit, x, y)
        # (Line 452) else if (size > 1)
    if EUDElseIf()(size <= 1, neg=True):
        # (Line 453) { foreach(idx : EUDLoopRange(size - 1)) { Shape_SquareAt(playerID, v.P_UnitID[playerID], 1, unit, x + x_o - (distance_x * idx), y + y_o - (distance_y * idx)); } }
        for idx in EUDLoopRange(size - 1):
            Shape_SquareAt(playerID, v.P_UnitID[playerID], 1, unit, x + x_o - (distance_x * idx), y + y_o - (distance_y * idx))

        # (Line 454) }
    EUDEndIf()
