## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import variable as v;
import variable as v
# (Line 9) function Effect_Recall()
# (Line 10) {
@EUDFunc
def Effect_Recall():
    # (Line 11) var playerID = getcurpl();
    playerID = EUDVariable()
    playerID << (f_getcurpl())
    # (Line 12) MoveLocation(v.P_HoldLocation[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
    # (Line 14) if (Switch(53 + playerID, Cleared))
    DoActions(MoveLocation(v.P_HoldLocation[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
    if EUDIf()(Switch(53 + playerID, Cleared)):
        # (Line 15) { SetSwitch(53 + playerID, Set); }
        DoActions(SetSwitch(53 + playerID, Set))
        # (Line 16) }
    EUDEndIf()
    # (Line 27) function Buff_ShieldFix(amount : TrgCount)

# (Line 28) {
@EUDTypedFunc([TrgCount])
def Buff_ShieldFix(amount):
    # (Line 29) var playerID = getcurpl();
    playerID = EUDVariable()
    playerID << (f_getcurpl())
    # (Line 30) v.P_Shield[playerID] = amount;
    _ARRW(v.P_Shield, playerID) << (amount)
    # (Line 31) ModifyUnitShields(1, v.P_UnitID[playerID], playerID, "Anywhere", amount);
    # (Line 32) }
    DoActions(ModifyUnitShields(1, v.P_UnitID[playerID], playerID, "Anywhere", amount))
    # (Line 40) function Debuff_Slow()

# (Line 41) {
@EUDFunc
def Debuff_Slow():
    # (Line 42) var playerID = getcurpl();
    playerID = EUDVariable()
    playerID << (f_getcurpl())
    # (Line 43) MoveLocation(v.P_HoldLocation[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
    # (Line 44) CreateUnit(1, "Zerg Devourer", "[Skill]Unit_Wait_8", playerID);
    DoActions(MoveLocation(v.P_HoldLocation[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
    # (Line 45) SetInvincibility(Enable, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL");
    DoActions(CreateUnit(1, "Zerg Devourer", "[Skill]Unit_Wait_8", playerID))
    # (Line 46) MoveUnit(1, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL", v.P_HoldLocation[playerID]);
    DoActions(SetInvincibility(Enable, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL"))
    # (Line 47) RemoveUnitAt(1, "Zerg Devourer", "Anywhere", playerID);
    DoActions(MoveUnit(1, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL", v.P_HoldLocation[playerID]))
    # (Line 48) }
    DoActions(RemoveUnitAt(1, "Zerg Devourer", "Anywhere", playerID))
    # (Line 56) function Debuff_SlowPlayer(playerID : TrgPlayer)

# (Line 57) {
@EUDTypedFunc([TrgPlayer])
def Debuff_SlowPlayer(playerID):
    # (Line 58) MoveLocation(v.P_HoldLocation[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
    # (Line 59) CreateUnit(1, "Zerg Devourer", "[Skill]Unit_Wait_8", playerID);
    DoActions(MoveLocation(v.P_HoldLocation[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
    # (Line 60) SetInvincibility(Enable, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL");
    DoActions(CreateUnit(1, "Zerg Devourer", "[Skill]Unit_Wait_8", playerID))
    # (Line 61) MoveUnit(1, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL", v.P_HoldLocation[playerID]);
    DoActions(SetInvincibility(Enable, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL"))
    # (Line 62) RemoveUnitAt(1, "Zerg Devourer", "Anywhere", playerID);
    DoActions(MoveUnit(1, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL", v.P_HoldLocation[playerID]))
    # (Line 63) }
    DoActions(RemoveUnitAt(1, "Zerg Devourer", "Anywhere", playerID))
    # (Line 71) function Debuff_Stop()

# (Line 72) {
@EUDFunc
def Debuff_Stop():
    # (Line 73) var playerID = getcurpl();
    playerID = EUDVariable()
    playerID << (f_getcurpl())
    # (Line 74) Debuff_Slow();
    Debuff_Slow()
    # (Line 75) Order(v.P_UnitID[playerID], playerID, "Anywhere", Move, v.P_HoldLocation[playerID]);
    # (Line 76) }
    DoActions(Order(v.P_UnitID[playerID], playerID, "Anywhere", Move, v.P_HoldLocation[playerID]))
    # (Line 84) function Debuff_StopPlayer(playerID : TrgPlayer)

# (Line 85) {
@EUDTypedFunc([TrgPlayer])
def Debuff_StopPlayer(playerID):
    # (Line 86) Debuff_SlowPlayer(playerID);
    Debuff_SlowPlayer(playerID)
    # (Line 87) Order(v.P_UnitID[playerID], playerID, "Anywhere", Move, v.P_HoldLocation[playerID]);
    # (Line 88) }
    DoActions(Order(v.P_UnitID[playerID], playerID, "Anywhere", Move, v.P_HoldLocation[playerID]))
    # (Line 96) function Debuff_BanReturn()

# (Line 97) {
@EUDFunc
def Debuff_BanReturn():
    # (Line 98) KillUnit("Protoss Observer", getcurpl());
    # (Line 99) }
    DoActions(KillUnit("Protoss Observer", f_getcurpl()))
    # (Line 111) function ComputerAlly(state : TrgCount)

# (Line 112) {
@EUDTypedFunc([TrgCount])
def ComputerAlly(state):
    # (Line 113) var playerID = getcurpl();
    playerID = EUDVariable()
    playerID << (f_getcurpl())
    # (Line 115) if (state == 0)
    if EUDIf()(state == 0):
        # (Line 116) {
        # (Line 117) if (playerID < 3) 	SetAllianceStatus(P8, Enemy);
        if EUDIf()(playerID >= 3, neg=True):
            # (Line 118) else 			SetAllianceStatus(P7, Enemy);
            DoActions(SetAllianceStatus(P8, Enemy))
        if EUDElse()():
            # (Line 119) }
            DoActions(SetAllianceStatus(P7, Enemy))
        EUDEndIf()
        # (Line 120) else if 	(state == 1)	{ SetAllianceStatus(P7, Ally); SetAllianceStatus(P8, Ally); }
    if EUDElseIf()(state == 1):
        DoActions(SetAllianceStatus(P7, Ally))
        DoActions(SetAllianceStatus(P8, Ally))
        # (Line 121) }
    EUDEndIf()
    # (Line 132) function Main_Wait(wait : TrgCount)

# (Line 133) {
@EUDTypedFunc([TrgCount])
def Main_Wait(wait):
    # (Line 134) v.P_WaitMain[getcurpl()] = wait / 83 + 1;
    _ARRW(v.P_WaitMain, f_getcurpl()) << (wait // 83 + 1)
    # (Line 135) }
    # (Line 146) function Sub1_Wait(wait : TrgCount)

# (Line 147) {
@EUDTypedFunc([TrgCount])
def Sub1_Wait(wait):
    # (Line 148) v.P_WaitSub1[getcurpl()] = wait / 83 + 1;
    _ARRW(v.P_WaitSub1, f_getcurpl()) << (wait // 83 + 1)
    # (Line 149) }
    # (Line 160) function Sub2_Wait(wait : TrgCount)

# (Line 161) {
@EUDTypedFunc([TrgCount])
def Sub2_Wait(wait):
    # (Line 162) v.P_WaitSub2[getcurpl()] = wait / 83 + 1;
    _ARRW(v.P_WaitSub2, f_getcurpl()) << (wait // 83 + 1)
    # (Line 163) }
    # (Line 171) function SkillEnd()

# (Line 172) {
@EUDFunc
def SkillEnd():
    # (Line 173) var playerID = getcurpl();
    playerID = EUDVariable()
    playerID << (f_getcurpl())
    # (Line 175) v.P_CountMain[playerID] = 999;
    _ARRW(v.P_CountMain, playerID) << (999)
    # (Line 177) if (v.P_Ally[playerID] == 1)
    if EUDIf()(v.P_Ally[playerID] == 1):
        # (Line 178) {
        # (Line 179) SetSwitch("ComputerAlliy", Clear);
        # (Line 180) if (playerID < 3) 			{ SetAllianceStatus(P8, Enemy); }
        DoActions(SetSwitch("ComputerAlliy", Clear))
        if EUDIf()(playerID >= 3, neg=True):
            DoActions(SetAllianceStatus(P8, Enemy))
            # (Line 181) else if (playerID >= 3)	{ SetAllianceStatus(P7, Enemy); }
        if EUDElseIf()(playerID >= 3):
            DoActions(SetAllianceStatus(P7, Enemy))
            # (Line 182) v.P_Ally[playerID] = 0;
        EUDEndIf()
        _ARRW(v.P_Ally, playerID) << (0)
        # (Line 183) }
        # (Line 184) }
    EUDEndIf()
    # (Line 192) function Main_WaitLoop()

# (Line 193) {
@EUDFunc
def Main_WaitLoop():
    # (Line 194) var playerID = getcurpl();
    playerID = EUDVariable()
    playerID << (f_getcurpl())
    # (Line 197) if 		(v.P_WaitMain[playerID] >= 1) { v.P_WaitMain[playerID] -= 1; }
    if EUDIf()(v.P_WaitMain[playerID] >= 1):
        _ARRW(v.P_WaitMain, playerID).__isub__(1)
        # (Line 199) if 		(v.P_WaitSub1[playerID] >= 1) { v.P_WaitSub1[playerID] -= 1; }
    EUDEndIf()
    if EUDIf()(v.P_WaitSub1[playerID] >= 1):
        _ARRW(v.P_WaitSub1, playerID).__isub__(1)
        # (Line 200) if 		(v.P_WaitSub2[playerID] >= 1) { v.P_WaitSub2[playerID] -= 1; }
    EUDEndIf()
    if EUDIf()(v.P_WaitSub2[playerID] >= 1):
        _ARRW(v.P_WaitSub2, playerID).__isub__(1)
        # (Line 203) if 		(v.P_SkillDelay[playerID] >= 2)
    EUDEndIf()
    if EUDIf()(v.P_SkillDelay[playerID] >= 2):
        # (Line 204) { v.P_SkillDelay[playerID] -= 1; }
        _ARRW(v.P_SkillDelay, playerID).__isub__(1)
        # (Line 205) else if 	(v.P_SkillDelay[playerID] == 1)
    if EUDElseIf()(v.P_SkillDelay[playerID] == 1):
        # (Line 206) {
        # (Line 207) if (Switch(53 + playerID, Set))
        if EUDIf()(Switch(53 + playerID, Set)):
            # (Line 208) { SetSwitch(53 + playerID, Clear); }
            DoActions(SetSwitch(53 + playerID, Clear))
            # (Line 210) v.P_SkillDelay[playerID] = 0;
        EUDEndIf()
        _ARRW(v.P_SkillDelay, playerID) << (0)
        # (Line 211) v.P_Step[playerID] = 0;
        _ARRW(v.P_Step, playerID) << (0)
        # (Line 212) v.P_Shield[playerID] = 0;
        _ARRW(v.P_Shield, playerID) << (0)
        # (Line 213) ModifyUnitShields(1, v.P_UnitID[playerID], playerID, "Anywhere", 0);
        # (Line 214) }
        DoActions(ModifyUnitShields(1, v.P_UnitID[playerID], playerID, "Anywhere", 0))
        # (Line 216) if (v.P_WaitMain[playerID] == 0)
    EUDEndIf()
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 217) {
        # (Line 218) if 		(v.P_CountMain[playerID] == 999) 	{ Main_Wait(500); v.P_CountMain[playerID] = 1000; }
        if EUDIf()(v.P_CountMain[playerID] == 999):
            Main_Wait(500)
            _ARRW(v.P_CountMain, playerID) << (1000)
            # (Line 219) else if 	(v.P_CountMain[playerID] == 1000) 	{ v.P_CountMain[playerID] = 0; v.P_LoopMain[playerID] = 0; v.P_SkillDelay[playerID] = 12; }
        if EUDElseIf()(v.P_CountMain[playerID] == 1000):
            _ARRW(v.P_CountMain, playerID) << (0)
            _ARRW(v.P_LoopMain, playerID) << (0)
            _ARRW(v.P_SkillDelay, playerID) << (12)
            # (Line 220) }
        EUDEndIf()
        # (Line 221) }
    EUDEndIf()
    # (Line 236) function Table_Cos(playerID : TrgPlayer, degree, distance)

# (Line 237) {
@EUDTypedFunc([TrgPlayer, None, None])
def Table_Cos(playerID, degree, distance):
    # (Line 238) degree = degree % 360;
    degree << (degree % 360)
    # (Line 239) v.P_AngleCos[playerID] = v.P_Table_Cos[degree];
    _ARRW(v.P_AngleCos, playerID) << (v.P_Table_Cos[degree])
    # (Line 241) if (v.P_AngleCos[playerID] > 2147483648)
    if EUDIf()(v.P_AngleCos[playerID] <= 2147483648, neg=True):
        # (Line 242) {
        # (Line 243) v.P_AngleCos[playerID] = -v.P_AngleCos[playerID];
        _ARRW(v.P_AngleCos, playerID) << (-v.P_AngleCos[playerID])
        # (Line 244) v.P_AngleCos[playerID] = (v.P_AngleCos[playerID] * distance) / 100;
        _ARRW(v.P_AngleCos, playerID) << ((v.P_AngleCos[playerID] * distance) // 100)
        # (Line 245) v.P_AngleCos[playerID] = -v.P_AngleCos[playerID];
        _ARRW(v.P_AngleCos, playerID) << (-v.P_AngleCos[playerID])
        # (Line 246) }
        # (Line 247) else
        # (Line 248) { v.P_AngleCos[playerID] = (v.P_AngleCos[playerID] * distance) / 100; }
    if EUDElse()():
        _ARRW(v.P_AngleCos, playerID) << ((v.P_AngleCos[playerID] * distance) // 100)
        # (Line 249) }
    EUDEndIf()
    # (Line 264) function Table_Sin(playerID : TrgPlayer, degree, distance)

# (Line 265) {
@EUDTypedFunc([TrgPlayer, None, None])
def Table_Sin(playerID, degree, distance):
    # (Line 266) degree = degree % 360;
    degree << (degree % 360)
    # (Line 267) v.P_AngleSin[playerID] = v.P_Table_Sin[degree];
    _ARRW(v.P_AngleSin, playerID) << (v.P_Table_Sin[degree])
    # (Line 269) if (v.P_AngleSin[playerID] > 2147483648)
    if EUDIf()(v.P_AngleSin[playerID] <= 2147483648, neg=True):
        # (Line 270) {
        # (Line 271) v.P_AngleSin[playerID] = -v.P_AngleSin[playerID];
        _ARRW(v.P_AngleSin, playerID) << (-v.P_AngleSin[playerID])
        # (Line 272) v.P_AngleSin[playerID] = (v.P_AngleSin[playerID] * distance) / 100;
        _ARRW(v.P_AngleSin, playerID) << ((v.P_AngleSin[playerID] * distance) // 100)
        # (Line 273) v.P_AngleSin[playerID] = -v.P_AngleSin[playerID];
        _ARRW(v.P_AngleSin, playerID) << (-v.P_AngleSin[playerID])
        # (Line 274) }
        # (Line 275) else
        # (Line 276) { v.P_AngleSin[playerID] = (v.P_AngleSin[playerID] * distance) / 100; }
    if EUDElse()():
        _ARRW(v.P_AngleSin, playerID) << ((v.P_AngleSin[playerID] * distance) // 100)
        # (Line 277) }
    EUDEndIf()
    # (Line 294) function MoveLoc(unit : TrgUnit, playerID : TrgPlayer, pos_x, pos_y)

# (Line 295) {
@EUDTypedFunc([TrgUnit, TrgPlayer, None, None])
def MoveLoc(unit, playerID, pos_x, pos_y):
    # (Line 296) MoveLocation(v.P_LocationID[playerID], unit, playerID, "Anywhere");
    # (Line 297) addloc(v.P_LocationID[playerID], pos_x, pos_y);
    DoActions(MoveLocation(v.P_LocationID[playerID], unit, playerID, "Anywhere"))
    f_addloc(v.P_LocationID[playerID], pos_x, pos_y)
    # (Line 298) }
    # (Line 313) function SkillUnit(playerID : TrgPlayer, count, unit : TrgUnit)

# (Line 314) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit])
def SkillUnit(playerID, count, unit):
    # (Line 315) CreateUnit(count, unit, dwrand() % 8 + 33, playerID);
    # (Line 316) SetInvincibility(Enable, unit, playerID, "Anywhere");
    DoActions(CreateUnit(count, unit, f_dwrand() % 8 + 33, playerID))
    # (Line 317) MoveUnit(count, unit, playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
    DoActions(SetInvincibility(Enable, unit, playerID, "Anywhere"))
    # (Line 318) }
    DoActions(MoveUnit(count, unit, playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
    # (Line 337) function Shape_Dot(playerID : TrgPlayer, count, unit : TrgUnit, pos_x, pos_y)

# (Line 338) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def Shape_Dot(playerID, count, unit, pos_x, pos_y):
    # (Line 339) MoveLoc(v.P_UnitID[playerID], playerID, pos_x, pos_y);
    MoveLoc(v.P_UnitID[playerID], playerID, pos_x, pos_y)
    # (Line 340) SkillUnit(playerID, count, unit);
    SkillUnit(playerID, count, unit)
    # (Line 341) }
    # (Line 361) function Shape_Double(playerID : TrgPlayer, count, unit : TrgUnit, pos_x, pos_y)

# (Line 362) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def Shape_Double(playerID, count, unit, pos_x, pos_y):
    # (Line 363) Shape_Dot(playerID, count, unit, pos_x, pos_y);
    Shape_Dot(playerID, count, unit, pos_x, pos_y)
    # (Line 364) Shape_Dot(playerID, count, unit, -pos_x, -pos_y);
    Shape_Dot(playerID, count, unit, -pos_x, -pos_y)
    # (Line 365) }
    # (Line 386) function Shape_Square(playerID : TrgPlayer, count, unit : TrgUnit, pos_x, pos_y)

# (Line 387) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def Shape_Square(playerID, count, unit, pos_x, pos_y):
    # (Line 388) if (pos_x == 0 && pos_y == 0)
    if EUDIf()(EUDSCAnd()(pos_x == 0)(pos_y == 0)()):
        # (Line 389) {
        # (Line 390) Shape_Dot(playerID, count, unit, pos_x, pos_y);
        Shape_Dot(playerID, count, unit, pos_x, pos_y)
        # (Line 391) }
        # (Line 392) else
        # (Line 393) {
    if EUDElse()():
        # (Line 394) MoveLoc(v.P_UnitID[playerID], playerID, pos_x, pos_y);
        MoveLoc(v.P_UnitID[playerID], playerID, pos_x, pos_y)
        # (Line 395) SkillUnit(playerID, count, unit);
        SkillUnit(playerID, count, unit)
        # (Line 396) MoveLoc(v.P_UnitID[playerID], playerID, -pos_y, pos_x);
        MoveLoc(v.P_UnitID[playerID], playerID, -pos_y, pos_x)
        # (Line 397) SkillUnit(playerID, count, unit);
        SkillUnit(playerID, count, unit)
        # (Line 398) MoveLoc(v.P_UnitID[playerID], playerID, -pos_x, -pos_y);
        MoveLoc(v.P_UnitID[playerID], playerID, -pos_x, -pos_y)
        # (Line 399) SkillUnit(playerID, count, unit);
        SkillUnit(playerID, count, unit)
        # (Line 400) MoveLoc(v.P_UnitID[playerID], playerID, pos_y, -pos_x);
        MoveLoc(v.P_UnitID[playerID], playerID, pos_y, -pos_x)
        # (Line 401) SkillUnit(playerID, count, unit);
        SkillUnit(playerID, count, unit)
        # (Line 402) }
        # (Line 403) }
    EUDEndIf()
    # (Line 423) function Shape_NxNSquare(playerID : TrgPlayer, count, unit : TrgUnit, size, interval)

# (Line 424) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def Shape_NxNSquare(playerID, count, unit, size, interval):
    # (Line 425) var loop = (size * size) / 4;
    loop = EUDVariable()
    loop << ((size * size) // 4)
    # (Line 426) var space = interval / 2;
    space = EUDVariable()
    space << (interval // 2)
    # (Line 427) var dis_x, dis_y;
    dis_x, dis_y = EUDCreateVariables(2)
    # (Line 429) if (size == 1)
    if EUDIf()(size == 1):
        # (Line 430) {
        # (Line 431) Shape_Dot(playerID, count, unit, 0, 0);
        Shape_Dot(playerID, count, unit, 0, 0)
        # (Line 432) }
        # (Line 433) else if (size > 1)
    if EUDElseIf()(size <= 1, neg=True):
        # (Line 434) {
        # (Line 435) foreach(idx : EUDLoopRange(loop))
        for idx in EUDLoopRange(loop):
            # (Line 436) {
            # (Line 437) if (size % 2 == 0)
            if EUDIf()(size % 2 == 0):
                # (Line 438) {
                # (Line 439) dis_x = idx % (size / 2) + 1;
                dis_x << (idx % (size // 2) + 1)
                # (Line 440) dis_y = idx / (size / 2) + 1;
                dis_y << (idx // (size // 2) + 1)
                # (Line 441) if (dis_x == 1)
                if EUDIf()(dis_x == 1):
                    # (Line 442) { Shape_Square(playerID, count, unit, space, dis_y * interval - space); }
                    Shape_Square(playerID, count, unit, space, dis_y * interval - space)
                    # (Line 443) else if (dis_y == 1)
                if EUDElseIf()(dis_y == 1):
                    # (Line 444) { Shape_Square(playerID, count, unit, dis_x * interval - space, space); }
                    Shape_Square(playerID, count, unit, dis_x * interval - space, space)
                    # (Line 445) else
                    # (Line 446) { Shape_Square(playerID, count, unit, dis_x * interval - space, dis_y * interval - space); }
                if EUDElse()():
                    Shape_Square(playerID, count, unit, dis_x * interval - space, dis_y * interval - space)
                    # (Line 447) }
                EUDEndIf()
                # (Line 448) else if (size % 2 == 1)
            if EUDElseIf()(size % 2 == 1):
                # (Line 449) {
                # (Line 450) dis_x = idx % (size / 2);
                dis_x << (idx % (size // 2))
                # (Line 451) dis_y = idx / (size / 2);
                dis_y << (idx // (size // 2))
                # (Line 453) if (idx == 0)
                if EUDIf()(idx == 0):
                    # (Line 454) { Shape_Dot(playerID, count, unit, 0, 0); }
                    Shape_Dot(playerID, count, unit, 0, 0)
                    # (Line 455) else if (dis_y == 0)
                if EUDElseIf()(dis_y == 0):
                    # (Line 456) { Shape_Square(playerID, count, unit, dis_x * interval, 0); }
                    Shape_Square(playerID, count, unit, dis_x * interval, 0)
                    # (Line 457) else
                    # (Line 458) { Shape_Square(playerID, count, unit, dis_x * interval + interval, dis_y * interval); }
                if EUDElse()():
                    Shape_Square(playerID, count, unit, dis_x * interval + interval, dis_y * interval)
                    # (Line 460) if (idx == loop - 1)
                EUDEndIf()
                if EUDIf()(idx == loop - 1):
                    # (Line 461) { Shape_Square(playerID, count, unit, (size / 2) * interval, 0); }
                    Shape_Square(playerID, count, unit, (size // 2) * interval, 0)
                    # (Line 462) }
                EUDEndIf()
                # (Line 463) }
            EUDEndIf()
            # (Line 464) }

        # (Line 465) }
    EUDEndIf()
    # (Line 489) function Shape_Line(playerID : TrgPlayer, count, unit : TrgUnit, degree, size, interval, distance)

# (Line 490) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None])
def Shape_Line(playerID, count, unit, degree, size, interval, distance):
    # (Line 491) Table_Sin(playerID, degree + 90, distance);
    Table_Sin(playerID, degree + 90, distance)
    # (Line 492) Table_Cos(playerID, degree + 90, distance);
    Table_Cos(playerID, degree + 90, distance)
    # (Line 494) var initial_x = v.P_AngleCos[playerID];
    initial_x = EUDVariable()
    initial_x << (v.P_AngleCos[playerID])
    # (Line 495) var initial_y = v.P_AngleSin[playerID];
    initial_y = EUDVariable()
    initial_y << (v.P_AngleSin[playerID])
    # (Line 497) if (size % 2 == 0)
    if EUDIf()(size % 2 == 0):
        # (Line 498) { Table_Sin(playerID, degree, interval * (size / 2) - interval / 2); Table_Cos(playerID, degree, interval * (size / 2) - interval / 2); }
        Table_Sin(playerID, degree, interval * (size // 2) - interval // 2)
        Table_Cos(playerID, degree, interval * (size // 2) - interval // 2)
        # (Line 499) else
        # (Line 500) { Table_Sin(playerID, degree, interval * (size / 2)); Table_Cos(playerID, degree, interval * (size / 2)); }
    if EUDElse()():
        Table_Sin(playerID, degree, interval * (size // 2))
        Table_Cos(playerID, degree, interval * (size // 2))
        # (Line 502) initial_x = initial_x + v.P_AngleCos[playerID];
    EUDEndIf()
    initial_x << (initial_x + v.P_AngleCos[playerID])
    # (Line 503) initial_y = initial_y + v.P_AngleSin[playerID];
    initial_y << (initial_y + v.P_AngleSin[playerID])
    # (Line 505) Table_Sin(playerID, degree, interval);
    Table_Sin(playerID, degree, interval)
    # (Line 506) Table_Cos(playerID, degree, interval);
    Table_Cos(playerID, degree, interval)
    # (Line 508) if (size == 1)
    if EUDIf()(size == 1):
        # (Line 509) { Shape_Dot(playerID, count, unit, 0, 0); }
        Shape_Dot(playerID, count, unit, 0, 0)
        # (Line 510) else if (size > 1)
    if EUDElseIf()(size <= 1, neg=True):
        # (Line 511) { foreach(idx : EUDLoopRange(size)) { Shape_Dot(playerID, count, unit, initial_x - idx * v.P_AngleCos[playerID], initial_y - idx * v.P_AngleSin[playerID]); } }
        for idx in EUDLoopRange(size):
            Shape_Dot(playerID, count, unit, initial_x - idx * v.P_AngleCos[playerID], initial_y - idx * v.P_AngleSin[playerID])

        # (Line 512) }
    EUDEndIf()
    # (Line 534) function Shape_Cross(playerID : TrgPlayer, count, unit : TrgUnit, degree, size, interval)

# (Line 535) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None])
def Shape_Cross(playerID, count, unit, degree, size, interval):
    # (Line 536) var distance = interval / 2;
    distance = EUDVariable()
    distance << (interval // 2)
    # (Line 538) Table_Sin(playerID, degree, distance);
    Table_Sin(playerID, degree, distance)
    # (Line 539) Table_Cos(playerID, degree, distance);
    Table_Cos(playerID, degree, distance)
    # (Line 541) var gradient_x = v.P_AngleCos[playerID] / 2;
    gradient_x = EUDVariable()
    gradient_x << (v.P_AngleCos[playerID] // 2)
    # (Line 542) var gradient_y = v.P_AngleSin[playerID] / 2;
    gradient_y = EUDVariable()
    gradient_y << (v.P_AngleSin[playerID] // 2)
    # (Line 544) var angle_x, angle_y;
    angle_x, angle_y = EUDCreateVariables(2)
    # (Line 546) Table_Sin(playerID, degree, interval);
    Table_Sin(playerID, degree, interval)
    # (Line 547) Table_Cos(playerID, degree, interval);
    Table_Cos(playerID, degree, interval)
    # (Line 549) if (size == 1)
    if EUDIf()(size == 1):
        # (Line 550) {
        # (Line 551) Shape_Dot(playerID, count, unit, 0, 0);
        Shape_Dot(playerID, count, unit, 0, 0)
        # (Line 552) }
        # (Line 553) else if (size > 1)
    if EUDElseIf()(size <= 1, neg=True):
        # (Line 554) {
        # (Line 555) foreach(idx : EUDLoopRange(size))
        for idx in EUDLoopRange(size):
            # (Line 556) {
            # (Line 557) angle_x = v.P_AngleCos[playerID] * idx;
            angle_x << (v.P_AngleCos[playerID] * idx)
            # (Line 558) angle_y = v.P_AngleSin[playerID] * idx;
            angle_y << (v.P_AngleSin[playerID] * idx)
            # (Line 560) if (size % 2 == 0 && idx != size / 2)
            if EUDIf()(EUDSCAnd()(size % 2 == 0)(idx == size // 2, neg=True)()):
                # (Line 561) { Shape_Square(playerID, count, unit, angle_x + gradient_x, angle_y + gradient_y); }
                Shape_Square(playerID, count, unit, angle_x + gradient_x, angle_y + gradient_y)
                # (Line 562) else if (size % 2 == 1)
            if EUDElseIf()(size % 2 == 1):
                # (Line 563) {
                # (Line 564) if (idx == 0)
                if EUDIf()(idx == 0):
                    # (Line 565) { Shape_Dot(playerID, count, unit, 0, 0); }
                    Shape_Dot(playerID, count, unit, 0, 0)
                    # (Line 566) else
                    # (Line 567) { Shape_Square(playerID, count, unit, angle_x, angle_y); }
                if EUDElse()():
                    Shape_Square(playerID, count, unit, angle_x, angle_y)
                    # (Line 568) }
                EUDEndIf()
                # (Line 569) }
            EUDEndIf()
            # (Line 570) }

        # (Line 571) }
    EUDEndIf()
    # (Line 593) function Shape_Edge(playerID : TrgPlayer, count, unit : TrgUnit, degree, size, interval)

# (Line 594) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None])
def Shape_Edge(playerID, count, unit, degree, size, interval):
    # (Line 595) Table_Sin(playerID, degree, interval * 14 / 10);
    Table_Sin(playerID, degree, interval * 14 // 10)
    # (Line 596) Table_Cos(playerID, degree, interval * 14 / 10);
    Table_Cos(playerID, degree, interval * 14 // 10)
    # (Line 598) var x_o = v.P_AngleCos[playerID];
    x_o = EUDVariable()
    x_o << (v.P_AngleCos[playerID])
    # (Line 599) var y_o = v.P_AngleSin[playerID];
    y_o = EUDVariable()
    y_o << (v.P_AngleSin[playerID])
    # (Line 601) var distance = (interval * 2) / (size - 1);
    distance = EUDVariable()
    distance << ((interval * 2) // (size - 1))
    # (Line 603) Table_Sin(playerID, degree + 45, distance);
    Table_Sin(playerID, degree + 45, distance)
    # (Line 604) Table_Cos(playerID, degree + 45, distance);
    Table_Cos(playerID, degree + 45, distance)
    # (Line 606) var distance_x = v.P_AngleCos[playerID];
    distance_x = EUDVariable()
    distance_x << (v.P_AngleCos[playerID])
    # (Line 607) var distance_y = v.P_AngleSin[playerID];
    distance_y = EUDVariable()
    distance_y << (v.P_AngleSin[playerID])
    # (Line 609) if (size == 1)
    if EUDIf()(size == 1):
        # (Line 610) { Shape_Dot(playerID, 1, unit, 0, 0); }
        Shape_Dot(playerID, 1, unit, 0, 0)
        # (Line 611) else if (size > 1)
    if EUDElseIf()(size <= 1, neg=True):
        # (Line 612) { foreach(idx : EUDLoopRange(size - 1)) { Shape_Square(playerID, 1, unit, x_o - (distance_x * idx), y_o - (distance_y * idx)); } }
        for idx in EUDLoopRange(size - 1):
            Shape_Square(playerID, 1, unit, x_o - (distance_x * idx), y_o - (distance_y * idx))

        # (Line 613) }
    EUDEndIf()
    # (Line 616) function Shape_Circle(playerID : TrgPlayer, count, unit : TrgUnit, degree, n, radius)

# (Line 617) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None])
def Shape_Circle(playerID, count, unit, degree, n, radius):
    # (Line 618) if (n == 1) {
    if EUDIf()(n == 1):
        # (Line 619) Shape_Dot(playerID, 1, unit, 0, 0);
        Shape_Dot(playerID, 1, unit, 0, 0)
        # (Line 620) } else {
    if EUDElse()():
        # (Line 621) foreach(idx : EUDLoopRange(n)) {
        for idx in EUDLoopRange(n):
            # (Line 622) Table_Sin(playerID, degree + 360 / n * idx, radius);
            Table_Sin(playerID, degree + 360 // n * idx, radius)
            # (Line 623) Table_Cos(playerID, degree + 360 / n * idx, radius);
            Table_Cos(playerID, degree + 360 // n * idx, radius)
            # (Line 625) Shape_Dot(playerID, count, unit, v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            Shape_Dot(playerID, count, unit, v.P_AngleCos[playerID], v.P_AngleSin[playerID])
            # (Line 626) }
            # (Line 627) }

        # (Line 628) }
    EUDEndIf()
