## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 10) function Effect_Recall()
# (Line 11) {
@EUDFunc
def Effect_Recall():
    # (Line 12) var playerID = getcurpl();
    playerID = EUDVariable()
    playerID << (f_getcurpl())
    # (Line 13) MoveLocation(v.P_HoldLocation[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
    # (Line 15) if (Switch(53 + playerID, Cleared))
    DoActions(MoveLocation(v.P_HoldLocation[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
    if EUDIf()(Switch(53 + playerID, Cleared)):
        # (Line 16) { SetSwitch(53 + playerID, Set); }
        DoActions(SetSwitch(53 + playerID, Set))
        # (Line 17) }
    EUDEndIf()
    # (Line 28) function Buff_ShieldFix(amount : TrgCount)

# (Line 29) {
@EUDTypedFunc([TrgCount])
def Buff_ShieldFix(amount):
    # (Line 30) var playerID = getcurpl();
    playerID = EUDVariable()
    playerID << (f_getcurpl())
    # (Line 31) v.P_Shield[playerID] = amount;
    _ARRW(v.P_Shield, playerID) << (amount)
    # (Line 32) ModifyUnitShields(1, v.P_UnitID[playerID], playerID, "Anywhere", amount);
    # (Line 33) }
    DoActions(ModifyUnitShields(1, v.P_UnitID[playerID], playerID, "Anywhere", amount))
    # (Line 44) function Buff_ShieldFixPlayer(playerID : TrgPlayer, amount : TrgCount)

# (Line 45) {
@EUDTypedFunc([TrgPlayer, TrgCount])
def Buff_ShieldFixPlayer(playerID, amount):
    # (Line 46) v.P_Shield[playerID] = amount;
    _ARRW(v.P_Shield, playerID) << (amount)
    # (Line 47) ModifyUnitShields(1, v.P_UnitID[playerID], playerID, "Anywhere", amount);
    # (Line 48) }
    DoActions(ModifyUnitShields(1, v.P_UnitID[playerID], playerID, "Anywhere", amount))
    # (Line 56) function Debuff_Slow()

# (Line 57) {
@EUDFunc
def Debuff_Slow():
    # (Line 58) var playerID = getcurpl();
    playerID = EUDVariable()
    playerID << (f_getcurpl())
    # (Line 59) MoveLocation(v.P_HoldLocation[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
    # (Line 60) CreateUnit(1, "Zerg Devourer", "[Skill]Unit_Wait_8", playerID);
    DoActions(MoveLocation(v.P_HoldLocation[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
    # (Line 61) SetInvincibility(Enable, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL");
    DoActions(CreateUnit(1, "Zerg Devourer", "[Skill]Unit_Wait_8", playerID))
    # (Line 62) MoveUnit(1, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL", v.P_HoldLocation[playerID]);
    DoActions(SetInvincibility(Enable, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL"))
    # (Line 63) RemoveUnitAt(1, "Zerg Devourer", "Anywhere", playerID);
    DoActions(MoveUnit(1, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL", v.P_HoldLocation[playerID]))
    # (Line 64) }
    DoActions(RemoveUnitAt(1, "Zerg Devourer", "Anywhere", playerID))
    # (Line 72) function Debuff_SlowPlayer(playerID : TrgPlayer)

# (Line 73) {
@EUDTypedFunc([TrgPlayer])
def Debuff_SlowPlayer(playerID):
    # (Line 74) MoveLocation(v.P_HoldLocation[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
    # (Line 75) CreateUnit(1, "Zerg Devourer", "[Skill]Unit_Wait_8", playerID);
    DoActions(MoveLocation(v.P_HoldLocation[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
    # (Line 76) SetInvincibility(Enable, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL");
    DoActions(CreateUnit(1, "Zerg Devourer", "[Skill]Unit_Wait_8", playerID))
    # (Line 77) MoveUnit(1, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL", v.P_HoldLocation[playerID]);
    DoActions(SetInvincibility(Enable, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL"))
    # (Line 78) RemoveUnitAt(1, "Zerg Devourer", "Anywhere", playerID);
    DoActions(MoveUnit(1, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL", v.P_HoldLocation[playerID]))
    # (Line 79) }
    DoActions(RemoveUnitAt(1, "Zerg Devourer", "Anywhere", playerID))
    # (Line 87) function Debuff_Stop()

# (Line 88) {
@EUDFunc
def Debuff_Stop():
    # (Line 89) var playerID = getcurpl();
    playerID = EUDVariable()
    playerID << (f_getcurpl())
    # (Line 90) Debuff_Slow();
    Debuff_Slow()
    # (Line 91) Order(v.P_UnitID[playerID], playerID, "Anywhere", Move, v.P_HoldLocation[playerID]);
    # (Line 92) }
    DoActions(Order(v.P_UnitID[playerID], playerID, "Anywhere", Move, v.P_HoldLocation[playerID]))
    # (Line 100) function Debuff_StopPlayer(playerID : TrgPlayer)

# (Line 101) {
@EUDTypedFunc([TrgPlayer])
def Debuff_StopPlayer(playerID):
    # (Line 102) Debuff_SlowPlayer(playerID);
    Debuff_SlowPlayer(playerID)
    # (Line 103) Order(v.P_UnitID[playerID], playerID, "Anywhere", Move, v.P_HoldLocation[playerID]);
    # (Line 104) }
    DoActions(Order(v.P_UnitID[playerID], playerID, "Anywhere", Move, v.P_HoldLocation[playerID]))
    # (Line 112) function Debuff_BanReturn()

# (Line 113) {
@EUDFunc
def Debuff_BanReturn():
    # (Line 114) KillUnit("Protoss Observer", getcurpl());
    # (Line 115) }
    DoActions(KillUnit("Protoss Observer", f_getcurpl()))
    # (Line 123) function Debuff_BanReturnPlayer(playerID : TrgPlayer)

# (Line 124) {
@EUDTypedFunc([TrgPlayer])
def Debuff_BanReturnPlayer(playerID):
    # (Line 125) KillUnit("Protoss Observer", playerID);
    # (Line 126) }
    DoActions(KillUnit("Protoss Observer", playerID))
    # (Line 138) function ComputerAlly(state : TrgCount)

# (Line 139) {
@EUDTypedFunc([TrgCount])
def ComputerAlly(state):
    # (Line 140) var playerID = getcurpl();
    playerID = EUDVariable()
    playerID << (f_getcurpl())
    # (Line 142) if (state == 0)
    if EUDIf()(state == 0):
        # (Line 143) {
        # (Line 144) if (playerID < 3) 	SetAllianceStatus(P8, Enemy);
        if EUDIf()(playerID >= 3, neg=True):
            # (Line 145) else 			SetAllianceStatus(P7, Enemy);
            DoActions(SetAllianceStatus(P8, Enemy))
        if EUDElse()():
            # (Line 146) }
            DoActions(SetAllianceStatus(P7, Enemy))
        EUDEndIf()
        # (Line 147) else if 	(state == 1)	{ SetAllianceStatus(P7, Ally); SetAllianceStatus(P8, Ally); }
    if EUDElseIf()(state == 1):
        DoActions(SetAllianceStatus(P7, Ally))
        DoActions(SetAllianceStatus(P8, Ally))
        # (Line 148) }
    EUDEndIf()
    # (Line 159) function Main_Wait(wait : TrgCount)

# (Line 160) {
@EUDTypedFunc([TrgCount])
def Main_Wait(wait):
    # (Line 161) v.P_WaitMain[getcurpl()] = wait / 83 + 1;
    _ARRW(v.P_WaitMain, f_getcurpl()) << (wait // 83 + 1)
    # (Line 162) }
    # (Line 173) function Sub1_Wait(wait : TrgCount)

# (Line 174) {
@EUDTypedFunc([TrgCount])
def Sub1_Wait(wait):
    # (Line 175) v.P_WaitSub1[getcurpl()] = wait / 83 + 1;
    _ARRW(v.P_WaitSub1, f_getcurpl()) << (wait // 83 + 1)
    # (Line 176) }
    # (Line 187) function Sub2_Wait(wait : TrgCount)

# (Line 188) {
@EUDTypedFunc([TrgCount])
def Sub2_Wait(wait):
    # (Line 189) v.P_WaitSub2[getcurpl()] = wait / 83 + 1;
    _ARRW(v.P_WaitSub2, f_getcurpl()) << (wait // 83 + 1)
    # (Line 190) }
    # (Line 198) function SkillEnd()

# (Line 199) {
@EUDFunc
def SkillEnd():
    # (Line 200) var playerID = getcurpl();
    playerID = EUDVariable()
    playerID << (f_getcurpl())
    # (Line 202) v.P_CountMain[playerID] = 999;
    _ARRW(v.P_CountMain, playerID) << (999)
    # (Line 204) if (v.P_Ally[playerID] == 1)
    if EUDIf()(v.P_Ally[playerID] == 1):
        # (Line 205) {
        # (Line 206) SetSwitch("ComputerAlliy", Clear);
        # (Line 207) if (playerID < 3) 			{ SetAllianceStatus(P8, Enemy); }
        DoActions(SetSwitch("ComputerAlliy", Clear))
        if EUDIf()(playerID >= 3, neg=True):
            DoActions(SetAllianceStatus(P8, Enemy))
            # (Line 208) else if (playerID >= 3)	{ SetAllianceStatus(P7, Enemy); }
        if EUDElseIf()(playerID >= 3):
            DoActions(SetAllianceStatus(P7, Enemy))
            # (Line 209) v.P_Ally[playerID] = 0;
        EUDEndIf()
        _ARRW(v.P_Ally, playerID) << (0)
        # (Line 210) }
        # (Line 211) }
    EUDEndIf()
    # (Line 219) function Main_WaitLoop()

# (Line 220) {
@EUDFunc
def Main_WaitLoop():
    # (Line 221) var playerID = getcurpl();
    playerID = EUDVariable()
    playerID << (f_getcurpl())
    # (Line 224) if 		(v.P_WaitMain[playerID] >= 1) { v.P_WaitMain[playerID] -= 1; }
    if EUDIf()(v.P_WaitMain[playerID] >= 1):
        _ARRW(v.P_WaitMain, playerID).__isub__(1)
        # (Line 226) if 		(v.P_WaitSub1[playerID] >= 1) { v.P_WaitSub1[playerID] -= 1; }
    EUDEndIf()
    if EUDIf()(v.P_WaitSub1[playerID] >= 1):
        _ARRW(v.P_WaitSub1, playerID).__isub__(1)
        # (Line 227) if 		(v.P_WaitSub2[playerID] >= 1) { v.P_WaitSub2[playerID] -= 1; }
    EUDEndIf()
    if EUDIf()(v.P_WaitSub2[playerID] >= 1):
        _ARRW(v.P_WaitSub2, playerID).__isub__(1)
        # (Line 230) if 		(v.P_SkillDelay[playerID] >= 2)
    EUDEndIf()
    if EUDIf()(v.P_SkillDelay[playerID] >= 2):
        # (Line 231) { v.P_SkillDelay[playerID] -= 1; }
        _ARRW(v.P_SkillDelay, playerID).__isub__(1)
        # (Line 232) else if 	(v.P_SkillDelay[playerID] == 1)
    if EUDElseIf()(v.P_SkillDelay[playerID] == 1):
        # (Line 233) {
        # (Line 234) if (Switch(53 + playerID, Set))
        if EUDIf()(Switch(53 + playerID, Set)):
            # (Line 235) { SetSwitch(53 + playerID, Clear); }
            DoActions(SetSwitch(53 + playerID, Clear))
            # (Line 237) v.P_SkillDelay[playerID] = 0;
        EUDEndIf()
        _ARRW(v.P_SkillDelay, playerID) << (0)
        # (Line 238) v.P_Step[playerID] = 0;
        _ARRW(v.P_Step, playerID) << (0)
        # (Line 239) v.P_Shield[playerID] = 0;
        _ARRW(v.P_Shield, playerID) << (0)
        # (Line 240) ModifyUnitShields(1, v.P_UnitID[playerID], playerID, "Anywhere", 0);
        # (Line 241) }
        DoActions(ModifyUnitShields(1, v.P_UnitID[playerID], playerID, "Anywhere", 0))
        # (Line 243) if (v.P_WaitMain[playerID] == 0)
    EUDEndIf()
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 244) {
        # (Line 245) if 		(v.P_CountMain[playerID] == 999) 	{ Main_Wait(500); v.P_CountMain[playerID] = 1000; }
        if EUDIf()(v.P_CountMain[playerID] == 999):
            Main_Wait(500)
            _ARRW(v.P_CountMain, playerID) << (1000)
            # (Line 246) else if 	(v.P_CountMain[playerID] == 1000) 	{ v.P_CountMain[playerID] = 0; v.P_LoopMain[playerID] = 0; v.P_SkillDelay[playerID] = 12; }
        if EUDElseIf()(v.P_CountMain[playerID] == 1000):
            _ARRW(v.P_CountMain, playerID) << (0)
            _ARRW(v.P_LoopMain, playerID) << (0)
            _ARRW(v.P_SkillDelay, playerID) << (12)
            # (Line 247) }
        EUDEndIf()
        # (Line 248) }
    EUDEndIf()
    # (Line 263) function Table_Cos(playerID : TrgPlayer, degree, distance)

# (Line 264) {
@EUDTypedFunc([TrgPlayer, None, None])
def Table_Cos(playerID, degree, distance):
    # (Line 265) degree = degree % 360;
    degree << (degree % 360)
    # (Line 266) v.P_AngleCos[playerID] = v.P_Table_Cos[degree];
    _ARRW(v.P_AngleCos, playerID) << (v.P_Table_Cos[degree])
    # (Line 268) if (v.P_AngleCos[playerID] > 2147483648)
    if EUDIf()(v.P_AngleCos[playerID] <= 2147483648, neg=True):
        # (Line 269) {
        # (Line 270) v.P_AngleCos[playerID] = -v.P_AngleCos[playerID];
        _ARRW(v.P_AngleCos, playerID) << (-v.P_AngleCos[playerID])
        # (Line 271) v.P_AngleCos[playerID] = (v.P_AngleCos[playerID] * distance) / 100;
        _ARRW(v.P_AngleCos, playerID) << ((v.P_AngleCos[playerID] * distance) // 100)
        # (Line 272) v.P_AngleCos[playerID] = -v.P_AngleCos[playerID];
        _ARRW(v.P_AngleCos, playerID) << (-v.P_AngleCos[playerID])
        # (Line 273) }
        # (Line 274) else
        # (Line 275) { v.P_AngleCos[playerID] = (v.P_AngleCos[playerID] * distance) / 100; }
    if EUDElse()():
        _ARRW(v.P_AngleCos, playerID) << ((v.P_AngleCos[playerID] * distance) // 100)
        # (Line 276) }
    EUDEndIf()
    # (Line 291) function Table_Sin(playerID : TrgPlayer, degree, distance)

# (Line 292) {
@EUDTypedFunc([TrgPlayer, None, None])
def Table_Sin(playerID, degree, distance):
    # (Line 293) degree = degree % 360;
    degree << (degree % 360)
    # (Line 294) v.P_AngleSin[playerID] = v.P_Table_Sin[degree];
    _ARRW(v.P_AngleSin, playerID) << (v.P_Table_Sin[degree])
    # (Line 296) if (v.P_AngleSin[playerID] > 2147483648)
    if EUDIf()(v.P_AngleSin[playerID] <= 2147483648, neg=True):
        # (Line 297) {
        # (Line 298) v.P_AngleSin[playerID] = -v.P_AngleSin[playerID];
        _ARRW(v.P_AngleSin, playerID) << (-v.P_AngleSin[playerID])
        # (Line 299) v.P_AngleSin[playerID] = (v.P_AngleSin[playerID] * distance) / 100;
        _ARRW(v.P_AngleSin, playerID) << ((v.P_AngleSin[playerID] * distance) // 100)
        # (Line 300) v.P_AngleSin[playerID] = -v.P_AngleSin[playerID];
        _ARRW(v.P_AngleSin, playerID) << (-v.P_AngleSin[playerID])
        # (Line 301) }
        # (Line 302) else
        # (Line 303) { v.P_AngleSin[playerID] = (v.P_AngleSin[playerID] * distance) / 100; }
    if EUDElse()():
        _ARRW(v.P_AngleSin, playerID) << ((v.P_AngleSin[playerID] * distance) // 100)
        # (Line 304) }
    EUDEndIf()
    # (Line 321) function MoveLoc(unit : TrgUnit, playerID : TrgPlayer, pos_x, pos_y)

# (Line 322) {
@EUDTypedFunc([TrgUnit, TrgPlayer, None, None])
def MoveLoc(unit, playerID, pos_x, pos_y):
    # (Line 323) MoveLocation(v.P_LocationID[playerID], unit, playerID, "Anywhere");
    # (Line 324) addloc(v.P_LocationID[playerID], pos_x, pos_y);
    DoActions(MoveLocation(v.P_LocationID[playerID], unit, playerID, "Anywhere"))
    f_addloc(v.P_LocationID[playerID], pos_x, pos_y)
    # (Line 325) }
    # (Line 340) function SkillUnit(playerID : TrgPlayer, count, unit : TrgUnit)

# (Line 341) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit])
def SkillUnit(playerID, count, unit):
    # (Line 342) CreateUnit(count, unit, dwrand() % 8 + 33, playerID);
    # (Line 343) SetInvincibility(Enable, unit, playerID, "Anywhere");
    DoActions(CreateUnit(count, unit, f_dwrand() % 8 + 33, playerID))
    # (Line 344) MoveUnit(count, unit, playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
    DoActions(SetInvincibility(Enable, unit, playerID, "Anywhere"))
    # (Line 345) }
    DoActions(MoveUnit(count, unit, playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
    # (Line 364) function Shape_Dot(playerID : TrgPlayer, count, unit : TrgUnit, pos_x, pos_y)

# (Line 365) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def Shape_Dot(playerID, count, unit, pos_x, pos_y):
    # (Line 366) MoveLoc(v.P_UnitID[playerID], playerID, pos_x, pos_y);
    MoveLoc(v.P_UnitID[playerID], playerID, pos_x, pos_y)
    # (Line 367) SkillUnit(playerID, count, unit);
    SkillUnit(playerID, count, unit)
    # (Line 368) }
    # (Line 388) function Shape_Double(playerID : TrgPlayer, count, unit : TrgUnit, pos_x, pos_y)

# (Line 389) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def Shape_Double(playerID, count, unit, pos_x, pos_y):
    # (Line 390) Shape_Dot(playerID, count, unit, pos_x, pos_y);
    Shape_Dot(playerID, count, unit, pos_x, pos_y)
    # (Line 391) Shape_Dot(playerID, count, unit, -pos_x, -pos_y);
    Shape_Dot(playerID, count, unit, -pos_x, -pos_y)
    # (Line 392) }
    # (Line 413) function Shape_Square(playerID : TrgPlayer, count, unit : TrgUnit, pos_x, pos_y)

# (Line 414) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def Shape_Square(playerID, count, unit, pos_x, pos_y):
    # (Line 415) if (pos_x == 0 && pos_y == 0)
    if EUDIf()(EUDSCAnd()(pos_x == 0)(pos_y == 0)()):
        # (Line 416) {
        # (Line 417) Shape_Dot(playerID, count, unit, pos_x, pos_y);
        Shape_Dot(playerID, count, unit, pos_x, pos_y)
        # (Line 418) }
        # (Line 419) else
        # (Line 420) {
    if EUDElse()():
        # (Line 421) MoveLoc(v.P_UnitID[playerID], playerID, pos_x, pos_y);
        MoveLoc(v.P_UnitID[playerID], playerID, pos_x, pos_y)
        # (Line 422) SkillUnit(playerID, count, unit);
        SkillUnit(playerID, count, unit)
        # (Line 423) MoveLoc(v.P_UnitID[playerID], playerID, -pos_y, pos_x);
        MoveLoc(v.P_UnitID[playerID], playerID, -pos_y, pos_x)
        # (Line 424) SkillUnit(playerID, count, unit);
        SkillUnit(playerID, count, unit)
        # (Line 425) MoveLoc(v.P_UnitID[playerID], playerID, -pos_x, -pos_y);
        MoveLoc(v.P_UnitID[playerID], playerID, -pos_x, -pos_y)
        # (Line 426) SkillUnit(playerID, count, unit);
        SkillUnit(playerID, count, unit)
        # (Line 427) MoveLoc(v.P_UnitID[playerID], playerID, pos_y, -pos_x);
        MoveLoc(v.P_UnitID[playerID], playerID, pos_y, -pos_x)
        # (Line 428) SkillUnit(playerID, count, unit);
        SkillUnit(playerID, count, unit)
        # (Line 429) }
        # (Line 430) }
    EUDEndIf()
    # (Line 450) function Shape_NxNSquare(playerID : TrgPlayer, count, unit : TrgUnit, size, interval)

# (Line 451) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def Shape_NxNSquare(playerID, count, unit, size, interval):
    # (Line 452) var loop = (size * size) / 4;
    loop = EUDVariable()
    loop << ((size * size) // 4)
    # (Line 453) var space = interval / 2;
    space = EUDVariable()
    space << (interval // 2)
    # (Line 454) var dis_x, dis_y;
    dis_x, dis_y = EUDCreateVariables(2)
    # (Line 456) if (size == 1)
    if EUDIf()(size == 1):
        # (Line 457) {
        # (Line 458) Shape_Dot(playerID, count, unit, 0, 0);
        Shape_Dot(playerID, count, unit, 0, 0)
        # (Line 459) }
        # (Line 460) else if (size > 1)
    if EUDElseIf()(size <= 1, neg=True):
        # (Line 461) {
        # (Line 462) foreach(idx : EUDLoopRange(loop))
        for idx in EUDLoopRange(loop):
            # (Line 463) {
            # (Line 464) if (size % 2 == 0)
            if EUDIf()(size % 2 == 0):
                # (Line 465) {
                # (Line 466) dis_x = idx % (size / 2) + 1;
                dis_x << (idx % (size // 2) + 1)
                # (Line 467) dis_y = idx / (size / 2) + 1;
                dis_y << (idx // (size // 2) + 1)
                # (Line 468) if (dis_x == 1)
                if EUDIf()(dis_x == 1):
                    # (Line 469) { Shape_Square(playerID, count, unit, space, dis_y * interval - space); }
                    Shape_Square(playerID, count, unit, space, dis_y * interval - space)
                    # (Line 470) else if (dis_y == 1)
                if EUDElseIf()(dis_y == 1):
                    # (Line 471) { Shape_Square(playerID, count, unit, dis_x * interval - space, space); }
                    Shape_Square(playerID, count, unit, dis_x * interval - space, space)
                    # (Line 472) else
                    # (Line 473) { Shape_Square(playerID, count, unit, dis_x * interval - space, dis_y * interval - space); }
                if EUDElse()():
                    Shape_Square(playerID, count, unit, dis_x * interval - space, dis_y * interval - space)
                    # (Line 474) }
                EUDEndIf()
                # (Line 475) else if (size % 2 == 1)
            if EUDElseIf()(size % 2 == 1):
                # (Line 476) {
                # (Line 477) dis_x = idx % (size / 2);
                dis_x << (idx % (size // 2))
                # (Line 478) dis_y = idx / (size / 2);
                dis_y << (idx // (size // 2))
                # (Line 480) if (idx == 0)
                if EUDIf()(idx == 0):
                    # (Line 481) { Shape_Dot(playerID, count, unit, 0, 0); }
                    Shape_Dot(playerID, count, unit, 0, 0)
                    # (Line 482) else if (dis_y == 0)
                if EUDElseIf()(dis_y == 0):
                    # (Line 483) { Shape_Square(playerID, count, unit, dis_x * interval, 0); }
                    Shape_Square(playerID, count, unit, dis_x * interval, 0)
                    # (Line 484) else
                    # (Line 485) { Shape_Square(playerID, count, unit, dis_x * interval + interval, dis_y * interval); }
                if EUDElse()():
                    Shape_Square(playerID, count, unit, dis_x * interval + interval, dis_y * interval)
                    # (Line 487) if (idx == loop - 1)
                EUDEndIf()
                if EUDIf()(idx == loop - 1):
                    # (Line 488) { Shape_Square(playerID, count, unit, (size / 2) * interval, 0); }
                    Shape_Square(playerID, count, unit, (size // 2) * interval, 0)
                    # (Line 489) }
                EUDEndIf()
                # (Line 490) }
            EUDEndIf()
            # (Line 491) }

        # (Line 492) }
    EUDEndIf()
    # (Line 516) function Shape_Line(playerID : TrgPlayer, count, unit : TrgUnit, degree, size, interval, distance)

# (Line 517) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None])
def Shape_Line(playerID, count, unit, degree, size, interval, distance):
    # (Line 518) Table_Sin(playerID, degree + 90, distance);
    Table_Sin(playerID, degree + 90, distance)
    # (Line 519) Table_Cos(playerID, degree + 90, distance);
    Table_Cos(playerID, degree + 90, distance)
    # (Line 521) var initial_x = v.P_AngleCos[playerID];
    initial_x = EUDVariable()
    initial_x << (v.P_AngleCos[playerID])
    # (Line 522) var initial_y = v.P_AngleSin[playerID];
    initial_y = EUDVariable()
    initial_y << (v.P_AngleSin[playerID])
    # (Line 524) if (size % 2 == 0)
    if EUDIf()(size % 2 == 0):
        # (Line 525) { Table_Sin(playerID, degree, interval * (size / 2) - interval / 2); Table_Cos(playerID, degree, interval * (size / 2) - interval / 2); }
        Table_Sin(playerID, degree, interval * (size // 2) - interval // 2)
        Table_Cos(playerID, degree, interval * (size // 2) - interval // 2)
        # (Line 526) else
        # (Line 527) { Table_Sin(playerID, degree, interval * (size / 2)); Table_Cos(playerID, degree, interval * (size / 2)); }
    if EUDElse()():
        Table_Sin(playerID, degree, interval * (size // 2))
        Table_Cos(playerID, degree, interval * (size // 2))
        # (Line 529) initial_x = initial_x + v.P_AngleCos[playerID];
    EUDEndIf()
    initial_x << (initial_x + v.P_AngleCos[playerID])
    # (Line 530) initial_y = initial_y + v.P_AngleSin[playerID];
    initial_y << (initial_y + v.P_AngleSin[playerID])
    # (Line 532) Table_Sin(playerID, degree, interval);
    Table_Sin(playerID, degree, interval)
    # (Line 533) Table_Cos(playerID, degree, interval);
    Table_Cos(playerID, degree, interval)
    # (Line 535) if (size == 1)
    if EUDIf()(size == 1):
        # (Line 536) { Shape_Dot(playerID, count, unit, 0, 0); }
        Shape_Dot(playerID, count, unit, 0, 0)
        # (Line 537) else if (size > 1)
    if EUDElseIf()(size <= 1, neg=True):
        # (Line 538) { foreach(idx : EUDLoopRange(size)) { Shape_Dot(playerID, count, unit, initial_x - idx * v.P_AngleCos[playerID], initial_y - idx * v.P_AngleSin[playerID]); } }
        for idx in EUDLoopRange(size):
            Shape_Dot(playerID, count, unit, initial_x - idx * v.P_AngleCos[playerID], initial_y - idx * v.P_AngleSin[playerID])

        # (Line 539) }
    EUDEndIf()
    # (Line 561) function Shape_Cross(playerID : TrgPlayer, count, unit : TrgUnit, degree, size, interval)

# (Line 562) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None])
def Shape_Cross(playerID, count, unit, degree, size, interval):
    # (Line 563) var distance = interval / 2;
    distance = EUDVariable()
    distance << (interval // 2)
    # (Line 565) Table_Sin(playerID, degree, distance);
    Table_Sin(playerID, degree, distance)
    # (Line 566) Table_Cos(playerID, degree, distance);
    Table_Cos(playerID, degree, distance)
    # (Line 568) var gradient_x = v.P_AngleCos[playerID] / 2;
    gradient_x = EUDVariable()
    gradient_x << (v.P_AngleCos[playerID] // 2)
    # (Line 569) var gradient_y = v.P_AngleSin[playerID] / 2;
    gradient_y = EUDVariable()
    gradient_y << (v.P_AngleSin[playerID] // 2)
    # (Line 571) var angle_x, angle_y;
    angle_x, angle_y = EUDCreateVariables(2)
    # (Line 573) Table_Sin(playerID, degree, interval);
    Table_Sin(playerID, degree, interval)
    # (Line 574) Table_Cos(playerID, degree, interval);
    Table_Cos(playerID, degree, interval)
    # (Line 576) if (size == 1)
    if EUDIf()(size == 1):
        # (Line 577) {
        # (Line 578) Shape_Dot(playerID, count, unit, 0, 0);
        Shape_Dot(playerID, count, unit, 0, 0)
        # (Line 579) }
        # (Line 580) else if (size > 1)
    if EUDElseIf()(size <= 1, neg=True):
        # (Line 581) {
        # (Line 582) foreach(idx : EUDLoopRange(size))
        for idx in EUDLoopRange(size):
            # (Line 583) {
            # (Line 584) angle_x = v.P_AngleCos[playerID] * idx;
            angle_x << (v.P_AngleCos[playerID] * idx)
            # (Line 585) angle_y = v.P_AngleSin[playerID] * idx;
            angle_y << (v.P_AngleSin[playerID] * idx)
            # (Line 587) if (idx == 0)
            if EUDIf()(idx == 0):
                # (Line 588) { Shape_Dot(playerID, count, unit, 0, 0); }
                Shape_Dot(playerID, count, unit, 0, 0)
                # (Line 589) else
                # (Line 590) { Shape_Square(playerID, count, unit, angle_x, angle_y); }
            if EUDElse()():
                Shape_Square(playerID, count, unit, angle_x, angle_y)
                # (Line 591) }
            EUDEndIf()
            # (Line 592) }

        # (Line 593) }
    EUDEndIf()
    # (Line 615) function Shape_Edge(playerID : TrgPlayer, count, unit : TrgUnit, degree, size, interval)

# (Line 616) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None])
def Shape_Edge(playerID, count, unit, degree, size, interval):
    # (Line 617) Table_Sin(playerID, degree, interval * 14 / 10);
    Table_Sin(playerID, degree, interval * 14 // 10)
    # (Line 618) Table_Cos(playerID, degree, interval * 14 / 10);
    Table_Cos(playerID, degree, interval * 14 // 10)
    # (Line 620) var x_o = v.P_AngleCos[playerID];
    x_o = EUDVariable()
    x_o << (v.P_AngleCos[playerID])
    # (Line 621) var y_o = v.P_AngleSin[playerID];
    y_o = EUDVariable()
    y_o << (v.P_AngleSin[playerID])
    # (Line 623) var distance = (interval * 2) / (size - 1);
    distance = EUDVariable()
    distance << ((interval * 2) // (size - 1))
    # (Line 625) Table_Sin(playerID, degree + 45, distance);
    Table_Sin(playerID, degree + 45, distance)
    # (Line 626) Table_Cos(playerID, degree + 45, distance);
    Table_Cos(playerID, degree + 45, distance)
    # (Line 628) var distance_x = v.P_AngleCos[playerID];
    distance_x = EUDVariable()
    distance_x << (v.P_AngleCos[playerID])
    # (Line 629) var distance_y = v.P_AngleSin[playerID];
    distance_y = EUDVariable()
    distance_y << (v.P_AngleSin[playerID])
    # (Line 631) if (size == 1)
    if EUDIf()(size == 1):
        # (Line 632) { Shape_Dot(playerID, 1, unit, 0, 0); }
        Shape_Dot(playerID, 1, unit, 0, 0)
        # (Line 633) else if (size > 1)
    if EUDElseIf()(size <= 1, neg=True):
        # (Line 634) { foreach(idx : EUDLoopRange(size - 1)) { Shape_Square(playerID, 1, unit, x_o - (distance_x * idx), y_o - (distance_y * idx)); } }
        for idx in EUDLoopRange(size - 1):
            Shape_Square(playerID, 1, unit, x_o - (distance_x * idx), y_o - (distance_y * idx))

        # (Line 635) }
    EUDEndIf()
    # (Line 638) function Shape_Circle(playerID : TrgPlayer, count, unit : TrgUnit, degree, n, radius)

# (Line 639) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None])
def Shape_Circle(playerID, count, unit, degree, n, radius):
    # (Line 640) if (n == 1) {
    if EUDIf()(n == 1):
        # (Line 641) Shape_Dot(playerID, 1, unit, 0, 0);
        Shape_Dot(playerID, 1, unit, 0, 0)
        # (Line 642) } else {
    if EUDElse()():
        # (Line 643) foreach(idx : EUDLoopRange(n)) {
        for idx in EUDLoopRange(n):
            # (Line 644) Table_Sin(playerID, degree + 360 / n * idx, radius);
            Table_Sin(playerID, degree + 360 // n * idx, radius)
            # (Line 645) Table_Cos(playerID, degree + 360 / n * idx, radius);
            Table_Cos(playerID, degree + 360 // n * idx, radius)
            # (Line 647) Shape_Dot(playerID, count, unit, v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            Shape_Dot(playerID, count, unit, v.P_AngleCos[playerID], v.P_AngleSin[playerID])
            # (Line 648) }
            # (Line 649) }

        # (Line 650) }
    EUDEndIf()
    # (Line 652) function ResizeLocation(playerID : TrgPlayer, x, y)

# (Line 653) {
@EUDTypedFunc([TrgPlayer, None, None])
def ResizeLocation(playerID, x, y):
    # (Line 654) var location = EPD(0x58DC4C) + v.P_LocationID[playerID] * 5;
    location = EUDVariable()
    location << (EPD(0x58DC4C) + v.P_LocationID[playerID] * 5)
    # (Line 655) var bozo_location = EPD(0x58DC4C) + v.P_HoldLocation[playerID] * 5;
    bozo_location = EUDVariable()
    bozo_location << (EPD(0x58DC4C) + v.P_HoldLocation[playerID] * 5)
    # (Line 657) var unit = 32;
    unit = EUDVariable()
    unit << (32)
    # (Line 659) x = x * unit / 2 - unit;
    x << (x * unit // 2 - unit)
    # (Line 660) y = y * unit / 2 - unit;
    y << (y * unit // 2 - unit)
    # (Line 662) dwwrite_epd(location + 0, dwread_epd(bozo_location + 0) - x <= 0 ? 0 : dwread_epd(bozo_location + 0) - x);
    f_dwwrite_epd(location + 0, EUDTernary(f_dwread_epd(bozo_location + 0) - x <= 0)(0)(f_dwread_epd(bozo_location + 0) - x))
    # (Line 663) dwwrite_epd(location + 2, dwread_epd(bozo_location + 2) + x >= 8192 ? 8192 : dwread_epd(bozo_location + 2) + x);
    f_dwwrite_epd(location + 2, EUDTernary(f_dwread_epd(bozo_location + 2) + x >= 8192)(8192)(f_dwread_epd(bozo_location + 2) + x))
    # (Line 664) dwwrite_epd(location + 1, dwread_epd(bozo_location + 1) - y <= 0 ? 0 : dwread_epd(bozo_location + 1) - y);
    f_dwwrite_epd(location + 1, EUDTernary(f_dwread_epd(bozo_location + 1) - y <= 0)(0)(f_dwread_epd(bozo_location + 1) - y))
    # (Line 665) dwwrite_epd(location + 3, dwread_epd(bozo_location + 3) + y >= 6146 ? 6146 : dwread_epd(bozo_location + 3) + y);
    f_dwwrite_epd(location + 3, EUDTernary(f_dwread_epd(bozo_location + 3) + y >= 6146)(6146)(f_dwread_epd(bozo_location + 3) + y))
    # (Line 666) }
    # (Line 682) function KillEnemySkillUnit(playerID : TrgPlayer, size, isDestroyOnUltimate)

# (Line 683) {
@EUDTypedFunc([TrgPlayer, None, None])
def KillEnemySkillUnit(playerID, size, isDestroyOnUltimate):
    # (Line 684) ResizeLocation(playerID, size, size);
    ResizeLocation(playerID, size, size)
    # (Line 685) MoveLoc(v.P_UnitID[playerID], playerID, 0, 0);
    MoveLoc(v.P_UnitID[playerID], playerID, 0, 0)
    # (Line 686) if (isDestroyOnUltimate == 1)
    if EUDIf()(isDestroyOnUltimate == 1):
        # (Line 687) {
        # (Line 688) KillUnitAt(All, "80 + 1n Goliath", v.P_LocationID[playerID], Foes);
        # (Line 689) KillUnitAt(All, "80 + 1n Vulture", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "80 + 1n Goliath", v.P_LocationID[playerID], Foes))
        # (Line 690) KillUnitAt(All, "80 + 1n Marine", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "80 + 1n Vulture", v.P_LocationID[playerID], Foes))
        # (Line 691) KillUnitAt(All, "80 + 1n Tom Kazansky", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "80 + 1n Marine", v.P_LocationID[playerID], Foes))
        # (Line 692) KillUnitAt(All, "80 + 1n Tank", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "80 + 1n Tom Kazansky", v.P_LocationID[playerID], Foes))
        # (Line 693) KillUnitAt(All, "80 + 1n Mutalisk", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "80 + 1n Tank", v.P_LocationID[playerID], Foes))
        # (Line 694) KillUnitAt(All, "80 + 1n Guardian", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "80 + 1n Mutalisk", v.P_LocationID[playerID], Foes))
        # (Line 695) KillUnitAt(All, "80 + 1n Artanis", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "80 + 1n Guardian", v.P_LocationID[playerID], Foes))
        # (Line 696) KillUnitAt(All, "80 + 1n Ghost", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "80 + 1n Artanis", v.P_LocationID[playerID], Foes))
        # (Line 697) KillUnitAt(All, "100 + 1n Hyperion", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "80 + 1n Ghost", v.P_LocationID[playerID], Foes))
        # (Line 698) KillUnitAt(All, "100 + 1n Dragoon", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "100 + 1n Hyperion", v.P_LocationID[playerID], Foes))
        # (Line 699) KillUnitAt(All, "120 + 1n Archon", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "100 + 1n Dragoon", v.P_LocationID[playerID], Foes))
        # (Line 700) KillUnitAt(All, "130 + 1n Norad", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "120 + 1n Archon", v.P_LocationID[playerID], Foes))
        # (Line 701) KillUnitAt(All, "130 + 1n Arbiter", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "130 + 1n Norad", v.P_LocationID[playerID], Foes))
        # (Line 702) KillUnitAt(All, "40 + 1n Marine", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "130 + 1n Arbiter", v.P_LocationID[playerID], Foes))
        # (Line 703) KillUnitAt(All, "40 + 1n Ghost", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "40 + 1n Marine", v.P_LocationID[playerID], Foes))
        # (Line 704) KillUnitAt(All, "80 + 1n Vulture", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "40 + 1n Ghost", v.P_LocationID[playerID], Foes))
        # (Line 705) KillUnitAt(All, "40 + 1n Goliath", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "80 + 1n Vulture", v.P_LocationID[playerID], Foes))
        # (Line 706) KillUnitAt(All, "40 + 1n Wraith", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "40 + 1n Goliath", v.P_LocationID[playerID], Foes))
        # (Line 707) KillUnitAt(All, "40 + 1n Firebat", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "40 + 1n Wraith", v.P_LocationID[playerID], Foes))
        # (Line 708) KillUnitAt(All, "40 + 1n Zergling", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "40 + 1n Firebat", v.P_LocationID[playerID], Foes))
        # (Line 709) KillUnitAt(All, " Creep. Licht", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "40 + 1n Zergling", v.P_LocationID[playerID], Foes))
        # (Line 710) KillUnitAt(All, "40 + 1n Drone", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, " Creep. Licht", v.P_LocationID[playerID], Foes))
        # (Line 711) KillUnitAt(All, "40 + 1n Mutalisk", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "40 + 1n Drone", v.P_LocationID[playerID], Foes))
        # (Line 712) KillUnitAt(All, "40 + 1n Guardian", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "40 + 1n Mutalisk", v.P_LocationID[playerID], Foes))
        # (Line 713) KillUnitAt(All, "60 + 1n High Templar", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "40 + 1n Guardian", v.P_LocationID[playerID], Foes))
        # (Line 714) KillUnitAt(All, "40 + 3n Zeratul", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "60 + 1n High Templar", v.P_LocationID[playerID], Foes))
        # (Line 715) KillUnitAt(All, "40 + 1n Mojo", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "40 + 3n Zeratul", v.P_LocationID[playerID], Foes))
        # (Line 716) KillUnitAt(All, "40 + 1n Gantrithor", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "40 + 1n Mojo", v.P_LocationID[playerID], Foes))
        # (Line 717) KillUnitAt(All, "40 + 1n Lurker", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "40 + 1n Gantrithor", v.P_LocationID[playerID], Foes))
        # (Line 718) KillUnitAt(All, "50 + 1n Tank", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "40 + 1n Lurker", v.P_LocationID[playerID], Foes))
        # (Line 719) KillUnitAt(All, "50 + 1n Battlecruiser", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "50 + 1n Tank", v.P_LocationID[playerID], Foes))
        # (Line 720) KillUnitAt(All, "60 + 3n Siege", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", v.P_LocationID[playerID], Foes))
        # (Line 721) KillUnitAt(All, "60 + 1n Siege", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "60 + 3n Siege", v.P_LocationID[playerID], Foes))
        # (Line 722) KillUnitAt(All, "60 + 1n Hydralisk", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "60 + 1n Siege", v.P_LocationID[playerID], Foes))
        # (Line 723) KillUnitAt(All, "60 + 1n Dragoon", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "60 + 1n Hydralisk", v.P_LocationID[playerID], Foes))
        # (Line 724) KillUnitAt(All, "60 + 1n High Templar", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "60 + 1n Dragoon", v.P_LocationID[playerID], Foes))
        # (Line 725) KillUnitAt(All, "60 + 1n Archon", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "60 + 1n High Templar", v.P_LocationID[playerID], Foes))
        # (Line 726) KillUnitAt(All, "60 + 1n Danimoth", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "60 + 1n Archon", v.P_LocationID[playerID], Foes))
        # (Line 727) KillUnitAt(All, "60 + 3n Ghost", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "60 + 1n Danimoth", v.P_LocationID[playerID], Foes))
        # (Line 728) }
        DoActions(KillUnitAt(All, "60 + 3n Ghost", v.P_LocationID[playerID], Foes))
        # (Line 729) else
        # (Line 730) {
    if EUDElse()():
        # (Line 731) if (Switch("UiltimateSwitch", Cleared))
        if EUDIf()(Switch("UiltimateSwitch", Cleared)):
            # (Line 732) {
            # (Line 733) KillUnitAt(All, "80 + 1n Goliath", v.P_LocationID[playerID], Foes);
            # (Line 734) KillUnitAt(All, "80 + 1n Vulture", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "80 + 1n Goliath", v.P_LocationID[playerID], Foes))
            # (Line 735) KillUnitAt(All, "80 + 1n Marine", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "80 + 1n Vulture", v.P_LocationID[playerID], Foes))
            # (Line 736) KillUnitAt(All, "80 + 1n Tom Kazansky", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "80 + 1n Marine", v.P_LocationID[playerID], Foes))
            # (Line 737) KillUnitAt(All, "80 + 1n Tank", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "80 + 1n Tom Kazansky", v.P_LocationID[playerID], Foes))
            # (Line 738) KillUnitAt(All, "80 + 1n Mutalisk", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "80 + 1n Tank", v.P_LocationID[playerID], Foes))
            # (Line 739) KillUnitAt(All, "80 + 1n Guardian", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "80 + 1n Mutalisk", v.P_LocationID[playerID], Foes))
            # (Line 740) KillUnitAt(All, "80 + 1n Artanis", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "80 + 1n Guardian", v.P_LocationID[playerID], Foes))
            # (Line 741) KillUnitAt(All, "80 + 1n Ghost", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "80 + 1n Artanis", v.P_LocationID[playerID], Foes))
            # (Line 742) KillUnitAt(All, "100 + 1n Hyperion", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "80 + 1n Ghost", v.P_LocationID[playerID], Foes))
            # (Line 743) KillUnitAt(All, "100 + 1n Dragoon", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "100 + 1n Hyperion", v.P_LocationID[playerID], Foes))
            # (Line 744) KillUnitAt(All, "120 + 1n Archon", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "100 + 1n Dragoon", v.P_LocationID[playerID], Foes))
            # (Line 745) KillUnitAt(All, "130 + 1n Norad", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "120 + 1n Archon", v.P_LocationID[playerID], Foes))
            # (Line 746) KillUnitAt(All, "130 + 1n Arbiter", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "130 + 1n Norad", v.P_LocationID[playerID], Foes))
            # (Line 747) KillUnitAt(All, "40 + 1n Marine", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "130 + 1n Arbiter", v.P_LocationID[playerID], Foes))
            # (Line 748) KillUnitAt(All, "40 + 1n Ghost", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "40 + 1n Marine", v.P_LocationID[playerID], Foes))
            # (Line 749) KillUnitAt(All, "80 + 1n Vulture", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "40 + 1n Ghost", v.P_LocationID[playerID], Foes))
            # (Line 750) KillUnitAt(All, "40 + 1n Goliath", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "80 + 1n Vulture", v.P_LocationID[playerID], Foes))
            # (Line 751) KillUnitAt(All, "40 + 1n Wraith", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "40 + 1n Goliath", v.P_LocationID[playerID], Foes))
            # (Line 752) KillUnitAt(All, "40 + 1n Firebat", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "40 + 1n Wraith", v.P_LocationID[playerID], Foes))
            # (Line 753) KillUnitAt(All, "40 + 1n Zergling", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "40 + 1n Firebat", v.P_LocationID[playerID], Foes))
            # (Line 754) KillUnitAt(All, " Creep. Licht", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "40 + 1n Zergling", v.P_LocationID[playerID], Foes))
            # (Line 755) KillUnitAt(All, "40 + 1n Drone", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, " Creep. Licht", v.P_LocationID[playerID], Foes))
            # (Line 756) KillUnitAt(All, "40 + 1n Mutalisk", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "40 + 1n Drone", v.P_LocationID[playerID], Foes))
            # (Line 757) KillUnitAt(All, "40 + 1n Guardian", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "40 + 1n Mutalisk", v.P_LocationID[playerID], Foes))
            # (Line 758) KillUnitAt(All, "60 + 1n High Templar", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "40 + 1n Guardian", v.P_LocationID[playerID], Foes))
            # (Line 759) KillUnitAt(All, "40 + 3n Zeratul", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "60 + 1n High Templar", v.P_LocationID[playerID], Foes))
            # (Line 760) KillUnitAt(All, "40 + 1n Mojo", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "40 + 3n Zeratul", v.P_LocationID[playerID], Foes))
            # (Line 761) KillUnitAt(All, "40 + 1n Gantrithor", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "40 + 1n Mojo", v.P_LocationID[playerID], Foes))
            # (Line 762) KillUnitAt(All, "40 + 1n Lurker", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "40 + 1n Gantrithor", v.P_LocationID[playerID], Foes))
            # (Line 763) KillUnitAt(All, "50 + 1n Tank", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "40 + 1n Lurker", v.P_LocationID[playerID], Foes))
            # (Line 764) KillUnitAt(All, "50 + 1n Battlecruiser", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "50 + 1n Tank", v.P_LocationID[playerID], Foes))
            # (Line 765) KillUnitAt(All, "60 + 3n Siege", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", v.P_LocationID[playerID], Foes))
            # (Line 766) KillUnitAt(All, "60 + 1n Siege", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "60 + 3n Siege", v.P_LocationID[playerID], Foes))
            # (Line 767) KillUnitAt(All, "60 + 1n Hydralisk", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "60 + 1n Siege", v.P_LocationID[playerID], Foes))
            # (Line 768) KillUnitAt(All, "60 + 1n Dragoon", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "60 + 1n Hydralisk", v.P_LocationID[playerID], Foes))
            # (Line 769) KillUnitAt(All, "60 + 1n High Templar", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "60 + 1n Dragoon", v.P_LocationID[playerID], Foes))
            # (Line 770) KillUnitAt(All, "60 + 1n Archon", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "60 + 1n High Templar", v.P_LocationID[playerID], Foes))
            # (Line 771) KillUnitAt(All, "60 + 1n Danimoth", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "60 + 1n Archon", v.P_LocationID[playerID], Foes))
            # (Line 772) KillUnitAt(All, "60 + 3n Ghost", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "60 + 1n Danimoth", v.P_LocationID[playerID], Foes))
            # (Line 773) }
            DoActions(KillUnitAt(All, "60 + 3n Ghost", v.P_LocationID[playerID], Foes))
            # (Line 774) }
        EUDEndIf()
        # (Line 775) }
    EUDEndIf()
