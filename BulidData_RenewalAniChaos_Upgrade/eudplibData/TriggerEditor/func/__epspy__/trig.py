## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 10) function Effect_Recall()
# (Line 11) {
@EUDFunc
def Effect_Recall():
    # (Line 12) var playerID = getcurpl();
    playerID = EUDVariable()
    playerID << (f_getcurpl())
    # (Line 13) MoveLocation(v.P_HoldLocation[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
    # (Line 15) if (Switch(53 + playerID, Cleared))
    DoActions(MoveLocation(v.P_HoldLocation[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
    if EUDIf()(Switch(53 + playerID, Cleared)):
        # (Line 16) { SetSwitch(53 + playerID, Set); }
        DoActions(SetSwitch(53 + playerID, Set))
        # (Line 17) }
    EUDEndIf()
    # (Line 28) function Buff_ShieldFix(amount : TrgCount)

# (Line 29) {
@EUDTypedFunc([TrgCount])
def Buff_ShieldFix(amount):
    # (Line 30) var playerID = getcurpl();
    playerID = EUDVariable()
    playerID << (f_getcurpl())
    # (Line 31) v.P_Shield[playerID] = amount;
    _ARRW(v.P_Shield, playerID) << (amount)
    # (Line 32) ModifyUnitShields(1, v.P_UnitID[playerID], playerID, "Anywhere", amount);
    # (Line 33) }
    DoActions(ModifyUnitShields(1, v.P_UnitID[playerID], playerID, "Anywhere", amount))
    # (Line 41) function Debuff_Slow()

# (Line 42) {
@EUDFunc
def Debuff_Slow():
    # (Line 43) var playerID = getcurpl();
    playerID = EUDVariable()
    playerID << (f_getcurpl())
    # (Line 44) MoveLocation(v.P_HoldLocation[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
    # (Line 45) CreateUnit(1, "Zerg Devourer", "[Skill]Unit_Wait_8", playerID);
    DoActions(MoveLocation(v.P_HoldLocation[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
    # (Line 46) SetInvincibility(Enable, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL");
    DoActions(CreateUnit(1, "Zerg Devourer", "[Skill]Unit_Wait_8", playerID))
    # (Line 47) MoveUnit(1, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL", v.P_HoldLocation[playerID]);
    DoActions(SetInvincibility(Enable, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL"))
    # (Line 48) RemoveUnitAt(1, "Zerg Devourer", "Anywhere", playerID);
    DoActions(MoveUnit(1, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL", v.P_HoldLocation[playerID]))
    # (Line 49) }
    DoActions(RemoveUnitAt(1, "Zerg Devourer", "Anywhere", playerID))
    # (Line 57) function Debuff_SlowPlayer(playerID : TrgPlayer)

# (Line 58) {
@EUDTypedFunc([TrgPlayer])
def Debuff_SlowPlayer(playerID):
    # (Line 59) MoveLocation(v.P_HoldLocation[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
    # (Line 60) CreateUnit(1, "Zerg Devourer", "[Skill]Unit_Wait_8", playerID);
    DoActions(MoveLocation(v.P_HoldLocation[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
    # (Line 61) SetInvincibility(Enable, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL");
    DoActions(CreateUnit(1, "Zerg Devourer", "[Skill]Unit_Wait_8", playerID))
    # (Line 62) MoveUnit(1, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL", v.P_HoldLocation[playerID]);
    DoActions(SetInvincibility(Enable, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL"))
    # (Line 63) RemoveUnitAt(1, "Zerg Devourer", "Anywhere", playerID);
    DoActions(MoveUnit(1, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL", v.P_HoldLocation[playerID]))
    # (Line 64) }
    DoActions(RemoveUnitAt(1, "Zerg Devourer", "Anywhere", playerID))
    # (Line 72) function Debuff_Stop()

# (Line 73) {
@EUDFunc
def Debuff_Stop():
    # (Line 74) var playerID = getcurpl();
    playerID = EUDVariable()
    playerID << (f_getcurpl())
    # (Line 75) Debuff_Slow();
    Debuff_Slow()
    # (Line 76) Order(v.P_UnitID[playerID], playerID, "Anywhere", Move, v.P_HoldLocation[playerID]);
    # (Line 77) }
    DoActions(Order(v.P_UnitID[playerID], playerID, "Anywhere", Move, v.P_HoldLocation[playerID]))
    # (Line 85) function Debuff_StopPlayer(playerID : TrgPlayer)

# (Line 86) {
@EUDTypedFunc([TrgPlayer])
def Debuff_StopPlayer(playerID):
    # (Line 87) Debuff_SlowPlayer(playerID);
    Debuff_SlowPlayer(playerID)
    # (Line 88) Order(v.P_UnitID[playerID], playerID, "Anywhere", Move, v.P_HoldLocation[playerID]);
    # (Line 89) }
    DoActions(Order(v.P_UnitID[playerID], playerID, "Anywhere", Move, v.P_HoldLocation[playerID]))
    # (Line 97) function Debuff_BanReturn()

# (Line 98) {
@EUDFunc
def Debuff_BanReturn():
    # (Line 99) KillUnit("Protoss Observer", getcurpl());
    # (Line 100) }
    DoActions(KillUnit("Protoss Observer", f_getcurpl()))
    # (Line 108) function Debuff_BanReturnPlayer(playerID : TrgPlayer)

# (Line 109) {
@EUDTypedFunc([TrgPlayer])
def Debuff_BanReturnPlayer(playerID):
    # (Line 110) KillUnit("Protoss Observer", playerID);
    # (Line 111) }
    DoActions(KillUnit("Protoss Observer", playerID))
    # (Line 123) function ComputerAlly(state : TrgCount)

# (Line 124) {
@EUDTypedFunc([TrgCount])
def ComputerAlly(state):
    # (Line 125) var playerID = getcurpl();
    playerID = EUDVariable()
    playerID << (f_getcurpl())
    # (Line 127) if (state == 0)
    if EUDIf()(state == 0):
        # (Line 128) {
        # (Line 129) if (playerID < 3) 	SetAllianceStatus(P8, Enemy);
        if EUDIf()(playerID >= 3, neg=True):
            # (Line 130) else 			SetAllianceStatus(P7, Enemy);
            DoActions(SetAllianceStatus(P8, Enemy))
        if EUDElse()():
            # (Line 131) }
            DoActions(SetAllianceStatus(P7, Enemy))
        EUDEndIf()
        # (Line 132) else if 	(state == 1)	{ SetAllianceStatus(P7, Ally); SetAllianceStatus(P8, Ally); }
    if EUDElseIf()(state == 1):
        DoActions(SetAllianceStatus(P7, Ally))
        DoActions(SetAllianceStatus(P8, Ally))
        # (Line 133) }
    EUDEndIf()
    # (Line 144) function Main_Wait(wait : TrgCount)

# (Line 145) {
@EUDTypedFunc([TrgCount])
def Main_Wait(wait):
    # (Line 146) v.P_WaitMain[getcurpl()] = wait / 83 + 1;
    _ARRW(v.P_WaitMain, f_getcurpl()) << (wait // 83 + 1)
    # (Line 147) }
    # (Line 158) function Sub1_Wait(wait : TrgCount)

# (Line 159) {
@EUDTypedFunc([TrgCount])
def Sub1_Wait(wait):
    # (Line 160) v.P_WaitSub1[getcurpl()] = wait / 83 + 1;
    _ARRW(v.P_WaitSub1, f_getcurpl()) << (wait // 83 + 1)
    # (Line 161) }
    # (Line 172) function Sub2_Wait(wait : TrgCount)

# (Line 173) {
@EUDTypedFunc([TrgCount])
def Sub2_Wait(wait):
    # (Line 174) v.P_WaitSub2[getcurpl()] = wait / 83 + 1;
    _ARRW(v.P_WaitSub2, f_getcurpl()) << (wait // 83 + 1)
    # (Line 175) }
    # (Line 183) function SkillEnd()

# (Line 184) {
@EUDFunc
def SkillEnd():
    # (Line 185) var playerID = getcurpl();
    playerID = EUDVariable()
    playerID << (f_getcurpl())
    # (Line 187) v.P_CountMain[playerID] = 999;
    _ARRW(v.P_CountMain, playerID) << (999)
    # (Line 189) if (v.P_Ally[playerID] == 1)
    if EUDIf()(v.P_Ally[playerID] == 1):
        # (Line 190) {
        # (Line 191) SetSwitch("ComputerAlliy", Clear);
        # (Line 192) if (playerID < 3) 			{ SetAllianceStatus(P8, Enemy); }
        DoActions(SetSwitch("ComputerAlliy", Clear))
        if EUDIf()(playerID >= 3, neg=True):
            DoActions(SetAllianceStatus(P8, Enemy))
            # (Line 193) else if (playerID >= 3)	{ SetAllianceStatus(P7, Enemy); }
        if EUDElseIf()(playerID >= 3):
            DoActions(SetAllianceStatus(P7, Enemy))
            # (Line 194) v.P_Ally[playerID] = 0;
        EUDEndIf()
        _ARRW(v.P_Ally, playerID) << (0)
        # (Line 195) }
        # (Line 196) }
    EUDEndIf()
    # (Line 204) function Main_WaitLoop()

# (Line 205) {
@EUDFunc
def Main_WaitLoop():
    # (Line 206) var playerID = getcurpl();
    playerID = EUDVariable()
    playerID << (f_getcurpl())
    # (Line 209) if 		(v.P_WaitMain[playerID] >= 1) { v.P_WaitMain[playerID] -= 1; }
    if EUDIf()(v.P_WaitMain[playerID] >= 1):
        _ARRW(v.P_WaitMain, playerID).__isub__(1)
        # (Line 211) if 		(v.P_WaitSub1[playerID] >= 1) { v.P_WaitSub1[playerID] -= 1; }
    EUDEndIf()
    if EUDIf()(v.P_WaitSub1[playerID] >= 1):
        _ARRW(v.P_WaitSub1, playerID).__isub__(1)
        # (Line 212) if 		(v.P_WaitSub2[playerID] >= 1) { v.P_WaitSub2[playerID] -= 1; }
    EUDEndIf()
    if EUDIf()(v.P_WaitSub2[playerID] >= 1):
        _ARRW(v.P_WaitSub2, playerID).__isub__(1)
        # (Line 215) if 		(v.P_SkillDelay[playerID] >= 2)
    EUDEndIf()
    if EUDIf()(v.P_SkillDelay[playerID] >= 2):
        # (Line 216) { v.P_SkillDelay[playerID] -= 1; }
        _ARRW(v.P_SkillDelay, playerID).__isub__(1)
        # (Line 217) else if 	(v.P_SkillDelay[playerID] == 1)
    if EUDElseIf()(v.P_SkillDelay[playerID] == 1):
        # (Line 218) {
        # (Line 219) if (Switch(53 + playerID, Set))
        if EUDIf()(Switch(53 + playerID, Set)):
            # (Line 220) { SetSwitch(53 + playerID, Clear); }
            DoActions(SetSwitch(53 + playerID, Clear))
            # (Line 222) v.P_SkillDelay[playerID] = 0;
        EUDEndIf()
        _ARRW(v.P_SkillDelay, playerID) << (0)
        # (Line 223) v.P_Step[playerID] = 0;
        _ARRW(v.P_Step, playerID) << (0)
        # (Line 224) v.P_Shield[playerID] = 0;
        _ARRW(v.P_Shield, playerID) << (0)
        # (Line 225) ModifyUnitShields(1, v.P_UnitID[playerID], playerID, "Anywhere", 0);
        # (Line 226) }
        DoActions(ModifyUnitShields(1, v.P_UnitID[playerID], playerID, "Anywhere", 0))
        # (Line 228) if (v.P_WaitMain[playerID] == 0)
    EUDEndIf()
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 229) {
        # (Line 230) if 		(v.P_CountMain[playerID] == 999) 	{ Main_Wait(500); v.P_CountMain[playerID] = 1000; }
        if EUDIf()(v.P_CountMain[playerID] == 999):
            Main_Wait(500)
            _ARRW(v.P_CountMain, playerID) << (1000)
            # (Line 231) else if 	(v.P_CountMain[playerID] == 1000) 	{ v.P_CountMain[playerID] = 0; v.P_LoopMain[playerID] = 0; v.P_SkillDelay[playerID] = 12; }
        if EUDElseIf()(v.P_CountMain[playerID] == 1000):
            _ARRW(v.P_CountMain, playerID) << (0)
            _ARRW(v.P_LoopMain, playerID) << (0)
            _ARRW(v.P_SkillDelay, playerID) << (12)
            # (Line 232) }
        EUDEndIf()
        # (Line 233) }
    EUDEndIf()
    # (Line 248) function Table_Cos(playerID : TrgPlayer, degree, distance)

# (Line 249) {
@EUDTypedFunc([TrgPlayer, None, None])
def Table_Cos(playerID, degree, distance):
    # (Line 250) degree = degree % 360;
    degree << (degree % 360)
    # (Line 251) v.P_AngleCos[playerID] = v.P_Table_Cos[degree];
    _ARRW(v.P_AngleCos, playerID) << (v.P_Table_Cos[degree])
    # (Line 253) if (v.P_AngleCos[playerID] > 2147483648)
    if EUDIf()(v.P_AngleCos[playerID] <= 2147483648, neg=True):
        # (Line 254) {
        # (Line 255) v.P_AngleCos[playerID] = -v.P_AngleCos[playerID];
        _ARRW(v.P_AngleCos, playerID) << (-v.P_AngleCos[playerID])
        # (Line 256) v.P_AngleCos[playerID] = (v.P_AngleCos[playerID] * distance) / 100;
        _ARRW(v.P_AngleCos, playerID) << ((v.P_AngleCos[playerID] * distance) // 100)
        # (Line 257) v.P_AngleCos[playerID] = -v.P_AngleCos[playerID];
        _ARRW(v.P_AngleCos, playerID) << (-v.P_AngleCos[playerID])
        # (Line 258) }
        # (Line 259) else
        # (Line 260) { v.P_AngleCos[playerID] = (v.P_AngleCos[playerID] * distance) / 100; }
    if EUDElse()():
        _ARRW(v.P_AngleCos, playerID) << ((v.P_AngleCos[playerID] * distance) // 100)
        # (Line 261) }
    EUDEndIf()
    # (Line 276) function Table_Sin(playerID : TrgPlayer, degree, distance)

# (Line 277) {
@EUDTypedFunc([TrgPlayer, None, None])
def Table_Sin(playerID, degree, distance):
    # (Line 278) degree = degree % 360;
    degree << (degree % 360)
    # (Line 279) v.P_AngleSin[playerID] = v.P_Table_Sin[degree];
    _ARRW(v.P_AngleSin, playerID) << (v.P_Table_Sin[degree])
    # (Line 281) if (v.P_AngleSin[playerID] > 2147483648)
    if EUDIf()(v.P_AngleSin[playerID] <= 2147483648, neg=True):
        # (Line 282) {
        # (Line 283) v.P_AngleSin[playerID] = -v.P_AngleSin[playerID];
        _ARRW(v.P_AngleSin, playerID) << (-v.P_AngleSin[playerID])
        # (Line 284) v.P_AngleSin[playerID] = (v.P_AngleSin[playerID] * distance) / 100;
        _ARRW(v.P_AngleSin, playerID) << ((v.P_AngleSin[playerID] * distance) // 100)
        # (Line 285) v.P_AngleSin[playerID] = -v.P_AngleSin[playerID];
        _ARRW(v.P_AngleSin, playerID) << (-v.P_AngleSin[playerID])
        # (Line 286) }
        # (Line 287) else
        # (Line 288) { v.P_AngleSin[playerID] = (v.P_AngleSin[playerID] * distance) / 100; }
    if EUDElse()():
        _ARRW(v.P_AngleSin, playerID) << ((v.P_AngleSin[playerID] * distance) // 100)
        # (Line 289) }
    EUDEndIf()
    # (Line 306) function MoveLoc(unit : TrgUnit, playerID : TrgPlayer, pos_x, pos_y)

# (Line 307) {
@EUDTypedFunc([TrgUnit, TrgPlayer, None, None])
def MoveLoc(unit, playerID, pos_x, pos_y):
    # (Line 308) MoveLocation(v.P_LocationID[playerID], unit, playerID, "Anywhere");
    # (Line 309) addloc(v.P_LocationID[playerID], pos_x, pos_y);
    DoActions(MoveLocation(v.P_LocationID[playerID], unit, playerID, "Anywhere"))
    f_addloc(v.P_LocationID[playerID], pos_x, pos_y)
    # (Line 310) }
    # (Line 325) function SkillUnit(playerID : TrgPlayer, count, unit : TrgUnit)

# (Line 326) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit])
def SkillUnit(playerID, count, unit):
    # (Line 327) CreateUnit(count, unit, dwrand() % 8 + 33, playerID);
    # (Line 328) SetInvincibility(Enable, unit, playerID, "Anywhere");
    DoActions(CreateUnit(count, unit, f_dwrand() % 8 + 33, playerID))
    # (Line 329) MoveUnit(count, unit, playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
    DoActions(SetInvincibility(Enable, unit, playerID, "Anywhere"))
    # (Line 330) }
    DoActions(MoveUnit(count, unit, playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
    # (Line 349) function Shape_Dot(playerID : TrgPlayer, count, unit : TrgUnit, pos_x, pos_y)

# (Line 350) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def Shape_Dot(playerID, count, unit, pos_x, pos_y):
    # (Line 351) MoveLoc(v.P_UnitID[playerID], playerID, pos_x, pos_y);
    MoveLoc(v.P_UnitID[playerID], playerID, pos_x, pos_y)
    # (Line 352) SkillUnit(playerID, count, unit);
    SkillUnit(playerID, count, unit)
    # (Line 353) }
    # (Line 373) function Shape_Double(playerID : TrgPlayer, count, unit : TrgUnit, pos_x, pos_y)

# (Line 374) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def Shape_Double(playerID, count, unit, pos_x, pos_y):
    # (Line 375) Shape_Dot(playerID, count, unit, pos_x, pos_y);
    Shape_Dot(playerID, count, unit, pos_x, pos_y)
    # (Line 376) Shape_Dot(playerID, count, unit, -pos_x, -pos_y);
    Shape_Dot(playerID, count, unit, -pos_x, -pos_y)
    # (Line 377) }
    # (Line 398) function Shape_Square(playerID : TrgPlayer, count, unit : TrgUnit, pos_x, pos_y)

# (Line 399) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def Shape_Square(playerID, count, unit, pos_x, pos_y):
    # (Line 400) if (pos_x == 0 && pos_y == 0)
    if EUDIf()(EUDSCAnd()(pos_x == 0)(pos_y == 0)()):
        # (Line 401) {
        # (Line 402) Shape_Dot(playerID, count, unit, pos_x, pos_y);
        Shape_Dot(playerID, count, unit, pos_x, pos_y)
        # (Line 403) }
        # (Line 404) else
        # (Line 405) {
    if EUDElse()():
        # (Line 406) MoveLoc(v.P_UnitID[playerID], playerID, pos_x, pos_y);
        MoveLoc(v.P_UnitID[playerID], playerID, pos_x, pos_y)
        # (Line 407) SkillUnit(playerID, count, unit);
        SkillUnit(playerID, count, unit)
        # (Line 408) MoveLoc(v.P_UnitID[playerID], playerID, -pos_y, pos_x);
        MoveLoc(v.P_UnitID[playerID], playerID, -pos_y, pos_x)
        # (Line 409) SkillUnit(playerID, count, unit);
        SkillUnit(playerID, count, unit)
        # (Line 410) MoveLoc(v.P_UnitID[playerID], playerID, -pos_x, -pos_y);
        MoveLoc(v.P_UnitID[playerID], playerID, -pos_x, -pos_y)
        # (Line 411) SkillUnit(playerID, count, unit);
        SkillUnit(playerID, count, unit)
        # (Line 412) MoveLoc(v.P_UnitID[playerID], playerID, pos_y, -pos_x);
        MoveLoc(v.P_UnitID[playerID], playerID, pos_y, -pos_x)
        # (Line 413) SkillUnit(playerID, count, unit);
        SkillUnit(playerID, count, unit)
        # (Line 414) }
        # (Line 415) }
    EUDEndIf()
    # (Line 435) function Shape_NxNSquare(playerID : TrgPlayer, count, unit : TrgUnit, size, interval)

# (Line 436) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def Shape_NxNSquare(playerID, count, unit, size, interval):
    # (Line 437) var loop = (size * size) / 4;
    loop = EUDVariable()
    loop << ((size * size) // 4)
    # (Line 438) var space = interval / 2;
    space = EUDVariable()
    space << (interval // 2)
    # (Line 439) var dis_x, dis_y;
    dis_x, dis_y = EUDCreateVariables(2)
    # (Line 441) if (size == 1)
    if EUDIf()(size == 1):
        # (Line 442) {
        # (Line 443) Shape_Dot(playerID, count, unit, 0, 0);
        Shape_Dot(playerID, count, unit, 0, 0)
        # (Line 444) }
        # (Line 445) else if (size > 1)
    if EUDElseIf()(size <= 1, neg=True):
        # (Line 446) {
        # (Line 447) foreach(idx : EUDLoopRange(loop))
        for idx in EUDLoopRange(loop):
            # (Line 448) {
            # (Line 449) if (size % 2 == 0)
            if EUDIf()(size % 2 == 0):
                # (Line 450) {
                # (Line 451) dis_x = idx % (size / 2) + 1;
                dis_x << (idx % (size // 2) + 1)
                # (Line 452) dis_y = idx / (size / 2) + 1;
                dis_y << (idx // (size // 2) + 1)
                # (Line 453) if (dis_x == 1)
                if EUDIf()(dis_x == 1):
                    # (Line 454) { Shape_Square(playerID, count, unit, space, dis_y * interval - space); }
                    Shape_Square(playerID, count, unit, space, dis_y * interval - space)
                    # (Line 455) else if (dis_y == 1)
                if EUDElseIf()(dis_y == 1):
                    # (Line 456) { Shape_Square(playerID, count, unit, dis_x * interval - space, space); }
                    Shape_Square(playerID, count, unit, dis_x * interval - space, space)
                    # (Line 457) else
                    # (Line 458) { Shape_Square(playerID, count, unit, dis_x * interval - space, dis_y * interval - space); }
                if EUDElse()():
                    Shape_Square(playerID, count, unit, dis_x * interval - space, dis_y * interval - space)
                    # (Line 459) }
                EUDEndIf()
                # (Line 460) else if (size % 2 == 1)
            if EUDElseIf()(size % 2 == 1):
                # (Line 461) {
                # (Line 462) dis_x = idx % (size / 2);
                dis_x << (idx % (size // 2))
                # (Line 463) dis_y = idx / (size / 2);
                dis_y << (idx // (size // 2))
                # (Line 465) if (idx == 0)
                if EUDIf()(idx == 0):
                    # (Line 466) { Shape_Dot(playerID, count, unit, 0, 0); }
                    Shape_Dot(playerID, count, unit, 0, 0)
                    # (Line 467) else if (dis_y == 0)
                if EUDElseIf()(dis_y == 0):
                    # (Line 468) { Shape_Square(playerID, count, unit, dis_x * interval, 0); }
                    Shape_Square(playerID, count, unit, dis_x * interval, 0)
                    # (Line 469) else
                    # (Line 470) { Shape_Square(playerID, count, unit, dis_x * interval + interval, dis_y * interval); }
                if EUDElse()():
                    Shape_Square(playerID, count, unit, dis_x * interval + interval, dis_y * interval)
                    # (Line 472) if (idx == loop - 1)
                EUDEndIf()
                if EUDIf()(idx == loop - 1):
                    # (Line 473) { Shape_Square(playerID, count, unit, (size / 2) * interval, 0); }
                    Shape_Square(playerID, count, unit, (size // 2) * interval, 0)
                    # (Line 474) }
                EUDEndIf()
                # (Line 475) }
            EUDEndIf()
            # (Line 476) }

        # (Line 477) }
    EUDEndIf()
    # (Line 501) function Shape_Line(playerID : TrgPlayer, count, unit : TrgUnit, degree, size, interval, distance)

# (Line 502) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None])
def Shape_Line(playerID, count, unit, degree, size, interval, distance):
    # (Line 503) Table_Sin(playerID, degree + 90, distance);
    Table_Sin(playerID, degree + 90, distance)
    # (Line 504) Table_Cos(playerID, degree + 90, distance);
    Table_Cos(playerID, degree + 90, distance)
    # (Line 506) var initial_x = v.P_AngleCos[playerID];
    initial_x = EUDVariable()
    initial_x << (v.P_AngleCos[playerID])
    # (Line 507) var initial_y = v.P_AngleSin[playerID];
    initial_y = EUDVariable()
    initial_y << (v.P_AngleSin[playerID])
    # (Line 509) if (size % 2 == 0)
    if EUDIf()(size % 2 == 0):
        # (Line 510) { Table_Sin(playerID, degree, interval * (size / 2) - interval / 2); Table_Cos(playerID, degree, interval * (size / 2) - interval / 2); }
        Table_Sin(playerID, degree, interval * (size // 2) - interval // 2)
        Table_Cos(playerID, degree, interval * (size // 2) - interval // 2)
        # (Line 511) else
        # (Line 512) { Table_Sin(playerID, degree, interval * (size / 2)); Table_Cos(playerID, degree, interval * (size / 2)); }
    if EUDElse()():
        Table_Sin(playerID, degree, interval * (size // 2))
        Table_Cos(playerID, degree, interval * (size // 2))
        # (Line 514) initial_x = initial_x + v.P_AngleCos[playerID];
    EUDEndIf()
    initial_x << (initial_x + v.P_AngleCos[playerID])
    # (Line 515) initial_y = initial_y + v.P_AngleSin[playerID];
    initial_y << (initial_y + v.P_AngleSin[playerID])
    # (Line 517) Table_Sin(playerID, degree, interval);
    Table_Sin(playerID, degree, interval)
    # (Line 518) Table_Cos(playerID, degree, interval);
    Table_Cos(playerID, degree, interval)
    # (Line 520) if (size == 1)
    if EUDIf()(size == 1):
        # (Line 521) { Shape_Dot(playerID, count, unit, 0, 0); }
        Shape_Dot(playerID, count, unit, 0, 0)
        # (Line 522) else if (size > 1)
    if EUDElseIf()(size <= 1, neg=True):
        # (Line 523) { foreach(idx : EUDLoopRange(size)) { Shape_Dot(playerID, count, unit, initial_x - idx * v.P_AngleCos[playerID], initial_y - idx * v.P_AngleSin[playerID]); } }
        for idx in EUDLoopRange(size):
            Shape_Dot(playerID, count, unit, initial_x - idx * v.P_AngleCos[playerID], initial_y - idx * v.P_AngleSin[playerID])

        # (Line 524) }
    EUDEndIf()
    # (Line 546) function Shape_Cross(playerID : TrgPlayer, count, unit : TrgUnit, degree, size, interval)

# (Line 547) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None])
def Shape_Cross(playerID, count, unit, degree, size, interval):
    # (Line 548) var distance = interval / 2;
    distance = EUDVariable()
    distance << (interval // 2)
    # (Line 550) Table_Sin(playerID, degree, distance);
    Table_Sin(playerID, degree, distance)
    # (Line 551) Table_Cos(playerID, degree, distance);
    Table_Cos(playerID, degree, distance)
    # (Line 553) var gradient_x = v.P_AngleCos[playerID] / 2;
    gradient_x = EUDVariable()
    gradient_x << (v.P_AngleCos[playerID] // 2)
    # (Line 554) var gradient_y = v.P_AngleSin[playerID] / 2;
    gradient_y = EUDVariable()
    gradient_y << (v.P_AngleSin[playerID] // 2)
    # (Line 556) var angle_x, angle_y;
    angle_x, angle_y = EUDCreateVariables(2)
    # (Line 558) Table_Sin(playerID, degree, interval);
    Table_Sin(playerID, degree, interval)
    # (Line 559) Table_Cos(playerID, degree, interval);
    Table_Cos(playerID, degree, interval)
    # (Line 561) if (size == 1)
    if EUDIf()(size == 1):
        # (Line 562) {
        # (Line 563) Shape_Dot(playerID, count, unit, 0, 0);
        Shape_Dot(playerID, count, unit, 0, 0)
        # (Line 564) }
        # (Line 565) else if (size > 1)
    if EUDElseIf()(size <= 1, neg=True):
        # (Line 566) {
        # (Line 567) foreach(idx : EUDLoopRange(size))
        for idx in EUDLoopRange(size):
            # (Line 568) {
            # (Line 569) angle_x = v.P_AngleCos[playerID] * idx;
            angle_x << (v.P_AngleCos[playerID] * idx)
            # (Line 570) angle_y = v.P_AngleSin[playerID] * idx;
            angle_y << (v.P_AngleSin[playerID] * idx)
            # (Line 572) if (size % 2 == 0 && idx != size / 2)
            if EUDIf()(EUDSCAnd()(size % 2 == 0)(idx == size // 2, neg=True)()):
                # (Line 573) { Shape_Square(playerID, count, unit, angle_x + gradient_x, angle_y + gradient_y); }
                Shape_Square(playerID, count, unit, angle_x + gradient_x, angle_y + gradient_y)
                # (Line 574) else if (size % 2 == 1)
            if EUDElseIf()(size % 2 == 1):
                # (Line 575) {
                # (Line 576) if (idx == 0)
                if EUDIf()(idx == 0):
                    # (Line 577) { Shape_Dot(playerID, count, unit, 0, 0); }
                    Shape_Dot(playerID, count, unit, 0, 0)
                    # (Line 578) else
                    # (Line 579) { Shape_Square(playerID, count, unit, angle_x, angle_y); }
                if EUDElse()():
                    Shape_Square(playerID, count, unit, angle_x, angle_y)
                    # (Line 580) }
                EUDEndIf()
                # (Line 581) }
            EUDEndIf()
            # (Line 582) }

        # (Line 583) }
    EUDEndIf()
    # (Line 605) function Shape_Edge(playerID : TrgPlayer, count, unit : TrgUnit, degree, size, interval)

# (Line 606) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None])
def Shape_Edge(playerID, count, unit, degree, size, interval):
    # (Line 607) Table_Sin(playerID, degree, interval * 14 / 10);
    Table_Sin(playerID, degree, interval * 14 // 10)
    # (Line 608) Table_Cos(playerID, degree, interval * 14 / 10);
    Table_Cos(playerID, degree, interval * 14 // 10)
    # (Line 610) var x_o = v.P_AngleCos[playerID];
    x_o = EUDVariable()
    x_o << (v.P_AngleCos[playerID])
    # (Line 611) var y_o = v.P_AngleSin[playerID];
    y_o = EUDVariable()
    y_o << (v.P_AngleSin[playerID])
    # (Line 613) var distance = (interval * 2) / (size - 1);
    distance = EUDVariable()
    distance << ((interval * 2) // (size - 1))
    # (Line 615) Table_Sin(playerID, degree + 45, distance);
    Table_Sin(playerID, degree + 45, distance)
    # (Line 616) Table_Cos(playerID, degree + 45, distance);
    Table_Cos(playerID, degree + 45, distance)
    # (Line 618) var distance_x = v.P_AngleCos[playerID];
    distance_x = EUDVariable()
    distance_x << (v.P_AngleCos[playerID])
    # (Line 619) var distance_y = v.P_AngleSin[playerID];
    distance_y = EUDVariable()
    distance_y << (v.P_AngleSin[playerID])
    # (Line 621) if (size == 1)
    if EUDIf()(size == 1):
        # (Line 622) { Shape_Dot(playerID, 1, unit, 0, 0); }
        Shape_Dot(playerID, 1, unit, 0, 0)
        # (Line 623) else if (size > 1)
    if EUDElseIf()(size <= 1, neg=True):
        # (Line 624) { foreach(idx : EUDLoopRange(size - 1)) { Shape_Square(playerID, 1, unit, x_o - (distance_x * idx), y_o - (distance_y * idx)); } }
        for idx in EUDLoopRange(size - 1):
            Shape_Square(playerID, 1, unit, x_o - (distance_x * idx), y_o - (distance_y * idx))

        # (Line 625) }
    EUDEndIf()
    # (Line 628) function Shape_Circle(playerID : TrgPlayer, count, unit : TrgUnit, degree, n, radius)

# (Line 629) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None])
def Shape_Circle(playerID, count, unit, degree, n, radius):
    # (Line 630) if (n == 1) {
    if EUDIf()(n == 1):
        # (Line 631) Shape_Dot(playerID, 1, unit, 0, 0);
        Shape_Dot(playerID, 1, unit, 0, 0)
        # (Line 632) } else {
    if EUDElse()():
        # (Line 633) foreach(idx : EUDLoopRange(n)) {
        for idx in EUDLoopRange(n):
            # (Line 634) Table_Sin(playerID, degree + 360 / n * idx, radius);
            Table_Sin(playerID, degree + 360 // n * idx, radius)
            # (Line 635) Table_Cos(playerID, degree + 360 / n * idx, radius);
            Table_Cos(playerID, degree + 360 // n * idx, radius)
            # (Line 637) Shape_Dot(playerID, count, unit, v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            Shape_Dot(playerID, count, unit, v.P_AngleCos[playerID], v.P_AngleSin[playerID])
            # (Line 638) }
            # (Line 639) }

        # (Line 640) }
    EUDEndIf()
    # (Line 642) function ResizeLocation(playerID : TrgPlayer, x, y)

# (Line 643) {
@EUDTypedFunc([TrgPlayer, None, None])
def ResizeLocation(playerID, x, y):
    # (Line 644) var location = EPD(0x58DC4C) + v.P_LocationID[playerID] * 5;
    location = EUDVariable()
    location << (EPD(0x58DC4C) + v.P_LocationID[playerID] * 5)
    # (Line 645) var bozo_location = EPD(0x58DC4C) + v.P_HoldLocation[playerID] * 5;
    bozo_location = EUDVariable()
    bozo_location << (EPD(0x58DC4C) + v.P_HoldLocation[playerID] * 5)
    # (Line 647) var unit = 32;
    unit = EUDVariable()
    unit << (32)
    # (Line 649) x = x * unit / 2 - unit;
    x << (x * unit // 2 - unit)
    # (Line 650) y = y * unit / 2 - unit;
    y << (y * unit // 2 - unit)
    # (Line 652) dwwrite_epd(location + 0, dwread_epd(bozo_location + 0) - x <= 0 ? 0 : dwread_epd(bozo_location + 0) - x);
    f_dwwrite_epd(location + 0, EUDTernary(f_dwread_epd(bozo_location + 0) - x <= 0)(0)(f_dwread_epd(bozo_location + 0) - x))
    # (Line 653) dwwrite_epd(location + 2, dwread_epd(bozo_location + 2) + x >= 8192 ? 8192 : dwread_epd(bozo_location + 2) + x);
    f_dwwrite_epd(location + 2, EUDTernary(f_dwread_epd(bozo_location + 2) + x >= 8192)(8192)(f_dwread_epd(bozo_location + 2) + x))
    # (Line 654) dwwrite_epd(location + 1, dwread_epd(bozo_location + 1) - y <= 0 ? 0 : dwread_epd(bozo_location + 1) - y);
    f_dwwrite_epd(location + 1, EUDTernary(f_dwread_epd(bozo_location + 1) - y <= 0)(0)(f_dwread_epd(bozo_location + 1) - y))
    # (Line 655) dwwrite_epd(location + 3, dwread_epd(bozo_location + 3) + y >= 6146 ? 6146 : dwread_epd(bozo_location + 3) + y);
    f_dwwrite_epd(location + 3, EUDTernary(f_dwread_epd(bozo_location + 3) + y >= 6146)(6146)(f_dwread_epd(bozo_location + 3) + y))
    # (Line 656) }
    # (Line 672) function KillEnemySkillUnit(playerID : TrgPlayer, size, isDestroyOnUltimate)

# (Line 673) {
@EUDTypedFunc([TrgPlayer, None, None])
def KillEnemySkillUnit(playerID, size, isDestroyOnUltimate):
    # (Line 674) ResizeLocation(playerID, size, size);
    ResizeLocation(playerID, size, size)
    # (Line 675) MoveLoc(v.P_UnitID[playerID], playerID, 0, 0);
    MoveLoc(v.P_UnitID[playerID], playerID, 0, 0)
    # (Line 676) if (isDestroyOnUltimate == 1)
    if EUDIf()(isDestroyOnUltimate == 1):
        # (Line 677) {
        # (Line 678) KillUnitAt(All, "80 + 1n Goliath", v.P_LocationID[playerID], Foes);
        # (Line 679) KillUnitAt(All, "80 + 1n Vulture", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "80 + 1n Goliath", v.P_LocationID[playerID], Foes))
        # (Line 680) KillUnitAt(All, "80 + 1n Marine", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "80 + 1n Vulture", v.P_LocationID[playerID], Foes))
        # (Line 681) KillUnitAt(All, "80 + 1n Tom Kazansky", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "80 + 1n Marine", v.P_LocationID[playerID], Foes))
        # (Line 682) KillUnitAt(All, "80 + 1n Tank", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "80 + 1n Tom Kazansky", v.P_LocationID[playerID], Foes))
        # (Line 683) KillUnitAt(All, "80 + 1n Mutalisk", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "80 + 1n Tank", v.P_LocationID[playerID], Foes))
        # (Line 684) KillUnitAt(All, "80 + 1n Guardian", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "80 + 1n Mutalisk", v.P_LocationID[playerID], Foes))
        # (Line 685) KillUnitAt(All, "80 + 1n Artanis", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "80 + 1n Guardian", v.P_LocationID[playerID], Foes))
        # (Line 686) KillUnitAt(All, "80 + 1n Ghost", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "80 + 1n Artanis", v.P_LocationID[playerID], Foes))
        # (Line 687) KillUnitAt(All, "100 + 1n Hyperion", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "80 + 1n Ghost", v.P_LocationID[playerID], Foes))
        # (Line 688) KillUnitAt(All, "100 + 1n Dragoon", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "100 + 1n Hyperion", v.P_LocationID[playerID], Foes))
        # (Line 689) KillUnitAt(All, "120 + 1n Archon", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "100 + 1n Dragoon", v.P_LocationID[playerID], Foes))
        # (Line 690) KillUnitAt(All, "130 + 1n Norad", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "120 + 1n Archon", v.P_LocationID[playerID], Foes))
        # (Line 691) KillUnitAt(All, "130 + 1n Arbiter", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "130 + 1n Norad", v.P_LocationID[playerID], Foes))
        # (Line 692) KillUnitAt(All, "40 + 1n Marine", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "130 + 1n Arbiter", v.P_LocationID[playerID], Foes))
        # (Line 693) KillUnitAt(All, "40 + 1n Ghost", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "40 + 1n Marine", v.P_LocationID[playerID], Foes))
        # (Line 694) KillUnitAt(All, "80 + 1n Vulture", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "40 + 1n Ghost", v.P_LocationID[playerID], Foes))
        # (Line 695) KillUnitAt(All, "40 + 1n Goliath", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "80 + 1n Vulture", v.P_LocationID[playerID], Foes))
        # (Line 696) KillUnitAt(All, "40 + 1n Wraith", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "40 + 1n Goliath", v.P_LocationID[playerID], Foes))
        # (Line 697) KillUnitAt(All, "40 + 1n Firebat", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "40 + 1n Wraith", v.P_LocationID[playerID], Foes))
        # (Line 698) KillUnitAt(All, "40 + 1n Zergling", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "40 + 1n Firebat", v.P_LocationID[playerID], Foes))
        # (Line 699) KillUnitAt(All, " Creep. Licht", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "40 + 1n Zergling", v.P_LocationID[playerID], Foes))
        # (Line 700) KillUnitAt(All, "40 + 1n Drone", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, " Creep. Licht", v.P_LocationID[playerID], Foes))
        # (Line 701) KillUnitAt(All, "40 + 1n Mutalisk", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "40 + 1n Drone", v.P_LocationID[playerID], Foes))
        # (Line 702) KillUnitAt(All, "40 + 1n Guardian", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "40 + 1n Mutalisk", v.P_LocationID[playerID], Foes))
        # (Line 703) KillUnitAt(All, "60 + 1n High Templar", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "40 + 1n Guardian", v.P_LocationID[playerID], Foes))
        # (Line 704) KillUnitAt(All, "40 + 3n Zeratul", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "60 + 1n High Templar", v.P_LocationID[playerID], Foes))
        # (Line 705) KillUnitAt(All, "40 + 1n Mojo", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "40 + 3n Zeratul", v.P_LocationID[playerID], Foes))
        # (Line 706) KillUnitAt(All, "40 + 1n Gantrithor", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "40 + 1n Mojo", v.P_LocationID[playerID], Foes))
        # (Line 707) KillUnitAt(All, "40 + 1n Lurker", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "40 + 1n Gantrithor", v.P_LocationID[playerID], Foes))
        # (Line 708) KillUnitAt(All, "50 + 1n Tank", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "40 + 1n Lurker", v.P_LocationID[playerID], Foes))
        # (Line 709) KillUnitAt(All, "50 + 1n Battlecruiser", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "50 + 1n Tank", v.P_LocationID[playerID], Foes))
        # (Line 710) KillUnitAt(All, "60 + 3n Siege", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", v.P_LocationID[playerID], Foes))
        # (Line 711) KillUnitAt(All, "60 + 1n Siege", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "60 + 3n Siege", v.P_LocationID[playerID], Foes))
        # (Line 712) KillUnitAt(All, "60 + 1n Hydralisk", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "60 + 1n Siege", v.P_LocationID[playerID], Foes))
        # (Line 713) KillUnitAt(All, "60 + 1n Dragoon", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "60 + 1n Hydralisk", v.P_LocationID[playerID], Foes))
        # (Line 714) KillUnitAt(All, "60 + 1n High Templar", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "60 + 1n Dragoon", v.P_LocationID[playerID], Foes))
        # (Line 715) KillUnitAt(All, "60 + 1n Archon", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "60 + 1n High Templar", v.P_LocationID[playerID], Foes))
        # (Line 716) KillUnitAt(All, "60 + 1n Danimoth", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "60 + 1n Archon", v.P_LocationID[playerID], Foes))
        # (Line 717) KillUnitAt(All, "60 + 3n Ghost", v.P_LocationID[playerID], Foes);
        DoActions(KillUnitAt(All, "60 + 1n Danimoth", v.P_LocationID[playerID], Foes))
        # (Line 718) }
        DoActions(KillUnitAt(All, "60 + 3n Ghost", v.P_LocationID[playerID], Foes))
        # (Line 719) else
        # (Line 720) {
    if EUDElse()():
        # (Line 721) if (Switch("UiltimateSwitch", Cleared))
        if EUDIf()(Switch("UiltimateSwitch", Cleared)):
            # (Line 722) {
            # (Line 723) KillUnitAt(All, "80 + 1n Goliath", v.P_LocationID[playerID], Foes);
            # (Line 724) KillUnitAt(All, "80 + 1n Vulture", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "80 + 1n Goliath", v.P_LocationID[playerID], Foes))
            # (Line 725) KillUnitAt(All, "80 + 1n Marine", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "80 + 1n Vulture", v.P_LocationID[playerID], Foes))
            # (Line 726) KillUnitAt(All, "80 + 1n Tom Kazansky", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "80 + 1n Marine", v.P_LocationID[playerID], Foes))
            # (Line 727) KillUnitAt(All, "80 + 1n Tank", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "80 + 1n Tom Kazansky", v.P_LocationID[playerID], Foes))
            # (Line 728) KillUnitAt(All, "80 + 1n Mutalisk", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "80 + 1n Tank", v.P_LocationID[playerID], Foes))
            # (Line 729) KillUnitAt(All, "80 + 1n Guardian", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "80 + 1n Mutalisk", v.P_LocationID[playerID], Foes))
            # (Line 730) KillUnitAt(All, "80 + 1n Artanis", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "80 + 1n Guardian", v.P_LocationID[playerID], Foes))
            # (Line 731) KillUnitAt(All, "80 + 1n Ghost", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "80 + 1n Artanis", v.P_LocationID[playerID], Foes))
            # (Line 732) KillUnitAt(All, "100 + 1n Hyperion", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "80 + 1n Ghost", v.P_LocationID[playerID], Foes))
            # (Line 733) KillUnitAt(All, "100 + 1n Dragoon", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "100 + 1n Hyperion", v.P_LocationID[playerID], Foes))
            # (Line 734) KillUnitAt(All, "120 + 1n Archon", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "100 + 1n Dragoon", v.P_LocationID[playerID], Foes))
            # (Line 735) KillUnitAt(All, "130 + 1n Norad", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "120 + 1n Archon", v.P_LocationID[playerID], Foes))
            # (Line 736) KillUnitAt(All, "130 + 1n Arbiter", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "130 + 1n Norad", v.P_LocationID[playerID], Foes))
            # (Line 737) KillUnitAt(All, "40 + 1n Marine", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "130 + 1n Arbiter", v.P_LocationID[playerID], Foes))
            # (Line 738) KillUnitAt(All, "40 + 1n Ghost", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "40 + 1n Marine", v.P_LocationID[playerID], Foes))
            # (Line 739) KillUnitAt(All, "80 + 1n Vulture", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "40 + 1n Ghost", v.P_LocationID[playerID], Foes))
            # (Line 740) KillUnitAt(All, "40 + 1n Goliath", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "80 + 1n Vulture", v.P_LocationID[playerID], Foes))
            # (Line 741) KillUnitAt(All, "40 + 1n Wraith", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "40 + 1n Goliath", v.P_LocationID[playerID], Foes))
            # (Line 742) KillUnitAt(All, "40 + 1n Firebat", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "40 + 1n Wraith", v.P_LocationID[playerID], Foes))
            # (Line 743) KillUnitAt(All, "40 + 1n Zergling", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "40 + 1n Firebat", v.P_LocationID[playerID], Foes))
            # (Line 744) KillUnitAt(All, " Creep. Licht", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "40 + 1n Zergling", v.P_LocationID[playerID], Foes))
            # (Line 745) KillUnitAt(All, "40 + 1n Drone", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, " Creep. Licht", v.P_LocationID[playerID], Foes))
            # (Line 746) KillUnitAt(All, "40 + 1n Mutalisk", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "40 + 1n Drone", v.P_LocationID[playerID], Foes))
            # (Line 747) KillUnitAt(All, "40 + 1n Guardian", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "40 + 1n Mutalisk", v.P_LocationID[playerID], Foes))
            # (Line 748) KillUnitAt(All, "60 + 1n High Templar", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "40 + 1n Guardian", v.P_LocationID[playerID], Foes))
            # (Line 749) KillUnitAt(All, "40 + 3n Zeratul", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "60 + 1n High Templar", v.P_LocationID[playerID], Foes))
            # (Line 750) KillUnitAt(All, "40 + 1n Mojo", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "40 + 3n Zeratul", v.P_LocationID[playerID], Foes))
            # (Line 751) KillUnitAt(All, "40 + 1n Gantrithor", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "40 + 1n Mojo", v.P_LocationID[playerID], Foes))
            # (Line 752) KillUnitAt(All, "40 + 1n Lurker", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "40 + 1n Gantrithor", v.P_LocationID[playerID], Foes))
            # (Line 753) KillUnitAt(All, "50 + 1n Tank", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "40 + 1n Lurker", v.P_LocationID[playerID], Foes))
            # (Line 754) KillUnitAt(All, "50 + 1n Battlecruiser", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "50 + 1n Tank", v.P_LocationID[playerID], Foes))
            # (Line 755) KillUnitAt(All, "60 + 3n Siege", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", v.P_LocationID[playerID], Foes))
            # (Line 756) KillUnitAt(All, "60 + 1n Siege", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "60 + 3n Siege", v.P_LocationID[playerID], Foes))
            # (Line 757) KillUnitAt(All, "60 + 1n Hydralisk", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "60 + 1n Siege", v.P_LocationID[playerID], Foes))
            # (Line 758) KillUnitAt(All, "60 + 1n Dragoon", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "60 + 1n Hydralisk", v.P_LocationID[playerID], Foes))
            # (Line 759) KillUnitAt(All, "60 + 1n High Templar", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "60 + 1n Dragoon", v.P_LocationID[playerID], Foes))
            # (Line 760) KillUnitAt(All, "60 + 1n Archon", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "60 + 1n High Templar", v.P_LocationID[playerID], Foes))
            # (Line 761) KillUnitAt(All, "60 + 1n Danimoth", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "60 + 1n Archon", v.P_LocationID[playerID], Foes))
            # (Line 762) KillUnitAt(All, "60 + 3n Ghost", v.P_LocationID[playerID], Foes);
            DoActions(KillUnitAt(All, "60 + 1n Danimoth", v.P_LocationID[playerID], Foes))
            # (Line 763) }
            DoActions(KillUnitAt(All, "60 + 3n Ghost", v.P_LocationID[playerID], Foes))
            # (Line 764) }
        EUDEndIf()
        # (Line 765) }
    EUDEndIf()
