## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 13) function Buff_ShieldFix(amount : TrgCount)
# (Line 14) {
@EUDTypedFunc([TrgCount])
def Buff_ShieldFix(amount):
    # (Line 15) var playerID = getcurpl();
    playerID = EUDVariable()
    playerID << (f_getcurpl())
    # (Line 16) v.P_Shield[playerID] = 1;
    _ARRW(v.P_Shield, playerID) << (1)
    # (Line 17) ModifyUnitShields(1, v.P_UnitID[playerID], playerID, "Anywhere", amount);
    # (Line 18) }
    DoActions(ModifyUnitShields(1, v.P_UnitID[playerID], playerID, "Anywhere", amount))
    # (Line 26) function Debuff_Slow()

# (Line 27) {
@EUDFunc
def Debuff_Slow():
    # (Line 28) var playerID = getcurpl();
    playerID = EUDVariable()
    playerID << (f_getcurpl())
    # (Line 29) MoveLocation(v.P_HoldLocation[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
    # (Line 30) CreateUnit(1, "Zerg Devourer", "[Skill]Unit_Wait_8", playerID);
    DoActions(MoveLocation(v.P_HoldLocation[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
    # (Line 31) SetInvincibility(Enable, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL");
    DoActions(CreateUnit(1, "Zerg Devourer", "[Skill]Unit_Wait_8", playerID))
    # (Line 32) MoveUnit(1, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL", v.P_HoldLocation[playerID]);
    DoActions(SetInvincibility(Enable, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL"))
    # (Line 33) RemoveUnitAt(1, "Zerg Devourer", "Anywhere", playerID);
    DoActions(MoveUnit(1, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL", v.P_HoldLocation[playerID]))
    # (Line 34) }
    DoActions(RemoveUnitAt(1, "Zerg Devourer", "Anywhere", playerID))
    # (Line 42) function Debuff_Stop()

# (Line 43) {
@EUDFunc
def Debuff_Stop():
    # (Line 44) var playerID = getcurpl();
    playerID = EUDVariable()
    playerID << (f_getcurpl())
    # (Line 45) Debuff_Slow();
    Debuff_Slow()
    # (Line 46) Order(v.P_UnitID[playerID], playerID, "Anywhere", Move, v.P_HoldLocation[playerID]);
    # (Line 47) }
    DoActions(Order(v.P_UnitID[playerID], playerID, "Anywhere", Move, v.P_HoldLocation[playerID]))
    # (Line 55) function Debuff_BanReturn()

# (Line 56) {
@EUDFunc
def Debuff_BanReturn():
    # (Line 57) KillUnit("Protoss Observer", getcurpl());
    # (Line 58) }
    DoActions(KillUnit("Protoss Observer", f_getcurpl()))
    # (Line 70) function ComputerAlly(state : TrgCount)

# (Line 71) {
@EUDTypedFunc([TrgCount])
def ComputerAlly(state):
    # (Line 72) var playerID = getcurpl();
    playerID = EUDVariable()
    playerID << (f_getcurpl())
    # (Line 74) if (state == 0)
    if EUDIf()(state == 0):
        # (Line 75) {
        # (Line 76) if (playerID < 3) 	SetAllianceStatus(P8, Enemy);
        if EUDIf()(playerID >= 3, neg=True):
            # (Line 77) else 			SetAllianceStatus(P7, Enemy);
            DoActions(SetAllianceStatus(P8, Enemy))
        if EUDElse()():
            # (Line 78) }
            DoActions(SetAllianceStatus(P7, Enemy))
        EUDEndIf()
        # (Line 79) else if 	(state == 1)	{ SetAllianceStatus(P7, Ally); SetAllianceStatus(P8, Ally); }
    if EUDElseIf()(state == 1):
        DoActions(SetAllianceStatus(P7, Ally))
        DoActions(SetAllianceStatus(P8, Ally))
        # (Line 80) }
    EUDEndIf()
    # (Line 91) function Main_Wait(wait : TrgCount)

# (Line 92) {
@EUDTypedFunc([TrgCount])
def Main_Wait(wait):
    # (Line 93) v.P_WaitMain[getcurpl()] = wait / 83 + 1;
    _ARRW(v.P_WaitMain, f_getcurpl()) << (wait // 83 + 1)
    # (Line 94) }
    # (Line 105) function Sub1_Wait(wait : TrgCount)

# (Line 106) {
@EUDTypedFunc([TrgCount])
def Sub1_Wait(wait):
    # (Line 107) v.P_WaitSub1[getcurpl()] = wait / 83 + 1;
    _ARRW(v.P_WaitSub1, f_getcurpl()) << (wait // 83 + 1)
    # (Line 108) }
    # (Line 119) function Sub2_Wait(wait : TrgCount)

# (Line 120) {
@EUDTypedFunc([TrgCount])
def Sub2_Wait(wait):
    # (Line 121) v.P_WaitSub2[getcurpl()] = wait / 83 + 1;
    _ARRW(v.P_WaitSub2, f_getcurpl()) << (wait // 83 + 1)
    # (Line 122) }
    # (Line 130) function SkillEnd()

# (Line 131) {
@EUDFunc
def SkillEnd():
    # (Line 132) var playerID = getcurpl();
    playerID = EUDVariable()
    playerID << (f_getcurpl())
    # (Line 134) v.P_CountMain[playerID] = 999;
    _ARRW(v.P_CountMain, playerID) << (999)
    # (Line 136) if (v.P_Ally[playerID] == 1)
    if EUDIf()(v.P_Ally[playerID] == 1):
        # (Line 137) {
        # (Line 138) SetSwitch("ComputerAlliy", Clear);
        # (Line 139) if (playerID < 3) 			{ SetAllianceStatus(P8, Enemy); }
        DoActions(SetSwitch("ComputerAlliy", Clear))
        if EUDIf()(playerID >= 3, neg=True):
            DoActions(SetAllianceStatus(P8, Enemy))
            # (Line 140) else if (playerID >= 3)	{ SetAllianceStatus(P7, Enemy); }
        if EUDElseIf()(playerID >= 3):
            DoActions(SetAllianceStatus(P7, Enemy))
            # (Line 141) v.P_Ally[playerID] = 0;
        EUDEndIf()
        _ARRW(v.P_Ally, playerID) << (0)
        # (Line 142) }
        # (Line 143) }
    EUDEndIf()
    # (Line 151) function Main_WaitLoop()

# (Line 152) {
@EUDFunc
def Main_WaitLoop():
    # (Line 153) var playerID = getcurpl();
    playerID = EUDVariable()
    playerID << (f_getcurpl())
    # (Line 156) if 		(v.P_WaitMain[playerID] >= 1) { v.P_WaitMain[playerID] -= 1; }
    if EUDIf()(v.P_WaitMain[playerID] >= 1):
        _ARRW(v.P_WaitMain, playerID).__isub__(1)
        # (Line 158) if 		(v.P_WaitSub1[playerID] >= 1) { v.P_WaitSub1[playerID] -= 1; }
    EUDEndIf()
    if EUDIf()(v.P_WaitSub1[playerID] >= 1):
        _ARRW(v.P_WaitSub1, playerID).__isub__(1)
        # (Line 159) if 		(v.P_WaitSub2[playerID] >= 1) { v.P_WaitSub2[playerID] -= 1; }
    EUDEndIf()
    if EUDIf()(v.P_WaitSub2[playerID] >= 1):
        _ARRW(v.P_WaitSub2, playerID).__isub__(1)
        # (Line 162) if 		(v.P_SkillDelay[playerID] >= 2)
    EUDEndIf()
    if EUDIf()(v.P_SkillDelay[playerID] >= 2):
        # (Line 163) { v.P_SkillDelay[playerID] -= 1; }
        _ARRW(v.P_SkillDelay, playerID).__isub__(1)
        # (Line 164) else if 	(v.P_SkillDelay[playerID] == 1)
    if EUDElseIf()(v.P_SkillDelay[playerID] == 1):
        # (Line 165) {
        # (Line 166) v.P_SkillDelay[playerID] = 0;
        _ARRW(v.P_SkillDelay, playerID) << (0)
        # (Line 167) v.P_Step[playerID] = 0;
        _ARRW(v.P_Step, playerID) << (0)
        # (Line 168) v.P_Shield[playerID] = 0;
        _ARRW(v.P_Shield, playerID) << (0)
        # (Line 169) ModifyUnitShields(1, v.P_UnitID[playerID], playerID, "Anywhere", 0);
        # (Line 170) }
        DoActions(ModifyUnitShields(1, v.P_UnitID[playerID], playerID, "Anywhere", 0))
        # (Line 172) if (v.P_WaitMain[playerID] == 0)
    EUDEndIf()
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 173) {
        # (Line 174) if 		(v.P_CountMain[playerID] == 999) 	{ Main_Wait(500); v.P_CountMain[playerID] = 1000; }
        if EUDIf()(v.P_CountMain[playerID] == 999):
            Main_Wait(500)
            _ARRW(v.P_CountMain, playerID) << (1000)
            # (Line 175) else if 	(v.P_CountMain[playerID] == 1000) 	{ v.P_CountMain[playerID] = 0; v.P_LoopMain[playerID] = 0; v.P_SkillDelay[playerID] = 12; }
        if EUDElseIf()(v.P_CountMain[playerID] == 1000):
            _ARRW(v.P_CountMain, playerID) << (0)
            _ARRW(v.P_LoopMain, playerID) << (0)
            _ARRW(v.P_SkillDelay, playerID) << (12)
            # (Line 176) }
        EUDEndIf()
        # (Line 177) }
    EUDEndIf()
    # (Line 192) function Table_Cos(playerID : TrgPlayer, degree, distance)

# (Line 193) {
@EUDTypedFunc([TrgPlayer, None, None])
def Table_Cos(playerID, degree, distance):
    # (Line 194) degree = degree % 360;
    degree << (degree % 360)
    # (Line 195) v.P_AngleCos[playerID] = v.P_Table_Cos[degree];
    _ARRW(v.P_AngleCos, playerID) << (v.P_Table_Cos[degree])
    # (Line 197) if (v.P_AngleCos[playerID] > 2147483648)
    if EUDIf()(v.P_AngleCos[playerID] <= 2147483648, neg=True):
        # (Line 198) {
        # (Line 199) v.P_AngleCos[playerID] = -v.P_AngleCos[playerID];
        _ARRW(v.P_AngleCos, playerID) << (-v.P_AngleCos[playerID])
        # (Line 200) v.P_AngleCos[playerID] = (v.P_AngleCos[playerID] * distance) / 100;
        _ARRW(v.P_AngleCos, playerID) << ((v.P_AngleCos[playerID] * distance) // 100)
        # (Line 201) v.P_AngleCos[playerID] = -v.P_AngleCos[playerID];
        _ARRW(v.P_AngleCos, playerID) << (-v.P_AngleCos[playerID])
        # (Line 202) }
        # (Line 203) else
        # (Line 204) { v.P_AngleCos[playerID] = (v.P_AngleCos[playerID] * distance) / 100; }
    if EUDElse()():
        _ARRW(v.P_AngleCos, playerID) << ((v.P_AngleCos[playerID] * distance) // 100)
        # (Line 205) }
    EUDEndIf()
    # (Line 220) function Table_Sin(playerID : TrgPlayer, degree, distance)

# (Line 221) {
@EUDTypedFunc([TrgPlayer, None, None])
def Table_Sin(playerID, degree, distance):
    # (Line 222) degree = degree % 360;
    degree << (degree % 360)
    # (Line 223) v.P_AngleSin[playerID] = v.P_Table_Sin[degree];
    _ARRW(v.P_AngleSin, playerID) << (v.P_Table_Sin[degree])
    # (Line 225) if (v.P_AngleSin[playerID] > 2147483648)
    if EUDIf()(v.P_AngleSin[playerID] <= 2147483648, neg=True):
        # (Line 226) {
        # (Line 227) v.P_AngleSin[playerID] = -v.P_AngleSin[playerID];
        _ARRW(v.P_AngleSin, playerID) << (-v.P_AngleSin[playerID])
        # (Line 228) v.P_AngleSin[playerID] = (v.P_AngleSin[playerID] * distance) / 100;
        _ARRW(v.P_AngleSin, playerID) << ((v.P_AngleSin[playerID] * distance) // 100)
        # (Line 229) v.P_AngleSin[playerID] = -v.P_AngleSin[playerID];
        _ARRW(v.P_AngleSin, playerID) << (-v.P_AngleSin[playerID])
        # (Line 230) }
        # (Line 231) else
        # (Line 232) { v.P_AngleSin[playerID] = (v.P_AngleSin[playerID] * distance) / 100; }
    if EUDElse()():
        _ARRW(v.P_AngleSin, playerID) << ((v.P_AngleSin[playerID] * distance) // 100)
        # (Line 233) }
    EUDEndIf()
    # (Line 250) function MoveLoc(unit : TrgUnit, playerID : TrgPlayer, pos_x, pos_y)

# (Line 251) {
@EUDTypedFunc([TrgUnit, TrgPlayer, None, None])
def MoveLoc(unit, playerID, pos_x, pos_y):
    # (Line 252) MoveLocation(v.P_LocationID[playerID], unit, playerID, "Anywhere");
    # (Line 253) addloc(v.P_LocationID[playerID], pos_x, pos_y);
    DoActions(MoveLocation(v.P_LocationID[playerID], unit, playerID, "Anywhere"))
    f_addloc(v.P_LocationID[playerID], pos_x, pos_y)
    # (Line 254) }
    # (Line 269) function SkillUnit(playerID : TrgPlayer, count, unit : TrgUnit)

# (Line 270) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit])
def SkillUnit(playerID, count, unit):
    # (Line 271) CreateUnit(count, unit, dwrand() % 8 + 33, playerID);
    # (Line 272) SetInvincibility(Enable, unit, playerID, "Anywhere");
    DoActions(CreateUnit(count, unit, f_dwrand() % 8 + 33, playerID))
    # (Line 273) MoveUnit(count, unit, playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
    DoActions(SetInvincibility(Enable, unit, playerID, "Anywhere"))
    # (Line 274) }
    DoActions(MoveUnit(count, unit, playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
    # (Line 293) function Shape_Dot(playerID : TrgPlayer, count, unit : TrgUnit, pos_x, pos_y)

# (Line 294) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def Shape_Dot(playerID, count, unit, pos_x, pos_y):
    # (Line 295) MoveLoc(v.P_UnitID[playerID], playerID, pos_x, pos_y);
    MoveLoc(v.P_UnitID[playerID], playerID, pos_x, pos_y)
    # (Line 296) SkillUnit(playerID, count, unit);
    SkillUnit(playerID, count, unit)
    # (Line 297) }
    # (Line 317) function Shape_Double(playerID : TrgPlayer, count, unit : TrgUnit, pos_x, pos_y)

# (Line 318) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def Shape_Double(playerID, count, unit, pos_x, pos_y):
    # (Line 319) Shape_Dot(playerID, count, unit, pos_x, pos_y);
    Shape_Dot(playerID, count, unit, pos_x, pos_y)
    # (Line 320) Shape_Dot(playerID, count, unit, -pos_x, -pos_y);
    Shape_Dot(playerID, count, unit, -pos_x, -pos_y)
    # (Line 321) }
    # (Line 342) function Shape_Square(playerID : TrgPlayer, count, unit : TrgUnit, pos_x, pos_y)

# (Line 343) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def Shape_Square(playerID, count, unit, pos_x, pos_y):
    # (Line 344) if (pos_x == 0 && pos_y == 0)
    if EUDIf()(EUDSCAnd()(pos_x == 0)(pos_y == 0)()):
        # (Line 345) {
        # (Line 346) Shape_Dot(playerID, count, unit, pos_x, pos_y);
        Shape_Dot(playerID, count, unit, pos_x, pos_y)
        # (Line 347) }
        # (Line 348) else
        # (Line 349) {
    if EUDElse()():
        # (Line 350) MoveLoc(v.P_UnitID[playerID], playerID, pos_x, pos_y);
        MoveLoc(v.P_UnitID[playerID], playerID, pos_x, pos_y)
        # (Line 351) SkillUnit(playerID, count, unit);
        SkillUnit(playerID, count, unit)
        # (Line 352) MoveLoc(v.P_UnitID[playerID], playerID, -pos_y, pos_x);
        MoveLoc(v.P_UnitID[playerID], playerID, -pos_y, pos_x)
        # (Line 353) SkillUnit(playerID, count, unit);
        SkillUnit(playerID, count, unit)
        # (Line 354) MoveLoc(v.P_UnitID[playerID], playerID, -pos_x, -pos_y);
        MoveLoc(v.P_UnitID[playerID], playerID, -pos_x, -pos_y)
        # (Line 355) SkillUnit(playerID, count, unit);
        SkillUnit(playerID, count, unit)
        # (Line 356) MoveLoc(v.P_UnitID[playerID], playerID, pos_y, -pos_x);
        MoveLoc(v.P_UnitID[playerID], playerID, pos_y, -pos_x)
        # (Line 357) SkillUnit(playerID, count, unit);
        SkillUnit(playerID, count, unit)
        # (Line 358) }
        # (Line 359) }
    EUDEndIf()
    # (Line 379) function Shape_NxNSquare(playerID : TrgPlayer, count, unit : TrgUnit, size, interval)

# (Line 380) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def Shape_NxNSquare(playerID, count, unit, size, interval):
    # (Line 381) var loop = (size * size) / 4;
    loop = EUDVariable()
    loop << ((size * size) // 4)
    # (Line 382) var space = interval / 2;
    space = EUDVariable()
    space << (interval // 2)
    # (Line 383) var dis_x, dis_y;
    dis_x, dis_y = EUDCreateVariables(2)
    # (Line 385) if (size == 1)
    if EUDIf()(size == 1):
        # (Line 386) {
        # (Line 387) Shape_Dot(playerID, count, unit, 0, 0);
        Shape_Dot(playerID, count, unit, 0, 0)
        # (Line 388) }
        # (Line 389) else if (size > 1)
    if EUDElseIf()(size <= 1, neg=True):
        # (Line 390) {
        # (Line 391) foreach(idx : EUDLoopRange(loop))
        for idx in EUDLoopRange(loop):
            # (Line 392) {
            # (Line 393) if (size % 2 == 0)
            if EUDIf()(size % 2 == 0):
                # (Line 394) {
                # (Line 395) dis_x = idx % (size / 2) + 1;
                dis_x << (idx % (size // 2) + 1)
                # (Line 396) dis_y = idx / (size / 2) + 1;
                dis_y << (idx // (size // 2) + 1)
                # (Line 397) if (dis_x == 1)
                if EUDIf()(dis_x == 1):
                    # (Line 398) { Shape_Square(playerID, count, unit, space, dis_y * interval - space); }
                    Shape_Square(playerID, count, unit, space, dis_y * interval - space)
                    # (Line 399) else if (dis_y == 1)
                if EUDElseIf()(dis_y == 1):
                    # (Line 400) { Shape_Square(playerID, count, unit, dis_x * interval - space, space); }
                    Shape_Square(playerID, count, unit, dis_x * interval - space, space)
                    # (Line 401) else
                    # (Line 402) { Shape_Square(playerID, count, unit, dis_x * interval - space, dis_y * interval - space); }
                if EUDElse()():
                    Shape_Square(playerID, count, unit, dis_x * interval - space, dis_y * interval - space)
                    # (Line 403) }
                EUDEndIf()
                # (Line 404) else if (size % 2 == 1)
            if EUDElseIf()(size % 2 == 1):
                # (Line 405) {
                # (Line 406) dis_x = idx % (size / 2);
                dis_x << (idx % (size // 2))
                # (Line 407) dis_y = idx / (size / 2);
                dis_y << (idx // (size // 2))
                # (Line 409) if (idx == 0)
                if EUDIf()(idx == 0):
                    # (Line 410) { Shape_Dot(playerID, count, unit, 0, 0); }
                    Shape_Dot(playerID, count, unit, 0, 0)
                    # (Line 411) else if (dis_y == 0)
                if EUDElseIf()(dis_y == 0):
                    # (Line 412) { Shape_Square(playerID, count, unit, dis_x * interval, 0); }
                    Shape_Square(playerID, count, unit, dis_x * interval, 0)
                    # (Line 413) else
                    # (Line 414) { Shape_Square(playerID, count, unit, dis_x * interval + interval, dis_y * interval); }
                if EUDElse()():
                    Shape_Square(playerID, count, unit, dis_x * interval + interval, dis_y * interval)
                    # (Line 416) if (idx == loop - 1)
                EUDEndIf()
                if EUDIf()(idx == loop - 1):
                    # (Line 417) { Shape_Square(playerID, count, unit, (size / 2) * interval, 0); }
                    Shape_Square(playerID, count, unit, (size // 2) * interval, 0)
                    # (Line 418) }
                EUDEndIf()
                # (Line 419) }
            EUDEndIf()
            # (Line 420) }

        # (Line 421) }
    EUDEndIf()
    # (Line 445) function Shape_Line(playerID : TrgPlayer, count, unit : TrgUnit, degree, size, interval, distance)

# (Line 446) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None])
def Shape_Line(playerID, count, unit, degree, size, interval, distance):
    # (Line 447) Table_Sin(playerID, degree + 90, distance);
    Table_Sin(playerID, degree + 90, distance)
    # (Line 448) Table_Cos(playerID, degree + 90, distance);
    Table_Cos(playerID, degree + 90, distance)
    # (Line 450) var initial_x = v.P_AngleCos[playerID];
    initial_x = EUDVariable()
    initial_x << (v.P_AngleCos[playerID])
    # (Line 451) var initial_y = v.P_AngleSin[playerID];
    initial_y = EUDVariable()
    initial_y << (v.P_AngleSin[playerID])
    # (Line 453) if (size % 2 == 0)
    if EUDIf()(size % 2 == 0):
        # (Line 454) { Table_Sin(playerID, degree, interval * (size / 2) - interval / 2); Table_Cos(playerID, degree, interval * (size / 2) - interval / 2); }
        Table_Sin(playerID, degree, interval * (size // 2) - interval // 2)
        Table_Cos(playerID, degree, interval * (size // 2) - interval // 2)
        # (Line 455) else
        # (Line 456) { Table_Sin(playerID, degree, interval * (size / 2)); Table_Cos(playerID, degree, interval * (size / 2)); }
    if EUDElse()():
        Table_Sin(playerID, degree, interval * (size // 2))
        Table_Cos(playerID, degree, interval * (size // 2))
        # (Line 458) initial_x = initial_x + v.P_AngleCos[playerID];
    EUDEndIf()
    initial_x << (initial_x + v.P_AngleCos[playerID])
    # (Line 459) initial_y = initial_y + v.P_AngleSin[playerID];
    initial_y << (initial_y + v.P_AngleSin[playerID])
    # (Line 461) Table_Sin(playerID, degree, interval);
    Table_Sin(playerID, degree, interval)
    # (Line 462) Table_Cos(playerID, degree, interval);
    Table_Cos(playerID, degree, interval)
    # (Line 464) if (size == 1)
    if EUDIf()(size == 1):
        # (Line 465) { Shape_Dot(playerID, count, unit, 0, 0); }
        Shape_Dot(playerID, count, unit, 0, 0)
        # (Line 466) else if (size > 1)
    if EUDElseIf()(size <= 1, neg=True):
        # (Line 467) { foreach(idx : EUDLoopRange(size)) { Shape_Dot(playerID, count, unit, initial_x - idx * v.P_AngleCos[playerID], initial_y - idx * v.P_AngleSin[playerID]); } }
        for idx in EUDLoopRange(size):
            Shape_Dot(playerID, count, unit, initial_x - idx * v.P_AngleCos[playerID], initial_y - idx * v.P_AngleSin[playerID])

        # (Line 468) }
    EUDEndIf()
    # (Line 490) function Shape_Cross(playerID : TrgPlayer, count, unit : TrgUnit, degree, size, interval)

# (Line 491) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None])
def Shape_Cross(playerID, count, unit, degree, size, interval):
    # (Line 492) var distance = interval / 2;
    distance = EUDVariable()
    distance << (interval // 2)
    # (Line 494) Table_Sin(playerID, degree, distance);
    Table_Sin(playerID, degree, distance)
    # (Line 495) Table_Cos(playerID, degree, distance);
    Table_Cos(playerID, degree, distance)
    # (Line 497) var gradient_x = v.P_AngleCos[playerID] / 2;
    gradient_x = EUDVariable()
    gradient_x << (v.P_AngleCos[playerID] // 2)
    # (Line 498) var gradient_y = v.P_AngleSin[playerID] / 2;
    gradient_y = EUDVariable()
    gradient_y << (v.P_AngleSin[playerID] // 2)
    # (Line 500) var angle_x, angle_y;
    angle_x, angle_y = EUDCreateVariables(2)
    # (Line 502) Table_Sin(playerID, degree, interval);
    Table_Sin(playerID, degree, interval)
    # (Line 503) Table_Cos(playerID, degree, interval);
    Table_Cos(playerID, degree, interval)
    # (Line 505) if (size == 1)
    if EUDIf()(size == 1):
        # (Line 506) {
        # (Line 507) Shape_Dot(playerID, count, unit, 0, 0);
        Shape_Dot(playerID, count, unit, 0, 0)
        # (Line 508) }
        # (Line 509) else if (size > 1)
    if EUDElseIf()(size <= 1, neg=True):
        # (Line 510) {
        # (Line 511) foreach(idx : EUDLoopRange(size))
        for idx in EUDLoopRange(size):
            # (Line 512) {
            # (Line 513) angle_x = v.P_AngleCos[playerID] * idx;
            angle_x << (v.P_AngleCos[playerID] * idx)
            # (Line 514) angle_y = v.P_AngleSin[playerID] * idx;
            angle_y << (v.P_AngleSin[playerID] * idx)
            # (Line 516) if (size % 2 == 0 && idx != size / 2)
            if EUDIf()(EUDSCAnd()(size % 2 == 0)(idx == size // 2, neg=True)()):
                # (Line 517) { Shape_Square(playerID, count, unit, angle_x + gradient_x, angle_y + gradient_y); }
                Shape_Square(playerID, count, unit, angle_x + gradient_x, angle_y + gradient_y)
                # (Line 518) else if (size % 2 == 1)
            if EUDElseIf()(size % 2 == 1):
                # (Line 519) {
                # (Line 520) if (idx == 0)
                if EUDIf()(idx == 0):
                    # (Line 521) { Shape_Dot(playerID, count, unit, 0, 0); }
                    Shape_Dot(playerID, count, unit, 0, 0)
                    # (Line 522) else
                    # (Line 523) { Shape_Square(playerID, count, unit, angle_x, angle_y); }
                if EUDElse()():
                    Shape_Square(playerID, count, unit, angle_x, angle_y)
                    # (Line 524) }
                EUDEndIf()
                # (Line 525) }
            EUDEndIf()
            # (Line 526) }

        # (Line 527) }
    EUDEndIf()
    # (Line 549) function Shape_Edge(playerID : TrgPlayer, count, unit : TrgUnit, degree, size, interval)

# (Line 550) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None])
def Shape_Edge(playerID, count, unit, degree, size, interval):
    # (Line 551) Table_Sin(playerID, degree, interval * 14 / 10);
    Table_Sin(playerID, degree, interval * 14 // 10)
    # (Line 552) Table_Cos(playerID, degree, interval * 14 / 10);
    Table_Cos(playerID, degree, interval * 14 // 10)
    # (Line 554) var x_o = v.P_AngleCos[playerID];
    x_o = EUDVariable()
    x_o << (v.P_AngleCos[playerID])
    # (Line 555) var y_o = v.P_AngleSin[playerID];
    y_o = EUDVariable()
    y_o << (v.P_AngleSin[playerID])
    # (Line 557) var distance = (interval * 2) / (size - 1);
    distance = EUDVariable()
    distance << ((interval * 2) // (size - 1))
    # (Line 559) Table_Sin(playerID, degree + 45, distance);
    Table_Sin(playerID, degree + 45, distance)
    # (Line 560) Table_Cos(playerID, degree + 45, distance);
    Table_Cos(playerID, degree + 45, distance)
    # (Line 562) var distance_x = v.P_AngleCos[playerID];
    distance_x = EUDVariable()
    distance_x << (v.P_AngleCos[playerID])
    # (Line 563) var distance_y = v.P_AngleSin[playerID];
    distance_y = EUDVariable()
    distance_y << (v.P_AngleSin[playerID])
    # (Line 565) if (size == 1)
    if EUDIf()(size == 1):
        # (Line 566) { Shape_Dot(playerID, 1, unit, 0, 0); }
        Shape_Dot(playerID, 1, unit, 0, 0)
        # (Line 567) else if (size > 1)
    if EUDElseIf()(size <= 1, neg=True):
        # (Line 568) { foreach(idx : EUDLoopRange(size - 1)) { Shape_Square(playerID, 1, unit, x_o - (distance_x * idx), y_o - (distance_y * idx)); } }
        for idx in EUDLoopRange(size - 1):
            Shape_Square(playerID, 1, unit, x_o - (distance_x * idx), y_o - (distance_y * idx))

        # (Line 569) }
    EUDEndIf()
