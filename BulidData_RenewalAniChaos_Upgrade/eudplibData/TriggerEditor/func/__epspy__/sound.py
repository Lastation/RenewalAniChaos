## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 4) import character.group1.rusaruka.text as rusaruka;
from character.group1.rusaruka import text as rusaruka
# (Line 5) import character.group1.chtholly.text as chtholly;
from character.group1.chtholly import text as chtholly
# (Line 6) import character.group1.maihime.text as maihime;
from character.group1.maihime import text as maihime
# (Line 7) import character.etc.tenshi as tenshi;
from character.etc import tenshi as tenshi
# (Line 8) import character.etc.miyuki as miyuki;
from character.etc import miyuki as miyuki
# (Line 10) import character.etc.negev as negev;
from character.etc import negev as negev
# (Line 11) import character.etc.cecillia as cecillia;
from character.etc import cecillia as cecillia
# (Line 12) import character.etc.anzu as anzu;
from character.etc import anzu as anzu
# (Line 13) import character.etc.hotomoka as hotomoka;
from character.etc import hotomoka as hotomoka
# (Line 14) import character.etc.alterego as alterego;
from character.etc import alterego as alterego
# (Line 16) import character.etc.ryuzu as ryuzu;
from character.etc import ryuzu as ryuzu
# (Line 18) import character.etc.sakura as sakura;
from character.etc import sakura as sakura
# (Line 19) import character.etc.yashiro as yashiro;
from character.etc import yashiro as yashiro
# (Line 20) import character.etc.rin as rin;
from character.etc import rin as rin
# (Line 22) import character.etc.seraphim as seraphim;
from character.etc import seraphim as seraphim
# (Line 24) import character.etc.iwahune as iwahune;
from character.etc import iwahune as iwahune
# (Line 25) import character.etc.mn as mn;
from character.etc import mn as mn
# (Line 26) import character.etc.emetselch as emetselch;
from character.etc import emetselch as emetselch
# (Line 28) import character.etc.magellan as magellan;
from character.etc import magellan as magellan
# (Line 29) import character.group4.yuuna.text as yuuna;
from character.group4.yuuna import text as yuuna
# (Line 30) import character.group4.mayuri.text as mayuri;
from character.group4.mayuri import text as mayuri
# (Line 31) import character.group4.nanami.text as nanami;
from character.group4.nanami import text as nanami
# (Line 32) import character.group4.milim.text as milim;
from character.group4.milim import text as milim
# (Line 34) import character.group5.yume.text as yume;
from character.group5.yume import text as yume
# (Line 35) import character.group5.magane.text as magane;
from character.group5.magane import text as magane
# (Line 36) import character.group5.oda.text as oda;
from character.group5.oda import text as oda
# (Line 37) import character.group5.ekidona.text as ekidona;
from character.group5.ekidona import text as ekidona
# (Line 38) import character.group5.niwa.text as niwa;
from character.group5.niwa import text as niwa
# (Line 40) import character.group6.park.text as park;
from character.group6.park import text as park
# (Line 43) function OldCharacterVoiceNormal()
# (Line 44) {
@EUDFunc
def OldCharacterVoiceNormal():
    # (Line 45) var count;
    count = EUDVariable()
    # (Line 47) if (Deaths(P7, AtLeast, 1, " `SkillText"))
    if EUDIf()(Deaths(P7, AtLeast, 1, " `SkillText")):
        # (Line 48) {
        # (Line 49) count = dwread_epd(EPD(0x58A364 + 48 * 186 + 4 * 7));
        count << (f_dwread_epd(EPD(0x58A364 + 48 * 186 + 4 * 7)))
        # (Line 51) foreach(idx : EUDLoopRange(6))
        for idx in EUDLoopRange(6):
            # (Line 52) {
            # (Line 53) tenshi.P_type[idx] = 1;  		tenshi.P_player[idx] = count; 			tenshi.P_observer[idx] = count;
            _ARRW(tenshi.P_type, idx) << (1)
            _ARRW(tenshi.P_player, idx) << (count)
            _ARRW(tenshi.P_observer, idx) << (count)
            # (Line 54) miyuki.P_type[idx] = 1;  		miyuki.P_player[idx] = count; 		miyuki.P_observer[idx] = count;
            _ARRW(miyuki.P_type, idx) << (1)
            _ARRW(miyuki.P_player, idx) << (count)
            _ARRW(miyuki.P_observer, idx) << (count)
            # (Line 55) negev.P_type[idx] = 1;  		negev.P_player[idx] = count; 			negev.P_observer[idx] = count;
            _ARRW(negev.P_type, idx) << (1)
            _ARRW(negev.P_player, idx) << (count)
            _ARRW(negev.P_observer, idx) << (count)
            # (Line 56) }
            # (Line 57) SetDeaths(6, SetTo, 0, 186);

        # (Line 58) }
        DoActions(SetDeaths(6, SetTo, 0, 186))
        # (Line 59) if (Deaths(P7, AtLeast, 1, " `SkillText2"))
    EUDEndIf()
    if EUDIf()(Deaths(P7, AtLeast, 1, " `SkillText2")):
        # (Line 60) {
        # (Line 61) count = dwread_epd(EPD(0x58A364 + 48 * 174 + 4 * 7));
        count << (f_dwread_epd(EPD(0x58A364 + 48 * 174 + 4 * 7)))
        # (Line 63) foreach(idx : EUDLoopRange(6))
        for idx in EUDLoopRange(6):
            # (Line 64) {
            # (Line 65) cecillia.P_type[idx] = 1;  		cecillia.P_player[idx] = count; 		cecillia.P_observer[idx] = count;
            _ARRW(cecillia.P_type, idx) << (1)
            _ARRW(cecillia.P_player, idx) << (count)
            _ARRW(cecillia.P_observer, idx) << (count)
            # (Line 66) anzu.P_type[idx] = 1; 		anzu.P_player[idx] = count; 			anzu.P_observer[idx] = count;
            _ARRW(anzu.P_type, idx) << (1)
            _ARRW(anzu.P_player, idx) << (count)
            _ARRW(anzu.P_observer, idx) << (count)
            # (Line 67) hotomoka.P_type[idx] = 1;  	hotomoka.P_player[idx] = count; 		hotomoka.P_observer[idx] = count;
            _ARRW(hotomoka.P_type, idx) << (1)
            _ARRW(hotomoka.P_player, idx) << (count)
            _ARRW(hotomoka.P_observer, idx) << (count)
            # (Line 68) alterego.P_type[idx] = 1;  	alterego.P_player[idx] = count; 		alterego.P_observer[idx] = count;
            _ARRW(alterego.P_type, idx) << (1)
            _ARRW(alterego.P_player, idx) << (count)
            _ARRW(alterego.P_observer, idx) << (count)
            # (Line 69) ryuzu.P_type[idx] = 1; 		ryuzu.P_player[idx] = count; 			ryuzu.P_observer[idx] = count;
            _ARRW(ryuzu.P_type, idx) << (1)
            _ARRW(ryuzu.P_player, idx) << (count)
            _ARRW(ryuzu.P_observer, idx) << (count)
            # (Line 71) }
            # (Line 72) SetDeaths(6, SetTo, 0, 174);

        # (Line 73) }
        DoActions(SetDeaths(6, SetTo, 0, 174))
        # (Line 74) if (Deaths(P7, AtLeast, 1, " `SkillText3"))
    EUDEndIf()
    if EUDIf()(Deaths(P7, AtLeast, 1, " `SkillText3")):
        # (Line 75) {
        # (Line 76) count = dwread_epd(EPD(0x58A364 + 48 * 117 + 4 * 7));
        count << (f_dwread_epd(EPD(0x58A364 + 48 * 117 + 4 * 7)))
        # (Line 78) foreach(idx : EUDLoopRange(6))
        for idx in EUDLoopRange(6):
            # (Line 79) {
            # (Line 80) sakura.P_type[idx] = 1;  		sakura.P_player[idx] = count; 		sakura.P_observer[idx] = count;
            _ARRW(sakura.P_type, idx) << (1)
            _ARRW(sakura.P_player, idx) << (count)
            _ARRW(sakura.P_observer, idx) << (count)
            # (Line 81) yashiro.P_type[idx] = 1; 		yashiro.P_player[idx] = count; 		yashiro.P_observer[idx] = count;
            _ARRW(yashiro.P_type, idx) << (1)
            _ARRW(yashiro.P_player, idx) << (count)
            _ARRW(yashiro.P_observer, idx) << (count)
            # (Line 82) rin.P_type[idx] = 1;  			rin.P_player[idx] = count; 			rin.P_observer[idx] = count;
            _ARRW(rin.P_type, idx) << (1)
            _ARRW(rin.P_player, idx) << (count)
            _ARRW(rin.P_observer, idx) << (count)
            # (Line 83) seraphim.P_type[idx] = 1;  	seraphim.P_player[idx] = count; 		seraphim.P_observer[idx] = count;
            _ARRW(seraphim.P_type, idx) << (1)
            _ARRW(seraphim.P_player, idx) << (count)
            _ARRW(seraphim.P_observer, idx) << (count)
            # (Line 85) iwahune.P_type[idx] = 1;  	iwahune.P_player[idx] = count; 		iwahune.P_observer[idx] = count;
            _ARRW(iwahune.P_type, idx) << (1)
            _ARRW(iwahune.P_player, idx) << (count)
            _ARRW(iwahune.P_observer, idx) << (count)
            # (Line 86) }
            # (Line 87) SetDeaths(6, SetTo, 0, 117);

        # (Line 88) }
        DoActions(SetDeaths(6, SetTo, 0, 117))
        # (Line 89) if (Deaths(P7, AtLeast, 1, " `SkillText4"))
    EUDEndIf()
    if EUDIf()(Deaths(P7, AtLeast, 1, " `SkillText4")):
        # (Line 90) {
        # (Line 91) count = dwread_epd(EPD(0x58A364 + 48 * 157 + 4 * 7));
        count << (f_dwread_epd(EPD(0x58A364 + 48 * 157 + 4 * 7)))
        # (Line 93) foreach(idx : EUDLoopRange(6))
        for idx in EUDLoopRange(6):
            # (Line 94) {
            # (Line 95) mn.P_type[idx] = 1;  			mn.P_player[idx] = count; 			mn.P_observer[idx] = count;
            _ARRW(mn.P_type, idx) << (1)
            _ARRW(mn.P_player, idx) << (count)
            _ARRW(mn.P_observer, idx) << (count)
            # (Line 96) emetselch.P_type[idx] = 1; 	emetselch.P_player[idx] = count; 		emetselch.P_observer[idx] = count;
            _ARRW(emetselch.P_type, idx) << (1)
            _ARRW(emetselch.P_player, idx) << (count)
            _ARRW(emetselch.P_observer, idx) << (count)
            # (Line 97) magellan.P_type[idx] = 1;  	magellan.P_player[idx] = count; 		magellan.P_observer[idx] = count;
            _ARRW(magellan.P_type, idx) << (1)
            _ARRW(magellan.P_player, idx) << (count)
            _ARRW(magellan.P_observer, idx) << (count)
            # (Line 98) }
            # (Line 99) SetDeaths(6, SetTo, 0, 157);

        # (Line 100) }
        DoActions(SetDeaths(6, SetTo, 0, 157))
        # (Line 101) }
    EUDEndIf()
    # (Line 103) function OldCharacterVoiceUltimate()

# (Line 104) {
@EUDFunc
def OldCharacterVoiceUltimate():
    # (Line 105) var count;
    count = EUDVariable()
    # (Line 107) if (Deaths(P7, AtLeast, 1, " `SkillText_Uiltimate"))
    if EUDIf()(Deaths(P7, AtLeast, 1, " `SkillText_Uiltimate")):
        # (Line 108) {
        # (Line 109) count = dwread_epd(EPD(0x58A364 + 48 * 222 + 4 * 7));
        count << (f_dwread_epd(EPD(0x58A364 + 48 * 222 + 4 * 7)))
        # (Line 111) foreach(idx : EUDLoopRange(6))
        for idx in EUDLoopRange(6):
            # (Line 112) {
            # (Line 113) tenshi.P_type[idx] = 2;  		tenshi.P_player[idx] = count; 			tenshi.P_observer[idx] = count;
            _ARRW(tenshi.P_type, idx) << (2)
            _ARRW(tenshi.P_player, idx) << (count)
            _ARRW(tenshi.P_observer, idx) << (count)
            # (Line 114) miyuki.P_type[idx] = 2;  		miyuki.P_player[idx] = count; 		miyuki.P_observer[idx] = count;
            _ARRW(miyuki.P_type, idx) << (2)
            _ARRW(miyuki.P_player, idx) << (count)
            _ARRW(miyuki.P_observer, idx) << (count)
            # (Line 115) negev.P_type[idx] = 2;  		negev.P_player[idx] = count; 			negev.P_observer[idx] = count;
            _ARRW(negev.P_type, idx) << (2)
            _ARRW(negev.P_player, idx) << (count)
            _ARRW(negev.P_observer, idx) << (count)
            # (Line 116) cecillia.P_type[idx] = 2;  		cecillia.P_player[idx] = count; 		cecillia.P_observer[idx] = count;
            _ARRW(cecillia.P_type, idx) << (2)
            _ARRW(cecillia.P_player, idx) << (count)
            _ARRW(cecillia.P_observer, idx) << (count)
            # (Line 117) anzu.P_type[idx] = 2; 		anzu.P_player[idx] = count; 			anzu.P_observer[idx] = count;
            _ARRW(anzu.P_type, idx) << (2)
            _ARRW(anzu.P_player, idx) << (count)
            _ARRW(anzu.P_observer, idx) << (count)
            # (Line 118) hotomoka.P_type[idx] = 2;  	hotomoka.P_player[idx] = count; 		hotomoka.P_observer[idx] = count;
            _ARRW(hotomoka.P_type, idx) << (2)
            _ARRW(hotomoka.P_player, idx) << (count)
            _ARRW(hotomoka.P_observer, idx) << (count)
            # (Line 119) alterego.P_type[idx] = 2;  	alterego.P_player[idx] = count; 		alterego.P_observer[idx] = count;
            _ARRW(alterego.P_type, idx) << (2)
            _ARRW(alterego.P_player, idx) << (count)
            _ARRW(alterego.P_observer, idx) << (count)
            # (Line 120) ryuzu.P_type[idx] = 2; 		ryuzu.P_player[idx] = count; 			ryuzu.P_observer[idx] = count;
            _ARRW(ryuzu.P_type, idx) << (2)
            _ARRW(ryuzu.P_player, idx) << (count)
            _ARRW(ryuzu.P_observer, idx) << (count)
            # (Line 122) sakura.P_type[idx] = 2;  		sakura.P_player[idx] = count; 		sakura.P_observer[idx] = count;
            _ARRW(sakura.P_type, idx) << (2)
            _ARRW(sakura.P_player, idx) << (count)
            _ARRW(sakura.P_observer, idx) << (count)
            # (Line 123) yashiro.P_type[idx] = 2; 		yashiro.P_player[idx] = count; 		yashiro.P_observer[idx] = count;
            _ARRW(yashiro.P_type, idx) << (2)
            _ARRW(yashiro.P_player, idx) << (count)
            _ARRW(yashiro.P_observer, idx) << (count)
            # (Line 124) rin.P_type[idx] = 2;  			rin.P_player[idx] = count; 			rin.P_observer[idx] = count;
            _ARRW(rin.P_type, idx) << (2)
            _ARRW(rin.P_player, idx) << (count)
            _ARRW(rin.P_observer, idx) << (count)
            # (Line 125) seraphim.P_type[idx] = 2;  	seraphim.P_player[idx] = count; 		seraphim.P_observer[idx] = count;
            _ARRW(seraphim.P_type, idx) << (2)
            _ARRW(seraphim.P_player, idx) << (count)
            _ARRW(seraphim.P_observer, idx) << (count)
            # (Line 127) iwahune.P_type[idx] = 2;  	iwahune.P_player[idx] = count; 		iwahune.P_observer[idx] = count;
            _ARRW(iwahune.P_type, idx) << (2)
            _ARRW(iwahune.P_player, idx) << (count)
            _ARRW(iwahune.P_observer, idx) << (count)
            # (Line 128) mn.P_type[idx] = 2;  			mn.P_player[idx] = count; 			mn.P_observer[idx] = count;
            _ARRW(mn.P_type, idx) << (2)
            _ARRW(mn.P_player, idx) << (count)
            _ARRW(mn.P_observer, idx) << (count)
            # (Line 129) emetselch.P_type[idx] = 2; 	emetselch.P_player[idx] = count; 		emetselch.P_observer[idx] = count;
            _ARRW(emetselch.P_type, idx) << (2)
            _ARRW(emetselch.P_player, idx) << (count)
            _ARRW(emetselch.P_observer, idx) << (count)
            # (Line 130) magellan.P_type[idx] = 2;  	magellan.P_player[idx] = count; 		magellan.P_observer[idx] = count;
            _ARRW(magellan.P_type, idx) << (2)
            _ARRW(magellan.P_player, idx) << (count)
            _ARRW(magellan.P_observer, idx) << (count)
            # (Line 131) }
            # (Line 133) SetDeaths(6, SetTo, 0, 222);

        # (Line 134) }
        DoActions(SetDeaths(6, SetTo, 0, 222))
        # (Line 135) }
    EUDEndIf()
    # (Line 137) function OldCharacterVoiceUnique()

# (Line 138) {
@EUDFunc
def OldCharacterVoiceUnique():
    # (Line 139) var count;
    count = EUDVariable()
    # (Line 141) if (Deaths(P7, AtLeast, 1, " `SkillText_Unique"))
    if EUDIf()(Deaths(P7, AtLeast, 1, " `SkillText_Unique")):
        # (Line 142) {
        # (Line 143) count = dwread_epd(EPD(0x58A364 + 48 * 188 + 4 * 7));
        count << (f_dwread_epd(EPD(0x58A364 + 48 * 188 + 4 * 7)))
        # (Line 145) foreach(idx : EUDLoopRange(6))
        for idx in EUDLoopRange(6):
            # (Line 146) {
            # (Line 147) tenshi.P_type[idx] = 3;  		tenshi.P_player[idx] = count; 			tenshi.P_observer[idx] = count;
            _ARRW(tenshi.P_type, idx) << (3)
            _ARRW(tenshi.P_player, idx) << (count)
            _ARRW(tenshi.P_observer, idx) << (count)
            # (Line 148) miyuki.P_type[idx] = 3;  		miyuki.P_player[idx] = count; 		miyuki.P_observer[idx] = count;
            _ARRW(miyuki.P_type, idx) << (3)
            _ARRW(miyuki.P_player, idx) << (count)
            _ARRW(miyuki.P_observer, idx) << (count)
            # (Line 149) negev.P_type[idx] = 3;  		negev.P_player[idx] = count; 			negev.P_observer[idx] = count;
            _ARRW(negev.P_type, idx) << (3)
            _ARRW(negev.P_player, idx) << (count)
            _ARRW(negev.P_observer, idx) << (count)
            # (Line 150) cecillia.P_type[idx] = 3;  		cecillia.P_player[idx] = count; 		cecillia.P_observer[idx] = count;
            _ARRW(cecillia.P_type, idx) << (3)
            _ARRW(cecillia.P_player, idx) << (count)
            _ARRW(cecillia.P_observer, idx) << (count)
            # (Line 151) anzu.P_type[idx] = 3; 		anzu.P_player[idx] = count; 			anzu.P_observer[idx] = count;
            _ARRW(anzu.P_type, idx) << (3)
            _ARRW(anzu.P_player, idx) << (count)
            _ARRW(anzu.P_observer, idx) << (count)
            # (Line 152) hotomoka.P_type[idx] = 3;  	hotomoka.P_player[idx] = count; 		hotomoka.P_observer[idx] = count;
            _ARRW(hotomoka.P_type, idx) << (3)
            _ARRW(hotomoka.P_player, idx) << (count)
            _ARRW(hotomoka.P_observer, idx) << (count)
            # (Line 153) alterego.P_type[idx] = 3;  	alterego.P_player[idx] = count; 		alterego.P_observer[idx] = count;
            _ARRW(alterego.P_type, idx) << (3)
            _ARRW(alterego.P_player, idx) << (count)
            _ARRW(alterego.P_observer, idx) << (count)
            # (Line 154) ryuzu.P_type[idx] = 3; 		ryuzu.P_player[idx] = count; 			ryuzu.P_observer[idx] = count;
            _ARRW(ryuzu.P_type, idx) << (3)
            _ARRW(ryuzu.P_player, idx) << (count)
            _ARRW(ryuzu.P_observer, idx) << (count)
            # (Line 156) sakura.P_type[idx] = 3;  		sakura.P_player[idx] = count; 		sakura.P_observer[idx] = count;
            _ARRW(sakura.P_type, idx) << (3)
            _ARRW(sakura.P_player, idx) << (count)
            _ARRW(sakura.P_observer, idx) << (count)
            # (Line 157) yashiro.P_type[idx] = 3; 		yashiro.P_player[idx] = count; 		yashiro.P_observer[idx] = count;
            _ARRW(yashiro.P_type, idx) << (3)
            _ARRW(yashiro.P_player, idx) << (count)
            _ARRW(yashiro.P_observer, idx) << (count)
            # (Line 158) rin.P_type[idx] = 3;  			rin.P_player[idx] = count; 			rin.P_observer[idx] = count;
            _ARRW(rin.P_type, idx) << (3)
            _ARRW(rin.P_player, idx) << (count)
            _ARRW(rin.P_observer, idx) << (count)
            # (Line 159) seraphim.P_type[idx] = 3;  	seraphim.P_player[idx] = count; 		seraphim.P_observer[idx] = count;
            _ARRW(seraphim.P_type, idx) << (3)
            _ARRW(seraphim.P_player, idx) << (count)
            _ARRW(seraphim.P_observer, idx) << (count)
            # (Line 161) iwahune.P_type[idx] = 3;  	iwahune.P_player[idx] = count; 		iwahune.P_observer[idx] = count;
            _ARRW(iwahune.P_type, idx) << (3)
            _ARRW(iwahune.P_player, idx) << (count)
            _ARRW(iwahune.P_observer, idx) << (count)
            # (Line 162) mn.P_type[idx] = 3;  			mn.P_player[idx] = count; 			mn.P_observer[idx] = count;
            _ARRW(mn.P_type, idx) << (3)
            _ARRW(mn.P_player, idx) << (count)
            _ARRW(mn.P_observer, idx) << (count)
            # (Line 163) emetselch.P_type[idx] = 3; 	emetselch.P_player[idx] = count; 		emetselch.P_observer[idx] = count;
            _ARRW(emetselch.P_type, idx) << (3)
            _ARRW(emetselch.P_player, idx) << (count)
            _ARRW(emetselch.P_observer, idx) << (count)
            # (Line 164) magellan.P_type[idx] = 3;  	magellan.P_player[idx] = count; 		magellan.P_observer[idx] = count;
            _ARRW(magellan.P_type, idx) << (3)
            _ARRW(magellan.P_player, idx) << (count)
            _ARRW(magellan.P_observer, idx) << (count)
            # (Line 165) }
            # (Line 167) SetDeaths(6, SetTo, 0, 188);

        # (Line 168) }
        DoActions(SetDeaths(6, SetTo, 0, 188))
        # (Line 169) }
    EUDEndIf()
    # (Line 172) function CharacterVoice(count : TrgCount)

# (Line 173) {
@EUDTypedFunc([TrgCount])
def CharacterVoice(count):
    # (Line 174) var playerID = getcurpl();
    playerID = EUDVariable()
    playerID << (f_getcurpl())
    # (Line 176) foreach(idx : EUDLoopRange(6))
    for idx in EUDLoopRange(6):
        # (Line 177) {
        # (Line 178) if 		(v.P_HeroID[playerID] == 1)	{ rusaruka.	P_player[idx] = count; rusaruka.	P_observer[idx] = count; }
        if EUDIf()(v.P_HeroID[playerID] == 1):
            _ARRW(rusaruka.P_player, idx) << (count)
            _ARRW(rusaruka.P_observer, idx) << (count)
            # (Line 179) else if 	(v.P_HeroID[playerID] == 2)	{ chtholly.	P_player[idx] = count; chtholly.	P_observer[idx] = count; 	}
        if EUDElseIf()(v.P_HeroID[playerID] == 2):
            _ARRW(chtholly.P_player, idx) << (count)
            _ARRW(chtholly.P_observer, idx) << (count)
            # (Line 180) else if 	(v.P_HeroID[playerID] == 3)	{ maihime.	P_player[idx] = count; maihime.	P_observer[idx] = count; 	}
        if EUDElseIf()(v.P_HeroID[playerID] == 3):
            _ARRW(maihime.P_player, idx) << (count)
            _ARRW(maihime.P_observer, idx) << (count)
            # (Line 182) else if 	(v.P_HeroID[playerID] == 22)	{ yuuna.		P_player[idx] = count; yuuna.		P_observer[idx] = count; 	}
        if EUDElseIf()(v.P_HeroID[playerID] == 22):
            _ARRW(yuuna.P_player, idx) << (count)
            _ARRW(yuuna.P_observer, idx) << (count)
            # (Line 183) else if 	(v.P_HeroID[playerID] == 23)	{ mayuri.	P_player[idx] = count; mayuri.	P_observer[idx] = count; 	}
        if EUDElseIf()(v.P_HeroID[playerID] == 23):
            _ARRW(mayuri.P_player, idx) << (count)
            _ARRW(mayuri.P_observer, idx) << (count)
            # (Line 184) else if 	(v.P_HeroID[playerID] == 24)	{ nanami.	P_player[idx] = count; nanami.	P_observer[idx] = count; 	}
        if EUDElseIf()(v.P_HeroID[playerID] == 24):
            _ARRW(nanami.P_player, idx) << (count)
            _ARRW(nanami.P_observer, idx) << (count)
            # (Line 185) else if 	(v.P_HeroID[playerID] == 25)	{ milim.		P_player[idx] = count; milim.		P_observer[idx] = count; 	}
        if EUDElseIf()(v.P_HeroID[playerID] == 25):
            _ARRW(milim.P_player, idx) << (count)
            _ARRW(milim.P_observer, idx) << (count)
            # (Line 187) else if 	(v.P_HeroID[playerID] == 26)	{ yume.		P_player[idx] = count; yume.		P_observer[idx] = count; 	}
        if EUDElseIf()(v.P_HeroID[playerID] == 26):
            _ARRW(yume.P_player, idx) << (count)
            _ARRW(yume.P_observer, idx) << (count)
            # (Line 188) else if 	(v.P_HeroID[playerID] == 27)	{ magane.	P_player[idx] = count; magane.	P_observer[idx] = count; 	}
        if EUDElseIf()(v.P_HeroID[playerID] == 27):
            _ARRW(magane.P_player, idx) << (count)
            _ARRW(magane.P_observer, idx) << (count)
            # (Line 189) else if 	(v.P_HeroID[playerID] == 28)	{ oda.		P_player[idx] = count; oda.		P_observer[idx] = count; 	}
        if EUDElseIf()(v.P_HeroID[playerID] == 28):
            _ARRW(oda.P_player, idx) << (count)
            _ARRW(oda.P_observer, idx) << (count)
            # (Line 190) else if 	(v.P_HeroID[playerID] == 29)	{ ekidona.	P_player[idx] = count; ekidona.	P_observer[idx] = count; 	}
        if EUDElseIf()(v.P_HeroID[playerID] == 29):
            _ARRW(ekidona.P_player, idx) << (count)
            _ARRW(ekidona.P_observer, idx) << (count)
            # (Line 191) else if 	(v.P_HeroID[playerID] == 30)	{ niwa.		P_player[idx] = count; niwa.		P_observer[idx] = count; 	}
        if EUDElseIf()(v.P_HeroID[playerID] == 30):
            _ARRW(niwa.P_player, idx) << (count)
            _ARRW(niwa.P_observer, idx) << (count)
            # (Line 193) else if 	(v.P_HeroID[playerID] == 31)	{ park.		P_player[idx] = count; park.		P_observer[idx] = count; 	}
        if EUDElseIf()(v.P_HeroID[playerID] == 31):
            _ARRW(park.P_player, idx) << (count)
            _ARRW(park.P_observer, idx) << (count)
            # (Line 194) }
        EUDEndIf()
        # (Line 195) }

    # (Line 197) function OldVoicemain()

# (Line 198) {
@EUDFunc
def OldVoicemain():
    # (Line 199) OldCharacterVoiceNormal();
    OldCharacterVoiceNormal()
    # (Line 200) OldCharacterVoiceUltimate();
    OldCharacterVoiceUltimate()
    # (Line 201) OldCharacterVoiceUnique();
    OldCharacterVoiceUnique()
    # (Line 202) }
    # (Line 204) function main(playerID)

# (Line 205) {
@EUDFunc
def f_main(playerID):
    # (Line 207) rusaruka.main(playerID);
    rusaruka.f_main(playerID)
    # (Line 208) chtholly.main(playerID);
    chtholly.f_main(playerID)
    # (Line 209) maihime.main(playerID);
    maihime.f_main(playerID)
    # (Line 210) tenshi.main(playerID);
    tenshi.f_main(playerID)
    # (Line 211) miyuki.main(playerID);
    miyuki.f_main(playerID)
    # (Line 214) negev.main(playerID);
    negev.f_main(playerID)
    # (Line 215) cecillia.main(playerID);
    cecillia.f_main(playerID)
    # (Line 216) anzu.main(playerID);
    anzu.f_main(playerID)
    # (Line 217) hotomoka.main(playerID);
    hotomoka.f_main(playerID)
    # (Line 218) alterego.main(playerID);
    alterego.f_main(playerID)
    # (Line 221) ryuzu.main(playerID);
    ryuzu.f_main(playerID)
    # (Line 223) sakura.main(playerID);
    sakura.f_main(playerID)
    # (Line 224) yashiro.main(playerID);
    yashiro.f_main(playerID)
    # (Line 225) rin.main(playerID);
    rin.f_main(playerID)
    # (Line 228) seraphim.main(playerID);
    seraphim.f_main(playerID)
    # (Line 230) iwahune.main(playerID);
    iwahune.f_main(playerID)
    # (Line 231) mn.main(playerID);
    mn.f_main(playerID)
    # (Line 232) emetselch.main(playerID);
    emetselch.f_main(playerID)
    # (Line 235) magellan.main(playerID);
    magellan.f_main(playerID)
    # (Line 236) yuuna.main(playerID);
    yuuna.f_main(playerID)
    # (Line 237) mayuri.main(playerID);
    mayuri.f_main(playerID)
    # (Line 238) nanami.main(playerID);
    nanami.f_main(playerID)
    # (Line 239) milim.main(playerID);
    milim.f_main(playerID)
    # (Line 242) yume.main(playerID);
    yume.f_main(playerID)
    # (Line 243) magane.main(playerID);
    magane.f_main(playerID)
    # (Line 244) oda.main(playerID);
    oda.f_main(playerID)
    # (Line 245) ekidona.main(playerID);
    ekidona.f_main(playerID)
    # (Line 246) niwa.main(playerID);
    niwa.f_main(playerID)
    # (Line 249) park.main(playerID);
    park.f_main(playerID)
    # (Line 250) }
