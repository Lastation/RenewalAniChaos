## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import variable as v;
import variable as v
# (Line 3) const NowIndex = PVariable();
NowIndex = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 4) const PrevIndex 	= PVariable();
PrevIndex = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 5) const PlayerID 	= PVariable();
PlayerID = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 6) const UnitID 	= PVariable();
UnitID = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 7) const UnitHP 	= PVariable();
UnitHP = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 9) function getUnitID(playerID)
# (Line 10) {
@EUDFunc
def f_getUnitID(playerID):
    # (Line 11) if (MemoryEPD(EPD(0x6284E8) + 12 *playerID, AtLeast, 1))
    if EUDIf()(MemoryEPD(EPD(0x6284E8) + 12 * playerID, AtLeast, 1)):
        # (Line 12) {
        # (Line 13) const selectedUnit = EPD(0x6284E8) + 12 * playerID;
        selectedUnit = EPD(0x6284E8) + 12 * playerID
        # (Line 14) NowIndex[playerID] = epdread_epd(selectedUnit);
        _ARRW(NowIndex, playerID) << (f_epdread_epd(selectedUnit))
        # (Line 15) PlayerID[playerID] = bread_epd(NowIndex[playerID] + 0x4C/4, 0);
        _ARRW(PlayerID, playerID) << (f_bread_epd(NowIndex[playerID] + 0x4C // 4, 0))
        # (Line 17) if(NowIndex[playerID] != PrevIndex[playerID] )
        if EUDIf()(NowIndex[playerID] == PrevIndex[playerID], neg=True):
            # (Line 18) {
            # (Line 19) PrevIndex[playerID] = NowIndex[playerID];
            _ARRW(PrevIndex, playerID) << (NowIndex[playerID])
            # (Line 20) UnitID[playerID] = bread_epd(NowIndex[playerID] + 0x64/4, 0);
            _ARRW(UnitID, playerID) << (f_bread_epd(NowIndex[playerID] + 0x64 // 4, 0))
            # (Line 21) UnitHP[playerID] = dwread_epd(NowIndex[playerID] + 0x008 / 4);
            _ARRW(UnitHP, playerID) << (f_dwread_epd(NowIndex[playerID] + 0x008 // 4))
            # (Line 22) UnitHP[playerID] = UnitHP[playerID] / 256;
            _ARRW(UnitHP, playerID) << (UnitHP[playerID] // 256)
            # (Line 23) }
            # (Line 24) }
        EUDEndIf()
        # (Line 25) }
    EUDEndIf()
    # (Line 27) function InitUnitID(playerID)

# (Line 28) {
@EUDFunc
def InitUnitID(playerID):
    # (Line 29) switch(v.P_HeroID[playerID])
    EUDSwitch(v.P_HeroID[playerID])
    # (Line 30) {
    # (Line 31) case 3:
    _t1 = EUDSwitchCase()
    # (Line 32) v.P_UnitID[playerID] = 74;
    if _t1(3):
        _ARRW(v.P_UnitID, playerID) << (74)
        # (Line 33) break;
        EUDBreak()
        # (Line 34) case 4:
    _t2 = EUDSwitchCase()
    # (Line 35) v.P_UnitID[playerID] = 74;
    if _t2(4):
        _ARRW(v.P_UnitID, playerID) << (74)
        # (Line 36) break;
        EUDBreak()
        # (Line 37) case 5:
    _t3 = EUDSwitchCase()
    # (Line 38) v.P_UnitID[playerID] = 74;
    if _t3(5):
        _ARRW(v.P_UnitID, playerID) << (74)
        # (Line 39) break;
        EUDBreak()
        # (Line 40) case 6:
    _t4 = EUDSwitchCase()
    # (Line 41) v.P_UnitID[playerID] = 16;
    if _t4(6):
        _ARRW(v.P_UnitID, playerID) << (16)
        # (Line 42) break;
        EUDBreak()
        # (Line 43) case 7:
    _t5 = EUDSwitchCase()
    # (Line 44) v.P_UnitID[playerID] = 77;
    if _t5(7):
        _ARRW(v.P_UnitID, playerID) << (77)
        # (Line 45) break;
        EUDBreak()
        # (Line 46) case 8:
    _t6 = EUDSwitchCase()
    # (Line 47) v.P_UnitID[playerID] = 51;
    if _t6(8):
        _ARRW(v.P_UnitID, playerID) << (51)
        # (Line 48) break;
        EUDBreak()
        # (Line 49) case 9:
    _t7 = EUDSwitchCase()
    # (Line 50) v.P_UnitID[playerID] = 51;
    if _t7(9):
        _ARRW(v.P_UnitID, playerID) << (51)
        # (Line 51) break;
        EUDBreak()
        # (Line 52) case 10:
    _t8 = EUDSwitchCase()
    # (Line 53) v.P_UnitID[playerID] = 77;
    if _t8(10):
        _ARRW(v.P_UnitID, playerID) << (77)
        # (Line 54) break;
        EUDBreak()
        # (Line 55) case 11:
    _t9 = EUDSwitchCase()
    # (Line 56) v.P_UnitID[playerID] = 16;
    if _t9(11):
        _ARRW(v.P_UnitID, playerID) << (16)
        # (Line 57) break;
        EUDBreak()
        # (Line 58) case 12:
    _t10 = EUDSwitchCase()
    # (Line 59) v.P_UnitID[playerID] = 54;
    if _t10(12):
        _ARRW(v.P_UnitID, playerID) << (54)
        # (Line 60) break;
        EUDBreak()
        # (Line 61) case 13:
    _t11 = EUDSwitchCase()
    # (Line 62) v.P_UnitID[playerID] = 16;
    if _t11(13):
        _ARRW(v.P_UnitID, playerID) << (16)
        # (Line 63) break;
        EUDBreak()
        # (Line 64) case 14:
    _t12 = EUDSwitchCase()
    # (Line 65) v.P_UnitID[playerID] = 99;
    if _t12(14):
        _ARRW(v.P_UnitID, playerID) << (99)
        # (Line 66) break;
        EUDBreak()
        # (Line 67) case 15:
    _t13 = EUDSwitchCase()
    # (Line 68) v.P_UnitID[playerID] = 54;
    if _t13(15):
        _ARRW(v.P_UnitID, playerID) << (54)
        # (Line 69) break;
        EUDBreak()
        # (Line 70) case 16:
    _t14 = EUDSwitchCase()
    # (Line 71) v.P_UnitID[playerID] = 16;
    if _t14(16):
        _ARRW(v.P_UnitID, playerID) << (16)
        # (Line 72) break;
        EUDBreak()
        # (Line 73) case 17:
    _t15 = EUDSwitchCase()
    # (Line 74) v.P_UnitID[playerID] = 77;
    if _t15(17):
        _ARRW(v.P_UnitID, playerID) << (77)
        # (Line 75) break;
        EUDBreak()
        # (Line 76) case 18:
    _t16 = EUDSwitchCase()
    # (Line 77) v.P_UnitID[playerID] = 99;
    if _t16(18):
        _ARRW(v.P_UnitID, playerID) << (99)
        # (Line 78) break;
        EUDBreak()
        # (Line 79) case 19:
    _t17 = EUDSwitchCase()
    # (Line 80) v.P_UnitID[playerID] = 51;
    if _t17(19):
        _ARRW(v.P_UnitID, playerID) << (51)
        # (Line 81) break;
        EUDBreak()
        # (Line 82) case 20:
    _t18 = EUDSwitchCase()
    # (Line 83) v.P_UnitID[playerID] = 99;
    if _t18(20):
        _ARRW(v.P_UnitID, playerID) << (99)
        # (Line 84) break;
        EUDBreak()
        # (Line 85) case 21:
    _t19 = EUDSwitchCase()
    # (Line 86) v.P_UnitID[playerID] = 64;
    if _t19(21):
        _ARRW(v.P_UnitID, playerID) << (64)
        # (Line 87) break;
        EUDBreak()
        # (Line 88) }
    # (Line 89) }
    EUDEndSwitch()
