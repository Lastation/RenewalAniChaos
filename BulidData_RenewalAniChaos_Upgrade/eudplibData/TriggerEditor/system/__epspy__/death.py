## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.text as t;
from func import text as t
# (Line 5) const DeathOre 	= PVariable();
DeathOre = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 6) const Team 		= PVariable();
Team = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 7) var ID;
ID = EUDVariable()
# (Line 9) function DeathText(playerID)
# (Line 10) {
@EUDFunc
def DeathText(playerID):
    # (Line 11) v.stb.printAt(1,"\n\x13\x08!! Warning !!\n\x13\x19:: \x17",
    # (Line 12) ptr2s(t.T_CharacterName[v.P_HeroID[ID]]), "\x04이 치명상을 입었습니다. \x19::\n\n\x13\x07",
    # (Line 13) Team[playerID], "\x04Team \x17+ ",
    # (Line 14) DeathOre[playerID], " \x04Ore\n");
    v.stb.printAt(1, "\n\x13\x08!! Warning !!\n\x13\x19:: \x17", ptr2s(t.T_CharacterName[v.P_HeroID[ID]]), "\x04이 치명상을 입었습니다. \x19::\n\n\x13\x07", Team[playerID], "\x04Team \x17+ ", DeathOre[playerID], " \x04Ore\n")
    # (Line 16) DeathOre[playerID] = 0;
    _ARRW(DeathOre, playerID) << (0)
    # (Line 18) SetDeaths((13), (7), 0, (211));
    # (Line 19) }
    DoActions(SetDeaths((13), (7), 0, (211)))
    # (Line 21) function SetDeathValue(playerID)

# (Line 22) {
@EUDFunc
def SetDeathValue(playerID):
    # (Line 23) if (Deaths(CurrentPlayer, (0), 1000, (210)))
    if EUDIf()(Deaths(CurrentPlayer, (0), 1000, (210))):
        # (Line 24) {
        # (Line 25) ID = playerID;
        ID << (playerID)
        # (Line 26) for(var i = 0; i < 6; ++i)
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i >= 6, neg=True):
            def _t3():
                i.__iadd__(1)
            # (Line 27) {
            # (Line 28) DeathOre[i] = 250 + v.P_Level[playerID] * 10;
            _ARRW(DeathOre, i) << (250 + v.P_Level[playerID] * 10)
            # (Line 29) Team[i] = playerID < 2 ? 2 : 1;
            _ARRW(Team, i) << (EUDTernary(playerID >= 2, neg=True)(2)(1))
            # (Line 30) }
            # (Line 32) CenterView((96));
            EUDSetContinuePoint()
            _t3()
        EUDEndWhile()
        # (Line 34) if (playerID >= 0 && playerID <= 2)
        DoActions(CenterView((96)))
        if EUDIf()(EUDSCAnd()(playerID >= 0)(playerID <= 2)()):
            # (Line 35) {
            # (Line 36) if (Deaths((0), (10), 15, (172)) || Deaths((1), (10), 15, (172)) || Deaths((2), (10), 15, (172))) { SetSwitch((20), (4)); }
            if EUDIf()(EUDSCOr()(Deaths((0), (10), 15, (172)))(Deaths((1), (10), 15, (172)))(Deaths((2), (10), 15, (172)))()):
                DoActions(SetSwitch((20), (4)))
                # (Line 37) if (Switch((22), (2)))
            EUDEndIf()
            if EUDIf()(Switch((22), (2))):
                # (Line 38) {
                # (Line 39) SetDeaths((13), (7), 12, (210)); SetSwitch((23), (4));
                DoActions(SetDeaths((13), (7), 12, (210)))
                # (Line 40) }
                DoActions(SetSwitch((23), (4)))
                # (Line 41) else { SetDeaths(CurrentPlayer, SetTo, 120 + v.P_Level[playerID] * 12, (210)); }
            if EUDElse()():
                DoActions(SetDeaths(CurrentPlayer, SetTo, 120 + v.P_Level[playerID] * 12, (210)))
                # (Line 42) if (Deaths(playerID, 10, 22, 172)) SetDeaths(playerID, SetTo, 0, " `UniqueSkill");
            EUDEndIf()
            if EUDIf()(Deaths(playerID, 10, 22, 172)):
                # (Line 43) SetResources((3), (8), DeathOre[playerID], (0));
                DoActions(SetDeaths(playerID, SetTo, 0, " `UniqueSkill"))
            EUDEndIf()
            # (Line 44) SetResources((4), (8), DeathOre[playerID], (0));
            DoActions(SetResources((3), (8), DeathOre[playerID], (0)))
            # (Line 45) SetResources((5), (8), DeathOre[playerID], (0));
            DoActions(SetResources((4), (8), DeathOre[playerID], (0)))
            # (Line 46) }
            DoActions(SetResources((5), (8), DeathOre[playerID], (0)))
            # (Line 47) if (playerID >= 3 && playerID <= 5)
        EUDEndIf()
        if EUDIf()(EUDSCAnd()(playerID >= 3)(playerID <= 5)()):
            # (Line 48) {
            # (Line 49) if (Deaths((3), (10), 15, (172)) || Deaths((4), (10), 15, (172)) || Deaths((5), (10), 15, (172))) { SetSwitch((20), (4)); }
            if EUDIf()(EUDSCOr()(Deaths((3), (10), 15, (172)))(Deaths((4), (10), 15, (172)))(Deaths((5), (10), 15, (172)))()):
                DoActions(SetSwitch((20), (4)))
                # (Line 50) if (Switch((22), (2)))
            EUDEndIf()
            if EUDIf()(Switch((22), (2))):
                # (Line 51) {
                # (Line 52) SetDeaths((13), (7), 12, (210)); SetSwitch((23), (4));
                DoActions(SetDeaths((13), (7), 12, (210)))
                # (Line 53) }
                DoActions(SetSwitch((23), (4)))
                # (Line 54) else { SetDeaths(CurrentPlayer, SetTo, 120 + v.P_Level[playerID] * 12, (210)); }
            if EUDElse()():
                DoActions(SetDeaths(CurrentPlayer, SetTo, 120 + v.P_Level[playerID] * 12, (210)))
                # (Line 55) if (Deaths(playerID, 10, 22, 172)) SetDeaths(playerID, SetTo, 0, " `UniqueSkill");
            EUDEndIf()
            if EUDIf()(Deaths(playerID, 10, 22, 172)):
                # (Line 56) SetResources((0), (8), DeathOre[playerID], (0));
                DoActions(SetDeaths(playerID, SetTo, 0, " `UniqueSkill"))
            EUDEndIf()
            # (Line 57) SetResources((1), (8), DeathOre[playerID], (0));
            DoActions(SetResources((0), (8), DeathOre[playerID], (0)))
            # (Line 58) SetResources((2), (8), DeathOre[playerID], (0));
            DoActions(SetResources((1), (8), DeathOre[playerID], (0)))
            # (Line 59) }
            DoActions(SetResources((2), (8), DeathOre[playerID], (0)))
            # (Line 60) }
        EUDEndIf()
        # (Line 62) if (DeathOre[playerID] > 0)
    EUDEndIf()
    if EUDIf()(DeathOre[playerID] <= 0, neg=True):
        # (Line 63) {
        # (Line 64) DeathText(playerID);
        DeathText(playerID)
        # (Line 65) }
        # (Line 66) }
    EUDEndIf()
