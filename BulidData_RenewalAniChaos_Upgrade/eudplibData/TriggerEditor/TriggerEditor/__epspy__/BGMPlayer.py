## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import BGMFlexible as bgm;
import BGMFlexible as bgm
# (Line 9) function loadSound(){
@EUDFunc
def f_loadSound():
    # (Line 10) bgm.loadSound();
    bgm.f_loadSound()
    # (Line 11) }
    # (Line 14) object Player{

# (Line 15) var track;
class Player(EUDStruct):
    # (Line 16) var lasttimer;
    # (Line 18) var bgmcode;
    # (Line 19) var bgmindex;
    # (Line 26) function ResetTrack(){
    @EUDMethod
    def ResetTrack(this):
        # (Line 27) this.track = 0x40404040;
        _ATTW(this, 'track') << (0x40404040)
        # (Line 28) }
        # (Line 39) function constructor(bgmindex /*BGM*/){

    @EUDMethod
    def constructor(this, bgmindex):
        # (Line 40) this.bgmindex = bgmindex;
        _ATTW(this, 'bgmindex') << (bgmindex)
        # (Line 42) var T1 = bgmindex;
        T1 = EUDVariable()
        T1 << (bgmindex)
        # (Line 43) DoActions(T1.SetNumberX(0, ~0xF000));
        DoActions(T1.SetNumberX(0, ~0xF000))
        # (Line 44) var T2 = bgmindex;
        T2 = EUDVariable()
        T2 << (bgmindex)
        # (Line 45) DoActions(T2.SetNumberX(0, ~0xF00));
        DoActions(T2.SetNumberX(0, ~0xF00))
        # (Line 46) var T3 = bgmindex;
        T3 = EUDVariable()
        T3 << (bgmindex)
        # (Line 47) DoActions(T3.SetNumberX(0, ~0xF0));
        DoActions(T3.SetNumberX(0, ~0xF0))
        # (Line 48) var T4 = bgmindex;
        T4 = EUDVariable()
        T4 << (bgmindex)
        # (Line 49) DoActions(T4.SetNumberX(0, ~0xF));
        DoActions(T4.SetNumberX(0, ~0xF))
        # (Line 51) this.bgmcode = T4 * 0x1000000 + T3 * 0x1000 + T2 + T1 / 0x100 + 0x40404040;
        _ATTW(this, 'bgmcode') << (T4 * 0x1000000 + T3 * 0x1000 + T2 + T1 // 0x100 + 0x40404040)
        # (Line 53) this.track = 0x40404040;
        _ATTW(this, 'track') << (0x40404040)
        # (Line 54) this.lasttimer = dwread_epd(EPD(0x51CE8C));
        _ATTW(this, 'lasttimer') << (f_dwread_epd(EPD(0x51CE8C)))
        # (Line 55) }
        # (Line 63) function Play(){

    @EUDMethod
    def Play(this):
        # (Line 64) if(IsUserCP()){
        if EUDIf()(IsUserCP()):
            # (Line 65) const CurrentTime = dwread_epd(EPD(0x51CE8C));
            CurrentTime = f_dwread_epd(EPD(0x51CE8C))
            # (Line 66) const FrameTick = (this.lasttimer - CurrentTime);
            FrameTick = (this.lasttimer - CurrentTime)
            # (Line 68) if (FrameTick > 2220){
            if EUDIf()(FrameTick <= 2220, neg=True):
                # (Line 69) const r = bgm.PlayOGG(this.bgmindex, this.bgmcode, this.track);
                r = bgm.PlayOGG(this.bgmindex, this.bgmcode, this.track)
                # (Line 70) this.lasttimer = dwread_epd(EPD(0x51CE8C));;
                _ATTW(this, 'lasttimer') << (f_dwread_epd(EPD(0x51CE8C)))
                # (Line 72) this.track += 0x1000000;
                _ATTW(this, 'track').__iadd__(0x1000000)
                # (Line 73) if(this.track.AtLeastX(1, 0x10000000)){
                if EUDIf()(this.track.AtLeastX(1, 0x10000000)):
                    # (Line 74) this.track -= 0x10000000;
                    _ATTW(this, 'track').__isub__(0x10000000)
                    # (Line 75) this.track += 0x10000;
                    _ATTW(this, 'track').__iadd__(0x10000)
                    # (Line 76) if(this.track.AtLeastX(1, 0x100000)){
                    if EUDIf()(this.track.AtLeastX(1, 0x100000)):
                        # (Line 77) this.track -= 0x100000;
                        _ATTW(this, 'track').__isub__(0x100000)
                        # (Line 78) this.track += 0x100;
                        _ATTW(this, 'track').__iadd__(0x100)
                        # (Line 79) if(this.track.AtLeastX(1, 0x1000)){
                        if EUDIf()(this.track.AtLeastX(1, 0x1000)):
                            # (Line 80) this.track -= 0x1000;
                            _ATTW(this, 'track').__isub__(0x1000)
                            # (Line 81) this.track += 0x1;
                            _ATTW(this, 'track').__iadd__(0x1)
                            # (Line 83) }
                            # (Line 84) }
                        EUDEndIf()
                        # (Line 85) }
                    EUDEndIf()
                    # (Line 90) if (r == 0){
                EUDEndIf()
                if EUDIf()(r == 0):
                    # (Line 91) this.track = 0x40404040;
                    _ATTW(this, 'track') << (0x40404040)
                    # (Line 92) }
                    # (Line 93) }
                EUDEndIf()
                # (Line 94) }
            EUDEndIf()
            # (Line 95) }
        EUDEndIf()
        # (Line 96) };

    # (Line 98) var track;
    _fields_ = [
        'track',
        'lasttimer',
        'bgmcode',
        'bgmindex',
    ]

track = EUDVariable()
# (Line 99) var lasttimer;
lasttimer = EUDVariable()
# (Line 101) var bgmcode;
bgmcode = EUDVariable()
# (Line 102) var bgmindex;
bgmindex = EUDVariable()
# (Line 110) function ResetTrack(){
@EUDFunc
def ResetTrack():
    # (Line 111) track = 0x40404040;
    track << (0x40404040)
    # (Line 112) }
    # (Line 124) function SetBGM(bindex /*BGM*/){

@EUDFunc
def SetBGM(bindex):
    # (Line 125) if(IsUserCP()){
    if EUDIf()(IsUserCP()):
        # (Line 126) bgmindex = bindex;
        bgmindex << (bindex)
        # (Line 128) var T1 = bgmindex;
        T1 = EUDVariable()
        T1 << (bgmindex)
        # (Line 129) DoActions(T1.SetNumberX(0, ~0xF000));
        DoActions(T1.SetNumberX(0, ~0xF000))
        # (Line 130) var T2 = bgmindex;
        T2 = EUDVariable()
        T2 << (bgmindex)
        # (Line 131) DoActions(T2.SetNumberX(0, ~0xF00));
        DoActions(T2.SetNumberX(0, ~0xF00))
        # (Line 132) var T3 = bgmindex;
        T3 = EUDVariable()
        T3 << (bgmindex)
        # (Line 133) DoActions(T3.SetNumberX(0, ~0xF0));
        DoActions(T3.SetNumberX(0, ~0xF0))
        # (Line 134) var T4 = bgmindex;
        T4 = EUDVariable()
        T4 << (bgmindex)
        # (Line 135) DoActions(T4.SetNumberX(0, ~0xF));
        DoActions(T4.SetNumberX(0, ~0xF))
        # (Line 137) bgmcode = T4 * 0x1000000 + T3 * 0x1000 + T2 + T1 / 0x100 + 0x40404040;
        bgmcode << (T4 * 0x1000000 + T3 * 0x1000 + T2 + T1 // 0x100 + 0x40404040)
        # (Line 139) track = 0x40404040;
        track << (0x40404040)
        # (Line 140) lasttimer = dwread_epd(EPD(0x51CE8C));
        lasttimer << (f_dwread_epd(EPD(0x51CE8C)))
        # (Line 141) }
        # (Line 142) }
    EUDEndIf()
    # (Line 150) function Play(){

@EUDFunc
def Play():
    # (Line 151) if(IsUserCP()){
    if EUDIf()(IsUserCP()):
        # (Line 152) const CurrentTime = dwread_epd(EPD(0x51CE8C));
        CurrentTime = f_dwread_epd(EPD(0x51CE8C))
        # (Line 153) const FrameTick = (lasttimer - CurrentTime);
        FrameTick = (lasttimer - CurrentTime)
        # (Line 155) if (FrameTick > 2220){
        if EUDIf()(FrameTick <= 2220, neg=True):
            # (Line 156) const r = bgm.PlayOGG(bgmindex, bgmcode, track);
            r = bgm.PlayOGG(bgmindex, bgmcode, track)
            # (Line 157) lasttimer = dwread_epd(EPD(0x51CE8C));;
            lasttimer << (f_dwread_epd(EPD(0x51CE8C)))
            # (Line 159) track += 0x1000000;
            track.__iadd__(0x1000000)
            # (Line 160) if(track.AtLeastX(1, 0x10000000)){
            if EUDIf()(track.AtLeastX(1, 0x10000000)):
                # (Line 161) DoActions(track.SetNumberX(0, 0x10000000));
                DoActions(track.SetNumberX(0, 0x10000000))
                # (Line 162) track += 0x10000;
                track.__iadd__(0x10000)
                # (Line 163) if(track.AtLeastX(1, 0x100000)){
                if EUDIf()(track.AtLeastX(1, 0x100000)):
                    # (Line 164) DoActions(track.SetNumberX(0, 0x100000));
                    DoActions(track.SetNumberX(0, 0x100000))
                    # (Line 165) track += 0x100;
                    track.__iadd__(0x100)
                    # (Line 166) if(track.AtLeastX(1, 0x1000)){
                    if EUDIf()(track.AtLeastX(1, 0x1000)):
                        # (Line 167) DoActions(track.SetNumberX(0, 0x1000));
                        DoActions(track.SetNumberX(0, 0x1000))
                        # (Line 168) track += 0x1;
                        track.__iadd__(0x1)
                        # (Line 170) }
                        # (Line 171) }
                    EUDEndIf()
                    # (Line 172) }
                EUDEndIf()
                # (Line 174) if (r == 0){
            EUDEndIf()
            if EUDIf()(r == 0):
                # (Line 175) track = 0x40404040;
                track << (0x40404040)
                # (Line 176) }
                # (Line 177) }
            EUDEndIf()
            # (Line 178) }
        EUDEndIf()
        # (Line 179) }
    EUDEndIf()
