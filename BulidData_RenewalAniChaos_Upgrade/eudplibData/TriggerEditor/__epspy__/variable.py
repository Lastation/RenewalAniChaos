## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import py_math;
import math
# (Line 5) const P_PlayerID 	= PVariable();
P_PlayerID = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 8) const P_LocationID 	= PVariable();
P_LocationID = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 9) const P_CharacterID	= PVariable();
P_CharacterID = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 12) const P_AngleCos 	= PVariable();
P_AngleCos = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 13) const P_AngleSin 	= PVariable();
P_AngleSin = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 16) const P_Table_Cos 	= EUDArray(py_eval("[int(round(100*math.cos(math.radians(t)))) for t in range(361)]"));
P_Table_Cos = _CGFW(lambda: [EUDArray(eval("[int(round(100*math.cos(math.radians(t)))) for t in range(361)]"))], 1)[0]
# (Line 17) const P_Table_Sin 	= EUDArray(py_eval("[int(round(100*math.sin(math.radians(t)))) for t in range(361)]"));
P_Table_Sin = _CGFW(lambda: [EUDArray(eval("[int(round(100*math.sin(math.radians(t)))) for t in range(361)]"))], 1)[0]
# (Line 20) const P_Ultimate1	= PVariable();
P_Ultimate1 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 21) const P_Ultimate2	= PVariable();
P_Ultimate2 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 22) const P_Ultimate3	= PVariable();
P_Ultimate3 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 25) const P_WaitMain	= PVariable();
P_WaitMain = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 26) const P_WaitSub1	= PVariable();
P_WaitSub1 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 27) const P_WaitSub2	= PVariable();
P_WaitSub2 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 30) const P_CountMain	= PVariable();
P_CountMain = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 31) const P_CountSub1	= PVariable();
P_CountSub1 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 32) const P_CountSub2	= PVariable();
P_CountSub2 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 35) const P_LoopMain	= PVariable();
P_LoopMain = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 36) const P_LoopSub1	= PVariable();
P_LoopSub1 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 37) const P_LoopSub2	= PVariable();
P_LoopSub2 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 40) const P_Step		= PVariable();
P_Step = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 41) const P_Shield		= PVariable();
P_Shield = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 42) const P_Ally			= PVariable();
P_Ally = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 43) const P_SkillDelay	= PVariable();
P_SkillDelay = _CGFW(lambda: [PVariable()], 1)[0]
