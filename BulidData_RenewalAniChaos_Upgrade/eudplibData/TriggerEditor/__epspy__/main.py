## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.shape as s;
from func import shape as s
# (Line 5) import Character.Group1.Rusaruka.Common.Skill_O as O;
from Character.Group1.Rusaruka.Common import Skill_O as O
# (Line 7) const stb = StringBuffer();
stb = _CGFW(lambda: [StringBuffer()], 1)[0]
# (Line 9) function onPluginStart() 	// 초기화 함수
# (Line 10) {
@EUDFunc
def onPluginStart():
    # (Line 12) }
    # (Line 14) function Skill_Variable(playerID)
    pass

# (Line 15) {
@EUDFunc
def Skill_Variable(playerID):
    # (Line 16) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 17) {
        # (Line 18) if 		(v.P_CountMain[playerID] == 999)	{ v.P_CountMain[playerID] = 1000; s.Main_Wait(500); }
        if EUDIf()(v.P_CountMain[playerID] == 999):
            _ARRW(v.P_CountMain, playerID) << (1000)
            s.Main_Wait(500)
            # (Line 19) else if 	(v.P_CountMain[playerID] == 1000)	{ v.P_CountMain[playerID] = 0; v.P_LoopMain[playerID] = 0; v.P_SkillDelay[playerID] = 12; }
        if EUDElseIf()(v.P_CountMain[playerID] == 1000):
            _ARRW(v.P_CountMain, playerID) << (0)
            _ARRW(v.P_LoopMain, playerID) << (0)
            _ARRW(v.P_SkillDelay, playerID) << (12)
            # (Line 20) }
        EUDEndIf()
        # (Line 22) if 		(v.P_SkillDelay[playerID] >= 2) 	{ v.P_SkillDelay[playerID] -= 1; }
    EUDEndIf()
    if EUDIf()(v.P_SkillDelay[playerID] >= 2):
        _ARRW(v.P_SkillDelay, playerID).__isub__(1)
        # (Line 23) else if 	(v.P_SkillDelay[playerID] == 1) 	{ v.P_SkillDelay[playerID] = 0; v.P_Step[playerID] = 0; }
    if EUDElseIf()(v.P_SkillDelay[playerID] == 1):
        _ARRW(v.P_SkillDelay, playerID) << (0)
        _ARRW(v.P_Step, playerID) << (0)
        # (Line 25) if (v.P_WaitMain[playerID] >= 1) { v.P_WaitMain[playerID] -= 1; }
    EUDEndIf()
    if EUDIf()(v.P_WaitMain[playerID] >= 1):
        _ARRW(v.P_WaitMain, playerID).__isub__(1)
        # (Line 26) }
    EUDEndIf()
    # (Line 29) function beforeTriggerExec()

# (Line 30) {
@EUDFunc
def beforeTriggerExec():
    # (Line 32) randomize();
    f_randomize()
    # (Line 35) foreach(Player : EUDLoopPlayer())
    for Player in EUDLoopPlayer():
        # (Line 36) {
        # (Line 37) setcurpl(Player);
        f_setcurpl(Player)
        # (Line 38) v.P_PlayerID[Player] = Player;
        _ARRW(v.P_PlayerID, Player) << (Player)
        # (Line 39) MuteUnitSpeech();
        # (Line 41) v.P_CharacterID[Player] = 51;
        DoActions(MuteUnitSpeech())
        _ARRW(v.P_CharacterID, Player) << (51)
        # (Line 42) v.P_LocationID[Player] = 32;
        _ARRW(v.P_LocationID, Player) << (32)
        # (Line 43) O.main(Player);
        O.f_main(Player)
        # (Line 45) Skill_Variable(Player);
        Skill_Variable(Player)
        # (Line 47) }
        # (Line 50) foreach (Observer : EUDLoopRange(128, 132))

    for Observer in EUDLoopRange(128, 132):
        # (Line 51) {
        # (Line 52) setcurpl(Observer);
        f_setcurpl(Observer)
        # (Line 53) MuteUnitSpeech();
        # (Line 54) }
        DoActions(MuteUnitSpeech())
        # (Line 55) }
