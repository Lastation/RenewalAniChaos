## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 4) import func.sound as sound;
from func import sound as sound
# (Line 5) import system.getUnitID as unitID;
from system import getUnitID as unitID
# (Line 6) import system.select as select;
from system import select as select
# (Line 7) import character.marge as marge;
from character import marge as marge
# (Line 8) import system.death as deathText;
from system import death as deathText
# (Line 9) import TriggerEditor.BGMPlayer as BGM;
from TriggerEditor import BGMPlayer as BGM
# (Line 11) import system.announce as announce;
from system import announce as announce
# (Line 12) import system.init as init;
from system import init as init
# (Line 13) import system.property as ppty;
from system import property as ppty
# (Line 14) import system.testMode	 as testmode;
from system import testMode as testmode
# (Line 16) const stb = StringBuffer();
stb = _CGFW(lambda: [StringBuffer()], 1)[0]
# (Line 18) function onPluginStart() 	// 초기화 함수
# (Line 19) {
@EUDFunc
def onPluginStart():
    # (Line 20) foreach(playerID : EUDLoopPlayer())
    for playerID in EUDLoopPlayer():
        # (Line 21) {
        # (Line 22) setcurpl(playerID);
        f_setcurpl(playerID)
        # (Line 23) BGM.loadSound();
        BGM.f_loadSound()
        # (Line 24) BGM.SetBGM(0);
        BGM.SetBGM(0)
        # (Line 25) }
        # (Line 26) }

    # (Line 28) function beforeTriggerExec()

# (Line 29) {
@EUDFunc
def beforeTriggerExec():
    # (Line 31) randomize();
    f_randomize()
    # (Line 34) foreach(playerID : EUDLoopPlayer())
    for playerID in EUDLoopPlayer():
        # (Line 35) {
        # (Line 36) setcurpl(playerID);
        f_setcurpl(playerID)
        # (Line 37) unitID.getUnitID(playerID);
        unitID.f_getUnitID(playerID)
        # (Line 38) announce.Announce_Marge(playerID);
        announce.Announce_Marge(playerID)
        # (Line 40) if (Switch("StartSwitch", Cleared))
        if EUDIf()(Switch("StartSwitch", Cleared)):
            # (Line 41) {
            # (Line 42) select.SelectText(playerID);
            select.SelectText(playerID)
            # (Line 43) ppty.PropertyText(playerID);
            ppty.PropertyText(playerID)
            # (Line 45) unitID.InitUnitID(playerID);
            unitID.InitUnitID(playerID)
            # (Line 47) if (Switch("TestModeSwitch", Set)) { testmode.TestMode(playerID); }
            if EUDIf()(Switch("TestModeSwitch", Set)):
                testmode.TestMode(playerID)
                # (Line 48) }
            EUDEndIf()
            # (Line 49) else
            # (Line 50) {
        if EUDElse()():
            # (Line 51) marge.main(playerID);
            marge.f_main(playerID)
            # (Line 52) sound.OldVoicemain();
            sound.OldVoicemain()
            # (Line 53) sound.main(playerID);
            sound.f_main(playerID)
            # (Line 54) ppty.Property(playerID);
            ppty.Property(playerID)
            # (Line 56) deathText.SetDeathValue(playerID);
            deathText.SetDeathValue(playerID)
            # (Line 57) deathText.SetKillScore(playerID);
            deathText.SetKillScore(playerID)
            # (Line 59) init.SetBuildingHP(playerID);
            init.SetBuildingHP(playerID)
            # (Line 60) init.SetVariable(playerID);
            init.SetVariable(playerID)
            # (Line 62) if (Bring(playerID, AtLeast, 1, "Terran SCV", "[BGM]ON"))
            if EUDIf()(Bring(playerID, AtLeast, 1, "Terran SCV", "[BGM]ON")):
                # (Line 63) {
                # (Line 64) BGM.Play();
                BGM.Play()
                # (Line 65) }
                # (Line 66) }
            EUDEndIf()
            # (Line 68) if (v.P_HeroID[playerID] != dwread_epd(EPD(0x58A364 + 48 * 172 + 4 * playerID)))
        EUDEndIf()
        if EUDIf()(v.P_HeroID[playerID] == f_dwread_epd(EPD(0x58A364 + 48 * 172 + 4 * playerID)), neg=True):
            # (Line 69) { v.P_HeroID[playerID] = dwread_epd(EPD(0x58A364 + 48 * 172 + 4 * playerID)); }
            _ARRW(v.P_HeroID, playerID) << (f_dwread_epd(EPD(0x58A364 + 48 * 172 + 4 * playerID)))
            # (Line 71) MuteUnitSpeech();
        EUDEndIf()
        # (Line 72) }
        DoActions(MuteUnitSpeech())
        # (Line 75) foreach (observerID : EUDLoopRange(128, 132))

    for observerID in EUDLoopRange(128, 132):
        # (Line 76) {
        # (Line 77) setcurpl(observerID);
        f_setcurpl(observerID)
        # (Line 78) MuteUnitSpeech();
        # (Line 79) sound.OldVoicemain();
        DoActions(MuteUnitSpeech())
        sound.OldVoicemain()
        # (Line 80) sound.main(observerID);
        sound.f_main(observerID)
        # (Line 81) }
        # (Line 82) }
