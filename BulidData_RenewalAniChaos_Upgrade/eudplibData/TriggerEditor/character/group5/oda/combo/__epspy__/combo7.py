## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import variable as v;
import variable as v
# (Line 2) import func.trig as trg;
from func import trig as trg
# (Line 3) import func.trigadv as adv;
from func import trigadv as adv
# (Line 4) import func.sound as s;
from func import sound as s
# (Line 6) function EdgeShapeAt(playerID : TrgPlayer, count, Unit : TrgUnit, degree, n, interval, x, y);
# (Line 8) function main(playerID)
# (Line 9) {
@EUDFunc
def f_main(playerID):
    # (Line 10) MoveUnit(All, "50 + 1n Battlecruiser", playerID, "Anywhere", "[Skill]HoldPosition");
    # (Line 11) MoveUnit(All, "40 + 1n Gantrithor", playerID, "Anywhere", "[Skill]HoldPosition");
    DoActions(MoveUnit(All, "50 + 1n Battlecruiser", playerID, "Anywhere", "[Skill]HoldPosition"))
    # (Line 13) trg.Debuff_BanReturn();
    DoActions(MoveUnit(All, "40 + 1n Gantrithor", playerID, "Anywhere", "[Skill]HoldPosition"))
    trg.Debuff_BanReturn()
    # (Line 14) trg.Debuff_Stop();
    trg.Debuff_Stop()
    # (Line 16) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 17) {
        # (Line 18) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 19) {
            # (Line 20) trg.Table_Sin(playerID, 22 * v.P_LoopMain[playerID], 150);
            trg.Table_Sin(playerID, 22 * v.P_LoopMain[playerID], 150)
            # (Line 21) trg.Table_Cos(playerID, 22 * v.P_LoopMain[playerID], 150);
            trg.Table_Cos(playerID, 22 * v.P_LoopMain[playerID], 150)
            # (Line 23) var x = v.P_AngleCos[playerID];
            x = EUDVariable()
            x << (v.P_AngleCos[playerID])
            # (Line 24) var y = v.P_AngleSin[playerID];
            y = EUDVariable()
            y << (v.P_AngleSin[playerID])
            # (Line 26) trg.Shape_Square(playerID, 1, "40 + 1n Lurker", x, y);
            trg.Shape_Square(playerID, 1, "40 + 1n Lurker", x, y)
            # (Line 27) KillUnitAt(All, "40 + 1n Lurker", "Anywhere", playerID);
            # (Line 29) trg.Main_Wait(80);
            DoActions(KillUnitAt(All, "40 + 1n Lurker", "Anywhere", playerID))
            trg.Main_Wait(80)
            # (Line 31) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 33) if (v.P_LoopMain[playerID] == 4)
            if EUDIf()(v.P_LoopMain[playerID] == 4):
                # (Line 34) {
                # (Line 35) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 36) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 37) }
                # (Line 38) }
            EUDEndIf()
            # (Line 39) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 40) {
            # (Line 41) RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
            # (Line 43) trg.Table_Sin(playerID, 45 * v.P_LoopMain[playerID], 100);
            DoActions(RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
            trg.Table_Sin(playerID, 45 * v.P_LoopMain[playerID], 100)
            # (Line 44) trg.Table_Cos(playerID, 45 * v.P_LoopMain[playerID], 100);
            trg.Table_Cos(playerID, 45 * v.P_LoopMain[playerID], 100)
            # (Line 46) var x = v.P_AngleCos[playerID];
            x = EUDVariable()
            x << (v.P_AngleCos[playerID])
            # (Line 47) var y = v.P_AngleSin[playerID];
            y = EUDVariable()
            y << (v.P_AngleSin[playerID])
            # (Line 49) trg.Shape_Double(playerID, 1, "40 + 1n Wraith", x, y);
            trg.Shape_Double(playerID, 1, "40 + 1n Wraith", x, y)
            # (Line 50) trg.Shape_Double(playerID, 1, "Scantid (Desert)", x, y);
            trg.Shape_Double(playerID, 1, "Scantid (Desert)", x, y)
            # (Line 51) KillUnitAt(All, "Scantid (Desert)", "Anywhere", playerID);
            # (Line 53) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
            DoActions(KillUnitAt(All, "Scantid (Desert)", "Anywhere", playerID))
            # (Line 54) Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
            # (Line 56) trg.Main_Wait(80);
            DoActions(Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
            trg.Main_Wait(80)
            # (Line 58) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 60) if (v.P_LoopMain[playerID] == 4)
            if EUDIf()(v.P_LoopMain[playerID] == 4):
                # (Line 61) {
                # (Line 62) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 63) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 64) }
                # (Line 65) }
            EUDEndIf()
            # (Line 66) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 67) {
            # (Line 68) trg.Table_Sin(playerID, 90 - 22 * v.P_LoopMain[playerID], 150);
            trg.Table_Sin(playerID, 90 - 22 * v.P_LoopMain[playerID], 150)
            # (Line 69) trg.Table_Cos(playerID, 90 - 22 * v.P_LoopMain[playerID], 150);
            trg.Table_Cos(playerID, 90 - 22 * v.P_LoopMain[playerID], 150)
            # (Line 71) var x = v.P_AngleCos[playerID];
            x = EUDVariable()
            x << (v.P_AngleCos[playerID])
            # (Line 72) var y = v.P_AngleSin[playerID];
            y = EUDVariable()
            y << (v.P_AngleSin[playerID])
            # (Line 74) if (v.P_LoopMain[playerID] % 2 == 0)
            if EUDIf()(v.P_LoopMain[playerID] % 2 == 0):
                # (Line 75) {
                # (Line 76) RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
                # (Line 78) if (v.P_LoopMain[playerID] == 0)
                DoActions(RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                if EUDIf()(v.P_LoopMain[playerID] == 0):
                    # (Line 79) {
                    # (Line 80) trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", x, y);
                    trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", x, y)
                    # (Line 81) }
                    # (Line 82) else if (v.P_LoopMain[playerID] == 2)
                if EUDElseIf()(v.P_LoopMain[playerID] == 2):
                    # (Line 83) {
                    # (Line 84) trg.Shape_Square(playerID, 1, "100 + 1n Hyperion", x, y);
                    trg.Shape_Square(playerID, 1, "100 + 1n Hyperion", x, y)
                    # (Line 85) }
                    # (Line 86) trg.Shape_Square(playerID, 1, "50 + 1n Tank", x, y);
                EUDEndIf()
                trg.Shape_Square(playerID, 1, "50 + 1n Tank", x, y)
                # (Line 87) KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID);
                # (Line 89) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID))
                # (Line 90) Order("100 + 1n Hyperion", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 91) Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(Order("100 + 1n Hyperion", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 92) }
                DoActions(Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 93) else if (v.P_LoopMain[playerID] % 2 == 1)
            if EUDElseIf()(v.P_LoopMain[playerID] % 2 == 1):
                # (Line 94) {
                # (Line 95) trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", x, y);
                trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", x, y)
                # (Line 96) trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y);
                trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y)
                # (Line 97) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID);
                # (Line 98) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID))
                # (Line 99) }
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 101) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 103) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 105) if (v.P_LoopMain[playerID] == 4)
            if EUDIf()(v.P_LoopMain[playerID] == 4):
                # (Line 106) {
                # (Line 107) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 108) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 109) }
                # (Line 110) }
            EUDEndIf()
            # (Line 111) else if (v.P_CountMain[playerID] == 3)
        if EUDElseIf()(v.P_CountMain[playerID] == 3):
            # (Line 112) {
            # (Line 113) if (v.P_LoopMain[playerID] < 4)
            if EUDIf()(v.P_LoopMain[playerID] >= 4, neg=True):
                # (Line 114) {
                # (Line 115) var x = 300 - 75 * v.P_LoopMain[playerID];
                x = EUDVariable()
                x << (300 - 75 * v.P_LoopMain[playerID])
                # (Line 116) var y = 75 * v.P_LoopMain[playerID];
                y = EUDVariable()
                y << (75 * v.P_LoopMain[playerID])
                # (Line 118) trg.Shape_Square(playerID, 1, "60 + 1n Siege", x, y);
                trg.Shape_Square(playerID, 1, "60 + 1n Siege", x, y)
                # (Line 119) trg.Shape_Square(playerID, 8, "Protoss Dark Archon", x, y);
                trg.Shape_Square(playerID, 8, "Protoss Dark Archon", x, y)
                # (Line 120) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 122) if (v.P_LoopMain[playerID] == 0)
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                if EUDIf()(v.P_LoopMain[playerID] == 0):
                    # (Line 123) {
                    # (Line 124) KillUnitAt(All, "100 + 1n Hyperion", "Anywhere", playerID);
                    # (Line 126) trg.Table_Sin(playerID, 90, 150);
                    DoActions(KillUnitAt(All, "100 + 1n Hyperion", "Anywhere", playerID))
                    trg.Table_Sin(playerID, 90, 150)
                    # (Line 127) trg.Table_Cos(playerID, 90, 150);
                    trg.Table_Cos(playerID, 90, 150)
                    # (Line 129) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 130) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 132) trg.Shape_Square(playerID, 9, "60 + 1n Archon", x, y);
                    trg.Shape_Square(playerID, 9, "60 + 1n Archon", x, y)
                    # (Line 133) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                    # (Line 135) }
                    DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                    # (Line 136) else if (v.P_LoopMain[playerID] == 2)
                if EUDElseIf()(v.P_LoopMain[playerID] == 2):
                    # (Line 137) {
                    # (Line 138) trg.Table_Sin(playerID, 45, 150);
                    trg.Table_Sin(playerID, 45, 150)
                    # (Line 139) trg.Table_Cos(playerID, 45, 150);
                    trg.Table_Cos(playerID, 45, 150)
                    # (Line 141) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 142) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 144) trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", x, y);
                    trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", x, y)
                    # (Line 145) trg.Shape_Square(playerID, 9, "60 + 1n Archon", x, y);
                    trg.Shape_Square(playerID, 9, "60 + 1n Archon", x, y)
                    # (Line 146) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                    # (Line 147) }
                    DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                    # (Line 148) }
                EUDEndIf()
                # (Line 150) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 152) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 154) if (v.P_LoopMain[playerID] == 4)
            if EUDIf()(v.P_LoopMain[playerID] == 4):
                # (Line 155) {
                # (Line 156) ModifyUnitHangarCount(2, All, "40 + 1n Gantrithor", CurrentPlayer, "Anywhere");
                # (Line 157) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(ModifyUnitHangarCount(2, All, "40 + 1n Gantrithor", CurrentPlayer, "Anywhere"))
                # (Line 158) Order("40 + 1n Gantrithor", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 160) v.P_CountMain[playerID] += 1;
                DoActions(Order("40 + 1n Gantrithor", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 161) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 162) }
                # (Line 163) }
            EUDEndIf()
            # (Line 164) else if (v.P_CountMain[playerID] == 4)
        if EUDElseIf()(v.P_CountMain[playerID] == 4):
            # (Line 165) {
            # (Line 166) var x = 0;
            x = EUDVariable()
            x << (0)
            # (Line 167) var y = 0;
            y = EUDVariable()
            y << (0)
            # (Line 169) if (v.P_LoopMain[playerID] < 4)
            if EUDIf()(v.P_LoopMain[playerID] >= 4, neg=True):
                # (Line 170) {
                # (Line 171) var i = 0;
                i = EUDVariable()
                i << (0)
                # (Line 173) for (; i <= v.P_LoopMain[playerID]; i++)
                if EUDWhile()(i <= v.P_LoopMain[playerID]):
                    def _t20():
                        i.__iadd__(1)
                    # (Line 174) {
                    # (Line 175) trg.Table_Sin(playerID, 22 + 45 * i, 50 + 75 * i);
                    trg.Table_Sin(playerID, 22 + 45 * i, 50 + 75 * i)
                    # (Line 176) trg.Table_Cos(playerID, 22 + 45 * i, 50 + 75 * i);
                    trg.Table_Cos(playerID, 22 + 45 * i, 50 + 75 * i)
                    # (Line 178) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 179) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 181) EdgeShapeAt(playerID, 1, "60 + 1n High Templar", 22, 3, 32, x, y);
                    EdgeShapeAt(playerID, 1, "60 + 1n High Templar", 22, 3, 32, x, y)
                    # (Line 182) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
                    # (Line 183) }
                    DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
                    # (Line 184) }
                    EUDSetContinuePoint()
                    _t20()
                EUDEndWhile()
                # (Line 186) var r = 0;
            EUDEndIf()
            r = EUDVariable()
            r << (0)
            # (Line 187) var d = 0;
            d = EUDVariable()
            d << (0)
            # (Line 189) if (v.P_LoopMain[playerID] == 3)
            if EUDIf()(v.P_LoopMain[playerID] == 3):
                # (Line 190) {
                # (Line 191) r = 22;
                r << (22)
                # (Line 192) d = 200;
                d << (200)
                # (Line 193) }
                # (Line 194) else if (v.P_LoopMain[playerID] == 4)
            if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                # (Line 195) {
                # (Line 196) r = 67;
                r << (67)
                # (Line 197) d = 150;
                d << (150)
                # (Line 198) }
                # (Line 199) else if (v.P_LoopMain[playerID] == 5)
            if EUDElseIf()(v.P_LoopMain[playerID] == 5):
                # (Line 200) {
                # (Line 201) r = 22;
                r << (22)
                # (Line 202) d = 250;
                d << (250)
                # (Line 203) }
                # (Line 204) else if (v.P_LoopMain[playerID] == 6)
            if EUDElseIf()(v.P_LoopMain[playerID] == 6):
                # (Line 205) {
                # (Line 206) r = 67;
                r << (67)
                # (Line 207) d = 100;
                d << (100)
                # (Line 208) }
                # (Line 209) else if (v.P_LoopMain[playerID] == 7)
            if EUDElseIf()(v.P_LoopMain[playerID] == 7):
                # (Line 210) {
                # (Line 211) r = 67;
                r << (67)
                # (Line 212) d = 250;
                d << (250)
                # (Line 213) }
                # (Line 214) else if (v.P_LoopMain[playerID] == 8)
            if EUDElseIf()(v.P_LoopMain[playerID] == 8):
                # (Line 215) {
                # (Line 216) r = 22;
                r << (22)
                # (Line 217) d = 150;
                d << (150)
                # (Line 218) }
                # (Line 219) else if (v.P_LoopMain[playerID] == 9)
            if EUDElseIf()(v.P_LoopMain[playerID] == 9):
                # (Line 220) {
                # (Line 221) r = 22;
                r << (22)
                # (Line 222) d = 250;
                d << (250)
                # (Line 224) SetSwitch("Recall - Oda", Set);
                # (Line 225) }
                DoActions(SetSwitch("Recall - Oda", Set))
                # (Line 228) if (v.P_LoopMain[playerID] >= 3 && v.P_LoopMain[playerID] < 10)
            EUDEndIf()
            if EUDIf()(EUDSCAnd()(v.P_LoopMain[playerID] >= 3)(v.P_LoopMain[playerID] >= 10, neg=True)()):
                # (Line 229) {
                # (Line 230) trg.Table_Sin(playerID, r, d);
                trg.Table_Sin(playerID, r, d)
                # (Line 231) trg.Table_Cos(playerID, r, d);
                trg.Table_Cos(playerID, r, d)
                # (Line 233) x = v.P_AngleCos[playerID];
                x << (v.P_AngleCos[playerID])
                # (Line 234) y = v.P_AngleSin[playerID];
                y << (v.P_AngleSin[playerID])
                # (Line 236) EdgeShapeAt(playerID, 1, "40 + 1n Mojo", 22, 2, 50, x, y);
                EdgeShapeAt(playerID, 1, "40 + 1n Mojo", 22, 2, 50, x, y)
                # (Line 237) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
                # (Line 239) trg.Table_Sin(playerID, r + 90, d);
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
                trg.Table_Sin(playerID, r + 90, d)
                # (Line 240) trg.Table_Cos(playerID, r + 90, d);
                trg.Table_Cos(playerID, r + 90, d)
                # (Line 242) x = v.P_AngleCos[playerID];
                x << (v.P_AngleCos[playerID])
                # (Line 243) y = v.P_AngleSin[playerID];
                y << (v.P_AngleSin[playerID])
                # (Line 245) EdgeShapeAt(playerID, 1, "Target", 22, 3, 32, x, y);
                EdgeShapeAt(playerID, 1, "Target", 22, 3, 32, x, y)
                # (Line 246) EdgeShapeAt(playerID, 1, "60 + 1n Archon", 22, 2, 50, x, y);
                EdgeShapeAt(playerID, 1, "60 + 1n Archon", 22, 2, 50, x, y)
                # (Line 247) KillUnitAt(All, "Target", "Anywhere", playerID);
                # (Line 248) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "Target", "Anywhere", playerID))
                # (Line 250) if (v.P_LoopMain[playerID] % 2 == 1)
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                if EUDIf()(v.P_LoopMain[playerID] % 2 == 1):
                    # (Line 251) {
                    # (Line 252) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                    # (Line 253) Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                    # (Line 254) }
                    DoActions(Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                    # (Line 256) if (v.P_LoopMain[playerID] == 3)
                EUDEndIf()
                if EUDIf()(v.P_LoopMain[playerID] == 3):
                    # (Line 257) {
                    # (Line 258) trg.Shape_Square(playerID, 1, "40 + 1n Goliath", x, y);
                    trg.Shape_Square(playerID, 1, "40 + 1n Goliath", x, y)
                    # (Line 260) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                    # (Line 261) MoveUnit(All, "40 + 1n Goliath", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                    # (Line 262) Order("40 + 1n Goliath", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                    DoActions(MoveUnit(All, "40 + 1n Goliath", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                    # (Line 263) }
                    DoActions(Order("40 + 1n Goliath", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                    # (Line 264) if (v.P_LoopMain[playerID] == 4)
                EUDEndIf()
                if EUDIf()(v.P_LoopMain[playerID] == 4):
                    # (Line 265) {
                    # (Line 266) trg.Shape_Square(playerID, 1, "40 + 1n Drone", x, y);
                    trg.Shape_Square(playerID, 1, "40 + 1n Drone", x, y)
                    # (Line 268) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                    # (Line 269) MoveUnit(All, "40 + 1n Drone", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                    # (Line 270) Order("40 + 1n Drone", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                    DoActions(MoveUnit(All, "40 + 1n Drone", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                    # (Line 271) }
                    DoActions(Order("40 + 1n Drone", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                    # (Line 272) if (v.P_LoopMain[playerID] == 5)
                EUDEndIf()
                if EUDIf()(v.P_LoopMain[playerID] == 5):
                    # (Line 273) {
                    # (Line 274) trg.Shape_Square(playerID, 1, "50 + 1n Tank", x, y);
                    trg.Shape_Square(playerID, 1, "50 + 1n Tank", x, y)
                    # (Line 276) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                    # (Line 277) MoveUnit(All, "50 + 1n Tank", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                    # (Line 278) Order("50 + 1n Tank", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                    DoActions(MoveUnit(All, "50 + 1n Tank", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                    # (Line 279) }
                    DoActions(Order("50 + 1n Tank", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                    # (Line 280) if (v.P_LoopMain[playerID] == 6)
                EUDEndIf()
                if EUDIf()(v.P_LoopMain[playerID] == 6):
                    # (Line 281) {
                    # (Line 282) trg.Shape_Square(playerID, 1, "40 + 1n Drone", x, y);
                    trg.Shape_Square(playerID, 1, "40 + 1n Drone", x, y)
                    # (Line 284) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                    # (Line 285) MoveUnit(All, "40 + 1n Drone", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                    # (Line 286) Order("40 + 1n Drone", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                    DoActions(MoveUnit(All, "40 + 1n Drone", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                    # (Line 287) }
                    DoActions(Order("40 + 1n Drone", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                    # (Line 288) if (v.P_LoopMain[playerID] == 7)
                EUDEndIf()
                if EUDIf()(v.P_LoopMain[playerID] == 7):
                    # (Line 289) {
                    # (Line 290) trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", x, y);
                    trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", x, y)
                    # (Line 292) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                    # (Line 293) MoveUnit(All, "60 + 1n Dragoon", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                    # (Line 294) Order("60 + 1n Dragoon", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                    DoActions(MoveUnit(All, "60 + 1n Dragoon", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                    # (Line 295) }
                    DoActions(Order("60 + 1n Dragoon", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                    # (Line 296) if (v.P_LoopMain[playerID] == 8)
                EUDEndIf()
                if EUDIf()(v.P_LoopMain[playerID] == 8):
                    # (Line 297) {
                    # (Line 298) trg.Shape_Square(playerID, 1, "40 + 1n Firebat", x, y);
                    trg.Shape_Square(playerID, 1, "40 + 1n Firebat", x, y)
                    # (Line 300) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                    # (Line 301) MoveUnit(All, "40 + 1n Firebat", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                    # (Line 302) Order("40 + 1n Firebat", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                    DoActions(MoveUnit(All, "40 + 1n Firebat", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                    # (Line 303) }
                    DoActions(Order("40 + 1n Firebat", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                    # (Line 304) if (v.P_LoopMain[playerID] == 9)
                EUDEndIf()
                if EUDIf()(v.P_LoopMain[playerID] == 9):
                    # (Line 305) {
                    # (Line 306) trg.Shape_Square(playerID, 1, "40 + 1n Drone", x, y);
                    trg.Shape_Square(playerID, 1, "40 + 1n Drone", x, y)
                    # (Line 308) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                    # (Line 309) MoveUnit(All, "40 + 1n Drone", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                    # (Line 310) Order("40 + 1n Drone", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                    DoActions(MoveUnit(All, "40 + 1n Drone", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                    # (Line 311) }
                    DoActions(Order("40 + 1n Drone", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                    # (Line 312) }
                EUDEndIf()
                # (Line 314) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 316) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 318) if (v.P_LoopMain[playerID] == 67)
            if EUDIf()(v.P_LoopMain[playerID] == 67):
                # (Line 319) {
                # (Line 320) s.CharacterVoice(23);
                s.CharacterVoice(23)
                # (Line 322) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 323) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 324) }
                # (Line 325) }
            EUDEndIf()
            # (Line 326) else if (v.P_CountMain[playerID] == 5)
        if EUDElseIf()(v.P_CountMain[playerID] == 5):
            # (Line 327) {
            # (Line 328) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 329) {
                # (Line 330) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID);
                # (Line 331) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID))
                # (Line 333) }
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                # (Line 334) if (v.P_LoopMain[playerID] == 18)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 18):
                # (Line 335) {
                # (Line 336) KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID);
                # (Line 337) KillUnitAt(All, "40 + 1n Drone", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID))
                # (Line 338) KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Drone", "Anywhere", playerID))
                # (Line 339) KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID))
                # (Line 340) KillUnitAt(All, "60 + 1n Dragoon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID))
                # (Line 341) KillUnitAt(All, "40 + 1n Firebat", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "60 + 1n Dragoon", "Anywhere", playerID))
                # (Line 343) SetSwitch("Recall - Oda", Clear);
                DoActions(KillUnitAt(All, "40 + 1n Firebat", "Anywhere", playerID))
                # (Line 344) }
                DoActions(SetSwitch("Recall - Oda", Clear))
                # (Line 346) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 348) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 350) if (v.P_LoopMain[playerID] == 19)
            if EUDIf()(v.P_LoopMain[playerID] == 19):
                # (Line 351) {
                # (Line 352) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 353) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 354) }
                # (Line 355) }
            EUDEndIf()
            # (Line 356) else if (v.P_CountMain[playerID] == 6)
        if EUDElseIf()(v.P_CountMain[playerID] == 6):
            # (Line 357) {
            # (Line 358) trg.SkillEnd();
            trg.SkillEnd()
            # (Line 359) }
            # (Line 360) }
        EUDEndIf()
        # (Line 362) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
    EUDEndIf()
    # (Line 363) }
    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
    # (Line 365) function EdgeShapeAt(playerID : TrgPlayer, count, Unit : TrgUnit, degree, n, interval, x, y)

# (Line 366) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None, None])
def EdgeShapeAt(playerID, count, Unit, degree, n, interval, x, y):
    # (Line 367) adv.Shape_EdgeAt(playerID, count, Unit, degree, n, interval, x, y);
    adv.Shape_EdgeAt(playerID, count, Unit, degree, n, interval, x, y)
    # (Line 368) adv.Shape_EdgeAt(playerID, count, Unit, degree, n, interval, -x, -y);
    adv.Shape_EdgeAt(playerID, count, Unit, degree, n, interval, -x, -y)
    # (Line 369) adv.Shape_EdgeAt(playerID, count, Unit, degree, n, interval, -y, x);
    adv.Shape_EdgeAt(playerID, count, Unit, degree, n, interval, -y, x)
    # (Line 370) adv.Shape_EdgeAt(playerID, count, Unit, degree, n, interval, y, -x);
    adv.Shape_EdgeAt(playerID, count, Unit, degree, n, interval, y, -x)
    # (Line 372) trg.Shape_Dot(playerID, count, Unit, x, y);
    trg.Shape_Dot(playerID, count, Unit, x, y)
    # (Line 373) trg.Shape_Dot(playerID, count, Unit, -x, -y);
    trg.Shape_Dot(playerID, count, Unit, -x, -y)
    # (Line 374) trg.Shape_Dot(playerID, count, Unit, -y, x);
    trg.Shape_Dot(playerID, count, Unit, -y, x)
    # (Line 375) trg.Shape_Dot(playerID, count, Unit, y, -x);
    trg.Shape_Dot(playerID, count, Unit, y, -x)
    # (Line 376) }
