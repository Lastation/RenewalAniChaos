## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 5) function main(playerID)
# (Line 6) {
@EUDFunc
def f_main(playerID):
    # (Line 7) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 8) {
        # (Line 9) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 10) {
            # (Line 11) trg.Shape_Square(playerID, 8, "Bengalaas (Jungle)", 100, 100);
            trg.Shape_Square(playerID, 8, "Bengalaas (Jungle)", 100, 100)
            # (Line 12) trg.Shape_Square(playerID, 1, "Target", 100, 100);
            trg.Shape_Square(playerID, 1, "Target", 100, 100)
            # (Line 13) trg.Shape_Dot(playerID, 1, "Target", 0, 0);
            trg.Shape_Dot(playerID, 1, "Target", 0, 0)
            # (Line 15) KillUnitAt(All, "Bengalaas (Jungle)", "Anywhere", playerID);
            # (Line 16) KillUnitAt(All, "Target", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "Bengalaas (Jungle)", "Anywhere", playerID))
            # (Line 18) RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "Target", "Anywhere", playerID))
            # (Line 20) trg.Shape_Square(playerID, 1, "40 + 1n Wraith", 25 + 25 * v.P_LoopMain[playerID], 25 + 25 * v.P_LoopMain[playerID]);
            DoActions(RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
            trg.Shape_Square(playerID, 1, "40 + 1n Wraith", 25 + 25 * v.P_LoopMain[playerID], 25 + 25 * v.P_LoopMain[playerID])
            # (Line 21) trg.Shape_Square(playerID, 1, "40 + 1n Zealot", 25 + 25 * v.P_LoopMain[playerID], 25 + 25 * v.P_LoopMain[playerID]);
            trg.Shape_Square(playerID, 1, "40 + 1n Zealot", 25 + 25 * v.P_LoopMain[playerID], 25 + 25 * v.P_LoopMain[playerID])
            # (Line 23) KillUnitAt(All, "40 + 1n Zealot", "Anywhere", playerID);
            # (Line 25) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
            DoActions(KillUnitAt(All, "40 + 1n Zealot", "Anywhere", playerID))
            # (Line 26) Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
            # (Line 28) trg.Main_Wait(160);
            DoActions(Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
            trg.Main_Wait(160)
            # (Line 30) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 32) if (v.P_LoopMain[playerID] == 4)
            if EUDIf()(v.P_LoopMain[playerID] == 4):
                # (Line 33) {
                # (Line 34) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 35) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 36) }
                # (Line 37) }
            EUDEndIf()
            # (Line 38) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 39) {
            # (Line 40) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 41) {
                # (Line 42) RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
                # (Line 44) trg.Shape_Square(playerID, 1, "Protoss Dark Archon", 100, 100);
                DoActions(RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                trg.Shape_Square(playerID, 1, "Protoss Dark Archon", 100, 100)
                # (Line 45) trg.Shape_Square(playerID, 1, "Target", 100, 100);
                trg.Shape_Square(playerID, 1, "Target", 100, 100)
                # (Line 46) trg.Shape_Dot(playerID, 1, "Target", 0, 0);
                trg.Shape_Dot(playerID, 1, "Target", 0, 0)
                # (Line 47) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 48) KillUnitAt(All, "Target", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 49) }
                DoActions(KillUnitAt(All, "Target", "Anywhere", playerID))
                # (Line 50) else if (v.P_LoopMain[playerID] == 1)
            if EUDElseIf()(v.P_LoopMain[playerID] == 1):
                # (Line 51) {
                # (Line 52) trg.Shape_Square(playerID, 1, "60 + 1n Archon", 100, 100);
                trg.Shape_Square(playerID, 1, "60 + 1n Archon", 100, 100)
                # (Line 53) trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", 100, 100);
                trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", 100, 100)
                # (Line 54) trg.Shape_Dot(playerID, 1, "50 + 1n Battlecruiser", 0, 0);
                trg.Shape_Dot(playerID, 1, "50 + 1n Battlecruiser", 0, 0)
                # (Line 55) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                # (Line 57) Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 58) }
                DoActions(Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, "Anywhere"))
                # (Line 60) trg.Shape_Square(playerID, 1, "Protoss Dark Archon", -100 + 50 * v.P_LoopMain[playerID], 100);
            EUDEndIf()
            trg.Shape_Square(playerID, 1, "Protoss Dark Archon", -100 + 50 * v.P_LoopMain[playerID], 100)
            # (Line 61) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
            # (Line 63) trg.Main_Wait(160);
            DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
            trg.Main_Wait(160)
            # (Line 65) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 67) if (v.P_LoopMain[playerID] == 4)
            if EUDIf()(v.P_LoopMain[playerID] == 4):
                # (Line 68) {
                # (Line 69) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 71) v.P_CountMain[playerID] += 1;
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 72) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 73) }
                # (Line 74) }
            EUDEndIf()
            # (Line 75) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 76) {
            # (Line 77) KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID);
            # (Line 79) trg.Table_Sin(playerID, 30 * v.P_LoopMain[playerID], 100);
            DoActions(KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID))
            trg.Table_Sin(playerID, 30 * v.P_LoopMain[playerID], 100)
            # (Line 80) trg.Table_Cos(playerID, 30 * v.P_LoopMain[playerID], 100);
            trg.Table_Cos(playerID, 30 * v.P_LoopMain[playerID], 100)
            # (Line 82) trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
            # (Line 83) trg.Shape_Square(playerID, 1, "40 + 1n Goliath", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID, 1, "40 + 1n Goliath", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
            # (Line 85) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
            # (Line 87) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
            DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
            # (Line 88) MoveUnit(All, "40 + 1n Goliath", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
            DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
            # (Line 89) Order("40 + 1n Goliath", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            DoActions(MoveUnit(All, "40 + 1n Goliath", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
            # (Line 91) trg.Main_Wait(160);
            DoActions(Order("40 + 1n Goliath", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
            trg.Main_Wait(160)
            # (Line 93) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 95) if (v.P_LoopMain[playerID] == 3)
            if EUDIf()(v.P_LoopMain[playerID] == 3):
                # (Line 96) {
                # (Line 97) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 98) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 99) }
                # (Line 100) }
            EUDEndIf()
            # (Line 101) else if (v.P_CountMain[playerID] == 3)
        if EUDElseIf()(v.P_CountMain[playerID] == 3):
            # (Line 102) {
            # (Line 103) KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID);
            # (Line 105) trg.SkillEnd();
            DoActions(KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID))
            trg.SkillEnd()
            # (Line 106) }
            # (Line 107) }
        EUDEndIf()
        # (Line 108) }
    EUDEndIf()
