## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _RELIMP(path, mod_name):
    import inspect, pathlib, importlib.util
    p = pathlib.Path(inspect.getabsfile(inspect.currentframe())).parent
    for s in path.split("."):
        if s == "":  p = p.parent
        else:  p = p / s
    try:
        spec = importlib.util.spec_from_file_location(mod_name, p / (mod_name + ".py"))
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
    except FileNotFoundError:
        loader = EPSLoader(mod_name, str(p / (mod_name + ".eps")))
        spec = importlib.util.spec_from_loader(mod_name, loader)
        module = loader.create_module(spec)
        loader.exec_module(module)
    return module

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 5) function main(playerID)
# (Line 6) {
@EUDFunc
def f_main(playerID):
    # (Line 7) trg.Debuff_BanReturn();
    trg.Debuff_BanReturn()
    # (Line 8) trg.Debuff_Stop();
    trg.Debuff_Stop()
    # (Line 10) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 11) {
        # (Line 12) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 13) {
            # (Line 14) RemoveUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID);
            # (Line 16) var d = 105 - 10 * v.P_LoopMain[playerID];
            DoActions(RemoveUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID))
            d = EUDVariable()
            d << (105 - 10 * v.P_LoopMain[playerID])
            # (Line 18) trg.Shape_Edge(playerID, 1, "40 + 1n Mutalisk", 45, 3, d);
            trg.Shape_Edge(playerID, 1, "40 + 1n Mutalisk", 45, 3, d)
            # (Line 19) trg.Shape_Edge(playerID, 1, "Protoss Dark Archon", 45, 3, d);
            trg.Shape_Edge(playerID, 1, "Protoss Dark Archon", 45, 3, d)
            # (Line 20) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
            # (Line 22) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
            DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
            # (Line 23) Order("40 + 1n Mutalisk", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
            # (Line 25) trg.Shape_Edge(playerID, 1, "Bengalaas (Jungle)", 45, 3, 50);
            DoActions(Order("40 + 1n Mutalisk", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
            trg.Shape_Edge(playerID, 1, "Bengalaas (Jungle)", 45, 3, 50)
            # (Line 26) trg.Shape_Dot(playerID, 1, "40 + 1n Guardian", 0, 0);
            trg.Shape_Dot(playerID, 1, "40 + 1n Guardian", 0, 0)
            # (Line 27) KillUnitAt(All, "Bengalaas (Jungle)", "Anywhere", playerID);
            # (Line 28) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "Bengalaas (Jungle)", "Anywhere", playerID))
            # (Line 30) trg.Main_Wait(80);
            DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
            trg.Main_Wait(80)
            # (Line 32) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 34) if (v.P_LoopMain[playerID] == 4)
            if EUDIf()(v.P_LoopMain[playerID] == 4):
                # (Line 35) {
                # (Line 36) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 37) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 38) }
                # (Line 39) }
            EUDEndIf()
            # (Line 40) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 41) {
            # (Line 42) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 43) {
                # (Line 44) RemoveUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID);
                # (Line 45) }
                DoActions(RemoveUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID))
                # (Line 47) if (v.P_LoopMain[playerID] < 2)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] >= 2, neg=True):
                # (Line 48) {
                # (Line 49) trg.Shape_Edge(playerID, 1, "Protoss Dark Archon", 45, 3 + 2 * v.P_LoopMain[playerID], 50 + 50 * v.P_LoopMain[playerID]);
                trg.Shape_Edge(playerID, 1, "Protoss Dark Archon", 45, 3 + 2 * v.P_LoopMain[playerID], 50 + 50 * v.P_LoopMain[playerID])
                # (Line 50) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 51) }
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 52) else if (v.P_LoopMain[playerID] < 6)
            if EUDElseIf()(v.P_LoopMain[playerID] >= 6, neg=True):
                # (Line 53) {
                # (Line 54) RemoveUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID);
                # (Line 56) var i = v.P_LoopMain[playerID] - 2;
                DoActions(RemoveUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID))
                i = EUDVariable()
                i << (v.P_LoopMain[playerID] - 2)
                # (Line 58) var x = 50 - 50 * i;
                x = EUDVariable()
                x << (50 - 50 * i)
                # (Line 59) var y = 100;
                y = EUDVariable()
                y << (100)
                # (Line 61) trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", x, y);
                trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", x, y)
                # (Line 62) trg.Shape_Square(playerID, 1, "Rhynadon (Badlands)", x, y);
                trg.Shape_Square(playerID, 1, "Rhynadon (Badlands)", x, y)
                # (Line 63) KillUnitAt(All, "Rhynadon (Badlands)", "Anywhere", playerID);
                # (Line 65) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "Rhynadon (Badlands)", "Anywhere", playerID))
                # (Line 66) Order("40 + 1n Mutalisk", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 68) x = 100 - 50 * i;
                DoActions(Order("40 + 1n Mutalisk", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                x << (100 - 50 * i)
                # (Line 69) y = 100;
                y << (100)
                # (Line 71) trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", x, y);
                trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", x, y)
                # (Line 72) trg.Shape_Square(playerID, 1, "Bengalaas (Jungle)", x, y);
                trg.Shape_Square(playerID, 1, "Bengalaas (Jungle)", x, y)
                # (Line 73) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                # (Line 74) KillUnitAt(All, "Bengalaas (Jungle)", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                # (Line 76) if (v.P_LoopMain[playerID] == 5)
                DoActions(KillUnitAt(All, "Bengalaas (Jungle)", "Anywhere", playerID))
                if EUDIf()(v.P_LoopMain[playerID] == 5):
                    # (Line 77) {
                    # (Line 78) trg.Shape_Square(playerID, 1, "Target", 150, 150);
                    trg.Shape_Square(playerID, 1, "Target", 150, 150)
                    # (Line 79) KillUnitAt(All, "Target", "Anywhere", playerID);
                    # (Line 80) }
                    DoActions(KillUnitAt(All, "Target", "Anywhere", playerID))
                    # (Line 81) }
                EUDEndIf()
                # (Line 82) else if (v.P_LoopMain[playerID] == 6)
            if EUDElseIf()(v.P_LoopMain[playerID] == 6):
                # (Line 83) {
                # (Line 84) RemoveUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID);
                # (Line 86) trg.Shape_Square(playerID, 1, "Target", 50, 50);
                DoActions(RemoveUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID))
                trg.Shape_Square(playerID, 1, "Target", 50, 50)
                # (Line 87) KillUnitAt(All, "Target", "Anywhere", playerID);
                # (Line 88) }
                DoActions(KillUnitAt(All, "Target", "Anywhere", playerID))
                # (Line 89) else if (v.P_LoopMain[playerID] == 7)
            if EUDElseIf()(v.P_LoopMain[playerID] == 7):
                # (Line 90) {
                # (Line 91) trg.Shape_Dot(playerID, 1, "Target", 0, 0);
                trg.Shape_Dot(playerID, 1, "Target", 0, 0)
                # (Line 92) KillUnitAt(All, "Target", "Anywhere", playerID);
                # (Line 93) }
                DoActions(KillUnitAt(All, "Target", "Anywhere", playerID))
                # (Line 94) else if (v.P_LoopMain[playerID] == 8)
            if EUDElseIf()(v.P_LoopMain[playerID] == 8):
                # (Line 95) {
                # (Line 96) trg.Shape_NxNSquare(playerID, 1, "40 + 1n Mutalisk", 3, 50);
                trg.Shape_NxNSquare(playerID, 1, "40 + 1n Mutalisk", 3, 50)
                # (Line 97) trg.Shape_NxNSquare(playerID, 1, "Rhynadon (Badlands)", 3, 50);
                trg.Shape_NxNSquare(playerID, 1, "Rhynadon (Badlands)", 3, 50)
                # (Line 98) KillUnitAt(All, "Rhynadon (Badlands)", "Anywhere", playerID);
                # (Line 100) Order("40 + 1n Mutalisk", playerID, "Anywhere", Attack, "Anywhere");
                DoActions(KillUnitAt(All, "Rhynadon (Badlands)", "Anywhere", playerID))
                # (Line 101) }
                DoActions(Order("40 + 1n Mutalisk", playerID, "Anywhere", Attack, "Anywhere"))
                # (Line 102) else if (v.P_LoopMain[playerID] == 10)
            if EUDElseIf()(v.P_LoopMain[playerID] == 10):
                # (Line 103) {
                # (Line 104) trg.Shape_Edge(playerID, 1, "Rhynadon (Badlands)", 45, 5, 100);
                trg.Shape_Edge(playerID, 1, "Rhynadon (Badlands)", 45, 5, 100)
                # (Line 105) KillUnitAt(All, "Rhynadon (Badlands)", "Anywhere", playerID);
                # (Line 106) }
                DoActions(KillUnitAt(All, "Rhynadon (Badlands)", "Anywhere", playerID))
                # (Line 108) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 110) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 112) if (v.P_LoopMain[playerID] == 12)
            if EUDIf()(v.P_LoopMain[playerID] == 12):
                # (Line 113) {
                # (Line 114) KillUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID);
                # (Line 116) v.P_CountMain[playerID] += 1;
                DoActions(KillUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID))
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 117) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 118) }
                # (Line 119) }
            EUDEndIf()
            # (Line 120) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 121) {
            # (Line 122) KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID);
            # (Line 124) trg.Table_Sin(playerID, 30 * v.P_LoopMain[playerID], 100);
            DoActions(KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID))
            trg.Table_Sin(playerID, 30 * v.P_LoopMain[playerID], 100)
            # (Line 125) trg.Table_Cos(playerID, 30 * v.P_LoopMain[playerID], 100);
            trg.Table_Cos(playerID, 30 * v.P_LoopMain[playerID], 100)
            # (Line 127) trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
            # (Line 128) trg.Shape_Square(playerID, 1, "40 + 1n Goliath", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID, 1, "40 + 1n Goliath", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
            # (Line 130) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
            # (Line 132) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
            DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
            # (Line 133) MoveUnit(All, "40 + 1n Goliath", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
            DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
            # (Line 134) Order("40 + 1n Goliath", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            DoActions(MoveUnit(All, "40 + 1n Goliath", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
            # (Line 136) trg.Main_Wait(160);
            DoActions(Order("40 + 1n Goliath", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
            trg.Main_Wait(160)
            # (Line 138) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 140) if (v.P_LoopMain[playerID] == 4)
            if EUDIf()(v.P_LoopMain[playerID] == 4):
                # (Line 141) {
                # (Line 142) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 143) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 144) }
                # (Line 145) }
            EUDEndIf()
            # (Line 146) else if (v.P_CountMain[playerID] == 3)
        if EUDElseIf()(v.P_CountMain[playerID] == 3):
            # (Line 147) {
            # (Line 148) KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID);
            # (Line 150) trg.SkillEnd();
            DoActions(KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID))
            trg.SkillEnd()
            # (Line 151) }
            # (Line 152) }
        EUDEndIf()
        # (Line 153) }
    EUDEndIf()
