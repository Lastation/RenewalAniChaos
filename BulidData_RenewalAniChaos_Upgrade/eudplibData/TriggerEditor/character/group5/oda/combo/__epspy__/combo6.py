## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _RELIMP(path, mod_name):
    import inspect, pathlib, importlib.util
    p = pathlib.Path(inspect.getabsfile(inspect.currentframe())).parent
    for s in path.split("."):
        if s == "":  p = p.parent
        else:  p = p / s
    try:
        spec = importlib.util.spec_from_file_location(mod_name, p / (mod_name + ".py"))
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
    except FileNotFoundError:
        loader = EPSLoader(mod_name, str(p / (mod_name + ".eps")))
        spec = importlib.util.spec_from_loader(mod_name, loader)
        module = loader.create_module(spec)
        loader.exec_module(module)
    return module

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 4) import func.trigadv as adv;
from func import trigadv as adv
# (Line 5) import func.sound as s;
from func import sound as s
# (Line 7) function main(playerID)
# (Line 8) {
@EUDFunc
def f_main(playerID):
    # (Line 9) MoveUnit(All, "50 + 1n Tank", playerID, "Anywhere", "[Skill]HoldPosition");
    # (Line 10) MoveUnit(All, "40 + 1n Goliath", playerID, "Anywhere", "[Skill]HoldPosition");
    DoActions(MoveUnit(All, "50 + 1n Tank", playerID, "Anywhere", "[Skill]HoldPosition"))
    # (Line 11) MoveUnit(All, "60 + 1n Dragoon", playerID, "Anywhere", "[Skill]HoldPosition");
    DoActions(MoveUnit(All, "40 + 1n Goliath", playerID, "Anywhere", "[Skill]HoldPosition"))
    # (Line 13) trg.Debuff_BanReturn();
    DoActions(MoveUnit(All, "60 + 1n Dragoon", playerID, "Anywhere", "[Skill]HoldPosition"))
    trg.Debuff_BanReturn()
    # (Line 14) trg.Debuff_Stop();
    trg.Debuff_Stop()
    # (Line 16) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 17) {
        # (Line 18) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 19) {
            # (Line 20) var i = 50;
            i = EUDVariable()
            i << (50)
            # (Line 21) var d = 25 + 25 * v.P_LoopMain[playerID];
            d = EUDVariable()
            d << (25 + 25 * v.P_LoopMain[playerID])
            # (Line 23) trg.Table_Sin(playerID, 45, 25);
            trg.Table_Sin(playerID, 45, 25)
            # (Line 24) trg.Table_Cos(playerID, 45, 25);
            trg.Table_Cos(playerID, 45, 25)
            # (Line 26) var x_i = v.P_AngleCos[playerID];
            x_i = EUDVariable()
            x_i << (v.P_AngleCos[playerID])
            # (Line 27) var y_i = v.P_AngleSin[playerID];
            y_i = EUDVariable()
            y_i << (v.P_AngleSin[playerID])
            # (Line 29) trg.Shape_Double(playerID, 1, "Vulture Spider Mine", d - i / 2 + x_i, d + i / 2 + y_i);
            trg.Shape_Double(playerID, 1, "Vulture Spider Mine", d - i // 2 + x_i, d + i // 2 + y_i)
            # (Line 30) trg.Shape_Double(playerID, 1, "Vulture Spider Mine", d - i, d + i);
            trg.Shape_Double(playerID, 1, "Vulture Spider Mine", d - i, d + i)
            # (Line 31) trg.Shape_Double(playerID, 1, "Vulture Spider Mine", d + 2 * x_i, d + 2 * y_i);
            trg.Shape_Double(playerID, 1, "Vulture Spider Mine", d + 2 * x_i, d + 2 * y_i)
            # (Line 32) trg.Shape_Double(playerID, 1, "Vulture Spider Mine", d + i, d - i);
            trg.Shape_Double(playerID, 1, "Vulture Spider Mine", d + i, d - i)
            # (Line 33) trg.Shape_Double(playerID, 1, "Vulture Spider Mine", d + i / 2 + x_i, d - i / 2 + y_i);
            trg.Shape_Double(playerID, 1, "Vulture Spider Mine", d + i // 2 + x_i, d - i // 2 + y_i)
            # (Line 35) trg.Shape_Double(playerID, 1, " Unit. Hoffnung 25000", d - i, d + i);
            trg.Shape_Double(playerID, 1, " Unit. Hoffnung 25000", d - i, d + i)
            # (Line 36) trg.Shape_Double(playerID, 1, " Unit. Hoffnung 25000", d, d);
            trg.Shape_Double(playerID, 1, " Unit. Hoffnung 25000", d, d)
            # (Line 37) trg.Shape_Double(playerID, 1, " Unit. Hoffnung 25000", d - i, d + i);
            trg.Shape_Double(playerID, 1, " Unit. Hoffnung 25000", d - i, d + i)
            # (Line 39) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
            # (Line 40) KillUnitAt(All, "Vulture Spider Mine", "Anywhere", playerID);
            DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
            # (Line 42) trg.Main_Wait(80);
            DoActions(KillUnitAt(All, "Vulture Spider Mine", "Anywhere", playerID))
            trg.Main_Wait(80)
            # (Line 44) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 46) if (v.P_LoopMain[playerID] == 6)
            if EUDIf()(v.P_LoopMain[playerID] == 6):
                # (Line 47) {
                # (Line 48) trg.Shape_Double(playerID, 1, "60 + 1n Siege", d - i / 2 + x_i, d + i / 2 + y_i);
                trg.Shape_Double(playerID, 1, "60 + 1n Siege", d - i // 2 + x_i, d + i // 2 + y_i)
                # (Line 49) trg.Shape_Double(playerID, 1, "60 + 1n Siege", d - i, d + i);
                trg.Shape_Double(playerID, 1, "60 + 1n Siege", d - i, d + i)
                # (Line 50) trg.Shape_Double(playerID, 1, "60 + 1n Siege", d + 2 * x_i, d + 2 * y_i);
                trg.Shape_Double(playerID, 1, "60 + 1n Siege", d + 2 * x_i, d + 2 * y_i)
                # (Line 51) trg.Shape_Double(playerID, 1, "60 + 1n Siege", d + i, d - i);
                trg.Shape_Double(playerID, 1, "60 + 1n Siege", d + i, d - i)
                # (Line 52) trg.Shape_Double(playerID, 1, "60 + 1n Siege", d + i / 2 + x_i, d - i / 2 + y_i);
                trg.Shape_Double(playerID, 1, "60 + 1n Siege", d + i // 2 + x_i, d - i // 2 + y_i)
                # (Line 54) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 55) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 56) }
                # (Line 57) }
            EUDEndIf()
            # (Line 58) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 59) {
            # (Line 61) var i = 50;
            i = EUDVariable()
            i << (50)
            # (Line 62) var d = 25 + 25 * v.P_LoopMain[playerID];
            d = EUDVariable()
            d << (25 + 25 * v.P_LoopMain[playerID])
            # (Line 64) trg.Table_Sin(playerID, 45, 25);
            trg.Table_Sin(playerID, 45, 25)
            # (Line 65) trg.Table_Cos(playerID, 45, 25);
            trg.Table_Cos(playerID, 45, 25)
            # (Line 67) var x_i = v.P_AngleCos[playerID];
            x_i = EUDVariable()
            x_i << (v.P_AngleCos[playerID])
            # (Line 68) var y_i = v.P_AngleSin[playerID];
            y_i = EUDVariable()
            y_i << (v.P_AngleSin[playerID])
            # (Line 70) trg.Shape_Double(playerID, 1, "Vulture Spider Mine", -d + i / 2 - x_i, d + i / 2 + y_i);
            trg.Shape_Double(playerID, 1, "Vulture Spider Mine", -d + i // 2 - x_i, d + i // 2 + y_i)
            # (Line 71) trg.Shape_Double(playerID, 1, "Vulture Spider Mine", -d + i, d + i);
            trg.Shape_Double(playerID, 1, "Vulture Spider Mine", -d + i, d + i)
            # (Line 72) trg.Shape_Double(playerID, 1, "Vulture Spider Mine", -d - 2 * x_i, d + 2 * y_i);
            trg.Shape_Double(playerID, 1, "Vulture Spider Mine", -d - 2 * x_i, d + 2 * y_i)
            # (Line 73) trg.Shape_Double(playerID, 1, "Vulture Spider Mine", -d - i, d - i);
            trg.Shape_Double(playerID, 1, "Vulture Spider Mine", -d - i, d - i)
            # (Line 74) trg.Shape_Double(playerID, 1, "Vulture Spider Mine", -d - i / 2 - x_i, d - i / 2 + y_i);
            trg.Shape_Double(playerID, 1, "Vulture Spider Mine", -d - i // 2 - x_i, d - i // 2 + y_i)
            # (Line 76) trg.Shape_Double(playerID, 1, " Unit. Hoffnung 25000", -d + i, d + i);
            trg.Shape_Double(playerID, 1, " Unit. Hoffnung 25000", -d + i, d + i)
            # (Line 77) trg.Shape_Double(playerID, 1, " Unit. Hoffnung 25000", -d, d);
            trg.Shape_Double(playerID, 1, " Unit. Hoffnung 25000", -d, d)
            # (Line 78) trg.Shape_Double(playerID, 1, " Unit. Hoffnung 25000", -d + i, d + i);
            trg.Shape_Double(playerID, 1, " Unit. Hoffnung 25000", -d + i, d + i)
            # (Line 80) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
            # (Line 81) KillUnitAt(All, "Vulture Spider Mine", "Anywhere", playerID);
            DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
            # (Line 83) trg.Main_Wait(80);
            DoActions(KillUnitAt(All, "Vulture Spider Mine", "Anywhere", playerID))
            trg.Main_Wait(80)
            # (Line 85) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 87) if (v.P_LoopMain[playerID] == 6)
            if EUDIf()(v.P_LoopMain[playerID] == 6):
                # (Line 88) {
                # (Line 89) trg.Shape_Double(playerID, 1, "60 + 1n Siege", -d + i / 2 - x_i, d + i / 2 + y_i);
                trg.Shape_Double(playerID, 1, "60 + 1n Siege", -d + i // 2 - x_i, d + i // 2 + y_i)
                # (Line 90) trg.Shape_Double(playerID, 1, "60 + 1n Siege", -d + i, d + i);
                trg.Shape_Double(playerID, 1, "60 + 1n Siege", -d + i, d + i)
                # (Line 91) trg.Shape_Double(playerID, 1, "60 + 1n Siege", -d - 2 * x_i, d + 2 * y_i);
                trg.Shape_Double(playerID, 1, "60 + 1n Siege", -d - 2 * x_i, d + 2 * y_i)
                # (Line 92) trg.Shape_Double(playerID, 1, "60 + 1n Siege", -d - i, d - i);
                trg.Shape_Double(playerID, 1, "60 + 1n Siege", -d - i, d - i)
                # (Line 93) trg.Shape_Double(playerID, 1, "60 + 1n Siege", -d - i / 2 - x_i, d - i / 2 + y_i);
                trg.Shape_Double(playerID, 1, "60 + 1n Siege", -d - i // 2 - x_i, d - i // 2 + y_i)
                # (Line 95) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 96) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 97) }
                # (Line 98) }
            EUDEndIf()
            # (Line 99) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 100) {
            # (Line 101) if (v.P_LoopMain[playerID] < 7)
            if EUDIf()(v.P_LoopMain[playerID] >= 7, neg=True):
                # (Line 102) {
                # (Line 103) var i = 50;
                i = EUDVariable()
                i << (50)
                # (Line 104) var d = 150 - 25 * v.P_LoopMain[playerID];
                d = EUDVariable()
                d << (150 - 25 * v.P_LoopMain[playerID])
                # (Line 106) trg.Table_Sin(playerID, 45, 15);
                trg.Table_Sin(playerID, 45, 15)
                # (Line 107) trg.Table_Cos(playerID, 45, 15);
                trg.Table_Cos(playerID, 45, 15)
                # (Line 109) var x_i = v.P_AngleCos[playerID];
                x_i = EUDVariable()
                x_i << (v.P_AngleCos[playerID])
                # (Line 110) var y_i = v.P_AngleSin[playerID];
                y_i = EUDVariable()
                y_i << (v.P_AngleSin[playerID])
                # (Line 112) trg.Shape_Square(playerID, 1, "40 + 1n Guardian", d - i + x_i, d + i + y_i);
                trg.Shape_Square(playerID, 1, "40 + 1n Guardian", d - i + x_i, d + i + y_i)
                # (Line 113) trg.Shape_Square(playerID, 1, "40 + 1n Guardian", d + 2 * x_i, d + 2 * y_i);
                trg.Shape_Square(playerID, 1, "40 + 1n Guardian", d + 2 * x_i, d + 2 * y_i)
                # (Line 114) trg.Shape_Square(playerID, 1, "40 + 1n Guardian", d + i + x_i, d - i + y_i);
                trg.Shape_Square(playerID, 1, "40 + 1n Guardian", d + i + x_i, d - i + y_i)
                # (Line 116) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                # (Line 118) if (v.P_LoopMain[playerID] == 1)
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                if EUDIf()(v.P_LoopMain[playerID] == 1):
                    # (Line 119) {
                    # (Line 120) trg.Shape_Square(playerID, 1, "40 + 1n Drone", d - i + x_i, d + i + y_i);
                    trg.Shape_Square(playerID, 1, "40 + 1n Drone", d - i + x_i, d + i + y_i)
                    # (Line 121) trg.Shape_Square(playerID, 1, "40 + 1n Drone", d + 2 * x_i, d + 2 * y_i);
                    trg.Shape_Square(playerID, 1, "40 + 1n Drone", d + 2 * x_i, d + 2 * y_i)
                    # (Line 122) trg.Shape_Square(playerID, 1, "40 + 1n Drone", d + i + x_i, d - i + y_i);
                    trg.Shape_Square(playerID, 1, "40 + 1n Drone", d + i + x_i, d - i + y_i)
                    # (Line 124) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                    # (Line 125) MoveUnit(All, "40 + 1n Drone", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                    # (Line 126) Order("40 + 1n Drone", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                    DoActions(MoveUnit(All, "40 + 1n Drone", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                    # (Line 128) }
                    DoActions(Order("40 + 1n Drone", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                    # (Line 129) }
                EUDEndIf()
                # (Line 131) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 133) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 135) if (v.P_LoopMain[playerID] == 9)
            if EUDIf()(v.P_LoopMain[playerID] == 9):
                # (Line 136) {
                # (Line 137) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 138) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 139) }
                # (Line 140) }
            EUDEndIf()
            # (Line 141) else if (v.P_CountMain[playerID] == 3)
        if EUDElseIf()(v.P_CountMain[playerID] == 3):
            # (Line 142) {
            # (Line 143) var i = 0;
            i = EUDVariable()
            i << (0)
            # (Line 144) var x = 0;
            x = EUDVariable()
            x << (0)
            # (Line 145) var y = 0;
            y = EUDVariable()
            y << (0)
            # (Line 147) if (v.P_LoopMain[playerID] < 4)
            if EUDIf()(v.P_LoopMain[playerID] >= 4, neg=True):
                # (Line 148) {
                # (Line 149) i = v.P_LoopMain[playerID];
                i << (v.P_LoopMain[playerID])
                # (Line 151) if (i < 2)
                if EUDIf()(i >= 2, neg=True):
                    # (Line 152) {
                    # (Line 153) x = 50 - 50 * i;
                    x << (50 - 50 * i)
                    # (Line 154) y = 50 + 50 * i;
                    y << (50 + 50 * i)
                    # (Line 155) }
                    # (Line 156) else
                    # (Line 157) {
                if EUDElse()():
                    # (Line 158) x = -50 - 50 * (i - 2);
                    x << (-50 - 50 * (i - 2))
                    # (Line 159) y = 50 - 50 * (i - 2);
                    y << (50 - 50 * (i - 2))
                    # (Line 160) }
                    # (Line 161) }
                EUDEndIf()
                # (Line 162) else if (v.P_LoopMain[playerID] < 12)
            if EUDElseIf()(v.P_LoopMain[playerID] >= 12, neg=True):
                # (Line 163) {
                # (Line 164) i = v.P_LoopMain[playerID] - 4;
                i << (v.P_LoopMain[playerID] - 4)
                # (Line 166) if (i < 4)
                if EUDIf()(i >= 4, neg=True):
                    # (Line 167) {
                    # (Line 168) x = 150 - 50 * i;
                    x << (150 - 50 * i)
                    # (Line 169) y = 50 + 50 * i;
                    y << (50 + 50 * i)
                    # (Line 170) }
                    # (Line 171) else
                    # (Line 172) {
                if EUDElse()():
                    # (Line 173) x = -50 - 50 * (i - 4);
                    x << (-50 - 50 * (i - 4))
                    # (Line 174) y = 150 - 50 * (i - 4);
                    y << (150 - 50 * (i - 4))
                    # (Line 175) }
                    # (Line 176) }
                EUDEndIf()
                # (Line 178) if (i % 2 == 0 && v.P_LoopMain[playerID] < 12)
            EUDEndIf()
            if EUDIf()(EUDSCAnd()(i % 2 == 0)(v.P_LoopMain[playerID] >= 12, neg=True)()):
                # (Line 179) {
                # (Line 180) adv.Shape_EdgeAt(playerID, 1, "Kakaru (Twilight)", 0, 2, 25, x, y);
                adv.Shape_EdgeAt(playerID, 1, "Kakaru (Twilight)", 0, 2, 25, x, y)
                # (Line 181) adv.Shape_EdgeAt(playerID, 1, "Rhynadon (Badlands)", 0, 2, 25, x, y);
                adv.Shape_EdgeAt(playerID, 1, "Rhynadon (Badlands)", 0, 2, 25, x, y)
                # (Line 182) adv.Shape_EdgeAt(playerID, 1, "Kakaru (Twilight)", 0, 2, 25, -x, -y);
                adv.Shape_EdgeAt(playerID, 1, "Kakaru (Twilight)", 0, 2, 25, -x, -y)
                # (Line 183) adv.Shape_EdgeAt(playerID, 1, "Rhynadon (Badlands)", 0, 2, 25, -x, -y);
                adv.Shape_EdgeAt(playerID, 1, "Rhynadon (Badlands)", 0, 2, 25, -x, -y)
                # (Line 185) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                # (Line 186) KillUnitAt(All, "Rhynadon (Badlands)", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                # (Line 187) }
                DoActions(KillUnitAt(All, "Rhynadon (Badlands)", "Anywhere", playerID))
                # (Line 188) else
                # (Line 189) {
            if EUDElse()():
                # (Line 190) adv.Shape_EdgeAt(playerID, 1, "40 + 1n Guardian", 0, 2, 25, x, y);
                adv.Shape_EdgeAt(playerID, 1, "40 + 1n Guardian", 0, 2, 25, x, y)
                # (Line 191) adv.Shape_EdgeAt(playerID, 1, "60 + 1n Archon", 0, 2, 25, x, y);
                adv.Shape_EdgeAt(playerID, 1, "60 + 1n Archon", 0, 2, 25, x, y)
                # (Line 192) trg.Shape_Dot(playerID, 1, "50 + 1n Tank", x, y);
                trg.Shape_Dot(playerID, 1, "50 + 1n Tank", x, y)
                # (Line 193) adv.Shape_EdgeAt(playerID, 1, "40 + 1n Guardian", 0, 2, 25, -x, -y);
                adv.Shape_EdgeAt(playerID, 1, "40 + 1n Guardian", 0, 2, 25, -x, -y)
                # (Line 194) adv.Shape_EdgeAt(playerID, 1, "60 + 1n Archon", 0, 2, 25, -x, -y);
                adv.Shape_EdgeAt(playerID, 1, "60 + 1n Archon", 0, 2, 25, -x, -y)
                # (Line 195) trg.Shape_Dot(playerID, 1, "50 + 1n Tank", -x, -y);
                trg.Shape_Dot(playerID, 1, "50 + 1n Tank", -x, -y)
                # (Line 197) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                # (Line 198) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                # (Line 200) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 201) MoveUnit(All, "50 + 1n Tank", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 202) Order("50 + 1n Tank", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "50 + 1n Tank", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 203) }
                DoActions(Order("50 + 1n Tank", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 205) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 207) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 209) if (v.P_LoopMain[playerID] == 12)
            if EUDIf()(v.P_LoopMain[playerID] == 12):
                # (Line 210) {
                # (Line 211) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 212) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 213) }
                # (Line 214) }
            EUDEndIf()
            # (Line 215) else if (v.P_CountMain[playerID] == 4)
        if EUDElseIf()(v.P_CountMain[playerID] == 4):
            # (Line 216) {
            # (Line 217) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 218) {
                # (Line 219) trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", 50, 50);
                trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", 50, 50)
                # (Line 220) trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", 50, 50);
                trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", 50, 50)
                # (Line 222) }
                # (Line 223) else if (v.P_LoopMain[playerID] == 1)
            if EUDElseIf()(v.P_LoopMain[playerID] == 1):
                # (Line 224) {
                # (Line 225) trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", 50, 150);
                trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", 50, 150)
                # (Line 226) trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", 50, 150);
                trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", 50, 150)
                # (Line 228) }
                # (Line 229) else if (v.P_LoopMain[playerID] == 2)
            if EUDElseIf()(v.P_LoopMain[playerID] == 2):
                # (Line 230) {
                # (Line 231) trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", 150, 50);
                trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", 150, 50)
                # (Line 232) trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", 150, 50);
                trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", 150, 50)
                # (Line 233) }
                # (Line 235) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID);
            EUDEndIf()
            # (Line 237) trg.Main_Wait(160);
            DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID))
            trg.Main_Wait(160)
            # (Line 239) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 241) if (v.P_LoopMain[playerID] == 9)
            if EUDIf()(v.P_LoopMain[playerID] == 9):
                # (Line 242) {
                # (Line 243) s.CharacterVoice(21);
                s.CharacterVoice(21)
                # (Line 245) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 246) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 247) }
                # (Line 248) }
            EUDEndIf()
            # (Line 249) else if (v.P_CountMain[playerID] == 5)
        if EUDElseIf()(v.P_CountMain[playerID] == 5):
            # (Line 250) {
            # (Line 251) if (v.P_LoopMain[playerID] < 6)
            if EUDIf()(v.P_LoopMain[playerID] >= 6, neg=True):
                # (Line 252) {
                # (Line 253) trg.Shape_Double(playerID, 1, "Protoss Dark Archon", 150 - 50 * v.P_LoopMain[playerID], 150);
                trg.Shape_Double(playerID, 1, "Protoss Dark Archon", 150 - 50 * v.P_LoopMain[playerID], 150)
                # (Line 254) trg.Shape_Double(playerID, 1, "80 + 1n Tank", -150, 150 - 50 * v.P_LoopMain[playerID]);
                trg.Shape_Double(playerID, 1, "80 + 1n Tank", -150, 150 - 50 * v.P_LoopMain[playerID])
                # (Line 255) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 256) KillUnitAt(All, "80 + 1n Tank", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 257) }
                DoActions(KillUnitAt(All, "80 + 1n Tank", "Anywhere", playerID))
                # (Line 259) if (v.P_LoopMain[playerID] == 0)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 260) {
                # (Line 261) trg.Shape_Edge(playerID, 1, "40 + 1n Mojo", 45, 3, 75);
                trg.Shape_Edge(playerID, 1, "40 + 1n Mojo", 45, 3, 75)
                # (Line 262) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
                # (Line 263) }
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
                # (Line 264) else if (v.P_LoopMain[playerID] == 2)
            if EUDElseIf()(v.P_LoopMain[playerID] == 2):
                # (Line 265) {
                # (Line 266) trg.Shape_Edge(playerID, 1, "40 + 1n Mojo", 45, 5, 150);
                trg.Shape_Edge(playerID, 1, "40 + 1n Mojo", 45, 5, 150)
                # (Line 267) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
                # (Line 268) }
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
                # (Line 269) else if (v.P_LoopMain[playerID] == 4)
            if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                # (Line 270) {
                # (Line 271) trg.Shape_Edge(playerID, 1, "Protoss Dark Archon", 22, 3, 75);
                trg.Shape_Edge(playerID, 1, "Protoss Dark Archon", 22, 3, 75)
                # (Line 272) trg.Shape_Edge(playerID, 1, "40 + 1n Guardian", 22, 3, 75);
                trg.Shape_Edge(playerID, 1, "40 + 1n Guardian", 22, 3, 75)
                # (Line 273) trg.Shape_Dot(playerID, 1, "40 + 1n Guardian", 0, 0);
                trg.Shape_Dot(playerID, 1, "40 + 1n Guardian", 0, 0)
                # (Line 274) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 275) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 276) }
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                # (Line 277) else if (v.P_LoopMain[playerID] == 5)
            if EUDElseIf()(v.P_LoopMain[playerID] == 5):
                # (Line 278) {
                # (Line 279) trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 45, 3, 100);
                trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 45, 3, 100)
                # (Line 280) trg.Shape_Edge(playerID, 1, "50 + 1n Battlecruiser", 45, 2, 100);
                trg.Shape_Edge(playerID, 1, "50 + 1n Battlecruiser", 45, 2, 100)
                # (Line 281) trg.Shape_Dot(playerID, 1, "50 + 1n Battlecruiser", 0, 0);
                trg.Shape_Dot(playerID, 1, "50 + 1n Battlecruiser", 0, 0)
                # (Line 282) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                # (Line 284) Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 285) }
                DoActions(Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, "Anywhere"))
                # (Line 286) else if (v.P_LoopMain[playerID] == 7)
            if EUDElseIf()(v.P_LoopMain[playerID] == 7):
                # (Line 287) {
                # (Line 288) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 289) }
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                # (Line 290) else if (v.P_LoopMain[playerID] == 8)
            if EUDElseIf()(v.P_LoopMain[playerID] == 8):
                # (Line 291) {
                # (Line 292) trg.Shape_Edge(playerID, 1, "Protoss Dark Archon", 45, 3, 50);
                trg.Shape_Edge(playerID, 1, "Protoss Dark Archon", 45, 3, 50)
                # (Line 293) trg.Shape_Edge(playerID, 1, "40 + 1n Guardian", 45, 3, 50);
                trg.Shape_Edge(playerID, 1, "40 + 1n Guardian", 45, 3, 50)
                # (Line 294) trg.Shape_Dot(playerID, 1, "40 + 1n Guardian", 0, 0);
                trg.Shape_Dot(playerID, 1, "40 + 1n Guardian", 0, 0)
                # (Line 295) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 296) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 297) }
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                # (Line 298) else if (v.P_LoopMain[playerID] == 9)
            if EUDElseIf()(v.P_LoopMain[playerID] == 9):
                # (Line 299) {
                # (Line 300) trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 22, 3, 75);
                trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 22, 3, 75)
                # (Line 301) trg.Shape_Edge(playerID, 1, "50 + 1n Battlecruiser", 22, 3, 75);
                trg.Shape_Edge(playerID, 1, "50 + 1n Battlecruiser", 22, 3, 75)
                # (Line 302) trg.Shape_Dot(playerID, 1, "50 + 1n Battlecruiser", 0, 0);
                trg.Shape_Dot(playerID, 1, "50 + 1n Battlecruiser", 0, 0)
                # (Line 303) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                # (Line 305) Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 306) }
                DoActions(Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, "Anywhere"))
                # (Line 307) else if (v.P_LoopMain[playerID] == 11)
            if EUDElseIf()(v.P_LoopMain[playerID] == 11):
                # (Line 308) {
                # (Line 309) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 310) }
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                # (Line 311) else if (v.P_LoopMain[playerID] == 12)
            if EUDElseIf()(v.P_LoopMain[playerID] == 12):
                # (Line 312) {
                # (Line 313) trg.Shape_Edge(playerID, 1, "Protoss Dark Archon", 22, 3, 75);
                trg.Shape_Edge(playerID, 1, "Protoss Dark Archon", 22, 3, 75)
                # (Line 314) trg.Shape_Edge(playerID, 1, "40 + 1n Guardian", 22, 3, 75);
                trg.Shape_Edge(playerID, 1, "40 + 1n Guardian", 22, 3, 75)
                # (Line 315) trg.Shape_Dot(playerID, 1, "40 + 1n Guardian", 0, 0);
                trg.Shape_Dot(playerID, 1, "40 + 1n Guardian", 0, 0)
                # (Line 316) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 317) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 318) }
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                # (Line 319) else if (v.P_LoopMain[playerID] == 13)
            if EUDElseIf()(v.P_LoopMain[playerID] == 13):
                # (Line 320) {
                # (Line 321) trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 45, 3, 100);
                trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 45, 3, 100)
                # (Line 322) trg.Shape_Edge(playerID, 1, "50 + 1n Battlecruiser", 45, 3, 100);
                trg.Shape_Edge(playerID, 1, "50 + 1n Battlecruiser", 45, 3, 100)
                # (Line 323) trg.Shape_Dot(playerID, 1, "50 + 1n Battlecruiser", 0, 0);
                trg.Shape_Dot(playerID, 1, "50 + 1n Battlecruiser", 0, 0)
                # (Line 324) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                # (Line 326) Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 327) }
                DoActions(Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, "Anywhere"))
                # (Line 328) else if (v.P_LoopMain[playerID] == 15)
            if EUDElseIf()(v.P_LoopMain[playerID] == 15):
                # (Line 329) {
                # (Line 330) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 331) }
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                # (Line 333) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 335) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 337) if (v.P_LoopMain[playerID] == 26)
            if EUDIf()(v.P_LoopMain[playerID] == 26):
                # (Line 338) {
                # (Line 339) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 340) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 341) }
                # (Line 342) }
            EUDEndIf()
            # (Line 344) else if (v.P_CountMain[playerID] == 6)
        if EUDElseIf()(v.P_CountMain[playerID] == 6):
            # (Line 345) {
            # (Line 346) KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID);
            # (Line 347) KillUnitAt(All, "40 + 1n Drone", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID))
            # (Line 348) KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Drone", "Anywhere", playerID))
            # (Line 349) KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID))
            # (Line 350) KillUnitAt(All, "60 + 1n Dragoon", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID))
            # (Line 352) trg.SkillEnd();
            DoActions(KillUnitAt(All, "60 + 1n Dragoon", "Anywhere", playerID))
            trg.SkillEnd()
            # (Line 353) }
            # (Line 354) }
        EUDEndIf()
        # (Line 355) }
    EUDEndIf()
