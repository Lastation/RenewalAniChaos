## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import variable as v;
import variable as v
# (Line 2) import func.trig as trg;
from func import trig as trg
# (Line 3) import func.trigadv as adv;
from func import trigadv as adv
# (Line 4) import func.sound as s;
from func import sound as s
# (Line 6) function main(playerID)
# (Line 7) {
@EUDFunc
def f_main(playerID):
    # (Line 8) MoveUnit(All, "50 + 1n Tank", playerID, "Anywhere", "[Skill]HoldPosition");
    # (Line 9) MoveUnit(All, "40 + 1n Goliath", playerID, "Anywhere", "[Skill]HoldPosition");
    DoActions(MoveUnit(All, "50 + 1n Tank", playerID, "Anywhere", "[Skill]HoldPosition"))
    # (Line 10) MoveUnit(All, "60 + 1n Dragoon", playerID, "Anywhere", "[Skill]HoldPosition");
    DoActions(MoveUnit(All, "40 + 1n Goliath", playerID, "Anywhere", "[Skill]HoldPosition"))
    # (Line 12) trg.Debuff_BanReturn();
    DoActions(MoveUnit(All, "60 + 1n Dragoon", playerID, "Anywhere", "[Skill]HoldPosition"))
    trg.Debuff_BanReturn()
    # (Line 13) trg.Debuff_Stop();
    trg.Debuff_Stop()
    # (Line 15) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 16) {
        # (Line 17) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 18) {
            # (Line 19) var i = 50;
            i = EUDVariable()
            i << (50)
            # (Line 20) var d = 25 + 25 * v.P_LoopMain[playerID];
            d = EUDVariable()
            d << (25 + 25 * v.P_LoopMain[playerID])
            # (Line 22) trg.Table_Sin(playerID, 45, 25);
            trg.Table_Sin(playerID, 45, 25)
            # (Line 23) trg.Table_Cos(playerID, 45, 25);
            trg.Table_Cos(playerID, 45, 25)
            # (Line 25) var x_i = v.P_AngleCos[playerID];
            x_i = EUDVariable()
            x_i << (v.P_AngleCos[playerID])
            # (Line 26) var y_i = v.P_AngleSin[playerID];
            y_i = EUDVariable()
            y_i << (v.P_AngleSin[playerID])
            # (Line 28) trg.Shape_Double(playerID, 1, "Vulture Spider Mine", d - i / 2 + x_i, d + i / 2 + y_i);
            trg.Shape_Double(playerID, 1, "Vulture Spider Mine", d - i // 2 + x_i, d + i // 2 + y_i)
            # (Line 29) trg.Shape_Double(playerID, 1, "Vulture Spider Mine", d - i, d + i);
            trg.Shape_Double(playerID, 1, "Vulture Spider Mine", d - i, d + i)
            # (Line 30) trg.Shape_Double(playerID, 1, "Vulture Spider Mine", d + 2 * x_i, d + 2 * y_i);
            trg.Shape_Double(playerID, 1, "Vulture Spider Mine", d + 2 * x_i, d + 2 * y_i)
            # (Line 31) trg.Shape_Double(playerID, 1, "Vulture Spider Mine", d + i, d - i);
            trg.Shape_Double(playerID, 1, "Vulture Spider Mine", d + i, d - i)
            # (Line 32) trg.Shape_Double(playerID, 1, "Vulture Spider Mine", d + i / 2 + x_i, d - i / 2 + y_i);
            trg.Shape_Double(playerID, 1, "Vulture Spider Mine", d + i // 2 + x_i, d - i // 2 + y_i)
            # (Line 34) trg.Shape_Double(playerID, 1, " Unit. Hoffnung 25000", d - i, d + i);
            trg.Shape_Double(playerID, 1, " Unit. Hoffnung 25000", d - i, d + i)
            # (Line 35) trg.Shape_Double(playerID, 1, " Unit. Hoffnung 25000", d, d);
            trg.Shape_Double(playerID, 1, " Unit. Hoffnung 25000", d, d)
            # (Line 36) trg.Shape_Double(playerID, 1, " Unit. Hoffnung 25000", d - i, d + i);
            trg.Shape_Double(playerID, 1, " Unit. Hoffnung 25000", d - i, d + i)
            # (Line 38) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
            # (Line 39) KillUnitAt(All, "Vulture Spider Mine", "Anywhere", playerID);
            DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
            # (Line 41) trg.Main_Wait(80);
            DoActions(KillUnitAt(All, "Vulture Spider Mine", "Anywhere", playerID))
            trg.Main_Wait(80)
            # (Line 43) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 45) if (v.P_LoopMain[playerID] == 6)
            if EUDIf()(v.P_LoopMain[playerID] == 6):
                # (Line 46) {
                # (Line 47) trg.Shape_Double(playerID, 1, "60 + 1n Siege", d - i / 2 + x_i, d + i / 2 + y_i);
                trg.Shape_Double(playerID, 1, "60 + 1n Siege", d - i // 2 + x_i, d + i // 2 + y_i)
                # (Line 48) trg.Shape_Double(playerID, 1, "60 + 1n Siege", d - i, d + i);
                trg.Shape_Double(playerID, 1, "60 + 1n Siege", d - i, d + i)
                # (Line 49) trg.Shape_Double(playerID, 1, "60 + 1n Siege", d + 2 * x_i, d + 2 * y_i);
                trg.Shape_Double(playerID, 1, "60 + 1n Siege", d + 2 * x_i, d + 2 * y_i)
                # (Line 50) trg.Shape_Double(playerID, 1, "60 + 1n Siege", d + i, d - i);
                trg.Shape_Double(playerID, 1, "60 + 1n Siege", d + i, d - i)
                # (Line 51) trg.Shape_Double(playerID, 1, "60 + 1n Siege", d + i / 2 + x_i, d - i / 2 + y_i);
                trg.Shape_Double(playerID, 1, "60 + 1n Siege", d + i // 2 + x_i, d - i // 2 + y_i)
                # (Line 53) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 54) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 55) }
                # (Line 56) }
            EUDEndIf()
            # (Line 57) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 58) {
            # (Line 60) var i = 50;
            i = EUDVariable()
            i << (50)
            # (Line 61) var d = 25 + 25 * v.P_LoopMain[playerID];
            d = EUDVariable()
            d << (25 + 25 * v.P_LoopMain[playerID])
            # (Line 63) trg.Table_Sin(playerID, 45, 25);
            trg.Table_Sin(playerID, 45, 25)
            # (Line 64) trg.Table_Cos(playerID, 45, 25);
            trg.Table_Cos(playerID, 45, 25)
            # (Line 66) var x_i = v.P_AngleCos[playerID];
            x_i = EUDVariable()
            x_i << (v.P_AngleCos[playerID])
            # (Line 67) var y_i = v.P_AngleSin[playerID];
            y_i = EUDVariable()
            y_i << (v.P_AngleSin[playerID])
            # (Line 69) trg.Shape_Double(playerID, 1, "Vulture Spider Mine", -d + i / 2 - x_i, d + i / 2 + y_i);
            trg.Shape_Double(playerID, 1, "Vulture Spider Mine", -d + i // 2 - x_i, d + i // 2 + y_i)
            # (Line 70) trg.Shape_Double(playerID, 1, "Vulture Spider Mine", -d + i, d + i);
            trg.Shape_Double(playerID, 1, "Vulture Spider Mine", -d + i, d + i)
            # (Line 71) trg.Shape_Double(playerID, 1, "Vulture Spider Mine", -d - 2 * x_i, d + 2 * y_i);
            trg.Shape_Double(playerID, 1, "Vulture Spider Mine", -d - 2 * x_i, d + 2 * y_i)
            # (Line 72) trg.Shape_Double(playerID, 1, "Vulture Spider Mine", -d - i, d - i);
            trg.Shape_Double(playerID, 1, "Vulture Spider Mine", -d - i, d - i)
            # (Line 73) trg.Shape_Double(playerID, 1, "Vulture Spider Mine", -d - i / 2 - x_i, d - i / 2 + y_i);
            trg.Shape_Double(playerID, 1, "Vulture Spider Mine", -d - i // 2 - x_i, d - i // 2 + y_i)
            # (Line 75) trg.Shape_Double(playerID, 1, " Unit. Hoffnung 25000", -d + i, d + i);
            trg.Shape_Double(playerID, 1, " Unit. Hoffnung 25000", -d + i, d + i)
            # (Line 76) trg.Shape_Double(playerID, 1, " Unit. Hoffnung 25000", -d, d);
            trg.Shape_Double(playerID, 1, " Unit. Hoffnung 25000", -d, d)
            # (Line 77) trg.Shape_Double(playerID, 1, " Unit. Hoffnung 25000", -d + i, d + i);
            trg.Shape_Double(playerID, 1, " Unit. Hoffnung 25000", -d + i, d + i)
            # (Line 79) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
            # (Line 80) KillUnitAt(All, "Vulture Spider Mine", "Anywhere", playerID);
            DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
            # (Line 82) trg.Main_Wait(80);
            DoActions(KillUnitAt(All, "Vulture Spider Mine", "Anywhere", playerID))
            trg.Main_Wait(80)
            # (Line 84) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 86) if (v.P_LoopMain[playerID] == 6)
            if EUDIf()(v.P_LoopMain[playerID] == 6):
                # (Line 87) {
                # (Line 88) trg.Shape_Double(playerID, 1, "60 + 1n Siege", -d + i / 2 - x_i, d + i / 2 + y_i);
                trg.Shape_Double(playerID, 1, "60 + 1n Siege", -d + i // 2 - x_i, d + i // 2 + y_i)
                # (Line 89) trg.Shape_Double(playerID, 1, "60 + 1n Siege", -d + i, d + i);
                trg.Shape_Double(playerID, 1, "60 + 1n Siege", -d + i, d + i)
                # (Line 90) trg.Shape_Double(playerID, 1, "60 + 1n Siege", -d - 2 * x_i, d + 2 * y_i);
                trg.Shape_Double(playerID, 1, "60 + 1n Siege", -d - 2 * x_i, d + 2 * y_i)
                # (Line 91) trg.Shape_Double(playerID, 1, "60 + 1n Siege", -d - i, d - i);
                trg.Shape_Double(playerID, 1, "60 + 1n Siege", -d - i, d - i)
                # (Line 92) trg.Shape_Double(playerID, 1, "60 + 1n Siege", -d - i / 2 - x_i, d - i / 2 + y_i);
                trg.Shape_Double(playerID, 1, "60 + 1n Siege", -d - i // 2 - x_i, d - i // 2 + y_i)
                # (Line 94) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 95) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 96) }
                # (Line 97) }
            EUDEndIf()
            # (Line 98) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 99) {
            # (Line 100) if (v.P_LoopMain[playerID] < 7)
            if EUDIf()(v.P_LoopMain[playerID] >= 7, neg=True):
                # (Line 101) {
                # (Line 102) var i = 50;
                i = EUDVariable()
                i << (50)
                # (Line 103) var d = 150 - 25 * v.P_LoopMain[playerID];
                d = EUDVariable()
                d << (150 - 25 * v.P_LoopMain[playerID])
                # (Line 105) trg.Table_Sin(playerID, 45, 15);
                trg.Table_Sin(playerID, 45, 15)
                # (Line 106) trg.Table_Cos(playerID, 45, 15);
                trg.Table_Cos(playerID, 45, 15)
                # (Line 108) var x_i = v.P_AngleCos[playerID];
                x_i = EUDVariable()
                x_i << (v.P_AngleCos[playerID])
                # (Line 109) var y_i = v.P_AngleSin[playerID];
                y_i = EUDVariable()
                y_i << (v.P_AngleSin[playerID])
                # (Line 111) trg.Shape_Square(playerID, 1, "40 + 1n Guardian", d - i + x_i, d + i + y_i);
                trg.Shape_Square(playerID, 1, "40 + 1n Guardian", d - i + x_i, d + i + y_i)
                # (Line 112) trg.Shape_Square(playerID, 1, "40 + 1n Guardian", d + 2 * x_i, d + 2 * y_i);
                trg.Shape_Square(playerID, 1, "40 + 1n Guardian", d + 2 * x_i, d + 2 * y_i)
                # (Line 113) trg.Shape_Square(playerID, 1, "40 + 1n Guardian", d + i + x_i, d - i + y_i);
                trg.Shape_Square(playerID, 1, "40 + 1n Guardian", d + i + x_i, d - i + y_i)
                # (Line 115) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                # (Line 117) if (v.P_LoopMain[playerID] == 1)
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                if EUDIf()(v.P_LoopMain[playerID] == 1):
                    # (Line 118) {
                    # (Line 119) trg.Shape_Square(playerID, 1, "40 + 1n Drone", d - i + x_i, d + i + y_i);
                    trg.Shape_Square(playerID, 1, "40 + 1n Drone", d - i + x_i, d + i + y_i)
                    # (Line 120) trg.Shape_Square(playerID, 1, "40 + 1n Drone", d + 2 * x_i, d + 2 * y_i);
                    trg.Shape_Square(playerID, 1, "40 + 1n Drone", d + 2 * x_i, d + 2 * y_i)
                    # (Line 121) trg.Shape_Square(playerID, 1, "40 + 1n Drone", d + i + x_i, d - i + y_i);
                    trg.Shape_Square(playerID, 1, "40 + 1n Drone", d + i + x_i, d - i + y_i)
                    # (Line 123) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                    # (Line 124) MoveUnit(All, "40 + 1n Drone", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                    # (Line 125) Order("40 + 1n Drone", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                    DoActions(MoveUnit(All, "40 + 1n Drone", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                    # (Line 127) }
                    DoActions(Order("40 + 1n Drone", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                    # (Line 128) }
                EUDEndIf()
                # (Line 130) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 132) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 134) if (v.P_LoopMain[playerID] == 9)
            if EUDIf()(v.P_LoopMain[playerID] == 9):
                # (Line 135) {
                # (Line 136) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 137) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 138) }
                # (Line 139) }
            EUDEndIf()
            # (Line 140) else if (v.P_CountMain[playerID] == 3)
        if EUDElseIf()(v.P_CountMain[playerID] == 3):
            # (Line 141) {
            # (Line 142) var i = 0;
            i = EUDVariable()
            i << (0)
            # (Line 143) var x = 0;
            x = EUDVariable()
            x << (0)
            # (Line 144) var y = 0;
            y = EUDVariable()
            y << (0)
            # (Line 146) if (v.P_LoopMain[playerID] < 4)
            if EUDIf()(v.P_LoopMain[playerID] >= 4, neg=True):
                # (Line 147) {
                # (Line 148) i = v.P_LoopMain[playerID];
                i << (v.P_LoopMain[playerID])
                # (Line 150) if (i < 2)
                if EUDIf()(i >= 2, neg=True):
                    # (Line 151) {
                    # (Line 152) x = 50 - 50 * i;
                    x << (50 - 50 * i)
                    # (Line 153) y = 50 + 50 * i;
                    y << (50 + 50 * i)
                    # (Line 154) }
                    # (Line 155) else
                    # (Line 156) {
                if EUDElse()():
                    # (Line 157) x = -50 - 50 * (i - 2);
                    x << (-50 - 50 * (i - 2))
                    # (Line 158) y = 50 - 50 * (i - 2);
                    y << (50 - 50 * (i - 2))
                    # (Line 159) }
                    # (Line 160) }
                EUDEndIf()
                # (Line 161) else if (v.P_LoopMain[playerID] < 12)
            if EUDElseIf()(v.P_LoopMain[playerID] >= 12, neg=True):
                # (Line 162) {
                # (Line 163) i = v.P_LoopMain[playerID] - 4;
                i << (v.P_LoopMain[playerID] - 4)
                # (Line 165) if (i < 4)
                if EUDIf()(i >= 4, neg=True):
                    # (Line 166) {
                    # (Line 167) x = 150 - 50 * i;
                    x << (150 - 50 * i)
                    # (Line 168) y = 50 + 50 * i;
                    y << (50 + 50 * i)
                    # (Line 169) }
                    # (Line 170) else
                    # (Line 171) {
                if EUDElse()():
                    # (Line 172) x = -50 - 50 * (i - 4);
                    x << (-50 - 50 * (i - 4))
                    # (Line 173) y = 150 - 50 * (i - 4);
                    y << (150 - 50 * (i - 4))
                    # (Line 174) }
                    # (Line 175) }
                EUDEndIf()
                # (Line 177) if (i % 2 == 0 && v.P_LoopMain[playerID] < 12)
            EUDEndIf()
            if EUDIf()(EUDSCAnd()(i % 2 == 0)(v.P_LoopMain[playerID] >= 12, neg=True)()):
                # (Line 178) {
                # (Line 179) adv.Shape_EdgeAt(playerID, 1, "Kakaru (Twilight)", 0, 2, 25, x, y);
                adv.Shape_EdgeAt(playerID, 1, "Kakaru (Twilight)", 0, 2, 25, x, y)
                # (Line 180) adv.Shape_EdgeAt(playerID, 1, "Rhynadon (Badlands)", 0, 2, 25, x, y);
                adv.Shape_EdgeAt(playerID, 1, "Rhynadon (Badlands)", 0, 2, 25, x, y)
                # (Line 181) adv.Shape_EdgeAt(playerID, 1, "Kakaru (Twilight)", 0, 2, 25, -x, -y);
                adv.Shape_EdgeAt(playerID, 1, "Kakaru (Twilight)", 0, 2, 25, -x, -y)
                # (Line 182) adv.Shape_EdgeAt(playerID, 1, "Rhynadon (Badlands)", 0, 2, 25, -x, -y);
                adv.Shape_EdgeAt(playerID, 1, "Rhynadon (Badlands)", 0, 2, 25, -x, -y)
                # (Line 184) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                # (Line 185) KillUnitAt(All, "Rhynadon (Badlands)", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                # (Line 186) }
                DoActions(KillUnitAt(All, "Rhynadon (Badlands)", "Anywhere", playerID))
                # (Line 187) else
                # (Line 188) {
            if EUDElse()():
                # (Line 189) adv.Shape_EdgeAt(playerID, 1, "40 + 1n Guardian", 0, 2, 25, x, y);
                adv.Shape_EdgeAt(playerID, 1, "40 + 1n Guardian", 0, 2, 25, x, y)
                # (Line 190) adv.Shape_EdgeAt(playerID, 1, "60 + 1n Archon", 0, 2, 25, x, y);
                adv.Shape_EdgeAt(playerID, 1, "60 + 1n Archon", 0, 2, 25, x, y)
                # (Line 191) trg.Shape_Dot(playerID, 1, "50 + 1n Tank", x, y);
                trg.Shape_Dot(playerID, 1, "50 + 1n Tank", x, y)
                # (Line 192) adv.Shape_EdgeAt(playerID, 1, "40 + 1n Guardian", 0, 2, 25, -x, -y);
                adv.Shape_EdgeAt(playerID, 1, "40 + 1n Guardian", 0, 2, 25, -x, -y)
                # (Line 193) adv.Shape_EdgeAt(playerID, 1, "60 + 1n Archon", 0, 2, 25, -x, -y);
                adv.Shape_EdgeAt(playerID, 1, "60 + 1n Archon", 0, 2, 25, -x, -y)
                # (Line 194) trg.Shape_Dot(playerID, 1, "50 + 1n Tank", -x, -y);
                trg.Shape_Dot(playerID, 1, "50 + 1n Tank", -x, -y)
                # (Line 196) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                # (Line 197) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                # (Line 199) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 200) MoveUnit(All, "50 + 1n Tank", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 201) Order("50 + 1n Tank", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "50 + 1n Tank", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 202) }
                DoActions(Order("50 + 1n Tank", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 204) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 206) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 208) if (v.P_LoopMain[playerID] == 12)
            if EUDIf()(v.P_LoopMain[playerID] == 12):
                # (Line 209) {
                # (Line 210) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 211) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 212) }
                # (Line 213) }
            EUDEndIf()
            # (Line 214) else if (v.P_CountMain[playerID] == 4)
        if EUDElseIf()(v.P_CountMain[playerID] == 4):
            # (Line 215) {
            # (Line 216) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 217) {
                # (Line 218) trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", 50, 50);
                trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", 50, 50)
                # (Line 219) trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", 50, 50);
                trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", 50, 50)
                # (Line 221) }
                # (Line 222) else if (v.P_LoopMain[playerID] == 1)
            if EUDElseIf()(v.P_LoopMain[playerID] == 1):
                # (Line 223) {
                # (Line 224) trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", 50, 150);
                trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", 50, 150)
                # (Line 225) trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", 50, 150);
                trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", 50, 150)
                # (Line 227) }
                # (Line 228) else if (v.P_LoopMain[playerID] == 2)
            if EUDElseIf()(v.P_LoopMain[playerID] == 2):
                # (Line 229) {
                # (Line 230) trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", 150, 50);
                trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", 150, 50)
                # (Line 231) trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", 150, 50);
                trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", 150, 50)
                # (Line 232) }
                # (Line 234) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID);
            EUDEndIf()
            # (Line 236) trg.Main_Wait(160);
            DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID))
            trg.Main_Wait(160)
            # (Line 238) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 240) if (v.P_LoopMain[playerID] == 9)
            if EUDIf()(v.P_LoopMain[playerID] == 9):
                # (Line 241) {
                # (Line 242) s.CharacterVoice(21);
                s.CharacterVoice(21)
                # (Line 244) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 245) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 246) }
                # (Line 247) }
            EUDEndIf()
            # (Line 248) else if (v.P_CountMain[playerID] == 5)
        if EUDElseIf()(v.P_CountMain[playerID] == 5):
            # (Line 249) {
            # (Line 250) if (v.P_LoopMain[playerID] < 6)
            if EUDIf()(v.P_LoopMain[playerID] >= 6, neg=True):
                # (Line 251) {
                # (Line 252) trg.Shape_Double(playerID, 1, "Protoss Dark Archon", 150 - 50 * v.P_LoopMain[playerID], 150);
                trg.Shape_Double(playerID, 1, "Protoss Dark Archon", 150 - 50 * v.P_LoopMain[playerID], 150)
                # (Line 253) trg.Shape_Double(playerID, 1, "80 + 1n Tank", -150, 150 - 50 * v.P_LoopMain[playerID]);
                trg.Shape_Double(playerID, 1, "80 + 1n Tank", -150, 150 - 50 * v.P_LoopMain[playerID])
                # (Line 254) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 255) KillUnitAt(All, "80 + 1n Tank", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 256) }
                DoActions(KillUnitAt(All, "80 + 1n Tank", "Anywhere", playerID))
                # (Line 258) if (v.P_LoopMain[playerID] == 0)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 259) {
                # (Line 260) trg.Shape_Edge(playerID, 1, "40 + 1n Mojo", 45, 3, 75);
                trg.Shape_Edge(playerID, 1, "40 + 1n Mojo", 45, 3, 75)
                # (Line 261) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
                # (Line 262) }
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
                # (Line 263) else if (v.P_LoopMain[playerID] == 2)
            if EUDElseIf()(v.P_LoopMain[playerID] == 2):
                # (Line 264) {
                # (Line 265) trg.Shape_Edge(playerID, 1, "40 + 1n Mojo", 45, 5, 150);
                trg.Shape_Edge(playerID, 1, "40 + 1n Mojo", 45, 5, 150)
                # (Line 266) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
                # (Line 267) }
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
                # (Line 268) else if (v.P_LoopMain[playerID] == 4)
            if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                # (Line 269) {
                # (Line 270) trg.Shape_Edge(playerID, 1, "Protoss Dark Archon", 22, 3, 75);
                trg.Shape_Edge(playerID, 1, "Protoss Dark Archon", 22, 3, 75)
                # (Line 271) trg.Shape_Edge(playerID, 1, "40 + 1n Guardian", 22, 3, 75);
                trg.Shape_Edge(playerID, 1, "40 + 1n Guardian", 22, 3, 75)
                # (Line 272) trg.Shape_Dot(playerID, 1, "40 + 1n Guardian", 0, 0);
                trg.Shape_Dot(playerID, 1, "40 + 1n Guardian", 0, 0)
                # (Line 273) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 274) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 275) }
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                # (Line 276) else if (v.P_LoopMain[playerID] == 5)
            if EUDElseIf()(v.P_LoopMain[playerID] == 5):
                # (Line 277) {
                # (Line 278) trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 45, 3, 100);
                trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 45, 3, 100)
                # (Line 279) trg.Shape_Edge(playerID, 1, "50 + 1n Battlecruiser", 45, 2, 100);
                trg.Shape_Edge(playerID, 1, "50 + 1n Battlecruiser", 45, 2, 100)
                # (Line 280) trg.Shape_Dot(playerID, 1, "50 + 1n Battlecruiser", 0, 0);
                trg.Shape_Dot(playerID, 1, "50 + 1n Battlecruiser", 0, 0)
                # (Line 281) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                # (Line 283) Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 284) }
                DoActions(Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, "Anywhere"))
                # (Line 285) else if (v.P_LoopMain[playerID] == 7)
            if EUDElseIf()(v.P_LoopMain[playerID] == 7):
                # (Line 286) {
                # (Line 287) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 288) }
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                # (Line 289) else if (v.P_LoopMain[playerID] == 8)
            if EUDElseIf()(v.P_LoopMain[playerID] == 8):
                # (Line 290) {
                # (Line 291) trg.Shape_Edge(playerID, 1, "Protoss Dark Archon", 45, 3, 50);
                trg.Shape_Edge(playerID, 1, "Protoss Dark Archon", 45, 3, 50)
                # (Line 292) trg.Shape_Edge(playerID, 1, "40 + 1n Guardian", 45, 3, 50);
                trg.Shape_Edge(playerID, 1, "40 + 1n Guardian", 45, 3, 50)
                # (Line 293) trg.Shape_Dot(playerID, 1, "40 + 1n Guardian", 0, 0);
                trg.Shape_Dot(playerID, 1, "40 + 1n Guardian", 0, 0)
                # (Line 294) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 295) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 296) }
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                # (Line 297) else if (v.P_LoopMain[playerID] == 9)
            if EUDElseIf()(v.P_LoopMain[playerID] == 9):
                # (Line 298) {
                # (Line 299) trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 22, 3, 75);
                trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 22, 3, 75)
                # (Line 300) trg.Shape_Edge(playerID, 1, "50 + 1n Battlecruiser", 22, 3, 75);
                trg.Shape_Edge(playerID, 1, "50 + 1n Battlecruiser", 22, 3, 75)
                # (Line 301) trg.Shape_Dot(playerID, 1, "50 + 1n Battlecruiser", 0, 0);
                trg.Shape_Dot(playerID, 1, "50 + 1n Battlecruiser", 0, 0)
                # (Line 302) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                # (Line 304) Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 305) }
                DoActions(Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, "Anywhere"))
                # (Line 306) else if (v.P_LoopMain[playerID] == 11)
            if EUDElseIf()(v.P_LoopMain[playerID] == 11):
                # (Line 307) {
                # (Line 308) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 309) }
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                # (Line 310) else if (v.P_LoopMain[playerID] == 12)
            if EUDElseIf()(v.P_LoopMain[playerID] == 12):
                # (Line 311) {
                # (Line 312) trg.Shape_Edge(playerID, 1, "Protoss Dark Archon", 22, 3, 75);
                trg.Shape_Edge(playerID, 1, "Protoss Dark Archon", 22, 3, 75)
                # (Line 313) trg.Shape_Edge(playerID, 1, "40 + 1n Guardian", 22, 3, 75);
                trg.Shape_Edge(playerID, 1, "40 + 1n Guardian", 22, 3, 75)
                # (Line 314) trg.Shape_Dot(playerID, 1, "40 + 1n Guardian", 0, 0);
                trg.Shape_Dot(playerID, 1, "40 + 1n Guardian", 0, 0)
                # (Line 315) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 316) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 317) }
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                # (Line 318) else if (v.P_LoopMain[playerID] == 13)
            if EUDElseIf()(v.P_LoopMain[playerID] == 13):
                # (Line 319) {
                # (Line 320) trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 45, 3, 100);
                trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 45, 3, 100)
                # (Line 321) trg.Shape_Edge(playerID, 1, "50 + 1n Battlecruiser", 45, 3, 100);
                trg.Shape_Edge(playerID, 1, "50 + 1n Battlecruiser", 45, 3, 100)
                # (Line 322) trg.Shape_Dot(playerID, 1, "50 + 1n Battlecruiser", 0, 0);
                trg.Shape_Dot(playerID, 1, "50 + 1n Battlecruiser", 0, 0)
                # (Line 323) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                # (Line 325) Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 326) }
                DoActions(Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, "Anywhere"))
                # (Line 327) else if (v.P_LoopMain[playerID] == 15)
            if EUDElseIf()(v.P_LoopMain[playerID] == 15):
                # (Line 328) {
                # (Line 329) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 330) }
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                # (Line 332) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 334) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 336) if (v.P_LoopMain[playerID] == 26)
            if EUDIf()(v.P_LoopMain[playerID] == 26):
                # (Line 337) {
                # (Line 338) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 339) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 340) }
                # (Line 341) }
            EUDEndIf()
            # (Line 343) else if (v.P_CountMain[playerID] == 6)
        if EUDElseIf()(v.P_CountMain[playerID] == 6):
            # (Line 344) {
            # (Line 345) KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID);
            # (Line 346) KillUnitAt(All, "40 + 1n Drone", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID))
            # (Line 347) KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Drone", "Anywhere", playerID))
            # (Line 348) KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID))
            # (Line 349) KillUnitAt(All, "60 + 1n Dragoon", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID))
            # (Line 351) trg.SkillEnd();
            DoActions(KillUnitAt(All, "60 + 1n Dragoon", "Anywhere", playerID))
            trg.SkillEnd()
            # (Line 352) }
            # (Line 353) }
        EUDEndIf()
        # (Line 354) }
    EUDEndIf()
