## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 5) function main(playerID)
# (Line 6) {
@EUDFunc
def f_main(playerID):
    # (Line 7) MoveUnit(All, "40 + 1n Goliath", playerID, "Anywhere", "[Skill]HoldPosition");
    # (Line 8) MoveUnit(All, "50 + 1n Tank", playerID, "Anywhere", "[Skill]HoldPosition");
    DoActions(MoveUnit(All, "40 + 1n Goliath", playerID, "Anywhere", "[Skill]HoldPosition"))
    # (Line 9) MoveUnit(All, "40 + 1n Marine", playerID, "Anywhere", "[Skill]HoldPosition");
    DoActions(MoveUnit(All, "50 + 1n Tank", playerID, "Anywhere", "[Skill]HoldPosition"))
    # (Line 11) trg.Debuff_BanReturn();
    DoActions(MoveUnit(All, "40 + 1n Marine", playerID, "Anywhere", "[Skill]HoldPosition"))
    trg.Debuff_BanReturn()
    # (Line 12) trg.Debuff_Stop();
    trg.Debuff_Stop()
    # (Line 14) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 15) {
        # (Line 16) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 17) {
            # (Line 18) var i = v.P_LoopMain[playerID] / 2;
            i = EUDVariable()
            i << (v.P_LoopMain[playerID] // 2)
            # (Line 20) if (v.P_LoopMain[playerID] % 2 == 0)
            if EUDIf()(v.P_LoopMain[playerID] % 2 == 0):
                # (Line 21) {
                # (Line 22) RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 24) trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", -100 + 50 * i, 100);
                DoActions(RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", -100 + 50 * i, 100)
                # (Line 25) trg.Shape_Square(playerID, 1, "50 + 1n Tank", -100 + 50 * i, 100);
                trg.Shape_Square(playerID, 1, "50 + 1n Tank", -100 + 50 * i, 100)
                # (Line 26) trg.Shape_Square(playerID, 1, "60 + 1n Siege", -100 + 50 * i, 100);
                trg.Shape_Square(playerID, 1, "60 + 1n Siege", -100 + 50 * i, 100)
                # (Line 28) KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID);
                # (Line 30) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID))
                # (Line 31) MoveUnit(All, "50 + 1n Tank", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 32) Order("50 + 1n Tank", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "50 + 1n Tank", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 33) Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(Order("50 + 1n Tank", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 34) }
                DoActions(Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 36) i = v.P_LoopMain[playerID];
            EUDEndIf()
            i << (v.P_LoopMain[playerID])
            # (Line 38) if (v.P_LoopMain[playerID] < 6)
            if EUDIf()(v.P_LoopMain[playerID] >= 6, neg=True):
                # (Line 39) {
                # (Line 40) trg.Shape_Square(playerID, 1, "Protoss Dark Archon", -150 + 50 * i, 150);
                trg.Shape_Square(playerID, 1, "Protoss Dark Archon", -150 + 50 * i, 150)
                # (Line 41) trg.Shape_Square(playerID, 1, "40 + 1n Guardian", -150 + 50 * i, 150);
                trg.Shape_Square(playerID, 1, "40 + 1n Guardian", -150 + 50 * i, 150)
                # (Line 42) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 43) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 44) }
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                # (Line 45) else if (v.P_LoopMain[playerID] < 8)
            if EUDElseIf()(v.P_LoopMain[playerID] >= 8, neg=True):
                # (Line 46) {
                # (Line 47) trg.Shape_Edge(playerID, 1, "Protoss Dark Archon", 45, 7, 150);
                trg.Shape_Edge(playerID, 1, "Protoss Dark Archon", 45, 7, 150)
                # (Line 48) trg.Shape_Edge(playerID, 1, "40 + 1n Guardian", 45, 7, 150);
                trg.Shape_Edge(playerID, 1, "40 + 1n Guardian", 45, 7, 150)
                # (Line 49) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 50) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 51) }
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                # (Line 53) trg.Main_Wait(160);
            EUDEndIf()
            trg.Main_Wait(160)
            # (Line 55) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 57) if (v.P_LoopMain[playerID] == 8)
            if EUDIf()(v.P_LoopMain[playerID] == 8):
                # (Line 58) {
                # (Line 59) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 60) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 61) }
                # (Line 62) }
            EUDEndIf()
            # (Line 63) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 64) {
            # (Line 65) var i = v.P_LoopMain[playerID];
            i = EUDVariable()
            i << (v.P_LoopMain[playerID])
            # (Line 67) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 68) {
                # (Line 69) RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 70) }
                DoActions(RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                # (Line 72) if (v.P_LoopMain[playerID] < 3)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] >= 3, neg=True):
                # (Line 73) {
                # (Line 74) trg.Shape_Edge(playerID, 1, "50 + 1n Tank", 45, 3 + 2 * i, 50 + 50 * i);
                trg.Shape_Edge(playerID, 1, "50 + 1n Tank", 45, 3 + 2 * i, 50 + 50 * i)
                # (Line 75) KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID);
                # (Line 76) }
                DoActions(KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID))
                # (Line 77) else if (v.P_LoopMain[playerID] < 7)
            if EUDElseIf()(v.P_LoopMain[playerID] >= 7, neg=True):
                # (Line 78) {
                # (Line 79) trg.Shape_Edge(playerID, 1, "40 + 1n Wraith", 45, 7 - 2 * (i - 3), 150 - 50 * (i - 3));
                trg.Shape_Edge(playerID, 1, "40 + 1n Wraith", 45, 7 - 2 * (i - 3), 150 - 50 * (i - 3))
                # (Line 80) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
                # (Line 81) }
                DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                # (Line 83) if (v.P_LoopMain[playerID] == 2)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 2):
                # (Line 84) {
                # (Line 85) trg.Shape_Square(playerID, 1, "60 + 1n Siege", 150, 150);
                trg.Shape_Square(playerID, 1, "60 + 1n Siege", 150, 150)
                # (Line 86) trg.Shape_Square(playerID, 1, "60 + 1n Siege", 75, 150);
                trg.Shape_Square(playerID, 1, "60 + 1n Siege", 75, 150)
                # (Line 87) trg.Shape_Square(playerID, 1, "60 + 1n Siege", 150, 75);
                trg.Shape_Square(playerID, 1, "60 + 1n Siege", 150, 75)
                # (Line 88) }
                # (Line 89) else if (v.P_LoopMain[playerID] == 4)
            if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                # (Line 90) {
                # (Line 91) RemoveUnitAt(All, "50 + 1n Tank", "Anywhere", playerID);
                # (Line 92) }
                DoActions(RemoveUnitAt(All, "50 + 1n Tank", "Anywhere", playerID))
                # (Line 94) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 96) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 98) if (v.P_LoopMain[playerID] == 19)
            if EUDIf()(v.P_LoopMain[playerID] == 19):
                # (Line 99) {
                # (Line 100) KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID);
                # (Line 102) v.P_CountMain[playerID] += 1;
                DoActions(KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID))
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 103) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 104) }
                # (Line 105) }
            EUDEndIf()
            # (Line 106) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 107) {
            # (Line 108) var i = v.P_LoopMain[playerID];
            i = EUDVariable()
            i << (v.P_LoopMain[playerID])
            # (Line 110) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 111) {
                # (Line 112) RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 113) }
                DoActions(RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                # (Line 115) if (v.P_LoopMain[playerID] < 3)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] >= 3, neg=True):
                # (Line 116) {
                # (Line 117) trg.Shape_Edge(playerID, 1, "Protoss Dark Archon", 0, 3 + 2 * i, 50 + 50 * i);
                trg.Shape_Edge(playerID, 1, "Protoss Dark Archon", 0, 3 + 2 * i, 50 + 50 * i)
                # (Line 118) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 119) }
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 120) else if (v.P_LoopMain[playerID] < 11)
            if EUDElseIf()(v.P_LoopMain[playerID] >= 11, neg=True):
                # (Line 121) {
                # (Line 122) trg.Shape_Edge(playerID, 1, "40 + 1n Guardian", 0, 5, 100);
                trg.Shape_Edge(playerID, 1, "40 + 1n Guardian", 0, 5, 100)
                # (Line 123) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                # (Line 125) trg.Shape_Square(playerID, 1, "60 + 1n High Templar", 120 - 15 * (i - 3), 15 * (i - 3));
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                trg.Shape_Square(playerID, 1, "60 + 1n High Templar", 120 - 15 * (i - 3), 15 * (i - 3))
                # (Line 126) trg.Shape_Square(playerID, 1, "60 + 1n High Templar", 10 * (i - 3), 80 - 10 * (i - 3));
                trg.Shape_Square(playerID, 1, "60 + 1n High Templar", 10 * (i - 3), 80 - 10 * (i - 3))
                # (Line 127) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
                # (Line 128) }
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
                # (Line 130) if (v.P_LoopMain[playerID] == 3)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 3):
                # (Line 131) {
                # (Line 132) trg.Shape_Edge(playerID, 1, "40 + 1n Marine", 0, 5, 100);
                trg.Shape_Edge(playerID, 1, "40 + 1n Marine", 0, 5, 100)
                # (Line 134) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 135) MoveUnit(All, "40 + 1n Marine", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 136) Order("40 + 1n Marine", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "40 + 1n Marine", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 137) }
                DoActions(Order("40 + 1n Marine", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 138) else if (v.P_LoopMain[playerID] == 11)
            if EUDElseIf()(v.P_LoopMain[playerID] == 11):
                # (Line 139) {
                # (Line 140) KillUnitAt(All, "40 + 1n Marine", "Anywhere", playerID);
                # (Line 142) trg.Shape_Edge(playerID, 1, "40 + 1n Wraith", 0, 5, 100);
                DoActions(KillUnitAt(All, "40 + 1n Marine", "Anywhere", playerID))
                trg.Shape_Edge(playerID, 1, "40 + 1n Wraith", 0, 5, 100)
                # (Line 143) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
                # (Line 145) }
                DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                # (Line 147) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 149) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 151) if (v.P_LoopMain[playerID] == 17)
            if EUDIf()(v.P_LoopMain[playerID] == 17):
                # (Line 152) {
                # (Line 153) KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID);
                # (Line 155) v.P_CountMain[playerID] += 1;
                DoActions(KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID))
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 156) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 157) }
                # (Line 158) }
            EUDEndIf()
            # (Line 159) else if (v.P_CountMain[playerID] == 3)
        if EUDElseIf()(v.P_CountMain[playerID] == 3):
            # (Line 160) {
            # (Line 161) trg.SkillEnd();
            trg.SkillEnd()
            # (Line 162) }
            # (Line 163) }
        EUDEndIf()
        # (Line 164) }
    EUDEndIf()
