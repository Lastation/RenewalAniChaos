## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import variable as v;
import variable as v
# (Line 2) import func.trig as trg;
from func import trig as trg
# (Line 3) import func.sound as s;
from func import sound as s
# (Line 5) const P_player		= PVariable();
P_player = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 6) const P_observer 	= PVariable();
P_observer = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 8) function Text(num);
# (Line 10) function player(playerID)
# (Line 11) {
@EUDFunc
def f_player(playerID):
    # (Line 12) Text(P_player[playerID]);
    Text(P_player[playerID])
    # (Line 13) P_player[playerID] = 0;
    _ARRW(P_player, playerID) << (0)
    # (Line 14) }
    # (Line 16) function observer(playerID)

# (Line 17) {
@EUDFunc
def f_observer(playerID):
    # (Line 18) Text(P_observer[playerID - 128]);
    Text(P_observer[playerID - 128])
    # (Line 19) P_observer[playerID - 128] = 0;
    _ARRW(P_observer, playerID - 128) << (0)
    # (Line 20) }
    # (Line 22) function main(playerID)

# (Line 23) {
@EUDFunc
def f_main(playerID):
    # (Line 24) if (playerID < 6) 	{ player(playerID); 	}
    if EUDIf()(playerID >= 6, neg=True):
        f_player(playerID)
        # (Line 25) else  			{ observer(playerID); }
    if EUDElse()():
        f_observer(playerID)
        # (Line 26) }
    EUDEndIf()
    # (Line 28) function Text(num)

# (Line 29) {
@EUDFunc
def Text(num):
    # (Line 30) switch (num)
    EUDSwitch(num)
    # (Line 31) {
    # (Line 32) case 1:
    _t1 = EUDSwitchCase()
    # (Line 33) PlayWAV("Oda_Ult01.ogg");
    if _t1(1):
        # (Line 34) break;
        DoActions(PlayWAV("Oda_Ult01.ogg"))
        EUDBreak()
        # (Line 35) case 2:
    _t2 = EUDSwitchCase()
    # (Line 36) v.stb.print("\x13\x1BOda Sakunosuke\n");
    if _t2(2):
        v.stb.print("\x13\x1BOda Sakunosuke\n")
        # (Line 37) v.stb.print("\x13\x04목이 아팠다\x04");
        v.stb.print("\x13\x04목이 아팠다\x04")
        # (Line 38) break;
        EUDBreak()
        # (Line 39) case 3:
    _t3 = EUDSwitchCase()
    # (Line 40) v.stb.print("\x13\x1BOda Sakunosuke\n");
    if _t3(3):
        v.stb.print("\x13\x1BOda Sakunosuke\n")
        # (Line 41) v.stb.print("\x13\x04숨을 쉴 수가 없었다\x04");
        v.stb.print("\x13\x04숨을 쉴 수가 없었다\x04")
        # (Line 42) break;
        EUDBreak()
        # (Line 43) case 4:
    _t4 = EUDSwitchCase()
    # (Line 44) v.stb.print("\x13\x1BOda Sakunosuke\n");
    if _t4(4):
        v.stb.print("\x13\x1BOda Sakunosuke\n")
        # (Line 45) v.stb.print("\x13\x04누군가의 절규가 들려왔다\x04");
        v.stb.print("\x13\x04누군가의 절규가 들려왔다\x04")
        # (Line 46) break;
        EUDBreak()
        # (Line 47) case 5:
    _t5 = EUDSwitchCase()
    # (Line 48) v.stb.print("\x13\x1BOda Sakunosuke\n");
    if _t5(5):
        v.stb.print("\x13\x1BOda Sakunosuke\n")
        # (Line 49) v.stb.print("\x13\x04목이 너무 아팠기에 그제야 깨달았다\x04");
        v.stb.print("\x13\x04목이 너무 아팠기에 그제야 깨달았다\x04")
        # (Line 50) break;
        EUDBreak()
        # (Line 51) case 6:
    _t6 = EUDSwitchCase()
    # (Line 52) v.stb.print("\x13\x1BOda Sakunosuke\n");
    if _t6(6):
        v.stb.print("\x13\x1BOda Sakunosuke\n")
        # (Line 53) v.stb.print("\x13\x04절규하고 있는 게 나라는 걸\x04");
        v.stb.print("\x13\x04절규하고 있는 게 나라는 걸\x04")
        # (Line 54) break;
        EUDBreak()
        # (Line 55) case 7:
    _t7 = EUDSwitchCase()
    # (Line 56) PlayWAV("Oda_Ult02.ogg");
    if _t7(7):
        # (Line 57) break;
        DoActions(PlayWAV("Oda_Ult02.ogg"))
        EUDBreak()
        # (Line 58) case 8:
    _t8 = EUDSwitchCase()
    # (Line 59) v.stb.printAt(4, "\n\x13\x04그럼 네가 써라");
    if _t8(8):
        v.stb.printAt(4, "\n\x13\x04그럼 네가 써라")
        # (Line 60) break;
        EUDBreak()
        # (Line 61) case 9:
    _t9 = EUDSwitchCase()
    # (Line 62) v.stb.printAt(4, "\n\x13\x04그게 그 소설을 완벽하게 간직할 유일한 방법이다");
    if _t9(9):
        v.stb.printAt(4, "\n\x13\x04그게 그 소설을 완벽하게 간직할 유일한 방법이다")
        # (Line 63) break;
        EUDBreak()
        # (Line 64) case 10:
    _t10 = EUDSwitchCase()
    # (Line 65) v.stb.printAt(3, "\x13\x1BOda Sakunosuke\n");
    if _t10(10):
        v.stb.printAt(3, "\x13\x1BOda Sakunosuke\n")
        # (Line 66) v.stb.printAt(5, "\x13\x04이젠 쓸 수 없어\x04");
        v.stb.printAt(5, "\x13\x04이젠 쓸 수 없어\x04")
        # (Line 67) break;
        EUDBreak()
        # (Line 68) case 11:
    _t11 = EUDSwitchCase()
    # (Line 69) v.stb.printAt(3, "\x13\x1BOda Sakunosuke\n");
    if _t11(11):
        v.stb.printAt(3, "\x13\x1BOda Sakunosuke\n")
        # (Line 70) v.stb.printAt(5, "\x13\x04난 이제\x04");
        v.stb.printAt(5, "\x13\x04난 이제\x04")
        # (Line 71) break;
        EUDBreak()
        # (Line 72) case 12:
    _t12 = EUDSwitchCase()
    # (Line 73) v.stb.printAt(3, "\x13\x1BOda Sakunosuke\n");
    if _t12(12):
        v.stb.printAt(3, "\x13\x1BOda Sakunosuke\n")
        # (Line 74) v.stb.printAt(5, "\x13\x04소설 같은 건 쓸 수 없어\x04");
        v.stb.printAt(5, "\x13\x04소설 같은 건 쓸 수 없어\x04")
        # (Line 75) break;
        EUDBreak()
        # (Line 76) case 13:
    _t13 = EUDSwitchCase()
    # (Line 77) PlayWAV("Oda_01.ogg");
    if _t13(13):
        # (Line 78) v.stb.print("\x13\x1BOda Sakunosuke\n");
        DoActions(PlayWAV("Oda_01.ogg"))
        v.stb.print("\x13\x1BOda Sakunosuke\n")
        # (Line 79) v.stb.print("\x13\x04나에게는 살인을 하지 않는 이유가 있다\x04");
        v.stb.print("\x13\x04나에게는 살인을 하지 않는 이유가 있다\x04")
        # (Line 80) break;
        EUDBreak()
        # (Line 81) case 14:
    _t14 = EUDSwitchCase()
    # (Line 82) PlayWAV("Oda_02.ogg");
    if _t14(14):
        # (Line 83) v.stb.print("\x13\x1BOda Sakunosuke\n");
        DoActions(PlayWAV("Oda_02.ogg"))
        v.stb.print("\x13\x1BOda Sakunosuke\n")
        # (Line 84) v.stb.print("\x13\x04내가 너의 소원을 들어줄 수 없는 건, 꿈이 있기 때문이다\x04");
        v.stb.print("\x13\x04내가 너의 소원을 들어줄 수 없는 건, 꿈이 있기 때문이다\x04")
        # (Line 85) break;
        EUDBreak()
        # (Line 86) case 15:
    _t15 = EUDSwitchCase()
    # (Line 87) PlayWAV("Oda_03.ogg");
    if _t15(15):
        # (Line 88) v.stb.print("\x13\x1BOda Sakunosuke\n");
        DoActions(PlayWAV("Oda_03.ogg"))
        v.stb.print("\x13\x1BOda Sakunosuke\n")
        # (Line 89) v.stb.print("\x13\x04어떤 사람이 소설을 쓰는 건 인간을 쓰는 거라고 하더군\x04");
        v.stb.print("\x13\x04어떤 사람이 소설을 쓰는 건 인간을 쓰는 거라고 하더군\x04")
        # (Line 90) break;
        EUDBreak()
        # (Line 91) case 16:
    _t16 = EUDSwitchCase()
    # (Line 92) v.stb.print("\x13\x1BOda Sakunosuke\n");
    if _t16(16):
        v.stb.print("\x13\x1BOda Sakunosuke\n")
        # (Line 93) v.stb.print("\x13\x04남의 목숨을 빼앗는 자가 인생을 쓸 수는 없지\x04");
        v.stb.print("\x13\x04남의 목숨을 빼앗는 자가 인생을 쓸 수는 없지\x04")
        # (Line 94) break;
        EUDBreak()
        # (Line 95) case 17:
    _t17 = EUDSwitchCase()
    # (Line 96) v.stb.print("\x13\x1BOda Sakunosuke\n");
    if _t17(17):
        v.stb.print("\x13\x1BOda Sakunosuke\n")
        # (Line 97) v.stb.print("\x13\x04그래서 살인하지 않는 거다\x04");
        v.stb.print("\x13\x04그래서 살인하지 않는 거다\x04")
        # (Line 98) break;
        EUDBreak()
        # (Line 99) case 18:
    _t18 = EUDSwitchCase()
    # (Line 100) PlayWAV("Oda_04.ogg");
    if _t18(18):
        # (Line 101) v.stb.print("\x13\x1BOda Sakunosuke\n");
        DoActions(PlayWAV("Oda_04.ogg"))
        v.stb.print("\x13\x1BOda Sakunosuke\n")
        # (Line 102) v.stb.print("\x13\x04이제 다 끝났어\x04");
        v.stb.print("\x13\x04이제 다 끝났어\x04")
        # (Line 103) break;
        EUDBreak()
        # (Line 104) case 19:
    _t19 = EUDSwitchCase()
    # (Line 105) PlayWAV("Oda_05.ogg");
    if _t19(19):
        # (Line 106) v.stb.print("\x13\x1BOda Sakunosuke\n");
        DoActions(PlayWAV("Oda_05.ogg"))
        v.stb.print("\x13\x1BOda Sakunosuke\n")
        # (Line 107) v.stb.print("\x13\x04나는 소설가가 되고 싶었어\x04");
        v.stb.print("\x13\x04나는 소설가가 되고 싶었어\x04")
        # (Line 108) break;
        EUDBreak()
        # (Line 109) case 20:
    _t20 = EUDSwitchCase()
    # (Line 110) PlayWAV("Oda_06.ogg");
    if _t20(20):
        # (Line 111) v.stb.print("\x13\x1BOda Sakunosuke\n");
        DoActions(PlayWAV("Oda_06.ogg"))
        v.stb.print("\x13\x1BOda Sakunosuke\n")
        # (Line 112) v.stb.print("\x13\x04또다시 사람을 죽였다간 그럴 자격이 없어질 것 같아서\x04");
        v.stb.print("\x13\x04또다시 사람을 죽였다간 그럴 자격이 없어질 것 같아서\x04")
        # (Line 113) break;
        EUDBreak()
        # (Line 114) case 21:
    _t21 = EUDSwitchCase()
    # (Line 115) v.stb.print("\x13\x1BOda Sakunosuke\n");
    if _t21(21):
        v.stb.print("\x13\x1BOda Sakunosuke\n")
        # (Line 116) v.stb.print("\x13\x04그래서 살인을 관뒀다\x04");
        v.stb.print("\x13\x04그래서 살인을 관뒀다\x04")
        # (Line 117) break;
        EUDBreak()
        # (Line 118) case 22:
    _t22 = EUDSwitchCase()
    # (Line 119) PlayWAV("Oda_07.ogg");
    if _t22(22):
        # (Line 120) v.stb.print("\x13\x1BOda Sakunosuke\n");
        DoActions(PlayWAV("Oda_07.ogg"))
        v.stb.print("\x13\x1BOda Sakunosuke\n")
        # (Line 121) v.stb.print("\x13\x04하지만 그것도 다 끝났어\x04");
        v.stb.print("\x13\x04하지만 그것도 다 끝났어\x04")
        # (Line 122) break;
        EUDBreak()
        # (Line 123) case 23:
    _t23 = EUDSwitchCase()
    # (Line 124) v.stb.print("\x13\x1BOda Sakunosuke\n");
    if _t23(23):
        v.stb.print("\x13\x1BOda Sakunosuke\n")
        # (Line 125) v.stb.print("\x13\x04내가 원하는 건 하나뿐이야\x04");
        v.stb.print("\x13\x04내가 원하는 건 하나뿐이야\x04")
        # (Line 126) break;
        EUDBreak()
        # (Line 127) case 24:
    _t24 = EUDSwitchCase()
    # (Line 128) PlayWAV("Oda_08.ogg");
    if _t24(24):
        # (Line 129) break;
        DoActions(PlayWAV("Oda_08.ogg"))
        EUDBreak()
        # (Line 130) case 25:
    _t25 = EUDSwitchCase()
    # (Line 131) PlayWAV("Oda_09.ogg");
    if _t25(25):
        # (Line 132) v.stb.print("\x13\x1BOda Sakunosuke\n");
        DoActions(PlayWAV("Oda_09.ogg"))
        v.stb.print("\x13\x1BOda Sakunosuke\n")
        # (Line 133) v.stb.print("\x13\x04그런 것 같군\x04");
        v.stb.print("\x13\x04그런 것 같군\x04")
        # (Line 134) break;
        EUDBreak()
        # (Line 135) case 26:
    _t26 = EUDSwitchCase()
    # (Line 136) PlayWAV("Oda_10.ogg");
    if _t26(26):
        # (Line 137) v.stb.print("\x13\x1BOda Sakunosuke\n");
        DoActions(PlayWAV("Oda_10.ogg"))
        v.stb.print("\x13\x1BOda Sakunosuke\n")
        # (Line 138) v.stb.print("\x13\x04그렇다면 미래 예측을 쓰지 않고 싸울 뿐이다\x04");
        v.stb.print("\x13\x04그렇다면 미래 예측을 쓰지 않고 싸울 뿐이다\x04")
        # (Line 139) break;
        EUDBreak()
        # (Line 140) case 27:
    _t27 = EUDSwitchCase()
    # (Line 141) PlayWAV("Oda_Unique.ogg");
    if _t27(27):
        # (Line 142) break;
        DoActions(PlayWAV("Oda_Unique.ogg"))
        EUDBreak()
        # (Line 143) case 28:
    _t28 = EUDSwitchCase()
    # (Line 144) PlayWAV("Oda_Ult03.ogg");
    if _t28(28):
        # (Line 145) v.stb.print("\x13\x1BOda Sakunosuke\n");
        DoActions(PlayWAV("Oda_Ult03.ogg"))
        v.stb.print("\x13\x1BOda Sakunosuke\n")
        # (Line 146) v.stb.print("\x13\x04잘자라, 코스케\x04");
        v.stb.print("\x13\x04잘자라, 코스케\x04")
        # (Line 147) break;
        EUDBreak()
        # (Line 148) case 29:
    _t29 = EUDSwitchCase()
    # (Line 149) v.stb.print("\x13\x1BOda Sakunosuke\n");
    if _t29(29):
        v.stb.print("\x13\x1BOda Sakunosuke\n")
        # (Line 150) v.stb.print("\x13\x04잘자라, 카츠미\x04");
        v.stb.print("\x13\x04잘자라, 카츠미\x04")
        # (Line 151) break;
        EUDBreak()
        # (Line 152) case 30:
    _t30 = EUDSwitchCase()
    # (Line 153) v.stb.print("\x13\x1BOda Sakunosuke\n");
    if _t30(30):
        v.stb.print("\x13\x1BOda Sakunosuke\n")
        # (Line 154) v.stb.print("\x13\x04잘자라, 유우\x04");
        v.stb.print("\x13\x04잘자라, 유우\x04")
        # (Line 155) break;
        EUDBreak()
        # (Line 156) case 31:
    _t31 = EUDSwitchCase()
    # (Line 157) v.stb.print("\x13\x1BOda Sakunosuke\n");
    if _t31(31):
        v.stb.print("\x13\x1BOda Sakunosuke\n")
        # (Line 158) v.stb.print("\x13\x04잘자라, 신지\x04");
        v.stb.print("\x13\x04잘자라, 신지\x04")
        # (Line 159) break;
        EUDBreak()
        # (Line 160) case 32:
    _t32 = EUDSwitchCase()
    # (Line 161) v.stb.print("\x13\x1BOda Sakunosuke\n");
    if _t32(32):
        v.stb.print("\x13\x1BOda Sakunosuke\n")
        # (Line 162) v.stb.print("\x13\x04잘자라, 사쿠라\x04");
        v.stb.print("\x13\x04잘자라, 사쿠라\x04")
        # (Line 163) break;
        EUDBreak()
        # (Line 164) case 33:
    _t33 = EUDSwitchCase()
    # (Line 165) v.stb.print("\x13\x1BOda Sakunosuke\n");
    if _t33(33):
        v.stb.print("\x13\x1BOda Sakunosuke\n")
        # (Line 166) v.stb.print("\x13\x04평안히 잠들어라\x04");
        v.stb.print("\x13\x04평안히 잠들어라\x04")
        # (Line 167) break;
        EUDBreak()
        # (Line 168) case 34:
    _t34 = EUDSwitchCase()
    # (Line 169) v.stb.print("\x13\x1BOda Sakunosuke\n");
    if _t34(34):
        v.stb.print("\x13\x1BOda Sakunosuke\n")
        # (Line 170) v.stb.print("\x13\x04다녀오마");
        v.stb.print("\x13\x04다녀오마")
        # (Line 171) break;
        EUDBreak()
        # (Line 172) }
    # (Line 173) }
    EUDEndSwitch()
