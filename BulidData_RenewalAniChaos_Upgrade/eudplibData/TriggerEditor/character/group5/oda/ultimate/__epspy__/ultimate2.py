## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import variable as v;
import variable as v
# (Line 2) import func.trig as trg;
from func import trig as trg
# (Line 3) import func.trigadv as adv;
from func import trigadv as adv
# (Line 4) import func.sound as s;
from func import sound as s
# (Line 6) var val = 0;
val = EUDCreateVariables(1)
_IGVA([val], lambda: [0])
# (Line 9) function main(playerID)
# (Line 10) {
@EUDFunc
def f_main(playerID):
    # (Line 11) if (v.P_CountMain[playerID] >= 3)
    if EUDIf()(v.P_CountMain[playerID] >= 3):
        # (Line 12) {
        # (Line 13) trg.Debuff_Stop();
        trg.Debuff_Stop()
        # (Line 14) }
        # (Line 16) trg.Debuff_BanReturn();
    EUDEndIf()
    trg.Debuff_BanReturn()
    # (Line 18) MoveUnit(All, " Unit. Schnee", playerID, "Anywhere", "[Skill]HoldPosition");
    # (Line 20) trg.Buff_ShieldFix(1);
    DoActions(MoveUnit(All, " Unit. Schnee", playerID, "Anywhere", "[Skill]HoldPosition"))
    trg.Buff_ShieldFix(1)
    # (Line 22) if (val != 0)
    if EUDIf()(val == 0, neg=True):
        # (Line 23) s.CharacterVoice(7 + val);
        s.CharacterVoice(7 + val)
        # (Line 25) if (v.P_WaitMain[playerID] == 0)
    EUDEndIf()
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 26) {
        # (Line 27) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 28) {
            # (Line 29) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 30) {
                # (Line 31) val = 3;
                val << (3)
                # (Line 33) SetDeaths(playerID, SetTo, 1, " `ShieldRecharge");
                # (Line 34) }
                DoActions(SetDeaths(playerID, SetTo, 1, " `ShieldRecharge"))
                # (Line 36) trg.Main_Wait(160);
            EUDEndIf()
            trg.Main_Wait(160)
            # (Line 38) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 40) if (v.P_LoopMain[playerID] == 30)
            if EUDIf()(v.P_LoopMain[playerID] == 30):
                # (Line 41) {
                # (Line 42) val = 4;
                val << (4)
                # (Line 44) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 45) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 46) }
                # (Line 47) }
            EUDEndIf()
            # (Line 48) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 49) {
            # (Line 50) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 51) {
                # (Line 52) SetSwitch("Recall - Oda", Set);
                # (Line 53) }
                DoActions(SetSwitch("Recall - Oda", Set))
                # (Line 55) if (v.P_LoopMain[playerID] == 15)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 15):
                # (Line 56) {
                # (Line 57) val = 5;
                val << (5)
                # (Line 58) }
                # (Line 60) trg.Main_Wait(160);
            EUDEndIf()
            trg.Main_Wait(160)
            # (Line 62) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 64) if (v.P_LoopMain[playerID] == 36)
            if EUDIf()(v.P_LoopMain[playerID] == 36):
                # (Line 65) {
                # (Line 66) val = 0;
                val << (0)
                # (Line 68) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 69) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 70) }
                # (Line 71) }
            EUDEndIf()
            # (Line 72) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 73) {
            # (Line 74) trg.Shape_Edge(playerID, 1, " Unit. Hoffnung 25000", 45, 3, 50);
            trg.Shape_Edge(playerID, 1, " Unit. Hoffnung 25000", 45, 3, 50)
            # (Line 75) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
            # (Line 77) trg.Main_Wait(160);
            DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
            trg.Main_Wait(160)
            # (Line 79) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 81) if (v.P_LoopMain[playerID] == 26)
            if EUDIf()(v.P_LoopMain[playerID] == 26):
                # (Line 82) {
                # (Line 83) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 84) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 85) }
                # (Line 86) }
            EUDEndIf()
            # (Line 87) else if (v.P_CountMain[playerID] == 3)
        if EUDElseIf()(v.P_CountMain[playerID] == 3):
            # (Line 88) {
            # (Line 89) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 90) {
                # (Line 91) trg.Shape_NxNSquare(playerID, 1, "40 + 1n Guardian", 6, 50);
                trg.Shape_NxNSquare(playerID, 1, "40 + 1n Guardian", 6, 50)
                # (Line 92) }
                # (Line 93) else if (v.P_LoopMain[playerID] == 2)
            if EUDElseIf()(v.P_LoopMain[playerID] == 2):
                # (Line 94) {
                # (Line 95) trg.Shape_NxNSquare(playerID, 1, "40 + 1n Guardian", 11, 50);
                trg.Shape_NxNSquare(playerID, 1, "40 + 1n Guardian", 11, 50)
                # (Line 96) }
                # (Line 97) else if (v.P_LoopMain[playerID] == 4)
            if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                # (Line 98) {
                # (Line 99) trg.Shape_NxNSquare(playerID, 1, "40 + 1n Wraith", 11, 75);
                trg.Shape_NxNSquare(playerID, 1, "40 + 1n Wraith", 11, 75)
                # (Line 100) trg.Shape_NxNSquare(playerID, 1, " Unit. Hoffnung 25000", 11, 75);
                trg.Shape_NxNSquare(playerID, 1, " Unit. Hoffnung 25000", 11, 75)
                # (Line 102) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 103) Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 104) }
                DoActions(Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 105) else if (v.P_LoopMain[playerID] == 6)
            if EUDElseIf()(v.P_LoopMain[playerID] == 6):
                # (Line 106) {
                # (Line 107) RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
                # (Line 109) trg.Shape_NxNSquare(playerID, 1, "50 + 1n Battlecruiser", 11, 75);
                DoActions(RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                trg.Shape_NxNSquare(playerID, 1, "50 + 1n Battlecruiser", 11, 75)
                # (Line 111) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 112) Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 113) }
                DoActions(Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 115) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
            EUDEndIf()
            # (Line 116) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
            DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
            # (Line 118) trg.Main_Wait(160);
            DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
            trg.Main_Wait(160)
            # (Line 120) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 122) if (v.P_LoopMain[playerID] == 8)
            if EUDIf()(v.P_LoopMain[playerID] == 8):
                # (Line 123) {
                # (Line 124) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 125) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 126) }
                # (Line 127) }
            EUDEndIf()
            # (Line 128) else if (v.P_CountMain[playerID] == 4)
        if EUDElseIf()(v.P_CountMain[playerID] == 4):
            # (Line 129) {
            # (Line 130) CreateUnit(24, "80 + 1n Guardian", dwrand() % 8 + 33, playerID);
            # (Line 131) CreateUnit(6, "40 + 1n Guardian", dwrand() % 8 + 33, playerID);
            DoActions(CreateUnit(24, "80 + 1n Guardian", f_dwrand() % 8 + 33, playerID))
            # (Line 132) SetInvincibility(Enable, "Any unit", playerID, "[Skill]Unit_Wait_ALL");
            DoActions(CreateUnit(6, "40 + 1n Guardian", f_dwrand() % 8 + 33, playerID))
            # (Line 134) var i = 0;
            DoActions(SetInvincibility(Enable, "Any unit", playerID, "[Skill]Unit_Wait_ALL"))
            i = EUDVariable()
            i << (0)
            # (Line 136) for (; i < 6; i++)
            if EUDWhile()(i >= 6, neg=True):
                def _t21():
                    i.__iadd__(1)
                # (Line 137) {
                # (Line 138) if (Bring(playerID, AtLeast, 1, "50 + 1n Battlecruiser", "Anywhere"))
                if EUDIf()(Bring(playerID, AtLeast, 1, "50 + 1n Battlecruiser", "Anywhere")):
                    # (Line 139) {
                    # (Line 140) var x = dwrand() % 20 + 10;
                    x = EUDVariable()
                    x << (f_dwrand() % 20 + 10)
                    # (Line 142) MoveLocation(v.P_LocationID[playerID], "50 + 1n Battlecruiser", playerID, "Anywhere");
                    # (Line 143) RemoveUnitAt(1, "50 + 1n Battlecruiser", "Anywhere", playerID);
                    DoActions(MoveLocation(v.P_LocationID[playerID], "50 + 1n Battlecruiser", playerID, "Anywhere"))
                    # (Line 144) MoveUnit(1, "40 + 1n Guardian", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                    DoActions(RemoveUnitAt(1, "50 + 1n Battlecruiser", "Anywhere", playerID))
                    # (Line 145) addloc(v.P_LocationID[playerID], x, x);
                    DoActions(MoveUnit(1, "40 + 1n Guardian", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                    f_addloc(v.P_LocationID[playerID], x, x)
                    # (Line 146) MoveUnit(1, "80 + 1n Guardian", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                    # (Line 147) addloc(v.P_LocationID[playerID], -x, -x);
                    DoActions(MoveUnit(1, "80 + 1n Guardian", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                    f_addloc(v.P_LocationID[playerID], -x, -x)
                    # (Line 148) MoveUnit(1, "80 + 1n Guardian", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                    # (Line 149) addloc(v.P_LocationID[playerID], -x, x);
                    DoActions(MoveUnit(1, "80 + 1n Guardian", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                    f_addloc(v.P_LocationID[playerID], -x, x)
                    # (Line 150) MoveUnit(1, "80 + 1n Guardian", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                    # (Line 151) addloc(v.P_LocationID[playerID], x, -x);
                    DoActions(MoveUnit(1, "80 + 1n Guardian", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                    f_addloc(v.P_LocationID[playerID], x, -x)
                    # (Line 152) MoveUnit(1, "80 + 1n Guardian", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                    # (Line 153) }
                    DoActions(MoveUnit(1, "80 + 1n Guardian", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                    # (Line 154) }
                EUDEndIf()
                # (Line 156) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                EUDSetContinuePoint()
                _t21()
            EUDEndWhile()
            # (Line 157) Order("40 + 1n Guardian", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
            # (Line 159) KillUnitAt(All, "80 + 1n Guardian", "Anywhere", playerID);
            DoActions(Order("40 + 1n Guardian", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
            # (Line 161) trg.Main_Wait(160);
            DoActions(KillUnitAt(All, "80 + 1n Guardian", "Anywhere", playerID))
            trg.Main_Wait(160)
            # (Line 163) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 165) if (v.P_LoopMain[playerID] == 25)
            if EUDIf()(v.P_LoopMain[playerID] == 25):
                # (Line 166) {
                # (Line 167) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 168) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 169) }
                # (Line 170) }
            EUDEndIf()
            # (Line 171) else if (v.P_CountMain[playerID] == 5)
        if EUDElseIf()(v.P_CountMain[playerID] == 5):
            # (Line 172) {
            # (Line 173) if (v.P_LoopMain[playerID] % 3 == 0)
            if EUDIf()(v.P_LoopMain[playerID] % 3 == 0):
                # (Line 174) {
                # (Line 175) trg.Table_Sin(playerID, 0, 40 * (v.P_LoopMain[playerID] / 3));
                trg.Table_Sin(playerID, 0, 40 * (v.P_LoopMain[playerID] // 3))
                # (Line 176) trg.Table_Cos(playerID, 0, 40 * (v.P_LoopMain[playerID] / 3));
                trg.Table_Cos(playerID, 0, 40 * (v.P_LoopMain[playerID] // 3))
                # (Line 178) var x = v.P_AngleCos[playerID];
                x = EUDVariable()
                x << (v.P_AngleCos[playerID])
                # (Line 179) var y = v.P_AngleSin[playerID];
                y = EUDVariable()
                y << (v.P_AngleSin[playerID])
                # (Line 181) adv.Shape_NxNSquareAt2(playerID, 1, "40 + 1n Wraith", 2, 50, x, y);
                adv.Shape_NxNSquareAt2(playerID, 1, "40 + 1n Wraith", 2, 50, x, y)
                # (Line 182) adv.Shape_NxNSquareAt2(playerID, 1, "40 + 1n Wraith", 2, 50, -x, -y);
                adv.Shape_NxNSquareAt2(playerID, 1, "40 + 1n Wraith", 2, 50, -x, -y)
                # (Line 183) adv.Shape_NxNSquareAt2(playerID, 1, "40 + 1n Wraith", 2, 50, -y, x);
                adv.Shape_NxNSquareAt2(playerID, 1, "40 + 1n Wraith", 2, 50, -y, x)
                # (Line 184) adv.Shape_NxNSquareAt2(playerID, 1, "40 + 1n Wraith", 2, 50, y, -x);
                adv.Shape_NxNSquareAt2(playerID, 1, "40 + 1n Wraith", 2, 50, y, -x)
                # (Line 186) adv.Shape_NxNSquareAt2(playerID, 1, " Unit. Hoffnung 25000", 2, 50, x, y);
                adv.Shape_NxNSquareAt2(playerID, 1, " Unit. Hoffnung 25000", 2, 50, x, y)
                # (Line 187) adv.Shape_NxNSquareAt2(playerID, 1, " Unit. Hoffnung 25000", 2, 50, -x, -y);
                adv.Shape_NxNSquareAt2(playerID, 1, " Unit. Hoffnung 25000", 2, 50, -x, -y)
                # (Line 188) adv.Shape_NxNSquareAt2(playerID, 1, " Unit. Hoffnung 25000", 2, 50, -y, x);
                adv.Shape_NxNSquareAt2(playerID, 1, " Unit. Hoffnung 25000", 2, 50, -y, x)
                # (Line 189) adv.Shape_NxNSquareAt2(playerID, 1, " Unit. Hoffnung 25000", 2, 50, y, -x);
                adv.Shape_NxNSquareAt2(playerID, 1, " Unit. Hoffnung 25000", 2, 50, y, -x)
                # (Line 190) }
                # (Line 191) else if (v.P_LoopMain[playerID] % 3 == 1)
            if EUDElseIf()(v.P_LoopMain[playerID] % 3 == 1):
                # (Line 192) {
                # (Line 193) trg.Table_Sin(playerID, 30, 40 * (v.P_LoopMain[playerID] / 3));
                trg.Table_Sin(playerID, 30, 40 * (v.P_LoopMain[playerID] // 3))
                # (Line 194) trg.Table_Cos(playerID, 30, 40 * (v.P_LoopMain[playerID] / 3));
                trg.Table_Cos(playerID, 30, 40 * (v.P_LoopMain[playerID] // 3))
                # (Line 196) var x = v.P_AngleCos[playerID];
                x = EUDVariable()
                x << (v.P_AngleCos[playerID])
                # (Line 197) var y = v.P_AngleSin[playerID];
                y = EUDVariable()
                y << (v.P_AngleSin[playerID])
                # (Line 199) adv.Shape_NxNSquareAt2(playerID, 1, "40 + 1n Mojo", 2, 50, x, y);
                adv.Shape_NxNSquareAt2(playerID, 1, "40 + 1n Mojo", 2, 50, x, y)
                # (Line 200) adv.Shape_NxNSquareAt2(playerID, 1, "40 + 1n Mojo", 2, 50, -x, -y);
                adv.Shape_NxNSquareAt2(playerID, 1, "40 + 1n Mojo", 2, 50, -x, -y)
                # (Line 201) adv.Shape_NxNSquareAt2(playerID, 1, "40 + 1n Mojo", 2, 50, -y, x);
                adv.Shape_NxNSquareAt2(playerID, 1, "40 + 1n Mojo", 2, 50, -y, x)
                # (Line 202) adv.Shape_NxNSquareAt2(playerID, 1, "40 + 1n Mojo", 2, 50, y, -x);
                adv.Shape_NxNSquareAt2(playerID, 1, "40 + 1n Mojo", 2, 50, y, -x)
                # (Line 204) adv.Shape_NxNSquareAt2(playerID, 1, " Unit. Hoffnung 25000", 2, 50, x, y);
                adv.Shape_NxNSquareAt2(playerID, 1, " Unit. Hoffnung 25000", 2, 50, x, y)
                # (Line 205) adv.Shape_NxNSquareAt2(playerID, 1, " Unit. Hoffnung 25000", 2, 50, -x, -y);
                adv.Shape_NxNSquareAt2(playerID, 1, " Unit. Hoffnung 25000", 2, 50, -x, -y)
                # (Line 206) adv.Shape_NxNSquareAt2(playerID, 1, " Unit. Hoffnung 25000", 2, 50, -y, x);
                adv.Shape_NxNSquareAt2(playerID, 1, " Unit. Hoffnung 25000", 2, 50, -y, x)
                # (Line 207) adv.Shape_NxNSquareAt2(playerID, 1, " Unit. Hoffnung 25000", 2, 50, y, -x);
                adv.Shape_NxNSquareAt2(playerID, 1, " Unit. Hoffnung 25000", 2, 50, y, -x)
                # (Line 208) }
                # (Line 209) else if (v.P_LoopMain[playerID] % 3 == 2)
            if EUDElseIf()(v.P_LoopMain[playerID] % 3 == 2):
                # (Line 210) {
                # (Line 211) trg.Table_Sin(playerID, 60, 40 * (v.P_LoopMain[playerID] / 3));
                trg.Table_Sin(playerID, 60, 40 * (v.P_LoopMain[playerID] // 3))
                # (Line 212) trg.Table_Cos(playerID, 60, 40 * (v.P_LoopMain[playerID] / 3));
                trg.Table_Cos(playerID, 60, 40 * (v.P_LoopMain[playerID] // 3))
                # (Line 214) var x = v.P_AngleCos[playerID];
                x = EUDVariable()
                x << (v.P_AngleCos[playerID])
                # (Line 215) var y = v.P_AngleSin[playerID];
                y = EUDVariable()
                y << (v.P_AngleSin[playerID])
                # (Line 217) adv.Shape_NxNSquareAt2(playerID, 1, "40 + 1n Mutalisk", 2, 50, x, y);
                adv.Shape_NxNSquareAt2(playerID, 1, "40 + 1n Mutalisk", 2, 50, x, y)
                # (Line 218) adv.Shape_NxNSquareAt2(playerID, 1, "40 + 1n Mutalisk", 2, 50, -x, -y);
                adv.Shape_NxNSquareAt2(playerID, 1, "40 + 1n Mutalisk", 2, 50, -x, -y)
                # (Line 219) adv.Shape_NxNSquareAt2(playerID, 1, "40 + 1n Mutalisk", 2, 50, -y, x);
                adv.Shape_NxNSquareAt2(playerID, 1, "40 + 1n Mutalisk", 2, 50, -y, x)
                # (Line 220) adv.Shape_NxNSquareAt2(playerID, 1, "40 + 1n Mutalisk", 2, 50, y, -x);
                adv.Shape_NxNSquareAt2(playerID, 1, "40 + 1n Mutalisk", 2, 50, y, -x)
                # (Line 222) adv.Shape_NxNSquareAt2(playerID, 1, " Unit. Hoffnung 25000", 2, 50, x, y);
                adv.Shape_NxNSquareAt2(playerID, 1, " Unit. Hoffnung 25000", 2, 50, x, y)
                # (Line 223) adv.Shape_NxNSquareAt2(playerID, 1, " Unit. Hoffnung 25000", 2, 50, -x, -y);
                adv.Shape_NxNSquareAt2(playerID, 1, " Unit. Hoffnung 25000", 2, 50, -x, -y)
                # (Line 224) adv.Shape_NxNSquareAt2(playerID, 1, " Unit. Hoffnung 25000", 2, 50, -y, x);
                adv.Shape_NxNSquareAt2(playerID, 1, " Unit. Hoffnung 25000", 2, 50, -y, x)
                # (Line 225) adv.Shape_NxNSquareAt2(playerID, 1, " Unit. Hoffnung 25000", 2, 50, y, -x);
                adv.Shape_NxNSquareAt2(playerID, 1, " Unit. Hoffnung 25000", 2, 50, y, -x)
                # (Line 226) }
                # (Line 228) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
            EUDEndIf()
            # (Line 229) Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
            # (Line 230) Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            DoActions(Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
            # (Line 231) Order("40 + 1n Mutalisk", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            DoActions(Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
            # (Line 233) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
            DoActions(Order("40 + 1n Mutalisk", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
            # (Line 235) trg.Main_Wait(80);
            DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
            trg.Main_Wait(80)
            # (Line 237) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 239) if (v.P_LoopMain[playerID] == 32)
            if EUDIf()(v.P_LoopMain[playerID] == 32):
                # (Line 240) {
                # (Line 241) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                # (Line 243) v.P_CountMain[playerID] += 1;
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 244) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 245) }
                # (Line 246) }
            EUDEndIf()
            # (Line 247) else if (v.P_CountMain[playerID] == 6)
        if EUDElseIf()(v.P_CountMain[playerID] == 6):
            # (Line 248) {
            # (Line 249) trg.Main_Wait(3200);
            trg.Main_Wait(3200)
            # (Line 251) v.P_CountMain[playerID] += 1;
            _ARRW(v.P_CountMain, playerID).__iadd__(1)
            # (Line 252) v.P_LoopMain[playerID] = 0;
            _ARRW(v.P_LoopMain, playerID) << (0)
            # (Line 253) }
            # (Line 254) else if (v.P_CountMain[playerID] == 7)
        if EUDElseIf()(v.P_CountMain[playerID] == 7):
            # (Line 255) {
            # (Line 256) KillUnitAt(All, "40 + 1n Lurker", "Anywhere", playerID);
            # (Line 257) KillUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Lurker", "Anywhere", playerID))
            # (Line 258) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID))
            # (Line 259) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
            # (Line 261) SetSwitch("UiltimateSwitch", Clear);
            DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
            # (Line 262) SetSwitch("Recall - Oda", Clear);
            DoActions(SetSwitch("UiltimateSwitch", Clear))
            # (Line 265) trg.SkillEnd();
            DoActions(SetSwitch("Recall - Oda", Clear))
            trg.SkillEnd()
            # (Line 266) }
            # (Line 267) }
        EUDEndIf()
        # (Line 269) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
    EUDEndIf()
    # (Line 270) }
    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
