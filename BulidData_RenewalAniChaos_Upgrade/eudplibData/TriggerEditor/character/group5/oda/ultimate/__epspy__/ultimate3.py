## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import variable as v;
import variable as v
# (Line 2) import func.trig as trg;
from func import trig as trg
# (Line 3) import func.sound as s;
from func import sound as s
# (Line 5) function main(playerID)
# (Line 6) {
@EUDFunc
def f_main(playerID):
    # (Line 7) trg.Debuff_BanReturn();
    trg.Debuff_BanReturn()
    # (Line 8) trg.Debuff_Stop();
    trg.Debuff_Stop()
    # (Line 10) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 11) {
        # (Line 12) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 13) {
            # (Line 14) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 15) {
                # (Line 16) SetSwitch("Recall - Oda", Set);
                # (Line 17) }
                DoActions(SetSwitch("Recall - Oda", Set))
                # (Line 19) trg.Table_Sin(playerID, 22 * v.P_LoopMain[playerID], 200);
            EUDEndIf()
            trg.Table_Sin(playerID, 22 * v.P_LoopMain[playerID], 200)
            # (Line 20) trg.Table_Cos(playerID, 22 * v.P_LoopMain[playerID], 200);
            trg.Table_Cos(playerID, 22 * v.P_LoopMain[playerID], 200)
            # (Line 22) var x = v.P_AngleCos[playerID];
            x = EUDVariable()
            x << (v.P_AngleCos[playerID])
            # (Line 23) var y = v.P_AngleSin[playerID];
            y = EUDVariable()
            y << (v.P_AngleSin[playerID])
            # (Line 25) trg.Shape_Double(playerID, 1, "Bengalaas (Jungle)", x, y);
            trg.Shape_Double(playerID, 1, "Bengalaas (Jungle)", x, y)
            # (Line 26) KillUnitAt(All, "Bengalaas (Jungle)", "Anywhere", playerID);
            # (Line 28) if (v.P_LoopMain[playerID] == 73)
            DoActions(KillUnitAt(All, "Bengalaas (Jungle)", "Anywhere", playerID))
            if EUDIf()(v.P_LoopMain[playerID] == 73):
                # (Line 29) {
                # (Line 30) s.CharacterVoice(29);
                s.CharacterVoice(29)
                # (Line 31) }
                # (Line 32) if (v.P_LoopMain[playerID] == 144)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 144):
                # (Line 33) {
                # (Line 34) s.CharacterVoice(30);
                s.CharacterVoice(30)
                # (Line 35) }
                # (Line 36) if (v.P_LoopMain[playerID] == 215)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 215):
                # (Line 37) {
                # (Line 38) s.CharacterVoice(31);
                s.CharacterVoice(31)
                # (Line 39) }
                # (Line 40) if (v.P_LoopMain[playerID] == 279)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 279):
                # (Line 41) {
                # (Line 42) s.CharacterVoice(32);
                s.CharacterVoice(32)
                # (Line 43) }
                # (Line 44) if (v.P_LoopMain[playerID] == 334)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 334):
                # (Line 45) {
                # (Line 46) s.CharacterVoice(33);
                s.CharacterVoice(33)
                # (Line 47) }
                # (Line 49) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 51) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 53) if (v.P_LoopMain[playerID] == 398)
            if EUDIf()(v.P_LoopMain[playerID] == 398):
                # (Line 54) {
                # (Line 55) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 56) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 57) }
                # (Line 58) }
            EUDEndIf()
            # (Line 59) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 60) {
            # (Line 61) trg.Table_Sin(playerID, 0, 100);
            trg.Table_Sin(playerID, 0, 100)
            # (Line 62) trg.Table_Cos(playerID, 0, 100);
            trg.Table_Cos(playerID, 0, 100)
            # (Line 64) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
            # (Line 66) trg.Table_Sin(playerID, 45, 100);
            trg.Table_Sin(playerID, 45, 100)
            # (Line 67) trg.Table_Cos(playerID, 45, 100);
            trg.Table_Cos(playerID, 45, 100)
            # (Line 69) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
            # (Line 71) trg.Table_Sin(playerID, 0, 200);
            trg.Table_Sin(playerID, 0, 200)
            # (Line 72) trg.Table_Cos(playerID, 0, 200);
            trg.Table_Cos(playerID, 0, 200)
            # (Line 74) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
            # (Line 76) trg.Table_Sin(playerID, 45, 200);
            trg.Table_Sin(playerID, 45, 200)
            # (Line 77) trg.Table_Cos(playerID, 45, 200);
            trg.Table_Cos(playerID, 45, 200)
            # (Line 79) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
            # (Line 81) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
            # (Line 83) s.CharacterVoice(34);
            DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
            s.CharacterVoice(34)
            # (Line 85) SetSwitch("Recall - Oda", Clear);
            # (Line 86) SetSwitch("Reinforce - Oda", Set);
            DoActions(SetSwitch("Recall - Oda", Clear))
            # (Line 88) trg.SkillEnd();
            DoActions(SetSwitch("Reinforce - Oda", Set))
            trg.SkillEnd()
            # (Line 89) }
            # (Line 90) }
        EUDEndIf()
        # (Line 91) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
    EUDEndIf()
    # (Line 93) }
    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
