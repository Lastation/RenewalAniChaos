## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 5) function main(playerID)
# (Line 6) {
@EUDFunc
def f_main(playerID):
    # (Line 7) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 8) {
        # (Line 9) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 10) {
            # (Line 11) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 12) {
                # (Line 13) trg.Table_Sin(playerID, 45, 50);
                trg.Table_Sin(playerID, 45, 50)
                # (Line 14) trg.Table_Cos(playerID, 45, 50);
                trg.Table_Cos(playerID, 45, 50)
                # (Line 16) trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 17) trg.Shape_Square(playerID, 1, "Protoss Dark Archon", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "Protoss Dark Archon", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 19) trg.Table_Sin(playerID, 22, 125);
                trg.Table_Sin(playerID, 22, 125)
                # (Line 20) trg.Table_Cos(playerID, 22, 125);
                trg.Table_Cos(playerID, 22, 125)
                # (Line 22) trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 23) trg.Shape_Square(playerID, 1, "Protoss Dark Archon", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "Protoss Dark Archon", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 25) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 27) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 28) Order("40 + 1n Mutalisk", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 30) trg.Main_Wait(160);
                DoActions(Order("40 + 1n Mutalisk", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(160)
                # (Line 32) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 33) }
                # (Line 34) else if (v.P_LoopMain[playerID] == 1)
            if EUDElseIf()(v.P_LoopMain[playerID] == 1):
                # (Line 35) {
                # (Line 36) RemoveUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID);
                # (Line 38) trg.Table_Sin(playerID, 45, 50);
                DoActions(RemoveUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID))
                trg.Table_Sin(playerID, 45, 50)
                # (Line 39) trg.Table_Cos(playerID, 45, 50);
                trg.Table_Cos(playerID, 45, 50)
                # (Line 41) trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 42) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 44) trg.Table_Sin(playerID, 22, 125);
                trg.Table_Sin(playerID, 22, 125)
                # (Line 45) trg.Table_Cos(playerID, 22, 125);
                trg.Table_Cos(playerID, 22, 125)
                # (Line 47) trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 48) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 50) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                # (Line 51) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                # (Line 53) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 55) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 56) }
                # (Line 57) else if (v.P_LoopMain[playerID] == 2)
            if EUDElseIf()(v.P_LoopMain[playerID] == 2):
                # (Line 58) {
                # (Line 59) trg.Table_Sin(playerID, 90, 50);
                trg.Table_Sin(playerID, 90, 50)
                # (Line 60) trg.Table_Cos(playerID, 90, 50);
                trg.Table_Cos(playerID, 90, 50)
                # (Line 62) trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 63) trg.Shape_Square(playerID, 1, "Protoss Dark Archon", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "Protoss Dark Archon", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 65) trg.Table_Sin(playerID, 67, 125);
                trg.Table_Sin(playerID, 67, 125)
                # (Line 66) trg.Table_Cos(playerID, 67, 125);
                trg.Table_Cos(playerID, 67, 125)
                # (Line 68) trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 69) trg.Shape_Square(playerID, 1, "Protoss Dark Archon", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "Protoss Dark Archon", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 71) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 73) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 74) Order("40 + 1n Mutalisk", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 76) trg.Main_Wait(160);
                DoActions(Order("40 + 1n Mutalisk", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(160)
                # (Line 78) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 79) }
                # (Line 80) else if (v.P_LoopMain[playerID] == 3)
            if EUDElseIf()(v.P_LoopMain[playerID] == 3):
                # (Line 81) {
                # (Line 82) RemoveUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID);
                # (Line 84) trg.Table_Sin(playerID, 90, 50);
                DoActions(RemoveUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID))
                trg.Table_Sin(playerID, 90, 50)
                # (Line 85) trg.Table_Cos(playerID, 90, 50);
                trg.Table_Cos(playerID, 90, 50)
                # (Line 87) trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 88) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 90) trg.Table_Sin(playerID, 67, 125);
                trg.Table_Sin(playerID, 67, 125)
                # (Line 91) trg.Table_Cos(playerID, 67, 125);
                trg.Table_Cos(playerID, 67, 125)
                # (Line 93) trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 94) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 96) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                # (Line 97) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                # (Line 99) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 101) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 102) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 103) }
                # (Line 104) }
            EUDEndIf()
            # (Line 105) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 106) {
            # (Line 107) if (v.P_LoopMain[playerID] < 2)
            if EUDIf()(v.P_LoopMain[playerID] >= 2, neg=True):
                # (Line 108) {
                # (Line 109) trg.Table_Sin(playerID, 90 * v.P_LoopMain[playerID] + 45, v.P_LoopMain[playerID] * 75 + 75);
                trg.Table_Sin(playerID, 90 * v.P_LoopMain[playerID] + 45, v.P_LoopMain[playerID] * 75 + 75)
                # (Line 110) trg.Table_Cos(playerID, 90 * v.P_LoopMain[playerID] + 45, v.P_LoopMain[playerID] * 75 + 75);
                trg.Table_Cos(playerID, 90 * v.P_LoopMain[playerID] + 45, v.P_LoopMain[playerID] * 75 + 75)
                # (Line 112) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 113) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
                # (Line 115) trg.Table_Sin(playerID, 90 * v.P_LoopMain[playerID], v.P_LoopMain[playerID] * 75 + 75);
                DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
                trg.Table_Sin(playerID, 90 * v.P_LoopMain[playerID], v.P_LoopMain[playerID] * 75 + 75)
                # (Line 116) trg.Table_Cos(playerID, 90 * v.P_LoopMain[playerID], v.P_LoopMain[playerID] * 75 + 75);
                trg.Table_Cos(playerID, 90 * v.P_LoopMain[playerID], v.P_LoopMain[playerID] * 75 + 75)
                # (Line 118) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 119) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
                # (Line 121) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 122) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 123) }
                # (Line 124) else if (v.P_LoopMain[playerID] == 2)
            if EUDElseIf()(v.P_LoopMain[playerID] == 2):
                # (Line 125) {
                # (Line 126) trg.Table_Sin(playerID, 90 * v.P_LoopMain[playerID] + 45, 150);
                trg.Table_Sin(playerID, 90 * v.P_LoopMain[playerID] + 45, 150)
                # (Line 127) trg.Table_Cos(playerID, 90 * v.P_LoopMain[playerID] + 45, 150);
                trg.Table_Cos(playerID, 90 * v.P_LoopMain[playerID] + 45, 150)
                # (Line 129) trg.Shape_Square(playerID, 1, "40 + 1n Guardian", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "40 + 1n Guardian", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 131) trg.Table_Sin(playerID, 90 * v.P_LoopMain[playerID], 150);
                trg.Table_Sin(playerID, 90 * v.P_LoopMain[playerID], 150)
                # (Line 132) trg.Table_Cos(playerID, 90 * v.P_LoopMain[playerID], 150);
                trg.Table_Cos(playerID, 90 * v.P_LoopMain[playerID], 150)
                # (Line 134) trg.Shape_Square(playerID, 1, "40 + 1n Guardian", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "40 + 1n Guardian", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 136) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 137) Order("40 + 1n Guardian", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 139) trg.Main_Wait(160);
                DoActions(Order("40 + 1n Guardian", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(160)
                # (Line 141) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 142) }
                # (Line 143) else if (v.P_LoopMain[playerID] == 3)
            if EUDElseIf()(v.P_LoopMain[playerID] == 3):
                # (Line 144) {
                # (Line 145) var x = 32;
                x = EUDVariable()
                x << (32)
                # (Line 146) var y = 32;
                y = EUDVariable()
                y << (32)
                # (Line 148) trg.Shape_Square(playerID, 1, "40 + 1n Wraith", x, y);
                trg.Shape_Square(playerID, 1, "40 + 1n Wraith", x, y)
                # (Line 149) trg.Shape_Double(playerID, 1, "60 + 1n Archon", x, y);
                trg.Shape_Double(playerID, 1, "60 + 1n Archon", x, y)
                # (Line 150) trg.Shape_Double(playerID, 1, "Protoss Dark Archon", -x, y);
                trg.Shape_Double(playerID, 1, "Protoss Dark Archon", -x, y)
                # (Line 151) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                # (Line 152) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 154) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 155) Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 157) trg.Main_Wait(160);
                DoActions(Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(160)
                # (Line 159) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 160) }
                # (Line 161) else if (v.P_LoopMain[playerID] == 4)
            if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                # (Line 162) {
                # (Line 163) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
                # (Line 165) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 167) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 168) }
                # (Line 169) else if (v.P_LoopMain[playerID] == 5)
            if EUDElseIf()(v.P_LoopMain[playerID] == 5):
                # (Line 170) {
                # (Line 171) var x = 32;
                x = EUDVariable()
                x << (32)
                # (Line 172) var y = 32;
                y = EUDVariable()
                y << (32)
                # (Line 174) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", x, y);
                trg.Shape_Square(playerID, 1, "40 + 1n Mojo", x, y)
                # (Line 175) trg.Shape_Double(playerID, 1, "60 + 1n Archon", -x, y);
                trg.Shape_Double(playerID, 1, "60 + 1n Archon", -x, y)
                # (Line 176) trg.Shape_Double(playerID, 1, "Protoss Dark Archon", x, y);
                trg.Shape_Double(playerID, 1, "Protoss Dark Archon", x, y)
                # (Line 177) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                # (Line 178) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 180) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 181) Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 183) trg.Main_Wait(160);
                DoActions(Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(160)
                # (Line 185) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 186) }
                # (Line 187) else if (v.P_LoopMain[playerID] == 6)
            if EUDElseIf()(v.P_LoopMain[playerID] == 6):
                # (Line 188) {
                # (Line 189) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
                # (Line 191) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 193) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 194) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 195) }
                # (Line 196) }
            EUDEndIf()
            # (Line 197) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 198) {
            # (Line 199) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
            # (Line 202) trg.SkillEnd();
            DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
            trg.SkillEnd()
            # (Line 203) }
            # (Line 204) }
        EUDEndIf()
        # (Line 205) }
    EUDEndIf()
