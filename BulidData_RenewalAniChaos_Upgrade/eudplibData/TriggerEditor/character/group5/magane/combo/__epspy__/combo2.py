## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 5) function main(playerID)
# (Line 6) {
@EUDFunc
def f_main(playerID):
    # (Line 7) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 8) {
        # (Line 9) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 10) {
            # (Line 11) RemoveUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID);
            # (Line 13) trg.Table_Sin(playerID, 90 - 22 * v.P_LoopMain[playerID], 100);
            DoActions(RemoveUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID))
            trg.Table_Sin(playerID, 90 - 22 * v.P_LoopMain[playerID], 100)
            # (Line 14) trg.Table_Cos(playerID, 90 - 22 * v.P_LoopMain[playerID], 100);
            trg.Table_Cos(playerID, 90 - 22 * v.P_LoopMain[playerID], 100)
            # (Line 16) var x = v.P_AngleCos[playerID];
            x = EUDVariable()
            x << (v.P_AngleCos[playerID])
            # (Line 17) var y = v.P_AngleSin[playerID];
            y = EUDVariable()
            y << (v.P_AngleSin[playerID])
            # (Line 19) trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", x, y);
            trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", x, y)
            # (Line 20) trg.Shape_Square(playerID, 1, "Scantid (Desert)", x, y);
            trg.Shape_Square(playerID, 1, "Scantid (Desert)", x, y)
            # (Line 21) KillUnitAt(All, "Scantid (Desert)", "Anywhere", playerID);
            # (Line 23) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
            DoActions(KillUnitAt(All, "Scantid (Desert)", "Anywhere", playerID))
            # (Line 24) Order("40 + 1n Mutalisk", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
            # (Line 26) trg.Main_Wait(80);
            DoActions(Order("40 + 1n Mutalisk", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
            trg.Main_Wait(80)
            # (Line 28) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 30) if (v.P_LoopMain[playerID] == 4)
            if EUDIf()(v.P_LoopMain[playerID] == 4):
                # (Line 31) {
                # (Line 32) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 33) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 34) }
                # (Line 35) }
            EUDEndIf()
            # (Line 36) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 37) {
            # (Line 38) RemoveUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID);
            # (Line 40) if (v.P_LoopMain[playerID] < 4)
            DoActions(RemoveUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID))
            if EUDIf()(v.P_LoopMain[playerID] >= 4, neg=True):
                # (Line 41) {
                # (Line 42) var x = 300 - 75 * v.P_LoopMain[playerID];
                x = EUDVariable()
                x << (300 - 75 * v.P_LoopMain[playerID])
                # (Line 43) var y = 75 * v.P_LoopMain[playerID];
                y = EUDVariable()
                y << (75 * v.P_LoopMain[playerID])
                # (Line 45) trg.Shape_Square(playerID, 1, "60 + 1n Siege", x, y);
                trg.Shape_Square(playerID, 1, "60 + 1n Siege", x, y)
                # (Line 46) trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", x, y);
                trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", x, y)
                # (Line 47) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 49) trg.Table_Sin(playerID, 90 - 22 * v.P_LoopMain[playerID], 100);
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                trg.Table_Sin(playerID, 90 - 22 * v.P_LoopMain[playerID], 100)
                # (Line 50) trg.Table_Cos(playerID, 90 - 22 * v.P_LoopMain[playerID], 100);
                trg.Table_Cos(playerID, 90 - 22 * v.P_LoopMain[playerID], 100)
                # (Line 52) x = v.P_AngleCos[playerID];
                x << (v.P_AngleCos[playerID])
                # (Line 53) y = v.P_AngleSin[playerID];
                y << (v.P_AngleSin[playerID])
                # (Line 55) trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", x, y);
                trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", x, y)
                # (Line 56) trg.Shape_Square(playerID, 1, "Scantid (Desert)", x, y);
                trg.Shape_Square(playerID, 1, "Scantid (Desert)", x, y)
                # (Line 57) KillUnitAt(All, "Scantid (Desert)", "Anywhere", playerID);
                # (Line 59) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "Scantid (Desert)", "Anywhere", playerID))
                # (Line 60) Order("40 + 1n Mutalisk", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 61) }
                DoActions(Order("40 + 1n Mutalisk", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 63) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 65) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 67) if (v.P_LoopMain[playerID] == 5)
            if EUDIf()(v.P_LoopMain[playerID] == 5):
                # (Line 68) {
                # (Line 69) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 70) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 71) }
                # (Line 72) }
            EUDEndIf()
            # (Line 73) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 74) {
            # (Line 75) if (v.P_LoopMain[playerID] < 4)
            if EUDIf()(v.P_LoopMain[playerID] >= 4, neg=True):
                # (Line 76) {
                # (Line 77) trg.Table_Sin(playerID, 22 * v.P_LoopMain[playerID], 200);
                trg.Table_Sin(playerID, 22 * v.P_LoopMain[playerID], 200)
                # (Line 78) trg.Table_Cos(playerID, 22 * v.P_LoopMain[playerID], 200);
                trg.Table_Cos(playerID, 22 * v.P_LoopMain[playerID], 200)
                # (Line 80) var x = v.P_AngleCos[playerID];
                x = EUDVariable()
                x << (v.P_AngleCos[playerID])
                # (Line 81) var y = v.P_AngleSin[playerID];
                y = EUDVariable()
                y << (v.P_AngleSin[playerID])
                # (Line 83) trg.Shape_Square(playerID, 1, "Scantid (Desert)", x, y);
                trg.Shape_Square(playerID, 1, "Scantid (Desert)", x, y)
                # (Line 84) KillUnitAt(All, "Scantid (Desert)", "Anywhere", playerID);
                # (Line 85) }
                DoActions(KillUnitAt(All, "Scantid (Desert)", "Anywhere", playerID))
                # (Line 87) if (v.P_LoopMain[playerID] == 0)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 88) {
                # (Line 89) trg.Shape_Edge(playerID, 1, "Target", 0, 3, 75);
                trg.Shape_Edge(playerID, 1, "Target", 0, 3, 75)
                # (Line 90) trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 0, 3, 75);
                trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 0, 3, 75)
                # (Line 91) KillUnitAt(All, "Target", "Anywhere", playerID);
                # (Line 92) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "Target", "Anywhere", playerID))
                # (Line 94) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 95) MoveUnit(All, "40 + 1n Drone", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 96) Order("40 + 1n Drone", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "40 + 1n Drone", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 97) }
                DoActions(Order("40 + 1n Drone", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 98) else if (v.P_LoopMain[playerID] == 2)
            if EUDElseIf()(v.P_LoopMain[playerID] == 2):
                # (Line 99) {
                # (Line 100) trg.Shape_Edge(playerID, 1, "Target", 45, 3, 100);
                trg.Shape_Edge(playerID, 1, "Target", 45, 3, 100)
                # (Line 101) trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 45, 3, 100);
                trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 45, 3, 100)
                # (Line 102) trg.Shape_Edge(playerID, 1, "40 + 1n Drone", 45, 2, 100);
                trg.Shape_Edge(playerID, 1, "40 + 1n Drone", 45, 2, 100)
                # (Line 103) KillUnitAt(All, "Target", "Anywhere", playerID);
                # (Line 104) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "Target", "Anywhere", playerID))
                # (Line 106) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 107) MoveUnit(All, "40 + 1n Drone", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 108) Order("40 + 1n Drone", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "40 + 1n Drone", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 109) }
                DoActions(Order("40 + 1n Drone", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 110) else if (v.P_LoopMain[playerID] == 4)
            if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                # (Line 111) {
                # (Line 112) trg.Shape_Edge(playerID, 1, "40 + 1n Drone", 45, 2, 150);
                trg.Shape_Edge(playerID, 1, "40 + 1n Drone", 45, 2, 150)
                # (Line 113) trg.Shape_Edge(playerID, 1, "50 + 1n Battlecruiser", 45, 2, 150);
                trg.Shape_Edge(playerID, 1, "50 + 1n Battlecruiser", 45, 2, 150)
                # (Line 114) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 116) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                # (Line 117) MoveUnit(All, "40 + 1n Drone", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 118) Order("40 + 1n Drone", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "40 + 1n Drone", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 119) }
                DoActions(Order("40 + 1n Drone", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 121) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 123) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 125) if (v.P_LoopMain[playerID] == 5)
            if EUDIf()(v.P_LoopMain[playerID] == 5):
                # (Line 126) {
                # (Line 127) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 128) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 129) }
                # (Line 130) }
            EUDEndIf()
            # (Line 131) else if (v.P_CountMain[playerID] == 3)
        if EUDElseIf()(v.P_CountMain[playerID] == 3):
            # (Line 132) {
            # (Line 133) if (v.P_LoopMain[playerID] < 4)
            if EUDIf()(v.P_LoopMain[playerID] >= 4, neg=True):
                # (Line 134) {
                # (Line 135) trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", 75 * v.P_LoopMain[playerID], 225 - 75 * v.P_LoopMain[playerID]);
                trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", 75 * v.P_LoopMain[playerID], 225 - 75 * v.P_LoopMain[playerID])
                # (Line 136) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID);
                # (Line 138) if ((v.P_LoopMain[playerID] % 2) == 0)
                DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID))
                if EUDIf()((v.P_LoopMain[playerID] % 2) == 0):
                    # (Line 139) {
                    # (Line 140) trg.Shape_Double(playerID, 1, "Protoss Dark Archon", 100 - 100 * (v.P_LoopMain[playerID] % 2), 100 * (v.P_LoopMain[playerID] % 2));
                    trg.Shape_Double(playerID, 1, "Protoss Dark Archon", 100 - 100 * (v.P_LoopMain[playerID] % 2), 100 * (v.P_LoopMain[playerID] % 2))
                    # (Line 141) trg.Shape_Double(playerID, 1, "40 + 1n Mutalisk", 100 - 100 * (v.P_LoopMain[playerID] % 2), 100 * (v.P_LoopMain[playerID] % 2));
                    trg.Shape_Double(playerID, 1, "40 + 1n Mutalisk", 100 - 100 * (v.P_LoopMain[playerID] % 2), 100 * (v.P_LoopMain[playerID] % 2))
                    # (Line 142) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                    # (Line 144) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                    DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                    # (Line 145) Order("40 + 1n Mutalisk", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                    # (Line 146) }
                    DoActions(Order("40 + 1n Mutalisk", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                    # (Line 147) else if ((v.P_LoopMain[playerID] % 2) == 1)
                if EUDElseIf()((v.P_LoopMain[playerID] % 2) == 1):
                    # (Line 148) {
                    # (Line 149) trg.Shape_Double(playerID, 1, "Protoss Dark Archon", 0 - 100 * (v.P_LoopMain[playerID] % 2), 100 * (v.P_LoopMain[playerID] % 2));
                    trg.Shape_Double(playerID, 1, "Protoss Dark Archon", 0 - 100 * (v.P_LoopMain[playerID] % 2), 100 * (v.P_LoopMain[playerID] % 2))
                    # (Line 150) trg.Shape_Double(playerID, 1, "40 + 1n Mutalisk", 0 - 100 * (v.P_LoopMain[playerID] % 2), 100 * (v.P_LoopMain[playerID] % 2));
                    trg.Shape_Double(playerID, 1, "40 + 1n Mutalisk", 0 - 100 * (v.P_LoopMain[playerID] % 2), 100 * (v.P_LoopMain[playerID] % 2))
                    # (Line 151) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                    # (Line 153) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                    DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                    # (Line 154) Order("40 + 1n Mutalisk", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                    # (Line 155) }
                    DoActions(Order("40 + 1n Mutalisk", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                    # (Line 156) }
                EUDEndIf()
                # (Line 158) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 160) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 162) if (v.P_LoopMain[playerID] == 5)
            if EUDIf()(v.P_LoopMain[playerID] == 5):
                # (Line 163) {
                # (Line 164) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 165) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 166) }
                # (Line 167) }
            EUDEndIf()
            # (Line 168) else if (v.P_CountMain[playerID] == 4)
        if EUDElseIf()(v.P_CountMain[playerID] == 4):
            # (Line 169) {
            # (Line 170) var x = 0;
            x = EUDVariable()
            x << (0)
            # (Line 171) var y = 0;
            y = EUDVariable()
            y << (0)
            # (Line 173) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 174) {
                # (Line 175) x = 150;
                x << (150)
                # (Line 176) y = 0;
                y << (0)
                # (Line 178) trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", -y, x);
                trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", -y, x)
                # (Line 179) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 181) trg.Shape_Square(playerID, 1, "40 + 1n Guardian", x, y);
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                trg.Shape_Square(playerID, 1, "40 + 1n Guardian", x, y)
                # (Line 182) trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y);
                trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y)
                # (Line 183) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                # (Line 185) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 186) Order("40 + 1n Guardian", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 187) }
                DoActions(Order("40 + 1n Guardian", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 188) else if (v.P_LoopMain[playerID] == 2)
            if EUDElseIf()(v.P_LoopMain[playerID] == 2):
                # (Line 189) {
                # (Line 190) x = 150;
                x << (150)
                # (Line 191) y = 150;
                y << (150)
                # (Line 193) trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", -y, x);
                trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", -y, x)
                # (Line 194) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 196) trg.Shape_Square(playerID, 1, "40 + 1n Guardian", x, y);
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                trg.Shape_Square(playerID, 1, "40 + 1n Guardian", x, y)
                # (Line 197) trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y);
                trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y)
                # (Line 198) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                # (Line 200) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 201) Order("40 + 1n Guardian", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 202) }
                DoActions(Order("40 + 1n Guardian", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 204) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 206) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 208) if (v.P_LoopMain[playerID] == 24)
            if EUDIf()(v.P_LoopMain[playerID] == 24):
                # (Line 209) {
                # (Line 210) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 211) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 212) }
                # (Line 213) }
            EUDEndIf()
            # (Line 214) else if (v.P_CountMain[playerID] == 5)
        if EUDElseIf()(v.P_CountMain[playerID] == 5):
            # (Line 215) {
            # (Line 216) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
            # (Line 217) KillUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
            # (Line 218) KillUnitAt(All, "40 + 1n Drone", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID))
            # (Line 219) KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Drone", "Anywhere", playerID))
            # (Line 220) KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID))
            # (Line 222) trg.SkillEnd();
            DoActions(KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID))
            trg.SkillEnd()
            # (Line 223) }
            # (Line 224) }
        EUDEndIf()
        # (Line 225) }
    EUDEndIf()
