## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import variable as v;
import variable as v
# (Line 2) import func.trig as trg;
from func import trig as trg
# (Line 3) import func.sound as s;
from func import sound as s
# (Line 5) function main(playerID)
# (Line 6) {
@EUDFunc
def f_main(playerID):
    # (Line 7) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 8) {
        # (Line 9) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 10) {
            # (Line 11) if (v.P_LoopMain[playerID] < 6)
            if EUDIf()(v.P_LoopMain[playerID] >= 6, neg=True):
                # (Line 12) {
                # (Line 13) trg.Main_Wait(80);
                trg.Main_Wait(80)
                # (Line 15) if (Bring(playerID, AtLeast, 2, "Protoss Arbiter", "[Skill]UseSkill")
                _t4 = EUDIf()
                # (Line 16) && v.P_UltimateGauge[playerID] >= v.P_Ultimate1[playerID])
                if _t4(EUDSCAnd()(Bring(playerID, AtLeast, 2, "Protoss Arbiter", "[Skill]UseSkill"))(v.P_UltimateGauge[playerID] >= v.P_Ultimate1[playerID])()):
                    # (Line 17) {
                    # (Line 18) s.CharacterVoice(5);
                    s.CharacterVoice(5)
                    # (Line 19) v.P_SkillDelay[playerID] = 0;
                    _ARRW(v.P_SkillDelay, playerID) << (0)
                    # (Line 20) v.P_CountMain[playerID] = 0;
                    _ARRW(v.P_CountMain, playerID) << (0)
                    # (Line 21) v.P_LoopMain[playerID] = 0;
                    _ARRW(v.P_LoopMain, playerID) << (0)
                    # (Line 22) v.P_Step[playerID] = 310;
                    _ARRW(v.P_Step, playerID) << (310)
                    # (Line 23) SetDeaths(playerID, Subtract, v.P_Ultimate1[playerID], " `UltimateCoolTime");
                    # (Line 24) KillUnitAt(2, "Protoss Arbiter", "[Skill]UseSkill", playerID);
                    DoActions(SetDeaths(playerID, Subtract, v.P_Ultimate1[playerID], " `UltimateCoolTime"))
                    # (Line 25) }
                    DoActions(KillUnitAt(2, "Protoss Arbiter", "[Skill]UseSkill", playerID))
                    # (Line 26) else {
                if EUDElse()():
                    # (Line 27) v.P_LoopMain[playerID] += 1;
                    _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                    # (Line 28) }
                    # (Line 30) }
                EUDEndIf()
                # (Line 31) else if (v.P_LoopMain[playerID] == 6)
            if EUDElseIf()(v.P_LoopMain[playerID] == 6):
                # (Line 32) {
                # (Line 33) trg.Main_Wait(80);
                trg.Main_Wait(80)
                # (Line 35) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 36) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 37) }
                # (Line 39) }
            EUDEndIf()
            # (Line 42) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 43) {
            # (Line 44) if (v.P_LoopMain[playerID] < 4)
            if EUDIf()(v.P_LoopMain[playerID] >= 4, neg=True):
                # (Line 45) {
                # (Line 46) RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
                # (Line 48) trg.Shape_Square(playerID, 1, "40 + 1n Wraith", 50 + 25 * v.P_LoopMain[playerID], 0);
                DoActions(RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                trg.Shape_Square(playerID, 1, "40 + 1n Wraith", 50 + 25 * v.P_LoopMain[playerID], 0)
                # (Line 49) trg.Shape_Square(playerID, 1, "40 + 1n Zealot", 50 + 25 * v.P_LoopMain[playerID], 0);
                trg.Shape_Square(playerID, 1, "40 + 1n Zealot", 50 + 25 * v.P_LoopMain[playerID], 0)
                # (Line 51) KillUnitAt(All, "40 + 1n Zealot", "Anywhere", playerID);
                # (Line 53) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "40 + 1n Zealot", "Anywhere", playerID))
                # (Line 54) Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 56) trg.Main_Wait(80);
                DoActions(Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(80)
                # (Line 58) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 59) }
                # (Line 60) else if (v.P_LoopMain[playerID] < 12)
            if EUDElseIf()(v.P_LoopMain[playerID] >= 12, neg=True):
                # (Line 61) {
                # (Line 62) trg.Table_Sin(playerID, 22 + 22 * (v.P_LoopMain[playerID] % 4), 200 - 25 * (v.P_LoopMain[playerID] - 4));
                trg.Table_Sin(playerID, 22 + 22 * (v.P_LoopMain[playerID] % 4), 200 - 25 * (v.P_LoopMain[playerID] - 4))
                # (Line 63) trg.Table_Cos(playerID, 22 + 22 * (v.P_LoopMain[playerID] % 4), 200 - 25 * (v.P_LoopMain[playerID] - 4));
                trg.Table_Cos(playerID, 22 + 22 * (v.P_LoopMain[playerID] % 4), 200 - 25 * (v.P_LoopMain[playerID] - 4))
                # (Line 65) trg.Shape_Square(playerID, 1, "40 + 1n Wraith", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "40 + 1n Wraith", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 66) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 67) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
                # (Line 68) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
                DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
                # (Line 70) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 72) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 73) }
                # (Line 74) else if (v.P_LoopMain[playerID] == 12)
            if EUDElseIf()(v.P_LoopMain[playerID] == 12):
                # (Line 75) {
                # (Line 76) trg.Main_Wait(80);
                trg.Main_Wait(80)
                # (Line 78) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 79) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 80) }
                # (Line 82) }
            EUDEndIf()
            # (Line 83) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 84) {
            # (Line 85) if (v.P_LoopMain[playerID] < 4)
            if EUDIf()(v.P_LoopMain[playerID] >= 4, neg=True):
                # (Line 86) {
                # (Line 87) RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
                # (Line 89) trg.Table_Sin(playerID, 22 + 45 * (v.P_LoopMain[playerID] % 4), 75);
                DoActions(RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                trg.Table_Sin(playerID, 22 + 45 * (v.P_LoopMain[playerID] % 4), 75)
                # (Line 90) trg.Table_Cos(playerID, 22 + 45 * (v.P_LoopMain[playerID] % 4), 75);
                trg.Table_Cos(playerID, 22 + 45 * (v.P_LoopMain[playerID] % 4), 75)
                # (Line 92) trg.Shape_Square(playerID, 1, "40 + 1n Wraith", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "40 + 1n Wraith", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 93) trg.Shape_Square(playerID, 4, "40 + 1n Zealot", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 4, "40 + 1n Zealot", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 94) KillUnitAt(All, "40 + 1n Zealot", "Anywhere", playerID);
                # (Line 96) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "40 + 1n Zealot", "Anywhere", playerID))
                # (Line 97) Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 99) trg.Main_Wait(160);
                DoActions(Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(160)
                # (Line 101) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 102) }
                # (Line 103) else if (v.P_LoopMain[playerID] == 4)
            if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                # (Line 104) {
                # (Line 105) RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
                # (Line 107) trg.Main_Wait(80);
                DoActions(RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 109) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 110) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 112) }
                # (Line 113) }
            EUDEndIf()
            # (Line 114) else if (v.P_CountMain[playerID] == 3)
        if EUDElseIf()(v.P_CountMain[playerID] == 3):
            # (Line 115) {
            # (Line 116) trg.SkillEnd();
            trg.SkillEnd()
            # (Line 117) }
            # (Line 118) }
        EUDEndIf()
        # (Line 119) }
    EUDEndIf()
