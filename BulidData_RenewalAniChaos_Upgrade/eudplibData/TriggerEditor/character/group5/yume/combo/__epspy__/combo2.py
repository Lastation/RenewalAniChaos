## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 5) function main(playerID)
# (Line 6) {
@EUDFunc
def f_main(playerID):
    # (Line 7) trg.Buff_ShieldFix(1);
    trg.Buff_ShieldFix(1)
    # (Line 9) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 10) {
        # (Line 11) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 12) {
            # (Line 13) if (v.P_LoopMain[playerID] < 8)
            if EUDIf()(v.P_LoopMain[playerID] >= 8, neg=True):
                # (Line 14) {
                # (Line 15) if (v.P_LoopMain[playerID] == 0)
                if EUDIf()(v.P_LoopMain[playerID] == 0):
                    # (Line 16) {
                    # (Line 17) trg.Table_Sin(playerID, 22, 50);
                    trg.Table_Sin(playerID, 22, 50)
                    # (Line 18) trg.Table_Cos(playerID, 22, 50);
                    trg.Table_Cos(playerID, 22, 50)
                    # (Line 20) trg.Shape_Square(playerID, 1, "40 + 1n Wraith", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                    trg.Shape_Square(playerID, 1, "40 + 1n Wraith", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                    # (Line 21) trg.Shape_Square(playerID, 1, "40 + 1n Zealot", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                    trg.Shape_Square(playerID, 1, "40 + 1n Zealot", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                    # (Line 23) trg.Table_Sin(playerID, 67, 100);
                    trg.Table_Sin(playerID, 67, 100)
                    # (Line 24) trg.Table_Cos(playerID, 67, 100);
                    trg.Table_Cos(playerID, 67, 100)
                    # (Line 26) trg.Shape_Square(playerID, 1, "40 + 1n Wraith", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                    trg.Shape_Square(playerID, 1, "40 + 1n Wraith", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                    # (Line 27) trg.Shape_Square(playerID, 1, "40 + 1n Zealot", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                    trg.Shape_Square(playerID, 1, "40 + 1n Zealot", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                    # (Line 29) }
                    # (Line 30) else if (v.P_LoopMain[playerID] == 2)
                if EUDElseIf()(v.P_LoopMain[playerID] == 2):
                    # (Line 31) {
                    # (Line 32) RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
                    # (Line 34) trg.Table_Sin(playerID, 22, 100);
                    DoActions(RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                    trg.Table_Sin(playerID, 22, 100)
                    # (Line 35) trg.Table_Cos(playerID, 22, 100);
                    trg.Table_Cos(playerID, 22, 100)
                    # (Line 37) trg.Shape_Square(playerID, 1, "40 + 1n Wraith", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                    trg.Shape_Square(playerID, 1, "40 + 1n Wraith", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                    # (Line 38) trg.Shape_Square(playerID, 1, "40 + 1n Zealot", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                    trg.Shape_Square(playerID, 1, "40 + 1n Zealot", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                    # (Line 40) trg.Table_Sin(playerID, 67, 150);
                    trg.Table_Sin(playerID, 67, 150)
                    # (Line 41) trg.Table_Cos(playerID, 67, 150);
                    trg.Table_Cos(playerID, 67, 150)
                    # (Line 43) trg.Shape_Square(playerID, 1, "40 + 1n Wraith", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                    trg.Shape_Square(playerID, 1, "40 + 1n Wraith", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                    # (Line 44) trg.Shape_Square(playerID, 1, "40 + 1n Zealot", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                    trg.Shape_Square(playerID, 1, "40 + 1n Zealot", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                    # (Line 45) }
                    # (Line 46) else if (v.P_LoopMain[playerID] == 4)
                if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                    # (Line 47) {
                    # (Line 48) RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
                    # (Line 50) trg.Table_Sin(playerID, 22, 50);
                    DoActions(RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                    trg.Table_Sin(playerID, 22, 50)
                    # (Line 51) trg.Table_Cos(playerID, 22, 50);
                    trg.Table_Cos(playerID, 22, 50)
                    # (Line 53) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                    trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                    # (Line 54) trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                    trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                    # (Line 56) trg.Table_Sin(playerID, 67, 100);
                    trg.Table_Sin(playerID, 67, 100)
                    # (Line 57) trg.Table_Cos(playerID, 67, 100);
                    trg.Table_Cos(playerID, 67, 100)
                    # (Line 59) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                    trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                    # (Line 60) trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                    trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                    # (Line 62) trg.Table_Sin(playerID, 22, 100);
                    trg.Table_Sin(playerID, 22, 100)
                    # (Line 63) trg.Table_Cos(playerID, 22, 100);
                    trg.Table_Cos(playerID, 22, 100)
                    # (Line 65) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                    trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                    # (Line 66) trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                    trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                    # (Line 68) trg.Table_Sin(playerID, 67, 150);
                    trg.Table_Sin(playerID, 67, 150)
                    # (Line 69) trg.Table_Cos(playerID, 67, 150);
                    trg.Table_Cos(playerID, 67, 150)
                    # (Line 71) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                    trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                    # (Line 72) trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                    trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                    # (Line 74) trg.Table_Sin(playerID, 22, 150);
                    trg.Table_Sin(playerID, 22, 150)
                    # (Line 75) trg.Table_Cos(playerID, 22, 150);
                    trg.Table_Cos(playerID, 22, 150)
                    # (Line 77) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                    trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                    # (Line 78) trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                    trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                    # (Line 80) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
                    # (Line 81) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                    DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
                    # (Line 82) }
                    DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                    # (Line 84) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                EUDEndIf()
                # (Line 85) Order("40 + 1n Wraith", playerID, "Anywhere", Attack, "Anywhere");
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 87) trg.Shape_Square(playerID, 1, "40 + 1n Guardian", 160 - 40 * v.P_LoopMain[playerID], 160);
                DoActions(Order("40 + 1n Wraith", playerID, "Anywhere", Attack, "Anywhere"))
                trg.Shape_Square(playerID, 1, "40 + 1n Guardian", 160 - 40 * v.P_LoopMain[playerID], 160)
                # (Line 88) trg.Shape_Square(playerID, 1, "60 + 1n Archon", 160 - 40 * v.P_LoopMain[playerID], 160);
                trg.Shape_Square(playerID, 1, "60 + 1n Archon", 160 - 40 * v.P_LoopMain[playerID], 160)
                # (Line 90) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                # (Line 91) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                # (Line 92) KillUnitAt(All, "40 + 1n Zealot", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 95) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "40 + 1n Zealot", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 97) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 98) }
                # (Line 99) else if (v.P_LoopMain[playerID] == 8)
            if EUDElseIf()(v.P_LoopMain[playerID] == 8):
                # (Line 100) {
                # (Line 101) trg.Shape_Edge(playerID, 1, "40 + 1n Ghost", 0, 3, 160);
                trg.Shape_Edge(playerID, 1, "40 + 1n Ghost", 0, 3, 160)
                # (Line 103) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 104) MoveUnit(All, "40 + 1n Ghost", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 105) Order("40 + 1n Ghost", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "40 + 1n Ghost", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 107) trg.Shape_Edge(playerID, 1, "40 + 1n Guardian", 45, 7, 160);
                DoActions(Order("40 + 1n Ghost", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Shape_Edge(playerID, 1, "40 + 1n Guardian", 45, 7, 160)
                # (Line 108) trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 45, 7, 160);
                trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 45, 7, 160)
                # (Line 109) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                # (Line 110) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                # (Line 112) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 114) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 115) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 116) }
                # (Line 117) }
            EUDEndIf()
            # (Line 118) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 119) {
            # (Line 120) if (v.P_LoopMain[playerID] < 3)
            if EUDIf()(v.P_LoopMain[playerID] >= 3, neg=True):
                # (Line 121) {
                # (Line 122) RemoveUnitAt(All, " Creep. Dunkelheit", "Anywhere", playerID);
                # (Line 124) trg.Shape_Dot(playerID, 8, "Bengalaas (Jungle)", 0, 0);
                DoActions(RemoveUnitAt(All, " Creep. Dunkelheit", "Anywhere", playerID))
                trg.Shape_Dot(playerID, 8, "Bengalaas (Jungle)", 0, 0)
                # (Line 125) trg.Shape_Dot(playerID, 1, "40 + 1n Guardian", 0, 0);
                trg.Shape_Dot(playerID, 1, "40 + 1n Guardian", 0, 0)
                # (Line 127) KillUnitAt(All, "Bengalaas (Jungle)", "Anywhere", playerID);
                # (Line 128) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "Bengalaas (Jungle)", "Anywhere", playerID))
                # (Line 130) trg.Shape_Edge(playerID, 1, "40 + 1n Guardian", 45, 7, 160);
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                trg.Shape_Edge(playerID, 1, "40 + 1n Guardian", 45, 7, 160)
                # (Line 131) trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 45, 7, 160);
                trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 45, 7, 160)
                # (Line 133) trg.Shape_Square(playerID, 1, " Creep. Dunkelheit", 80, 80);
                trg.Shape_Square(playerID, 1, " Creep. Dunkelheit", 80, 80)
                # (Line 134) trg.Shape_Square(playerID, 7, "60 + 1n High Templar", 80, 80);
                trg.Shape_Square(playerID, 7, "60 + 1n High Templar", 80, 80)
                # (Line 136) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 137) MoveUnit(All, " Creep. Dunkelheit", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 138) Order(" Creep. Dunkelheit", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, " Creep. Dunkelheit", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 140) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                DoActions(Order(" Creep. Dunkelheit", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 141) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                # (Line 142) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 144) trg.Main_Wait(160);
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
                trg.Main_Wait(160)
                # (Line 146) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 147) }
                # (Line 148) else if (v.P_LoopMain[playerID] == 3)
            if EUDElseIf()(v.P_LoopMain[playerID] == 3):
                # (Line 149) {
                # (Line 150) RemoveUnitAt(All, " Creep. Dunkelheit", "Anywhere", playerID);
                # (Line 151) KillUnitAt(All, "40 + 1n Ghost", "Anywhere", playerID);
                DoActions(RemoveUnitAt(All, " Creep. Dunkelheit", "Anywhere", playerID))
                # (Line 153) trg.Shape_Edge(playerID, 1, "40 + 1n Wraith", 45, 7, 160);
                DoActions(KillUnitAt(All, "40 + 1n Ghost", "Anywhere", playerID))
                trg.Shape_Edge(playerID, 1, "40 + 1n Wraith", 45, 7, 160)
                # (Line 154) trg.Shape_Edge(playerID, 1, " Creep. Dunkelheit", 45, 7, 160);
                trg.Shape_Edge(playerID, 1, " Creep. Dunkelheit", 45, 7, 160)
                # (Line 155) KillUnitAt(All, " Creep. Dunkelheit", "Anywhere", playerID);
                # (Line 157) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, " Creep. Dunkelheit", "Anywhere", playerID))
                # (Line 158) Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 160) trg.Main_Wait(160);
                DoActions(Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(160)
                # (Line 162) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 163) }
                # (Line 165) else if (v.P_LoopMain[playerID] == 4)
            if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                # (Line 166) {
                # (Line 167) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
                # (Line 168) KillUnitAt(All, " Creep. Dunkelheit", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                # (Line 170) trg.Shape_Edge(playerID, 1, "Kakaru (Twilight)", 45, 7, 160);
                DoActions(KillUnitAt(All, " Creep. Dunkelheit", "Anywhere", playerID))
                trg.Shape_Edge(playerID, 1, "Kakaru (Twilight)", 45, 7, 160)
                # (Line 171) trg.Shape_Edge(playerID, 1, " Unit. Hoffnung 25000", 45, 7, 160);
                trg.Shape_Edge(playerID, 1, " Unit. Hoffnung 25000", 45, 7, 160)
                # (Line 172) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
                # (Line 173) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
                # (Line 175) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 177) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 178) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 179) }
                # (Line 180) }
            EUDEndIf()
            # (Line 181) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 182) {
            # (Line 183) trg.SkillEnd();
            trg.SkillEnd()
            # (Line 184) }
            # (Line 185) }
        EUDEndIf()
        # (Line 186) }
    EUDEndIf()
