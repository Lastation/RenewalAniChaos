## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _RELIMP(path, mod_name):
    import inspect, pathlib, importlib.util
    p = pathlib.Path(inspect.getabsfile(inspect.currentframe())).parent
    for s in path.split("."):
        if s == "":  p = p.parent
        else:  p = p / s
    try:
        spec = importlib.util.spec_from_file_location(mod_name, p / (mod_name + ".py"))
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
    except FileNotFoundError:
        loader = EPSLoader(mod_name, str(p / (mod_name + ".eps")))
        spec = importlib.util.spec_from_loader(mod_name, loader)
        module = loader.create_module(spec)
        loader.exec_module(module)
    return module

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 5) function main(playerID)
# (Line 6) {
@EUDFunc
def f_main(playerID):
    # (Line 7) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 8) {
        # (Line 9) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 10) {
            # (Line 11) if (v.P_LoopMain[playerID] < 4)
            if EUDIf()(v.P_LoopMain[playerID] >= 4, neg=True):
                # (Line 12) {
                # (Line 13) trg.Table_Sin(playerID, 22 + 45 * v.P_LoopMain[playerID], 50 + 50 * v.P_LoopMain[playerID]);
                trg.Table_Sin(playerID, 22 + 45 * v.P_LoopMain[playerID], 50 + 50 * v.P_LoopMain[playerID])
                # (Line 14) trg.Table_Cos(playerID, 22 + 45 * v.P_LoopMain[playerID], 50 + 50 * v.P_LoopMain[playerID]);
                trg.Table_Cos(playerID, 22 + 45 * v.P_LoopMain[playerID], 50 + 50 * v.P_LoopMain[playerID])
                # (Line 16) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 18) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
                # (Line 20) trg.Main_Wait(160);
                DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
                trg.Main_Wait(160)
                # (Line 22) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 23) }
                # (Line 24) else if (v.P_LoopMain[playerID] == 4)
            if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                # (Line 25) {
                # (Line 26) trg.Main_Wait(80);
                trg.Main_Wait(80)
                # (Line 28) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 29) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 30) }
                # (Line 31) }
            EUDEndIf()
            # (Line 32) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 33) {
            # (Line 34) if (v.P_LoopMain[playerID] < 4)
            if EUDIf()(v.P_LoopMain[playerID] >= 4, neg=True):
                # (Line 35) {
                # (Line 36) trg.Table_Sin(playerID, 22 + 45 * v.P_LoopMain[playerID], 50 + 50 * v.P_LoopMain[playerID]);
                trg.Table_Sin(playerID, 22 + 45 * v.P_LoopMain[playerID], 50 + 50 * v.P_LoopMain[playerID])
                # (Line 37) trg.Table_Cos(playerID, 22 + 45 * v.P_LoopMain[playerID], 50 + 50 * v.P_LoopMain[playerID]);
                trg.Table_Cos(playerID, 22 + 45 * v.P_LoopMain[playerID], 50 + 50 * v.P_LoopMain[playerID])
                # (Line 39) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 41) if (v.P_LoopMain[playerID] % 2 == 1)
                if EUDIf()(v.P_LoopMain[playerID] % 2 == 1):
                    # (Line 42) {
                    # (Line 43) trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                    trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                    # (Line 45) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                    # (Line 46) Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                    # (Line 47) }
                    DoActions(Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                    # (Line 48) else if (v.P_LoopMain[playerID] % 2 == 0)
                if EUDElseIf()(v.P_LoopMain[playerID] % 2 == 0):
                    # (Line 49) {
                    # (Line 50) trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                    trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                    # (Line 51) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                    # (Line 52) }
                    DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                    # (Line 54) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
                EUDEndIf()
                # (Line 56) trg.Main_Wait(160);
                DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
                trg.Main_Wait(160)
                # (Line 58) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 59) }
                # (Line 60) else if (v.P_LoopMain[playerID] == 4)
            if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                # (Line 61) {
                # (Line 62) trg.Main_Wait(560);
                trg.Main_Wait(560)
                # (Line 64) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 65) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 66) }
                # (Line 67) }
            EUDEndIf()
            # (Line 68) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 69) {
            # (Line 70) if (v.P_LoopMain[playerID] < 4)
            if EUDIf()(v.P_LoopMain[playerID] >= 4, neg=True):
                # (Line 71) {
                # (Line 72) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 74) trg.Table_Sin(playerID, 22 + 22 * (v.P_LoopMain[playerID] % 4), 150);
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                trg.Table_Sin(playerID, 22 + 22 * (v.P_LoopMain[playerID] % 4), 150)
                # (Line 75) trg.Table_Cos(playerID, 22 + 22 * (v.P_LoopMain[playerID] % 4), 150);
                trg.Table_Cos(playerID, 22 + 22 * (v.P_LoopMain[playerID] % 4), 150)
                # (Line 77) trg.Shape_Square(playerID, 1, "80 + 1n Tank", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "80 + 1n Tank", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 78) KillUnitAt(All, "80 + 1n Tank", "Anywhere", playerID);
                # (Line 80) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "80 + 1n Tank", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 82) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 83) }
                # (Line 84) else if (v.P_LoopMain[playerID] < 8)
            if EUDElseIf()(v.P_LoopMain[playerID] >= 8, neg=True):
                # (Line 85) {
                # (Line 87) trg.Table_Sin(playerID, 22 + 22 * (v.P_LoopMain[playerID] % 4), 150);
                trg.Table_Sin(playerID, 22 + 22 * (v.P_LoopMain[playerID] % 4), 150)
                # (Line 88) trg.Table_Cos(playerID, 22 + 22 * (v.P_LoopMain[playerID] % 4), 150);
                trg.Table_Cos(playerID, 22 + 22 * (v.P_LoopMain[playerID] % 4), 150)
                # (Line 90) trg.Shape_Square(playerID, 1, "40 + 1n Wraith", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "40 + 1n Wraith", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 91) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 92) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
                # (Line 93) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
                DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
                # (Line 95) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 97) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 98) }
                # (Line 99) else if (v.P_LoopMain[playerID] == 8)
            if EUDElseIf()(v.P_LoopMain[playerID] == 8):
                # (Line 100) {
                # (Line 101) trg.Main_Wait(240);
                trg.Main_Wait(240)
                # (Line 103) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 104) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 105) }
                # (Line 106) }
            EUDEndIf()
            # (Line 107) else if (v.P_CountMain[playerID] == 3)
        if EUDElseIf()(v.P_CountMain[playerID] == 3):
            # (Line 108) {
            # (Line 109) if (v.P_LoopMain[playerID] < 6)
            if EUDIf()(v.P_LoopMain[playerID] >= 6, neg=True):
                # (Line 110) {
                # (Line 111) RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
                # (Line 113) trg.Table_Sin(playerID, 22 + 45 * (v.P_LoopMain[playerID] % 2), 75);
                DoActions(RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                trg.Table_Sin(playerID, 22 + 45 * (v.P_LoopMain[playerID] % 2), 75)
                # (Line 114) trg.Table_Cos(playerID, 22 + 45 * (v.P_LoopMain[playerID] % 2), 75);
                trg.Table_Cos(playerID, 22 + 45 * (v.P_LoopMain[playerID] % 2), 75)
                # (Line 116) trg.Shape_Square(playerID, 1, "40 + 1n Wraith", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "40 + 1n Wraith", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 117) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 118) Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 120) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                DoActions(Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 121) trg.Shape_Square(playerID, 4, "40 + 1n Zealot", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 4, "40 + 1n Zealot", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 123) trg.Table_Sin(playerID, 67 + 45 * (v.P_LoopMain[playerID] % 2), 75);
                trg.Table_Sin(playerID, 67 + 45 * (v.P_LoopMain[playerID] % 2), 75)
                # (Line 124) trg.Table_Cos(playerID, 67 + 45 * (v.P_LoopMain[playerID] % 2), 75);
                trg.Table_Cos(playerID, 67 + 45 * (v.P_LoopMain[playerID] % 2), 75)
                # (Line 126) trg.Shape_Square(playerID, 1, "Protoss Dark Archon", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "Protoss Dark Archon", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 128) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
                # (Line 129) KillUnitAt(All, "40 + 1n Zealot", "Anywhere", playerID);
                DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
                # (Line 130) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Zealot", "Anywhere", playerID))
                # (Line 132) trg.Main_Wait(160);
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                trg.Main_Wait(160)
                # (Line 134) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 135) }
                # (Line 136) else if (v.P_LoopMain[playerID] < 10)
            if EUDElseIf()(v.P_LoopMain[playerID] >= 10, neg=True):
                # (Line 137) {
                # (Line 138) RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
                # (Line 140) trg.Table_Sin(playerID, 22 + 22 * (v.P_LoopMain[playerID] % 4), 150);
                DoActions(RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                trg.Table_Sin(playerID, 22 + 22 * (v.P_LoopMain[playerID] % 4), 150)
                # (Line 141) trg.Table_Cos(playerID, 22 + 22 * (v.P_LoopMain[playerID] % 4), 150);
                trg.Table_Cos(playerID, 22 + 22 * (v.P_LoopMain[playerID] % 4), 150)
                # (Line 143) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 144) trg.Shape_Square(playerID, 7, "40 + 1n Zealot", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 7, "40 + 1n Zealot", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 145) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
                # (Line 146) KillUnitAt(All, "40 + 1n Zealot", "Anywhere", playerID);
                DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
                # (Line 148) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "40 + 1n Zealot", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 150) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 151) }
                # (Line 152) else if (v.P_LoopMain[playerID] == 10)
            if EUDElseIf()(v.P_LoopMain[playerID] == 10):
                # (Line 153) {
                # (Line 154) trg.Main_Wait(80);
                trg.Main_Wait(80)
                # (Line 156) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 157) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 158) }
                # (Line 159) }
            EUDEndIf()
            # (Line 160) else if (v.P_CountMain[playerID] == 4)
        if EUDElseIf()(v.P_CountMain[playerID] == 4):
            # (Line 161) {
            # (Line 162) trg.SkillEnd();
            trg.SkillEnd()
            # (Line 163) }
            # (Line 164) }
        EUDEndIf()
        # (Line 165) }
    EUDEndIf()
