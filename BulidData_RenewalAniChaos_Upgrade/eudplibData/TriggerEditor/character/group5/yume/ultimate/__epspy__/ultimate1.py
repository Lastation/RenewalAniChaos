## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import variable as v;
import variable as v
# (Line 2) import func.trig as trg;
from func import trig as trg
# (Line 3) import func.sound as s;
from func import sound as s
# (Line 5) function MoveLoc(Unit : TrgUnit, playerID : TrgPlayer, x, y);
# (Line 6) function SkillUnit(playerID : TrgPlayer, count, Unit : TrgUnit);
# (Line 7) function SquareShapeAt(playerID : TrgPlayer, count, Unit : TrgUnit, x, y, distanceX, distanceY);
# (Line 8) function NxNSquareShapeAt(playerID : TrgPlayer, count, Unit : TrgUnit, n, interval, distanceX, distanceY);
# (Line 10) var i = 0;
i = EUDCreateVariables(1)
_IGVA([i], lambda: [0])
# (Line 12) function main(playerID)
# (Line 13) {
@EUDFunc
def f_main(playerID):
    # (Line 14) MoveLocation("26.Yume_Bozo", v.P_UnitID[playerID], playerID, "Anywhere");
    # (Line 16) if (playerID < 3)
    DoActions(MoveLocation("26.Yume_Bozo", v.P_UnitID[playerID], playerID, "Anywhere"))
    if EUDIf()(playerID >= 3, neg=True):
        # (Line 17) {
        # (Line 18) if (Bring(3, AtLeast, 1, v.P_UnitID[3], "26.Yume_Bozo"))
        if EUDIf()(Bring(3, AtLeast, 1, v.P_UnitID[3], "26.Yume_Bozo")):
            # (Line 19) {
            # (Line 20) KillUnitAt(All, "Protoss Observer", "Anywhere", 3);
            # (Line 21) }
            DoActions(KillUnitAt(All, "Protoss Observer", "Anywhere", 3))
            # (Line 22) if (Bring(4, AtLeast, 1, v.P_UnitID[4], "26.Yume_Bozo"))
        EUDEndIf()
        if EUDIf()(Bring(4, AtLeast, 1, v.P_UnitID[4], "26.Yume_Bozo")):
            # (Line 23) {
            # (Line 24) KillUnitAt(All, "Protoss Observer", "Anywhere", 4);
            # (Line 25) }
            DoActions(KillUnitAt(All, "Protoss Observer", "Anywhere", 4))
            # (Line 26) if (Bring(5, AtLeast, 1, v.P_UnitID[5], "26.Yume_Bozo"))
        EUDEndIf()
        if EUDIf()(Bring(5, AtLeast, 1, v.P_UnitID[5], "26.Yume_Bozo")):
            # (Line 27) {
            # (Line 28) KillUnitAt(All, "Protoss Observer", "Anywhere", 5);
            # (Line 29) }
            DoActions(KillUnitAt(All, "Protoss Observer", "Anywhere", 5))
            # (Line 30) }
        EUDEndIf()
        # (Line 31) else if (playerID >= 3)
    if EUDElseIf()(playerID >= 3):
        # (Line 32) {
        # (Line 33) if (Bring(0, AtLeast, 1, v.P_UnitID[0], "26.Yume_Bozo"))
        if EUDIf()(Bring(0, AtLeast, 1, v.P_UnitID[0], "26.Yume_Bozo")):
            # (Line 34) {
            # (Line 35) KillUnitAt(All, "Protoss Observer", "Anywhere", 0);
            # (Line 36) }
            DoActions(KillUnitAt(All, "Protoss Observer", "Anywhere", 0))
            # (Line 37) if (Bring(1, AtLeast, 1, v.P_UnitID[1], "26.Yume_Bozo"))
        EUDEndIf()
        if EUDIf()(Bring(1, AtLeast, 1, v.P_UnitID[1], "26.Yume_Bozo")):
            # (Line 38) {
            # (Line 39) KillUnitAt(All, "Protoss Observer", "Anywhere", 1);
            # (Line 40) }
            DoActions(KillUnitAt(All, "Protoss Observer", "Anywhere", 1))
            # (Line 41) if (Bring(2, AtLeast, 1, v.P_UnitID[2], "26.Yume_Bozo"))
        EUDEndIf()
        if EUDIf()(Bring(2, AtLeast, 1, v.P_UnitID[2], "26.Yume_Bozo")):
            # (Line 42) {
            # (Line 43) KillUnitAt(All, "Protoss Observer", "Anywhere", 2);
            # (Line 44) }
            DoActions(KillUnitAt(All, "Protoss Observer", "Anywhere", 2))
            # (Line 45) }
        EUDEndIf()
        # (Line 47) if (v.P_WaitMain[playerID] == 0)
    EUDEndIf()
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 48) {
        # (Line 49) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 50) {
            # (Line 51) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 52) {
                # (Line 53) SetSwitch("ComputerAlliy", Set);
                # (Line 55) SetAllianceStatus(P7, Ally);
                DoActions(SetSwitch("ComputerAlliy", Set))
                # (Line 56) SetAllianceStatus(P8, Ally);
                DoActions(SetAllianceStatus(P7, Ally))
                # (Line 58) trg.Shape_Dot(playerID, 1, "40 + 1n Gantrithor", 0, 0);
                DoActions(SetAllianceStatus(P8, Ally))
                trg.Shape_Dot(playerID, 1, "40 + 1n Gantrithor", 0, 0)
                # (Line 59) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID);
                # (Line 61) SetInvincibility(Enable, v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID))
                # (Line 63) trg.Main_Wait(560);
                DoActions(SetInvincibility(Enable, v.P_UnitID[playerID], playerID, "Anywhere"))
                trg.Main_Wait(560)
                # (Line 65) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 66) }
                # (Line 67) else if (v.P_LoopMain[playerID] == 1)
            if EUDElseIf()(v.P_LoopMain[playerID] == 1):
                # (Line 68) {
                # (Line 69) MoveLocation("26.Yume_Bozo", v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 71) i = 0;
                DoActions(MoveLocation("26.Yume_Bozo", v.P_UnitID[playerID], playerID, "Anywhere"))
                i << (0)
                # (Line 73) if (playerID < 3)
                if EUDIf()(playerID >= 3, neg=True):
                    # (Line 74) {
                    # (Line 75) if (Bring(3, AtLeast, 1, v.P_UnitID[3], "26.Yume_Bozo"))
                    if EUDIf()(Bring(3, AtLeast, 1, v.P_UnitID[3], "26.Yume_Bozo")):
                        # (Line 76) {
                        # (Line 77) CreateUnitWithProperties(1, "Zerg Defiler", "[Skill]Unit_Wait_1", playerID, UnitProperty(burrowed=True));
                        # (Line 78) SetInvincibility(Enable, "Any unit", playerID, "[Skill]Unit_Wait_ALL");
                        DoActions(CreateUnitWithProperties(1, "Zerg Defiler", "[Skill]Unit_Wait_1", playerID, UnitProperty(burrowed=True)))
                        # (Line 79) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[3], 3, "Anywhere");
                        DoActions(SetInvincibility(Enable, "Any unit", playerID, "[Skill]Unit_Wait_ALL"))
                        # (Line 80) MoveUnit(All, "Zerg Defiler", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                        DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[3], 3, "Anywhere"))
                        # (Line 82) i += 1;
                        DoActions(MoveUnit(All, "Zerg Defiler", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                        i.__iadd__(1)
                        # (Line 83) }
                        # (Line 84) if (Bring(4, AtLeast, 1, v.P_UnitID[4], "26.Yume_Bozo"))
                    EUDEndIf()
                    if EUDIf()(Bring(4, AtLeast, 1, v.P_UnitID[4], "26.Yume_Bozo")):
                        # (Line 85) {
                        # (Line 86) CreateUnitWithProperties(1, "Zerg Defiler", "[Skill]Unit_Wait_1", playerID, UnitProperty(burrowed=True));
                        # (Line 87) SetInvincibility(Enable, "Any unit", playerID, "[Skill]Unit_Wait_ALL");
                        DoActions(CreateUnitWithProperties(1, "Zerg Defiler", "[Skill]Unit_Wait_1", playerID, UnitProperty(burrowed=True)))
                        # (Line 88) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[4], 4, "Anywhere");
                        DoActions(SetInvincibility(Enable, "Any unit", playerID, "[Skill]Unit_Wait_ALL"))
                        # (Line 89) MoveUnit(All, "Zerg Defiler", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                        DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[4], 4, "Anywhere"))
                        # (Line 91) i += 1;
                        DoActions(MoveUnit(All, "Zerg Defiler", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                        i.__iadd__(1)
                        # (Line 92) }
                        # (Line 93) if (Bring(5, AtLeast, 1, v.P_UnitID[5], "26.Yume_Bozo"))
                    EUDEndIf()
                    if EUDIf()(Bring(5, AtLeast, 1, v.P_UnitID[5], "26.Yume_Bozo")):
                        # (Line 94) {
                        # (Line 95) CreateUnitWithProperties(1, "Zerg Defiler", "[Skill]Unit_Wait_1", playerID, UnitProperty(burrowed=True));
                        # (Line 96) SetInvincibility(Enable, "Any unit", playerID, "[Skill]Unit_Wait_ALL");
                        DoActions(CreateUnitWithProperties(1, "Zerg Defiler", "[Skill]Unit_Wait_1", playerID, UnitProperty(burrowed=True)))
                        # (Line 97) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[5], 5, "Anywhere");
                        DoActions(SetInvincibility(Enable, "Any unit", playerID, "[Skill]Unit_Wait_ALL"))
                        # (Line 98) MoveUnit(All, "Zerg Defiler", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                        DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[5], 5, "Anywhere"))
                        # (Line 100) i += 1;
                        DoActions(MoveUnit(All, "Zerg Defiler", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                        i.__iadd__(1)
                        # (Line 101) }
                        # (Line 103) }
                    EUDEndIf()
                    # (Line 104) else if (playerID >= 3)
                if EUDElseIf()(playerID >= 3):
                    # (Line 105) {
                    # (Line 106) if (Bring(0, AtLeast, 1, v.P_UnitID[0], "26.Yume_Bozo"))
                    if EUDIf()(Bring(0, AtLeast, 1, v.P_UnitID[0], "26.Yume_Bozo")):
                        # (Line 107) {
                        # (Line 108) CreateUnitWithProperties(1, "Zerg Defiler", "[Skill]Unit_Wait_1", playerID, UnitProperty(burrowed=True));
                        # (Line 109) SetInvincibility(Enable, "Any unit", playerID, "[Skill]Unit_Wait_ALL");
                        DoActions(CreateUnitWithProperties(1, "Zerg Defiler", "[Skill]Unit_Wait_1", playerID, UnitProperty(burrowed=True)))
                        # (Line 110) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[0], 0, "Anywhere");
                        DoActions(SetInvincibility(Enable, "Any unit", playerID, "[Skill]Unit_Wait_ALL"))
                        # (Line 111) MoveUnit(All, "Zerg Defiler", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                        DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[0], 0, "Anywhere"))
                        # (Line 113) i += 1;
                        DoActions(MoveUnit(All, "Zerg Defiler", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                        i.__iadd__(1)
                        # (Line 114) }
                        # (Line 115) if (Bring(1, AtLeast, 1, v.P_UnitID[1], "26.Yume_Bozo"))
                    EUDEndIf()
                    if EUDIf()(Bring(1, AtLeast, 1, v.P_UnitID[1], "26.Yume_Bozo")):
                        # (Line 116) {
                        # (Line 117) CreateUnitWithProperties(1, "Zerg Defiler", "[Skill]Unit_Wait_1", playerID, UnitProperty(burrowed=True));
                        # (Line 118) SetInvincibility(Enable, "Any unit", playerID, "[Skill]Unit_Wait_ALL");
                        DoActions(CreateUnitWithProperties(1, "Zerg Defiler", "[Skill]Unit_Wait_1", playerID, UnitProperty(burrowed=True)))
                        # (Line 119) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[1], 1, "Anywhere");
                        DoActions(SetInvincibility(Enable, "Any unit", playerID, "[Skill]Unit_Wait_ALL"))
                        # (Line 120) MoveUnit(All, "Zerg Defiler", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                        DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[1], 1, "Anywhere"))
                        # (Line 122) i += 1;
                        DoActions(MoveUnit(All, "Zerg Defiler", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                        i.__iadd__(1)
                        # (Line 123) }
                        # (Line 124) if (Bring(2, AtLeast, 1, v.P_UnitID[2], "26.Yume_Bozo"))
                    EUDEndIf()
                    if EUDIf()(Bring(2, AtLeast, 1, v.P_UnitID[2], "26.Yume_Bozo")):
                        # (Line 125) {
                        # (Line 126) CreateUnitWithProperties(1, "Zerg Defiler", "[Skill]Unit_Wait_1", playerID, UnitProperty(burrowed=True));
                        # (Line 127) SetInvincibility(Enable, "Any unit", playerID, "[Skill]Unit_Wait_ALL");
                        DoActions(CreateUnitWithProperties(1, "Zerg Defiler", "[Skill]Unit_Wait_1", playerID, UnitProperty(burrowed=True)))
                        # (Line 128) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[2], 2, "Anywhere");
                        DoActions(SetInvincibility(Enable, "Any unit", playerID, "[Skill]Unit_Wait_ALL"))
                        # (Line 129) MoveUnit(All, "Zerg Defiler", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                        DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[2], 2, "Anywhere"))
                        # (Line 131) i += 1;
                        DoActions(MoveUnit(All, "Zerg Defiler", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                        i.__iadd__(1)
                        # (Line 132) }
                        # (Line 133) }
                    EUDEndIf()
                    # (Line 135) trg.Main_Wait(80);
                EUDEndIf()
                trg.Main_Wait(80)
                # (Line 137) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 138) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 139) }
                # (Line 140) }
            EUDEndIf()
            # (Line 141) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 142) {
            # (Line 143) if (v.P_LoopMain[playerID] < 4)
            if EUDIf()(v.P_LoopMain[playerID] >= 4, neg=True):
                # (Line 144) {
                # (Line 145) RemoveUnitAt(All, "80 + 1n Artanis", "Anywhere", playerID);
                # (Line 146) RemoveUnitAt(All, "80 + 1n Tom Kazansky", "Anywhere", playerID);
                DoActions(RemoveUnitAt(All, "80 + 1n Artanis", "Anywhere", playerID))
                # (Line 148) var j = 0;
                DoActions(RemoveUnitAt(All, "80 + 1n Tom Kazansky", "Anywhere", playerID))
                j = EUDVariable()
                j << (0)
                # (Line 150) for (; j < i; j++)
                if EUDWhile()(j >= i, neg=True):
                    def _t24():
                        j.__iadd__(1)
                    # (Line 151) {
                    # (Line 152) if (v.P_LoopMain[playerID] == 0)
                    if EUDIf()(v.P_LoopMain[playerID] == 0):
                        # (Line 153) {
                        # (Line 154) trg.Table_Sin(playerID, 22, 100);
                        trg.Table_Sin(playerID, 22, 100)
                        # (Line 155) trg.Table_Cos(playerID, 22, 100);
                        trg.Table_Cos(playerID, 22, 100)
                        # (Line 157) var x = v.P_AngleCos[playerID];
                        x = EUDVariable()
                        x << (v.P_AngleCos[playerID])
                        # (Line 158) var y = v.P_AngleSin[playerID];
                        y = EUDVariable()
                        y << (v.P_AngleSin[playerID])
                        # (Line 160) NxNSquareShapeAt(playerID, 1, "80 + 1n Artanis", 4, 50, x, y);
                        NxNSquareShapeAt(playerID, 1, "80 + 1n Artanis", 4, 50, x, y)
                        # (Line 161) NxNSquareShapeAt(playerID, 1, "80 + 1n Artanis", 4, 50, -x, -y);
                        NxNSquareShapeAt(playerID, 1, "80 + 1n Artanis", 4, 50, -x, -y)
                        # (Line 162) NxNSquareShapeAt(playerID, 1, "80 + 1n Artanis", 4, 50, -y, x);
                        NxNSquareShapeAt(playerID, 1, "80 + 1n Artanis", 4, 50, -y, x)
                        # (Line 163) NxNSquareShapeAt(playerID, 1, "80 + 1n Artanis", 4, 50, y, -x);
                        NxNSquareShapeAt(playerID, 1, "80 + 1n Artanis", 4, 50, y, -x)
                        # (Line 164) NxNSquareShapeAt(playerID, 1, " Unit. Hoffnung 25000", 4, 50, x, y);
                        NxNSquareShapeAt(playerID, 1, " Unit. Hoffnung 25000", 4, 50, x, y)
                        # (Line 165) NxNSquareShapeAt(playerID, 1, " Unit. Hoffnung 25000", 4, 50, -x, -y);
                        NxNSquareShapeAt(playerID, 1, " Unit. Hoffnung 25000", 4, 50, -x, -y)
                        # (Line 166) NxNSquareShapeAt(playerID, 1, " Unit. Hoffnung 25000", 4, 50, -y, x);
                        NxNSquareShapeAt(playerID, 1, " Unit. Hoffnung 25000", 4, 50, -y, x)
                        # (Line 167) NxNSquareShapeAt(playerID, 1, " Unit. Hoffnung 25000", 4, 50, y, -x);
                        NxNSquareShapeAt(playerID, 1, " Unit. Hoffnung 25000", 4, 50, y, -x)
                        # (Line 168) }
                        # (Line 169) else if (v.P_LoopMain[playerID] == 1)
                    if EUDElseIf()(v.P_LoopMain[playerID] == 1):
                        # (Line 170) {
                        # (Line 171) trg.Table_Sin(playerID, 22, 100);
                        trg.Table_Sin(playerID, 22, 100)
                        # (Line 172) trg.Table_Cos(playerID, 22, 100);
                        trg.Table_Cos(playerID, 22, 100)
                        # (Line 174) var x = v.P_AngleCos[playerID];
                        x = EUDVariable()
                        x << (v.P_AngleCos[playerID])
                        # (Line 175) var y = v.P_AngleSin[playerID];
                        y = EUDVariable()
                        y << (v.P_AngleSin[playerID])
                        # (Line 177) NxNSquareShapeAt(playerID, 1, "Kakaru (Twilight)", 4, 50, x, y);
                        NxNSquareShapeAt(playerID, 1, "Kakaru (Twilight)", 4, 50, x, y)
                        # (Line 178) NxNSquareShapeAt(playerID, 1, "Kakaru (Twilight)", 4, 50, -x, -y);
                        NxNSquareShapeAt(playerID, 1, "Kakaru (Twilight)", 4, 50, -x, -y)
                        # (Line 179) NxNSquareShapeAt(playerID, 1, "Kakaru (Twilight)", 4, 50, -y, x);
                        NxNSquareShapeAt(playerID, 1, "Kakaru (Twilight)", 4, 50, -y, x)
                        # (Line 180) NxNSquareShapeAt(playerID, 1, "Kakaru (Twilight)", 4, 50, y, -x);
                        NxNSquareShapeAt(playerID, 1, "Kakaru (Twilight)", 4, 50, y, -x)
                        # (Line 181) }
                        # (Line 182) else if (v.P_LoopMain[playerID] == 2)
                    if EUDElseIf()(v.P_LoopMain[playerID] == 2):
                        # (Line 183) {
                        # (Line 184) trg.Table_Sin(playerID, 67, 100);
                        trg.Table_Sin(playerID, 67, 100)
                        # (Line 185) trg.Table_Cos(playerID, 67, 100);
                        trg.Table_Cos(playerID, 67, 100)
                        # (Line 187) var x = v.P_AngleCos[playerID];
                        x = EUDVariable()
                        x << (v.P_AngleCos[playerID])
                        # (Line 188) var y = v.P_AngleSin[playerID];
                        y = EUDVariable()
                        y << (v.P_AngleSin[playerID])
                        # (Line 190) NxNSquareShapeAt(playerID, 1, "80 + 1n Tom Kazansky", 4, 50, x, y);
                        NxNSquareShapeAt(playerID, 1, "80 + 1n Tom Kazansky", 4, 50, x, y)
                        # (Line 191) NxNSquareShapeAt(playerID, 1, "80 + 1n Tom Kazansky", 4, 50, -x, -y);
                        NxNSquareShapeAt(playerID, 1, "80 + 1n Tom Kazansky", 4, 50, -x, -y)
                        # (Line 192) NxNSquareShapeAt(playerID, 1, "80 + 1n Tom Kazansky", 4, 50, -y, x);
                        NxNSquareShapeAt(playerID, 1, "80 + 1n Tom Kazansky", 4, 50, -y, x)
                        # (Line 193) NxNSquareShapeAt(playerID, 1, "80 + 1n Tom Kazansky", 4, 50, y, -x);
                        NxNSquareShapeAt(playerID, 1, "80 + 1n Tom Kazansky", 4, 50, y, -x)
                        # (Line 194) NxNSquareShapeAt(playerID, 1, " Unit. Hoffnung 25000", 4, 50, x, y);
                        NxNSquareShapeAt(playerID, 1, " Unit. Hoffnung 25000", 4, 50, x, y)
                        # (Line 195) NxNSquareShapeAt(playerID, 1, " Unit. Hoffnung 25000", 4, 50, -x, -y);
                        NxNSquareShapeAt(playerID, 1, " Unit. Hoffnung 25000", 4, 50, -x, -y)
                        # (Line 196) NxNSquareShapeAt(playerID, 1, " Unit. Hoffnung 25000", 4, 50, -y, x);
                        NxNSquareShapeAt(playerID, 1, " Unit. Hoffnung 25000", 4, 50, -y, x)
                        # (Line 197) NxNSquareShapeAt(playerID, 1, " Unit. Hoffnung 25000", 4, 50, y, -x);
                        NxNSquareShapeAt(playerID, 1, " Unit. Hoffnung 25000", 4, 50, y, -x)
                        # (Line 198) }
                        # (Line 199) else if (v.P_LoopMain[playerID] == 3)
                    if EUDElseIf()(v.P_LoopMain[playerID] == 3):
                        # (Line 200) {
                        # (Line 201) trg.Table_Sin(playerID, 67, 100);
                        trg.Table_Sin(playerID, 67, 100)
                        # (Line 202) trg.Table_Cos(playerID, 67, 100);
                        trg.Table_Cos(playerID, 67, 100)
                        # (Line 204) var x = v.P_AngleCos[playerID];
                        x = EUDVariable()
                        x << (v.P_AngleCos[playerID])
                        # (Line 205) var y = v.P_AngleSin[playerID];
                        y = EUDVariable()
                        y << (v.P_AngleSin[playerID])
                        # (Line 207) NxNSquareShapeAt(playerID, 1, "Kakaru (Twilight)", 4, 50, x, y);
                        NxNSquareShapeAt(playerID, 1, "Kakaru (Twilight)", 4, 50, x, y)
                        # (Line 208) NxNSquareShapeAt(playerID, 1, "Kakaru (Twilight)", 4, 50, -x, -y);
                        NxNSquareShapeAt(playerID, 1, "Kakaru (Twilight)", 4, 50, -x, -y)
                        # (Line 209) NxNSquareShapeAt(playerID, 1, "Kakaru (Twilight)", 4, 50, -y, x);
                        NxNSquareShapeAt(playerID, 1, "Kakaru (Twilight)", 4, 50, -y, x)
                        # (Line 210) NxNSquareShapeAt(playerID, 1, "Kakaru (Twilight)", 4, 50, y, -x);
                        NxNSquareShapeAt(playerID, 1, "Kakaru (Twilight)", 4, 50, y, -x)
                        # (Line 211) }
                        # (Line 213) CreateUnitWithProperties(1, "40 + 1n Zergling", "[Skill]Unit_Wait_1", playerID, UnitProperty(burrowed=True));
                    EUDEndIf()
                    # (Line 214) SetInvincibility(Enable, "Any unit", playerID, "[Skill]Unit_Wait_ALL");
                    DoActions(CreateUnitWithProperties(1, "40 + 1n Zergling", "[Skill]Unit_Wait_1", playerID, UnitProperty(burrowed=True)))
                    # (Line 215) MoveLocation(v.P_LocationID[playerID], "Zerg Defiler", playerID, "Anywhere");
                    DoActions(SetInvincibility(Enable, "Any unit", playerID, "[Skill]Unit_Wait_ALL"))
                    # (Line 216) RemoveUnitAt(1, "Zerg Defiler", "Anywhere", playerID);
                    DoActions(MoveLocation(v.P_LocationID[playerID], "Zerg Defiler", playerID, "Anywhere"))
                    # (Line 217) MoveUnit(All, "40 + 1n Zergling", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                    DoActions(RemoveUnitAt(1, "Zerg Defiler", "Anywhere", playerID))
                    # (Line 219) }
                    DoActions(MoveUnit(All, "40 + 1n Zergling", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                    # (Line 221) Order("80 + 1n Artanis", playerID, "Anywhere", Attack, "Anywhere");
                    EUDSetContinuePoint()
                    _t24()
                EUDEndWhile()
                # (Line 222) Order("80 + 1n Tom Kazansky", playerID, "Anywhere", Attack, "Anywhere");
                DoActions(Order("80 + 1n Artanis", playerID, "Anywhere", Attack, "Anywhere"))
                # (Line 224) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
                DoActions(Order("80 + 1n Tom Kazansky", playerID, "Anywhere", Attack, "Anywhere"))
                # (Line 225) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
                # (Line 227) j = 0;
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                j << (0)
                # (Line 229) for (; j < i; j++)
                if EUDWhile()(j >= i, neg=True):
                    def _t30():
                        j.__iadd__(1)
                    # (Line 230) {
                    # (Line 231) CreateUnitWithProperties(1, "Zerg Defiler", "[Skill]Unit_Wait_1", playerID, UnitProperty(burrowed=True));
                    # (Line 232) SetInvincibility(Enable, "Any unit", playerID, "[Skill]Unit_Wait_ALL");
                    DoActions(CreateUnitWithProperties(1, "Zerg Defiler", "[Skill]Unit_Wait_1", playerID, UnitProperty(burrowed=True)))
                    # (Line 233) MoveLocation(v.P_LocationID[playerID], "40 + 1n Zergling", playerID, "Anywhere");
                    DoActions(SetInvincibility(Enable, "Any unit", playerID, "[Skill]Unit_Wait_ALL"))
                    # (Line 234) RemoveUnitAt(1, "40 + 1n Zergling", "Anywhere", playerID);
                    DoActions(MoveLocation(v.P_LocationID[playerID], "40 + 1n Zergling", playerID, "Anywhere"))
                    # (Line 235) MoveUnit(All, "Zerg Defiler", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                    DoActions(RemoveUnitAt(1, "40 + 1n Zergling", "Anywhere", playerID))
                    # (Line 236) }
                    DoActions(MoveUnit(All, "Zerg Defiler", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                    # (Line 238) trg.Main_Wait(80);
                    EUDSetContinuePoint()
                    _t30()
                EUDEndWhile()
                trg.Main_Wait(80)
                # (Line 240) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 241) }
                # (Line 242) else if (v.P_LoopMain[playerID] == 4)
            if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                # (Line 243) {
                # (Line 244) RemoveUnitAt(All, "80 + 1n Artanis", "Anywhere", playerID);
                # (Line 245) RemoveUnitAt(All, "80 + 1n Tom Kazansky", "Anywhere", playerID);
                DoActions(RemoveUnitAt(All, "80 + 1n Artanis", "Anywhere", playerID))
                # (Line 246) RemoveUnitAt(All, "Zerg Defiler", "Anywhere", playerID);
                DoActions(RemoveUnitAt(All, "80 + 1n Tom Kazansky", "Anywhere", playerID))
                # (Line 248) trg.Main_Wait(2320);
                DoActions(RemoveUnitAt(All, "Zerg Defiler", "Anywhere", playerID))
                trg.Main_Wait(2320)
                # (Line 250) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 251) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 252) }
                # (Line 253) }
            EUDEndIf()
            # (Line 254) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 255) {
            # (Line 256) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 257) {
                # (Line 258) trg.Shape_Dot(playerID, 1, "40 + 1n Gantrithor", 0, 0);
                trg.Shape_Dot(playerID, 1, "40 + 1n Gantrithor", 0, 0)
                # (Line 259) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID);
                # (Line 261) SetInvincibility(Disable, v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID))
                # (Line 263) trg.Main_Wait(480);
                DoActions(SetInvincibility(Disable, v.P_UnitID[playerID], playerID, "Anywhere"))
                trg.Main_Wait(480)
                # (Line 265) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 266) }
                # (Line 267) else if (v.P_LoopMain[playerID] == 1)
            if EUDElseIf()(v.P_LoopMain[playerID] == 1):
                # (Line 268) {
                # (Line 269) s.CharacterVoice(6);
                s.CharacterVoice(6)
                # (Line 271) trg.Main_Wait(80);
                trg.Main_Wait(80)
                # (Line 273) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 274) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 275) }
                # (Line 276) }
            EUDEndIf()
            # (Line 277) else if (v.P_CountMain[playerID] == 3)
        if EUDElseIf()(v.P_CountMain[playerID] == 3):
            # (Line 278) {
            # (Line 279) SetSwitch("ComputerAlliy", Clear);
            # (Line 281) if (playerID < 3)
            DoActions(SetSwitch("ComputerAlliy", Clear))
            if EUDIf()(playerID >= 3, neg=True):
                # (Line 282) {
                # (Line 283) SetAllianceStatus(P8, Enemy);
                # (Line 284) }
                DoActions(SetAllianceStatus(P8, Enemy))
                # (Line 285) else if (playerID >= 3)
            if EUDElseIf()(playerID >= 3):
                # (Line 286) {
                # (Line 287) SetAllianceStatus(P7, Enemy);
                # (Line 288) }
                DoActions(SetAllianceStatus(P7, Enemy))
                # (Line 290) trg.SkillEnd();
            EUDEndIf()
            trg.SkillEnd()
            # (Line 291) }
            # (Line 292) }
        EUDEndIf()
        # (Line 293) }
    EUDEndIf()
    # (Line 297) function MoveLoc(Unit : TrgUnit, playerID : TrgPlayer, x, y)

# (Line 298) {
@EUDTypedFunc([TrgUnit, TrgPlayer, None, None])
def MoveLoc(Unit, playerID, x, y):
    # (Line 299) MoveLocation(v.P_LocationID[playerID], "Zerg Defiler", playerID, "Anywhere");
    # (Line 300) addloc(v.P_LocationID[playerID], x, y);
    DoActions(MoveLocation(v.P_LocationID[playerID], "Zerg Defiler", playerID, "Anywhere"))
    f_addloc(v.P_LocationID[playerID], x, y)
    # (Line 301) }
    # (Line 303) function SkillUnit(playerID : TrgPlayer, count, Unit : TrgUnit)

# (Line 304) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit])
def SkillUnit(playerID, count, Unit):
    # (Line 305) CreateUnit(count, Unit, dwrand() % 8 + 33, playerID);
    # (Line 306) SetInvincibility(Enable, Unit, playerID, "[Skill]Unit_Wait_ALL");
    DoActions(CreateUnit(count, Unit, f_dwrand() % 8 + 33, playerID))
    # (Line 307) MoveUnit(count, Unit, playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
    DoActions(SetInvincibility(Enable, Unit, playerID, "[Skill]Unit_Wait_ALL"))
    # (Line 308) }
    DoActions(MoveUnit(count, Unit, playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
    # (Line 310) function SquareShapeAt(playerID : TrgPlayer, count, Unit : TrgUnit, x, y, distanceX, distanceY)

# (Line 311) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None])
def SquareShapeAt(playerID, count, Unit, x, y, distanceX, distanceY):
    # (Line 312) MoveLoc(v.P_UnitID[playerID], playerID, x + distanceX, y + distanceY);
    MoveLoc(v.P_UnitID[playerID], playerID, x + distanceX, y + distanceY)
    # (Line 313) SkillUnit(playerID, count, Unit);
    SkillUnit(playerID, count, Unit)
    # (Line 314) MoveLoc(v.P_UnitID[playerID], playerID, -y + distanceX, x + distanceY);
    MoveLoc(v.P_UnitID[playerID], playerID, -y + distanceX, x + distanceY)
    # (Line 315) SkillUnit(playerID, count, Unit);
    SkillUnit(playerID, count, Unit)
    # (Line 316) MoveLoc(v.P_UnitID[playerID], playerID, -x + distanceX, -y + distanceY);
    MoveLoc(v.P_UnitID[playerID], playerID, -x + distanceX, -y + distanceY)
    # (Line 317) SkillUnit(playerID, count, Unit);
    SkillUnit(playerID, count, Unit)
    # (Line 318) MoveLoc(v.P_UnitID[playerID], playerID, y + distanceX, -x + distanceY);
    MoveLoc(v.P_UnitID[playerID], playerID, y + distanceX, -x + distanceY)
    # (Line 319) SkillUnit(playerID, count, Unit);
    SkillUnit(playerID, count, Unit)
    # (Line 320) }
    # (Line 322) function NxNSquareShapeAt(playerID : TrgPlayer, count, Unit : TrgUnit, n, interval, distanceX, distanceY)

# (Line 323) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None])
def NxNSquareShapeAt(playerID, count, Unit, n, interval, distanceX, distanceY):
    # (Line 324) var i = 0;
    i_1 = EUDVariable()
    i_1 << (0)
    # (Line 325) var destX, destY;
    destX, destY = EUDCreateVariables(2)
    # (Line 326) var distance = interval / 2;
    distance = EUDVariable()
    distance << (interval // 2)
    # (Line 327) var size = n * n;
    size = EUDVariable()
    size << (n * n)
    # (Line 329) for (; i < size / 4; i++)
    if EUDWhile()(i_1 >= size // 4, neg=True):
        def _t2():
            i_1.__iadd__(1)
        # (Line 330) {
        # (Line 331) if (n == 1)
        if EUDIf()(n == 1):
            # (Line 332) {
            # (Line 333) MoveLoc(v.P_UnitID[playerID] ,playerID, distanceX, distanceY);
            MoveLoc(v.P_UnitID[playerID], playerID, distanceX, distanceY)
            # (Line 334) SkillUnit(playerID, count, Unit);
            SkillUnit(playerID, count, Unit)
            # (Line 335) }
            # (Line 336) else if (n % 2 == 0)
        if EUDElseIf()(n % 2 == 0):
            # (Line 337) {
            # (Line 338) destX = i % (n / 2) + 1;
            destX << (i_1 % (n // 2) + 1)
            # (Line 339) destY = i / (n / 2) + 1;
            destY << (i_1 // (n // 2) + 1)
            # (Line 341) if (destX == 1)
            if EUDIf()(destX == 1):
                # (Line 342) {
                # (Line 343) SquareShapeAt(playerID, count, Unit, distance, destY * interval - distance, distanceX, distanceY);
                SquareShapeAt(playerID, count, Unit, distance, destY * interval - distance, distanceX, distanceY)
                # (Line 344) }
                # (Line 345) else if (destY == 1)
            if EUDElseIf()(destY == 1):
                # (Line 346) {
                # (Line 347) SquareShapeAt(playerID, count, Unit, destX * interval - distance, distance, distanceX, distanceY);
                SquareShapeAt(playerID, count, Unit, destX * interval - distance, distance, distanceX, distanceY)
                # (Line 348) }
                # (Line 349) else
                # (Line 350) {
            if EUDElse()():
                # (Line 351) SquareShapeAt(playerID, count, Unit, destX * interval - distance, destY * interval - distance, distanceX, distanceY);
                SquareShapeAt(playerID, count, Unit, destX * interval - distance, destY * interval - distance, distanceX, distanceY)
                # (Line 352) }
                # (Line 353) }
            EUDEndIf()
            # (Line 354) else if (n % 2 == 1)
        if EUDElseIf()(n % 2 == 1):
            # (Line 355) {
            # (Line 356) destX = i % (n / 2);
            destX << (i_1 % (n // 2))
            # (Line 357) destY = i / (n / 2);
            destY << (i_1 // (n // 2))
            # (Line 359) if (i == 0)
            if EUDIf()(i_1 == 0):
                # (Line 360) {
                # (Line 361) MoveLoc(v.P_UnitID[playerID] ,playerID, distanceX, distanceY);
                MoveLoc(v.P_UnitID[playerID], playerID, distanceX, distanceY)
                # (Line 362) SkillUnit(playerID, count, Unit);
                SkillUnit(playerID, count, Unit)
                # (Line 363) }
                # (Line 364) else if (destY == 0)
            if EUDElseIf()(destY == 0):
                # (Line 365) {
                # (Line 366) SquareShapeAt(playerID, count, Unit, destX * interval, 0, distanceX, distanceY);
                SquareShapeAt(playerID, count, Unit, destX * interval, 0, distanceX, distanceY)
                # (Line 367) }
                # (Line 368) else
                # (Line 369) {
            if EUDElse()():
                # (Line 370) SquareShapeAt(playerID, count, Unit, destX * interval + interval, destY * interval, distanceX, distanceY);
                SquareShapeAt(playerID, count, Unit, destX * interval + interval, destY * interval, distanceX, distanceY)
                # (Line 371) }
                # (Line 373) if (i == size / 4 - 1)
            EUDEndIf()
            if EUDIf()(i_1 == size // 4 - 1):
                # (Line 374) {
                # (Line 375) SquareShapeAt(playerID, count, Unit, (n / 2) * interval, 0, distanceX, distanceY);
                SquareShapeAt(playerID, count, Unit, (n // 2) * interval, 0, distanceX, distanceY)
                # (Line 376) }
                # (Line 377) }
            EUDEndIf()
            # (Line 378) }
        EUDEndIf()
        # (Line 379) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
