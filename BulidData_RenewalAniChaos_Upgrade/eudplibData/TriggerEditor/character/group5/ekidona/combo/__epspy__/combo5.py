## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 4) import func.trigepic as epic;
from func import trigepic as epic
# (Line 6) function Shape(playerID : TrgPlayer, count, Unit : TrgUnit);
# (Line 7) function ShapeWithProperty(playerID : TrgPlayer, count, Unit : TrgUnit, property);
# (Line 10) function main(playerID)
# (Line 11) {
@EUDFunc
def f_main(playerID):
    # (Line 12) trg.Debuff_BanReturn();
    trg.Debuff_BanReturn()
    # (Line 13) trg.Debuff_Stop();
    trg.Debuff_Stop()
    # (Line 15) MoveUnit(All, "60 + 1n High Templar", playerID, "Anywhere", "[Skill]HoldPosition");
    # (Line 17) if (v.P_WaitMain[playerID] == 0)
    DoActions(MoveUnit(All, "60 + 1n High Templar", playerID, "Anywhere", "[Skill]HoldPosition"))
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 18) {
        # (Line 19) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 20) {
            # (Line 21) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 22) {
                # (Line 23) Shape(playerID, 1, "60 + 1n High Templar");
                Shape(playerID, 1, "60 + 1n High Templar")
                # (Line 24) Shape(playerID, 1, "60 + 1n Archon");
                Shape(playerID, 1, "60 + 1n Archon")
                # (Line 25) ShapeWithProperty(playerID, 1, "40 + 1n Gantrithor", 1);
                ShapeWithProperty(playerID, 1, "40 + 1n Gantrithor", 1)
                # (Line 27) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID);
                # (Line 28) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID))
                # (Line 30) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 31) MoveUnit(All, "60 + 1n High Templar", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 32) Order("60 + 1n High Templar", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "60 + 1n High Templar", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 33) }
                DoActions(Order("60 + 1n High Templar", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 35) if (v.P_LoopMain[playerID] == 2)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 2):
                # (Line 36) {
                # (Line 37) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
                # (Line 39) Shape(playerID, 1, "40 + 1n Mojo");
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
                Shape(playerID, 1, "40 + 1n Mojo")
                # (Line 41) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 42) Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 43) }
                DoActions(Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 45) if (v.P_LoopMain[playerID] == 4)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 4):
                # (Line 46) {
                # (Line 47) RemoveUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
                # (Line 49) Shape(playerID, 1, "60 + 1n Danimoth");
                DoActions(RemoveUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
                Shape(playerID, 1, "60 + 1n Danimoth")
                # (Line 50) ShapeWithProperty(playerID, 1, "40 + 1n Lurker", 0);
                ShapeWithProperty(playerID, 1, "40 + 1n Lurker", 0)
                # (Line 52) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 53) MoveUnit(All, "40 + 1n Lurker", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 54) Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "40 + 1n Lurker", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 55) }
                DoActions(Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 57) if (v.P_LoopMain[playerID] == 8)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 8):
                # (Line 58) {
                # (Line 59) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                # (Line 60) }
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                # (Line 62) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 64) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 66) if (v.P_LoopMain[playerID] == 14)
            if EUDIf()(v.P_LoopMain[playerID] == 14):
                # (Line 67) {
                # (Line 68) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 69) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 70) }
                # (Line 71) }
            EUDEndIf()
            # (Line 72) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 73) {
            # (Line 74) trg.MoveLoc("40 + 1n Lurker", playerID, 0, 0);
            trg.MoveLoc("40 + 1n Lurker", playerID, 0, 0)
            # (Line 75) RemoveUnitAt(1, "40 + 1n Lurker", "Anywhere", playerID);
            # (Line 76) trg.SkillUnit(playerID, 1, "60 + 1n Archon");
            DoActions(RemoveUnitAt(1, "40 + 1n Lurker", "Anywhere", playerID))
            trg.SkillUnit(playerID, 1, "60 + 1n Archon")
            # (Line 77) epic.SkillUnit(playerID, 1, "60 + 1n Danimoth", 1);
            epic.SkillUnit(playerID, 1, "60 + 1n Danimoth", 1)
            # (Line 79) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
            # (Line 80) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
            # (Line 82) trg.Main_Wait(80);
            DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
            trg.Main_Wait(80)
            # (Line 84) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 86) if (v.P_LoopMain[playerID] == 16)
            if EUDIf()(v.P_LoopMain[playerID] == 16):
                # (Line 87) {
                # (Line 88) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 89) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 90) }
                # (Line 91) }
            EUDEndIf()
            # (Line 92) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 93) {
            # (Line 94) trg.SkillEnd();
            trg.SkillEnd()
            # (Line 95) }
            # (Line 96) }
        EUDEndIf()
        # (Line 97) }
    EUDEndIf()
    # (Line 99) function Shape(playerID : TrgPlayer, count, Unit : TrgUnit)

# (Line 100) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit])
def Shape(playerID, count, Unit):
    # (Line 101) trg.Shape_Square(playerID, count, Unit, 50, 0);
    trg.Shape_Square(playerID, count, Unit, 50, 0)
    # (Line 102) trg.Shape_Square(playerID, count, Unit, 100, 100);
    trg.Shape_Square(playerID, count, Unit, 100, 100)
    # (Line 103) trg.Shape_Square(playerID, count, Unit, 150, 0);
    trg.Shape_Square(playerID, count, Unit, 150, 0)
    # (Line 104) trg.Shape_Square(playerID, count, Unit, 50, 50);
    trg.Shape_Square(playerID, count, Unit, 50, 50)
    # (Line 105) }
    # (Line 107) function ShapeWithProperty(playerID : TrgPlayer, count, Unit : TrgUnit, property)

# (Line 108) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None])
def ShapeWithProperty(playerID, count, Unit, property):
    # (Line 109) epic.Shape_Square(playerID, count, Unit, 50, 0, property);
    epic.Shape_Square(playerID, count, Unit, 50, 0, property)
    # (Line 110) epic.Shape_Square(playerID, count, Unit, 100, 100, property);
    epic.Shape_Square(playerID, count, Unit, 100, 100, property)
    # (Line 111) epic.Shape_Square(playerID, count, Unit, 150, 0, property);
    epic.Shape_Square(playerID, count, Unit, 150, 0, property)
    # (Line 112) epic.Shape_Square(playerID, count, Unit, 50, 50, property);
    epic.Shape_Square(playerID, count, Unit, 50, 50, property)
    # (Line 113) }
