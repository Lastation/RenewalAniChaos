## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 4) import func.trigadv as adv;
from func import trigadv as adv
# (Line 5) import func.trigepic as epic;
from func import trigepic as epic
# (Line 6) import func.sound as s;
from func import sound as s
# (Line 8) function NxNSquareShapeAt(playerID : TrgPlayer, count, Unit : TrgUnit, n, interval, x, y);
# (Line 9) function NxNSquareShapeAtDouble(playerID : TrgPlayer, count, Unit : TrgUnit, n, interval, x, y);
# (Line 11) var x = 0;
x = EUDCreateVariables(1)
_IGVA([x], lambda: [0])
# (Line 12) var y = 0;
y = EUDCreateVariables(1)
_IGVA([y], lambda: [0])
# (Line 14) function main(playerID)
# (Line 15) {
@EUDFunc
def f_main(playerID):
    # (Line 16) trg.Debuff_BanReturn();
    trg.Debuff_BanReturn()
    # (Line 17) trg.Debuff_Stop();
    trg.Debuff_Stop()
    # (Line 19) MoveUnit(All, "40 + 1n Gantrithor", playerID, "Anywhere", "[Skill]HoldPosition");
    # (Line 20) MoveUnit(All, "50 + 1n Tank", playerID, "Anywhere", "[Skill]HoldPosition");
    DoActions(MoveUnit(All, "40 + 1n Gantrithor", playerID, "Anywhere", "[Skill]HoldPosition"))
    # (Line 21) MoveUnit(All, "60 + 1n Dragoon", playerID, "Anywhere", "[Skill]HoldPosition");
    DoActions(MoveUnit(All, "50 + 1n Tank", playerID, "Anywhere", "[Skill]HoldPosition"))
    # (Line 23) if (v.P_WaitMain[playerID] == 0)
    DoActions(MoveUnit(All, "60 + 1n Dragoon", playerID, "Anywhere", "[Skill]HoldPosition"))
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 24) {
        # (Line 25) if (v.P_CountMain[playerID] == 0)      //0.00
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 26) {
            # (Line 27) RemoveUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
            # (Line 29) if (v.P_LoopMain[playerID] % 2 == 0 && v.P_LoopMain[playerID] < 64)
            DoActions(RemoveUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
            if EUDIf()(EUDSCAnd()(v.P_LoopMain[playerID] % 2 == 0)(v.P_LoopMain[playerID] >= 64, neg=True)()):
                # (Line 30) {
                # (Line 31) RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                # (Line 33) trg.Table_Sin(playerID, 45 * (v.P_LoopMain[playerID] / 2), 64);
                DoActions(RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                trg.Table_Sin(playerID, 45 * (v.P_LoopMain[playerID] // 2), 64)
                # (Line 34) trg.Table_Cos(playerID, 45 * (v.P_LoopMain[playerID] / 2), 64);
                trg.Table_Cos(playerID, 45 * (v.P_LoopMain[playerID] // 2), 64)
                # (Line 36) x = v.P_AngleCos[playerID];
                x << (v.P_AngleCos[playerID])
                # (Line 37) y = v.P_AngleSin[playerID];
                y << (v.P_AngleSin[playerID])
                # (Line 39) trg.Shape_Double(playerID, 1, "60 + 1n Danimoth", x, y);
                trg.Shape_Double(playerID, 1, "60 + 1n Danimoth", x, y)
                # (Line 40) trg.Shape_Double(playerID, 1, "Protoss Dark Archon", x, y);
                trg.Shape_Double(playerID, 1, "Protoss Dark Archon", x, y)
                # (Line 41) trg.Shape_Dot(playerID, 1, "40 + 1n Mojo", 0, 0);
                trg.Shape_Dot(playerID, 1, "40 + 1n Mojo", 0, 0)
                # (Line 43) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 45) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 46) Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 47) Order("40 + 1n Mojo", playerID, "Anywhere", Attack, "Anywhere");
                DoActions(Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 48) }
                DoActions(Order("40 + 1n Mojo", playerID, "Anywhere", Attack, "Anywhere"))
                # (Line 50) if (v.P_LoopMain[playerID] >= 8 && v.P_LoopMain[playerID] < 14)    //0.64 - 1.12
            EUDEndIf()
            if EUDIf()(EUDSCAnd()(v.P_LoopMain[playerID] >= 8)(v.P_LoopMain[playerID] >= 14, neg=True)()):
                # (Line 51) {
                # (Line 52) var i = v.P_LoopMain[playerID] - 8;
                i = EUDVariable()
                i << (v.P_LoopMain[playerID] - 8)
                # (Line 54) if (i < 4)
                if EUDIf()(i >= 4, neg=True):
                    # (Line 55) {
                    # (Line 56) trg.Table_Sin(playerID, 0, 50 + 50 * i);
                    trg.Table_Sin(playerID, 0, 50 + 50 * i)
                    # (Line 57) trg.Table_Cos(playerID, 0, 50 + 50 * i);
                    trg.Table_Cos(playerID, 0, 50 + 50 * i)
                    # (Line 59) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 60) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 62) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", x, y);
                    trg.Shape_Square(playerID, 1, "40 + 1n Mojo", x, y)
                    # (Line 63) trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y);
                    trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y)
                    # (Line 65) KillUnitAt(All,  "60 + 1n Archon", "Anywhere", playerID);
                    # (Line 67) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                    DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                    # (Line 68) Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                    # (Line 69) }
                    DoActions(Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                    # (Line 71) if (i == 4)
                EUDEndIf()
                if EUDIf()(i == 4):
                    # (Line 72) {
                    # (Line 73) trg.Table_Sin(playerID, 0, 200);
                    trg.Table_Sin(playerID, 0, 200)
                    # (Line 74) trg.Table_Cos(playerID, 0, 200);
                    trg.Table_Cos(playerID, 0, 200)
                    # (Line 76) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 77) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 79) trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", x, y);
                    trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", x, y)
                    # (Line 80) trg.Shape_Square(playerID, 1, "60 + 1n Siege", x, y);
                    trg.Shape_Square(playerID, 1, "60 + 1n Siege", x, y)
                    # (Line 82) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID);
                    # (Line 83) }
                    DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID))
                    # (Line 84) }
                EUDEndIf()
                # (Line 85) if (v.P_LoopMain[playerID] >= 14 && v.P_LoopMain[playerID] < 20)   //1.12 - 1.60
            EUDEndIf()
            if EUDIf()(EUDSCAnd()(v.P_LoopMain[playerID] >= 14)(v.P_LoopMain[playerID] >= 20, neg=True)()):
                # (Line 86) {
                # (Line 87) var i = v.P_LoopMain[playerID] - 14;
                i = EUDVariable()
                i << (v.P_LoopMain[playerID] - 14)
                # (Line 89) if (i < 4)
                if EUDIf()(i >= 4, neg=True):
                    # (Line 90) {
                    # (Line 91) trg.Table_Sin(playerID, 45, 50 + 50 * i);
                    trg.Table_Sin(playerID, 45, 50 + 50 * i)
                    # (Line 92) trg.Table_Cos(playerID, 45, 50 + 50 * i);
                    trg.Table_Cos(playerID, 45, 50 + 50 * i)
                    # (Line 94) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 95) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 97) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", x, y);
                    trg.Shape_Square(playerID, 1, "40 + 1n Mojo", x, y)
                    # (Line 98) trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y);
                    trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y)
                    # (Line 100) KillUnitAt(All,  "60 + 1n Archon", "Anywhere", playerID);
                    # (Line 102) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                    DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                    # (Line 103) Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                    # (Line 104) }
                    DoActions(Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                    # (Line 106) if (i == 4)
                EUDEndIf()
                if EUDIf()(i == 4):
                    # (Line 107) {
                    # (Line 108) trg.Table_Sin(playerID, 45, 200);
                    trg.Table_Sin(playerID, 45, 200)
                    # (Line 109) trg.Table_Cos(playerID, 45, 200);
                    trg.Table_Cos(playerID, 45, 200)
                    # (Line 111) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 112) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 114) trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", x, y);
                    trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", x, y)
                    # (Line 115) trg.Shape_Square(playerID, 1, "60 + 1n Siege", x, y);
                    trg.Shape_Square(playerID, 1, "60 + 1n Siege", x, y)
                    # (Line 117) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID);
                    # (Line 118) }
                    DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID))
                    # (Line 119) }
                EUDEndIf()
                # (Line 121) if (v.P_LoopMain[playerID] >= 30 && v.P_LoopMain[playerID] < 64)    //1.92
            EUDEndIf()
            if EUDIf()(EUDSCAnd()(v.P_LoopMain[playerID] >= 30)(v.P_LoopMain[playerID] >= 64, neg=True)()):
                # (Line 122) {
                # (Line 123) var i = v.P_LoopMain[playerID] - 30;
                i = EUDVariable()
                i << (v.P_LoopMain[playerID] - 30)
                # (Line 125) if (i == 0)
                if EUDIf()(i == 0):
                    # (Line 126) {
                    # (Line 127) trg.Table_Sin(playerID, 22, 100);
                    trg.Table_Sin(playerID, 22, 100)
                    # (Line 128) trg.Table_Cos(playerID, 22, 100);
                    trg.Table_Cos(playerID, 22, 100)
                    # (Line 130) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 131) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 132) }
                    # (Line 133) if (i == 6)
                EUDEndIf()
                if EUDIf()(i == 6):
                    # (Line 134) {
                    # (Line 135) trg.Table_Sin(playerID, 67, 150);
                    trg.Table_Sin(playerID, 67, 150)
                    # (Line 136) trg.Table_Cos(playerID, 67, 150);
                    trg.Table_Cos(playerID, 67, 150)
                    # (Line 138) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 139) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 140) }
                    # (Line 141) if (i == 12)
                EUDEndIf()
                if EUDIf()(i == 12):
                    # (Line 142) {
                    # (Line 143) trg.Table_Sin(playerID, 67, 100);
                    trg.Table_Sin(playerID, 67, 100)
                    # (Line 144) trg.Table_Cos(playerID, 67, 100);
                    trg.Table_Cos(playerID, 67, 100)
                    # (Line 146) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 147) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 148) }
                    # (Line 149) if (i == 18)
                EUDEndIf()
                if EUDIf()(i == 18):
                    # (Line 150) {
                    # (Line 151) trg.Table_Sin(playerID, 22, 150);
                    trg.Table_Sin(playerID, 22, 150)
                    # (Line 152) trg.Table_Cos(playerID, 22, 150);
                    trg.Table_Cos(playerID, 22, 150)
                    # (Line 154) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 155) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 156) }
                    # (Line 157) if (i == 24)
                EUDEndIf()
                if EUDIf()(i == 24):
                    # (Line 158) {
                    # (Line 159) trg.Table_Sin(playerID, 22, 100);
                    trg.Table_Sin(playerID, 22, 100)
                    # (Line 160) trg.Table_Cos(playerID, 22, 100);
                    trg.Table_Cos(playerID, 22, 100)
                    # (Line 162) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 163) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 164) }
                    # (Line 165) if (i == 30)
                EUDEndIf()
                if EUDIf()(i == 30):
                    # (Line 166) {
                    # (Line 167) trg.Table_Sin(playerID, 67, 150);
                    trg.Table_Sin(playerID, 67, 150)
                    # (Line 168) trg.Table_Cos(playerID, 67, 150);
                    trg.Table_Cos(playerID, 67, 150)
                    # (Line 170) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 171) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 172) }
                    # (Line 174) if (i % 6 == 0)
                EUDEndIf()
                if EUDIf()(i % 6 == 0):
                    # (Line 175) {
                    # (Line 176) KillUnitAt(All, "Protoss Reaver", "Anywhere", playerID);
                    # (Line 178) trg.Shape_Square(playerID, 1, "Protoss Reaver", x, y);
                    DoActions(KillUnitAt(All, "Protoss Reaver", "Anywhere", playerID))
                    trg.Shape_Square(playerID, 1, "Protoss Reaver", x, y)
                    # (Line 179) trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", x, y);
                    trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", x, y)
                    # (Line 181) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                    # (Line 183) ModifyUnitHangarCount(1, All, "Protoss Reaver", CurrentPlayer, "Anywhere");
                    DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                    # (Line 185) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                    DoActions(ModifyUnitHangarCount(1, All, "Protoss Reaver", CurrentPlayer, "Anywhere"))
                    # (Line 186) MoveUnit(All, "Protoss Reaver", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                    # (Line 187) }
                    DoActions(MoveUnit(All, "Protoss Reaver", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                    # (Line 188) }
                EUDEndIf()
                # (Line 189) if (v.P_LoopMain[playerID] == 64)      //5.12
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 64):
                # (Line 190) {
                # (Line 191) KillUnitAt(All, "Protoss Reaver", "Anywhere", playerID);
                # (Line 192) KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "Protoss Reaver", "Anywhere", playerID))
                # (Line 193) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID))
                # (Line 194) KillUnitAt(All, "60 + 1n Dragoon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID))
                # (Line 195) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "60 + 1n Dragoon", "Anywhere", playerID))
                # (Line 196) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                # (Line 197) s.CharacterVoice(17);
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
                s.CharacterVoice(17)
                # (Line 198) }
                # (Line 200) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 202) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 204) if (v.P_LoopMain[playerID] == 72)
            if EUDIf()(v.P_LoopMain[playerID] == 72):
                # (Line 205) {
                # (Line 206) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 207) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 208) }
                # (Line 209) }
            EUDEndIf()
            # (Line 210) else if (v.P_CountMain[playerID] == 1)    //5.80
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 211) {
            # (Line 212) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 213) {
                # (Line 214) NxNSquareShapeAt(playerID, 1, "60 + 1n Danimoth", 2, 75, 100, 0);
                NxNSquareShapeAt(playerID, 1, "60 + 1n Danimoth", 2, 75, 100, 0)
                # (Line 215) NxNSquareShapeAt(playerID, 1, "60 + 1n High Templar", 2, 75, 100, 0);
                NxNSquareShapeAt(playerID, 1, "60 + 1n High Templar", 2, 75, 100, 0)
                # (Line 217) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
                # (Line 219) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
                # (Line 220) Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 221) }
                DoActions(Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 223) if (v.P_LoopMain[playerID] == 4)    //6.12
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 4):
                # (Line 224) {
                # (Line 225) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                # (Line 227) NxNSquareShapeAt(playerID, 1, "60 + 1n Danimoth", 2, 75, 100, 100);
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                NxNSquareShapeAt(playerID, 1, "60 + 1n Danimoth", 2, 75, 100, 100)
                # (Line 228) NxNSquareShapeAt(playerID, 1, "60 + 1n High Templar", 2, 75, 100, 100);
                NxNSquareShapeAt(playerID, 1, "60 + 1n High Templar", 2, 75, 100, 100)
                # (Line 230) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
                # (Line 232) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
                # (Line 233) Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 234) }
                DoActions(Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 236) if (v.P_LoopMain[playerID] == 8)    //6.44
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 8):
                # (Line 237) {
                # (Line 238) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                # (Line 239) }
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                # (Line 241) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 243) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 245) if (v.P_LoopMain[playerID] == 12)
            if EUDIf()(v.P_LoopMain[playerID] == 12):
                # (Line 246) {
                # (Line 247) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 248) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 249) }
                # (Line 250) }
            EUDEndIf()
            # (Line 251) else if (v.P_CountMain[playerID] == 2)    //6.80
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 252) {
            # (Line 253) if (v.P_LoopMain[playerID] < 4)
            if EUDIf()(v.P_LoopMain[playerID] >= 4, neg=True):
                # (Line 254) {
                # (Line 255) RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                # (Line 257) trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", 50 - 50 * v.P_LoopMain[playerID], 100);
                DoActions(RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", 50 - 50 * v.P_LoopMain[playerID], 100)
                # (Line 258) trg.Shape_Square(playerID, 1, "Protoss Dark Archon", 50 - 50 * v.P_LoopMain[playerID], 100);
                trg.Shape_Square(playerID, 1, "Protoss Dark Archon", 50 - 50 * v.P_LoopMain[playerID], 100)
                # (Line 260) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 262) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 263) Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 264) }
                DoActions(Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 265) if (v.P_LoopMain[playerID] == 4)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 4):
                # (Line 266) {
                # (Line 267) RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                # (Line 269) trg.Shape_NxNSquare(playerID, 1, "60 + 1n Danimoth", 5, 75);
                DoActions(RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                trg.Shape_NxNSquare(playerID, 1, "60 + 1n Danimoth", 5, 75)
                # (Line 270) trg.Shape_NxNSquare(playerID, 1, "60 + 1n High Templar", 5, 75);
                trg.Shape_NxNSquare(playerID, 1, "60 + 1n High Templar", 5, 75)
                # (Line 272) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
                # (Line 274) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
                # (Line 275) Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 276) }
                DoActions(Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 277) if (v.P_LoopMain[playerID] == 8)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 8):
                # (Line 278) {
                # (Line 279) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                # (Line 281) trg.Shape_NxNSquare(playerID, 1, "60 + 1n Danimoth", 3, 75);
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                trg.Shape_NxNSquare(playerID, 1, "60 + 1n Danimoth", 3, 75)
                # (Line 282) trg.Shape_NxNSquare(playerID, 1, "60 + 1n High Templar", 3, 75);
                trg.Shape_NxNSquare(playerID, 1, "60 + 1n High Templar", 3, 75)
                # (Line 284) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
                # (Line 286) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
                # (Line 287) Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 288) }
                DoActions(Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 289) if (v.P_LoopMain[playerID] == 12)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 12):
                # (Line 290) {
                # (Line 291) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                # (Line 292) }
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                # (Line 294) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 296) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 298) if (v.P_LoopMain[playerID] == 16)
            if EUDIf()(v.P_LoopMain[playerID] == 16):
                # (Line 299) {
                # (Line 300) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                # (Line 301) s.CharacterVoice(18);
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                s.CharacterVoice(18)
                # (Line 303) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 304) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 305) }
                # (Line 306) }
            EUDEndIf()
            # (Line 307) else if (v.P_CountMain[playerID] == 3) //8.10
        if EUDElseIf()(v.P_CountMain[playerID] == 3):
            # (Line 308) {
            # (Line 309) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 310) {
                # (Line 311) for (var k = 0; k < 8; k++)
                k = EUDVariable()
                k << (0)
                if EUDWhile()(k >= 8, neg=True):
                    def _t34():
                        k.__iadd__(1)
                    # (Line 312) {
                    # (Line 313) CreateUnit(4, "60 + 1n Siege", k + 33, playerID);
                    # (Line 314) SetInvincibility(Enable, "60 + 1n Siege", playerID, "[Skill]Unit_Wait_ALL");
                    DoActions(CreateUnit(4, "60 + 1n Siege", k + 33, playerID))
                    # (Line 315) }
                    DoActions(SetInvincibility(Enable, "60 + 1n Siege", playerID, "[Skill]Unit_Wait_ALL"))
                    # (Line 316) }
                    EUDSetContinuePoint()
                    _t34()
                EUDEndWhile()
                # (Line 318) var i = v.P_LoopMain[playerID] % 4;
            EUDEndIf()
            i = EUDVariable()
            i << (v.P_LoopMain[playerID] % 4)
            # (Line 320) if (v.P_LoopMain[playerID] % 8 == 0)
            if EUDIf()(v.P_LoopMain[playerID] % 8 == 0):
                # (Line 321) {
                # (Line 322) KillUnitAt(All, "Protoss Reaver", "Anywhere", playerID);
                # (Line 323) }
                DoActions(KillUnitAt(All, "Protoss Reaver", "Anywhere", playerID))
                # (Line 325) var r = ((v.P_LoopMain[playerID] / 4) % 2) * 45 + 22;
            EUDEndIf()
            r = EUDVariable()
            r << (((v.P_LoopMain[playerID] // 4) % 2) * 45 + 22)
            # (Line 327) if (i % 2 == 0)
            if EUDIf()(i % 2 == 0):
                # (Line 328) {
                # (Line 329) trg.Table_Sin(playerID, r, 50 + 50 * i);
                trg.Table_Sin(playerID, r, 50 + 50 * i)
                # (Line 330) trg.Table_Cos(playerID, r, 50 + 50 * i);
                trg.Table_Cos(playerID, r, 50 + 50 * i)
                # (Line 332) x = v.P_AngleCos[playerID];
                x << (v.P_AngleCos[playerID])
                # (Line 333) y = v.P_AngleSin[playerID];
                y << (v.P_AngleSin[playerID])
                # (Line 334) }
                # (Line 335) if (i % 2 == 1)
            EUDEndIf()
            if EUDIf()(i % 2 == 1):
                # (Line 336) {
                # (Line 337) trg.Table_Sin(playerID, r + 22, 50 + 50 * i);
                trg.Table_Sin(playerID, r + 22, 50 + 50 * i)
                # (Line 338) trg.Table_Cos(playerID, r + 22, 50 + 50 * i);
                trg.Table_Cos(playerID, r + 22, 50 + 50 * i)
                # (Line 340) x = v.P_AngleCos[playerID];
                x << (v.P_AngleCos[playerID])
                # (Line 341) y = v.P_AngleSin[playerID];
                y << (v.P_AngleSin[playerID])
                # (Line 342) }
                # (Line 344) RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
            EUDEndIf()
            # (Line 346) trg.Shape_Square(playerID, 1, "Protoss Reaver", x, y);
            DoActions(RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
            trg.Shape_Square(playerID, 1, "Protoss Reaver", x, y)
            # (Line 347) trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", x, y);
            trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", x, y)
            # (Line 348) trg.Shape_Square(playerID, 1, "Protoss Dark Archon", x, y);
            trg.Shape_Square(playerID, 1, "Protoss Dark Archon", x, y)
            # (Line 350) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
            # (Line 352) ModifyUnitHangarCount(1, All, "Protoss Reaver", CurrentPlayer, "Anywhere");
            DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
            # (Line 354) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
            DoActions(ModifyUnitHangarCount(1, All, "Protoss Reaver", CurrentPlayer, "Anywhere"))
            # (Line 355) MoveUnit(All, "Protoss Reaver", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
            DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
            # (Line 357) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
            DoActions(MoveUnit(All, "Protoss Reaver", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
            # (Line 358) Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
            # (Line 360) trg.Main_Wait(80);
            DoActions(Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
            trg.Main_Wait(80)
            # (Line 362) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 364) if (v.P_LoopMain[playerID] == 20)
            if EUDIf()(v.P_LoopMain[playerID] == 20):
                # (Line 365) {
                # (Line 366) KillUnitAt(All, "Protoss Reaver", "Anywhere", playerID);
                # (Line 367) RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "Protoss Reaver", "Anywhere", playerID))
                # (Line 369) s.CharacterVoice(19);
                DoActions(RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                s.CharacterVoice(19)
                # (Line 371) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 372) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 373) }
                # (Line 374) }
            EUDEndIf()
            # (Line 375) else if (v.P_CountMain[playerID] == 4) //9.90
        if EUDElseIf()(v.P_CountMain[playerID] == 4):
            # (Line 376) {
            # (Line 377) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 378) {
                # (Line 379) epic.Shape_NxNSquare(playerID, 1, "50 + 1n Battlecruiser", 3, 75, 1);
                epic.Shape_NxNSquare(playerID, 1, "50 + 1n Battlecruiser", 3, 75, 1)
                # (Line 381) Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, "Anywhere");
                # (Line 382) }
                DoActions(Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, "Anywhere"))
                # (Line 383) if (v.P_LoopMain[playerID] == 4)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 4):
                # (Line 384) {
                # (Line 385) RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 387) trg.Shape_NxNSquare(playerID, 1, "Kakaru (Twilight)", 3, 75);
                DoActions(RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                trg.Shape_NxNSquare(playerID, 1, "Kakaru (Twilight)", 3, 75)
                # (Line 388) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                # (Line 389) }
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                # (Line 390) if (v.P_LoopMain[playerID] == 6)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 6):
                # (Line 391) {
                # (Line 392) trg.Shape_NxNSquare(playerID, 1, "50 + 1n Battlecruiser", 3, 75);
                trg.Shape_NxNSquare(playerID, 1, "50 + 1n Battlecruiser", 3, 75)
                # (Line 394) Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, "Anywhere");
                # (Line 395) }
                DoActions(Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, "Anywhere"))
                # (Line 397) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 399) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 401) if (v.P_LoopMain[playerID] == 10)
            if EUDIf()(v.P_LoopMain[playerID] == 10):
                # (Line 402) {
                # (Line 403) RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 405) trg.Shape_NxNSquare(playerID, 1, "Kakaru (Twilight)", 3, 75);
                DoActions(RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                trg.Shape_NxNSquare(playerID, 1, "Kakaru (Twilight)", 3, 75)
                # (Line 406) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                # (Line 408) s.CharacterVoice(20);
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                s.CharacterVoice(20)
                # (Line 410) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 411) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 412) }
                # (Line 413) }
            EUDEndIf()
            # (Line 414) else if (v.P_CountMain[playerID] == 5) //10.70
        if EUDElseIf()(v.P_CountMain[playerID] == 5):
            # (Line 415) {
            # (Line 416) if (v.P_LoopMain[playerID] < 8)
            if EUDIf()(v.P_LoopMain[playerID] >= 8, neg=True):
                # (Line 417) {
                # (Line 418) if (v.P_LoopMain[playerID] % 2 == 0)
                if EUDIf()(v.P_LoopMain[playerID] % 2 == 0):
                    # (Line 419) {
                    # (Line 420) trg.Table_Sin(playerID, v.P_LoopMain[playerID] * 45, 150);
                    trg.Table_Sin(playerID, v.P_LoopMain[playerID] * 45, 150)
                    # (Line 421) trg.Table_Cos(playerID, v.P_LoopMain[playerID] * 45, 150);
                    trg.Table_Cos(playerID, v.P_LoopMain[playerID] * 45, 150)
                    # (Line 423) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 424) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 426) NxNSquareShapeAtDouble(playerID, 1, "40 + 1n Gantrithor", 3, 50, x, y);
                    NxNSquareShapeAtDouble(playerID, 1, "40 + 1n Gantrithor", 3, 50, x, y)
                    # (Line 427) NxNSquareShapeAtDouble(playerID, 1, "50 + 1n Tank", 2, 75, x, y);
                    NxNSquareShapeAtDouble(playerID, 1, "50 + 1n Tank", 2, 75, x, y)
                    # (Line 429) for (var i = 0; i < 8; i++)
                    i = EUDVariable()
                    i << (0)
                    if EUDWhile()(i >= 8, neg=True):
                        def _t48():
                            i.__iadd__(1)
                        # (Line 430) {
                        # (Line 431) trg.MoveLoc("50 + 1n Tank", playerID, 0, 0);
                        trg.MoveLoc("50 + 1n Tank", playerID, 0, 0)
                        # (Line 432) RemoveUnitAt(1, "50 + 1n Tank", "Anywhere", playerID);
                        # (Line 433) MoveUnit(1, "60 + 1n Siege", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                        DoActions(RemoveUnitAt(1, "50 + 1n Tank", "Anywhere", playerID))
                        # (Line 434) }
                        DoActions(MoveUnit(1, "60 + 1n Siege", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                        # (Line 435) }
                        EUDSetContinuePoint()
                        _t48()
                    EUDEndWhile()
                    # (Line 437) if (v.P_LoopMain[playerID] % 2 == 1)
                EUDEndIf()
                if EUDIf()(v.P_LoopMain[playerID] % 2 == 1):
                    # (Line 438) {
                    # (Line 439) trg.Table_Sin(playerID, v.P_LoopMain[playerID] * 45, 150);
                    trg.Table_Sin(playerID, v.P_LoopMain[playerID] * 45, 150)
                    # (Line 440) trg.Table_Cos(playerID, v.P_LoopMain[playerID] * 45, 150);
                    trg.Table_Cos(playerID, v.P_LoopMain[playerID] * 45, 150)
                    # (Line 442) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 443) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 445) NxNSquareShapeAtDouble(playerID, 1, "50 + 1n Battlecruiser", 3, 50, x, y);
                    NxNSquareShapeAtDouble(playerID, 1, "50 + 1n Battlecruiser", 3, 50, x, y)
                    # (Line 446) NxNSquareShapeAtDouble(playerID, 1, "Protoss Reaver", 2, 75, x, y);
                    NxNSquareShapeAtDouble(playerID, 1, "Protoss Reaver", 2, 75, x, y)
                    # (Line 448) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID);
                    # (Line 449) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                    DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID))
                    # (Line 451) ModifyUnitHangarCount(1, All, "Protoss Reaver", CurrentPlayer, "Anywhere");
                    DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                    # (Line 453) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                    DoActions(ModifyUnitHangarCount(1, All, "Protoss Reaver", CurrentPlayer, "Anywhere"))
                    # (Line 454) MoveUnit(All, "Protoss Reaver", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                    # (Line 455) }
                    DoActions(MoveUnit(All, "Protoss Reaver", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                    # (Line 456) }
                EUDEndIf()
                # (Line 458) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 460) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 462) if (v.P_LoopMain[playerID] == 18)
            if EUDIf()(v.P_LoopMain[playerID] == 18):
                # (Line 463) {
                # (Line 464) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 465) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 466) }
                # (Line 467) }
            EUDEndIf()
            # (Line 468) else if (v.P_CountMain[playerID] == 6)    //9.90
        if EUDElseIf()(v.P_CountMain[playerID] == 6):
            # (Line 469) {
            # (Line 470) KillUnitAt(All, "Protoss Reaver", "Anywhere", playerID);
            # (Line 471) KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "Protoss Reaver", "Anywhere", playerID))
            # (Line 473) trg.SkillEnd();
            DoActions(KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID))
            trg.SkillEnd()
            # (Line 474) }
            # (Line 475) }
        EUDEndIf()
        # (Line 476) }
    EUDEndIf()
    # (Line 478) function NxNSquareShapeAt(playerID : TrgPlayer, count, Unit : TrgUnit, n, interval, x, y)

# (Line 479) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None])
def NxNSquareShapeAt(playerID, count, Unit, n, interval, x_1, y_1):
    # (Line 480) adv.Shape_NxNSquareAt2(playerID, count, Unit, n, interval, x, y);
    adv.Shape_NxNSquareAt2(playerID, count, Unit, n, interval, x_1, y_1)
    # (Line 481) adv.Shape_NxNSquareAt2(playerID, count, Unit, n, interval, -x, -y);
    adv.Shape_NxNSquareAt2(playerID, count, Unit, n, interval, -x_1, -y_1)
    # (Line 482) adv.Shape_NxNSquareAt2(playerID, count, Unit, n, interval, -y, x);
    adv.Shape_NxNSquareAt2(playerID, count, Unit, n, interval, -y_1, x_1)
    # (Line 483) adv.Shape_NxNSquareAt2(playerID, count, Unit, n, interval, y, -x);
    adv.Shape_NxNSquareAt2(playerID, count, Unit, n, interval, y_1, -x_1)
    # (Line 484) }
    # (Line 486) function NxNSquareShapeAtDouble(playerID : TrgPlayer, count, Unit : TrgUnit, n, interval, x, y)

# (Line 487) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None])
def NxNSquareShapeAtDouble(playerID, count, Unit, n, interval, x_1, y_1):
    # (Line 488) adv.Shape_NxNSquareAt2(playerID, count, Unit, n, interval, x, y);
    adv.Shape_NxNSquareAt2(playerID, count, Unit, n, interval, x_1, y_1)
    # (Line 489) adv.Shape_NxNSquareAt2(playerID, count, Unit, n, interval, -x, -y);
    adv.Shape_NxNSquareAt2(playerID, count, Unit, n, interval, -x_1, -y_1)
    # (Line 490) }
