## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import variable as v;
import variable as v
# (Line 2) import func.trig as trg;
from func import trig as trg
# (Line 3) import func.trigadv as adv;
from func import trigadv as adv
# (Line 4) import func.trigepic as epic;
from func import trigepic as epic
# (Line 5) import func.sound as s;
from func import sound as s
# (Line 7) function NxNSquareShapeAt(playerID : TrgPlayer, count, Unit : TrgUnit, n, interval, x, y);
# (Line 8) function NxNSquareShapeAtDouble(playerID : TrgPlayer, count, Unit : TrgUnit, n, interval, x, y);
# (Line 10) var x = 0;
x = EUDCreateVariables(1)
_IGVA([x], lambda: [0])
# (Line 11) var y = 0;
y = EUDCreateVariables(1)
_IGVA([y], lambda: [0])
# (Line 13) function main(playerID)
# (Line 14) {
@EUDFunc
def f_main(playerID):
    # (Line 15) trg.Debuff_BanReturn();
    trg.Debuff_BanReturn()
    # (Line 16) trg.Debuff_Stop();
    trg.Debuff_Stop()
    # (Line 18) MoveUnit(All, "40 + 1n Gantrithor", playerID, "Anywhere", "[Skill]HoldPosition");
    # (Line 19) MoveUnit(All, "50 + 1n Tank", playerID, "Anywhere", "[Skill]HoldPosition");
    DoActions(MoveUnit(All, "40 + 1n Gantrithor", playerID, "Anywhere", "[Skill]HoldPosition"))
    # (Line 20) MoveUnit(All, "60 + 1n Dragoon", playerID, "Anywhere", "[Skill]HoldPosition");
    DoActions(MoveUnit(All, "50 + 1n Tank", playerID, "Anywhere", "[Skill]HoldPosition"))
    # (Line 22) if (v.P_WaitMain[playerID] == 0)
    DoActions(MoveUnit(All, "60 + 1n Dragoon", playerID, "Anywhere", "[Skill]HoldPosition"))
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 23) {
        # (Line 24) if (v.P_CountMain[playerID] == 0)      //0.00
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 25) {
            # (Line 26) RemoveUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
            # (Line 28) if (v.P_LoopMain[playerID] % 2 == 0 && v.P_LoopMain[playerID] < 64)
            DoActions(RemoveUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
            if EUDIf()(EUDSCAnd()(v.P_LoopMain[playerID] % 2 == 0)(v.P_LoopMain[playerID] >= 64, neg=True)()):
                # (Line 29) {
                # (Line 30) RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                # (Line 32) trg.Table_Sin(playerID, 45 * (v.P_LoopMain[playerID] / 2), 64);
                DoActions(RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                trg.Table_Sin(playerID, 45 * (v.P_LoopMain[playerID] // 2), 64)
                # (Line 33) trg.Table_Cos(playerID, 45 * (v.P_LoopMain[playerID] / 2), 64);
                trg.Table_Cos(playerID, 45 * (v.P_LoopMain[playerID] // 2), 64)
                # (Line 35) x = v.P_AngleCos[playerID];
                x << (v.P_AngleCos[playerID])
                # (Line 36) y = v.P_AngleSin[playerID];
                y << (v.P_AngleSin[playerID])
                # (Line 38) trg.Shape_Double(playerID, 1, "60 + 1n Danimoth", x, y);
                trg.Shape_Double(playerID, 1, "60 + 1n Danimoth", x, y)
                # (Line 39) trg.Shape_Double(playerID, 1, "Protoss Dark Archon", x, y);
                trg.Shape_Double(playerID, 1, "Protoss Dark Archon", x, y)
                # (Line 40) trg.Shape_Dot(playerID, 1, "40 + 1n Mojo", 0, 0);
                trg.Shape_Dot(playerID, 1, "40 + 1n Mojo", 0, 0)
                # (Line 42) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 44) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 45) Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 47) }
                DoActions(Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 49) if (v.P_LoopMain[playerID] >= 8 && v.P_LoopMain[playerID] < 14)    //0.64 - 1.12
            EUDEndIf()
            if EUDIf()(EUDSCAnd()(v.P_LoopMain[playerID] >= 8)(v.P_LoopMain[playerID] >= 14, neg=True)()):
                # (Line 50) {
                # (Line 51) var i = v.P_LoopMain[playerID] - 8;
                i = EUDVariable()
                i << (v.P_LoopMain[playerID] - 8)
                # (Line 53) if (i < 4)
                if EUDIf()(i >= 4, neg=True):
                    # (Line 54) {
                    # (Line 55) trg.Table_Sin(playerID, 0, 50 + 50 * i);
                    trg.Table_Sin(playerID, 0, 50 + 50 * i)
                    # (Line 56) trg.Table_Cos(playerID, 0, 50 + 50 * i);
                    trg.Table_Cos(playerID, 0, 50 + 50 * i)
                    # (Line 58) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 59) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 61) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", x, y);
                    trg.Shape_Square(playerID, 1, "40 + 1n Mojo", x, y)
                    # (Line 62) trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y);
                    trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y)
                    # (Line 64) KillUnitAt(All,  "60 + 1n Archon", "Anywhere", playerID);
                    # (Line 66) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                    DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                    # (Line 68) }
                    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                    # (Line 70) if (i == 4)
                EUDEndIf()
                if EUDIf()(i == 4):
                    # (Line 71) {
                    # (Line 72) trg.Table_Sin(playerID, 0, 200);
                    trg.Table_Sin(playerID, 0, 200)
                    # (Line 73) trg.Table_Cos(playerID, 0, 200);
                    trg.Table_Cos(playerID, 0, 200)
                    # (Line 75) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 76) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 78) trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", x, y);
                    trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", x, y)
                    # (Line 79) trg.Shape_Square(playerID, 1, "60 + 1n Siege", x, y);
                    trg.Shape_Square(playerID, 1, "60 + 1n Siege", x, y)
                    # (Line 81) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID);
                    # (Line 82) }
                    DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID))
                    # (Line 83) }
                EUDEndIf()
                # (Line 84) if (v.P_LoopMain[playerID] >= 14 && v.P_LoopMain[playerID] < 20)   //1.12 - 1.60
            EUDEndIf()
            if EUDIf()(EUDSCAnd()(v.P_LoopMain[playerID] >= 14)(v.P_LoopMain[playerID] >= 20, neg=True)()):
                # (Line 85) {
                # (Line 86) var i = v.P_LoopMain[playerID] - 14;
                i = EUDVariable()
                i << (v.P_LoopMain[playerID] - 14)
                # (Line 88) if (i < 4)
                if EUDIf()(i >= 4, neg=True):
                    # (Line 89) {
                    # (Line 90) trg.Table_Sin(playerID, 45, 50 + 50 * i);
                    trg.Table_Sin(playerID, 45, 50 + 50 * i)
                    # (Line 91) trg.Table_Cos(playerID, 45, 50 + 50 * i);
                    trg.Table_Cos(playerID, 45, 50 + 50 * i)
                    # (Line 93) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 94) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 96) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", x, y);
                    trg.Shape_Square(playerID, 1, "40 + 1n Mojo", x, y)
                    # (Line 97) trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y);
                    trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y)
                    # (Line 99) KillUnitAt(All,  "60 + 1n Archon", "Anywhere", playerID);
                    # (Line 101) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                    DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                    # (Line 103) }
                    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                    # (Line 105) if (i == 4)
                EUDEndIf()
                if EUDIf()(i == 4):
                    # (Line 106) {
                    # (Line 107) trg.Table_Sin(playerID, 45, 200);
                    trg.Table_Sin(playerID, 45, 200)
                    # (Line 108) trg.Table_Cos(playerID, 45, 200);
                    trg.Table_Cos(playerID, 45, 200)
                    # (Line 110) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 111) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 113) trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", x, y);
                    trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", x, y)
                    # (Line 114) trg.Shape_Square(playerID, 1, "60 + 1n Siege", x, y);
                    trg.Shape_Square(playerID, 1, "60 + 1n Siege", x, y)
                    # (Line 116) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID);
                    # (Line 117) }
                    DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID))
                    # (Line 118) }
                EUDEndIf()
                # (Line 120) if (v.P_LoopMain[playerID] >= 30 && v.P_LoopMain[playerID] < 64)    //1.92
            EUDEndIf()
            if EUDIf()(EUDSCAnd()(v.P_LoopMain[playerID] >= 30)(v.P_LoopMain[playerID] >= 64, neg=True)()):
                # (Line 121) {
                # (Line 122) var i = v.P_LoopMain[playerID] - 30;
                i = EUDVariable()
                i << (v.P_LoopMain[playerID] - 30)
                # (Line 124) if (i == 0)
                if EUDIf()(i == 0):
                    # (Line 125) {
                    # (Line 126) trg.Table_Sin(playerID, 22, 100);
                    trg.Table_Sin(playerID, 22, 100)
                    # (Line 127) trg.Table_Cos(playerID, 22, 100);
                    trg.Table_Cos(playerID, 22, 100)
                    # (Line 129) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 130) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 131) }
                    # (Line 132) if (i == 6)
                EUDEndIf()
                if EUDIf()(i == 6):
                    # (Line 133) {
                    # (Line 134) trg.Table_Sin(playerID, 67, 150);
                    trg.Table_Sin(playerID, 67, 150)
                    # (Line 135) trg.Table_Cos(playerID, 67, 150);
                    trg.Table_Cos(playerID, 67, 150)
                    # (Line 137) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 138) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 139) }
                    # (Line 140) if (i == 12)
                EUDEndIf()
                if EUDIf()(i == 12):
                    # (Line 141) {
                    # (Line 142) trg.Table_Sin(playerID, 67, 100);
                    trg.Table_Sin(playerID, 67, 100)
                    # (Line 143) trg.Table_Cos(playerID, 67, 100);
                    trg.Table_Cos(playerID, 67, 100)
                    # (Line 145) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 146) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 147) }
                    # (Line 148) if (i == 18)
                EUDEndIf()
                if EUDIf()(i == 18):
                    # (Line 149) {
                    # (Line 150) trg.Table_Sin(playerID, 22, 150);
                    trg.Table_Sin(playerID, 22, 150)
                    # (Line 151) trg.Table_Cos(playerID, 22, 150);
                    trg.Table_Cos(playerID, 22, 150)
                    # (Line 153) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 154) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 155) }
                    # (Line 156) if (i == 24)
                EUDEndIf()
                if EUDIf()(i == 24):
                    # (Line 157) {
                    # (Line 158) trg.Table_Sin(playerID, 22, 100);
                    trg.Table_Sin(playerID, 22, 100)
                    # (Line 159) trg.Table_Cos(playerID, 22, 100);
                    trg.Table_Cos(playerID, 22, 100)
                    # (Line 161) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 162) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 163) }
                    # (Line 164) if (i == 30)
                EUDEndIf()
                if EUDIf()(i == 30):
                    # (Line 165) {
                    # (Line 166) trg.Table_Sin(playerID, 67, 150);
                    trg.Table_Sin(playerID, 67, 150)
                    # (Line 167) trg.Table_Cos(playerID, 67, 150);
                    trg.Table_Cos(playerID, 67, 150)
                    # (Line 169) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 170) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 171) }
                    # (Line 173) if (i % 6 == 0)
                EUDEndIf()
                if EUDIf()(i % 6 == 0):
                    # (Line 174) {
                    # (Line 175) KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID);
                    # (Line 177) trg.Shape_Square(playerID, 1, "50 + 1n Tank", x, y);
                    DoActions(KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID))
                    trg.Shape_Square(playerID, 1, "50 + 1n Tank", x, y)
                    # (Line 178) trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", x, y);
                    trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", x, y)
                    # (Line 180) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                    # (Line 182) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                    DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                    # (Line 183) MoveUnit(All, "50 + 1n Tank", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                    # (Line 184) Order("50 + 1n Tank", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                    DoActions(MoveUnit(All, "50 + 1n Tank", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                    # (Line 186) }
                    DoActions(Order("50 + 1n Tank", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                    # (Line 187) }
                EUDEndIf()
                # (Line 188) if (v.P_LoopMain[playerID] == 64)      //5.12
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 64):
                # (Line 189) {
                # (Line 190) KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID);
                # (Line 191) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID))
                # (Line 192) KillUnitAt(All, "60 + 1n Dragoon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID))
                # (Line 193) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "60 + 1n Dragoon", "Anywhere", playerID))
                # (Line 194) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                # (Line 195) s.CharacterVoice(17);
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
                s.CharacterVoice(17)
                # (Line 196) }
                # (Line 198) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 200) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 202) if (v.P_LoopMain[playerID] == 72)
            if EUDIf()(v.P_LoopMain[playerID] == 72):
                # (Line 203) {
                # (Line 204) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 205) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 206) }
                # (Line 207) }
            EUDEndIf()
            # (Line 208) else if (v.P_CountMain[playerID] == 1)    //5.80
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 209) {
            # (Line 210) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 211) {
                # (Line 212) NxNSquareShapeAt(playerID, 1, "60 + 1n Danimoth", 2, 75, 100, 0);
                NxNSquareShapeAt(playerID, 1, "60 + 1n Danimoth", 2, 75, 100, 0)
                # (Line 213) NxNSquareShapeAt(playerID, 1, "60 + 1n High Templar", 2, 75, 100, 0);
                NxNSquareShapeAt(playerID, 1, "60 + 1n High Templar", 2, 75, 100, 0)
                # (Line 215) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
                # (Line 217) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
                # (Line 218) Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 219) }
                DoActions(Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 221) if (v.P_LoopMain[playerID] == 4)    //6.12
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 4):
                # (Line 222) {
                # (Line 223) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                # (Line 225) NxNSquareShapeAt(playerID, 1, "60 + 1n Danimoth", 2, 75, 100, 100);
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                NxNSquareShapeAt(playerID, 1, "60 + 1n Danimoth", 2, 75, 100, 100)
                # (Line 226) NxNSquareShapeAt(playerID, 1, "60 + 1n High Templar", 2, 75, 100, 100);
                NxNSquareShapeAt(playerID, 1, "60 + 1n High Templar", 2, 75, 100, 100)
                # (Line 228) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
                # (Line 230) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
                # (Line 231) Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 232) }
                DoActions(Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 234) if (v.P_LoopMain[playerID] == 8)    //6.44
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 8):
                # (Line 235) {
                # (Line 236) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                # (Line 237) }
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                # (Line 239) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 241) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 243) if (v.P_LoopMain[playerID] == 12)
            if EUDIf()(v.P_LoopMain[playerID] == 12):
                # (Line 244) {
                # (Line 245) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 246) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 247) }
                # (Line 248) }
            EUDEndIf()
            # (Line 249) else if (v.P_CountMain[playerID] == 2)    //6.80
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 250) {
            # (Line 251) if (v.P_LoopMain[playerID] < 4)
            if EUDIf()(v.P_LoopMain[playerID] >= 4, neg=True):
                # (Line 252) {
                # (Line 253) RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                # (Line 255) trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", 50 - 50 * v.P_LoopMain[playerID], 100);
                DoActions(RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", 50 - 50 * v.P_LoopMain[playerID], 100)
                # (Line 256) trg.Shape_Square(playerID, 1, "Protoss Dark Archon", 50 - 50 * v.P_LoopMain[playerID], 100);
                trg.Shape_Square(playerID, 1, "Protoss Dark Archon", 50 - 50 * v.P_LoopMain[playerID], 100)
                # (Line 258) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 260) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 261) Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 262) }
                DoActions(Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 263) if (v.P_LoopMain[playerID] == 4)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 4):
                # (Line 264) {
                # (Line 265) RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                # (Line 267) trg.Shape_NxNSquare(playerID, 1, "60 + 1n Danimoth", 5, 75);
                DoActions(RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                trg.Shape_NxNSquare(playerID, 1, "60 + 1n Danimoth", 5, 75)
                # (Line 268) trg.Shape_NxNSquare(playerID, 1, "60 + 1n High Templar", 5, 75);
                trg.Shape_NxNSquare(playerID, 1, "60 + 1n High Templar", 5, 75)
                # (Line 270) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
                # (Line 272) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
                # (Line 273) Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 274) }
                DoActions(Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 275) if (v.P_LoopMain[playerID] == 8)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 8):
                # (Line 276) {
                # (Line 277) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                # (Line 279) trg.Shape_NxNSquare(playerID, 1, "60 + 1n Danimoth", 3, 75);
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                trg.Shape_NxNSquare(playerID, 1, "60 + 1n Danimoth", 3, 75)
                # (Line 280) trg.Shape_NxNSquare(playerID, 1, "60 + 1n High Templar", 3, 75);
                trg.Shape_NxNSquare(playerID, 1, "60 + 1n High Templar", 3, 75)
                # (Line 282) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
                # (Line 284) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
                # (Line 285) Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 286) }
                DoActions(Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 287) if (v.P_LoopMain[playerID] == 12)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 12):
                # (Line 288) {
                # (Line 289) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                # (Line 290) }
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                # (Line 292) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 294) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 296) if (v.P_LoopMain[playerID] == 16)
            if EUDIf()(v.P_LoopMain[playerID] == 16):
                # (Line 297) {
                # (Line 298) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                # (Line 299) s.CharacterVoice(18);
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                s.CharacterVoice(18)
                # (Line 301) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 302) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 303) }
                # (Line 304) }
            EUDEndIf()
            # (Line 305) else if (v.P_CountMain[playerID] == 3) //8.10
        if EUDElseIf()(v.P_CountMain[playerID] == 3):
            # (Line 306) {
            # (Line 307) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 308) {
                # (Line 309) for (var k = 0; k < 8; k++)
                k = EUDVariable()
                k << (0)
                if EUDWhile()(k >= 8, neg=True):
                    def _t34():
                        k.__iadd__(1)
                    # (Line 310) {
                    # (Line 311) CreateUnit(4, "60 + 1n Siege", k + 33, playerID);
                    # (Line 312) SetInvincibility(Enable, "60 + 1n Siege", playerID, "[Skill]Unit_Wait_ALL");
                    DoActions(CreateUnit(4, "60 + 1n Siege", k + 33, playerID))
                    # (Line 313) }
                    DoActions(SetInvincibility(Enable, "60 + 1n Siege", playerID, "[Skill]Unit_Wait_ALL"))
                    # (Line 314) }
                    EUDSetContinuePoint()
                    _t34()
                EUDEndWhile()
                # (Line 316) var i = v.P_LoopMain[playerID] % 4;
            EUDEndIf()
            i = EUDVariable()
            i << (v.P_LoopMain[playerID] % 4)
            # (Line 318) if (v.P_LoopMain[playerID] % 8 == 0)
            if EUDIf()(v.P_LoopMain[playerID] % 8 == 0):
                # (Line 319) {
                # (Line 320) KillUnitAt(All, "Protoss Reaver", "Anywhere", playerID);
                # (Line 321) }
                DoActions(KillUnitAt(All, "Protoss Reaver", "Anywhere", playerID))
                # (Line 323) var r = ((v.P_LoopMain[playerID] / 4) % 2) * 45 + 22;
            EUDEndIf()
            r = EUDVariable()
            r << (((v.P_LoopMain[playerID] // 4) % 2) * 45 + 22)
            # (Line 325) if (i % 2 == 0)
            if EUDIf()(i % 2 == 0):
                # (Line 326) {
                # (Line 327) trg.Table_Sin(playerID, r, 50 + 50 * i);
                trg.Table_Sin(playerID, r, 50 + 50 * i)
                # (Line 328) trg.Table_Cos(playerID, r, 50 + 50 * i);
                trg.Table_Cos(playerID, r, 50 + 50 * i)
                # (Line 330) x = v.P_AngleCos[playerID];
                x << (v.P_AngleCos[playerID])
                # (Line 331) y = v.P_AngleSin[playerID];
                y << (v.P_AngleSin[playerID])
                # (Line 332) }
                # (Line 333) if (i % 2 == 1)
            EUDEndIf()
            if EUDIf()(i % 2 == 1):
                # (Line 334) {
                # (Line 335) trg.Table_Sin(playerID, r + 22, 50 + 50 * i);
                trg.Table_Sin(playerID, r + 22, 50 + 50 * i)
                # (Line 336) trg.Table_Cos(playerID, r + 22, 50 + 50 * i);
                trg.Table_Cos(playerID, r + 22, 50 + 50 * i)
                # (Line 338) x = v.P_AngleCos[playerID];
                x << (v.P_AngleCos[playerID])
                # (Line 339) y = v.P_AngleSin[playerID];
                y << (v.P_AngleSin[playerID])
                # (Line 340) }
                # (Line 342) RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
            EUDEndIf()
            # (Line 344) trg.Shape_Square(playerID, 1, "Protoss Reaver", x, y);
            DoActions(RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
            trg.Shape_Square(playerID, 1, "Protoss Reaver", x, y)
            # (Line 345) trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", x, y);
            trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", x, y)
            # (Line 346) trg.Shape_Square(playerID, 1, "Protoss Dark Archon", x, y);
            trg.Shape_Square(playerID, 1, "Protoss Dark Archon", x, y)
            # (Line 348) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
            # (Line 350) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
            DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
            # (Line 351) MoveUnit(All, "Protoss Reaver", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
            DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
            # (Line 353) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
            DoActions(MoveUnit(All, "Protoss Reaver", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
            # (Line 354) Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
            # (Line 356) trg.Main_Wait(80);
            DoActions(Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
            trg.Main_Wait(80)
            # (Line 358) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 360) if (v.P_LoopMain[playerID] == 20)
            if EUDIf()(v.P_LoopMain[playerID] == 20):
                # (Line 361) {
                # (Line 362) KillUnitAt(All, "Protoss Reaver", "Anywhere", playerID);
                # (Line 363) RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "Protoss Reaver", "Anywhere", playerID))
                # (Line 365) s.CharacterVoice(19);
                DoActions(RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                s.CharacterVoice(19)
                # (Line 367) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 368) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 369) }
                # (Line 370) }
            EUDEndIf()
            # (Line 371) else if (v.P_CountMain[playerID] == 4) //9.90
        if EUDElseIf()(v.P_CountMain[playerID] == 4):
            # (Line 372) {
            # (Line 373) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 374) {
                # (Line 375) epic.Shape_NxNSquare(playerID, 1, "50 + 1n Battlecruiser", 3, 75, 1);
                epic.Shape_NxNSquare(playerID, 1, "50 + 1n Battlecruiser", 3, 75, 1)
                # (Line 377) Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, "Anywhere");
                # (Line 378) }
                DoActions(Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, "Anywhere"))
                # (Line 379) if (v.P_LoopMain[playerID] == 4)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 4):
                # (Line 380) {
                # (Line 381) RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 383) trg.Shape_NxNSquare(playerID, 1, "Kakaru (Twilight)", 3, 75);
                DoActions(RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                trg.Shape_NxNSquare(playerID, 1, "Kakaru (Twilight)", 3, 75)
                # (Line 384) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                # (Line 385) }
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                # (Line 386) if (v.P_LoopMain[playerID] == 6)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 6):
                # (Line 387) {
                # (Line 388) epic.Shape_NxNSquare(playerID, 1, "50 + 1n Battlecruiser", 3, 75, 1);
                epic.Shape_NxNSquare(playerID, 1, "50 + 1n Battlecruiser", 3, 75, 1)
                # (Line 390) Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, "Anywhere");
                # (Line 391) }
                DoActions(Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, "Anywhere"))
                # (Line 393) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 395) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 397) if (v.P_LoopMain[playerID] == 10)
            if EUDIf()(v.P_LoopMain[playerID] == 10):
                # (Line 398) {
                # (Line 399) RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 401) trg.Shape_NxNSquare(playerID, 1, "Kakaru (Twilight)", 3, 75);
                DoActions(RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                trg.Shape_NxNSquare(playerID, 1, "Kakaru (Twilight)", 3, 75)
                # (Line 402) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                # (Line 404) s.CharacterVoice(20);
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                s.CharacterVoice(20)
                # (Line 406) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 407) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 408) }
                # (Line 409) }
            EUDEndIf()
            # (Line 410) else if (v.P_CountMain[playerID] == 5) //10.70
        if EUDElseIf()(v.P_CountMain[playerID] == 5):
            # (Line 411) {
            # (Line 412) if (v.P_LoopMain[playerID] < 8)
            if EUDIf()(v.P_LoopMain[playerID] >= 8, neg=True):
                # (Line 413) {
                # (Line 414) if (v.P_LoopMain[playerID] % 2 == 0)
                if EUDIf()(v.P_LoopMain[playerID] % 2 == 0):
                    # (Line 415) {
                    # (Line 416) trg.Table_Sin(playerID, (dwrand() % 36 * 10), 100 + dwrand() % 100);
                    trg.Table_Sin(playerID, (f_dwrand() % 36 * 10), 100 + f_dwrand() % 100)
                    # (Line 417) trg.Table_Cos(playerID, (dwrand() % 36 * 10), 100 + dwrand() % 100);
                    trg.Table_Cos(playerID, (f_dwrand() % 36 * 10), 100 + f_dwrand() % 100)
                    # (Line 419) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 420) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 422) NxNSquareShapeAtDouble(playerID, 1, "40 + 1n Gantrithor", 3, 50, x, y);
                    NxNSquareShapeAtDouble(playerID, 1, "40 + 1n Gantrithor", 3, 50, x, y)
                    # (Line 423) NxNSquareShapeAtDouble(playerID, 1, "50 + 1n Tank", 2, 75, x, y);
                    NxNSquareShapeAtDouble(playerID, 1, "50 + 1n Tank", 2, 75, x, y)
                    # (Line 425) for (var i = 0; i < 8; i++)
                    i = EUDVariable()
                    i << (0)
                    if EUDWhile()(i >= 8, neg=True):
                        def _t48():
                            i.__iadd__(1)
                        # (Line 426) {
                        # (Line 427) trg.MoveLoc("50 + 1n Tank", playerID, 0, 0);
                        trg.MoveLoc("50 + 1n Tank", playerID, 0, 0)
                        # (Line 428) RemoveUnitAt(1, "50 + 1n Tank", "Anywhere", playerID);
                        # (Line 429) MoveUnit(1, "60 + 1n Siege", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                        DoActions(RemoveUnitAt(1, "50 + 1n Tank", "Anywhere", playerID))
                        # (Line 430) }
                        DoActions(MoveUnit(1, "60 + 1n Siege", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                        # (Line 431) }
                        EUDSetContinuePoint()
                        _t48()
                    EUDEndWhile()
                    # (Line 433) if (v.P_LoopMain[playerID] % 2 == 1)
                EUDEndIf()
                if EUDIf()(v.P_LoopMain[playerID] % 2 == 1):
                    # (Line 434) {
                    # (Line 435) trg.Table_Sin(playerID, (dwrand() % 36 * 10), 100 + dwrand() % 100);
                    trg.Table_Sin(playerID, (f_dwrand() % 36 * 10), 100 + f_dwrand() % 100)
                    # (Line 436) trg.Table_Cos(playerID, (dwrand() % 36 * 10), 100 + dwrand() % 100);
                    trg.Table_Cos(playerID, (f_dwrand() % 36 * 10), 100 + f_dwrand() % 100)
                    # (Line 438) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 439) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 441) NxNSquareShapeAtDouble(playerID, 1, "50 + 1n Battlecruiser", 3, 50, x, y);
                    NxNSquareShapeAtDouble(playerID, 1, "50 + 1n Battlecruiser", 3, 50, x, y)
                    # (Line 442) NxNSquareShapeAtDouble(playerID, 1, "Protoss Reaver", 2, 75, x, y);
                    NxNSquareShapeAtDouble(playerID, 1, "Protoss Reaver", 2, 75, x, y)
                    # (Line 444) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID);
                    # (Line 445) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                    DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID))
                    # (Line 447) ModifyUnitHangarCount(1, All, "Protoss Reaver", CurrentPlayer, "Anywhere");
                    DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                    # (Line 449) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                    DoActions(ModifyUnitHangarCount(1, All, "Protoss Reaver", CurrentPlayer, "Anywhere"))
                    # (Line 450) MoveUnit(All, "Protoss Reaver", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                    # (Line 451) }
                    DoActions(MoveUnit(All, "Protoss Reaver", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                    # (Line 452) }
                EUDEndIf()
                # (Line 454) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 456) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 458) if (v.P_LoopMain[playerID] == 18)
            if EUDIf()(v.P_LoopMain[playerID] == 18):
                # (Line 459) {
                # (Line 460) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 461) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 462) }
                # (Line 463) }
            EUDEndIf()
            # (Line 464) else if (v.P_CountMain[playerID] == 6)    //9.90
        if EUDElseIf()(v.P_CountMain[playerID] == 6):
            # (Line 465) {
            # (Line 466) KillUnitAt(All, "Protoss Reaver", "Anywhere", playerID);
            # (Line 467) KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "Protoss Reaver", "Anywhere", playerID))
            # (Line 469) trg.SkillEnd();
            DoActions(KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID))
            trg.SkillEnd()
            # (Line 470) }
            # (Line 471) }
        EUDEndIf()
        # (Line 472) }
    EUDEndIf()
    # (Line 474) function NxNSquareShapeAt(playerID : TrgPlayer, count, Unit : TrgUnit, n, interval, x, y)

# (Line 475) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None])
def NxNSquareShapeAt(playerID, count, Unit, n, interval, x_1, y_1):
    # (Line 476) adv.Shape_NxNSquareAt2(playerID, count, Unit, n, interval, x, y);
    adv.Shape_NxNSquareAt2(playerID, count, Unit, n, interval, x_1, y_1)
    # (Line 477) adv.Shape_NxNSquareAt2(playerID, count, Unit, n, interval, -x, -y);
    adv.Shape_NxNSquareAt2(playerID, count, Unit, n, interval, -x_1, -y_1)
    # (Line 478) adv.Shape_NxNSquareAt2(playerID, count, Unit, n, interval, -y, x);
    adv.Shape_NxNSquareAt2(playerID, count, Unit, n, interval, -y_1, x_1)
    # (Line 479) adv.Shape_NxNSquareAt2(playerID, count, Unit, n, interval, y, -x);
    adv.Shape_NxNSquareAt2(playerID, count, Unit, n, interval, y_1, -x_1)
    # (Line 480) }
    # (Line 482) function NxNSquareShapeAtDouble(playerID : TrgPlayer, count, Unit : TrgUnit, n, interval, x, y)

# (Line 483) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None])
def NxNSquareShapeAtDouble(playerID, count, Unit, n, interval, x_1, y_1):
    # (Line 484) adv.Shape_NxNSquareAt2(playerID, count, Unit, n, interval, x, y);
    adv.Shape_NxNSquareAt2(playerID, count, Unit, n, interval, x_1, y_1)
    # (Line 485) adv.Shape_NxNSquareAt2(playerID, count, Unit, n, interval, -x, -y);
    adv.Shape_NxNSquareAt2(playerID, count, Unit, n, interval, -x_1, -y_1)
    # (Line 486) }
