## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import variable as v;
import variable as v
# (Line 2) import func.trig as trg;
from func import trig as trg
# (Line 4) function main(playerID)
# (Line 5) {
@EUDFunc
def f_main(playerID):
    # (Line 6) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 7) {
        # (Line 8) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 9) {
            # (Line 10) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 11) {
                # (Line 12) trg.Table_Sin(playerID, 0, 75);
                trg.Table_Sin(playerID, 0, 75)
                # (Line 13) trg.Table_Cos(playerID, 0, 75);
                trg.Table_Cos(playerID, 0, 75)
                # (Line 15) var x = v.P_AngleCos[playerID];
                x = EUDVariable()
                x << (v.P_AngleCos[playerID])
                # (Line 16) var y = v.P_AngleSin[playerID];
                y = EUDVariable()
                y << (v.P_AngleSin[playerID])
                # (Line 18) trg.Shape_Square(playerID, 1, "Target", x, y);
                trg.Shape_Square(playerID, 1, "Target", x, y)
                # (Line 19) KillUnitAt(All, "Target", "Anywhere", playerID);
                # (Line 21) trg.Table_Sin(playerID, 45, 75);
                DoActions(KillUnitAt(All, "Target", "Anywhere", playerID))
                trg.Table_Sin(playerID, 45, 75)
                # (Line 22) trg.Table_Cos(playerID, 45, 75);
                trg.Table_Cos(playerID, 45, 75)
                # (Line 24) x = v.P_AngleCos[playerID];
                x << (v.P_AngleCos[playerID])
                # (Line 25) y = v.P_AngleSin[playerID];
                y << (v.P_AngleSin[playerID])
                # (Line 27) trg.Shape_Square(playerID, 1, "Target", x, y);
                trg.Shape_Square(playerID, 1, "Target", x, y)
                # (Line 28) KillUnitAt(All, "Target", "Anywhere", playerID);
                # (Line 29) }
                DoActions(KillUnitAt(All, "Target", "Anywhere", playerID))
                # (Line 30) else if (v.P_LoopMain[playerID] == 2)
            if EUDElseIf()(v.P_LoopMain[playerID] == 2):
                # (Line 31) {
                # (Line 32) trg.Table_Sin(playerID, 0, 150);
                trg.Table_Sin(playerID, 0, 150)
                # (Line 33) trg.Table_Cos(playerID, 0, 150);
                trg.Table_Cos(playerID, 0, 150)
                # (Line 35) var x = v.P_AngleCos[playerID];
                x = EUDVariable()
                x << (v.P_AngleCos[playerID])
                # (Line 36) var y = v.P_AngleSin[playerID];
                y = EUDVariable()
                y << (v.P_AngleSin[playerID])
                # (Line 38) trg.Shape_Square(playerID, 1, "40 + 1n Guardian", x, y);
                trg.Shape_Square(playerID, 1, "40 + 1n Guardian", x, y)
                # (Line 39) trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y);
                trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y)
                # (Line 40) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                # (Line 41) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                # (Line 43) trg.Table_Sin(playerID, 45, 150);
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                trg.Table_Sin(playerID, 45, 150)
                # (Line 44) trg.Table_Cos(playerID, 45, 150);
                trg.Table_Cos(playerID, 45, 150)
                # (Line 46) x = v.P_AngleCos[playerID];
                x << (v.P_AngleCos[playerID])
                # (Line 47) y = v.P_AngleSin[playerID];
                y << (v.P_AngleSin[playerID])
                # (Line 49) trg.Shape_Square(playerID, 1, "40 + 1n Guardian", x, y);
                trg.Shape_Square(playerID, 1, "40 + 1n Guardian", x, y)
                # (Line 50) trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y);
                trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y)
                # (Line 51) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                # (Line 52) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                # (Line 54) trg.Table_Sin(playerID, 0, 75);
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                trg.Table_Sin(playerID, 0, 75)
                # (Line 55) trg.Table_Cos(playerID, 0, 75);
                trg.Table_Cos(playerID, 0, 75)
                # (Line 57) x = v.P_AngleCos[playerID];
                x << (v.P_AngleCos[playerID])
                # (Line 58) y = v.P_AngleSin[playerID];
                y << (v.P_AngleSin[playerID])
                # (Line 60) trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", x, y);
                trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", x, y)
                # (Line 61) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                # (Line 63) trg.Table_Sin(playerID, 45, 75);
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                trg.Table_Sin(playerID, 45, 75)
                # (Line 64) trg.Table_Cos(playerID, 45, 75);
                trg.Table_Cos(playerID, 45, 75)
                # (Line 66) x = v.P_AngleCos[playerID];
                x << (v.P_AngleCos[playerID])
                # (Line 67) y = v.P_AngleSin[playerID];
                y << (v.P_AngleSin[playerID])
                # (Line 69) trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", x, y);
                trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", x, y)
                # (Line 70) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                # (Line 71) }
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                # (Line 72) else if (v.P_LoopMain[playerID] == 4)
            if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                # (Line 73) {
                # (Line 74) trg.Table_Sin(playerID, 0, 150);
                trg.Table_Sin(playerID, 0, 150)
                # (Line 75) trg.Table_Cos(playerID, 0, 150);
                trg.Table_Cos(playerID, 0, 150)
                # (Line 77) var x = v.P_AngleCos[playerID];
                x = EUDVariable()
                x << (v.P_AngleCos[playerID])
                # (Line 78) var y = v.P_AngleSin[playerID];
                y = EUDVariable()
                y << (v.P_AngleSin[playerID])
                # (Line 80) trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", x, y);
                trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", x, y)
                # (Line 81) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", x, y);
                trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", x, y)
                # (Line 82) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
                # (Line 84) trg.Table_Sin(playerID, 45, 150);
                DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
                trg.Table_Sin(playerID, 45, 150)
                # (Line 85) trg.Table_Cos(playerID, 45, 150);
                trg.Table_Cos(playerID, 45, 150)
                # (Line 87) x = v.P_AngleCos[playerID];
                x << (v.P_AngleCos[playerID])
                # (Line 88) y = v.P_AngleSin[playerID];
                y << (v.P_AngleSin[playerID])
                # (Line 90) trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", x, y);
                trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", x, y)
                # (Line 91) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", x, y);
                trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", x, y)
                # (Line 92) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
                # (Line 94) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
                # (Line 95) Order("40 + 1n Mutalisk", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 96) }
                DoActions(Order("40 + 1n Mutalisk", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 97) else if (v.P_LoopMain[playerID] == 6)
            if EUDElseIf()(v.P_LoopMain[playerID] == 6):
                # (Line 98) {
                # (Line 99) trg.Table_Sin(playerID, 0, 150);
                trg.Table_Sin(playerID, 0, 150)
                # (Line 100) trg.Table_Cos(playerID, 0, 150);
                trg.Table_Cos(playerID, 0, 150)
                # (Line 102) var x = v.P_AngleCos[playerID];
                x = EUDVariable()
                x << (v.P_AngleCos[playerID])
                # (Line 103) var y = v.P_AngleSin[playerID];
                y = EUDVariable()
                y << (v.P_AngleSin[playerID])
                # (Line 105) trg.Shape_Square(playerID, 1, "50 + 1n Tank", x, y);
                trg.Shape_Square(playerID, 1, "50 + 1n Tank", x, y)
                # (Line 106) KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID);
                # (Line 108) trg.Table_Sin(playerID, 45, 150);
                DoActions(KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID))
                trg.Table_Sin(playerID, 45, 150)
                # (Line 109) trg.Table_Cos(playerID, 45, 150);
                trg.Table_Cos(playerID, 45, 150)
                # (Line 111) x = v.P_AngleCos[playerID];
                x << (v.P_AngleCos[playerID])
                # (Line 112) y = v.P_AngleSin[playerID];
                y << (v.P_AngleSin[playerID])
                # (Line 114) trg.Shape_Square(playerID, 1, "50 + 1n Tank", x, y);
                trg.Shape_Square(playerID, 1, "50 + 1n Tank", x, y)
                # (Line 115) KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID);
                # (Line 116) }
                DoActions(KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID))
                # (Line 117) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 119) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 121) if (v.P_LoopMain[playerID] == 8)
            if EUDIf()(v.P_LoopMain[playerID] == 8):
                # (Line 122) {
                # (Line 123) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 124) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 125) }
                # (Line 126) }
            EUDEndIf()
            # (Line 127) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 128) {
            # (Line 129) if (v.P_LoopMain[playerID] < 8)
            if EUDIf()(v.P_LoopMain[playerID] >= 8, neg=True):
                # (Line 130) {
                # (Line 131) trg.Table_Sin(playerID, 450 - 45 * v.P_LoopMain[playerID], 150);
                trg.Table_Sin(playerID, 450 - 45 * v.P_LoopMain[playerID], 150)
                # (Line 132) trg.Table_Cos(playerID, 450 - 45 * v.P_LoopMain[playerID], 150);
                trg.Table_Cos(playerID, 450 - 45 * v.P_LoopMain[playerID], 150)
                # (Line 134) var x = v.P_AngleCos[playerID];
                x = EUDVariable()
                x << (v.P_AngleCos[playerID])
                # (Line 135) var y = v.P_AngleSin[playerID];
                y = EUDVariable()
                y << (v.P_AngleSin[playerID])
                # (Line 137) trg.Shape_Dot(playerID, 1, "40 + 1n Gantrithor", x, y);
                trg.Shape_Dot(playerID, 1, "40 + 1n Gantrithor", x, y)
                # (Line 138) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID);
                # (Line 139) }
                DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID))
                # (Line 141) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 143) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 145) if (v.P_LoopMain[playerID] == 8)
            if EUDIf()(v.P_LoopMain[playerID] == 8):
                # (Line 146) {
                # (Line 147) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 148) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 149) }
                # (Line 150) }
            EUDEndIf()
            # (Line 151) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 152) {
            # (Line 153) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 154) {
                # (Line 155) trg.Table_Sin(playerID, 0, 75);
                trg.Table_Sin(playerID, 0, 75)
                # (Line 156) trg.Table_Cos(playerID, 0, 75);
                trg.Table_Cos(playerID, 0, 75)
                # (Line 158) var x = v.P_AngleCos[playerID];
                x = EUDVariable()
                x << (v.P_AngleCos[playerID])
                # (Line 159) var y = v.P_AngleSin[playerID];
                y = EUDVariable()
                y << (v.P_AngleSin[playerID])
                # (Line 161) trg.Shape_Square(playerID, 1, "80 + 1n Mutalisk", x, y);
                trg.Shape_Square(playerID, 1, "80 + 1n Mutalisk", x, y)
                # (Line 162) KillUnitAt(All, "80 + 1n Mutalisk", "Anywhere", playerID);
                # (Line 164) trg.Table_Sin(playerID, 45, 75);
                DoActions(KillUnitAt(All, "80 + 1n Mutalisk", "Anywhere", playerID))
                trg.Table_Sin(playerID, 45, 75)
                # (Line 165) trg.Table_Cos(playerID, 45, 75);
                trg.Table_Cos(playerID, 45, 75)
                # (Line 167) x = v.P_AngleCos[playerID];
                x << (v.P_AngleCos[playerID])
                # (Line 168) y = v.P_AngleSin[playerID];
                y << (v.P_AngleSin[playerID])
                # (Line 170) trg.Shape_Square(playerID, 1, "80 + 1n Mutalisk", x, y);
                trg.Shape_Square(playerID, 1, "80 + 1n Mutalisk", x, y)
                # (Line 171) KillUnitAt(All, "80 + 1n Mutalisk", "Anywhere", playerID);
                # (Line 172) }
                DoActions(KillUnitAt(All, "80 + 1n Mutalisk", "Anywhere", playerID))
                # (Line 173) else if (v.P_LoopMain[playerID] == 2)
            if EUDElseIf()(v.P_LoopMain[playerID] == 2):
                # (Line 174) {
                # (Line 175) trg.Table_Sin(playerID, 0, 150);
                trg.Table_Sin(playerID, 0, 150)
                # (Line 176) trg.Table_Cos(playerID, 0, 150);
                trg.Table_Cos(playerID, 0, 150)
                # (Line 178) var x = v.P_AngleCos[playerID];
                x = EUDVariable()
                x << (v.P_AngleCos[playerID])
                # (Line 179) var y = v.P_AngleSin[playerID];
                y = EUDVariable()
                y << (v.P_AngleSin[playerID])
                # (Line 181) trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", x, y);
                trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", x, y)
                # (Line 182) trg.Shape_Square(playerID, 1, "40 + 1n Goliath", x, y);
                trg.Shape_Square(playerID, 1, "40 + 1n Goliath", x, y)
                # (Line 183) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 185) trg.Table_Sin(playerID, 45, 150);
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                trg.Table_Sin(playerID, 45, 150)
                # (Line 186) trg.Table_Cos(playerID, 45, 150);
                trg.Table_Cos(playerID, 45, 150)
                # (Line 188) x = v.P_AngleCos[playerID];
                x << (v.P_AngleCos[playerID])
                # (Line 189) y = v.P_AngleSin[playerID];
                y << (v.P_AngleSin[playerID])
                # (Line 191) trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", x, y);
                trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", x, y)
                # (Line 192) trg.Shape_Square(playerID, 1, "40 + 1n Goliath", x, y);
                trg.Shape_Square(playerID, 1, "40 + 1n Goliath", x, y)
                # (Line 193) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 195) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                # (Line 196) MoveUnit(All, "40 + 1n Goliath", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 197) Order("40 + 1n Goliath", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "40 + 1n Goliath", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 198) }
                DoActions(Order("40 + 1n Goliath", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 199) else if (v.P_LoopMain[playerID] == 3)
            if EUDElseIf()(v.P_LoopMain[playerID] == 3):
                # (Line 200) {
                # (Line 201) RemoveUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID);
                # (Line 202) }
                DoActions(RemoveUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID))
                # (Line 204) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 206) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 208) if (v.P_LoopMain[playerID] == 10)
            if EUDIf()(v.P_LoopMain[playerID] == 10):
                # (Line 209) {
                # (Line 210) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 211) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 212) }
                # (Line 213) }
            EUDEndIf()
            # (Line 214) else if (v.P_CountMain[playerID] == 3)
        if EUDElseIf()(v.P_CountMain[playerID] == 3):
            # (Line 215) {
            # (Line 216) if (v.P_LoopMain[playerID] < 8)
            if EUDIf()(v.P_LoopMain[playerID] >= 8, neg=True):
                # (Line 217) {
                # (Line 218) trg.MoveLoc("40 + 1n Mutalisk", playerID, 0, 0);
                trg.MoveLoc("40 + 1n Mutalisk", playerID, 0, 0)
                # (Line 219) RemoveUnitAt(1, "40 + 1n Mutalisk", "Anywhere", playerID);
                # (Line 220) trg.SkillUnit(playerID, 1, "40 + 1n Drone");
                DoActions(RemoveUnitAt(1, "40 + 1n Mutalisk", "Anywhere", playerID))
                trg.SkillUnit(playerID, 1, "40 + 1n Drone")
                # (Line 221) trg.SkillUnit(playerID, 1, " Unit. Hoffnung 25000");
                trg.SkillUnit(playerID, 1, " Unit. Hoffnung 25000")
                # (Line 223) if (v.P_LoopMain[playerID] % 2 == 0)
                if EUDIf()(v.P_LoopMain[playerID] % 2 == 0):
                    # (Line 224) {
                    # (Line 225) trg.SkillUnit(playerID, 1, "40 + 1n Gantrithor");
                    trg.SkillUnit(playerID, 1, "40 + 1n Gantrithor")
                    # (Line 226) }
                    # (Line 227) else if (v.P_LoopMain[playerID] % 2 == 1)
                if EUDElseIf()(v.P_LoopMain[playerID] % 2 == 1):
                    # (Line 228) {
                    # (Line 229) trg.SkillUnit(playerID, 1, "50 + 1n Battlecruiser");
                    trg.SkillUnit(playerID, 1, "50 + 1n Battlecruiser")
                    # (Line 230) }
                    # (Line 232) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID);
                EUDEndIf()
                # (Line 233) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID))
                # (Line 234) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                # (Line 236) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
                # (Line 237) MoveUnit(All, "40 + 1n Drone", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 238) }
                DoActions(MoveUnit(All, "40 + 1n Drone", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 240) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 242) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 244) if (v.P_LoopMain[playerID] == 16)
            if EUDIf()(v.P_LoopMain[playerID] == 16):
                # (Line 245) {
                # (Line 246) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 247) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 248) }
                # (Line 249) }
            EUDEndIf()
            # (Line 250) else if (v.P_CountMain[playerID] == 4)
        if EUDElseIf()(v.P_CountMain[playerID] == 4):
            # (Line 251) {
            # (Line 252) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 253) {
                # (Line 254) for (var i = 0; i < 8; i++)
                i = EUDVariable()
                i << (0)
                if EUDWhile()(i >= 8, neg=True):
                    def _t24():
                        i.__iadd__(1)
                    # (Line 255) {
                    # (Line 256) trg.MoveLoc("40 + 1n Drone", playerID, 0, 0);
                    trg.MoveLoc("40 + 1n Drone", playerID, 0, 0)
                    # (Line 257) RemoveUnitAt(1, "40 + 1n Drone", "Anywhere", playerID);
                    # (Line 258) trg.SkillUnit(playerID, 1, "40 + 1n Mojo");
                    DoActions(RemoveUnitAt(1, "40 + 1n Drone", "Anywhere", playerID))
                    trg.SkillUnit(playerID, 1, "40 + 1n Mojo")
                    # (Line 259) trg.SkillUnit(playerID, 1, "60 + 1n Hydralisk");
                    trg.SkillUnit(playerID, 1, "60 + 1n Hydralisk")
                    # (Line 260) }
                    # (Line 262) KillUnitAt(All, "60 + 1n Hydralisk", "Anywhere", playerID);
                    EUDSetContinuePoint()
                    _t24()
                EUDEndWhile()
                # (Line 264) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n Hydralisk", "Anywhere", playerID))
                # (Line 265) Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 266) }
                DoActions(Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 267) if (v.P_LoopMain[playerID] == 1)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 1):
                # (Line 268) {
                # (Line 269) for (var i = 0; i < 8; i++)
                i = EUDVariable()
                i << (0)
                if EUDWhile()(i >= 8, neg=True):
                    def _t27():
                        i.__iadd__(1)
                    # (Line 270) {
                    # (Line 271) trg.MoveLoc("40 + 1n Mojo", playerID, 0, 0);
                    trg.MoveLoc("40 + 1n Mojo", playerID, 0, 0)
                    # (Line 272) RemoveUnitAt(1, "40 + 1n Mojo", "Anywhere", playerID);
                    # (Line 273) trg.SkillUnit(playerID, 1, "Kakaru (Twilight)");
                    DoActions(RemoveUnitAt(1, "40 + 1n Mojo", "Anywhere", playerID))
                    trg.SkillUnit(playerID, 1, "Kakaru (Twilight)")
                    # (Line 274) }
                    # (Line 276) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                    EUDSetContinuePoint()
                    _t27()
                EUDEndWhile()
                # (Line 277) }
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                # (Line 278) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 280) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 282) if (v.P_LoopMain[playerID] == 2)
            if EUDIf()(v.P_LoopMain[playerID] == 2):
                # (Line 283) {
                # (Line 284) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 285) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 286) }
                # (Line 287) }
            EUDEndIf()
            # (Line 288) else if (v.P_CountMain[playerID] == 5)
        if EUDElseIf()(v.P_CountMain[playerID] == 5):
            # (Line 289) {
            # (Line 290) trg.SkillEnd();
            trg.SkillEnd()
            # (Line 291) }
            # (Line 292) }
        EUDEndIf()
        # (Line 293) }
    EUDEndIf()
