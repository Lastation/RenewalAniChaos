## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import variable as v;
import variable as v
# (Line 2) import func.trig as trg;
from func import trig as trg
# (Line 3) import func.trigepic as epic;
from func import trigepic as epic
# (Line 5) var x = 0;
x = EUDCreateVariables(1)
_IGVA([x], lambda: [0])
# (Line 6) var y = 0;
y = EUDCreateVariables(1)
_IGVA([y], lambda: [0])
# (Line 8) var d = 75;
d = EUDCreateVariables(1)
_IGVA([d], lambda: [75])
# (Line 10) function main(playerID)
# (Line 11) {
@EUDFunc
def f_main(playerID):
    # (Line 12) MoveUnit(All, "40 + 3n Zeratul", playerID, "Anywhere", "[Skill]HoldPosition");
    # (Line 14) trg.Debuff_BanReturn();
    DoActions(MoveUnit(All, "40 + 3n Zeratul", playerID, "Anywhere", "[Skill]HoldPosition"))
    trg.Debuff_BanReturn()
    # (Line 15) trg.Debuff_Stop();
    trg.Debuff_Stop()
    # (Line 17) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 18) {
        # (Line 20) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 21) {
            # (Line 22) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 23) {
                # (Line 24) trg.Table_Sin(playerID, 22, d);
                trg.Table_Sin(playerID, 22, d)
                # (Line 25) trg.Table_Cos(playerID, 22, d);
                trg.Table_Cos(playerID, 22, d)
                # (Line 27) x = v.P_AngleCos[playerID];
                x << (v.P_AngleCos[playerID])
                # (Line 28) y = v.P_AngleSin[playerID];
                y << (v.P_AngleSin[playerID])
                # (Line 30) trg.Shape_Square(playerID, 1, "40 + 1n Guardian", x, y);
                trg.Shape_Square(playerID, 1, "40 + 1n Guardian", x, y)
                # (Line 31) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                # (Line 32) }
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                # (Line 33) if (v.P_LoopMain[playerID] == 2)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 2):
                # (Line 34) {
                # (Line 35) trg.Table_Sin(playerID, 67, d);
                trg.Table_Sin(playerID, 67, d)
                # (Line 36) trg.Table_Cos(playerID, 67, d);
                trg.Table_Cos(playerID, 67, d)
                # (Line 38) x = v.P_AngleCos[playerID];
                x << (v.P_AngleCos[playerID])
                # (Line 39) y = v.P_AngleSin[playerID];
                y << (v.P_AngleSin[playerID])
                # (Line 41) trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", x, y);
                trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", x, y)
                # (Line 42) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                # (Line 44) trg.Table_Sin(playerID, 22, 2 * d);
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                trg.Table_Sin(playerID, 22, 2 * d)
                # (Line 45) trg.Table_Cos(playerID, 22, 2 * d);
                trg.Table_Cos(playerID, 22, 2 * d)
                # (Line 47) x = v.P_AngleCos[playerID];
                x << (v.P_AngleCos[playerID])
                # (Line 48) y = v.P_AngleSin[playerID];
                y << (v.P_AngleSin[playerID])
                # (Line 50) trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", x, y);
                trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", x, y)
                # (Line 51) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 53) trg.Table_Sin(playerID, 67, 2 * d);
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                trg.Table_Sin(playerID, 67, 2 * d)
                # (Line 54) trg.Table_Cos(playerID, 67, 2 * d);
                trg.Table_Cos(playerID, 67, 2 * d)
                # (Line 56) x = v.P_AngleCos[playerID];
                x << (v.P_AngleCos[playerID])
                # (Line 57) y = v.P_AngleSin[playerID];
                y << (v.P_AngleSin[playerID])
                # (Line 59) trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", x, y);
                trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", x, y)
                # (Line 60) trg.Shape_Square(playerID, 1, "Protoss Dark Archon", x, y);
                trg.Shape_Square(playerID, 1, "Protoss Dark Archon", x, y)
                # (Line 61) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 63) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 64) Order("40 + 1n Mutalisk", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 65) }
                DoActions(Order("40 + 1n Mutalisk", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 66) if (v.P_LoopMain[playerID] == 6)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 6):
                # (Line 67) {
                # (Line 68) trg.Table_Sin(playerID, 67, d);
                trg.Table_Sin(playerID, 67, d)
                # (Line 69) trg.Table_Cos(playerID, 67, d);
                trg.Table_Cos(playerID, 67, d)
                # (Line 71) x = v.P_AngleCos[playerID];
                x << (v.P_AngleCos[playerID])
                # (Line 72) y = v.P_AngleSin[playerID];
                y << (v.P_AngleSin[playerID])
                # (Line 74) trg.Shape_Square(playerID, 1, "40 + 1n Guardian", x, y);
                trg.Shape_Square(playerID, 1, "40 + 1n Guardian", x, y)
                # (Line 75) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                # (Line 76) }
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                # (Line 77) if (v.P_LoopMain[playerID] == 8)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 8):
                # (Line 78) {
                # (Line 79) trg.Table_Sin(playerID, 22, d);
                trg.Table_Sin(playerID, 22, d)
                # (Line 80) trg.Table_Cos(playerID, 22, d);
                trg.Table_Cos(playerID, 22, d)
                # (Line 82) x = v.P_AngleCos[playerID];
                x << (v.P_AngleCos[playerID])
                # (Line 83) y = v.P_AngleSin[playerID];
                y << (v.P_AngleSin[playerID])
                # (Line 85) trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", x, y);
                trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", x, y)
                # (Line 86) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                # (Line 88) trg.Table_Sin(playerID, 67, 2 * d);
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                trg.Table_Sin(playerID, 67, 2 * d)
                # (Line 89) trg.Table_Cos(playerID, 67, 2 * d);
                trg.Table_Cos(playerID, 67, 2 * d)
                # (Line 91) x = v.P_AngleCos[playerID];
                x << (v.P_AngleCos[playerID])
                # (Line 92) y = v.P_AngleSin[playerID];
                y << (v.P_AngleSin[playerID])
                # (Line 94) trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", x, y);
                trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", x, y)
                # (Line 95) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 97) trg.Table_Sin(playerID, 22, 2 * d);
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                trg.Table_Sin(playerID, 22, 2 * d)
                # (Line 98) trg.Table_Cos(playerID, 22, 2 * d);
                trg.Table_Cos(playerID, 22, 2 * d)
                # (Line 100) x = v.P_AngleCos[playerID];
                x << (v.P_AngleCos[playerID])
                # (Line 101) y = v.P_AngleSin[playerID];
                y << (v.P_AngleSin[playerID])
                # (Line 103) trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", x, y);
                trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", x, y)
                # (Line 104) trg.Shape_Square(playerID, 1, "Protoss Dark Archon", x, y);
                trg.Shape_Square(playerID, 1, "Protoss Dark Archon", x, y)
                # (Line 105) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 107) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 108) Order("40 + 1n Mutalisk", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 109) }
                DoActions(Order("40 + 1n Mutalisk", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 111) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 113) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 115) if (v.P_LoopMain[playerID] == 15)
            if EUDIf()(v.P_LoopMain[playerID] == 15):
                # (Line 116) {
                # (Line 117) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 118) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 119) }
                # (Line 120) }
            EUDEndIf()
            # (Line 121) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 122) {
            # (Line 123) if (Bring(playerID, AtLeast, 1, "Protoss Dark Templar", "Anywhere"))
            if EUDIf()(Bring(playerID, AtLeast, 1, "Protoss Dark Templar", "Anywhere")):
                # (Line 124) {
                # (Line 125) trg.MoveLoc("Protoss Dark Templar", playerID, 0, 0);
                trg.MoveLoc("Protoss Dark Templar", playerID, 0, 0)
                # (Line 126) RemoveUnitAt(1, "Protoss Dark Templar", "Anywhere", playerID);
                # (Line 127) trg.SkillUnit(playerID, 1, "40 + 1n Drone");
                DoActions(RemoveUnitAt(1, "Protoss Dark Templar", "Anywhere", playerID))
                trg.SkillUnit(playerID, 1, "40 + 1n Drone")
                # (Line 128) if (v.P_LoopMain[playerID] % 2 == 0)
                if EUDIf()(v.P_LoopMain[playerID] % 2 == 0):
                    # (Line 129) {
                    # (Line 130) trg.SkillUnit(playerID, 1, " Unit. Hoffnung 25000");
                    trg.SkillUnit(playerID, 1, " Unit. Hoffnung 25000")
                    # (Line 131) trg.SkillUnit(playerID, 1, "40 + 1n Guardian");
                    trg.SkillUnit(playerID, 1, "40 + 1n Guardian")
                    # (Line 132) }
                    # (Line 133) if (v.P_LoopMain[playerID] % 2 == 1)
                EUDEndIf()
                if EUDIf()(v.P_LoopMain[playerID] % 2 == 1):
                    # (Line 134) {
                    # (Line 135) trg.SkillUnit(playerID, 1, "Kakaru (Twilight)");
                    trg.SkillUnit(playerID, 1, "Kakaru (Twilight)")
                    # (Line 136) trg.SkillUnit(playerID, 1, "40 + 1n Zealot");
                    trg.SkillUnit(playerID, 1, "40 + 1n Zealot")
                    # (Line 137) }
                    # (Line 139) epic.SkillUnit(playerID, 1, "40 + 1n Lurker", 0);
                EUDEndIf()
                epic.SkillUnit(playerID, 1, "40 + 1n Lurker", 0)
                # (Line 141) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 142) MoveUnit(All, "40 + 1n Drone", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 143) MoveUnit(All, "40 + 1n Lurker", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "40 + 1n Drone", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 144) Order("40 + 1n Drone", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "40 + 1n Lurker", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 145) }
                DoActions(Order("40 + 1n Drone", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 147) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
            EUDEndIf()
            # (Line 148) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
            # (Line 149) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
            DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
            # (Line 150) KillUnitAt(All, "40 + 1n Zealot", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
            # (Line 152) trg.Main_Wait(80);
            DoActions(KillUnitAt(All, "40 + 1n Zealot", "Anywhere", playerID))
            trg.Main_Wait(80)
            # (Line 154) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 156) if (v.P_LoopMain[playerID] == 30)
            if EUDIf()(v.P_LoopMain[playerID] == 30):
                # (Line 157) {
                # (Line 158) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 159) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 160) }
                # (Line 161) }
            EUDEndIf()
            # (Line 162) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 163) {
            # (Line 164) KillUnitAt(All, "40 + 1n Drone", "Anywhere", playerID);
            # (Line 165) KillUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Drone", "Anywhere", playerID))
            # (Line 166) KillUnitAt(All, "40 + 1n Lurker", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID))
            # (Line 167) KillUnitAt(All, "60 + 1n Hydralisk", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Lurker", "Anywhere", playerID))
            # (Line 168) KillUnitAt(All, "Unclean One (Defiler)", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "60 + 1n Hydralisk", "Anywhere", playerID))
            # (Line 170) trg.SkillEnd();
            DoActions(KillUnitAt(All, "Unclean One (Defiler)", "Anywhere", playerID))
            trg.SkillEnd()
            # (Line 171) }
            # (Line 172) }
        EUDEndIf()
        # (Line 173) }
    EUDEndIf()
