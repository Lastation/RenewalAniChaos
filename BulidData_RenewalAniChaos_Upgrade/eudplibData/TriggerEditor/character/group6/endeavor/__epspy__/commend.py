## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.sound as s;
from func import sound as s
# (Line 5) function main(playerID)
# (Line 6) {
@EUDFunc
def f_main(playerID):
    # (Line 7) if (v.P_WaitMain[playerID] == 0 && v.P_Step[playerID] == 0)
    if EUDIf()(EUDSCAnd()(v.P_WaitMain[playerID] == 0)(v.P_Step[playerID] == 0)()):
        # (Line 8) {
        # (Line 9) if (Bring(playerID, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill")
        _t2 = EUDIf()
        # (Line 10) && v.P_UniqueCool[playerID] == 0
        # (Line 11) && v.P_UniqueCondition[playerID] == 1
        # (Line 12) && Bring(AllPlayers, Exactly, 0, 130, "Anywhere"))
        if _t2(EUDSCAnd()(Bring(playerID, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill"))(v.P_UniqueCool[playerID] == 0)(v.P_UniqueCondition[playerID] == 1)(Bring(AllPlayers, Exactly, 0, 130, "Anywhere"))()):
            # (Line 13) {
            # (Line 14) s.CharacterVoice(1);
            s.CharacterVoice(1)
            # (Line 15) v.P_Step[playerID] = 1;
            _ARRW(v.P_Step, playerID) << (1)
            # (Line 16) KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", playerID);
            # (Line 17) }
            DoActions(KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", playerID))
            # (Line 18) else if (Bring(playerID, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill"))
        if EUDElseIf()(Bring(playerID, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill")):
            # (Line 19) {
            # (Line 20) SetResources(CurrentPlayer, Add, 60, Gas);
            # (Line 21) KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", playerID);
            DoActions(SetResources(CurrentPlayer, Add, 60, Gas))
            # (Line 22) }
            DoActions(KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", playerID))
            # (Line 23) else if (Bring(playerID, AtLeast, 1, "Protoss Scout", "[Skill]UseSkill"))
        if EUDElseIf()(Bring(playerID, AtLeast, 1, "Protoss Scout", "[Skill]UseSkill")):
            # (Line 24) {
            # (Line 25) v.P_Step[playerID] = 100;
            _ARRW(v.P_Step, playerID) << (100)
            # (Line 26) KillUnitAt(1, "Protoss Scout", "[Skill]UseSkill", playerID);
            # (Line 27) }
            DoActions(KillUnitAt(1, "Protoss Scout", "[Skill]UseSkill", playerID))
            # (Line 28) else if (Bring(playerID, AtLeast, 1, "Protoss Carrier", "[Skill]UseSkill"))
        if EUDElseIf()(Bring(playerID, AtLeast, 1, "Protoss Carrier", "[Skill]UseSkill")):
            # (Line 29) {
            # (Line 30) v.P_Step[playerID] = 200;
            _ARRW(v.P_Step, playerID) << (200)
            # (Line 31) KillUnitAt(1, "Protoss Carrier", "[Skill]UseSkill", playerID);
            # (Line 32) }
            DoActions(KillUnitAt(1, "Protoss Carrier", "[Skill]UseSkill", playerID))
            # (Line 33) else if (Bring(playerID, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill"))
        if EUDElseIf()(Bring(playerID, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill")):
            # (Line 34) {
            # (Line 35) v.P_Step[playerID] = 300;
            _ARRW(v.P_Step, playerID) << (300)
            # (Line 36) KillUnitAt(1, "Protoss Arbiter", "[Skill]UseSkill", playerID);
            # (Line 37) }
            DoActions(KillUnitAt(1, "Protoss Arbiter", "[Skill]UseSkill", playerID))
            # (Line 38) }
        EUDEndIf()
        # (Line 41) if (v.P_SkillDelay[playerID] >= 2 && v.P_CountMain[playerID] == 0)
    EUDEndIf()
    if EUDIf()(EUDSCAnd()(v.P_SkillDelay[playerID] >= 2)(v.P_CountMain[playerID] == 0)()):
        # (Line 42) {
        # (Line 43) if (Bring(playerID, AtLeast, 2, "Protoss Scout", "[Skill]UseSkill") &&  v.P_Step[playerID] == 100)
        if EUDIf()(EUDSCAnd()(Bring(playerID, AtLeast, 2, "Protoss Scout", "[Skill]UseSkill"))(v.P_Step[playerID] == 100)()):
            # (Line 44) {
            # (Line 45) s.CharacterVoice(2);
            s.CharacterVoice(2)
            # (Line 46) v.P_SkillDelay[playerID] = 0;
            _ARRW(v.P_SkillDelay, playerID) << (0)
            # (Line 47) v.P_Step[playerID] = 110;
            _ARRW(v.P_Step, playerID) << (110)
            # (Line 48) KillUnitAt(2, "Protoss Scout", "[Skill]UseSkill", playerID);
            # (Line 49) }
            DoActions(KillUnitAt(2, "Protoss Scout", "[Skill]UseSkill", playerID))
            # (Line 50) else if (Bring(playerID, AtLeast, 2, "Protoss Carrier", "[Skill]UseSkill")
        _t9 = EUDElseIf()
        # (Line 51) &&  v.P_Step[playerID] == 200)
        if _t9(EUDSCAnd()(Bring(playerID, AtLeast, 2, "Protoss Carrier", "[Skill]UseSkill"))(v.P_Step[playerID] == 200)()):
            # (Line 52) {
            # (Line 53) s.CharacterVoice(3);
            s.CharacterVoice(3)
            # (Line 54) v.P_SkillDelay[playerID] = 0;
            _ARRW(v.P_SkillDelay, playerID) << (0)
            # (Line 55) v.P_Step[playerID] = 210;
            _ARRW(v.P_Step, playerID) << (210)
            # (Line 56) KillUnitAt(2, "Protoss Carrier", "[Skill]UseSkill", playerID);
            # (Line 57) }
            DoActions(KillUnitAt(2, "Protoss Carrier", "[Skill]UseSkill", playerID))
            # (Line 58) else if (Bring(playerID, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill")
        _t10 = EUDElseIf()
        # (Line 59) && Bring(playerID, AtLeast, 2,"Protoss Carrier", "[Skill]UseSkill")
        # (Line 60) && Accumulate(playerID, AtLeast, 200, Gas)
        # (Line 61) && v.P_Step[playerID] == 300)
        if _t10(EUDSCAnd()(Bring(playerID, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill"))(Bring(playerID, AtLeast, 2, "Protoss Carrier", "[Skill]UseSkill"))(Accumulate(playerID, AtLeast, 200, Gas))(v.P_Step[playerID] == 300)()):
            # (Line 62) {
            # (Line 63) s.CharacterVoice(5);
            s.CharacterVoice(5)
            # (Line 64) v.P_SkillDelay[playerID] = 0;
            _ARRW(v.P_SkillDelay, playerID) << (0)
            # (Line 65) v.P_Step[playerID] = 310;
            _ARRW(v.P_Step, playerID) << (310)
            # (Line 66) SetResources(playerID, Subtract, 200, Gas);
            # (Line 67) KillUnitAt(1, "Protoss Arbiter", "[Skill]UseSkill", playerID);
            DoActions(SetResources(playerID, Subtract, 200, Gas))
            # (Line 68) KillUnitAt(2, "Protoss Carrier", "[Skill]UseSkill", playerID);
            DoActions(KillUnitAt(1, "Protoss Arbiter", "[Skill]UseSkill", playerID))
            # (Line 69) }
            DoActions(KillUnitAt(2, "Protoss Carrier", "[Skill]UseSkill", playerID))
            # (Line 70) else if (Bring(playerID, AtLeast, 2, "Protoss Arbiter", "[Skill]UseSkill")
        _t11 = EUDElseIf()
        # (Line 71) && Bring(playerID, AtLeast, 1,"Protoss Carrier", "[Skill]UseSkill")
        # (Line 72) &&  v.P_Step[playerID] == 310)
        if _t11(EUDSCAnd()(Bring(playerID, AtLeast, 2, "Protoss Arbiter", "[Skill]UseSkill"))(Bring(playerID, AtLeast, 1, "Protoss Carrier", "[Skill]UseSkill"))(v.P_Step[playerID] == 310)()):
            # (Line 73) {
            # (Line 74) s.CharacterVoice(7);
            s.CharacterVoice(7)
            # (Line 75) v.P_Step[playerID] = 320;
            _ARRW(v.P_Step, playerID) << (320)
            # (Line 76) v.P_SkillDelay[playerID] = 0;
            _ARRW(v.P_SkillDelay, playerID) << (0)
            # (Line 77) KillUnitAt(1, "Protoss Carrier", "[Skill]UseSkill", playerID);
            # (Line 78) KillUnitAt(2, "Protoss Arbiter", "[Skill]UseSkill", playerID);
            DoActions(KillUnitAt(1, "Protoss Carrier", "[Skill]UseSkill", playerID))
            # (Line 79) }
            DoActions(KillUnitAt(2, "Protoss Arbiter", "[Skill]UseSkill", playerID))
            # (Line 82) else if (Bring(playerID, AtLeast, 3, "Protoss Arbiter", "[Skill]UseSkill")
        _t12 = EUDElseIf()
        # (Line 83) && v.P_UltimateGauge[playerID] >= v.P_Ultimate1[playerID]
        # (Line 84) && v.P_Step[playerID] == 300)
        if _t12(EUDSCAnd()(Bring(playerID, AtLeast, 3, "Protoss Arbiter", "[Skill]UseSkill"))(v.P_UltimateGauge[playerID] >= v.P_Ultimate1[playerID])(v.P_Step[playerID] == 300)()):
            # (Line 85) {
            # (Line 86) if (Switch("UiltimateSwitch", Cleared))
            if EUDIf()(Switch("UiltimateSwitch", Cleared)):
                # (Line 87) {
                # (Line 88) s.CharacterVoice(10);
                s.CharacterVoice(10)
                # (Line 89) SetSwitch("UiltimateSwitch", Set);
                # (Line 90) CreateUnit(1, " Item. Flag", "[Uiltimate]Flag", CurrentPlayer);
                DoActions(SetSwitch("UiltimateSwitch", Set))
                # (Line 91) v.P_Step[playerID] = 330;
                DoActions(CreateUnit(1, " Item. Flag", "[Uiltimate]Flag", CurrentPlayer))
                _ARRW(v.P_Step, playerID) << (330)
                # (Line 92) v.P_SkillDelay[playerID] = 0;
                _ARRW(v.P_SkillDelay, playerID) << (0)
                # (Line 93) v.P_CountSub1[playerID] = 0;
                _ARRW(v.P_CountSub1, playerID) << (0)
                # (Line 94) SetDeaths(playerID, Subtract, v.P_Ultimate1[playerID], " `UltimateCoolTime");
                # (Line 95) KillUnitAt(3, "Protoss Arbiter", "[Skill]UseSkill", playerID);
                DoActions(SetDeaths(playerID, Subtract, v.P_Ultimate1[playerID], " `UltimateCoolTime"))
                # (Line 96) }
                DoActions(KillUnitAt(3, "Protoss Arbiter", "[Skill]UseSkill", playerID))
                # (Line 97) else
                # (Line 98) {
            if EUDElse()():
                # (Line 99) SetResources(CurrentPlayer, Add, 900, Gas);
                # (Line 100) KillUnitAt(3, "Protoss Arbiter", "[Skill]UseSkill", playerID);
                DoActions(SetResources(CurrentPlayer, Add, 900, Gas))
                # (Line 101) SetDeaths(CurrentPlayer, SetTo, 999, " `SYSTEMTEXT");
                DoActions(KillUnitAt(3, "Protoss Arbiter", "[Skill]UseSkill", playerID))
                # (Line 102) }
                DoActions(SetDeaths(CurrentPlayer, SetTo, 999, " `SYSTEMTEXT"))
                # (Line 103) }
            EUDEndIf()
            # (Line 104) }
        EUDEndIf()
        # (Line 105) }
    EUDEndIf()
