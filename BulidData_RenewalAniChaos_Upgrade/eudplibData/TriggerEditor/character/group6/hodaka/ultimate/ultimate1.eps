import PluginVariables as msqcvar;
import variable as v;
import func.trig as trg;
import func.trigadv as adv;
import func.sound as s;

var x = 0;
function main(playerID)
{
   trg.Buff_ShieldFix(1);
   trg.Debuff_BanReturn();
   trg.Effect_Recall();
   
   if (v.P_WaitMain[playerID] == 0)
   {
      if (v.P_CountMain[playerID] == 0)
      {
         if (v.P_LoopMain[playerID] == 0)
         {
            trg.Main_Wait(10000);   
         }
         
         else if (v.P_LoopMain[playerID] == 1)
         {
            s.CharacterVoice(10);
         }
         else if (v.P_LoopMain[playerID] <= 8)
         {
            trg.Shape_Edge(playerID,1,"60 + 1n Siege",0,4+x,96+(x*64));
            trg.Shape_Edge(playerID,1,"60 + 1n Siege",45,4+x,96+(x*64));
            trg.Shape_Edge(playerID,1,"40 + 1n Gantrithor",0,4+x,96+(x*64));
            trg.Shape_Edge(playerID,1,"40 + 1n Gantrithor",45,4+x,96+(x*64));
            trg.Shape_Dot(playerID,1,"40 + 1n Gantrithor",0,0);
            trg.MoveLoc(v.P_UnitID[playerID],playerID,0,0);
            Order("60 + 1n Siege",playerID,"Anywhere",Attack,v.P_LocationID[playerID]);
            KillUnitAt(All,"40 + 1n Gantrithor","Anywhere",playerID);
            trg.Main_Wait(100);
            x += 1;   
         }
         else if(v.P_LoopMain[playerID] == 9)
         {
            trg.Main_Wait(5100);
         }
         else if(v.P_LoopMain[playerID] == 10)
         {
            x = 0;
            KillUnitAt(All,"60 + 1n Siege","Anywhere",playerID);
            trg.Main_Wait(0);
         }
         else if(v.P_LoopMain[playerID] <= 21)
         {
            
            trg.Table_Sin(playerID, 18 * x, 48 * (x + 1));
            trg.Table_Cos(playerID, 18 * x, 48 * (x + 1));
            trg.Shape_Square(playerID,1,"40 + 1n Wraith",v.P_AngleCos[playerID],v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID,1,"Protoss Observer",v.P_AngleCos[playerID],v.P_AngleSin[playerID]);
            
            trg.Table_Sin(playerID, 2 + 18 * x, 48 * (x + 1));
            trg.Table_Cos(playerID, 2 + 18 * x, 48 * (x + 1));
            trg.Shape_Square(playerID,1,"60 + 1n Siege",v.P_AngleCos[playerID],v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID,1,"Protoss Observer",v.P_AngleCos[playerID],v.P_AngleSin[playerID]);
            
            trg.Table_Sin(playerID, 4 + 18 * x, 48 * (x + 1));
            trg.Table_Cos(playerID, 4 + 18 * x, 48 * (x + 1));
            trg.Shape_Square(playerID,1,"40 + 1n Mojo",v.P_AngleCos[playerID],v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID,1,"Protoss Observer",v.P_AngleCos[playerID],v.P_AngleSin[playerID]);
            
            trg.Table_Sin(playerID, 6 + 18 * x, 48 * (x + 1));
            trg.Table_Cos(playerID, 6 + 18 * x, 48 * (x + 1));
            trg.Shape_Square(playerID,1,"40 + 1n Wraith",v.P_AngleCos[playerID],v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID,1,"Protoss Observer",v.P_AngleCos[playerID],v.P_AngleSin[playerID]);
            
            trg.Table_Sin(playerID, 8 + 18 * x, 48 * (x + 1));
            trg.Table_Cos(playerID, 8 + 18 * x, 48 * (x + 1));
            trg.Shape_Square(playerID,1,"60 + 3n Siege",v.P_AngleCos[playerID],v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID,1,"Protoss Observer",v.P_AngleCos[playerID],v.P_AngleSin[playerID]);
            
            trg.Table_Sin(playerID, 10 + 18 * x, 48 * (x + 1));
            trg.Table_Cos(playerID, 10 + 18 * x, 48 * (x + 1));
            trg.Shape_Square(playerID,1,"40 + 1n Mojo",v.P_AngleCos[playerID],v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID,1,"Protoss Observer",v.P_AngleCos[playerID],v.P_AngleSin[playerID]);
            
            trg.Table_Sin(playerID, 12 + 18 * x, 48 * (x + 1));
            trg.Table_Cos(playerID, 12 + 18 * x, 48 * (x + 1));
            trg.Shape_Square(playerID,1,"40 + 1n Wraith",v.P_AngleCos[playerID],v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID,1,"Protoss Observer",v.P_AngleCos[playerID],v.P_AngleSin[playerID]);
            
            trg.Table_Sin(playerID, 14 + 18 * x, 48 * (x + 1));
            trg.Table_Cos(playerID, 14 + 18 * x, 48 * (x + 1));
            trg.Shape_Square(playerID,1,"60 + 1n Siege",v.P_AngleCos[playerID],v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID,1,"Protoss Observer",v.P_AngleCos[playerID],v.P_AngleSin[playerID]);
            
            trg.Table_Sin(playerID, 16 + 18 * x, 48 * (x + 1));
            trg.Table_Cos(playerID, 16 + 18 * x, 48 * (x + 1));
            trg.Shape_Square(playerID,1,"40 + 1n Mojo",v.P_AngleCos[playerID],v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID,1,"Protoss Observer",v.P_AngleCos[playerID],v.P_AngleSin[playerID]);
            
            KillUnitAt(All,"Protoss Observer","Anywhere",playerID);
            trg.MoveLoc(v.P_UnitID[playerID],playerID,0,0);
            Order("40 + 1n Wraith",playerID,"Anywhere",Attack,v.P_LocationID[playerID]);
            Order("40 + 1n Mojo",playerID,"Anywhere",Attack,v.P_LocationID[playerID]);
            trg.Main_Wait(100);
            x += 1;
         }
         else if(v.P_LoopMain[playerID] == 22)
         {
            x = 0;
            trg.Main_Wait(3600);
         }
         else if(v.P_LoopMain[playerID] == 23)
         {
            trg.Shape_NxNSquare(playerID,1,"130 + 1n Norad",6,96);
            trg.MoveLoc(v.P_UnitID[playerID],playerID,0,0);
            Order("130 + 1n Norad",playerID,"Anywhere",Attack,v.P_LocationID[playerID]);
            trg.Main_Wait(2000);
         }
         else if(v.P_LoopMain[playerID] == 24)
         {
            KillUnitAt(All,"60 + 3n Siege","Anywhere",playerID);
            KillUnitAt(All,"60 + 1n Siege","Anywhere",playerID);
            KillUnitAt(All,"40 + 1n Wraith","Anywhere",playerID);
            KillUnitAt(All,"40 + 1n Mojo","Anywhere",playerID);
            KillUnitAt(All,"130 + 1n Norad","Anywhere",playerID);
            SetSwitch("UiltimateSwitch", Clear);
            SetSwitch("Recall - MaiHime",Clear);
            trg.SkillEnd();
         }
         v.P_LoopMain[playerID] += 1;
      }
   }
}