## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 3) import variable as v;
import variable as v
# (Line 4) import func.trig as trg;
from func import trig as trg
# (Line 5) import func.trigadv as adv;
from func import trigadv as adv
# (Line 6) import func.sound as s;
from func import sound as s
# (Line 8) var x = 0;
x = EUDCreateVariables(1)
_IGVA([x], lambda: [0])
# (Line 9) function main(playerID)
# (Line 10) {
@EUDFunc
def f_main(playerID):
    # (Line 11) trg.Buff_ShieldFix(1);
    trg.Buff_ShieldFix(1)
    # (Line 12) trg.Debuff_BanReturn();
    trg.Debuff_BanReturn()
    # (Line 13) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 14) {
        # (Line 15) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 16) {
            # (Line 17) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 18) {
                # (Line 19) trg.Main_Wait(10000);
                trg.Main_Wait(10000)
                # (Line 20) }
                # (Line 22) else if (v.P_LoopMain[playerID] == 1)
            if EUDElseIf()(v.P_LoopMain[playerID] == 1):
                # (Line 23) {
                # (Line 24) s.CharacterVoice(10);
                s.CharacterVoice(10)
                # (Line 25) }
                # (Line 26) else if (v.P_LoopMain[playerID] <= 11)
            if EUDElseIf()(v.P_LoopMain[playerID] <= 11):
                # (Line 27) {
                # (Line 28) trg.Shape_NxNSquare(playerID,1,"60 + 1n Siege",1+x,96);
                trg.Shape_NxNSquare(playerID, 1, "60 + 1n Siege", 1 + x, 96)
                # (Line 29) trg.Shape_NxNSquare(playerID,1,"Protoss Observer",1+x,96);
                trg.Shape_NxNSquare(playerID, 1, "Protoss Observer", 1 + x, 96)
                # (Line 30) KillUnitAt(All,"Protoss Observer","Anywhere",playerID);
                # (Line 31) trg.Main_Wait(100);
                DoActions(KillUnitAt(All, "Protoss Observer", "Anywhere", playerID))
                trg.Main_Wait(100)
                # (Line 32) x += 1;
                x.__iadd__(1)
                # (Line 33) }
                # (Line 34) else if(v.P_LoopMain[playerID] == 12)
            if EUDElseIf()(v.P_LoopMain[playerID] == 12):
                # (Line 35) {
                # (Line 36) x = 0;
                x << (0)
                # (Line 37) trg.Main_Wait(4500);
                trg.Main_Wait(4500)
                # (Line 38) }
                # (Line 39) else if(v.P_LoopMain[playerID] <= 22)
            if EUDElseIf()(v.P_LoopMain[playerID] <= 22):
                # (Line 40) {
                # (Line 41) KillUnitAt(All,"60 + 1n Siege","Anywhere",playerID);
                # (Line 42) trg.Shape_NxNSquare(playerID,1,"40 + 1n Wraith",1+x,96);
                DoActions(KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID))
                trg.Shape_NxNSquare(playerID, 1, "40 + 1n Wraith", 1 + x, 96)
                # (Line 43) trg.Shape_NxNSquare(playerID,1,"Protoss Dark Templar",1+x,96);
                trg.Shape_NxNSquare(playerID, 1, "Protoss Dark Templar", 1 + x, 96)
                # (Line 44) KillUnitAt(All,"Protoss Dark Templar","Anywhere",playerID);
                # (Line 45) trg.MoveLoc(v.P_UnitID[playerID],playerID,0,0);
                DoActions(KillUnitAt(All, "Protoss Dark Templar", "Anywhere", playerID))
                trg.MoveLoc(v.P_UnitID[playerID], playerID, 0, 0)
                # (Line 46) Order("40 + 1n Wraith",playerID,"Anywhere",Attack,v.P_LocationID[playerID]);
                # (Line 47) trg.Main_Wait(100);
                DoActions(Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(100)
                # (Line 48) x += 1;
                x.__iadd__(1)
                # (Line 49) }
                # (Line 50) else if(v.P_LoopMain[playerID] == 23)
            if EUDElseIf()(v.P_LoopMain[playerID] == 23):
                # (Line 51) {
                # (Line 52) x = 0;
                x << (0)
                # (Line 53) trg.Main_Wait(3600);
                trg.Main_Wait(3600)
                # (Line 54) }
                # (Line 55) else if(v.P_LoopMain[playerID] == 24)
            if EUDElseIf()(v.P_LoopMain[playerID] == 24):
                # (Line 56) {
                # (Line 57) trg.Shape_NxNSquare(playerID,1,"50 + 1n Battlecruiser",13,64);
                trg.Shape_NxNSquare(playerID, 1, "50 + 1n Battlecruiser", 13, 64)
                # (Line 58) trg.MoveLoc(v.P_UnitID[playerID],playerID,0,0);
                trg.MoveLoc(v.P_UnitID[playerID], playerID, 0, 0)
                # (Line 59) Order("50 + 1n Battlecruiser",playerID,"Anywhere",Attack,v.P_LocationID[playerID]);
                # (Line 60) trg.Main_Wait(2400);
                DoActions(Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(2400)
                # (Line 61) }
                # (Line 62) else if(v.P_LoopMain[playerID] == 25)
            if EUDElseIf()(v.P_LoopMain[playerID] == 25):
                # (Line 63) {
                # (Line 64) KillUnitAt(All,"40 + 1n Wraith","Anywhere",playerID);
                # (Line 65) KillUnitAt(All,"50 + 1n Battlecruiser","Anywhere",playerID);
                DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                # (Line 66) SetSwitch("UiltimateSwitch", Clear);
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                # (Line 67) SetSwitch("Recall - MaiHime",Clear);
                DoActions(SetSwitch("UiltimateSwitch", Clear))
                # (Line 68) trg.SkillEnd();
                DoActions(SetSwitch("Recall - MaiHime", Clear))
                trg.SkillEnd()
                # (Line 69) }
                # (Line 70) v.P_LoopMain[playerID] += 1;
            EUDEndIf()
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 71) }
            # (Line 72) }
        EUDEndIf()
        # (Line 73) }
    EUDEndIf()
