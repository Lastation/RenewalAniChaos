## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import variable as v;
import variable as v
# (Line 2) import func.trig as trg;
from func import trig as trg
# (Line 3) import func.sound as s;
from func import sound as s
# (Line 5) const P_player		= PVariable();
P_player = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 6) const P_observer 	= PVariable();
P_observer = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 7) const P_type 		= PVariable();
P_type = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 9) function Text1(num);
# (Line 10) function Text2(num);
# (Line 11) function Text3(num);
# (Line 13) function player(playerID)
# (Line 14) {
@EUDFunc
def f_player(playerID):
    # (Line 15) if (P_type[playerID] == 1) { Text1(P_player[playerID]); }
    if EUDIf()(P_type[playerID] == 1):
        Text1(P_player[playerID])
        # (Line 16) if (P_type[playerID] == 2) { Text2(P_player[playerID]); }
    EUDEndIf()
    if EUDIf()(P_type[playerID] == 2):
        Text2(P_player[playerID])
        # (Line 17) if (P_type[playerID] == 3) { Text3(P_player[playerID]); }
    EUDEndIf()
    if EUDIf()(P_type[playerID] == 3):
        Text3(P_player[playerID])
        # (Line 18) P_player[playerID] = 0;
    EUDEndIf()
    _ARRW(P_player, playerID) << (0)
    # (Line 19) }
    # (Line 21) function observer(playerID)

# (Line 22) {
@EUDFunc
def f_observer(playerID):
    # (Line 23) if (P_type[playerID] == 1) { Text1(P_observer[playerID - 128]); }
    if EUDIf()(P_type[playerID] == 1):
        Text1(P_observer[playerID - 128])
        # (Line 24) if (P_type[playerID] == 2) { Text2(P_observer[playerID - 128]); }
    EUDEndIf()
    if EUDIf()(P_type[playerID] == 2):
        Text2(P_observer[playerID - 128])
        # (Line 25) if (P_type[playerID] == 3) { Text3(P_observer[playerID - 128]); }
    EUDEndIf()
    if EUDIf()(P_type[playerID] == 3):
        Text3(P_observer[playerID - 128])
        # (Line 26) P_observer[playerID - 128] = 0;
    EUDEndIf()
    _ARRW(P_observer, playerID - 128) << (0)
    # (Line 27) }
    # (Line 29) function main(playerID)

# (Line 30) {
@EUDFunc
def f_main(playerID):
    # (Line 31) if (playerID < 6) 	{ player(playerID); 	}
    if EUDIf()(playerID >= 6, neg=True):
        f_player(playerID)
        # (Line 32) else  			{ observer(playerID); }
    if EUDElse()():
        f_observer(playerID)
        # (Line 33) }
    EUDEndIf()
    # (Line 35) function Text1(num)

# (Line 36) {
@EUDFunc
def Text1(num):
    # (Line 37) switch (num)
    EUDSwitch(num)
    # (Line 38) {
    # (Line 39) case 4000:
    _t1 = EUDSwitchCase()
    # (Line 40) PlayWAV("Tenshi_01.ogg");
    if _t1(4000):
        # (Line 41) v.stb.print("\n\x13\x1FTenshi Hinanai\n\x13\x1F하늘\x04로서 \x1B대지\x04를 지배하고\n");
        DoActions(PlayWAV("Tenshi_01.ogg"))
        v.stb.print("\n\x13\x1FTenshi Hinanai\n\x13\x1F하늘\x04로서 \x1B대지\x04를 지배하고\n")
        # (Line 42) break;
        EUDBreak()
        # (Line 43) case 4001:
    _t2 = EUDSwitchCase()
    # (Line 44) PlayWAV("Tenshi_02.ogg");
    if _t2(4001):
        # (Line 45) v.stb.print("\n\x13\x1FTenshi Hinanai\n\x13\x15땅\x04으로서 \x1B요석\x04을 빼내어,\n");
        DoActions(PlayWAV("Tenshi_02.ogg"))
        v.stb.print("\n\x13\x1FTenshi Hinanai\n\x13\x15땅\x04으로서 \x1B요석\x04을 빼내어,\n")
        # (Line 46) break;
        EUDBreak()
        # (Line 47) case 4002:
    _t3 = EUDSwitchCase()
    # (Line 48) PlayWAV("Tenshi_03.ogg");
    if _t3(4002):
        # (Line 49) v.stb.print("\n\x13\x1FTenshi Hinanai\n\x13\x1B사람\x04의 \x11주홍색\x1B마음\x04을 비춰라 !\n");
        DoActions(PlayWAV("Tenshi_03.ogg"))
        v.stb.print("\n\x13\x1FTenshi Hinanai\n\x13\x1B사람\x04의 \x11주홍색\x1B마음\x04을 비춰라 !\n")
        # (Line 50) break;
        EUDBreak()
        # (Line 51) case 4003:
    _t4 = EUDSwitchCase()
    # (Line 52) PlayWAV("Tenshi_04.ogg");
    if _t4(4003):
        # (Line 53) v.stb.print("\n\x13\x1FTenshi Hinanai\n\x13\x15대지\x04여!\n");
        DoActions(PlayWAV("Tenshi_04.ogg"))
        v.stb.print("\n\x13\x1FTenshi Hinanai\n\x13\x15대지\x04여!\n")
        # (Line 54) break;
        EUDBreak()
        # (Line 55) }
    # (Line 56) }
    EUDEndSwitch()
    # (Line 58) function Text2(num)

# (Line 59) {
@EUDFunc
def Text2(num):
    # (Line 60) switch (num)
    EUDSwitch(num)
    # (Line 61) {
    # (Line 62) case 4000:
    _t1 = EUDSwitchCase()
    # (Line 63) PlayWAV("Tenshi_05.ogg");
    if _t1(4000):
        # (Line 64) v.stb.printAt(3, "\x13\x1FTenshi Hinanai\n\n\x13\x04피할 수 있을까 ?");
        DoActions(PlayWAV("Tenshi_05.ogg"))
        v.stb.printAt(3, "\x13\x1FTenshi Hinanai\n\n\x13\x04피할 수 있을까 ?")
        # (Line 65) break;
        EUDBreak()
        # (Line 66) case 4001:
    _t2 = EUDSwitchCase()
    # (Line 67) v.stb.printAt(3, "\x13\x1FTenshi Hinanai\n\n\x13\x04요석\x06「천지개벽 프레스」");
    if _t2(4001):
        v.stb.printAt(3, "\x13\x1FTenshi Hinanai\n\n\x13\x04요석\x06「천지개벽 프레스」")
        # (Line 68) break;
        EUDBreak()
        # (Line 69) case 4010:
    _t3 = EUDSwitchCase()
    # (Line 70) PlayWAV("Tenshi_Uiltimate.ogg");
    if _t3(4010):
        # (Line 71) v.stb.printAt(3, "\x13\x1FTenshi Hinanai\n\n\x13\x04단숨에 끝내주겠어");
        DoActions(PlayWAV("Tenshi_Uiltimate.ogg"))
        v.stb.printAt(3, "\x13\x1FTenshi Hinanai\n\n\x13\x04단숨에 끝내주겠어")
        # (Line 72) break;
        EUDBreak()
        # (Line 73) case 4011:
    _t4 = EUDSwitchCase()
    # (Line 74) v.stb.printAt(3, "\x13\x1FTenshi Hinanai\n\n\x13\x17끝이야");
    if _t4(4011):
        v.stb.printAt(3, "\x13\x1FTenshi Hinanai\n\n\x13\x17끝이야")
        # (Line 75) break;
        EUDBreak()
        # (Line 76) case 4012:
    _t5 = EUDSwitchCase()
    # (Line 77) v.stb.printAt(3, "\x13\x1FTenshi Hinanai\n\n\x13\x17「전 인류의 비상천」\n\x13\x17「全人類の緋想天」");
    if _t5(4012):
        v.stb.printAt(3, "\x13\x1FTenshi Hinanai\n\n\x13\x17「전 인류의 비상천」\n\x13\x17「全人類の緋想天」")
        # (Line 78) break;
        EUDBreak()
        # (Line 79) }
    # (Line 80) }
    EUDEndSwitch()
    # (Line 82) function Text3(num)

# (Line 83) {
@EUDFunc
def Text3(num):
    # (Line 84) switch (num)
    EUDSwitch(num)
    # (Line 85) {
    # (Line 86) case 4000:
    _t1 = EUDSwitchCase()
    # (Line 87) PlayWAV("Tenshi_Unique.ogg");
    if _t1(4000):
        # (Line 88) v.stb.printAt(3, "\x13\x1FTenshi Hinanai\n\x13\x04기부「무념무상의 경지」");
        DoActions(PlayWAV("Tenshi_Unique.ogg"))
        v.stb.printAt(3, "\x13\x1FTenshi Hinanai\n\x13\x04기부「무념무상의 경지」")
        # (Line 89) break;
        EUDBreak()
        # (Line 90) }
    # (Line 91) }
    EUDEndSwitch()
