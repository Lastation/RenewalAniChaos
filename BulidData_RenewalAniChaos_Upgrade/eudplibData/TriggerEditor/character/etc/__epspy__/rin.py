## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _RELIMP(path, mod_name):
    import inspect, pathlib, importlib.util
    p = pathlib.Path(inspect.getabsfile(inspect.currentframe())).parent
    for s in path.split("."):
        if s == "":  p = p.parent
        else:  p = p / s
    try:
        spec = importlib.util.spec_from_file_location(mod_name, p / (mod_name + ".py"))
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
    except FileNotFoundError:
        loader = EPSLoader(mod_name, str(p / (mod_name + ".eps")))
        spec = importlib.util.spec_from_loader(mod_name, loader)
        module = loader.create_module(spec)
        loader.exec_module(module)
    return module

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 4) import func.sound as s;
from func import sound as s
# (Line 6) const P_player		= PVariable();
P_player = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 7) const P_observer 	= PVariable();
P_observer = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 8) const P_type 		= PVariable();
P_type = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 10) function Text1(num);
# (Line 11) function Text2(num);
# (Line 12) function Text3(num);
# (Line 14) function player(playerID)
# (Line 15) {
@EUDFunc
def f_player(playerID):
    # (Line 16) if (P_type[playerID] == 1) { Text1(P_player[playerID]); }
    if EUDIf()(P_type[playerID] == 1):
        Text1(P_player[playerID])
        # (Line 17) if (P_type[playerID] == 2) { Text2(P_player[playerID]); }
    EUDEndIf()
    if EUDIf()(P_type[playerID] == 2):
        Text2(P_player[playerID])
        # (Line 18) if (P_type[playerID] == 3) { Text3(P_player[playerID]); }
    EUDEndIf()
    if EUDIf()(P_type[playerID] == 3):
        Text3(P_player[playerID])
        # (Line 19) P_player[playerID] = 0;
    EUDEndIf()
    _ARRW(P_player, playerID) << (0)
    # (Line 20) }
    # (Line 22) function observer(playerID)

# (Line 23) {
@EUDFunc
def f_observer(playerID):
    # (Line 24) if (P_type[playerID] == 1) { Text1(P_observer[playerID - 128]); }
    if EUDIf()(P_type[playerID] == 1):
        Text1(P_observer[playerID - 128])
        # (Line 25) if (P_type[playerID] == 2) { Text2(P_observer[playerID - 128]); }
    EUDEndIf()
    if EUDIf()(P_type[playerID] == 2):
        Text2(P_observer[playerID - 128])
        # (Line 26) if (P_type[playerID] == 3) { Text3(P_observer[playerID - 128]); }
    EUDEndIf()
    if EUDIf()(P_type[playerID] == 3):
        Text3(P_observer[playerID - 128])
        # (Line 27) P_observer[playerID - 128] = 0;
    EUDEndIf()
    _ARRW(P_observer, playerID - 128) << (0)
    # (Line 28) }
    # (Line 30) function main(playerID)

# (Line 31) {
@EUDFunc
def f_main(playerID):
    # (Line 32) if (playerID < 6) 	{ player(playerID); 	}
    if EUDIf()(playerID >= 6, neg=True):
        f_player(playerID)
        # (Line 33) else  			{ observer(playerID); }
    if EUDElse()():
        f_observer(playerID)
        # (Line 34) }
    EUDEndIf()
    # (Line 39) function Text1(num)

# (Line 40) {
@EUDFunc
def Text1(num):
    # (Line 41) switch (num)
    EUDSwitch(num)
    # (Line 42) {
    # (Line 43) case 3000:
    _t1 = EUDSwitchCase()
    # (Line 44) PlayWAV("Rin_01.ogg");
    if _t1(3000):
        # (Line 45) v.stb.print("\n\n\x13\x1BRin\n\x13\x04이 앞에 무엇이 있는 걸까?\n\n");
        DoActions(PlayWAV("Rin_01.ogg"))
        v.stb.print("\n\n\x13\x1BRin\n\x13\x04이 앞에 무엇이 있는 걸까?\n\n")
        # (Line 47) break;
        EUDBreak()
        # (Line 48) case 3001:
    _t2 = EUDSwitchCase()
    # (Line 49) PlayWAV("Rin_02.ogg");
    if _t2(3001):
        # (Line 50) v.stb.print("\n\n\x13\x1BRin\n\x13\x04언제부턴가, 생각하지 않게 됐다\n\n");
        DoActions(PlayWAV("Rin_02.ogg"))
        v.stb.print("\n\n\x13\x1BRin\n\x13\x04언제부턴가, 생각하지 않게 됐다\n\n")
        # (Line 52) break;
        EUDBreak()
        # (Line 53) case 3002:
    _t3 = EUDSwitchCase()
    # (Line 54) PlayWAV("Rin_03.ogg");
    if _t3(3002):
        # (Line 55) v.stb.print("\n\n\x13\x1BRin\n\x13\x04생각하는 방법... 그것조차 잊어버린 걸지도\n\n");
        DoActions(PlayWAV("Rin_03.ogg"))
        v.stb.print("\n\n\x13\x1BRin\n\x13\x04생각하는 방법... 그것조차 잊어버린 걸지도\n\n")
        # (Line 57) break;
        EUDBreak()
        # (Line 58) case 3003:
    _t4 = EUDSwitchCase()
    # (Line 59) PlayWAV("Rin_04.ogg");
    if _t4(3003):
        # (Line 60) v.stb.print("\n\n\x13\x1BRin\n\x13\x04변하지 않는, 나만의 세계가 매일매일 계속된다\n\n");
        DoActions(PlayWAV("Rin_04.ogg"))
        v.stb.print("\n\n\x13\x1BRin\n\x13\x04변하지 않는, 나만의 세계가 매일매일 계속된다\n\n")
        # (Line 62) break;
        EUDBreak()
        # (Line 63) case 3004:
    _t5 = EUDSwitchCase()
    # (Line 64) PlayWAV("Rin_05.ogg");
    if _t5(3004):
        # (Line 65) v.stb.print("\n\n\x13\x1BRin\n\x13\x04하지만 외롭지는 않아\n\n");
        DoActions(PlayWAV("Rin_05.ogg"))
        v.stb.print("\n\n\x13\x1BRin\n\x13\x04하지만 외롭지는 않아\n\n")
        # (Line 67) break;
        EUDBreak()
        # (Line 68) case 3005:
    _t6 = EUDSwitchCase()
    # (Line 69) PlayWAV("Rin_06.ogg");
    if _t6(3005):
        # (Line 70) v.stb.print("\n\n\x13\x1BRin\n\x13\x04별 것 아니니까\n\n");
        DoActions(PlayWAV("Rin_06.ogg"))
        v.stb.print("\n\n\x13\x1BRin\n\x13\x04별 것 아니니까\n\n")
        # (Line 72) break;
        EUDBreak()
        # (Line 73) }
    # (Line 74) }
    EUDEndSwitch()
    # (Line 76) function Text2(num)

# (Line 77) {
@EUDFunc
def Text2(num):
    # (Line 78) switch (num)
    EUDSwitch(num)
    # (Line 79) {
    # (Line 80) case 15000:
    _t1 = EUDSwitchCase()
    # (Line 81) PlayWAV("Rin_Ult.ogg");
    if _t1(15000):
        # (Line 83) break;
        DoActions(PlayWAV("Rin_Ult.ogg"))
        EUDBreak()
        # (Line 84) case 15001:
    _t2 = EUDSwitchCase()
    # (Line 85) v.stb.printAt(3,"\x13\x1BRin\n\x13\x04추억이, 슬픈 것이었다고 해도");
    if _t2(15001):
        v.stb.printAt(3, "\x13\x1BRin\n\x13\x04추억이, 슬픈 것이었다고 해도")
        # (Line 87) break;
        EUDBreak()
        # (Line 88) case 15002:
    _t3 = EUDSwitchCase()
    # (Line 89) v.stb.printAt(3,"\x13\x1BRin\n\x13\x04미래를 믿으며 나아가는 거야");
    if _t3(15002):
        v.stb.printAt(3, "\x13\x1BRin\n\x13\x04미래를 믿으며 나아가는 거야")
        # (Line 91) break;
        EUDBreak()
        # (Line 92) case 15003:
    _t4 = EUDSwitchCase()
    # (Line 93) v.stb.printAt(3,"\x13\x1BRin\n\x13\x04외로움을 깨달아서");
    if _t4(15003):
        v.stb.printAt(3, "\x13\x1BRin\n\x13\x04외로움을 깨달아서")
        # (Line 95) break;
        EUDBreak()
        # (Line 96) case 15004:
    _t5 = EUDSwitchCase()
    # (Line 97) v.stb.printAt(3,"\x13\x1BRin\n\x13\x04좌절하고 싶어져도");
    if _t5(15004):
        v.stb.printAt(3, "\x13\x1BRin\n\x13\x04좌절하고 싶어져도")
        # (Line 99) break;
        EUDBreak()
        # (Line 100) case 15005:
    _t6 = EUDSwitchCase()
    # (Line 101) v.stb.printAt(3,"\x13\x1BRin\n\x13\x04당신 덕분에");
    if _t6(15005):
        v.stb.printAt(3, "\x13\x1BRin\n\x13\x04당신 덕분에")
        # (Line 103) break;
        EUDBreak()
        # (Line 104) case 15006:
    _t7 = EUDSwitchCase()
    # (Line 105) v.stb.printAt(3,"\x13\x1BRin\n\x13\x04기억해내서");
    if _t7(15006):
        v.stb.printAt(3, "\x13\x1BRin\n\x13\x04기억해내서")
        # (Line 107) break;
        EUDBreak()
        # (Line 108) case 15007:
    _t8 = EUDSwitchCase()
    # (Line 109) v.stb.printAt(3,"\x13\x1BRin\n\x13\x04강해질 수 있는 거야");
    if _t8(15007):
        v.stb.printAt(3, "\x13\x1BRin\n\x13\x04강해질 수 있는 거야")
        # (Line 111) break;
        EUDBreak()
        # (Line 112) case 15008:
    _t9 = EUDSwitchCase()
    # (Line 113) v.stb.printAt(3,"\x13\x1BRin\n\x13\x04혼자가 아니라고...");
    if _t9(15008):
        v.stb.printAt(3, "\x13\x1BRin\n\x13\x04혼자가 아니라고...")
        # (Line 115) break;
        EUDBreak()
        # (Line 116) case 15009:
    _t10 = EUDSwitchCase()
    # (Line 117) v.stb.printAt(3,"\x13\x1BRin\n\x13\x04당신 덕분에...");
    if _t10(15009):
        v.stb.printAt(3, "\x13\x1BRin\n\x13\x04당신 덕분에...")
        # (Line 119) break;
        EUDBreak()
        # (Line 120) }
    # (Line 121) }
    EUDEndSwitch()
    # (Line 123) function Text3(num)

# (Line 124) {
@EUDFunc
def Text3(num):
    # (Line 125) switch (num)
    EUDSwitch(num)
    # (Line 126) {
    # (Line 127) case 15000:
    _t1 = EUDSwitchCase()
    # (Line 128) v.stb.print("\n\n\x13\x1BRin\n\x13\x04고마워요...\n\n");
    if _t1(15000):
        v.stb.print("\n\n\x13\x1BRin\n\x13\x04고마워요...\n\n")
        # (Line 129) PlayWAV("Rin_Unique.ogg");
        # (Line 131) break;
        DoActions(PlayWAV("Rin_Unique.ogg"))
        EUDBreak()
        # (Line 132) }
    # (Line 133) }
    EUDEndSwitch()
