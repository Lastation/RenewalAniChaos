## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 4) import func.trigepic as epic;
from func import trigepic as epic
# (Line 5) import func.trigadv as adv;
from func import trigadv as adv
# (Line 6) import func.sound as s;
from func import sound as s
# (Line 8) var x = 0;
x = EUDCreateVariables(1)
_IGVA([x], lambda: [0])
# (Line 9) var y = 0;
y = EUDCreateVariables(1)
_IGVA([y], lambda: [0])
# (Line 11) var d = 0;
d = EUDCreateVariables(1)
_IGVA([d], lambda: [0])
# (Line 13) function Shape_X(playerID : TrgPlayer, count, unit : TrgUnit);
# (Line 14) function Shape_Dia(playerID : TrgPlayer, count, unit : TrgUnit);
# (Line 15) function Shape_DoubleX(playerID : TrgPlayer, count, unit : TrgUnit);
# (Line 17) function main(playerID)
# (Line 18) {
@EUDFunc
def f_main(playerID):
    # (Line 19) trg.Debuff_BanReturn();
    trg.Debuff_BanReturn()
    # (Line 20) if (v.P_CountMain[playerID] <= 2 && v.P_LoopMain[playerID] % 2 == 0)
    if EUDIf()(EUDSCAnd()(v.P_CountMain[playerID] <= 2)(v.P_LoopMain[playerID] % 2 == 0)()):
        # (Line 21) {
        # (Line 22) MoveUnit(All, "80 + 1n Artanis", playerID, "Anywhere", "[Skill]HoldPosition");
        # (Line 23) }
        DoActions(MoveUnit(All, "80 + 1n Artanis", playerID, "Anywhere", "[Skill]HoldPosition"))
        # (Line 24) MoveUnit(All, "60 + 1n Archon", playerID, "Anywhere", "[Skill]HoldPosition");
    EUDEndIf()
    # (Line 25) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
    DoActions(MoveUnit(All, "60 + 1n Archon", playerID, "Anywhere", "[Skill]HoldPosition"))
    # (Line 27) if (v.P_WaitMain[playerID] == 0)
    DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 28) {
        # (Line 29) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 30) {
            # (Line 31) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 32) {
                # (Line 33) Shape_X(playerID, 1, "40 + 1n Mojo");
                Shape_X(playerID, 1, "40 + 1n Mojo")
                # (Line 34) Shape_X(playerID, 1, "60 + 1n Archon");
                Shape_X(playerID, 1, "60 + 1n Archon")
                # (Line 36) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 37) Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 39) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 40) }
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 41) else if (v.P_LoopMain[playerID] == 2)
            if EUDElseIf()(v.P_LoopMain[playerID] == 2):
                # (Line 42) {
                # (Line 43) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
                # (Line 45) Shape_X(playerID, 1, "60 + 1n High Templar");
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
                Shape_X(playerID, 1, "60 + 1n High Templar")
                # (Line 46) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
                # (Line 47) }
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
                # (Line 48) else if (v.P_LoopMain[playerID] == 4)
            if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                # (Line 49) {
                # (Line 50) Shape_X(playerID, 1, "Kakaru (Twilight)");
                Shape_X(playerID, 1, "Kakaru (Twilight)")
                # (Line 51) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                # (Line 52) }
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                # (Line 54) var d = 23 * v.P_LoopMain[playerID];
            EUDEndIf()
            d_1 = EUDVariable()
            d_1 << (23 * v.P_LoopMain[playerID])
            # (Line 55) var distance = 50 + 50 * (v.P_LoopMain[playerID] % 5);
            distance = EUDVariable()
            distance << (50 + 50 * (v.P_LoopMain[playerID] % 5))
            # (Line 57) trg.Table_Sin(playerID, d, distance);
            trg.Table_Sin(playerID, d_1, distance)
            # (Line 58) trg.Table_Cos(playerID, d, distance);
            trg.Table_Cos(playerID, d_1, distance)
            # (Line 60) var x = v.P_AngleCos[playerID];
            x_1 = EUDVariable()
            x_1 << (v.P_AngleCos[playerID])
            # (Line 61) var y = v.P_AngleSin[playerID];
            y_1 = EUDVariable()
            y_1 << (v.P_AngleSin[playerID])
            # (Line 63) adv.Shape_QuadNxNSquareAt(playerID, 1, "60 + 1n High Templar", 2, 50, x, y);
            adv.Shape_QuadNxNSquareAt(playerID, 1, "60 + 1n High Templar", 2, 50, x_1, y_1)
            # (Line 65) trg.Main_Wait(80);
            trg.Main_Wait(80)
            # (Line 67) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 69) if (v.P_LoopMain[playerID] == 46)
            if EUDIf()(v.P_LoopMain[playerID] == 46):
                # (Line 70) {
                # (Line 71) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 72) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 73) }
                # (Line 74) }
            EUDEndIf()
            # (Line 75) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 76) {
            # (Line 77) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 78) {
                # (Line 79) Shape_Dia(playerID, 1, "40 + 1n Mojo");
                Shape_Dia(playerID, 1, "40 + 1n Mojo")
                # (Line 80) Shape_Dia(playerID, 1, "60 + 1n Archon");
                Shape_Dia(playerID, 1, "60 + 1n Archon")
                # (Line 82) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 83) Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 85) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 86) }
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 87) else if (v.P_LoopMain[playerID] == 2)
            if EUDElseIf()(v.P_LoopMain[playerID] == 2):
                # (Line 88) {
                # (Line 89) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
                # (Line 91) Shape_Dia(playerID, 1, "60 + 1n Archon");
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
                Shape_Dia(playerID, 1, "60 + 1n Archon")
                # (Line 93) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 94) MoveUnit(All, "60 + 1n Archon", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 95) Order("60 + 1n Archon", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "60 + 1n Archon", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 96) }
                DoActions(Order("60 + 1n Archon", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 97) else if (v.P_LoopMain[playerID] == 4)
            if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                # (Line 98) {
                # (Line 99) Shape_Dia(playerID, 1, "Kakaru (Twilight)");
                Shape_Dia(playerID, 1, "Kakaru (Twilight)")
                # (Line 100) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                # (Line 101) }
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                # (Line 103) var d = 23 * v.P_LoopMain[playerID];
            EUDEndIf()
            d_1 = EUDVariable()
            d_1 << (23 * v.P_LoopMain[playerID])
            # (Line 104) var distance = 50 + 50 * (v.P_LoopMain[playerID] % 5);
            distance = EUDVariable()
            distance << (50 + 50 * (v.P_LoopMain[playerID] % 5))
            # (Line 106) trg.Table_Sin(playerID, d, distance);
            trg.Table_Sin(playerID, d_1, distance)
            # (Line 107) trg.Table_Cos(playerID, d, distance);
            trg.Table_Cos(playerID, d_1, distance)
            # (Line 109) var x = v.P_AngleCos[playerID];
            x_1 = EUDVariable()
            x_1 << (v.P_AngleCos[playerID])
            # (Line 110) var y = v.P_AngleSin[playerID];
            y_1 = EUDVariable()
            y_1 << (v.P_AngleSin[playerID])
            # (Line 112) adv.Shape_QuadNxNSquareAt(playerID, 1, "60 + 1n High Templar", 2, 50, x, y);
            adv.Shape_QuadNxNSquareAt(playerID, 1, "60 + 1n High Templar", 2, 50, x_1, y_1)
            # (Line 114) if (v.P_LoopMain[playerID] % 5 == 4)
            if EUDIf()(v.P_LoopMain[playerID] % 5 == 4):
                # (Line 115) {
                # (Line 116) trg.Shape_Square(playerID, 1, "80 + 1n Artanis", x, y);
                trg.Shape_Square(playerID, 1, "80 + 1n Artanis", x_1, y_1)
                # (Line 117) }
                # (Line 118) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
            EUDEndIf()
            # (Line 119) Order("80 + 1n Artanis", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
            # (Line 121) trg.Main_Wait(80);
            DoActions(Order("80 + 1n Artanis", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
            trg.Main_Wait(80)
            # (Line 123) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 125) if (v.P_LoopMain[playerID] == 27)
            if EUDIf()(v.P_LoopMain[playerID] == 27):
                # (Line 126) {
                # (Line 127) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 128) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 129) }
                # (Line 130) }
            EUDEndIf()
            # (Line 131) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 132) {
            # (Line 133) RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
            # (Line 135) if (v.P_LoopMain[playerID] < 8)
            DoActions(RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
            if EUDIf()(v.P_LoopMain[playerID] >= 8, neg=True):
                # (Line 136) {
                # (Line 137) trg.Shape_Cross(playerID, 1, "40 + 1n Wraith", 45, v.P_LoopMain[playerID] + 1, 50);
                trg.Shape_Cross(playerID, 1, "40 + 1n Wraith", 45, v.P_LoopMain[playerID] + 1, 50)
                # (Line 138) trg.Shape_Cross(playerID, 1, "60 + 1n High Templar", 45, v.P_LoopMain[playerID] + 1, 50);
                trg.Shape_Cross(playerID, 1, "60 + 1n High Templar", 45, v.P_LoopMain[playerID] + 1, 50)
                # (Line 140) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 141) Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 143) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
                DoActions(Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 144) }
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
                # (Line 145) else if (v.P_LoopMain[playerID] < 18)
            if EUDElseIf()(v.P_LoopMain[playerID] >= 18, neg=True):
                # (Line 146) {
                # (Line 147) trg.Shape_Cross(playerID, 1, "40 + 1n Wraith", 45, 8, 50);
                trg.Shape_Cross(playerID, 1, "40 + 1n Wraith", 45, 8, 50)
                # (Line 148) trg.Shape_Cross(playerID, 1, "60 + 1n High Templar", 45, 8, 50);
                trg.Shape_Cross(playerID, 1, "60 + 1n High Templar", 45, 8, 50)
                # (Line 150) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 151) Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 153) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
                DoActions(Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 154) }
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
                # (Line 155) else if (v.P_LoopMain[playerID] < 27)
            if EUDElseIf()(v.P_LoopMain[playerID] >= 27, neg=True):
                # (Line 156) {
                # (Line 157) Shape_DoubleX(playerID, 1, "40 + 1n Wraith");
                Shape_DoubleX(playerID, 1, "40 + 1n Wraith")
                # (Line 158) Shape_DoubleX(playerID, 1, "60 + 1n High Templar");
                Shape_DoubleX(playerID, 1, "60 + 1n High Templar")
                # (Line 160) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 161) Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 163) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
                DoActions(Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 164) }
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
                # (Line 165) else if (v.P_LoopMain[playerID] == 28)
            if EUDElseIf()(v.P_LoopMain[playerID] == 28):
                # (Line 166) {
                # (Line 167) Shape_DoubleX(playerID, 1, "40 + 1n Wraith");
                Shape_DoubleX(playerID, 1, "40 + 1n Wraith")
                # (Line 168) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
                # (Line 169) }
                DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                # (Line 170) else if (v.P_LoopMain[playerID] == 34)
            if EUDElseIf()(v.P_LoopMain[playerID] == 34):
                # (Line 171) {
                # (Line 172) trg.Shape_NxNSquare(playerID, 1, "40 + 1n Mojo", 11, 50);
                trg.Shape_NxNSquare(playerID, 1, "40 + 1n Mojo", 11, 50)
                # (Line 173) trg.Shape_NxNSquare(playerID, 1, "60 + 1n Archon", 11, 50);
                trg.Shape_NxNSquare(playerID, 1, "60 + 1n Archon", 11, 50)
                # (Line 175) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 176) Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 178) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 179) }
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 180) else if (v.P_LoopMain[playerID] == 36)
            if EUDElseIf()(v.P_LoopMain[playerID] == 36):
                # (Line 181) {
                # (Line 182) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
                # (Line 184) trg.Shape_NxNSquare(playerID, 1, "60 + 1n High Templar", 11, 50);
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
                trg.Shape_NxNSquare(playerID, 1, "60 + 1n High Templar", 11, 50)
                # (Line 185) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
                # (Line 186) }
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
                # (Line 187) else if (v.P_LoopMain[playerID] == 38)
            if EUDElseIf()(v.P_LoopMain[playerID] == 38):
                # (Line 188) {
                # (Line 189) trg.Shape_NxNSquare(playerID, 1, "Kakaru (Twilight)", 11, 50);
                trg.Shape_NxNSquare(playerID, 1, "Kakaru (Twilight)", 11, 50)
                # (Line 190) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                # (Line 191) }
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                # (Line 193) var d = 23 * v.P_LoopMain[playerID];
            EUDEndIf()
            d_1 = EUDVariable()
            d_1 << (23 * v.P_LoopMain[playerID])
            # (Line 194) var distance = 50 + 50 * (v.P_LoopMain[playerID] % 5);
            distance = EUDVariable()
            distance << (50 + 50 * (v.P_LoopMain[playerID] % 5))
            # (Line 196) trg.Table_Sin(playerID, d, distance);
            trg.Table_Sin(playerID, d_1, distance)
            # (Line 197) trg.Table_Cos(playerID, d, distance);
            trg.Table_Cos(playerID, d_1, distance)
            # (Line 199) var x = v.P_AngleCos[playerID];
            x_1 = EUDVariable()
            x_1 << (v.P_AngleCos[playerID])
            # (Line 200) var y = v.P_AngleSin[playerID];
            y_1 = EUDVariable()
            y_1 << (v.P_AngleSin[playerID])
            # (Line 202) adv.Shape_QuadNxNSquareAt(playerID, 1, "60 + 1n High Templar", 2, 50, x, y);
            adv.Shape_QuadNxNSquareAt(playerID, 1, "60 + 1n High Templar", 2, 50, x_1, y_1)
            # (Line 204) if (v.P_LoopMain[playerID] % 5 == 4)
            if EUDIf()(v.P_LoopMain[playerID] % 5 == 4):
                # (Line 205) {
                # (Line 206) trg.Shape_Square(playerID, 1, "80 + 1n Artanis", x, y);
                trg.Shape_Square(playerID, 1, "80 + 1n Artanis", x_1, y_1)
                # (Line 207) }
                # (Line 208) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
            EUDEndIf()
            # (Line 209) Order("80 + 1n Artanis", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
            # (Line 211) trg.Main_Wait(80);
            DoActions(Order("80 + 1n Artanis", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
            trg.Main_Wait(80)
            # (Line 213) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 215) if (v.P_LoopMain[playerID] == 80)
            if EUDIf()(v.P_LoopMain[playerID] == 80):
                # (Line 216) {
                # (Line 217) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 218) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 219) }
                # (Line 220) }
            EUDEndIf()
            # (Line 221) else if (v.P_CountMain[playerID] == 3)
        if EUDElseIf()(v.P_CountMain[playerID] == 3):
            # (Line 222) {
            # (Line 223) if (v.P_LoopMain[playerID] < 8)
            if EUDIf()(v.P_LoopMain[playerID] >= 8, neg=True):
                # (Line 224) {
                # (Line 225) trg.Shape_NxNSquare(playerID, 1, "Rhynadon (Badlands)", 4 + v.P_LoopMain[playerID], 50);
                trg.Shape_NxNSquare(playerID, 1, "Rhynadon (Badlands)", 4 + v.P_LoopMain[playerID], 50)
                # (Line 226) KillUnitAt(All, "Rhynadon (Badlands)", "Anywhere", playerID);
                # (Line 227) }
                DoActions(KillUnitAt(All, "Rhynadon (Badlands)", "Anywhere", playerID))
                # (Line 228) else if (v.P_LoopMain[playerID] == 8)
            if EUDElseIf()(v.P_LoopMain[playerID] == 8):
                # (Line 229) {
                # (Line 230) trg.Shape_NxNSquare(playerID, 1, "40 + 1n Wraith", 3, 50);
                trg.Shape_NxNSquare(playerID, 1, "40 + 1n Wraith", 3, 50)
                # (Line 231) trg.Shape_NxNSquare(playerID, 1, "Bengalaas (Jungle)", 3, 50);
                trg.Shape_NxNSquare(playerID, 1, "Bengalaas (Jungle)", 3, 50)
                # (Line 232) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
                # (Line 233) KillUnitAt(All, "Bengalaas (Jungle)", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                # (Line 234) }
                DoActions(KillUnitAt(All, "Bengalaas (Jungle)", "Anywhere", playerID))
                # (Line 235) else if (v.P_LoopMain[playerID] == 9)
            if EUDElseIf()(v.P_LoopMain[playerID] == 9):
                # (Line 236) {
                # (Line 237) trg.Shape_NxNSquare(playerID, 1, "40 + 1n Wraith", 7, 50);
                trg.Shape_NxNSquare(playerID, 1, "40 + 1n Wraith", 7, 50)
                # (Line 238) trg.Shape_NxNSquare(playerID, 1, "Bengalaas (Jungle)", 7, 50);
                trg.Shape_NxNSquare(playerID, 1, "Bengalaas (Jungle)", 7, 50)
                # (Line 239) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
                # (Line 240) KillUnitAt(All, "Bengalaas (Jungle)", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                # (Line 241) }
                DoActions(KillUnitAt(All, "Bengalaas (Jungle)", "Anywhere", playerID))
                # (Line 242) else if (v.P_LoopMain[playerID] == 10)
            if EUDElseIf()(v.P_LoopMain[playerID] == 10):
                # (Line 243) {
                # (Line 244) trg.Shape_NxNSquare(playerID, 1, "40 + 1n Wraith", 11, 50);
                trg.Shape_NxNSquare(playerID, 1, "40 + 1n Wraith", 11, 50)
                # (Line 245) trg.Shape_NxNSquare(playerID, 1, "Bengalaas (Jungle)", 11, 50);
                trg.Shape_NxNSquare(playerID, 1, "Bengalaas (Jungle)", 11, 50)
                # (Line 246) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
                # (Line 247) KillUnitAt(All, "Bengalaas (Jungle)", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                # (Line 248) }
                DoActions(KillUnitAt(All, "Bengalaas (Jungle)", "Anywhere", playerID))
                # (Line 249) else if (v.P_LoopMain[playerID] == 11)
            if EUDElseIf()(v.P_LoopMain[playerID] == 11):
                # (Line 250) {
                # (Line 251) trg.Shape_NxNSquare(playerID, 1, "40 + 1n Guardian", 11, 50);
                trg.Shape_NxNSquare(playerID, 1, "40 + 1n Guardian", 11, 50)
                # (Line 252) trg.Shape_NxNSquare(playerID, 1, "60 + 1n Archon", 11, 50);
                trg.Shape_NxNSquare(playerID, 1, "60 + 1n Archon", 11, 50)
                # (Line 253) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                # (Line 254) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                # (Line 255) }
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 256) else if (v.P_LoopMain[playerID] == 12)
            if EUDElseIf()(v.P_LoopMain[playerID] == 12):
                # (Line 257) {
                # (Line 258) trg.Shape_NxNSquare(playerID, 1, "Kakaru (Twilight)", 11, 50);
                trg.Shape_NxNSquare(playerID, 1, "Kakaru (Twilight)", 11, 50)
                # (Line 259) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                # (Line 260) }
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                # (Line 263) var d = 3 * v.P_LoopMain[playerID];
            EUDEndIf()
            d_1 = EUDVariable()
            d_1 << (3 * v.P_LoopMain[playerID])
            # (Line 264) var distance = 50 + 50 * (v.P_LoopMain[playerID] % 5);
            distance = EUDVariable()
            distance << (50 + 50 * (v.P_LoopMain[playerID] % 5))
            # (Line 266) trg.Table_Sin(playerID, d, distance);
            trg.Table_Sin(playerID, d_1, distance)
            # (Line 267) trg.Table_Cos(playerID, d, distance);
            trg.Table_Cos(playerID, d_1, distance)
            # (Line 269) var x = v.P_AngleCos[playerID];
            x_1 = EUDVariable()
            x_1 << (v.P_AngleCos[playerID])
            # (Line 270) var y = v.P_AngleSin[playerID];
            y_1 = EUDVariable()
            y_1 << (v.P_AngleSin[playerID])
            # (Line 272) adv.Shape_QuadNxNSquareAt(playerID, 1, "60 + 1n High Templar", 3, 50, x, y);
            adv.Shape_QuadNxNSquareAt(playerID, 1, "60 + 1n High Templar", 3, 50, x_1, y_1)
            # (Line 274) if (v.P_LoopMain[playerID] % 5 == 4)
            if EUDIf()(v.P_LoopMain[playerID] % 5 == 4):
                # (Line 275) {
                # (Line 276) trg.Shape_Square(playerID, 1, "80 + 1n Artanis", x, y);
                trg.Shape_Square(playerID, 1, "80 + 1n Artanis", x_1, y_1)
                # (Line 277) }
                # (Line 278) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
            EUDEndIf()
            # (Line 279) Order("80 + 1n Artanis", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
            # (Line 281) trg.Main_Wait(80);
            DoActions(Order("80 + 1n Artanis", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
            trg.Main_Wait(80)
            # (Line 283) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 285) if (v.P_LoopMain[playerID] == 20)
            if EUDIf()(v.P_LoopMain[playerID] == 20):
                # (Line 286) {
                # (Line 287) KillUnitAt(All, "80 + 1n Artanis", "Anywhere", playerID);
                # (Line 289) v.P_CountMain[playerID] += 1;
                DoActions(KillUnitAt(All, "80 + 1n Artanis", "Anywhere", playerID))
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 290) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 291) }
                # (Line 292) }
            EUDEndIf()
            # (Line 293) else if (v.P_CountMain[playerID] == 4)
        if EUDElseIf()(v.P_CountMain[playerID] == 4):
            # (Line 294) {
            # (Line 295) if (v.P_LoopMain[playerID] < 20)
            if EUDIf()(v.P_LoopMain[playerID] >= 20, neg=True):
                # (Line 296) {
                # (Line 297) RemoveUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
                # (Line 299) trg.Shape_NxNSquare(playerID, 1, "40 + 1n Mojo", 11, 50);
                DoActions(RemoveUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
                trg.Shape_NxNSquare(playerID, 1, "40 + 1n Mojo", 11, 50)
                # (Line 301) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 302) Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 304) if (v.P_LoopMain[playerID] % 2 == 0)
                DoActions(Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                if EUDIf()(v.P_LoopMain[playerID] % 2 == 0):
                    # (Line 305) {
                    # (Line 306) trg.Shape_NxNSquare(playerID, 1, "60 + 1n Archon", 11, 50);
                    trg.Shape_NxNSquare(playerID, 1, "60 + 1n Archon", 11, 50)
                    # (Line 307) }
                    # (Line 308) else
                    # (Line 309) {
                if EUDElse()():
                    # (Line 310) trg.Shape_NxNSquare(playerID, 1, "60 + 1n High Templar", 11, 50);
                    trg.Shape_NxNSquare(playerID, 1, "60 + 1n High Templar", 11, 50)
                    # (Line 311) }
                    # (Line 312) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                EUDEndIf()
                # (Line 313) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 314) }
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
                # (Line 316) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 318) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 320) if (v.P_LoopMain[playerID] == 24)
            if EUDIf()(v.P_LoopMain[playerID] == 24):
                # (Line 321) {
                # (Line 322) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
                # (Line 324) v.P_CountMain[playerID] += 1;
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 325) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 326) }
                # (Line 327) }
            EUDEndIf()
            # (Line 329) else if (v.P_CountMain[playerID] == 5)
        if EUDElseIf()(v.P_CountMain[playerID] == 5):
            # (Line 330) {
            # (Line 331) trg.Shape_NxNSquare(playerID, 1, "Kakaru (Twilight)", 11, 50);
            trg.Shape_NxNSquare(playerID, 1, "Kakaru (Twilight)", 11, 50)
            # (Line 332) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
            # (Line 334) SetSwitch("UiltimateSwitch", Clear);
            DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
            # (Line 335) trg.SkillEnd();
            DoActions(SetSwitch("UiltimateSwitch", Clear))
            trg.SkillEnd()
            # (Line 336) }
            # (Line 337) }
        EUDEndIf()
        # (Line 338) }
    EUDEndIf()
    # (Line 340) function Shape_X(playerID : TrgPlayer, count, unit : TrgUnit)

# (Line 341) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit])
def Shape_X(playerID, count, unit):
    # (Line 342) var interval = 32;
    interval = EUDVariable()
    interval << (32)
    # (Line 343) var n = 9;
    n = EUDVariable()
    n << (9)
    # (Line 344) var x_o = 2 * interval;
    x_o = EUDVariable()
    x_o << (2 * interval)
    # (Line 345) var y_o = 0;
    y_o = EUDVariable()
    y_o << (0)
    # (Line 347) var x_i = interval;
    x_i = EUDVariable()
    x_i << (interval)
    # (Line 348) var y_i = interval;
    y_i = EUDVariable()
    y_i << (interval)
    # (Line 350) trg.Shape_Dot(playerID, count, unit, 0, 0);
    trg.Shape_Dot(playerID, count, unit, 0, 0)
    # (Line 352) for (var i = 0; i < n; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= n, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 353) {
        # (Line 354) trg.Shape_Square(playerID, count, unit, x_o + i * x_i, y_o + i * x_i);
        trg.Shape_Square(playerID, count, unit, x_o + i * x_i, y_o + i * x_i)
        # (Line 355) }
        # (Line 357) x_o -= interval;
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    x_o.__isub__(interval)
    # (Line 358) y_o += interval;
    y_o.__iadd__(interval)
    # (Line 360) for (var i = 0; i < n; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= n, neg=True):
        def _t4():
            i.__iadd__(1)
        # (Line 361) {
        # (Line 362) trg.Shape_Square(playerID, count, unit, x_o + i * x_i, y_o + i * x_i);
        trg.Shape_Square(playerID, count, unit, x_o + i * x_i, y_o + i * x_i)
        # (Line 363) }
        # (Line 365) x_o -= interval;
        EUDSetContinuePoint()
        _t4()
    EUDEndWhile()
    x_o.__isub__(interval)
    # (Line 366) y_o += interval;
    y_o.__iadd__(interval)
    # (Line 368) for (var i = 1; i < n; i++)
    i = EUDVariable()
    i << (1)
    if EUDWhile()(i >= n, neg=True):
        def _t6():
            i.__iadd__(1)
        # (Line 369) {
        # (Line 370) trg.Shape_Square(playerID, count, unit, x_o + i * x_i, y_o + i * x_i);
        trg.Shape_Square(playerID, count, unit, x_o + i * x_i, y_o + i * x_i)
        # (Line 371) }
        # (Line 372) }
        EUDSetContinuePoint()
        _t6()
    EUDEndWhile()
    # (Line 374) function Shape_DoubleX(playerID : TrgPlayer, count, unit : TrgUnit)

# (Line 375) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit])
def Shape_DoubleX(playerID, count, unit):
    # (Line 376) var interval = 32;
    interval = EUDVariable()
    interval << (32)
    # (Line 377) var n = 7;
    n = EUDVariable()
    n << (7)
    # (Line 378) var x_o = interval;
    x_o = EUDVariable()
    x_o << (interval)
    # (Line 379) var y_o = 0;
    y_o = EUDVariable()
    y_o << (0)
    # (Line 381) var x_i = interval;
    x_i = EUDVariable()
    x_i << (interval)
    # (Line 382) var y_i = interval;
    y_i = EUDVariable()
    y_i << (interval)
    # (Line 384) for (var i = 0; i < n; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= n, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 385) {
        # (Line 386) trg.Shape_Square(playerID, count, unit, x_o + i * x_i, y_o + i * x_i);
        trg.Shape_Square(playerID, count, unit, x_o + i * x_i, y_o + i * x_i)
        # (Line 387) }
        # (Line 389) x_o -= interval;
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    x_o.__isub__(interval)
    # (Line 390) y_o += interval;
    y_o.__iadd__(interval)
    # (Line 392) for (var i = 1; i < n; i++)
    i = EUDVariable()
    i << (1)
    if EUDWhile()(i >= n, neg=True):
        def _t4():
            i.__iadd__(1)
        # (Line 393) {
        # (Line 394) trg.Shape_Square(playerID, count, unit, x_o + i * x_i, y_o + i * x_i);
        trg.Shape_Square(playerID, count, unit, x_o + i * x_i, y_o + i * x_i)
        # (Line 395) }
        # (Line 396) }
        EUDSetContinuePoint()
        _t4()
    EUDEndWhile()
    # (Line 398) function Shape_Dia(playerID : TrgPlayer, count, unit : TrgUnit)

# (Line 399) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit])
def Shape_Dia(playerID, count, unit):
    # (Line 400) var interval = 64;
    interval = EUDVariable()
    interval << (64)
    # (Line 401) var n = 6;
    n = EUDVariable()
    n << (6)
    # (Line 402) var x_o = interval * 10 / 14 * (n + 2);
    x_o = EUDVariable()
    x_o << (interval * 10 // 14 * (n + 2))
    # (Line 403) var y_o = 0;
    y_o = EUDVariable()
    y_o << (0)
    # (Line 405) var x_i = interval;
    x_i = EUDVariable()
    x_i << (interval)
    # (Line 406) var y_i = interval;
    y_i = EUDVariable()
    y_i << (interval)
    # (Line 408) for (var i = 0; i < n; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= n, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 409) {
        # (Line 410) trg.Shape_Square(playerID, count, unit, x_o - i * x_i, y_o + i * x_i);
        trg.Shape_Square(playerID, count, unit, x_o - i * x_i, y_o + i * x_i)
        # (Line 411) }
        # (Line 413) x_o -= interval;
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    x_o.__isub__(interval)
    # (Line 414) y_o -= interval;
    y_o.__isub__(interval)
    # (Line 416) for (var i = 0; i < n; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= n, neg=True):
        def _t4():
            i.__iadd__(1)
        # (Line 417) {
        # (Line 418) trg.Shape_Square(playerID, count, unit, x_o - i * x_i, y_o + i * x_i);
        trg.Shape_Square(playerID, count, unit, x_o - i * x_i, y_o + i * x_i)
        # (Line 419) }
        # (Line 421) x_o -= interval;
        EUDSetContinuePoint()
        _t4()
    EUDEndWhile()
    x_o.__isub__(interval)
    # (Line 422) y_o -= interval;
    y_o.__isub__(interval)
    # (Line 424) for (var i = 1; i < n; i++)
    i = EUDVariable()
    i << (1)
    if EUDWhile()(i >= n, neg=True):
        def _t6():
            i.__iadd__(1)
        # (Line 425) {
        # (Line 426) trg.Shape_Square(playerID, count, unit, x_o - i * x_i, y_o + i * x_i);
        trg.Shape_Square(playerID, count, unit, x_o - i * x_i, y_o + i * x_i)
        # (Line 427) }
        # (Line 428) }
        EUDSetContinuePoint()
        _t6()
    EUDEndWhile()
