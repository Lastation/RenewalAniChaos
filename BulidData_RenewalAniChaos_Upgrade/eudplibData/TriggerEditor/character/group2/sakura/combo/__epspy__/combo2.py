## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _RELIMP(path, mod_name):
    import inspect, pathlib, importlib.util
    p = pathlib.Path(inspect.getabsfile(inspect.currentframe())).parent
    for s in path.split("."):
        if s == "":  p = p.parent
        else:  p = p / s
    try:
        spec = importlib.util.spec_from_file_location(mod_name, p / (mod_name + ".py"))
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
    except FileNotFoundError:
        loader = EPSLoader(mod_name, str(p / (mod_name + ".eps")))
        spec = importlib.util.spec_from_loader(mod_name, loader)
        module = loader.create_module(spec)
        loader.exec_module(module)
    return module

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 4) import func.trigadv as adv;
from func import trigadv as adv
# (Line 5) import func.trigepic as epic;
from func import trigepic as epic
# (Line 6) import func.sound as s;
from func import sound as s
# (Line 8) function main(playerID)
# (Line 9) {
@EUDFunc
def f_main(playerID):
    # (Line 10) trg.Debuff_BanReturn();
    trg.Debuff_BanReturn()
    # (Line 11) trg.Debuff_Stop();
    trg.Debuff_Stop()
    # (Line 13) MoveUnit(All, "40 + 1n Drone", playerID, "Anywhere", "[Skill]HoldPosition");
    # (Line 15) if (v.P_WaitMain[playerID] == 0)
    DoActions(MoveUnit(All, "40 + 1n Drone", playerID, "Anywhere", "[Skill]HoldPosition"))
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 16) {
        # (Line 17) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 18) {
            # (Line 19) if (v.P_LoopMain[playerID] < 16)
            if EUDIf()(v.P_LoopMain[playerID] >= 16, neg=True):
                # (Line 20) {
                # (Line 21) var d = 360 * v.P_LoopMain[playerID] / 16;
                d = EUDVariable()
                d << (360 * v.P_LoopMain[playerID] // 16)
                # (Line 22) var n = 4;
                n = EUDVariable()
                n << (4)
                # (Line 23) var r = 12 + 12 * v.P_LoopMain[playerID];
                r = EUDVariable()
                r << (12 + 12 * v.P_LoopMain[playerID])
                # (Line 24) trg.Shape_Circle(playerID, 1, "Protoss Dark Archon", d, n, r);
                trg.Shape_Circle(playerID, 1, "Protoss Dark Archon", d, n, r)
                # (Line 26) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 27) }
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 28) if (v.P_LoopMain[playerID] == 16)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 16):
                # (Line 29) {
                # (Line 30) var d = 0;
                d = EUDVariable()
                d << (0)
                # (Line 31) var n = 8;
                n = EUDVariable()
                n << (8)
                # (Line 32) var r = 200;
                r = EUDVariable()
                r << (200)
                # (Line 33) trg.Shape_Circle(playerID, 1, "40 + 1n Mutalisk", d, n, r);
                trg.Shape_Circle(playerID, 1, "40 + 1n Mutalisk", d, n, r)
                # (Line 34) epic.Shape_Circle(playerID, 1, "40 + 1n Lurker", d, n, r, 0);
                epic.Shape_Circle(playerID, 1, "40 + 1n Lurker", d, n, r, 0)
                # (Line 36) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 37) MoveUnit(All, "40 + 1n Lurker", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 38) Order("40 + 1n Mutalisk", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "40 + 1n Lurker", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 39) }
                DoActions(Order("40 + 1n Mutalisk", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 41) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 43) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 45) if (v.P_LoopMain[playerID] == 48)
            if EUDIf()(v.P_LoopMain[playerID] == 48):
                # (Line 46) {
                # (Line 47) s.CharacterVoice(4);
                s.CharacterVoice(4)
                # (Line 49) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 50) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 51) }
                # (Line 52) }
            EUDEndIf()
            # (Line 53) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 54) {
            # (Line 55) if (v.P_LoopMain[playerID] < 3)
            if EUDIf()(v.P_LoopMain[playerID] >= 3, neg=True):
                # (Line 56) {
                # (Line 57) var d = 32 + 32 * v.P_LoopMain[playerID];
                d = EUDVariable()
                d << (32 + 32 * v.P_LoopMain[playerID])
                # (Line 58) adv.Shape_QuadNxNSquareAt(playerID, 1, "Protoss Dark Archon", 3, 50, d, d);
                adv.Shape_QuadNxNSquareAt(playerID, 1, "Protoss Dark Archon", 3, 50, d, d)
                # (Line 60) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 61) }
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 62) else if (v.P_LoopMain[playerID] == 4)
            if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                # (Line 63) {
                # (Line 64) var d = 150;
                d = EUDVariable()
                d << (150)
                # (Line 65) adv.Shape_QuadNxNSquareAt(playerID, 1, "Protoss Dark Archon", 5, 50, d, d);
                adv.Shape_QuadNxNSquareAt(playerID, 1, "Protoss Dark Archon", 5, 50, d, d)
                # (Line 67) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 68) }
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 69) else if (v.P_LoopMain[playerID] == 5)
            if EUDElseIf()(v.P_LoopMain[playerID] == 5):
                # (Line 70) {
                # (Line 71) var d = 150;
                d = EUDVariable()
                d << (150)
                # (Line 72) adv.Shape_QuadNxNSquareAt(playerID, 1, "40 + 1n Guardian", 5, 50, d, d);
                adv.Shape_QuadNxNSquareAt(playerID, 1, "40 + 1n Guardian", 5, 50, d, d)
                # (Line 74) trg.Shape_Square(playerID, 1, "40 + 1n Drone", d + 50, d);
                trg.Shape_Square(playerID, 1, "40 + 1n Drone", d + 50, d)
                # (Line 75) trg.Shape_Square(playerID, 1, "40 + 1n Drone", d - 50, d);
                trg.Shape_Square(playerID, 1, "40 + 1n Drone", d - 50, d)
                # (Line 76) trg.Shape_Square(playerID, 1, "40 + 1n Drone", d, d + 50);
                trg.Shape_Square(playerID, 1, "40 + 1n Drone", d, d + 50)
                # (Line 77) trg.Shape_Square(playerID, 1, "40 + 1n Drone", d, d - 50);
                trg.Shape_Square(playerID, 1, "40 + 1n Drone", d, d - 50)
                # (Line 79) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 80) MoveUnit(All, "40 + 1n Drone", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 81) Order("40 + 1n Drone", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "40 + 1n Drone", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 83) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                DoActions(Order("40 + 1n Drone", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 84) }
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                # (Line 86) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 88) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 90) if (v.P_LoopMain[playerID] == 34)
            if EUDIf()(v.P_LoopMain[playerID] == 34):
                # (Line 91) {
                # (Line 92) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 93) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 94) }
                # (Line 95) }
            EUDEndIf()
            # (Line 96) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 97) {
            # (Line 98) if (v.P_LoopMain[playerID] < 3)
            if EUDIf()(v.P_LoopMain[playerID] >= 3, neg=True):
                # (Line 99) {
                # (Line 100) var d = 50 + 50 * v.P_LoopMain[playerID];
                d = EUDVariable()
                d << (50 + 50 * v.P_LoopMain[playerID])
                # (Line 101) adv.Shape_QuadNxNSquareAt(playerID, 1, "Protoss Dark Archon", 3, 50, d, 0);
                adv.Shape_QuadNxNSquareAt(playerID, 1, "Protoss Dark Archon", 3, 50, d, 0)
                # (Line 103) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 104) }
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 105) else if (v.P_LoopMain[playerID] == 4)
            if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                # (Line 106) {
                # (Line 107) var d = 200;
                d = EUDVariable()
                d << (200)
                # (Line 108) adv.Shape_QuadNxNSquareAt(playerID, 1, "Protoss Dark Archon", 5, 50, d, 0);
                adv.Shape_QuadNxNSquareAt(playerID, 1, "Protoss Dark Archon", 5, 50, d, 0)
                # (Line 110) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 111) }
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 112) else if (v.P_LoopMain[playerID] == 5)
            if EUDElseIf()(v.P_LoopMain[playerID] == 5):
                # (Line 113) {
                # (Line 114) var d = 200;
                d = EUDVariable()
                d << (200)
                # (Line 115) adv.Shape_QuadNxNSquareAt(playerID, 1, "40 + 1n Guardian", 5, 50, d, 0);
                adv.Shape_QuadNxNSquareAt(playerID, 1, "40 + 1n Guardian", 5, 50, d, 0)
                # (Line 117) trg.Shape_Square(playerID, 1, "40 + 1n Drone", d + 50, 0);
                trg.Shape_Square(playerID, 1, "40 + 1n Drone", d + 50, 0)
                # (Line 118) trg.Shape_Square(playerID, 1, "40 + 1n Drone", d - 50, 0);
                trg.Shape_Square(playerID, 1, "40 + 1n Drone", d - 50, 0)
                # (Line 119) trg.Shape_Square(playerID, 1, "40 + 1n Drone", d, 0 + 50);
                trg.Shape_Square(playerID, 1, "40 + 1n Drone", d, 0 + 50)
                # (Line 120) trg.Shape_Square(playerID, 1, "40 + 1n Drone", d, 0 - 50);
                trg.Shape_Square(playerID, 1, "40 + 1n Drone", d, 0 - 50)
                # (Line 122) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 123) MoveUnit(All, "40 + 1n Drone", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 124) Order("40 + 1n Drone", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "40 + 1n Drone", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 126) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                DoActions(Order("40 + 1n Drone", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 127) }
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                # (Line 129) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 131) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 133) if (v.P_LoopMain[playerID] == 24)
            if EUDIf()(v.P_LoopMain[playerID] == 24):
                # (Line 134) {
                # (Line 135) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 136) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 137) }
                # (Line 138) }
            EUDEndIf()
            # (Line 139) else if (v.P_CountMain[playerID] == 3)
        if EUDElseIf()(v.P_CountMain[playerID] == 3):
            # (Line 140) {
            # (Line 141) KillUnitAt(All, "40 + 1n Drone", "Anywhere", playerID);
            # (Line 142) KillUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Drone", "Anywhere", playerID))
            # (Line 143) KillUnitAt(All, "40 + 1n Lurker", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID))
            # (Line 145) trg.SkillEnd();
            DoActions(KillUnitAt(All, "40 + 1n Lurker", "Anywhere", playerID))
            trg.SkillEnd()
            # (Line 146) }
            # (Line 147) }
        EUDEndIf()
        # (Line 148) }
    EUDEndIf()
