## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _RELIMP(path, mod_name):
    import inspect, pathlib, importlib.util
    p = pathlib.Path(inspect.getabsfile(inspect.currentframe())).parent
    for s in path.split("."):
        if s == "":  p = p.parent
        else:  p = p / s
    try:
        spec = importlib.util.spec_from_file_location(mod_name, p / (mod_name + ".py"))
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
    except FileNotFoundError:
        loader = EPSLoader(mod_name, str(p / (mod_name + ".eps")))
        spec = importlib.util.spec_from_loader(mod_name, loader)
        module = loader.create_module(spec)
        loader.exec_module(module)
    return module

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 4) import func.trigadv as adv;
from func import trigadv as adv
# (Line 5) import func.trigepic as epic;
from func import trigepic as epic
# (Line 7) function main(playerID)
# (Line 8) {
@EUDFunc
def f_main(playerID):
    # (Line 9) trg.Debuff_BanReturn();
    trg.Debuff_BanReturn()
    # (Line 10) trg.Buff_ShieldFix(1);
    trg.Buff_ShieldFix(1)
    # (Line 11) trg.Effect_Recall();
    trg.Effect_Recall()
    # (Line 13) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 14) {
        # (Line 15) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 16) {
            # (Line 17) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 18) {
                # (Line 19) trg.Shape_NxNSquare(playerID, 1, "Protoss Dark Archon", 9, 50);
                trg.Shape_NxNSquare(playerID, 1, "Protoss Dark Archon", 9, 50)
                # (Line 21) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 22) }
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 24) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 26) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 28) if (v.P_LoopMain[playerID] == 62)
            if EUDIf()(v.P_LoopMain[playerID] == 62):
                # (Line 29) {
                # (Line 30) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 31) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 32) }
                # (Line 33) }
            EUDEndIf()
            # (Line 34) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 35) {
            # (Line 36) if (v.P_LoopMain[playerID] < 3)
            if EUDIf()(v.P_LoopMain[playerID] >= 3, neg=True):
                # (Line 37) {
                # (Line 38) trg.Shape_NxNSquare(playerID, 1, "40 + 1n Guardian", 5 + 3 * v.P_LoopMain[playerID], 50);
                trg.Shape_NxNSquare(playerID, 1, "40 + 1n Guardian", 5 + 3 * v.P_LoopMain[playerID], 50)
                # (Line 40) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                # (Line 41) }
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                # (Line 42) else if (v.P_LoopMain[playerID] == 3)
            if EUDElseIf()(v.P_LoopMain[playerID] == 3):
                # (Line 43) {
                # (Line 44) var d = 50;
                d = EUDVariable()
                d << (50)
                # (Line 45) epic.Shape_NxNSquare(playerID,1,"40 + 1n Lurker",5,64,0);
                epic.Shape_NxNSquare(playerID, 1, "40 + 1n Lurker", 5, 64, 0)
                # (Line 46) adv.Shape_QuadNxNSquareAt(playerID, 1, " Creep. Licht", 3, 50, 3 * d, 3 * d);
                adv.Shape_QuadNxNSquareAt(playerID, 1, " Creep. Licht", 3, 50, 3 * d, 3 * d)
                # (Line 47) adv.Shape_QuadNxNSquareAt(playerID, 1, " Creep. Licht", 3, 100, 3 * d, 3 * d);
                adv.Shape_QuadNxNSquareAt(playerID, 1, " Creep. Licht", 3, 100, 3 * d, 3 * d)
                # (Line 48) adv.Shape_QuadNxNSquareAt(playerID, 1, " Creep. Licht", 3, 50, 4 * d, 0);
                adv.Shape_QuadNxNSquareAt(playerID, 1, " Creep. Licht", 3, 50, 4 * d, 0)
                # (Line 49) adv.Shape_QuadNxNSquareAt(playerID, 1, " Creep. Licht", 3, 100, 4 * d, 0);
                adv.Shape_QuadNxNSquareAt(playerID, 1, " Creep. Licht", 3, 100, 4 * d, 0)
                # (Line 50) adv.Shape_QuadNxNSquareAt(playerID, 1, "40 + 1n Zergling", 3, 50, 3 * d, 3 * d);
                adv.Shape_QuadNxNSquareAt(playerID, 1, "40 + 1n Zergling", 3, 50, 3 * d, 3 * d)
                # (Line 51) adv.Shape_QuadNxNSquareAt(playerID, 1, "40 + 1n Zergling", 3, 50, 4 * d, 0);
                adv.Shape_QuadNxNSquareAt(playerID, 1, "40 + 1n Zergling", 3, 50, 4 * d, 0)
                # (Line 52) adv.Shape_QuadNxNSquareAt(playerID, 1, "40 + 1n Drone", 3, 100, 3 * d, 3 * d);
                adv.Shape_QuadNxNSquareAt(playerID, 1, "40 + 1n Drone", 3, 100, 3 * d, 3 * d)
                # (Line 53) adv.Shape_QuadNxNSquareAt(playerID, 1, "40 + 1n Drone", 3, 100, 4 * d, 0);
                adv.Shape_QuadNxNSquareAt(playerID, 1, "40 + 1n Drone", 3, 100, 4 * d, 0)
                # (Line 55) trg.Shape_NxNSquare(playerID, 1, " Creep. Licht", 3, 50);
                trg.Shape_NxNSquare(playerID, 1, " Creep. Licht", 3, 50)
                # (Line 56) trg.Shape_NxNSquare(playerID, 1, "40 + 1n Zergling", 3, 50);
                trg.Shape_NxNSquare(playerID, 1, "40 + 1n Zergling", 3, 50)
                # (Line 58) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 59) MoveUnit(All, " Creep. Licht", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 60) MoveUnit(All, "40 + 1n Zergling", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, " Creep. Licht", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 61) MoveUnit(All, "40 + 1n Drone", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "40 + 1n Zergling", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 62) Order(" Creep. Licht", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "40 + 1n Drone", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 63) Order("40 + 1n Zergling", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(Order(" Creep. Licht", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 64) Order("40 + 1n Drone", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(Order("40 + 1n Zergling", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 65) }
                DoActions(Order("40 + 1n Drone", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 67) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 69) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 71) if (v.P_LoopMain[playerID] == 44)
            if EUDIf()(v.P_LoopMain[playerID] == 44):
                # (Line 72) {
                # (Line 73) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 74) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 75) }
                # (Line 76) }
            EUDEndIf()
            # (Line 77) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 78) {
            # (Line 79) if (v.P_LoopMain[playerID] < 12)
            if EUDIf()(v.P_LoopMain[playerID] >= 12, neg=True):
                # (Line 80) {
                # (Line 81) var degree = 15 * v.P_LoopMain[playerID];
                degree = EUDVariable()
                degree << (15 * v.P_LoopMain[playerID])
                # (Line 82) var distance = 200 - 12 * v.P_LoopMain[playerID];
                distance = EUDVariable()
                distance << (200 - 12 * v.P_LoopMain[playerID])
                # (Line 84) trg.Table_Sin(playerID, degree, distance);
                trg.Table_Sin(playerID, degree, distance)
                # (Line 85) trg.Table_Cos(playerID, degree, distance);
                trg.Table_Cos(playerID, degree, distance)
                # (Line 87) var x = v.P_AngleCos[playerID];
                x = EUDVariable()
                x << (v.P_AngleCos[playerID])
                # (Line 88) var y = v.P_AngleSin[playerID];
                y = EUDVariable()
                y << (v.P_AngleSin[playerID])
                # (Line 90) adv.Shape_QuadNxNSquareAt(playerID, 1, "40 + 1n Guardian", 4, 50, x, y);
                adv.Shape_QuadNxNSquareAt(playerID, 1, "40 + 1n Guardian", 4, 50, x, y)
                # (Line 91) if (v.P_LoopMain[playerID] % 2 == 0)
                if EUDIf()(v.P_LoopMain[playerID] % 2 == 0):
                    # (Line 92) {
                    # (Line 93) epic.Shape_QuadNxNSquareAt(playerID, 1, "40 + 1n Lurker", 2, 100, x, y, 0);
                    epic.Shape_QuadNxNSquareAt(playerID, 1, "40 + 1n Lurker", 2, 100, x, y, 0)
                    # (Line 94) }
                    # (Line 95) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                EUDEndIf()
                # (Line 96) MoveUnit(All, "40 + 1n Lurker", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 98) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                DoActions(MoveUnit(All, "40 + 1n Lurker", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 99) }
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                # (Line 100) else if (v.P_LoopMain[playerID] == 20)
            if EUDElseIf()(v.P_LoopMain[playerID] == 20):
                # (Line 101) {
                # (Line 102) trg.Shape_NxNSquare(playerID, 1, "Kakaru (Twilight)", 5, 50);
                trg.Shape_NxNSquare(playerID, 1, "Kakaru (Twilight)", 5, 50)
                # (Line 103) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                # (Line 104) }
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                # (Line 105) else if (v.P_LoopMain[playerID] == 22)
            if EUDElseIf()(v.P_LoopMain[playerID] == 22):
                # (Line 106) {
                # (Line 107) trg.Shape_NxNSquare(playerID, 1, "Kakaru (Twilight)", 9, 50);
                trg.Shape_NxNSquare(playerID, 1, "Kakaru (Twilight)", 9, 50)
                # (Line 108) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                # (Line 109) }
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                # (Line 112) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 114) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 116) if (v.P_LoopMain[playerID] == 58)
            if EUDIf()(v.P_LoopMain[playerID] == 58):
                # (Line 117) {
                # (Line 118) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 119) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 120) }
                # (Line 121) }
            EUDEndIf()
            # (Line 123) else if (v.P_CountMain[playerID] == 3)
        if EUDElseIf()(v.P_CountMain[playerID] == 3):
            # (Line 124) {
            # (Line 125) KillUnitAt(All, "40 + 1n Zergling", "Anywhere", playerID);
            # (Line 126) KillUnitAt(All, "40 + 1n Lurker", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Zergling", "Anywhere", playerID))
            # (Line 127) KillUnitAt(All, " Creep. Licht", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Lurker", "Anywhere", playerID))
            # (Line 128) KillUnitAt(All, "40 + 1n Drone", "Anywhere", playerID);
            DoActions(KillUnitAt(All, " Creep. Licht", "Anywhere", playerID))
            # (Line 129) SetSwitch("UiltimateSwitch", Clear);
            DoActions(KillUnitAt(All, "40 + 1n Drone", "Anywhere", playerID))
            # (Line 130) trg.SkillEnd();
            DoActions(SetSwitch("UiltimateSwitch", Clear))
            trg.SkillEnd()
            # (Line 131) }
            # (Line 132) }
        EUDEndIf()
        # (Line 133) }
    EUDEndIf()
