## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import character.group2.yashiro.text as t;
from character.group2.yashiro import text as t
# (Line 4) import func.sound as s;
from func import sound as s
# (Line 6) var prevValue = 0;
prevValue = EUDCreateVariables(1)
_IGVA([prevValue], lambda: [0])
# (Line 7) var stack = 0;
stack = EUDCreateVariables(1)
_IGVA([stack], lambda: [0])
# (Line 9) function text(playerID);
# (Line 11) function main(playerID)
# (Line 12) {
@EUDFunc
def f_main(playerID):
    # (Line 13) if (v.P_KillScore[playerID] != prevValue)
    if EUDIf()(v.P_KillScore[playerID] == prevValue, neg=True):
        # (Line 14) {
        # (Line 15) var killPoint = v.P_KillScore[playerID] - prevValue;
        killPoint = EUDVariable()
        killPoint << (v.P_KillScore[playerID] - prevValue)
        # (Line 17) stack += killPoint;
        stack.__iadd__(killPoint)
        # (Line 18) prevValue = v.P_KillScore[playerID];
        prevValue << (v.P_KillScore[playerID])
        # (Line 20) SetDeaths(playerID, Add, killPoint, " `UniqueSkill");
        # (Line 21) }
        DoActions(SetDeaths(playerID, Add, killPoint, " `UniqueSkill"))
        # (Line 23) }
    EUDEndIf()
    # (Line 25) function text(playerID)

# (Line 26) {
@EUDFunc
def f_text(playerID):
    # (Line 27) if (stack > 0)
    if EUDIf()(stack <= 0, neg=True):
        # (Line 28) {
        # (Line 29) var uniqueCount = dwread_epd(204 * 12 + playerID);
        uniqueCount = EUDVariable()
        uniqueCount << (f_dwread_epd(204 * 12 + playerID))
        # (Line 30) var isAllCleared = 1;		//TRUE
        isAllCleared = EUDVariable()
        isAllCleared << (1)
        # (Line 31) for (var i = 0; i < 6; i++)
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i >= 6, neg=True):
            def _t3():
                i.__iadd__(1)
            # (Line 32) {
            # (Line 33) if (t.P_TextTime[i] > 0) { isAllCleared = 0; }
            if EUDIf()(t.P_TextTime[i] <= 0, neg=True):
                isAllCleared << (0)
                # (Line 34) }
            EUDEndIf()
            # (Line 35) if (isAllCleared == 1)
            EUDSetContinuePoint()
            _t3()
        EUDEndWhile()
        if EUDIf()(isAllCleared == 1):
            # (Line 36) {
            # (Line 37) s.CharacterVoice(1000 + uniqueCount % 8);
            s.CharacterVoice(1000 + uniqueCount % 8)
            # (Line 38) }
            # (Line 39) stack -= 1;
        EUDEndIf()
        stack.__isub__(1)
        # (Line 40) }
        # (Line 41) }
    EUDEndIf()
