## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 5) function main(playerID)
# (Line 6) {
@EUDFunc
def f_main(playerID):
    # (Line 7) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 8) {
        # (Line 9) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 10) {
            # (Line 11) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 12) {
                # (Line 13) trg.Shape_Dot(playerID, 1, "40 + 1n Wraith", 0, 0);
                trg.Shape_Dot(playerID, 1, "40 + 1n Wraith", 0, 0)
                # (Line 15) KillUnitAt(All,  "40 + 1n Wraith", "Anywhere", playerID);
                # (Line 17) trg.ResizeLocation(playerID, 15, 15);
                DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                trg.ResizeLocation(playerID, 15, 15)
                # (Line 19) if (playerID < 3)
                if EUDIf()(playerID >= 3, neg=True):
                    # (Line 20) {
                    # (Line 21) for (var i = 3; i < 6; i++)
                    i = EUDVariable()
                    i << (3)
                    if EUDWhile()(i >= 6, neg=True):
                        def _t6():
                            i.__iadd__(1)
                        # (Line 22) {
                        # (Line 23) if (Bring(i, AtLeast, 1, v.P_UnitID[i], v.P_LocationID[playerID]))
                        if EUDIf()(Bring(i, AtLeast, 1, v.P_UnitID[i], v.P_LocationID[playerID])):
                            # (Line 24) {
                            # (Line 25) trg.Debuff_BanReturnPlayer(i);
                            trg.Debuff_BanReturnPlayer(i)
                            # (Line 26) }
                            # (Line 27) }
                        EUDEndIf()
                        # (Line 28) }
                        EUDSetContinuePoint()
                        _t6()
                    EUDEndWhile()
                    # (Line 29) else
                    # (Line 30) {
                if EUDElse()():
                    # (Line 31) for (var i = 0; i < 3; i++)
                    i = EUDVariable()
                    i << (0)
                    if EUDWhile()(i >= 3, neg=True):
                        def _t9():
                            i.__iadd__(1)
                        # (Line 32) {
                        # (Line 33) if (Bring(i, AtLeast, 1, v.P_UnitID[i], v.P_LocationID[playerID]))
                        if EUDIf()(Bring(i, AtLeast, 1, v.P_UnitID[i], v.P_LocationID[playerID])):
                            # (Line 34) {
                            # (Line 35) trg.Debuff_BanReturnPlayer(i);
                            trg.Debuff_BanReturnPlayer(i)
                            # (Line 36) }
                            # (Line 37) }
                        EUDEndIf()
                        # (Line 38) }
                        EUDSetContinuePoint()
                        _t9()
                    EUDEndWhile()
                    # (Line 39) }
                EUDEndIf()
                # (Line 41) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 43) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 45) if (v.P_LoopMain[playerID] == 1)
            if EUDIf()(v.P_LoopMain[playerID] == 1):
                # (Line 46) {
                # (Line 47) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 48) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 49) }
                # (Line 50) }
            EUDEndIf()
            # (Line 51) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 52) {
            # (Line 53) SetDeaths(playerID, SetTo, 2160, " `UniqueCoolTime");
            # (Line 55) trg.SkillEnd();
            DoActions(SetDeaths(playerID, SetTo, 2160, " `UniqueCoolTime"))
            trg.SkillEnd()
            # (Line 56) }
            # (Line 57) }
        EUDEndIf()
        # (Line 58) }
    EUDEndIf()
