## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _RELIMP(path, mod_name):
    import inspect, pathlib, importlib.util
    p = pathlib.Path(inspect.getabsfile(inspect.currentframe())).parent
    for s in path.split("."):
        if s == "":  p = p.parent
        else:  p = p / s
    try:
        spec = importlib.util.spec_from_file_location(mod_name, p / (mod_name + ".py"))
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
    except FileNotFoundError:
        loader = EPSLoader(mod_name, str(p / (mod_name + ".eps")))
        spec = importlib.util.spec_from_loader(mod_name, loader)
        module = loader.create_module(spec)
        loader.exec_module(module)
    return module

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 4) import func.trigadv as adv;
from func import trigadv as adv
# (Line 6) function main(playerID)
# (Line 7) {
@EUDFunc
def f_main(playerID):
    # (Line 9) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 10) {
        # (Line 11) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 12) {
            # (Line 13) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 14) {
                # (Line 15) trg.ComputerAlly(1);
                trg.ComputerAlly(1)
                # (Line 16) SetInvincibility(Enable, v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 18) trg.Table_Sin(playerID, 0, 150);
                DoActions(SetInvincibility(Enable, v.P_UnitID[playerID], playerID, "Anywhere"))
                trg.Table_Sin(playerID, 0, 150)
                # (Line 19) trg.Table_Cos(playerID, 0, 150);
                trg.Table_Cos(playerID, 0, 150)
                # (Line 21) var x = v.P_AngleCos[playerID];
                x = EUDVariable()
                x << (v.P_AngleCos[playerID])
                # (Line 22) var y = v.P_AngleSin[playerID];
                y = EUDVariable()
                y << (v.P_AngleSin[playerID])
                # (Line 24) adv.Shape_QuadNxNSquareAt(playerID, 1, "60 + 3n Ghost", 2, 32, x, y);
                adv.Shape_QuadNxNSquareAt(playerID, 1, "60 + 3n Ghost", 2, 32, x, y)
                # (Line 25) adv.Shape_QuadNxNSquareAt(playerID, 1, "80 + 1n Ghost", 4, 32, x, y);
                adv.Shape_QuadNxNSquareAt(playerID, 1, "80 + 1n Ghost", 4, 32, x, y)
                # (Line 26) adv.Shape_QuadNxNSquareAt(playerID, 1, "40 + 1n Guardian", 3, 50, x, y);
                adv.Shape_QuadNxNSquareAt(playerID, 1, "40 + 1n Guardian", 3, 50, x, y)
                # (Line 28) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 29) MoveUnit(All, "80 + 1n Ghost", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 30) Order("80 + 1n Ghost", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "80 + 1n Ghost", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 31) MoveUnit(All, "60 + 3n Ghost", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(Order("80 + 1n Ghost", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 32) Order("60 + 3n Ghost", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "60 + 3n Ghost", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 34) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                DoActions(Order("60 + 3n Ghost", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 35) }
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                # (Line 36) else if (v.P_LoopMain[playerID] == 1)
            if EUDElseIf()(v.P_LoopMain[playerID] == 1):
                # (Line 37) {
                # (Line 38) trg.Table_Sin(playerID, 0, 150);
                trg.Table_Sin(playerID, 0, 150)
                # (Line 39) trg.Table_Cos(playerID, 0, 150);
                trg.Table_Cos(playerID, 0, 150)
                # (Line 41) var x = v.P_AngleCos[playerID];
                x = EUDVariable()
                x << (v.P_AngleCos[playerID])
                # (Line 42) var y = v.P_AngleSin[playerID];
                y = EUDVariable()
                y << (v.P_AngleSin[playerID])
                # (Line 44) adv.Shape_QuadNxNSquareAt(playerID, 1, "Kakaru (Twilight)", 3, 50, x, y);
                adv.Shape_QuadNxNSquareAt(playerID, 1, "Kakaru (Twilight)", 3, 50, x, y)
                # (Line 46) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                # (Line 47) }
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                # (Line 48) else if (v.P_LoopMain[playerID] == 2)
            if EUDElseIf()(v.P_LoopMain[playerID] == 2):
                # (Line 49) {
                # (Line 50) KillUnitAt(All, "80 + 1n Ghost", "Anywhere", playerID);
                # (Line 51) KillUnitAt(All, "60 + 3n Ghost", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "80 + 1n Ghost", "Anywhere", playerID))
                # (Line 53) trg.Table_Sin(playerID, 45, 225);
                DoActions(KillUnitAt(All, "60 + 3n Ghost", "Anywhere", playerID))
                trg.Table_Sin(playerID, 45, 225)
                # (Line 54) trg.Table_Cos(playerID, 45, 225);
                trg.Table_Cos(playerID, 45, 225)
                # (Line 56) var x = v.P_AngleCos[playerID];
                x = EUDVariable()
                x << (v.P_AngleCos[playerID])
                # (Line 57) var y = v.P_AngleSin[playerID];
                y = EUDVariable()
                y << (v.P_AngleSin[playerID])
                # (Line 59) adv.Shape_QuadNxNSquareAt(playerID, 1, "60 + 3n Ghost", 2, 32, x, y);
                adv.Shape_QuadNxNSquareAt(playerID, 1, "60 + 3n Ghost", 2, 32, x, y)
                # (Line 60) adv.Shape_QuadNxNSquareAt(playerID, 1, "80 + 1n Ghost", 4, 32, x, y);
                adv.Shape_QuadNxNSquareAt(playerID, 1, "80 + 1n Ghost", 4, 32, x, y)
                # (Line 61) adv.Shape_QuadNxNSquareAt(playerID, 1, "40 + 1n Guardian", 3, 50, x, y);
                adv.Shape_QuadNxNSquareAt(playerID, 1, "40 + 1n Guardian", 3, 50, x, y)
                # (Line 63) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 64) MoveUnit(All, "80 + 1n Ghost", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 65) Order("80 + 1n Ghost", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "80 + 1n Ghost", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 66) MoveUnit(All, "60 + 3n Ghost", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(Order("80 + 1n Ghost", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 67) Order("60 + 3n Ghost", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "60 + 3n Ghost", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 69) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                DoActions(Order("60 + 3n Ghost", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 70) }
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                # (Line 71) else if (v.P_LoopMain[playerID] == 3)
            if EUDElseIf()(v.P_LoopMain[playerID] == 3):
                # (Line 72) {
                # (Line 73) trg.Table_Sin(playerID, 45, 225);
                trg.Table_Sin(playerID, 45, 225)
                # (Line 74) trg.Table_Cos(playerID, 45, 225);
                trg.Table_Cos(playerID, 45, 225)
                # (Line 76) var x = v.P_AngleCos[playerID];
                x = EUDVariable()
                x << (v.P_AngleCos[playerID])
                # (Line 77) var y = v.P_AngleSin[playerID];
                y = EUDVariable()
                y << (v.P_AngleSin[playerID])
                # (Line 79) adv.Shape_QuadNxNSquareAt(playerID, 1, "Kakaru (Twilight)", 3, 50, x, y);
                adv.Shape_QuadNxNSquareAt(playerID, 1, "Kakaru (Twilight)", 3, 50, x, y)
                # (Line 81) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                # (Line 82) }
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                # (Line 84) else if (v.P_LoopMain[playerID] == 4)
            if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                # (Line 85) {
                # (Line 86) KillUnitAt(All, "80 + 1n Ghost", "Anywhere", playerID);
                # (Line 87) KillUnitAt(All, "60 + 3n Ghost", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "80 + 1n Ghost", "Anywhere", playerID))
                # (Line 88) }
                DoActions(KillUnitAt(All, "60 + 3n Ghost", "Anywhere", playerID))
                # (Line 90) trg.Main_Wait(160);
            EUDEndIf()
            trg.Main_Wait(160)
            # (Line 92) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 94) if (v.P_LoopMain[playerID] == 10)
            if EUDIf()(v.P_LoopMain[playerID] == 10):
                # (Line 95) {
                # (Line 96) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 97) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 98) }
                # (Line 99) }
            EUDEndIf()
            # (Line 100) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 101) {
            # (Line 102) if (v.P_LoopMain[playerID] < 4)
            if EUDIf()(v.P_LoopMain[playerID] >= 4, neg=True):
                # (Line 103) {
                # (Line 104) RemoveUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID);
                # (Line 106) var d = 90 / 4 * v.P_LoopMain[playerID];
                DoActions(RemoveUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID))
                d = EUDVariable()
                d << (90 // 4 * v.P_LoopMain[playerID])
                # (Line 107) var n = 3;
                n = EUDVariable()
                n << (3)
                # (Line 108) var r = 100;
                r = EUDVariable()
                r << (100)
                # (Line 109) trg.Shape_Circle(playerID, 16, "80 + 1n Vulture", d, n, r);
                trg.Shape_Circle(playerID, 16, "80 + 1n Vulture", d, n, r)
                # (Line 111) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 112) MoveUnit(All, "80 + 1n Vulture", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 113) Order("80 + 1n Vulture", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "80 + 1n Vulture", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 115) KillUnitAt(All, "40 + 1n Zealot", "Anywhere", playerID);
                DoActions(Order("80 + 1n Vulture", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 116) }
                DoActions(KillUnitAt(All, "40 + 1n Zealot", "Anywhere", playerID))
                # (Line 117) else if (v.P_LoopMain[playerID] < 8)
            if EUDElseIf()(v.P_LoopMain[playerID] >= 8, neg=True):
                # (Line 118) {
                # (Line 119) RemoveUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID);
                # (Line 121) var i = v.P_LoopMain[playerID] - 4;
                DoActions(RemoveUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID))
                i = EUDVariable()
                i << (v.P_LoopMain[playerID] - 4)
                # (Line 123) trg.Shape_NxNSquare(playerID, 1, "40 + 1n Wraith", 5 + 2 * i, 64);
                trg.Shape_NxNSquare(playerID, 1, "40 + 1n Wraith", 5 + 2 * i, 64)
                # (Line 124) trg.Shape_NxNSquare(playerID, 1, "80 + 1n Vulture", 5 + 2 * i, 64);
                trg.Shape_NxNSquare(playerID, 1, "80 + 1n Vulture", 5 + 2 * i, 64)
                # (Line 126) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 127) MoveUnit(All, "80 + 1n Vulture", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 128) Order("80 + 1n Vulture", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "80 + 1n Vulture", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 130) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
                DoActions(Order("80 + 1n Vulture", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 131) }
                DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                # (Line 132) else if (v.P_LoopMain[playerID] == 8)
            if EUDElseIf()(v.P_LoopMain[playerID] == 8):
                # (Line 133) {
                # (Line 134) RemoveUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID);
                # (Line 136) trg.Shape_NxNSquare(playerID, 1, "40 + 1n Guardian", 11, 64);
                DoActions(RemoveUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID))
                trg.Shape_NxNSquare(playerID, 1, "40 + 1n Guardian", 11, 64)
                # (Line 137) trg.Shape_NxNSquare(playerID, 1, "80 + 1n Ghost", 11, 64);
                trg.Shape_NxNSquare(playerID, 1, "80 + 1n Ghost", 11, 64)
                # (Line 139) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 140) MoveUnit(All, "80 + 1n Ghost", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 141) Order("80 + 1n Ghost", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "80 + 1n Ghost", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 143) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                DoActions(Order("80 + 1n Ghost", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 144) }
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                # (Line 145) else if (v.P_LoopMain[playerID] == 10)
            if EUDElseIf()(v.P_LoopMain[playerID] == 10):
                # (Line 146) {
                # (Line 147) trg.Shape_NxNSquare(playerID, 1, "Kakaru (Twilight)", 11, 64);
                trg.Shape_NxNSquare(playerID, 1, "Kakaru (Twilight)", 11, 64)
                # (Line 149) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                # (Line 150) }
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                # (Line 151) else if (v.P_LoopMain[playerID] == 12)
            if EUDElseIf()(v.P_LoopMain[playerID] == 12):
                # (Line 152) {
                # (Line 153) KillUnitAt(All, "80 + 1n Ghost", "Anywhere", playerID);
                # (Line 154) }
                DoActions(KillUnitAt(All, "80 + 1n Ghost", "Anywhere", playerID))
                # (Line 156) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 158) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 160) if (v.P_LoopMain[playerID] == 13)
            if EUDIf()(v.P_LoopMain[playerID] == 13):
                # (Line 161) {
                # (Line 162) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 163) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 164) }
                # (Line 165) }
            EUDEndIf()
            # (Line 166) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 167) {
            # (Line 168) KillUnitAt(All, "80 + 1n Ghost", "Anywhere", playerID);
            # (Line 169) SetInvincibility(Disable, v.P_UnitID[playerID], playerID, "Anywhere");
            DoActions(KillUnitAt(All, "80 + 1n Ghost", "Anywhere", playerID))
            # (Line 170) trg.ComputerAlly(0);
            DoActions(SetInvincibility(Disable, v.P_UnitID[playerID], playerID, "Anywhere"))
            trg.ComputerAlly(0)
            # (Line 172) trg.Shape_Dot(playerID, 1, "40 + 1n Wraith", 0, 0);
            trg.Shape_Dot(playerID, 1, "40 + 1n Wraith", 0, 0)
            # (Line 173) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
            # (Line 175) trg.SkillEnd();
            DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
            trg.SkillEnd()
            # (Line 176) }
            # (Line 177) }
        EUDEndIf()
        # (Line 178) }
    EUDEndIf()
