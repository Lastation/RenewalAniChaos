## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 5) function main(playerID)
# (Line 6) {
@EUDFunc
def f_main(playerID):
    # (Line 7) if (v.P_CountMain[playerID] >= 2)
    if EUDIf()(v.P_CountMain[playerID] >= 2):
        # (Line 8) {
        # (Line 9) trg.Buff_ShieldFix(1);
        trg.Buff_ShieldFix(1)
        # (Line 10) }
        # (Line 12) if (v.P_WaitMain[playerID] == 0)
    EUDEndIf()
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 13) {
        # (Line 14) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 15) {
            # (Line 16) RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
            # (Line 18) if (v.P_LoopMain[playerID] < 2)
            DoActions(RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
            if EUDIf()(v.P_LoopMain[playerID] >= 2, neg=True):
                # (Line 19) {
                # (Line 20) var d = 225;
                d = EUDVariable()
                d << (225)
                # (Line 21) var n = 4;
                n = EUDVariable()
                n << (4)
                # (Line 22) var interval = 100;
                interval = EUDVariable()
                interval << (100)
                # (Line 23) var distance = interval * 3 / 2 - interval * v.P_LoopMain[playerID];
                distance = EUDVariable()
                distance << (interval * 3 // 2 - interval * v.P_LoopMain[playerID])
                # (Line 24) trg.Shape_Line(playerID, 1, "50 + 1n Battlecruiser", d, n, interval, distance);
                trg.Shape_Line(playerID, 1, "50 + 1n Battlecruiser", d, n, interval, distance)
                # (Line 25) trg.Shape_Line(playerID, 1, "60 + 1n Archon", d, n, interval, distance);
                trg.Shape_Line(playerID, 1, "60 + 1n Archon", d, n, interval, distance)
                # (Line 27) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 28) Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 30) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 31) }
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 32) else if (v.P_LoopMain[playerID] < 4)
            if EUDElseIf()(v.P_LoopMain[playerID] >= 4, neg=True):
                # (Line 33) {
                # (Line 34) var d = 45;
                d = EUDVariable()
                d << (45)
                # (Line 35) var n = 4;
                n = EUDVariable()
                n << (4)
                # (Line 36) var interval = 100;
                interval = EUDVariable()
                interval << (100)
                # (Line 37) var distance = interval / 2 + interval * (v.P_LoopMain[playerID] - 2);
                distance = EUDVariable()
                distance << (interval // 2 + interval * (v.P_LoopMain[playerID] - 2))
                # (Line 38) trg.Shape_Line(playerID, 1, "50 + 1n Battlecruiser", d, n, interval, distance);
                trg.Shape_Line(playerID, 1, "50 + 1n Battlecruiser", d, n, interval, distance)
                # (Line 39) trg.Shape_Line(playerID, 1, "60 + 1n Archon", d, n, interval, distance);
                trg.Shape_Line(playerID, 1, "60 + 1n Archon", d, n, interval, distance)
                # (Line 41) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 42) Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 44) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 45) }
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 47) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 49) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 51) if (v.P_LoopMain[playerID] == 5)
            if EUDIf()(v.P_LoopMain[playerID] == 5):
                # (Line 52) {
                # (Line 53) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 54) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 55) }
                # (Line 56) }
            EUDEndIf()
            # (Line 57) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 58) {
            # (Line 59) RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
            # (Line 61) if (v.P_LoopMain[playerID] < 2)
            DoActions(RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
            if EUDIf()(v.P_LoopMain[playerID] >= 2, neg=True):
                # (Line 62) {
                # (Line 63) var d = 315;
                d = EUDVariable()
                d << (315)
                # (Line 64) var n = 4;
                n = EUDVariable()
                n << (4)
                # (Line 65) var interval = 75;
                interval = EUDVariable()
                interval << (75)
                # (Line 66) var distance = interval * 3 / 2 - interval * v.P_LoopMain[playerID];
                distance = EUDVariable()
                distance << (interval * 3 // 2 - interval * v.P_LoopMain[playerID])
                # (Line 67) trg.Shape_Line(playerID, 1, "50 + 1n Battlecruiser", d, n, interval, distance);
                trg.Shape_Line(playerID, 1, "50 + 1n Battlecruiser", d, n, interval, distance)
                # (Line 68) trg.Shape_Line(playerID, 1, "60 + 1n Archon", d, n, interval, distance);
                trg.Shape_Line(playerID, 1, "60 + 1n Archon", d, n, interval, distance)
                # (Line 70) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 71) Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 73) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 74) }
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 75) else if (v.P_LoopMain[playerID] < 4)
            if EUDElseIf()(v.P_LoopMain[playerID] >= 4, neg=True):
                # (Line 76) {
                # (Line 77) var d = 135;
                d = EUDVariable()
                d << (135)
                # (Line 78) var n = 4;
                n = EUDVariable()
                n << (4)
                # (Line 79) var interval = 75;
                interval = EUDVariable()
                interval << (75)
                # (Line 80) var distance = interval / 2 + interval * (v.P_LoopMain[playerID] - 2);
                distance = EUDVariable()
                distance << (interval // 2 + interval * (v.P_LoopMain[playerID] - 2))
                # (Line 81) trg.Shape_Line(playerID, 1, "50 + 1n Battlecruiser", d, n, interval, distance);
                trg.Shape_Line(playerID, 1, "50 + 1n Battlecruiser", d, n, interval, distance)
                # (Line 82) trg.Shape_Line(playerID, 1, "60 + 1n Archon", d, n, interval, distance);
                trg.Shape_Line(playerID, 1, "60 + 1n Archon", d, n, interval, distance)
                # (Line 84) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 85) Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 87) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 88) }
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 90) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 92) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 94) if (v.P_LoopMain[playerID] == 5)
            if EUDIf()(v.P_LoopMain[playerID] == 5):
                # (Line 95) {
                # (Line 96) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 97) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 98) }
                # (Line 99) }
            EUDEndIf()
            # (Line 100) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 101) {
            # (Line 102) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 103) {
                # (Line 104) trg.Shape_NxNSquare(playerID, 1, "50 + 1n Battlecruiser", 4, 100);
                trg.Shape_NxNSquare(playerID, 1, "50 + 1n Battlecruiser", 4, 100)
                # (Line 105) trg.Shape_NxNSquare(playerID, 1, "60 + 1n Archon", 4, 100);
                trg.Shape_NxNSquare(playerID, 1, "60 + 1n Archon", 4, 100)
                # (Line 107) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 108) Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 110) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 111) }
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 112) else if (v.P_LoopMain[playerID] == 3)
            if EUDElseIf()(v.P_LoopMain[playerID] == 3):
                # (Line 113) {
                # (Line 114) RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 115) }
                DoActions(RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                # (Line 116) else if (v.P_LoopMain[playerID] == 4)
            if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                # (Line 117) {
                # (Line 118) trg.Shape_NxNSquare(playerID, 1, "Kakaru (Twilight)", 4, 100);
                trg.Shape_NxNSquare(playerID, 1, "Kakaru (Twilight)", 4, 100)
                # (Line 120) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                # (Line 121) }
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                # (Line 123) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 125) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 127) if (v.P_LoopMain[playerID] == 12)
            if EUDIf()(v.P_LoopMain[playerID] == 12):
                # (Line 128) {
                # (Line 129) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 130) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 131) }
                # (Line 132) }
            EUDEndIf()
            # (Line 133) else if (v.P_CountMain[playerID] == 3)
        if EUDElseIf()(v.P_CountMain[playerID] == 3):
            # (Line 134) {
            # (Line 135) RemoveUnitAt(All, " Creep. Dunkelheit", "Anywhere", playerID);
            # (Line 137) if (v.P_LoopMain[playerID] < 8)
            DoActions(RemoveUnitAt(All, " Creep. Dunkelheit", "Anywhere", playerID))
            if EUDIf()(v.P_LoopMain[playerID] >= 8, neg=True):
                # (Line 138) {
                # (Line 139) var d = 22 + 90 * v.P_LoopMain[playerID];
                d = EUDVariable()
                d << (22 + 90 * v.P_LoopMain[playerID])
                # (Line 140) var n = 7;
                n = EUDVariable()
                n << (7)
                # (Line 141) var interval = 64;
                interval = EUDVariable()
                interval << (64)
                # (Line 142) var distance = 120;
                distance = EUDVariable()
                distance << (120)
                # (Line 143) trg.Shape_Line(playerID, 1, "40 + 1n Mojo", d, n, interval, distance);
                trg.Shape_Line(playerID, 1, "40 + 1n Mojo", d, n, interval, distance)
                # (Line 144) trg.Shape_Line(playerID, 1, " Creep. Dunkelheit", d, n, interval, distance);
                trg.Shape_Line(playerID, 1, " Creep. Dunkelheit", d, n, interval, distance)
                # (Line 146) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 147) MoveUnit(All, " Creep. Dunkelheit", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 148) Order(" Creep. Dunkelheit", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, " Creep. Dunkelheit", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 150) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
                DoActions(Order(" Creep. Dunkelheit", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 151) }
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
                # (Line 152) if (v.P_LoopMain[playerID] < 9 && v.P_LoopMain[playerID] > 0)
            EUDEndIf()
            if EUDIf()(EUDSCAnd()(v.P_LoopMain[playerID] >= 9, neg=True)(v.P_LoopMain[playerID] <= 0, neg=True)()):
                # (Line 153) {
                # (Line 154) var d = 22 + 270 + 90 * v.P_LoopMain[playerID];
                d = EUDVariable()
                d << (22 + 270 + 90 * v.P_LoopMain[playerID])
                # (Line 155) var n = 7;
                n = EUDVariable()
                n << (7)
                # (Line 156) var interval = 64;
                interval = EUDVariable()
                interval << (64)
                # (Line 157) var distance = 120;
                distance = EUDVariable()
                distance << (120)
                # (Line 158) trg.Shape_Line(playerID, 1, "Kakaru (Twilight)", d, n, interval, distance);
                trg.Shape_Line(playerID, 1, "Kakaru (Twilight)", d, n, interval, distance)
                # (Line 159) trg.Shape_Line(playerID, 1, "60 + 1n Archon", d, n, interval, distance);
                trg.Shape_Line(playerID, 1, "60 + 1n Archon", d, n, interval, distance)
                # (Line 161) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                # (Line 162) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                # (Line 163) }
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 165) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 167) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 169) if (v.P_LoopMain[playerID] == 9)
            if EUDIf()(v.P_LoopMain[playerID] == 9):
                # (Line 170) {
                # (Line 171) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 172) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 173) }
                # (Line 174) }
            EUDEndIf()
            # (Line 175) else if (v.P_CountMain[playerID] == 4)
        if EUDElseIf()(v.P_CountMain[playerID] == 4):
            # (Line 176) {
            # (Line 177) trg.SkillEnd();
            trg.SkillEnd()
            # (Line 178) }
            # (Line 179) }
        EUDEndIf()
        # (Line 180) }
    EUDEndIf()
