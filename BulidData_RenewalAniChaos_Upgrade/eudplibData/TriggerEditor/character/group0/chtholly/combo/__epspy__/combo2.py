## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _RELIMP(path, mod_name):
    import inspect, pathlib, importlib.util
    p = pathlib.Path(inspect.getabsfile(inspect.currentframe())).parent
    for s in path.split("."):
        if s == "":  p = p.parent
        else:  p = p / s
    try:
        spec = importlib.util.spec_from_file_location(mod_name, p / (mod_name + ".py"))
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
    except FileNotFoundError:
        loader = EPSLoader(mod_name, str(p / (mod_name + ".eps")))
        spec = importlib.util.spec_from_loader(mod_name, loader)
        module = loader.create_module(spec)
        loader.exec_module(module)
    return module

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 4) import func.sound as s;
from func import sound as s
# (Line 6) function main(playerID)
# (Line 7) {
@EUDFunc
def f_main(playerID):
    # (Line 8) MoveUnit(All, "40 + 1n Marine", playerID, "Anywhere", "[Skill]HoldPosition");
    # (Line 9) MoveUnit(All, "40 + 1n Mojo", playerID, "Anywhere", "[Skill]HoldPosition");
    DoActions(MoveUnit(All, "40 + 1n Marine", playerID, "Anywhere", "[Skill]HoldPosition"))
    # (Line 10) MoveUnit(All, "50 + 1n Tank", playerID, "Anywhere", "[Skill]HoldPosition");
    DoActions(MoveUnit(All, "40 + 1n Mojo", playerID, "Anywhere", "[Skill]HoldPosition"))
    # (Line 11) MoveUnit(All, "60 + 1n Danimoth", playerID, "Anywhere", "[Skill]HoldPosition");
    DoActions(MoveUnit(All, "50 + 1n Tank", playerID, "Anywhere", "[Skill]HoldPosition"))
    # (Line 12) trg.Debuff_BanReturn();
    DoActions(MoveUnit(All, "60 + 1n Danimoth", playerID, "Anywhere", "[Skill]HoldPosition"))
    trg.Debuff_BanReturn()
    # (Line 14) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 15) {
        # (Line 16) if (v.P_CountMain[playerID] == 0 && v.P_LoopMain[playerID] <= 6)
        if EUDIf()(EUDSCAnd()(v.P_CountMain[playerID] == 0)(v.P_LoopMain[playerID] <= 6)()):
            # (Line 17) {
            # (Line 18) trg.Shape_Square(playerID, 1, "80 + 1n Tank", 16 * (v.P_LoopMain[playerID] + 1), 16 * (v.P_LoopMain[playerID] + 1));
            trg.Shape_Square(playerID, 1, "80 + 1n Tank", 16 * (v.P_LoopMain[playerID] + 1), 16 * (v.P_LoopMain[playerID] + 1))
            # (Line 19) trg.Shape_Square(playerID, 1, "Zerg Devourer", 16 * (v.P_LoopMain[playerID] + 1), 16 * (v.P_LoopMain[playerID] + 1));
            trg.Shape_Square(playerID, 1, "Zerg Devourer", 16 * (v.P_LoopMain[playerID] + 1), 16 * (v.P_LoopMain[playerID] + 1))
            # (Line 20) KillUnitAt(All, "80 + 1n Tank", "Anywhere", playerID);
            # (Line 21) KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "80 + 1n Tank", "Anywhere", playerID))
            # (Line 22) trg.Main_Wait(0);
            DoActions(KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID))
            trg.Main_Wait(0)
            # (Line 23) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 24) }
            # (Line 25) else if (v.P_CountMain[playerID] == 0 && v.P_LoopMain[playerID] == 7)
        if EUDElseIf()(EUDSCAnd()(v.P_CountMain[playerID] == 0)(v.P_LoopMain[playerID] == 7)()):
            # (Line 26) {
            # (Line 27) trg.Shape_Square(playerID, 1, "50 + 1n Tank", 16 * (v.P_LoopMain[playerID] + 1), 16 * (v.P_LoopMain[playerID] + 1));
            trg.Shape_Square(playerID, 1, "50 + 1n Tank", 16 * (v.P_LoopMain[playerID] + 1), 16 * (v.P_LoopMain[playerID] + 1))
            # (Line 28) trg.Shape_Square(playerID, 1, "Zerg Devourer", 16 * (v.P_LoopMain[playerID] + 1), 16 * (v.P_LoopMain[playerID] + 1));
            trg.Shape_Square(playerID, 1, "Zerg Devourer", 16 * (v.P_LoopMain[playerID] + 1), 16 * (v.P_LoopMain[playerID] + 1))
            # (Line 29) KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID);
            # (Line 30) trg.Main_Wait(0);
            DoActions(KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID))
            trg.Main_Wait(0)
            # (Line 31) v.P_CountMain[playerID] += 1;
            _ARRW(v.P_CountMain, playerID).__iadd__(1)
            # (Line 32) v.P_LoopMain[playerID] = 0;
            _ARRW(v.P_LoopMain, playerID) << (0)
            # (Line 33) }
            # (Line 34) else if (v.P_CountMain[playerID] == 1 && v.P_LoopMain[playerID] <= 7)
        if EUDElseIf()(EUDSCAnd()(v.P_CountMain[playerID] == 1)(v.P_LoopMain[playerID] <= 7)()):
            # (Line 35) {
            # (Line 36) trg.Shape_Square(playerID, 1, "80 + 1n Tank", 20 * (v.P_LoopMain[playerID] + 1), 0);
            trg.Shape_Square(playerID, 1, "80 + 1n Tank", 20 * (v.P_LoopMain[playerID] + 1), 0)
            # (Line 37) trg.Shape_Square(playerID, 1, "Zerg Devourer", 20 * (v.P_LoopMain[playerID] + 1), 0);
            trg.Shape_Square(playerID, 1, "Zerg Devourer", 20 * (v.P_LoopMain[playerID] + 1), 0)
            # (Line 38) KillUnitAt(All, "80 + 1n Tank", "Anywhere", playerID);
            # (Line 39) KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "80 + 1n Tank", "Anywhere", playerID))
            # (Line 40) trg.Main_Wait(0);
            DoActions(KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID))
            trg.Main_Wait(0)
            # (Line 41) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 42) }
            # (Line 43) else if (v.P_CountMain[playerID] == 1 && v.P_LoopMain[playerID] == 8)
        if EUDElseIf()(EUDSCAnd()(v.P_CountMain[playerID] == 1)(v.P_LoopMain[playerID] == 8)()):
            # (Line 44) {
            # (Line 45) trg.Shape_Square(playerID, 1, "50 + 1n Tank", 20 * (v.P_LoopMain[playerID] + 1), 0);
            trg.Shape_Square(playerID, 1, "50 + 1n Tank", 20 * (v.P_LoopMain[playerID] + 1), 0)
            # (Line 46) trg.Shape_Square(playerID, 1, "Zerg Devourer",  20 * (v.P_LoopMain[playerID] + 1), 0);
            trg.Shape_Square(playerID, 1, "Zerg Devourer", 20 * (v.P_LoopMain[playerID] + 1), 0)
            # (Line 47) trg.MoveLoc(v.P_UnitID[playerID], playerID, 0, 0);
            trg.MoveLoc(v.P_UnitID[playerID], playerID, 0, 0)
            # (Line 48) MoveUnit(All, "50 + 1n Tank", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
            # (Line 49) Order("50 + 1n Tank", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            DoActions(MoveUnit(All, "50 + 1n Tank", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
            # (Line 50) KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID);
            DoActions(Order("50 + 1n Tank", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
            # (Line 51) trg.Main_Wait(300);
            DoActions(KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID))
            trg.Main_Wait(300)
            # (Line 52) v.P_CountMain[playerID] += 1;
            _ARRW(v.P_CountMain, playerID).__iadd__(1)
            # (Line 53) v.P_LoopMain[playerID] = 0;
            _ARRW(v.P_LoopMain, playerID) << (0)
            # (Line 54) }
            # (Line 55) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 56) {
            # (Line 57) trg.Shape_Square(playerID, 1, "40 + 1n Marine", 64, 64);
            trg.Shape_Square(playerID, 1, "40 + 1n Marine", 64, 64)
            # (Line 58) trg.Shape_Square(playerID, 1, "40 + 1n Marine", 90, 0);
            trg.Shape_Square(playerID, 1, "40 + 1n Marine", 90, 0)
            # (Line 59) trg.Shape_Square(playerID, 8, "40 + 1n Lurker",  64, 64);
            trg.Shape_Square(playerID, 8, "40 + 1n Lurker", 64, 64)
            # (Line 60) trg.Shape_Square(playerID, 8, "40 + 1n Lurker",  90, 0);
            trg.Shape_Square(playerID, 8, "40 + 1n Lurker", 90, 0)
            # (Line 61) trg.MoveLoc(v.P_UnitID[playerID], playerID, 0, 0);
            trg.MoveLoc(v.P_UnitID[playerID], playerID, 0, 0)
            # (Line 62) MoveUnit(All, "40 + 1n Marine", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
            # (Line 63) Order("40 + 1n Marine", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            DoActions(MoveUnit(All, "40 + 1n Marine", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
            # (Line 64) KillUnitAt(All, "40 + 1n Lurker", "Anywhere", playerID);
            DoActions(Order("40 + 1n Marine", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
            # (Line 65) trg.Main_Wait(3500);
            DoActions(KillUnitAt(All, "40 + 1n Lurker", "Anywhere", playerID))
            trg.Main_Wait(3500)
            # (Line 66) v.P_CountMain[playerID] += 1;
            _ARRW(v.P_CountMain, playerID).__iadd__(1)
            # (Line 67) }
            # (Line 68) else if (v.P_CountMain[playerID] == 3 && v.P_LoopMain[playerID] <= 3)
        if EUDElseIf()(EUDSCAnd()(v.P_CountMain[playerID] == 3)(v.P_LoopMain[playerID] <= 3)()):
            # (Line 69) {
            # (Line 70) trg.Shape_Square(playerID, 8, "60 + 1n High Templar", 32 * (v.P_LoopMain[playerID] + 1), 32 * (v.P_LoopMain[playerID] + 1));
            trg.Shape_Square(playerID, 8, "60 + 1n High Templar", 32 * (v.P_LoopMain[playerID] + 1), 32 * (v.P_LoopMain[playerID] + 1))
            # (Line 71) trg.Shape_Square(playerID, 8, "60 + 1n High Templar", 45 * (v.P_LoopMain[playerID] + 1), 0);
            trg.Shape_Square(playerID, 8, "60 + 1n High Templar", 45 * (v.P_LoopMain[playerID] + 1), 0)
            # (Line 72) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
            # (Line 73) trg.Main_Wait(100);
            DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
            trg.Main_Wait(100)
            # (Line 74) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 75) }
            # (Line 76) else if (v.P_CountMain[playerID] == 3 && v.P_LoopMain[playerID] == 4)
        if EUDElseIf()(EUDSCAnd()(v.P_CountMain[playerID] == 3)(v.P_LoopMain[playerID] == 4)()):
            # (Line 77) {
            # (Line 78) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 64, 64);
            trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 64, 64)
            # (Line 79) trg.Shape_Square(playerID, 8, "Torrasque", 90, 0);
            trg.Shape_Square(playerID, 8, "Torrasque", 90, 0)
            # (Line 80) trg.MoveLoc(v.P_UnitID[playerID], playerID, 0, 0);
            trg.MoveLoc(v.P_UnitID[playerID], playerID, 0, 0)
            # (Line 81) Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            # (Line 82) KillUnitAt(All, "Torrasque", "Anywhere", playerID);
            DoActions(Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
            # (Line 83) trg.Main_Wait(0);
            DoActions(KillUnitAt(All, "Torrasque", "Anywhere", playerID))
            trg.Main_Wait(0)
            # (Line 84) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 85) }
            # (Line 86) else if (v.P_CountMain[playerID] == 3 && v.P_LoopMain[playerID] == 5)
        if EUDElseIf()(EUDSCAnd()(v.P_CountMain[playerID] == 3)(v.P_LoopMain[playerID] == 5)()):
            # (Line 87) {
            # (Line 88) s.CharacterVoice(2);
            s.CharacterVoice(2)
            # (Line 89) trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", 180, 0);
            trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", 180, 0)
            # (Line 90) trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", 128, 128);
            trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", 128, 128)
            # (Line 91) trg.Shape_Square(playerID, 8, "Torrasque", 128, 128);
            trg.Shape_Square(playerID, 8, "Torrasque", 128, 128)
            # (Line 92) trg.MoveLoc(v.P_UnitID[playerID], playerID, 0, 0);
            trg.MoveLoc(v.P_UnitID[playerID], playerID, 0, 0)
            # (Line 93) Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            # (Line 94) KillUnitAt(All, "Torrasque", "Anywhere", playerID);
            DoActions(Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
            # (Line 95) trg.Main_Wait(2750);
            DoActions(KillUnitAt(All, "Torrasque", "Anywhere", playerID))
            trg.Main_Wait(2750)
            # (Line 96) v.P_CountMain[playerID] += 1;
            _ARRW(v.P_CountMain, playerID).__iadd__(1)
            # (Line 97) v.P_LoopMain[playerID] = 0;
            _ARRW(v.P_LoopMain, playerID) << (0)
            # (Line 98) }
            # (Line 99) else if (v.P_CountMain[playerID] == 4
        _t10 = EUDElseIf()
        # (Line 100) && Bring(playerID, AtLeast, 1, "Protoss Scout", "[Skill]UseSkill")
        # (Line 101) && Bring(playerID, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill"))
        if _t10(EUDSCAnd()(v.P_CountMain[playerID] == 4)(Bring(playerID, AtLeast, 1, "Protoss Scout", "[Skill]UseSkill"))(Bring(playerID, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill"))()):
            # (Line 102) {
            # (Line 103) KillUnitAt(All, "40 + 1n Marine", "Anywhere", playerID);
            # (Line 104) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Marine", "Anywhere", playerID))
            # (Line 105) KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
            # (Line 106) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID))
            # (Line 108) s.CharacterVoice(3);
            DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
            s.CharacterVoice(3)
            # (Line 109) KillUnitAt(1, "Protoss Arbiter", "[Skill]UseSkill", playerID);
            # (Line 110) KillUnitAt(1, "Protoss Scout", "[Skill]UseSkill", playerID);
            DoActions(KillUnitAt(1, "Protoss Arbiter", "[Skill]UseSkill", playerID))
            # (Line 112) v.P_Step[playerID] = 220;
            DoActions(KillUnitAt(1, "Protoss Scout", "[Skill]UseSkill", playerID))
            _ARRW(v.P_Step, playerID) << (220)
            # (Line 113) v.P_CountMain[playerID] = 0;
            _ARRW(v.P_CountMain, playerID) << (0)
            # (Line 114) v.P_LoopMain[playerID] = 0;
            _ARRW(v.P_LoopMain, playerID) << (0)
            # (Line 115) }
            # (Line 116) else if (v.P_CountMain[playerID] == 4)
        if EUDElseIf()(v.P_CountMain[playerID] == 4):
            # (Line 117) {
            # (Line 118) KillUnitAt(All, "40 + 1n Marine", "Anywhere", playerID);
            # (Line 119) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Marine", "Anywhere", playerID))
            # (Line 120) KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
            # (Line 121) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID))
            # (Line 122) trg.SkillEnd();
            DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
            trg.SkillEnd()
            # (Line 123) }
            # (Line 124) }
        EUDEndIf()
        # (Line 125) }
    EUDEndIf()
