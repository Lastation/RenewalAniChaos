## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _RELIMP(path, mod_name):
    import inspect, pathlib, importlib.util
    p = pathlib.Path(inspect.getabsfile(inspect.currentframe())).parent
    for s in path.split("."):
        if s == "":  p = p.parent
        else:  p = p / s
    try:
        spec = importlib.util.spec_from_file_location(mod_name, p / (mod_name + ".py"))
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
    except FileNotFoundError:
        loader = EPSLoader(mod_name, str(p / (mod_name + ".eps")))
        spec = importlib.util.spec_from_loader(mod_name, loader)
        module = loader.create_module(spec)
        loader.exec_module(module)
    return module

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 4) import func.sound as s;
from func import sound as s
# (Line 6) const P_player		= PVariable();
P_player = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 7) const P_observer 	= PVariable();
P_observer = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 9) function Text(num);
# (Line 11) function player(playerID)
# (Line 12) {
@EUDFunc
def f_player(playerID):
    # (Line 13) Text(P_player[playerID]);
    Text(P_player[playerID])
    # (Line 14) P_player[playerID] = 0;
    _ARRW(P_player, playerID) << (0)
    # (Line 15) }
    # (Line 17) function observer(playerID)

# (Line 18) {
@EUDFunc
def f_observer(playerID):
    # (Line 19) Text(P_observer[playerID - 128]);
    Text(P_observer[playerID - 128])
    # (Line 20) P_observer[playerID - 128] = 0;
    _ARRW(P_observer, playerID - 128) << (0)
    # (Line 21) }
    # (Line 23) function main(playerID)

# (Line 24) {
@EUDFunc
def f_main(playerID):
    # (Line 25) if (playerID < 6) 	{ player(playerID); 	}
    if EUDIf()(playerID >= 6, neg=True):
        f_player(playerID)
        # (Line 26) else  			{ observer(playerID); }
    if EUDElse()():
        f_observer(playerID)
        # (Line 27) }
    EUDEndIf()
    # (Line 29) function Text(num)

# (Line 30) {
@EUDFunc
def Text(num):
    # (Line 31) switch(num)
    EUDSwitch(num)
    # (Line 32) {
    # (Line 33) case 1:
    _t1 = EUDSwitchCase()
    # (Line 34) PlayWAV("Rusaruka_1.ogg");
    if _t1(1):
        # (Line 35) v.stb.print("\x13\x1BRusaruka Schwagerin\n");
        DoActions(PlayWAV("Rusaruka_1.ogg"))
        v.stb.print("\x13\x1BRusaruka Schwagerin\n")
        # (Line 36) v.stb.print("\x13\x04[ \x06너무 얕보면... 먹어버릴거야? \x04]");
        v.stb.print("\x13\x04[ \x06너무 얕보면... 먹어버릴거야? \x04]")
        # (Line 37) break;
        EUDBreak()
        # (Line 38) case 2:
    _t2 = EUDSwitchCase()
    # (Line 39) PlayWAV("Rusaruka_2.ogg");
    if _t2(2):
        # (Line 40) v.stb.print("\x13\x1BRusaruka Schwagerin\n");
        DoActions(PlayWAV("Rusaruka_2.ogg"))
        v.stb.print("\x13\x1BRusaruka Schwagerin\n")
        # (Line 41) v.stb.print("\x13\x04[ \x06좋아, 내가 시험해줄게. 술래잡기를 계속하도록 할까? \x04]");
        v.stb.print("\x13\x04[ \x06좋아, 내가 시험해줄게. 술래잡기를 계속하도록 할까? \x04]")
        # (Line 42) break;
        EUDBreak()
        # (Line 43) case 3:
    _t3 = EUDSwitchCase()
    # (Line 44) PlayWAV("Rusaruka_3.ogg");
    if _t3(3):
        # (Line 45) v.stb.print("\x13\x1BRusaruka Schwagerin\n");
        DoActions(PlayWAV("Rusaruka_3.ogg"))
        v.stb.print("\x13\x1BRusaruka Schwagerin\n")
        # (Line 46) v.stb.print("\x13\x04[ \x06조금 아프겠지만, 참으렴...! \x04]\n\n");
        v.stb.print("\x13\x04[ \x06조금 아프겠지만, 참으렴...! \x04]\n\n")
        # (Line 47) break;
        EUDBreak()
        # (Line 48) case 4:
    _t4 = EUDSwitchCase()
    # (Line 49) PlayWAV("Rusaruka_4.ogg");
    if _t4(4):
        # (Line 50) v.stb.print("\x13\x1BRusaruka Schwagerin\n");
        DoActions(PlayWAV("Rusaruka_4.ogg"))
        v.stb.print("\x13\x1BRusaruka Schwagerin\n")
        # (Line 51) v.stb.print("\x13\x04[ 당신 여기서 \x06살해\x04당하고 싶어...? \x04]");
        v.stb.print("\x13\x04[ 당신 여기서 \x06살해\x04당하고 싶어...? \x04]")
        # (Line 52) break;
        EUDBreak()
        # (Line 53) case 5:
    _t5 = EUDSwitchCase()
    # (Line 54) PlayWAV("Rusalka_Ultimate.ogg");
    if _t5(5):
        # (Line 55) v.stb.printAt(3, "\x13\x1BRusaruka Schwagerin\n");
        DoActions(PlayWAV("Rusalka_Ultimate.ogg"))
        v.stb.printAt(3, "\x13\x1BRusaruka Schwagerin\n")
        # (Line 56) v.stb.printAt(5, "\n\x13\x06무서웠단 말이야! 놔두고 가버릴지!\n\x13\x06싫단 말이야! 떠밀려버리면!\n\x13\x06나... 걷는 거 느리단 말이야─!");
        v.stb.printAt(5, "\n\x13\x06무서웠단 말이야! 놔두고 가버릴지!\n\x13\x06싫단 말이야! 떠밀려버리면!\n\x13\x06나... 걷는 거 느리단 말이야─!")
        # (Line 57) break;
        EUDBreak()
        # (Line 58) case 6:
    _t6 = EUDSwitchCase()
    # (Line 59) v.stb.printAt(3, "\x13\x1BRusaruka Schwagerin\n");
    if _t6(6):
        v.stb.printAt(3, "\x13\x1BRusaruka Schwagerin\n")
        # (Line 60) v.stb.printAt(5, "\n\x13\x06따라 잡을 수 없다면,\n\x13\x06아예 멈춰 세우겠다고!\n\x13\x06그렇게 생각했어! 불만있어!?");
        v.stb.printAt(5, "\n\x13\x06따라 잡을 수 없다면,\n\x13\x06아예 멈춰 세우겠다고!\n\x13\x06그렇게 생각했어! 불만있어!?")
        # (Line 61) break;
        EUDBreak()
        # (Line 62) case 7:
    _t7 = EUDSwitchCase()
    # (Line 63) PlayWAV("Rusalka_Unique.ogg");
    if _t7(7):
        # (Line 64) v.stb.printAt(3, "\x13\x1BRusaruka Schwagerin\n");
        DoActions(PlayWAV("Rusalka_Unique.ogg"))
        v.stb.printAt(3, "\x13\x1BRusaruka Schwagerin\n")
        # (Line 65) v.stb.printAt(5, "\n\x13\x05In der Nacht, wo alles schlaft\n\x13\x04모든것이 잠드는 밤에\n\n\x13\x05Wie schon, den Meeresboden zu verlassen.\n\x13\x04물밑을 벗어나는것이야 말로 아름다움이니.");
        v.stb.printAt(5, "\n\x13\x05In der Nacht, wo alles schlaft\n\x13\x04모든것이 잠드는 밤에\n\n\x13\x05Wie schon, den Meeresboden zu verlassen.\n\x13\x04물밑을 벗어나는것이야 말로 아름다움이니.")
        # (Line 66) break;
        EUDBreak()
        # (Line 67) case 8:
    _t8 = EUDSwitchCase()
    # (Line 68) v.stb.printAt(3, "\x13\x1BRusaruka Schwagerin\n");
    if _t8(8):
        v.stb.printAt(3, "\x13\x1BRusaruka Schwagerin\n")
        # (Line 69) v.stb.printAt(5, "\n\x13\x05Ich hebe den Kopf uber das Wasser\n\x13\x04수면에 고개 들어\n\n\x13\x05Welch Freude, das Spiel der Wasserwellen\n\x13\x04물장구치며 놀자, 즐기어라.");
        v.stb.printAt(5, "\n\x13\x05Ich hebe den Kopf uber das Wasser\n\x13\x04수면에 고개 들어\n\n\x13\x05Welch Freude, das Spiel der Wasserwellen\n\x13\x04물장구치며 놀자, 즐기어라.")
        # (Line 70) break;
        EUDBreak()
        # (Line 71) case 9:
    _t9 = EUDSwitchCase()
    # (Line 72) v.stb.printAt(3, "\x13\x1BRusaruka Schwagerin\n");
    if _t9(9):
        v.stb.printAt(3, "\x13\x1BRusaruka Schwagerin\n")
        # (Line 73) v.stb.printAt(5, "\n\x13\x05Durch die nun zerbrochene Stille\n\x13\x04맑은 대기를 울리고\n\n\x13\x05Rufen wir unsere Namen\n\x13\x04서로 크게 불러");
        v.stb.printAt(5, "\n\x13\x05Durch die nun zerbrochene Stille\n\x13\x04맑은 대기를 울리고\n\n\x13\x05Rufen wir unsere Namen\n\x13\x04서로 크게 불러")
        # (Line 74) break;
        EUDBreak()
        # (Line 75) case 10:
    _t10 = EUDSwitchCase()
    # (Line 76) v.stb.printAt(3, "\x13\x1BRusaruka Schwagerin\n");
    if _t10(10):
        v.stb.printAt(3, "\x13\x1BRusaruka Schwagerin\n")
        # (Line 77) v.stb.printAt(5, "\n\x13\x05Pechschwarzes Haar wirbelt im Wind\n\x13\x04새까만 젖은 머리를 털어……\n\n\x13\x05Welch Freude, sie trocknen zu sehen\n\x13\x04말리며 놀자, 즐겨라");
        v.stb.printAt(5, "\n\x13\x05Pechschwarzes Haar wirbelt im Wind\n\x13\x04새까만 젖은 머리를 털어……\n\n\x13\x05Welch Freude, sie trocknen zu sehen\n\x13\x04말리며 놀자, 즐겨라")
        # (Line 78) break;
        EUDBreak()
        # (Line 79) case 11:
    _t11 = EUDSwitchCase()
    # (Line 80) v.stb.printAt(3, "\x13\x1BRusaruka Schwagerin\n");
    if _t11(11):
        v.stb.printAt(3, "\x13\x1BRusaruka Schwagerin\n")
        # (Line 81) v.stb.printAt(5, "\n\x13\x05Briah――\n\x13\x04창조\n\n\x13\x05Csejte Ungarn Nachtzehrer\n\x13\x04체터성의 식인그림자\n\n");
        v.stb.printAt(5, "\n\x13\x05Briah――\n\x13\x04창조\n\n\x13\x05Csejte Ungarn Nachtzehrer\n\x13\x04체터성의 식인그림자\n\n")
        # (Line 82) break;
        EUDBreak()
        # (Line 83) }
    # (Line 84) }
    EUDEndSwitch()
