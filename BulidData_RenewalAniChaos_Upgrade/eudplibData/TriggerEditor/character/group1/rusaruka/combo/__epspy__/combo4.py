## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import variable as v;
import variable as v
# (Line 2) import func.trig as trg;
from func import trig as trg
# (Line 4) function main(playerID)
# (Line 5) {
@EUDFunc
def f_main(playerID):
    # (Line 6) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 7) {
        # (Line 8) if(v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 9) {
            # (Line 10) if (v.P_LoopMain[playerID] < 11)
            if EUDIf()(v.P_LoopMain[playerID] >= 11, neg=True):
                # (Line 11) {
                # (Line 12) trg.Table_Cos(playerID, 9 * v.P_LoopMain[playerID], 160);
                trg.Table_Cos(playerID, 9 * v.P_LoopMain[playerID], 160)
                # (Line 13) trg.Table_Sin(playerID, 9 * v.P_LoopMain[playerID], 160);
                trg.Table_Sin(playerID, 9 * v.P_LoopMain[playerID], 160)
                # (Line 15) trg.Shape_Square(playerID, 1, "Zerg Devourer", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "Zerg Devourer", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 16) trg.Shape_Square(playerID, 1,"40 + 1n Zergling", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "40 + 1n Zergling", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 17) KillUnitAt(All, "40 + 1n Zergling", "Anywhere", playerID);
                # (Line 18) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "40 + 1n Zergling", "Anywhere", playerID))
                # (Line 19) Order("Zerg Devourer", playerID, "Anywhere", Move, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 20) trg.Main_Wait(0);
                DoActions(Order("Zerg Devourer", playerID, "Anywhere", Move, v.P_LocationID[playerID]))
                trg.Main_Wait(0)
                # (Line 21) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 22) }
                # (Line 23) else if (v.P_LoopMain[playerID] == 11)
            if EUDElseIf()(v.P_LoopMain[playerID] == 11):
                # (Line 24) {
                # (Line 25) KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID);
                # (Line 26) v.P_LoopMain[playerID] = 0;
                DoActions(KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID))
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 27) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 28) }
                # (Line 29) }
            EUDEndIf()
            # (Line 30) else if(v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 31) {
            # (Line 32) if (v.P_LoopMain[playerID] < 6)
            if EUDIf()(v.P_LoopMain[playerID] >= 6, neg=True):
                # (Line 33) {
                # (Line 34) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
                # (Line 36) trg.Shape_Square(playerID, 1, "40 + 1n Wraith", 192 - 32 * v.P_LoopMain[playerID],  32 * v.P_LoopMain[playerID]);
                DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                trg.Shape_Square(playerID, 1, "40 + 1n Wraith", 192 - 32 * v.P_LoopMain[playerID], 32 * v.P_LoopMain[playerID])
                # (Line 37) trg.Shape_Square(playerID, 1, "Torrasque", 96 - 16 * v.P_LoopMain[playerID], 16 * v.P_LoopMain[playerID]);
                trg.Shape_Square(playerID, 1, "Torrasque", 96 - 16 * v.P_LoopMain[playerID], 16 * v.P_LoopMain[playerID])
                # (Line 38) KillUnitAt(All, "Torrasque", "Anywhere", playerID);
                # (Line 39) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "Torrasque", "Anywhere", playerID))
                # (Line 40) Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 41) trg.Main_Wait(0);
                DoActions(Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(0)
                # (Line 42) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 43) }
                # (Line 44) else if (v.P_LoopMain[playerID] >= 6 && v.P_LoopMain[playerID] < 12)
            if EUDElseIf()(EUDSCAnd()(v.P_LoopMain[playerID] >= 6)(v.P_LoopMain[playerID] >= 12, neg=True)()):
                # (Line 45) {
                # (Line 46) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
                # (Line 47) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                # (Line 49) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 192 - 32 * v.P_LoopMain[playerID],  32 * v.P_LoopMain[playerID] - 192);
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
                trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 192 - 32 * v.P_LoopMain[playerID], 32 * v.P_LoopMain[playerID] - 192)
                # (Line 50) trg.Shape_Square(playerID, 1, "Torrasque", 96 - 16 * v.P_LoopMain[playerID], 16 * v.P_LoopMain[playerID] - 96);
                trg.Shape_Square(playerID, 1, "Torrasque", 96 - 16 * v.P_LoopMain[playerID], 16 * v.P_LoopMain[playerID] - 96)
                # (Line 51) KillUnitAt(All, "Torrasque", "Anywhere", playerID);
                # (Line 52) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "Torrasque", "Anywhere", playerID))
                # (Line 53) Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 54) trg.Main_Wait(0);
                DoActions(Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(0)
                # (Line 55) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 56) }
                # (Line 57) else if (v.P_LoopMain[playerID] == 12)
            if EUDElseIf()(v.P_LoopMain[playerID] == 12):
                # (Line 58) {
                # (Line 59) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
                # (Line 60) trg.Main_Wait(500);
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
                trg.Main_Wait(500)
                # (Line 61) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 62) }
                # (Line 63) else if (v.P_LoopMain[playerID] == 13)
            if EUDElseIf()(v.P_LoopMain[playerID] == 13):
                # (Line 64) {
                # (Line 66) trg.Table_Cos(playerID, 30, 96);
                trg.Table_Cos(playerID, 30, 96)
                # (Line 67) trg.Table_Sin(playerID, 30, 96);
                trg.Table_Sin(playerID, 30, 96)
                # (Line 68) trg.Shape_Square(playerID, 1, "40 + 1n Guardian", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "40 + 1n Guardian", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 70) trg.Table_Cos(playerID, 60, 96);
                trg.Table_Cos(playerID, 60, 96)
                # (Line 71) trg.Table_Sin(playerID, 60, 96);
                trg.Table_Sin(playerID, 60, 96)
                # (Line 72) trg.Shape_Square(playerID, 1, "40 + 1n Guardian", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "40 + 1n Guardian", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 74) trg.Shape_Cross(playerID, 1, "50 + 1n Battlecruiser", 0, 5, 48);
                trg.Shape_Cross(playerID, 1, "50 + 1n Battlecruiser", 0, 5, 48)
                # (Line 75) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 76) Order("40 + 1n Guardian", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 77) Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(Order("40 + 1n Guardian", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 78) trg.Main_Wait(1000);
                DoActions(Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(1000)
                # (Line 79) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 80) }
                # (Line 81) else if (v.P_LoopMain[playerID] == 14)
            if EUDElseIf()(v.P_LoopMain[playerID] == 14):
                # (Line 82) {
                # (Line 83) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 84) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                # (Line 85) trg.SkillEnd();
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                trg.SkillEnd()
                # (Line 86) }
                # (Line 87) }
            EUDEndIf()
            # (Line 88) }
        EUDEndIf()
        # (Line 89) }
    EUDEndIf()
