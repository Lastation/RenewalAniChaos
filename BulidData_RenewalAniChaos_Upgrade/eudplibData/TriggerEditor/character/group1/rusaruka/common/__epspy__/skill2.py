## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 5) function Shape(playerID, Unit : TrgUnit, x, y);
# (Line 7) function main(playerID)
# (Line 8) {
@EUDFunc
def f_main(playerID):
    # (Line 9) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 10) {
        # (Line 11) if (v.P_CountMain[playerID] == 0 || v.P_CountMain[playerID] == 4)
        if EUDIf()(EUDSCOr()(v.P_CountMain[playerID] == 0)(v.P_CountMain[playerID] == 4)()):
            # (Line 12) {
            # (Line 13) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
            # (Line 14) Shape(playerID, "40 + 1n Mojo", 0, 48);
            DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
            Shape(playerID, "40 + 1n Mojo", 0, 48)
            # (Line 15) }
            # (Line 16) else if (v.P_CountMain[playerID] == 1 || v.P_CountMain[playerID] == 5)
        if EUDElseIf()(EUDSCOr()(v.P_CountMain[playerID] == 1)(v.P_CountMain[playerID] == 5)()):
            # (Line 17) {
            # (Line 18) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
            # (Line 19) Shape(playerID, "40 + 1n Wraith", 42, 24);
            DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
            Shape(playerID, "40 + 1n Wraith", 42, 24)
            # (Line 20) }
            # (Line 21) else if (v.P_CountMain[playerID] == 2 || v.P_CountMain[playerID] == 6)
        if EUDElseIf()(EUDSCOr()(v.P_CountMain[playerID] == 2)(v.P_CountMain[playerID] == 6)()):
            # (Line 22) {
            # (Line 23) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
            # (Line 24) Shape(playerID, "40 + 1n Mutalisk", 24, 42);
            DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
            Shape(playerID, "40 + 1n Mutalisk", 24, 42)
            # (Line 25) }
            # (Line 26) else if (v.P_CountMain[playerID] == 3 || v.P_CountMain[playerID] == 7)
        if EUDElseIf()(EUDSCOr()(v.P_CountMain[playerID] == 3)(v.P_CountMain[playerID] == 7)()):
            # (Line 27) {
            # (Line 28) KillUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID);
            # (Line 29) Shape(playerID, "40 + 1n Mojo", 48, 0);
            DoActions(KillUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID))
            Shape(playerID, "40 + 1n Mojo", 48, 0)
            # (Line 30) }
            # (Line 31) else if (v.P_CountMain[playerID] == 8)
        if EUDElseIf()(v.P_CountMain[playerID] == 8):
            # (Line 32) {
            # (Line 33) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
            # (Line 34) trg.SkillEnd();
            DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
            trg.SkillEnd()
            # (Line 35) }
            # (Line 36) }
        EUDEndIf()
        # (Line 37) }
    EUDEndIf()
    # (Line 39) function Shape(playerID, Unit : TrgUnit, x, y)

# (Line 40) {
@EUDTypedFunc([None, TrgUnit, None, None])
def Shape(playerID, Unit, x, y):
    # (Line 41) trg.MoveLoc(v.P_UnitID[playerID], playerID, x, y);
    trg.MoveLoc(v.P_UnitID[playerID], playerID, x, y)
    # (Line 42) trg.SkillUnit(playerID, 1, Unit);
    trg.SkillUnit(playerID, 1, Unit)
    # (Line 43) trg.SkillUnit(playerID, 1, "Protoss Dark Templar");
    trg.SkillUnit(playerID, 1, "Protoss Dark Templar")
    # (Line 44) trg.MoveLoc(v.P_UnitID[playerID], playerID, -y, x);
    trg.MoveLoc(v.P_UnitID[playerID], playerID, -y, x)
    # (Line 45) trg.SkillUnit(playerID, 1, "Protoss Dark Templar");
    trg.SkillUnit(playerID, 1, "Protoss Dark Templar")
    # (Line 46) trg.MoveLoc(v.P_UnitID[playerID], playerID, -x, -y);
    trg.MoveLoc(v.P_UnitID[playerID], playerID, -x, -y)
    # (Line 47) trg.SkillUnit(playerID, 1, Unit);
    trg.SkillUnit(playerID, 1, Unit)
    # (Line 48) trg.SkillUnit(playerID, 1, "Protoss Dark Templar");
    trg.SkillUnit(playerID, 1, "Protoss Dark Templar")
    # (Line 49) trg.MoveLoc(v.P_UnitID[playerID], playerID, y, -x);
    trg.MoveLoc(v.P_UnitID[playerID], playerID, y, -x)
    # (Line 50) trg.SkillUnit(playerID, 1, "Protoss Dark Templar");
    trg.SkillUnit(playerID, 1, "Protoss Dark Templar")
    # (Line 51) KillUnitAt(All, "Protoss Dark Templar", "Anywhere", playerID);
    # (Line 52) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
    DoActions(KillUnitAt(All, "Protoss Dark Templar", "Anywhere", playerID))
    # (Line 53) Order(Unit, playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
    # (Line 54) trg.Main_Wait(50);
    DoActions(Order(Unit, playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
    trg.Main_Wait(50)
    # (Line 55) v.P_CountMain[playerID] += 1;
    _ARRW(v.P_CountMain, playerID).__iadd__(1)
    # (Line 56) }
