## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 4) import func.sound as s;
from func import sound as s
# (Line 6) function main(playerID)
# (Line 7) {
@EUDFunc
def f_main(playerID):
    # (Line 8) trg.Buff_ShieldFix(1);
    trg.Buff_ShieldFix(1)
    # (Line 9) trg.Debuff_Stop();
    trg.Debuff_Stop()
    # (Line 11) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 12) {
        # (Line 13) if(v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 14) {
            # (Line 15) if (v.P_LoopMain[playerID] <= 5)
            if EUDIf()(v.P_LoopMain[playerID] <= 5):
                # (Line 16) {
                # (Line 17) if (Bring(playerID, AtLeast, 1, v.P_UnitID[playerID], "[Map]Team2"))
                if EUDIf()(Bring(playerID, AtLeast, 1, v.P_UnitID[playerID], "[Map]Team2")):
                    # (Line 18) { SetAllianceStatus(P8, Ally); }
                    DoActions(SetAllianceStatus(P8, Ally))
                    # (Line 19) if (Bring(playerID, AtLeast, 1, v.P_UnitID[playerID], "[Map]Team1"))
                EUDEndIf()
                if EUDIf()(Bring(playerID, AtLeast, 1, v.P_UnitID[playerID], "[Map]Team1")):
                    # (Line 20) { SetAllianceStatus(P7, Ally); }
                    DoActions(SetAllianceStatus(P7, Ally))
                    # (Line 22) trg.Shape_NxNSquare(playerID, 1, "40 + 1n Gantrithor", v.P_LoopMain[playerID] + 1, 96);
                EUDEndIf()
                trg.Shape_NxNSquare(playerID, 1, "40 + 1n Gantrithor", v.P_LoopMain[playerID] + 1, 96)
                # (Line 23) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID);
                # (Line 24) trg.Main_Wait(0);
                DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID))
                trg.Main_Wait(0)
                # (Line 25) }
                # (Line 26) else if (v.P_LoopMain[playerID] == 6)
            if EUDElseIf()(v.P_LoopMain[playerID] == 6):
                # (Line 27) {
                # (Line 28) trg.Main_Wait(300);
                trg.Main_Wait(300)
                # (Line 29) }
                # (Line 30) else if (v.P_LoopMain[playerID] == 7)
            if EUDElseIf()(v.P_LoopMain[playerID] == 7):
                # (Line 31) {
                # (Line 32) trg.Shape_Edge(playerID, 1, "60 + 1n Siege", 45, 16, 288);
                trg.Shape_Edge(playerID, 1, "60 + 1n Siege", 45, 16, 288)
                # (Line 33) trg.Shape_Edge(playerID, 1, 128, 45, 20, 304);
                trg.Shape_Edge(playerID, 1, 128, 45, 20, 304)
                # (Line 34) GiveUnits(All, "60 + 1n Siege", playerID, "Anywhere", P12);
                # (Line 35) trg.Main_Wait(1200);
                DoActions(GiveUnits(All, "60 + 1n Siege", playerID, "Anywhere", P12))
                trg.Main_Wait(1200)
                # (Line 36) }
                # (Line 37) else if (v.P_LoopMain[playerID] == 8)
            if EUDElseIf()(v.P_LoopMain[playerID] == 8):
                # (Line 38) {
                # (Line 39) s.CharacterVoice(7);
                s.CharacterVoice(7)
                # (Line 40) }
                # (Line 42) v.P_LoopMain[playerID] += 1;
            EUDEndIf()
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 44) if (v.P_LoopMain[playerID] == 9)
            if EUDIf()(v.P_LoopMain[playerID] == 9):
                # (Line 45) {
                # (Line 46) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 47) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 48) }
                # (Line 49) }
            EUDEndIf()
            # (Line 50) else if(v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 51) {
            # (Line 52) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
            # (Line 53) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
            # (Line 54) KillUnitAt(All, "40 + 1n Ghost", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
            # (Line 57) var degree1 = (15 + 30 * v.P_LoopMain[playerID]) % 180;
            DoActions(KillUnitAt(All, "40 + 1n Ghost", "Anywhere", playerID))
            degree1 = EUDVariable()
            degree1 << ((15 + 30 * v.P_LoopMain[playerID]) % 180)
            # (Line 58) var degree2 = (15 + 30 * v.P_LoopMain[playerID]) % 180 + 180;
            degree2 = EUDVariable()
            degree2 << ((15 + 30 * v.P_LoopMain[playerID]) % 180 + 180)
            # (Line 59) var Unit1;
            Unit1 = EUDVariable()
            # (Line 60) var Unit2;
            Unit2 = EUDVariable()
            # (Line 62) if (v.P_LoopMain[playerID] < 36)
            if EUDIf()(v.P_LoopMain[playerID] >= 36, neg=True):
                # (Line 63) {
                # (Line 64) if	 	(v.P_LoopMain[playerID] % 3 == 0)  { Unit1 = 80;	Unit2 = 68;	}
                if EUDIf()(v.P_LoopMain[playerID] % 3 == 0):
                    Unit1 << (80)
                    Unit2 << (68)
                    # (Line 65) else if 	(v.P_LoopMain[playerID] % 3 == 1)  { Unit1 = 8; 	Unit2 = 63;	}
                if EUDElseIf()(v.P_LoopMain[playerID] % 3 == 1):
                    Unit1 << (8)
                    Unit2 << (63)
                    # (Line 66) else if 	(v.P_LoopMain[playerID] % 3 == 2)  { Unit1 = 1; 	Unit2 = 43;	}
                if EUDElseIf()(v.P_LoopMain[playerID] % 3 == 2):
                    Unit1 << (1)
                    Unit2 << (43)
                    # (Line 68) trg.Shape_Line(playerID, 1, Unit1, degree1, 8, 96, 96);
                EUDEndIf()
                trg.Shape_Line(playerID, 1, Unit1, degree1, 8, 96, 96)
                # (Line 69) trg.Shape_Line(playerID, 1, Unit1, degree2, 8, 96, 96);
                trg.Shape_Line(playerID, 1, Unit1, degree2, 8, 96, 96)
                # (Line 70) trg.Shape_Line(playerID, 1, Unit2, degree1, 6, 96, 96);
                trg.Shape_Line(playerID, 1, Unit2, degree1, 6, 96, 96)
                # (Line 71) trg.Shape_Line(playerID, 1, Unit2, degree2, 6, 96, 96);
                trg.Shape_Line(playerID, 1, Unit2, degree2, 6, 96, 96)
                # (Line 72) KillUnitAt(All, Unit2, "Anywhere", playerID);
                # (Line 74) trg.MoveLoc(v.P_UnitID[playerID], playerID, 0, 0);
                DoActions(KillUnitAt(All, Unit2, "Anywhere", playerID))
                trg.MoveLoc(v.P_UnitID[playerID], playerID, 0, 0)
                # (Line 75) Order(Unit1, playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                # (Line 76) trg.Main_Wait(90);
                DoActions(Order(Unit1, playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(90)
                # (Line 77) }
                # (Line 78) v.P_LoopMain[playerID] += 1;
            EUDEndIf()
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 80) if (v.P_LoopMain[playerID] == 36)
            if EUDIf()(v.P_LoopMain[playerID] == 36):
                # (Line 81) {
                # (Line 82) KillUnitAt(All, "40 + 1n Ghost", "Anywhere", playerID);
                # (Line 83) v.P_LoopMain[playerID] = 0;
                DoActions(KillUnitAt(All, "40 + 1n Ghost", "Anywhere", playerID))
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 84) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 85) }
                # (Line 86) }
            EUDEndIf()
            # (Line 87) else if(v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 88) {
            # (Line 89) if (v.P_LoopMain[playerID] <= 5)
            if EUDIf()(v.P_LoopMain[playerID] <= 5):
                # (Line 90) {
                # (Line 91) if (v.P_LoopMain[playerID] % 2 == 0)
                if EUDIf()(v.P_LoopMain[playerID] % 2 == 0):
                    # (Line 92) {
                    # (Line 93) trg.Shape_NxNSquare(playerID, 1, "40 + 1n Gantrithor",7, 96);
                    trg.Shape_NxNSquare(playerID, 1, "40 + 1n Gantrithor", 7, 96)
                    # (Line 94) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID);
                    # (Line 95) }
                    DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID))
                    # (Line 96) else if (v.P_LoopMain[playerID] % 2 == 1)
                if EUDElseIf()(v.P_LoopMain[playerID] % 2 == 1):
                    # (Line 97) {
                    # (Line 98) trg.Shape_NxNSquare(playerID, 1, "50 + 1n Battlecruiser",7, 96);
                    trg.Shape_NxNSquare(playerID, 1, "50 + 1n Battlecruiser", 7, 96)
                    # (Line 99) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                    # (Line 100) }
                    DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                    # (Line 101) trg.Main_Wait(100);
                EUDEndIf()
                trg.Main_Wait(100)
                # (Line 102) }
                # (Line 103) else if (v.P_LoopMain[playerID] == 6)
            if EUDElseIf()(v.P_LoopMain[playerID] == 6):
                # (Line 104) {
                # (Line 105) GiveUnits(All, "60 + 1n Siege", P12, "Anywhere", playerID);
                # (Line 106) trg.Shape_NxNSquare(playerID, 1, "50 + 1n Battlecruiser",5, 96);
                DoActions(GiveUnits(All, "60 + 1n Siege", P12, "Anywhere", playerID))
                trg.Shape_NxNSquare(playerID, 1, "50 + 1n Battlecruiser", 5, 96)
                # (Line 107) trg.MoveLoc(v.P_UnitID[playerID], playerID, 0, 0);
                trg.MoveLoc(v.P_UnitID[playerID], playerID, 0, 0)
                # (Line 108) Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                # (Line 109) trg.Main_Wait(300);
                DoActions(Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(300)
                # (Line 110) }
                # (Line 111) else if (v.P_LoopMain[playerID] == 7)
            if EUDElseIf()(v.P_LoopMain[playerID] == 7):
                # (Line 112) {
                # (Line 113) if (playerID < 3)
                if EUDIf()(playerID >= 3, neg=True):
                    # (Line 114) { SetAllianceStatus(P8, Enemy); }
                    DoActions(SetAllianceStatus(P8, Enemy))
                    # (Line 115) else
                    # (Line 116) { SetAllianceStatus(P7, Enemy); }
                if EUDElse()():
                    DoActions(SetAllianceStatus(P7, Enemy))
                    # (Line 118) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                EUDEndIf()
                # (Line 119) KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                # (Line 120) KillUnitAt(All, 128, "Anywhere", playerID);
                DoActions(KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID))
                # (Line 121) trg.SkillEnd();
                DoActions(KillUnitAt(All, 128, "Anywhere", playerID))
                trg.SkillEnd()
                # (Line 122) }
                # (Line 124) v.P_LoopMain[playerID] += 1;
            EUDEndIf()
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 125) }
            # (Line 126) }
        EUDEndIf()
        # (Line 127) }
    EUDEndIf()
