## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import variable as v;
import variable as v
# (Line 2) import func.sound as s;
from func import sound as s
# (Line 4) function main(playerID)
# (Line 5) {
@EUDFunc
def f_main(playerID):
    # (Line 6) if (v.P_WaitMain[playerID] == 0 && v.P_Step[playerID] == 0)
    if EUDIf()(EUDSCAnd()(v.P_WaitMain[playerID] == 0)(v.P_Step[playerID] == 0)()):
        # (Line 7) {
        # (Line 8) if (Bring(playerID, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill"))
        if EUDIf()(Bring(playerID, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill")):
            # (Line 9) {
            # (Line 10) KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", playerID);
            # (Line 12) if (v.P_UniqueCondition[playerID] == 0)
            DoActions(KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", playerID))
            if EUDIf()(v.P_UniqueCondition[playerID] == 0):
                # (Line 13) {
                # (Line 14) SetResources(playerID, Add, 60, Gas);
                # (Line 15) }
                DoActions(SetResources(playerID, Add, 60, Gas))
                # (Line 16) else
                # (Line 17) {
            if EUDElse()():
                # (Line 18) if (Switch("Unique - Chtholly", Cleared))
                if EUDIf()(Switch("Unique - Chtholly", Cleared)):
                    # (Line 19) {
                    # (Line 20) SetSwitch("Unique - Chtholly", Set);
                    # (Line 21) v.stb.printAt(8, "\x13\x04전투속행 패시브를 \x1CON \x04시킵니다.");
                    DoActions(SetSwitch("Unique - Chtholly", Set))
                    v.stb.printAt(8, "\x13\x04전투속행 패시브를 \x1CON \x04시킵니다.")
                    # (Line 22) }
                    # (Line 23) else
                    # (Line 24) {
                if EUDElse()():
                    # (Line 25) SetSwitch("Unique - Chtholly", Clear);
                    # (Line 26) v.stb.printAt(8, "\x13\x04전투속행 패시브를 \x08OFF \x04시킵니다.");
                    DoActions(SetSwitch("Unique - Chtholly", Clear))
                    v.stb.printAt(8, "\x13\x04전투속행 패시브를 \x08OFF \x04시킵니다.")
                    # (Line 27) }
                    # (Line 28) }
                EUDEndIf()
                # (Line 29) }
            EUDEndIf()
            # (Line 30) if (Bring(playerID, AtLeast, 1, "Protoss Scout", "[Skill]UseSkill"))
        EUDEndIf()
        if EUDIf()(Bring(playerID, AtLeast, 1, "Protoss Scout", "[Skill]UseSkill")):
            # (Line 31) {
            # (Line 32) v.P_Step[playerID] = 100;
            _ARRW(v.P_Step, playerID) << (100)
            # (Line 33) KillUnitAt(1, "Protoss Scout", "[Skill]UseSkill", playerID);
            # (Line 34) }
            DoActions(KillUnitAt(1, "Protoss Scout", "[Skill]UseSkill", playerID))
            # (Line 35) else if (Bring(playerID, AtLeast, 1, "Protoss Carrier", "[Skill]UseSkill"))
        if EUDElseIf()(Bring(playerID, AtLeast, 1, "Protoss Carrier", "[Skill]UseSkill")):
            # (Line 36) {
            # (Line 37) v.P_Step[playerID] = 200;
            _ARRW(v.P_Step, playerID) << (200)
            # (Line 38) KillUnitAt(1, "Protoss Carrier", "[Skill]UseSkill", playerID);
            # (Line 39) }
            DoActions(KillUnitAt(1, "Protoss Carrier", "[Skill]UseSkill", playerID))
            # (Line 40) else if (Bring(playerID, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill"))
        if EUDElseIf()(Bring(playerID, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill")):
            # (Line 41) {
            # (Line 42) v.P_Step[playerID] = 300;
            _ARRW(v.P_Step, playerID) << (300)
            # (Line 43) KillUnitAt(1, "Protoss Arbiter", "[Skill]UseSkill", playerID);
            # (Line 44) }
            DoActions(KillUnitAt(1, "Protoss Arbiter", "[Skill]UseSkill", playerID))
            # (Line 45) }
        EUDEndIf()
        # (Line 48) if (v.P_SkillDelay[playerID] >= 2 && v.P_CountMain[playerID] == 0)
    EUDEndIf()
    if EUDIf()(EUDSCAnd()(v.P_SkillDelay[playerID] >= 2)(v.P_CountMain[playerID] == 0)()):
        # (Line 49) {
        # (Line 50) if (Bring(playerID, AtLeast, 2, "Protoss Scout", "[Skill]UseSkill") &&  v.P_Step[playerID] == 100)
        if EUDIf()(EUDSCAnd()(Bring(playerID, AtLeast, 2, "Protoss Scout", "[Skill]UseSkill"))(v.P_Step[playerID] == 100)()):
            # (Line 51) {
            # (Line 52) s.CharacterVoice(9);
            s.CharacterVoice(9)
            # (Line 53) v.P_SkillDelay[playerID] = 0;
            _ARRW(v.P_SkillDelay, playerID) << (0)
            # (Line 54) v.P_Step[playerID] = 110;
            _ARRW(v.P_Step, playerID) << (110)
            # (Line 55) KillUnitAt(2, "Protoss Scout", "[Skill]UseSkill", playerID);
            # (Line 56) }
            DoActions(KillUnitAt(2, "Protoss Scout", "[Skill]UseSkill", playerID))
            # (Line 58) else if (Bring(playerID, AtLeast, 2, "Protoss Arbiter", "[Skill]UseSkill") &&  v.P_Step[playerID] == 200)
        if EUDElseIf()(EUDSCAnd()(Bring(playerID, AtLeast, 2, "Protoss Arbiter", "[Skill]UseSkill"))(v.P_Step[playerID] == 200)()):
            # (Line 59) {
            # (Line 60) s.CharacterVoice(1);
            s.CharacterVoice(1)
            # (Line 61) v.P_SkillDelay[playerID] = 0;
            _ARRW(v.P_SkillDelay, playerID) << (0)
            # (Line 62) v.P_Step[playerID] = 210;
            _ARRW(v.P_Step, playerID) << (210)
            # (Line 63) KillUnitAt(2, "Protoss Arbiter", "[Skill]UseSkill", playerID);
            # (Line 64) }
            DoActions(KillUnitAt(2, "Protoss Arbiter", "[Skill]UseSkill", playerID))
            # (Line 67) else if (Bring(playerID, AtLeast, 3, "Protoss Arbiter", "[Skill]UseSkill")
        _t11 = EUDElseIf()
        # (Line 68) && v.P_Step[playerID] == 300
        # (Line 69) && v.P_UltimateGauge[playerID] >= v.P_Ultimate2[playerID])
        if _t11(EUDSCAnd()(Bring(playerID, AtLeast, 3, "Protoss Arbiter", "[Skill]UseSkill"))(v.P_Step[playerID] == 300)(v.P_UltimateGauge[playerID] >= v.P_Ultimate2[playerID])()):
            # (Line 70) {
            # (Line 71) if (Switch("UiltimateSwitch", Cleared))
            if EUDIf()(Switch("UiltimateSwitch", Cleared)):
                # (Line 72) {
                # (Line 73) s.CharacterVoice(11);
                s.CharacterVoice(11)
                # (Line 74) SetSwitch("UiltimateSwitch", Set);
                # (Line 75) v.P_SkillDelay[playerID] = 0;
                DoActions(SetSwitch("UiltimateSwitch", Set))
                _ARRW(v.P_SkillDelay, playerID) << (0)
                # (Line 76) v.P_Step[playerID] = 240;
                _ARRW(v.P_Step, playerID) << (240)
                # (Line 77) v.P_LoopSub1[playerID] = 1;
                _ARRW(v.P_LoopSub1, playerID) << (1)
                # (Line 78) SetDeaths(playerID, Subtract, v.P_Ultimate2[playerID], 205);
                # (Line 79) KillUnitAt(3, "Protoss Arbiter", "[Skill]UseSkill", playerID);
                DoActions(SetDeaths(playerID, Subtract, v.P_Ultimate2[playerID], 205))
                # (Line 80) SetSwitch("Recall - Chtholly", Set);
                DoActions(KillUnitAt(3, "Protoss Arbiter", "[Skill]UseSkill", playerID))
                # (Line 81) }
                DoActions(SetSwitch("Recall - Chtholly", Set))
                # (Line 82) else
                # (Line 83) {
            if EUDElse()():
                # (Line 84) SetResources(CurrentPlayer, Add, 900, Gas);
                # (Line 85) KillUnitAt(3, "Protoss Arbiter", "[Skill]UseSkill", playerID);
                DoActions(SetResources(CurrentPlayer, Add, 900, Gas))
                # (Line 86) SetDeaths(CurrentPlayer, SetTo, 999, " `SYSTEMTEXT");
                DoActions(KillUnitAt(3, "Protoss Arbiter", "[Skill]UseSkill", playerID))
                # (Line 87) }
                DoActions(SetDeaths(CurrentPlayer, SetTo, 999, " `SYSTEMTEXT"))
                # (Line 88) }
            EUDEndIf()
            # (Line 89) }
        EUDEndIf()
        # (Line 90) }
    EUDEndIf()
