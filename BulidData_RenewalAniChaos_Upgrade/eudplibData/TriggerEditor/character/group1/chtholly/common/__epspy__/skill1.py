## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 5) function Shape(playerID, UnitA : TrgUnit, UnitB : TrgUnit, x, y);
# (Line 7) function main(playerID)
# (Line 8) {
@EUDFunc
def f_main(playerID):
    # (Line 9) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 10) {
        # (Line 11) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 12) {
            # (Line 13) Shape(playerID, "40 + 1n Mojo", "Scantid", 32, 32);
            Shape(playerID, "40 + 1n Mojo", "Scantid", 32, 32)
            # (Line 14) trg.Main_Wait(50);
            trg.Main_Wait(50)
            # (Line 15) v.P_CountMain[playerID] += 1;
            _ARRW(v.P_CountMain, playerID).__iadd__(1)
            # (Line 16) }
            # (Line 17) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 18) {
            # (Line 19) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
            # (Line 20) Shape(playerID, "40 + 1n Marine", "40 + 1n Mojo", 32, -32);
            DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
            Shape(playerID, "40 + 1n Marine", "40 + 1n Mojo", 32, -32)
            # (Line 21) trg.Main_Wait(50);
            trg.Main_Wait(50)
            # (Line 22) v.P_CountMain[playerID] += 1;
            _ARRW(v.P_CountMain, playerID).__iadd__(1)
            # (Line 23) }
            # (Line 24) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 25) {
            # (Line 26) KillUnitAt(All, "40 + 1n Marine", "Anywhere", playerID);
            # (Line 28) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 32, 32);
            DoActions(KillUnitAt(All, "40 + 1n Marine", "Anywhere", playerID))
            trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 32, 32)
            # (Line 29) trg.Shape_Square(playerID, 1, "Scantid", 32, 32);
            trg.Shape_Square(playerID, 1, "Scantid", 32, 32)
            # (Line 30) KillUnitAt(All, "Scantid", "Anywhere", playerID);
            # (Line 31) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
            DoActions(KillUnitAt(All, "Scantid", "Anywhere", playerID))
            # (Line 32) Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
            # (Line 33) trg.Main_Wait(50);
            DoActions(Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
            trg.Main_Wait(50)
            # (Line 34) v.P_CountMain[playerID] += 1;
            _ARRW(v.P_CountMain, playerID).__iadd__(1)
            # (Line 35) }
            # (Line 36) else if (v.P_CountMain[playerID] == 3)
        if EUDElseIf()(v.P_CountMain[playerID] == 3):
            # (Line 37) {
            # (Line 38) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
            # (Line 40) trg.Shape_Square(playerID, 1, "40 + 1n Marine", 32, 32);
            DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
            trg.Shape_Square(playerID, 1, "40 + 1n Marine", 32, 32)
            # (Line 41) trg.Shape_Square(playerID, 1, "Scantid", 32, 32);
            trg.Shape_Square(playerID, 1, "Scantid", 32, 32)
            # (Line 42) KillUnitAt(All, "Scantid", "Anywhere", playerID);
            # (Line 43) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
            DoActions(KillUnitAt(All, "Scantid", "Anywhere", playerID))
            # (Line 44) Order("40 + 1n Marine", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
            # (Line 45) trg.Main_Wait(220);
            DoActions(Order("40 + 1n Marine", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
            trg.Main_Wait(220)
            # (Line 46) v.P_CountMain[playerID] += 1;
            _ARRW(v.P_CountMain, playerID).__iadd__(1)
            # (Line 47) }
            # (Line 48) else if (v.P_CountMain[playerID] == 4)
        if EUDElseIf()(v.P_CountMain[playerID] == 4):
            # (Line 49) {
            # (Line 50) KillUnitAt(All, "40 + 1n Marine", "Anywhere", playerID);
            # (Line 52) trg.Shape_Square(playerID, 1, "40 + 1n Goliath", 32, 32);
            DoActions(KillUnitAt(All, "40 + 1n Marine", "Anywhere", playerID))
            trg.Shape_Square(playerID, 1, "40 + 1n Goliath", 32, 32)
            # (Line 53) trg.Shape_Square(playerID, 1, "Kakaru", 32, 32);
            trg.Shape_Square(playerID, 1, "Kakaru", 32, 32)
            # (Line 54) KillUnitAt(All, "Kakaru", "Anywhere", playerID);
            # (Line 55) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
            DoActions(KillUnitAt(All, "Kakaru", "Anywhere", playerID))
            # (Line 56) Order("40 + 1n Goliath", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
            # (Line 57) trg.Main_Wait(100);
            DoActions(Order("40 + 1n Goliath", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
            trg.Main_Wait(100)
            # (Line 58) v.P_CountMain[playerID] += 1;
            _ARRW(v.P_CountMain, playerID).__iadd__(1)
            # (Line 59) }
            # (Line 60) else if (v.P_CountMain[playerID] == 5)
        if EUDElseIf()(v.P_CountMain[playerID] == 5):
            # (Line 61) {
            # (Line 62) KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID);
            # (Line 63) Shape(playerID, "40 + 1n Goliath", "Kakaru", 32, -32);
            DoActions(KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID))
            Shape(playerID, "40 + 1n Goliath", "Kakaru", 32, -32)
            # (Line 65) trg.Main_Wait(100);
            trg.Main_Wait(100)
            # (Line 66) v.P_CountMain[playerID] += 1;
            _ARRW(v.P_CountMain, playerID).__iadd__(1)
            # (Line 67) }
            # (Line 68) else if (v.P_CountMain[playerID] == 6)
        if EUDElseIf()(v.P_CountMain[playerID] == 6):
            # (Line 69) {
            # (Line 70) KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID);
            # (Line 71) trg.SkillEnd();
            DoActions(KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID))
            trg.SkillEnd()
            # (Line 72) }
            # (Line 73) }
        EUDEndIf()
        # (Line 74) }
    EUDEndIf()
    # (Line 76) function Shape(playerID, UnitA : TrgUnit, UnitB : TrgUnit, x, y)

# (Line 77) {
@EUDTypedFunc([None, TrgUnit, TrgUnit, None, None])
def Shape(playerID, UnitA, UnitB, x, y):
    # (Line 78) trg.MoveLoc(v.P_UnitID[playerID], playerID, x, y);
    trg.MoveLoc(v.P_UnitID[playerID], playerID, x, y)
    # (Line 79) trg.SkillUnit(playerID, 1, UnitA);
    trg.SkillUnit(playerID, 1, UnitA)
    # (Line 80) trg.SkillUnit(playerID, 1, UnitB);
    trg.SkillUnit(playerID, 1, UnitB)
    # (Line 81) trg.MoveLoc(v.P_UnitID[playerID], playerID, -y, x);
    trg.MoveLoc(v.P_UnitID[playerID], playerID, -y, x)
    # (Line 82) trg.SkillUnit(playerID, 1, UnitB);
    trg.SkillUnit(playerID, 1, UnitB)
    # (Line 83) trg.MoveLoc(v.P_UnitID[playerID], playerID, -x, -y);
    trg.MoveLoc(v.P_UnitID[playerID], playerID, -x, -y)
    # (Line 84) trg.SkillUnit(playerID, 1, UnitA);
    trg.SkillUnit(playerID, 1, UnitA)
    # (Line 85) trg.SkillUnit(playerID, 1, UnitB);
    trg.SkillUnit(playerID, 1, UnitB)
    # (Line 86) trg.MoveLoc(v.P_UnitID[playerID], playerID, y, -x);
    trg.MoveLoc(v.P_UnitID[playerID], playerID, y, -x)
    # (Line 87) trg.SkillUnit(playerID, 1, UnitB);
    trg.SkillUnit(playerID, 1, UnitB)
    # (Line 88) KillUnitAt(All, UnitB, "Anywhere", playerID);
    # (Line 89) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
    DoActions(KillUnitAt(All, UnitB, "Anywhere", playerID))
    # (Line 90) Order(UnitA, playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
    # (Line 91) }
    DoActions(Order(UnitA, playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
