## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 4) import func.sound as s;
from func import sound as s
# (Line 6) function main(playerID)
# (Line 7) {
@EUDFunc
def f_main(playerID):
    # (Line 8) trg.Debuff_BanReturn();
    trg.Debuff_BanReturn()
    # (Line 9) if (v.P_CountMain[playerID] < 7)
    if EUDIf()(v.P_CountMain[playerID] >= 7, neg=True):
        # (Line 10) {
        # (Line 11) trg.Debuff_Stop();
        trg.Debuff_Stop()
        # (Line 12) }
        # (Line 14) if (v.P_CountMain[playerID] >= 6 &&v.P_CountMain[playerID] <= 7)
    EUDEndIf()
    if EUDIf()(EUDSCAnd()(v.P_CountMain[playerID] >= 6)(v.P_CountMain[playerID] <= 7)()):
        # (Line 15) {
        # (Line 16) trg.Buff_ShieldFix(1);
        trg.Buff_ShieldFix(1)
        # (Line 17) }
        # (Line 19) if (v.P_WaitMain[playerID] == 0)
    EUDEndIf()
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 20) {
        # (Line 21) if (v.P_CountMain[playerID] == 0 && v.P_LoopMain[playerID] <= 23)
        if EUDIf()(EUDSCAnd()(v.P_CountMain[playerID] == 0)(v.P_LoopMain[playerID] <= 23)()):
            # (Line 22) {
            # (Line 23) trg.Table_Cos(playerID, 15 * v.P_LoopMain[playerID], 160);
            trg.Table_Cos(playerID, 15 * v.P_LoopMain[playerID], 160)
            # (Line 24) trg.Table_Sin(playerID, 15 * v.P_LoopMain[playerID], 160);
            trg.Table_Sin(playerID, 15 * v.P_LoopMain[playerID], 160)
            # (Line 25) trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
            # (Line 26) trg.Shape_Square(playerID, 8, "Protoss Dark Templar", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID, 8, "Protoss Dark Templar", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
            # (Line 27) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID);
            # (Line 28) KillUnitAt(All, "Protoss Dark Templar", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID))
            # (Line 29) trg.Main_Wait(0);
            DoActions(KillUnitAt(All, "Protoss Dark Templar", "Anywhere", playerID))
            trg.Main_Wait(0)
            # (Line 30) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 31) }
            # (Line 32) else if (v.P_CountMain[playerID] == 0 && v.P_LoopMain[playerID] == 24)
        if EUDElseIf()(EUDSCAnd()(v.P_CountMain[playerID] == 0)(v.P_LoopMain[playerID] == 24)()):
            # (Line 33) {
            # (Line 34) trg.Main_Wait(0);
            trg.Main_Wait(0)
            # (Line 35) v.P_CountMain[playerID] += 1;
            _ARRW(v.P_CountMain, playerID).__iadd__(1)
            # (Line 36) v.P_LoopMain[playerID] = 0;
            _ARRW(v.P_LoopMain, playerID) << (0)
            # (Line 37) }
            # (Line 38) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 39) {
            # (Line 40) trg.Shape_Square(playerID, 1, "60 + 1n Siege", 192, 192);
            trg.Shape_Square(playerID, 1, "60 + 1n Siege", 192, 192)
            # (Line 41) trg.Shape_Square(playerID, 1, "60 + 1n Siege", 128, 192);
            trg.Shape_Square(playerID, 1, "60 + 1n Siege", 128, 192)
            # (Line 42) trg.Shape_Square(playerID, 1, "60 + 1n Siege", 192, 128);
            trg.Shape_Square(playerID, 1, "60 + 1n Siege", 192, 128)
            # (Line 43) trg.Shape_Square(playerID, 1, "60 + 1n Siege", 128, 128);
            trg.Shape_Square(playerID, 1, "60 + 1n Siege", 128, 128)
            # (Line 44) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 192, 192);
            trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 192, 192)
            # (Line 45) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 128, 192);
            trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 128, 192)
            # (Line 46) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 192, 128);
            trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 192, 128)
            # (Line 47) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 128, 128);
            trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 128, 128)
            # (Line 48) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 192, 64);
            trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 192, 64)
            # (Line 49) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 64, 192);
            trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 64, 192)
            # (Line 50) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 128, 64);
            trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 128, 64)
            # (Line 51) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 64, 128);
            trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 64, 128)
            # (Line 52) v.P_CountMain[playerID] += 1;
            _ARRW(v.P_CountMain, playerID).__iadd__(1)
            # (Line 53) }
            # (Line 54) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 55) {
            # (Line 56) trg.Shape_Square(playerID, 1, "40 + 1n Marine", 128, 32);
            trg.Shape_Square(playerID, 1, "40 + 1n Marine", 128, 32)
            # (Line 57) trg.Shape_Square(playerID, 1, "40 + 1n Marine", 32, 128);
            trg.Shape_Square(playerID, 1, "40 + 1n Marine", 32, 128)
            # (Line 58) trg.Shape_Square(playerID, 1, "40 + 1n Marine", 128, 64);
            trg.Shape_Square(playerID, 1, "40 + 1n Marine", 128, 64)
            # (Line 59) trg.Shape_Square(playerID, 1, "40 + 1n Marine", 64, 128);
            trg.Shape_Square(playerID, 1, "40 + 1n Marine", 64, 128)
            # (Line 60) trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", 96, 96);
            trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", 96, 96)
            # (Line 61) trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", 160, 96);
            trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", 160, 96)
            # (Line 62) trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", 96, 160);
            trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", 96, 160)
            # (Line 63) trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", 160, 160);
            trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", 160, 160)
            # (Line 64) trg.Shape_Square(playerID, 1, "40 + 1n Firebat", 64, 64);
            trg.Shape_Square(playerID, 1, "40 + 1n Firebat", 64, 64)
            # (Line 65) trg.Shape_Square(playerID, 1, "40 + 1n Firebat", 64, 0);
            trg.Shape_Square(playerID, 1, "40 + 1n Firebat", 64, 0)
            # (Line 66) trg.MoveLoc(v.P_UnitID[playerID], playerID, 0, 0);
            trg.MoveLoc(v.P_UnitID[playerID], playerID, 0, 0)
            # (Line 67) Order("40 + 1n Marine", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            # (Line 68) Order("40 + 1n Firebat", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            DoActions(Order("40 + 1n Marine", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
            # (Line 69) Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            DoActions(Order("40 + 1n Firebat", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
            # (Line 70) Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            DoActions(Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
            # (Line 71) trg.Main_Wait(0);
            DoActions(Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
            trg.Main_Wait(0)
            # (Line 72) s.CharacterVoice(6);
            s.CharacterVoice(6)
            # (Line 73) v.P_CountMain[playerID] += 1;
            _ARRW(v.P_CountMain, playerID).__iadd__(1)
            # (Line 74) }
            # (Line 75) else if (v.P_CountMain[playerID] == 3 && v.P_LoopMain[playerID] <= 24)
        if EUDElseIf()(EUDSCAnd()(v.P_CountMain[playerID] == 3)(v.P_LoopMain[playerID] <= 24)()):
            # (Line 76) {
            # (Line 77) trg.Table_Cos(playerID, 15 * v.P_LoopMain[playerID], 224);
            trg.Table_Cos(playerID, 15 * v.P_LoopMain[playerID], 224)
            # (Line 78) trg.Table_Sin(playerID, 15 * v.P_LoopMain[playerID], 224);
            trg.Table_Sin(playerID, 15 * v.P_LoopMain[playerID], 224)
            # (Line 79) trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
            # (Line 80) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
            # (Line 81) trg.Main_Wait(0);
            DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
            trg.Main_Wait(0)
            # (Line 82) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 83) }
            # (Line 84) else if (v.P_CountMain[playerID] == 3 && v.P_LoopMain[playerID] == 25)
        if EUDElseIf()(EUDSCAnd()(v.P_CountMain[playerID] == 3)(v.P_LoopMain[playerID] == 25)()):
            # (Line 85) {
            # (Line 86) trg.Main_Wait(500);
            trg.Main_Wait(500)
            # (Line 87) v.P_CountMain[playerID] += 1;
            _ARRW(v.P_CountMain, playerID).__iadd__(1)
            # (Line 88) v.P_LoopMain[playerID] = 0;
            _ARRW(v.P_LoopMain, playerID) << (0)
            # (Line 89) }
            # (Line 90) else if (v.P_CountMain[playerID] == 4)
        if EUDElseIf()(v.P_CountMain[playerID] == 4):
            # (Line 91) {
            # (Line 92) KillUnitAt(All, "40 + 1n Marine", "Anywhere", playerID);
            # (Line 93) KillUnitAt(All, "40 + 1n Firebat", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Marine", "Anywhere", playerID))
            # (Line 94) trg.Main_Wait(2000);
            DoActions(KillUnitAt(All, "40 + 1n Firebat", "Anywhere", playerID))
            trg.Main_Wait(2000)
            # (Line 95) v.P_CountMain[playerID] += 1;
            _ARRW(v.P_CountMain, playerID).__iadd__(1)
            # (Line 96) }
            # (Line 97) else if (v.P_CountMain[playerID] == 5)
        if EUDElseIf()(v.P_CountMain[playerID] == 5):
            # (Line 98) {
            # (Line 99) s.CharacterVoice(7);
            s.CharacterVoice(7)
            # (Line 100) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
            # (Line 101) trg.Main_Wait(5000);
            DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
            trg.Main_Wait(5000)
            # (Line 102) v.P_CountMain[playerID] += 1;
            _ARRW(v.P_CountMain, playerID).__iadd__(1)
            # (Line 103) }
            # (Line 104) else if (v.P_CountMain[playerID] == 6)
        if EUDElseIf()(v.P_CountMain[playerID] == 6):
            # (Line 105) {
            # (Line 106) s.CharacterVoice(8);
            s.CharacterVoice(8)
            # (Line 107) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
            # (Line 108) trg.Main_Wait(2500);
            DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
            trg.Main_Wait(2500)
            # (Line 109) v.P_CountMain[playerID] += 1;
            _ARRW(v.P_CountMain, playerID).__iadd__(1)
            # (Line 110) }
            # (Line 111) else if (v.P_CountMain[playerID] == 7)
        if EUDElseIf()(v.P_CountMain[playerID] == 7):
            # (Line 112) {
            # (Line 113) s.CharacterVoice(8);
            s.CharacterVoice(8)
            # (Line 114) KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID);
            # (Line 115) trg.Main_Wait(0);
            DoActions(KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID))
            trg.Main_Wait(0)
            # (Line 116) v.P_CountMain[playerID] += 1;
            _ARRW(v.P_CountMain, playerID).__iadd__(1)
            # (Line 117) }
            # (Line 118) else if (v.P_CountMain[playerID] == 8
        _t14 = EUDElseIf()
        # (Line 119) && Bring(playerID, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill")
        # (Line 120) && v.P_UltimateGauge[playerID] >= v.P_Ultimate1[playerID])
        if _t14(EUDSCAnd()(v.P_CountMain[playerID] == 8)(Bring(playerID, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill"))(v.P_UltimateGauge[playerID] >= v.P_Ultimate1[playerID])()):
            # (Line 121) {
            # (Line 122) if (Switch("UiltimateSwitch", Cleared))
            if EUDIf()(Switch("UiltimateSwitch", Cleared)):
                # (Line 123) {
                # (Line 124) s.CharacterVoice(11);
                s.CharacterVoice(11)
                # (Line 125) SetSwitch("UiltimateSwitch", Set);
                # (Line 126) v.P_Step[playerID] = 240;
                DoActions(SetSwitch("UiltimateSwitch", Set))
                _ARRW(v.P_Step, playerID) << (240)
                # (Line 127) v.P_CountMain[playerID] = 0;
                _ARRW(v.P_CountMain, playerID) << (0)
                # (Line 128) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 129) SetDeaths(playerID, Subtract, v.P_Ultimate1[playerID], 205);
                # (Line 130) KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", playerID);
                DoActions(SetDeaths(playerID, Subtract, v.P_Ultimate1[playerID], 205))
                # (Line 131) SetSwitch("Recall - Chtholly", Set);
                DoActions(KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", playerID))
                # (Line 132) }
                DoActions(SetSwitch("Recall - Chtholly", Set))
                # (Line 133) else
                # (Line 134) {
            if EUDElse()():
                # (Line 135) SetResources(CurrentPlayer, Add, 60, Gas);
                # (Line 136) KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", playerID);
                DoActions(SetResources(CurrentPlayer, Add, 60, Gas))
                # (Line 137) SetDeaths(CurrentPlayer, SetTo, 999, " `SYSTEMTEXT");
                DoActions(KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", playerID))
                # (Line 138) trg.SkillEnd();
                DoActions(SetDeaths(CurrentPlayer, SetTo, 999, " `SYSTEMTEXT"))
                trg.SkillEnd()
                # (Line 139) }
                # (Line 140) }
            EUDEndIf()
            # (Line 141) else if (v.P_CountMain[playerID] == 8)
        if EUDElseIf()(v.P_CountMain[playerID] == 8):
            # (Line 142) {
            # (Line 143) trg.SkillEnd();
            trg.SkillEnd()
            # (Line 144) }
            # (Line 145) }
        EUDEndIf()
        # (Line 146) }
    EUDEndIf()
