## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import variable as v;
import variable as v
# (Line 2) import func.trig as trg;
from func import trig as trg
# (Line 4) import func.sound as s;
from func import sound as s
# (Line 6) function main(playerID)
# (Line 7) {
@EUDFunc
def f_main(playerID):
    # (Line 8) if (Switch("Unique - Milim", Cleared))
    if EUDIf()(Switch("Unique - Milim", Cleared)):
        # (Line 9) {
        # (Line 10) trg.Debuff_Stop();
        trg.Debuff_Stop()
        # (Line 11) }
        # (Line 12) trg.Debuff_BanReturn();
    EUDEndIf()
    trg.Debuff_BanReturn()
    # (Line 14) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 15) {
        # (Line 16) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 17) {
            # (Line 18) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 19) {
                # (Line 20) var x = 32;
                x = EUDVariable()
                x << (32)
                # (Line 21) var y = 32;
                y = EUDVariable()
                y << (32)
                # (Line 22) var x2 = 32;
                x2 = EUDVariable()
                x2 << (32)
                # (Line 23) var y2 = 0;
                y2 = EUDVariable()
                y2 << (0)
                # (Line 25) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", x, y);
                trg.Shape_Square(playerID, 1, "40 + 1n Mojo", x, y)
                # (Line 26) trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y);
                trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y)
                # (Line 27) trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", x2, y2);
                trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", x2, y2)
                # (Line 29) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                # (Line 30) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 32) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                # (Line 33) Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 35) trg.Main_Wait(160);
                DoActions(Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(160)
                # (Line 37) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 38) }
                # (Line 39) else if (v.P_LoopMain[playerID] == 1)
            if EUDElseIf()(v.P_LoopMain[playerID] == 1):
                # (Line 40) {
                # (Line 41) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
                # (Line 43) var x = 64;
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
                x = EUDVariable()
                x << (64)
                # (Line 44) var y = 0;
                y = EUDVariable()
                y << (0)
                # (Line 45) var x2 = 64;
                x2 = EUDVariable()
                x2 << (64)
                # (Line 46) var y2 = 64;
                y2 = EUDVariable()
                y2 << (64)
                # (Line 48) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", x, y);
                trg.Shape_Square(playerID, 1, "40 + 1n Mojo", x, y)
                # (Line 49) trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y);
                trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y)
                # (Line 50) trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", x2, y2);
                trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", x2, y2)
                # (Line 52) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                # (Line 53) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 55) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                # (Line 56) Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 58) trg.Main_Wait(160);
                DoActions(Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(160)
                # (Line 59) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 60) }
                # (Line 61) else if (v.P_LoopMain[playerID] == 2)
            if EUDElseIf()(v.P_LoopMain[playerID] == 2):
                # (Line 62) {
                # (Line 63) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
                # (Line 65) var x = 32;
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
                x = EUDVariable()
                x << (32)
                # (Line 66) var y = 0;
                y = EUDVariable()
                y << (0)
                # (Line 67) var x2 = 32;
                x2 = EUDVariable()
                x2 << (32)
                # (Line 68) var y2 = 32;
                y2 = EUDVariable()
                y2 << (32)
                # (Line 70) trg.Shape_Square(playerID, 1, "Target", x, y);
                trg.Shape_Square(playerID, 1, "Target", x, y)
                # (Line 71) trg.Shape_Square(playerID, 1, "40 + 1n Goliath", x, y);
                trg.Shape_Square(playerID, 1, "40 + 1n Goliath", x, y)
                # (Line 72) trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", x2, y2);
                trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", x2, y2)
                # (Line 74) KillUnitAt(All, "Target", "Anywhere", playerID);
                # (Line 75) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "Target", "Anywhere", playerID))
                # (Line 77) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                # (Line 78) MoveUnit(All, "40 + 1n Goliath", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 79) Order("40 + 1n Goliath", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "40 + 1n Goliath", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 81) trg.Main_Wait(160);
                DoActions(Order("40 + 1n Goliath", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(160)
                # (Line 83) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 84) }
                # (Line 85) else if (v.P_LoopMain[playerID] == 3)
            if EUDElseIf()(v.P_LoopMain[playerID] == 3):
                # (Line 86) {
                # (Line 87) KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID);
                # (Line 89) trg.Shape_Square(playerID, 1, "Target", 96, 0);
                DoActions(KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID))
                trg.Shape_Square(playerID, 1, "Target", 96, 0)
                # (Line 90) trg.Shape_Square(playerID, 1, "Target", 64, 32);
                trg.Shape_Square(playerID, 1, "Target", 64, 32)
                # (Line 91) trg.Shape_Square(playerID, 1, "Target", 32, 64);
                trg.Shape_Square(playerID, 1, "Target", 32, 64)
                # (Line 92) trg.Shape_Square(playerID, 1, "60 + 1n Archon", 96, 0);
                trg.Shape_Square(playerID, 1, "60 + 1n Archon", 96, 0)
                # (Line 93) trg.Shape_Square(playerID, 1, "60 + 1n Archon", 64, 32);
                trg.Shape_Square(playerID, 1, "60 + 1n Archon", 64, 32)
                # (Line 94) trg.Shape_Square(playerID, 1, "60 + 1n Archon", 32, 64);
                trg.Shape_Square(playerID, 1, "60 + 1n Archon", 32, 64)
                # (Line 96) trg.Shape_Square(playerID, 1, "40 + 1n Goliath", 32, 32);
                trg.Shape_Square(playerID, 1, "40 + 1n Goliath", 32, 32)
                # (Line 98) KillUnitAt(All, "Target", "Anywhere", playerID);
                # (Line 99) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "Target", "Anywhere", playerID))
                # (Line 101) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 102) MoveUnit(All, "40 + 1n Goliath", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 103) Order("40 + 1n Goliath", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "40 + 1n Goliath", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 105) trg.Main_Wait(160);
                DoActions(Order("40 + 1n Goliath", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(160)
                # (Line 106) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 107) }
                # (Line 108) else if (v.P_LoopMain[playerID] == 4)
            if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                # (Line 109) {
                # (Line 110) KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID);
                # (Line 112) trg.Shape_Edge(playerID, 1, "60 + 1n High Templar", 0, 4, 100);
                DoActions(KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID))
                trg.Shape_Edge(playerID, 1, "60 + 1n High Templar", 0, 4, 100)
                # (Line 113) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
                # (Line 115) trg.Main_Wait(160);
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
                trg.Main_Wait(160)
                # (Line 117) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 118) }
                # (Line 119) else if (v.P_LoopMain[playerID] == 5)
            if EUDElseIf()(v.P_LoopMain[playerID] == 5):
                # (Line 120) {
                # (Line 121) var x = 100;
                x = EUDVariable()
                x << (100)
                # (Line 122) var y = 150;
                y = EUDVariable()
                y << (150)
                # (Line 124) var x2 = 150;
                x2 = EUDVariable()
                x2 << (150)
                # (Line 125) var y2 = 200;
                y2 = EUDVariable()
                y2 << (200)
                # (Line 127) trg.Shape_Square(playerID, 1, "60 + 1n High Templar", x, y);
                trg.Shape_Square(playerID, 1, "60 + 1n High Templar", x, y)
                # (Line 128) trg.Shape_Square(playerID, 1, "60 + 1n High Templar", y, x);
                trg.Shape_Square(playerID, 1, "60 + 1n High Templar", y, x)
                # (Line 129) trg.Shape_Square(playerID, 1, "60 + 1n High Templar", x2, y2);
                trg.Shape_Square(playerID, 1, "60 + 1n High Templar", x2, y2)
                # (Line 130) trg.Shape_Square(playerID, 1, "60 + 1n High Templar", y2, x2);
                trg.Shape_Square(playerID, 1, "60 + 1n High Templar", y2, x2)
                # (Line 131) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
                # (Line 133) trg.Main_Wait(160);
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
                trg.Main_Wait(160)
                # (Line 134) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 135) }
                # (Line 136) else if (v.P_LoopMain[playerID] == 6)
            if EUDElseIf()(v.P_LoopMain[playerID] == 6):
                # (Line 137) {
                # (Line 138) trg.Shape_Edge(playerID, 1, "40 + 1n Mojo", 0, 4, 100);
                trg.Shape_Edge(playerID, 1, "40 + 1n Mojo", 0, 4, 100)
                # (Line 139) trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 0, 5, 100);
                trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 0, 5, 100)
                # (Line 140) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                # (Line 142) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 143) Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 145) trg.Main_Wait(160);
                DoActions(Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(160)
                # (Line 146) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 147) }
                # (Line 148) else if (v.P_LoopMain[playerID] == 7)
            if EUDElseIf()(v.P_LoopMain[playerID] == 7):
                # (Line 149) {
                # (Line 150) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
                # (Line 152) trg.Shape_Edge(playerID, 1, "40 + 1n Mojo", 0, 5, 150);
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
                trg.Shape_Edge(playerID, 1, "40 + 1n Mojo", 0, 5, 150)
                # (Line 153) trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 0, 7, 150);
                trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 0, 7, 150)
                # (Line 154) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                # (Line 156) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 157) Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 159) trg.Main_Wait(160);
                DoActions(Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(160)
                # (Line 160) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 161) }
                # (Line 162) else if (v.P_LoopMain[playerID] == 8)
            if EUDElseIf()(v.P_LoopMain[playerID] == 8):
                # (Line 163) {
                # (Line 164) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
                # (Line 166) trg.Shape_Edge(playerID, 1, "60 + 1n Danimoth", 0, 5, 150);
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
                trg.Shape_Edge(playerID, 1, "60 + 1n Danimoth", 0, 5, 150)
                # (Line 167) trg.Shape_Edge(playerID, 1, "50 + 1n Tank", 0, 5, 150);
                trg.Shape_Edge(playerID, 1, "50 + 1n Tank", 0, 5, 150)
                # (Line 169) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 170) MoveUnit(All, "50 + 1n Tank", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 171) Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "50 + 1n Tank", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 172) Order("50 + 1n Tank", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 174) trg.Main_Wait(160);
                DoActions(Order("50 + 1n Tank", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(160)
                # (Line 176) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 177) }
                # (Line 178) else if (v.P_LoopMain[playerID] == 9)
            if EUDElseIf()(v.P_LoopMain[playerID] == 9):
                # (Line 179) {
                # (Line 180) var x = 100;
                x = EUDVariable()
                x << (100)
                # (Line 181) var y = 150;
                y = EUDVariable()
                y << (150)
                # (Line 183) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", x, y);
                trg.Shape_Square(playerID, 1, "40 + 1n Mojo", x, y)
                # (Line 184) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", y, x);
                trg.Shape_Square(playerID, 1, "40 + 1n Mojo", y, x)
                # (Line 185) trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y);
                trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y)
                # (Line 186) trg.Shape_Square(playerID, 1, "60 + 1n Archon", y, x);
                trg.Shape_Square(playerID, 1, "60 + 1n Archon", y, x)
                # (Line 187) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                # (Line 189) trg.Shape_Edge(playerID, 1, "Target", 45, 5, 100);
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                trg.Shape_Edge(playerID, 1, "Target", 45, 5, 100)
                # (Line 190) KillUnitAt(All, "Target", "Anywhere", playerID);
                # (Line 192) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "Target", "Anywhere", playerID))
                # (Line 193) Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 195) trg.Main_Wait(160);
                DoActions(Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(160)
                # (Line 197) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 198) }
                # (Line 199) else if (v.P_LoopMain[playerID] == 10)
            if EUDElseIf()(v.P_LoopMain[playerID] == 10):
                # (Line 200) {
                # (Line 201) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
                # (Line 203) var x = 150;
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
                x = EUDVariable()
                x << (150)
                # (Line 204) var y = 200;
                y = EUDVariable()
                y << (200)
                # (Line 206) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", x, y);
                trg.Shape_Square(playerID, 1, "40 + 1n Mojo", x, y)
                # (Line 207) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", y, x);
                trg.Shape_Square(playerID, 1, "40 + 1n Mojo", y, x)
                # (Line 208) trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y);
                trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y)
                # (Line 209) trg.Shape_Square(playerID, 1, "60 + 1n Archon", y, x);
                trg.Shape_Square(playerID, 1, "60 + 1n Archon", y, x)
                # (Line 210) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                # (Line 212) trg.Shape_Edge(playerID, 1, "Target", 0, 5, 100);
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                trg.Shape_Edge(playerID, 1, "Target", 0, 5, 100)
                # (Line 213) KillUnitAt(All, "Target", "Anywhere", playerID);
                # (Line 215) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "Target", "Anywhere", playerID))
                # (Line 216) Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 218) trg.Main_Wait(160);
                DoActions(Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(160)
                # (Line 220) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 221) }
                # (Line 222) else if (v.P_LoopMain[playerID] == 11)
            if EUDElseIf()(v.P_LoopMain[playerID] == 11):
                # (Line 223) {
                # (Line 224) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
                # (Line 227) var x = 125;
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
                x = EUDVariable()
                x << (125)
                # (Line 228) var y = 175;
                y = EUDVariable()
                y << (175)
                # (Line 230) var x2 = 200;
                x2 = EUDVariable()
                x2 << (200)
                # (Line 231) var y2 = 250;
                y2 = EUDVariable()
                y2 << (250)
                # (Line 233) trg.Shape_Square(playerID, 1, "60 + 1n Siege", x, y);
                trg.Shape_Square(playerID, 1, "60 + 1n Siege", x, y)
                # (Line 234) trg.Shape_Square(playerID, 1, "60 + 1n Siege", y, x);
                trg.Shape_Square(playerID, 1, "60 + 1n Siege", y, x)
                # (Line 235) trg.Shape_Square(playerID, 1, "60 + 1n Siege", x2, y2);
                trg.Shape_Square(playerID, 1, "60 + 1n Siege", x2, y2)
                # (Line 236) trg.Shape_Square(playerID, 1, "60 + 1n Siege", y2, x2);
                trg.Shape_Square(playerID, 1, "60 + 1n Siege", y2, x2)
                # (Line 237) trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", x, y);
                trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", x, y)
                # (Line 238) trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", y, x);
                trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", y, x)
                # (Line 239) trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", x2, y2);
                trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", x2, y2)
                # (Line 240) trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", y2, x2);
                trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", y2, x2)
                # (Line 242) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 243) Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 245) trg.Main_Wait(800);
                DoActions(Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(800)
                # (Line 247) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 248) }
                # (Line 249) else if (v.P_LoopMain[playerID] == 12)
            if EUDElseIf()(v.P_LoopMain[playerID] == 12):
                # (Line 250) {
                # (Line 251) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 252) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                # (Line 254) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 256) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 257) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 258) }
                # (Line 261) }
            EUDEndIf()
            # (Line 262) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 263) {
            # (Line 264) if (v.P_LoopMain[playerID] < 4)
            if EUDIf()(v.P_LoopMain[playerID] >= 4, neg=True):
                # (Line 265) {
                # (Line 266) trg.Table_Sin(playerID, 22 + 45 * v.P_LoopMain[playerID], 75 + 75 * v.P_LoopMain[playerID]);
                trg.Table_Sin(playerID, 22 + 45 * v.P_LoopMain[playerID], 75 + 75 * v.P_LoopMain[playerID])
                # (Line 267) trg.Table_Cos(playerID, 22 + 45 * v.P_LoopMain[playerID], 75 + 75 * v.P_LoopMain[playerID]);
                trg.Table_Cos(playerID, 22 + 45 * v.P_LoopMain[playerID], 75 + 75 * v.P_LoopMain[playerID])
                # (Line 269) trg.Shape_Square(playerID, 8, "60 + 1n High Templar", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 8, "60 + 1n High Templar", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 270) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
                # (Line 272) trg.Main_Wait(160);
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
                trg.Main_Wait(160)
                # (Line 273) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 274) }
                # (Line 275) else if (v.P_LoopMain[playerID] == 4)
            if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                # (Line 276) {
                # (Line 277) trg.Table_Sin(playerID, 22, 75);
                trg.Table_Sin(playerID, 22, 75)
                # (Line 278) trg.Table_Cos(playerID, 22, 75);
                trg.Table_Cos(playerID, 22, 75)
                # (Line 280) trg.Shape_Square(playerID, 4, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 4, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 282) trg.Table_Sin(playerID, 67, 150);
                trg.Table_Sin(playerID, 67, 150)
                # (Line 283) trg.Table_Cos(playerID, 67, 150);
                trg.Table_Cos(playerID, 67, 150)
                # (Line 285) trg.Shape_Square(playerID, 4, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 4, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 287) trg.Table_Sin(playerID, 22, 225);
                trg.Table_Sin(playerID, 22, 225)
                # (Line 288) trg.Table_Cos(playerID, 22, 225);
                trg.Table_Cos(playerID, 22, 225)
                # (Line 290) trg.Shape_Square(playerID, 4, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 4, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 292) trg.Table_Sin(playerID, 67, 300);
                trg.Table_Sin(playerID, 67, 300)
                # (Line 293) trg.Table_Cos(playerID, 67, 300);
                trg.Table_Cos(playerID, 67, 300)
                # (Line 295) trg.Shape_Square(playerID, 4, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 4, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 297) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
                # (Line 299) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 300) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 301) }
                # (Line 302) else if (v.P_LoopMain[playerID] == 5)
            if EUDElseIf()(v.P_LoopMain[playerID] == 5):
                # (Line 303) {
                # (Line 304) trg.Table_Sin(playerID, 22, 75);
                trg.Table_Sin(playerID, 22, 75)
                # (Line 305) trg.Table_Cos(playerID, 22, 75);
                trg.Table_Cos(playerID, 22, 75)
                # (Line 307) trg.Shape_Square(playerID, 1, "40 + 1n Marine", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "40 + 1n Marine", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 309) trg.Table_Sin(playerID, 67, 150);
                trg.Table_Sin(playerID, 67, 150)
                # (Line 310) trg.Table_Cos(playerID, 67, 150);
                trg.Table_Cos(playerID, 67, 150)
                # (Line 312) trg.Shape_Square(playerID, 1, "40 + 1n Marine", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "40 + 1n Marine", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 314) trg.Table_Sin(playerID, 22, 225);
                trg.Table_Sin(playerID, 22, 225)
                # (Line 315) trg.Table_Cos(playerID, 22, 225);
                trg.Table_Cos(playerID, 22, 225)
                # (Line 317) trg.Shape_Square(playerID, 1, "40 + 1n Marine", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "40 + 1n Marine", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 319) trg.Table_Sin(playerID, 67, 300);
                trg.Table_Sin(playerID, 67, 300)
                # (Line 320) trg.Table_Cos(playerID, 67, 300);
                trg.Table_Cos(playerID, 67, 300)
                # (Line 322) trg.Shape_Square(playerID, 1, "40 + 1n Marine", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "40 + 1n Marine", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 324) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 325) MoveUnit(All, "40 + 1n Marine", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 326) Order("40 + 1n Marine", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "40 + 1n Marine", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 328) trg.Main_Wait(80);
                DoActions(Order("40 + 1n Marine", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(80)
                # (Line 329) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 330) }
                # (Line 331) else if (v.P_LoopMain[playerID] < 28)
            if EUDElseIf()(v.P_LoopMain[playerID] >= 28, neg=True):
                # (Line 332) {
                # (Line 333) trg.Table_Sin(playerID, 22 + 45 * (v.P_LoopMain[playerID] % 4), 75 + 75 * (v.P_LoopMain[playerID] % 4));
                trg.Table_Sin(playerID, 22 + 45 * (v.P_LoopMain[playerID] % 4), 75 + 75 * (v.P_LoopMain[playerID] % 4))
                # (Line 334) trg.Table_Cos(playerID, 22 + 45 * (v.P_LoopMain[playerID] % 4), 75 + 75 * (v.P_LoopMain[playerID] % 4));
                trg.Table_Cos(playerID, 22 + 45 * (v.P_LoopMain[playerID] % 4), 75 + 75 * (v.P_LoopMain[playerID] % 4))
                # (Line 336) trg.Shape_Square(playerID, 8, "60 + 1n High Templar", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 8, "60 + 1n High Templar", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 337) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
                # (Line 339) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 341) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 342) }
                # (Line 343) else if (v.P_LoopMain[playerID] == 28)
            if EUDElseIf()(v.P_LoopMain[playerID] == 28):
                # (Line 344) {
                # (Line 345) KillUnitAt(All, "40 + 1n Marine", "Anywhere", playerID);
                # (Line 347) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "40 + 1n Marine", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 349) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 350) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 351) }
                # (Line 352) }
            EUDEndIf()
            # (Line 353) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 354) {
            # (Line 355) if (v.P_LoopMain[playerID] < 4)
            if EUDIf()(v.P_LoopMain[playerID] >= 4, neg=True):
                # (Line 356) {
                # (Line 357) trg.Shape_NxNSquare(playerID, 1, "60 + 1n Danimoth", 3 + 2 * v.P_LoopMain[playerID], 75);
                trg.Shape_NxNSquare(playerID, 1, "60 + 1n Danimoth", 3 + 2 * v.P_LoopMain[playerID], 75)
                # (Line 358) trg.Shape_NxNSquare(playerID, 1, "60 + 1n Archon", 3 + 2 * v.P_LoopMain[playerID], 75);
                trg.Shape_NxNSquare(playerID, 1, "60 + 1n Archon", 3 + 2 * v.P_LoopMain[playerID], 75)
                # (Line 359) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                # (Line 360) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                # (Line 362) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 363) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 364) }
                # (Line 365) else if (v.P_LoopMain[playerID] == 4)
            if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                # (Line 366) {
                # (Line 367) trg.Shape_NxNSquare(playerID, 1, "40 + 1n Guardian", 9, 75);
                trg.Shape_NxNSquare(playerID, 1, "40 + 1n Guardian", 9, 75)
                # (Line 368) trg.Shape_NxNSquare(playerID, 1, "Protoss Dark Archon", 9, 75);
                trg.Shape_NxNSquare(playerID, 1, "Protoss Dark Archon", 9, 75)
                # (Line 369) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                # (Line 370) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                # (Line 372) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 374) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 375) }
                # (Line 376) else if (v.P_LoopMain[playerID] == 5)
            if EUDElseIf()(v.P_LoopMain[playerID] == 5):
                # (Line 377) {
                # (Line 378) trg.Shape_NxNSquare(playerID, 1, "60 + 1n Danimoth", 9, 75);
                trg.Shape_NxNSquare(playerID, 1, "60 + 1n Danimoth", 9, 75)
                # (Line 379) trg.Shape_NxNSquare(playerID, 1, " Unit. Hoffnung 25000", 9, 75);
                trg.Shape_NxNSquare(playerID, 1, " Unit. Hoffnung 25000", 9, 75)
                # (Line 380) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
                # (Line 382) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
                # (Line 383) Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 385) trg.Main_Wait(320);
                DoActions(Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(320)
                # (Line 387) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 388) }
                # (Line 389) else if (v.P_LoopMain[playerID] == 6)
            if EUDElseIf()(v.P_LoopMain[playerID] == 6):
                # (Line 390) {
                # (Line 391) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                # (Line 393) trg.Main_Wait(800);
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                trg.Main_Wait(800)
                # (Line 395) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 396) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 397) }
                # (Line 398) }
            EUDEndIf()
            # (Line 401) else if (v.P_CountMain[playerID] == 3)
        if EUDElseIf()(v.P_CountMain[playerID] == 3):
            # (Line 402) {
            # (Line 403) KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID);
            # (Line 404) KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID))
            # (Line 406) trg.SkillEnd();
            DoActions(KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID))
            trg.SkillEnd()
            # (Line 407) }
            # (Line 408) }
        EUDEndIf()
        # (Line 409) }
    EUDEndIf()
