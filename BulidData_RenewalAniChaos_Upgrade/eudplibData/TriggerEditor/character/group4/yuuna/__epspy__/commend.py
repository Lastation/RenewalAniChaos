## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _RELIMP(path, mod_name):
    import inspect, pathlib, importlib.util
    p = pathlib.Path(inspect.getabsfile(inspect.currentframe())).parent
    for s in path.split("."):
        if s == "":  p = p.parent
        else:  p = p / s
    try:
        spec = importlib.util.spec_from_file_location(mod_name, p / (mod_name + ".py"))
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
    except FileNotFoundError:
        loader = EPSLoader(mod_name, str(p / (mod_name + ".eps")))
        spec = importlib.util.spec_from_loader(mod_name, loader)
        module = loader.create_module(spec)
        loader.exec_module(module)
    return module

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 4) import func.sound as s;
from func import sound as s
# (Line 6) function main(playerID)
# (Line 7) {
@EUDFunc
def f_main(playerID):
    # (Line 8) if (v.P_SkillDelay[playerID] == 0 && v.P_Step[playerID] == 0)
    if EUDIf()(EUDSCAnd()(v.P_SkillDelay[playerID] == 0)(v.P_Step[playerID] == 0)()):
        # (Line 9) {
        # (Line 10) if (Bring(playerID, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill")
        _t2 = EUDIf()
        # (Line 11) && Deaths(CurrentPlayer, Exactly, 0, " `UniqueCoolTime")
        # (Line 12) && Deaths(CurrentPlayer, AtMost, 2, " `UniqueSkill")
        # (Line 13) && (bread(0x58D2B0 + 0 + 46 * playerID) - 3 * dwread_epd(204 * 12 + playerID) > 4)
        # (Line 14) && Deaths(CurrentPlayer, AtLeast, 1, " `O Skill Condition"))
        if _t2(EUDSCAnd()(Bring(playerID, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill"))(Deaths(CurrentPlayer, Exactly, 0, " `UniqueCoolTime"))(Deaths(CurrentPlayer, AtMost, 2, " `UniqueSkill"))((EUDNot(f_bread(0x58D2B0 + 0 + 46 * playerID) - 3 * f_dwread_epd(204 * 12 + playerID) <= 4)))(Deaths(CurrentPlayer, AtLeast, 1, " `O Skill Condition"))()):
            # (Line 15) {
            # (Line 16) s.CharacterVoice(14);
            s.CharacterVoice(14)
            # (Line 17) v.P_Step[playerID] = 1;
            _ARRW(v.P_Step, playerID) << (1)
            # (Line 18) KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", playerID);
            # (Line 19) }
            DoActions(KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", playerID))
            # (Line 20) else if (Bring(playerID, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill"))
        if EUDElseIf()(Bring(playerID, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill")):
            # (Line 21) {
            # (Line 22) SetResources(CurrentPlayer, Add, 60, Gas);
            # (Line 23) KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", playerID);
            DoActions(SetResources(CurrentPlayer, Add, 60, Gas))
            # (Line 24) }
            DoActions(KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", playerID))
            # (Line 25) else if (Bring(playerID, AtLeast, 1, "Protoss Carrier", "[Skill]UseSkill"))
        if EUDElseIf()(Bring(playerID, AtLeast, 1, "Protoss Carrier", "[Skill]UseSkill")):
            # (Line 26) {
            # (Line 27) v.P_Step[playerID] = 200;
            _ARRW(v.P_Step, playerID) << (200)
            # (Line 28) KillUnitAt(1, "Protoss Carrier", "[Skill]UseSkill", playerID);
            # (Line 29) }
            DoActions(KillUnitAt(1, "Protoss Carrier", "[Skill]UseSkill", playerID))
            # (Line 30) else if (Bring(playerID, AtLeast, 1, "Protoss Scout", "[Skill]UseSkill"))
        if EUDElseIf()(Bring(playerID, AtLeast, 1, "Protoss Scout", "[Skill]UseSkill")):
            # (Line 31) {
            # (Line 32) v.P_Step[playerID] = 100;
            _ARRW(v.P_Step, playerID) << (100)
            # (Line 33) KillUnitAt(1, "Protoss Scout", "[Skill]UseSkill", playerID);
            # (Line 34) }
            DoActions(KillUnitAt(1, "Protoss Scout", "[Skill]UseSkill", playerID))
            # (Line 35) else if (Bring(playerID, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill"))
        if EUDElseIf()(Bring(playerID, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill")):
            # (Line 36) {
            # (Line 37) v.P_Step[playerID] = 300;
            _ARRW(v.P_Step, playerID) << (300)
            # (Line 38) KillUnitAt(1, "Protoss Arbiter", "[Skill]UseSkill", playerID);
            # (Line 39) }
            DoActions(KillUnitAt(1, "Protoss Arbiter", "[Skill]UseSkill", playerID))
            # (Line 40) }
        EUDEndIf()
        # (Line 43) if (v.P_SkillDelay[playerID] >= 2 && v.P_CountMain[playerID] == 0)
    EUDEndIf()
    if EUDIf()(EUDSCAnd()(v.P_SkillDelay[playerID] >= 2)(v.P_CountMain[playerID] == 0)()):
        # (Line 44) {
        # (Line 45) if (Bring(playerID, AtLeast, 2, "Protoss Scout", "[Skill]UseSkill") && v.P_Step[playerID] == 100)
        if EUDIf()(EUDSCAnd()(Bring(playerID, AtLeast, 2, "Protoss Scout", "[Skill]UseSkill"))(v.P_Step[playerID] == 100)()):
            # (Line 46) {
            # (Line 47) s.CharacterVoice(1);
            s.CharacterVoice(1)
            # (Line 48) v.P_SkillDelay[playerID] = 0;
            _ARRW(v.P_SkillDelay, playerID) << (0)
            # (Line 49) v.P_CountMain[playerID] = 0;
            _ARRW(v.P_CountMain, playerID) << (0)
            # (Line 50) v.P_LoopMain[playerID] = 0;
            _ARRW(v.P_LoopMain, playerID) << (0)
            # (Line 51) v.P_Step[playerID] = 110;
            _ARRW(v.P_Step, playerID) << (110)
            # (Line 52) KillUnitAt(2, "Protoss Scout", "[Skill]UseSkill", playerID);
            # (Line 53) }
            DoActions(KillUnitAt(2, "Protoss Scout", "[Skill]UseSkill", playerID))
            # (Line 54) else if (Bring(playerID, AtLeast, 2, "Protoss Carrier", "[Skill]UseSkill")
        _t9 = EUDElseIf()
        # (Line 55) && v.P_Step[playerID] == 110)
        if _t9(EUDSCAnd()(Bring(playerID, AtLeast, 2, "Protoss Carrier", "[Skill]UseSkill"))(v.P_Step[playerID] == 110)()):
            # (Line 56) {
            # (Line 57) s.CharacterVoice(2);
            s.CharacterVoice(2)
            # (Line 58) v.P_SkillDelay[playerID] = 0;
            _ARRW(v.P_SkillDelay, playerID) << (0)
            # (Line 59) v.P_CountMain[playerID] = 0;
            _ARRW(v.P_CountMain, playerID) << (0)
            # (Line 60) v.P_LoopMain[playerID] = 0;
            _ARRW(v.P_LoopMain, playerID) << (0)
            # (Line 61) v.P_Step[playerID] = 120;
            _ARRW(v.P_Step, playerID) << (120)
            # (Line 62) KillUnitAt(2, "Protoss Carrier", "[Skill]UseSkill", playerID);
            # (Line 63) }
            DoActions(KillUnitAt(2, "Protoss Carrier", "[Skill]UseSkill", playerID))
            # (Line 64) else if (Bring(playerID, AtLeast, 1, "Protoss Carrier", "[Skill]UseSkill")
        _t10 = EUDElseIf()
        # (Line 65) && Bring(playerID, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill")
        # (Line 66) && Accumulate(playerID, AtLeast, 200, Gas)
        # (Line 67) && v.P_Step[playerID] == 200)
        if _t10(EUDSCAnd()(Bring(playerID, AtLeast, 1, "Protoss Carrier", "[Skill]UseSkill"))(Bring(playerID, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill"))(Accumulate(playerID, AtLeast, 200, Gas))(v.P_Step[playerID] == 200)()):
            # (Line 68) {
            # (Line 69) s.CharacterVoice(3);
            s.CharacterVoice(3)
            # (Line 70) v.P_SkillDelay[playerID] = 0;
            _ARRW(v.P_SkillDelay, playerID) << (0)
            # (Line 71) v.P_CountMain[playerID] = 0;
            _ARRW(v.P_CountMain, playerID) << (0)
            # (Line 72) v.P_LoopMain[playerID] = 0;
            _ARRW(v.P_LoopMain, playerID) << (0)
            # (Line 73) v.P_Step[playerID] = 210;
            _ARRW(v.P_Step, playerID) << (210)
            # (Line 74) SetResources(playerID, Subtract, 200, Gas);
            # (Line 75) KillUnitAt(1, "Protoss Arbiter", "[Skill]UseSkill", playerID);
            DoActions(SetResources(playerID, Subtract, 200, Gas))
            # (Line 76) KillUnitAt(1, "Protoss Carrier", "[Skill]UseSkill", playerID);
            DoActions(KillUnitAt(1, "Protoss Arbiter", "[Skill]UseSkill", playerID))
            # (Line 77) }
            DoActions(KillUnitAt(1, "Protoss Carrier", "[Skill]UseSkill", playerID))
            # (Line 78) else if (Bring(playerID, AtLeast, 3, "Protoss Arbiter", "[Skill]UseSkill")
        _t11 = EUDElseIf()
        # (Line 79) && Accumulate(playerID, AtLeast, 100, Gas)
        # (Line 80) && v.P_Step[playerID] == 200)
        if _t11(EUDSCAnd()(Bring(playerID, AtLeast, 3, "Protoss Arbiter", "[Skill]UseSkill"))(Accumulate(playerID, AtLeast, 100, Gas))(v.P_Step[playerID] == 200)()):
            # (Line 81) {
            # (Line 82) s.CharacterVoice(5);
            s.CharacterVoice(5)
            # (Line 83) v.P_SkillDelay[playerID] = 0;
            _ARRW(v.P_SkillDelay, playerID) << (0)
            # (Line 84) v.P_CountMain[playerID] = 0;
            _ARRW(v.P_CountMain, playerID) << (0)
            # (Line 85) v.P_LoopMain[playerID] = 0;
            _ARRW(v.P_LoopMain, playerID) << (0)
            # (Line 86) v.P_Step[playerID] = 230;
            _ARRW(v.P_Step, playerID) << (230)
            # (Line 87) KillUnitAt(3, "Protoss Arbiter", "[Skill]UseSkill", playerID);
            # (Line 88) SetResources(playerID, Subtract, 200, Gas);
            DoActions(KillUnitAt(3, "Protoss Arbiter", "[Skill]UseSkill", playerID))
            # (Line 89) }
            DoActions(SetResources(playerID, Subtract, 200, Gas))
            # (Line 91) else if (Bring(playerID, AtLeast, 3, "Protoss Arbiter", "[Skill]UseSkill")
        _t12 = EUDElseIf()
        # (Line 92) && v.P_Step[playerID] == 300
        # (Line 93) && v.P_UltimateGauge[playerID] >= v.P_Ultimate1[playerID])
        if _t12(EUDSCAnd()(Bring(playerID, AtLeast, 3, "Protoss Arbiter", "[Skill]UseSkill"))(v.P_Step[playerID] == 300)(v.P_UltimateGauge[playerID] >= v.P_Ultimate1[playerID])()):
            # (Line 94) {
            # (Line 95) if (Switch("UiltimateSwitch", Cleared))
            if EUDIf()(Switch("UiltimateSwitch", Cleared)):
                # (Line 96) {
                # (Line 97) s.CharacterVoice(8);
                s.CharacterVoice(8)
                # (Line 98) SetSwitch("UiltimateSwitch", Set);
                # (Line 99) CreateUnit(1, " Item. Flag", "[Uiltimate]Flag", CurrentPlayer);
                DoActions(SetSwitch("UiltimateSwitch", Set))
                # (Line 100) v.P_SkillDelay[playerID] = 0;
                DoActions(CreateUnit(1, " Item. Flag", "[Uiltimate]Flag", CurrentPlayer))
                _ARRW(v.P_SkillDelay, playerID) << (0)
                # (Line 101) v.P_CountMain[playerID] = 0;
                _ARRW(v.P_CountMain, playerID) << (0)
                # (Line 102) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 103) v.P_Step[playerID] = 310;
                _ARRW(v.P_Step, playerID) << (310)
                # (Line 104) SetDeaths(playerID, Subtract, v.P_Ultimate1[playerID], " `UltimateCoolTime");
                # (Line 105) KillUnitAt(3, "Protoss Arbiter", "[Skill]UseSkill", playerID);
                DoActions(SetDeaths(playerID, Subtract, v.P_Ultimate1[playerID], " `UltimateCoolTime"))
                # (Line 106) }
                DoActions(KillUnitAt(3, "Protoss Arbiter", "[Skill]UseSkill", playerID))
                # (Line 107) else
                # (Line 108) {
            if EUDElse()():
                # (Line 109) SetResources(CurrentPlayer, Add, 600, Gas);
                # (Line 110) KillUnitAt(2, "Protoss Arbiter", "[Skill]UseSkill", playerID);
                DoActions(SetResources(CurrentPlayer, Add, 600, Gas))
                # (Line 111) SetDeaths(CurrentPlayer, SetTo, 999, " `SYSTEMTEXT");
                DoActions(KillUnitAt(2, "Protoss Arbiter", "[Skill]UseSkill", playerID))
                # (Line 112) }
                DoActions(SetDeaths(CurrentPlayer, SetTo, 999, " `SYSTEMTEXT"))
                # (Line 113) }
            EUDEndIf()
            # (Line 114) else if (Bring(playerID, AtLeast, 3, "Protoss Arbiter", "[Skill]UseSkill")
        _t14 = EUDElseIf()
        # (Line 115) && v.P_Step[playerID] == 310
        # (Line 116) && v.P_UltimateGauge[playerID] >= v.P_Ultimate2[playerID]
        # (Line 117) && Deaths(playerID, AtLeast, 3, " `UniqueSkill"))
        if _t14(EUDSCAnd()(Bring(playerID, AtLeast, 3, "Protoss Arbiter", "[Skill]UseSkill"))(v.P_Step[playerID] == 310)(v.P_UltimateGauge[playerID] >= v.P_Ultimate2[playerID])(Deaths(playerID, AtLeast, 3, " `UniqueSkill"))()):
            # (Line 118) {
            # (Line 119) SetSwitch("UiltimateSwitch", Set);
            # (Line 120) CreateUnit(1, " Item. Flag", "[Uiltimate]Flag", CurrentPlayer);
            DoActions(SetSwitch("UiltimateSwitch", Set))
            # (Line 121) s.CharacterVoice(12);
            DoActions(CreateUnit(1, " Item. Flag", "[Uiltimate]Flag", CurrentPlayer))
            s.CharacterVoice(12)
            # (Line 122) v.P_SkillDelay[playerID] = 0;
            _ARRW(v.P_SkillDelay, playerID) << (0)
            # (Line 123) v.P_CountMain[playerID] = 0;
            _ARRW(v.P_CountMain, playerID) << (0)
            # (Line 124) v.P_LoopMain[playerID] = 0;
            _ARRW(v.P_LoopMain, playerID) << (0)
            # (Line 125) v.P_Step[playerID] = 320;
            _ARRW(v.P_Step, playerID) << (320)
            # (Line 126) SetDeaths(playerID, Subtract, v.P_Ultimate2[playerID], " `UltimateCoolTime");
            # (Line 127) KillUnitAt(3, "Protoss Arbiter", "[Skill]UseSkill", playerID);
            DoActions(SetDeaths(playerID, Subtract, v.P_Ultimate2[playerID], " `UltimateCoolTime"))
            # (Line 128) }
            DoActions(KillUnitAt(3, "Protoss Arbiter", "[Skill]UseSkill", playerID))
            # (Line 130) }
        EUDEndIf()
        # (Line 131) }
    EUDEndIf()
