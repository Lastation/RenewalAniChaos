## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import variable as v;
import variable as v
# (Line 2) import func.trig as trg;
from func import trig as trg
# (Line 3) import func.sound as s;
from func import sound as s
# (Line 5) const P_player		= PVariable();
P_player = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 6) const P_observer 	= PVariable();
P_observer = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 8) function Text(num);
# (Line 10) function player(playerID)
# (Line 11) {
@EUDFunc
def f_player(playerID):
    # (Line 12) Text(P_player[playerID]);
    Text(P_player[playerID])
    # (Line 13) P_player[playerID] = 0;
    _ARRW(P_player, playerID) << (0)
    # (Line 14) }
    # (Line 16) function observer(playerID)

# (Line 17) {
@EUDFunc
def f_observer(playerID):
    # (Line 18) Text(P_observer[playerID - 128]);
    Text(P_observer[playerID - 128])
    # (Line 19) P_observer[playerID - 128] = 0;
    _ARRW(P_observer, playerID - 128) << (0)
    # (Line 20) }
    # (Line 22) function main(playerID)

# (Line 23) {
@EUDFunc
def f_main(playerID):
    # (Line 24) if (playerID < 6) 	{ player(playerID); 	}
    if EUDIf()(playerID >= 6, neg=True):
        f_player(playerID)
        # (Line 25) else  			{ observer(playerID); }
    if EUDElse()():
        f_observer(playerID)
        # (Line 26) }
    EUDEndIf()
    # (Line 29) function Text(num)

# (Line 30) {
@EUDFunc
def Text(num):
    # (Line 31) switch (num)
    EUDSwitch(num)
    # (Line 32) {
    # (Line 33) case 1:
    _t1 = EUDSwitchCase()
    # (Line 34) PlayWAV("Yuuna_02.ogg");
    if _t1(1):
        # (Line 35) v.stb.print("\x13\x1BYuuki Yuuna\n");
        DoActions(PlayWAV("Yuuna_02.ogg"))
        v.stb.print("\x13\x1BYuuki Yuuna\n")
        # (Line 36) v.stb.print("\x13\x04인간으로서 싸우겠어!\x04");
        v.stb.print("\x13\x04인간으로서 싸우겠어!\x04")
        # (Line 37) break;
        EUDBreak()
        # (Line 38) case 2:
    _t2 = EUDSwitchCase()
    # (Line 39) PlayWAV("Yuuna_03.ogg");
    if _t2(2):
        # (Line 40) v.stb.print("\x13\x1BYuuki Yuuna\n");
        DoActions(PlayWAV("Yuuna_03.ogg"))
        v.stb.print("\x13\x1BYuuki Yuuna\n")
        # (Line 41) v.stb.print("\x13\x04살고 싶단 말야!\x04");
        v.stb.print("\x13\x04살고 싶단 말야!\x04")
        # (Line 42) break;
        EUDBreak()
        # (Line 43) case 3:
    _t3 = EUDSwitchCase()
    # (Line 44) PlayWAV("Yuuna_04.ogg");
    if _t3(3):
        # (Line 45) v.stb.print("\x13\x1BYuuki Yuuna\n");
        DoActions(PlayWAV("Yuuna_04.ogg"))
        v.stb.print("\x13\x1BYuuki Yuuna\n")
        # (Line 46) v.stb.print("\x13\x04용사는 굴하지 않아!\x04");
        v.stb.print("\x13\x04용사는 굴하지 않아!\x04")
        # (Line 47) break;
        EUDBreak()
        # (Line 48) case 4:
    _t4 = EUDSwitchCase()
    # (Line 49) PlayWAV("Yuuna_05.ogg");
    if _t4(4):
        # (Line 50) v.stb.print("\x13\x1BYuuki Yuuna\n");
        DoActions(PlayWAV("Yuuna_05.ogg"))
        v.stb.print("\x13\x1BYuuki Yuuna\n")
        # (Line 51) v.stb.print("\x13\x04몇 번이라도! 다시 일어선다!\x04");
        v.stb.print("\x13\x04몇 번이라도! 다시 일어선다!\x04")
        # (Line 52) break;
        EUDBreak()
        # (Line 53) case 5:
    _t5 = EUDSwitchCase()
    # (Line 54) PlayWAV("Yuuna_01.ogg");
    if _t5(5):
        # (Line 55) v.stb.print("\x13\x1BYuuki Yuuna\n");
        DoActions(PlayWAV("Yuuna_01.ogg"))
        v.stb.print("\x13\x1BYuuki Yuuna\n")
        # (Line 56) v.stb.print("\x13\x04이게...!\x04");
        v.stb.print("\x13\x04이게...!\x04")
        # (Line 57) break;
        EUDBreak()
        # (Line 58) case 6:
    _t6 = EUDSwitchCase()
    # (Line 59) v.stb.print("\x13\x1BYuuki Yuuna\n");
    if _t6(6):
        v.stb.print("\x13\x1BYuuki Yuuna\n")
        # (Line 60) v.stb.print("\x13\x04아파, 무서워... 하지만...!\x04");
        v.stb.print("\x13\x04아파, 무서워... 하지만...!\x04")
        # (Line 61) break;
        EUDBreak()
        # (Line 62) case 7:
    _t7 = EUDSwitchCase()
    # (Line 63) v.stb.print("\x13\x1BYuuki Yuuna\n");
    if _t7(7):
        v.stb.print("\x13\x1BYuuki Yuuna\n")
        # (Line 64) v.stb.print("\x13\x04괜찮아ㅡ!!\x04");
        v.stb.print("\x13\x04괜찮아ㅡ!!\x04")
        # (Line 65) break;
        EUDBreak()
        # (Line 66) case 8:
    _t8 = EUDSwitchCase()
    # (Line 67) PlayWAV("Yuuna_Ult01.ogg");
    if _t8(8):
        # (Line 68) v.stb.print("\x13\x17Inubozaki Huu\n\n");
        DoActions(PlayWAV("Yuuna_Ult01.ogg"))
        v.stb.print("\x13\x17Inubozaki Huu\n\n")
        # (Line 69) v.stb.print("\x13\x04용사부ㅡ!!\x04");
        v.stb.print("\x13\x04용사부ㅡ!!\x04")
        # (Line 70) break;
        EUDBreak()
        # (Line 71) case 9:
    _t9 = EUDSwitchCase()
    # (Line 72) v.stb.print("\n\x13\x04Fightㅡ!!\x04");
    if _t9(9):
        v.stb.print("\n\x13\x04Fightㅡ!!\x04")
        # (Line 73) break;
        EUDBreak()
        # (Line 74) case 10:
    _t10 = EUDSwitchCase()
    # (Line 75) v.stb.printAt(3, "\x13\x1BYuuki Yuuna\n");
    if _t10(10):
        v.stb.printAt(3, "\x13\x1BYuuki Yuuna\n")
        # (Line 76) v.stb.printAt(5, "\x13\x04용사는...!\x04");
        v.stb.printAt(5, "\x13\x04용사는...!\x04")
        # (Line 77) break;
        EUDBreak()
        # (Line 78) case 11:
    _t11 = EUDSwitchCase()
    # (Line 79) v.stb.printAt(3, "\x13\x1BYuuki Yuuna\n");
    if _t11(11):
        v.stb.printAt(3, "\x13\x1BYuuki Yuuna\n")
        # (Line 80) v.stb.printAt(5, "\x13\x08근성ㅡ!!\x04");
        v.stb.printAt(5, "\x13\x08근성ㅡ!!\x04")
        # (Line 81) break;
        EUDBreak()
        # (Line 82) case 12:
    _t12 = EUDSwitchCase()
    # (Line 83) PlayWAV("Yuuna_Ult02.ogg");
    if _t12(12):
        # (Line 84) break;
        DoActions(PlayWAV("Yuuna_Ult02.ogg"))
        EUDBreak()
        # (Line 85) case 13:
    _t13 = EUDSwitchCase()
    # (Line 86) v.stb.printAt(3, "\x13\x1BYuuki Yuuna\n");
    if _t13(13):
        v.stb.printAt(3, "\x13\x1BYuuki Yuuna\n")
        # (Line 87) v.stb.printAt(5, "\x13\x08용사──── 펀치─────!!\x04");
        v.stb.printAt(5, "\x13\x08용사──── 펀치─────!!\x04")
        # (Line 88) break;
        EUDBreak()
        # (Line 89) case 14:
    _t14 = EUDSwitchCase()
    # (Line 90) PlayWAV("Yuuna_06.ogg");
    if _t14(14):
        # (Line 91) v.stb.printAt(3, "\x13\x1BYuuki Yuuna\n");
        DoActions(PlayWAV("Yuuna_06.ogg"))
        v.stb.printAt(3, "\x13\x1BYuuki Yuuna\n")
        # (Line 92) v.stb.printAt(5, "\x13\x04만개!\x04");
        v.stb.printAt(5, "\x13\x04만개!\x04")
        # (Line 93) break;
        EUDBreak()
        # (Line 94) }
    # (Line 95) }
    EUDEndSwitch()
