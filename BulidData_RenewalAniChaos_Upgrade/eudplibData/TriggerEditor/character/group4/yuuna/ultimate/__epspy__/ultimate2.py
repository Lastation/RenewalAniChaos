## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import variable as v;
import variable as v
# (Line 2) import func.trig as trg;
from func import trig as trg
# (Line 3) import func.sound as s;
from func import sound as s
# (Line 5) function FlowerShape(cp : TrgPlayer, count, Unit : TrgUnit, i, distance, interval);
# (Line 7) function main(playerID)
# (Line 8) {
@EUDFunc
def f_main(playerID):
    # (Line 9) MoveLocation("22.Yuuna_Bozo", v.P_UnitID[playerID], playerID, "Anywhere");
    # (Line 10) trg.Debuff_BanReturn();
    DoActions(MoveLocation("22.Yuuna_Bozo", v.P_UnitID[playerID], playerID, "Anywhere"))
    trg.Debuff_BanReturn()
    # (Line 11) trg.Debuff_Stop();
    trg.Debuff_Stop()
    # (Line 12) trg.Buff_ShieldFix(1);
    trg.Buff_ShieldFix(1)
    # (Line 14) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 15) {
        # (Line 16) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 17) {
            # (Line 18) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 19) {
                # (Line 20) SetSwitch("Recall - Yuuna", Set);
                # (Line 23) trg.Main_Wait(2000);
                DoActions(SetSwitch("Recall - Yuuna", Set))
                trg.Main_Wait(2000)
                # (Line 25) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 26) }
                # (Line 27) else if (v.P_LoopMain[playerID] == 1)
            if EUDElseIf()(v.P_LoopMain[playerID] == 1):
                # (Line 28) {
                # (Line 29) trg.Main_Wait(80);
                trg.Main_Wait(80)
                # (Line 31) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 32) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 33) v.P_LoopSub1[playerID] = 0;
                _ARRW(v.P_LoopSub1, playerID) << (0)
                # (Line 34) }
                # (Line 35) }
            EUDEndIf()
            # (Line 36) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 37) {
            # (Line 38) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 39) {
                # (Line 40) trg.Main_Wait(3200);
                trg.Main_Wait(3200)
                # (Line 42) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 43) }
                # (Line 44) else if (v.P_LoopMain[playerID] == 1)
            if EUDElseIf()(v.P_LoopMain[playerID] == 1):
                # (Line 45) {
                # (Line 46) s.CharacterVoice(13);
                s.CharacterVoice(13)
                # (Line 48) trg.Main_Wait(80);
                trg.Main_Wait(80)
                # (Line 50) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 51) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 52) v.P_LoopSub1[playerID] = 0;
                _ARRW(v.P_LoopSub1, playerID) << (0)
                # (Line 53) }
                # (Line 54) }
            EUDEndIf()
            # (Line 55) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 56) {
            # (Line 57) if (v.P_LoopMain[playerID] < 4)
            if EUDIf()(v.P_LoopMain[playerID] >= 4, neg=True):
                # (Line 58) {
                # (Line 59) trg.Shape_NxNSquare(playerID, 1, "40 + 1n Wraith", 2 * v.P_LoopMain[playerID] + 5, 75);
                trg.Shape_NxNSquare(playerID, 1, "40 + 1n Wraith", 2 * v.P_LoopMain[playerID] + 5, 75)
                # (Line 60) trg.Shape_NxNSquare(playerID, 1, "50 + 1n Tank", 2 * v.P_LoopMain[playerID] + 5, 75);
                trg.Shape_NxNSquare(playerID, 1, "50 + 1n Tank", 2 * v.P_LoopMain[playerID] + 5, 75)
                # (Line 61) KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID);
                # (Line 62) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID))
                # (Line 64) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 66) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 67) }
                # (Line 68) else if (v.P_LoopMain[playerID] == 4)
            if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                # (Line 69) {
                # (Line 70) trg.Shape_NxNSquare(playerID, 1, "130 + 1n Norad", 11, 75);
                trg.Shape_NxNSquare(playerID, 1, "130 + 1n Norad", 11, 75)
                # (Line 71) trg.Shape_NxNSquare(playerID, 1, "60 + 1n Siege", 11, 75);
                trg.Shape_NxNSquare(playerID, 1, "60 + 1n Siege", 11, 75)
                # (Line 72) KillUnitAt(All, "130 + 1n Norad", "Anywhere", playerID);
                # (Line 74) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "130 + 1n Norad", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 76) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 77) }
                # (Line 78) else if (v.P_LoopMain[playerID] == 5)
            if EUDElseIf()(v.P_LoopMain[playerID] == 5):
                # (Line 79) {
                # (Line 80) trg.Main_Wait(1120);
                trg.Main_Wait(1120)
                # (Line 82) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 83) }
                # (Line 84) else if (v.P_LoopMain[playerID] == 6)
            if EUDElseIf()(v.P_LoopMain[playerID] == 6):
                # (Line 85) {
                # (Line 86) trg.Main_Wait(80);
                trg.Main_Wait(80)
                # (Line 88) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 89) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 90) v.P_LoopSub1[playerID] = 0;
                _ARRW(v.P_LoopSub1, playerID) << (0)
                # (Line 91) }
                # (Line 92) }
            EUDEndIf()
            # (Line 93) else if (v.P_CountMain[playerID] == 3)
        if EUDElseIf()(v.P_CountMain[playerID] == 3):
            # (Line 94) {
            # (Line 95) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 96) {
                # (Line 97) trg.Main_Wait(1280);
                trg.Main_Wait(1280)
                # (Line 99) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 100) }
                # (Line 101) else if (v.P_LoopMain[playerID] == 1)
            if EUDElseIf()(v.P_LoopMain[playerID] == 1):
                # (Line 102) {
                # (Line 103) trg.Main_Wait(80);
                trg.Main_Wait(80)
                # (Line 105) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 106) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 107) v.P_LoopSub1[playerID] = 0;
                _ARRW(v.P_LoopSub1, playerID) << (0)
                # (Line 108) }
                # (Line 109) }
            EUDEndIf()
            # (Line 110) else if (v.P_CountMain[playerID] == 4)
        if EUDElseIf()(v.P_CountMain[playerID] == 4):
            # (Line 111) {
            # (Line 112) if (v.P_LoopMain[playerID] < 4)
            if EUDIf()(v.P_LoopMain[playerID] >= 4, neg=True):
                # (Line 113) {
                # (Line 114) RemoveUnitAt(All, "130 + 1n Norad", "Anywhere", playerID);
                # (Line 115) trg.Shape_NxNSquare(playerID, 1, "130 + 1n Norad", 2 * v.P_LoopMain[playerID] + 5, 75);
                DoActions(RemoveUnitAt(All, "130 + 1n Norad", "Anywhere", playerID))
                trg.Shape_NxNSquare(playerID, 1, "130 + 1n Norad", 2 * v.P_LoopMain[playerID] + 5, 75)
                # (Line 116) trg.Shape_NxNSquare(playerID, 1, "50 + 1n Tank", 2 * v.P_LoopMain[playerID] + 5, 75);
                trg.Shape_NxNSquare(playerID, 1, "50 + 1n Tank", 2 * v.P_LoopMain[playerID] + 5, 75)
                # (Line 117) KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID);
                # (Line 118) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID))
                # (Line 119) Order("130 + 1n Norad", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 121) trg.Main_Wait(80);
                DoActions(Order("130 + 1n Norad", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(80)
                # (Line 123) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 124) }
                # (Line 125) else if (v.P_LoopMain[playerID] == 4)
            if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                # (Line 126) {
                # (Line 127) trg.Main_Wait(4000);
                trg.Main_Wait(4000)
                # (Line 129) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 130) }
                # (Line 131) else if (v.P_LoopMain[playerID] == 5)
            if EUDElseIf()(v.P_LoopMain[playerID] == 5):
                # (Line 132) {
                # (Line 133) KillUnitAt(All, "130 + 1n Norad", "Anywhere", playerID);
                # (Line 134) KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "130 + 1n Norad", "Anywhere", playerID))
                # (Line 135) SetDeaths(playerID, SetTo, 0, " `ShieldRecharge");
                DoActions(KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID))
                # (Line 137) trg.Main_Wait(80);
                DoActions(SetDeaths(playerID, SetTo, 0, " `ShieldRecharge"))
                trg.Main_Wait(80)
                # (Line 139) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 140) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 141) v.P_LoopSub1[playerID] = 0;
                _ARRW(v.P_LoopSub1, playerID) << (0)
                # (Line 142) }
                # (Line 143) }
            EUDEndIf()
            # (Line 144) else if (v.P_CountMain[playerID] == 5)
        if EUDElseIf()(v.P_CountMain[playerID] == 5):
            # (Line 145) {
            # (Line 146) SetSwitch("Recall - Yuuna", Clear);
            # (Line 147) SetSwitch("UiltimateSwitch", Clear);
            DoActions(SetSwitch("Recall - Yuuna", Clear))
            # (Line 148) trg.SkillEnd();
            DoActions(SetSwitch("UiltimateSwitch", Clear))
            trg.SkillEnd()
            # (Line 149) }
            # (Line 150) }
        EUDEndIf()
        # (Line 152) if (v.P_WaitSub1[playerID] == 0)
    EUDEndIf()
    if EUDIf()(v.P_WaitSub1[playerID] == 0):
        # (Line 153) {
        # (Line 154) if (v.P_CountMain[playerID] == 1)
        if EUDIf()(v.P_CountMain[playerID] == 1):
            # (Line 155) {
            # (Line 156) if (v.P_LoopSub1[playerID] < 32)
            if EUDIf()(v.P_LoopSub1[playerID] >= 32, neg=True):
                # (Line 157) {
                # (Line 158) trg.Table_Sin(playerID, 50 * v.P_LoopSub1[playerID], 50 + 10 * v.P_LoopSub1[playerID]);
                trg.Table_Sin(playerID, 50 * v.P_LoopSub1[playerID], 50 + 10 * v.P_LoopSub1[playerID])
                # (Line 159) trg.Table_Cos(playerID, 50 * v.P_LoopSub1[playerID], 50 + 10 * v.P_LoopSub1[playerID]);
                trg.Table_Cos(playerID, 50 * v.P_LoopSub1[playerID], 50 + 10 * v.P_LoopSub1[playerID])
                # (Line 161) trg.Shape_Square(playerID, 16, "Rhynadon (Badlands)", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 16, "Rhynadon (Badlands)", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 162) KillUnitAt(All, "Rhynadon (Badlands)", "Anywhere", playerID);
                # (Line 164) trg.Sub1_Wait(80);
                DoActions(KillUnitAt(All, "Rhynadon (Badlands)", "Anywhere", playerID))
                trg.Sub1_Wait(80)
                # (Line 166) v.P_LoopSub1[playerID] += 1;
                _ARRW(v.P_LoopSub1, playerID).__iadd__(1)
                # (Line 167) }
                # (Line 168) }
            EUDEndIf()
            # (Line 169) if (v.P_CountMain[playerID] == 3)
        EUDEndIf()
        if EUDIf()(v.P_CountMain[playerID] == 3):
            # (Line 170) {
            # (Line 171) if (v.P_LoopSub1[playerID] == 0)
            if EUDIf()(v.P_LoopSub1[playerID] == 0):
                # (Line 172) {
                # (Line 173) RemoveUnitAt(All, "130 + 1n Norad", "Anywhere", playerID);
                # (Line 174) trg.Shape_NxNSquare(playerID, 1, "130 + 1n Norad", 3, 75);
                DoActions(RemoveUnitAt(All, "130 + 1n Norad", "Anywhere", playerID))
                trg.Shape_NxNSquare(playerID, 1, "130 + 1n Norad", 3, 75)
                # (Line 175) Order("130 + 1n Norad", playerID, "Anywhere", Attack, "Anywhere");
                # (Line 176) trg.Shape_NxNSquare(playerID, 1, "50 + 1n Tank", 3, 75);
                DoActions(Order("130 + 1n Norad", playerID, "Anywhere", Attack, "Anywhere"))
                trg.Shape_NxNSquare(playerID, 1, "50 + 1n Tank", 3, 75)
                # (Line 177) KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID);
                # (Line 179) trg.Sub1_Wait(80);
                DoActions(KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID))
                trg.Sub1_Wait(80)
                # (Line 181) v.P_LoopSub1[playerID] = 0;
                _ARRW(v.P_LoopSub1, playerID) << (0)
                # (Line 182) }
                # (Line 183) }
            EUDEndIf()
            # (Line 184) }
        EUDEndIf()
        # (Line 185) }
    EUDEndIf()
