## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _RELIMP(path, mod_name):
    import inspect, pathlib, importlib.util
    p = pathlib.Path(inspect.getabsfile(inspect.currentframe())).parent
    for s in path.split("."):
        if s == "":  p = p.parent
        else:  p = p / s
    try:
        spec = importlib.util.spec_from_file_location(mod_name, p / (mod_name + ".py"))
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
    except FileNotFoundError:
        loader = EPSLoader(mod_name, str(p / (mod_name + ".eps")))
        spec = importlib.util.spec_from_loader(mod_name, loader)
        module = loader.create_module(spec)
        loader.exec_module(module)
    return module

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 5) const s = StringBuffer();
s = _CGFW(lambda: [StringBuffer()], 1)[0]
# (Line 7) function main(playerID)
# (Line 8) {
@EUDFunc
def f_main(playerID):
    # (Line 9) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 10) {
        # (Line 11) if (v.P_CountMain[playerID] < 4)
        if EUDIf()(v.P_CountMain[playerID] >= 4, neg=True):
            # (Line 12) {
            # (Line 13) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
            # (Line 15) v.P_Distance[playerID] = 50;
            DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
            _ARRW(v.P_Distance, playerID) << (50)
            # (Line 17) trg.Table_Cos(playerID, 45 * v.P_CountMain[playerID], v.P_Distance[playerID]);
            trg.Table_Cos(playerID, 45 * v.P_CountMain[playerID], v.P_Distance[playerID])
            # (Line 18) trg.Table_Sin(playerID, 45 * v.P_CountMain[playerID], v.P_Distance[playerID]);
            trg.Table_Sin(playerID, 45 * v.P_CountMain[playerID], v.P_Distance[playerID])
            # (Line 20) trg.Shape_Square(playerID, 1, "Protoss Dark Templar", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID, 1, "Protoss Dark Templar", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
            # (Line 21) trg.MoveLoc(v.P_UnitID[playerID], playerID, v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            trg.MoveLoc(v.P_UnitID[playerID], playerID, v.P_AngleCos[playerID], v.P_AngleSin[playerID])
            # (Line 22) trg.SkillUnit(playerID, 1, "40 + 1n Mojo");
            trg.SkillUnit(playerID, 1, "40 + 1n Mojo")
            # (Line 23) trg.MoveLoc(v.P_UnitID[playerID], playerID, -v.P_AngleCos[playerID], -v.P_AngleSin[playerID]);
            trg.MoveLoc(v.P_UnitID[playerID], playerID, -v.P_AngleCos[playerID], -v.P_AngleSin[playerID])
            # (Line 24) trg.SkillUnit(playerID, 1, "40 + 1n Mojo");
            trg.SkillUnit(playerID, 1, "40 + 1n Mojo")
            # (Line 26) KillUnitAt(All, "Protoss Dark Templar", "Anywhere", playerID);
            # (Line 27) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
            DoActions(KillUnitAt(All, "Protoss Dark Templar", "Anywhere", playerID))
            # (Line 28) Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
            # (Line 30) trg.Main_Wait(160);
            DoActions(Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
            trg.Main_Wait(160)
            # (Line 31) v.P_CountMain[playerID] += 1;
            _ARRW(v.P_CountMain, playerID).__iadd__(1)
            # (Line 32) }
            # (Line 33) else if (v.P_CountMain[playerID] == 4)
        if EUDElseIf()(v.P_CountMain[playerID] == 4):
            # (Line 34) {
            # (Line 35) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
            # (Line 37) trg.Table_Cos(playerID, 0, v.P_Distance[playerID]);
            DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
            trg.Table_Cos(playerID, 0, v.P_Distance[playerID])
            # (Line 38) trg.Table_Sin(playerID, 0, v.P_Distance[playerID]);
            trg.Table_Sin(playerID, 0, v.P_Distance[playerID])
            # (Line 40) trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
            # (Line 42) trg.Table_Cos(playerID, 45, v.P_Distance[playerID]);
            trg.Table_Cos(playerID, 45, v.P_Distance[playerID])
            # (Line 43) trg.Table_Sin(playerID, 45, v.P_Distance[playerID]);
            trg.Table_Sin(playerID, 45, v.P_Distance[playerID])
            # (Line 45) trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID, 1, "Kakaru (Twilight)", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
            # (Line 47) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
            # (Line 49) trg.Main_Wait(50);
            DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
            trg.Main_Wait(50)
            # (Line 50) v.P_CountMain[playerID] += 1;
            _ARRW(v.P_CountMain, playerID).__iadd__(1)
            # (Line 51) }
            # (Line 52) else if (v.P_CountMain[playerID] == 5)
        if EUDElseIf()(v.P_CountMain[playerID] == 5):
            # (Line 53) {
            # (Line 54) v.P_Distance[playerID] = 75;
            _ARRW(v.P_Distance, playerID) << (75)
            # (Line 56) trg.Table_Cos(playerID, 0, v.P_Distance[playerID]);
            trg.Table_Cos(playerID, 0, v.P_Distance[playerID])
            # (Line 57) trg.Table_Sin(playerID, 0, v.P_Distance[playerID]);
            trg.Table_Sin(playerID, 0, v.P_Distance[playerID])
            # (Line 59) trg.Shape_Square(playerID, 1, "40 + 1n Guardian", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID, 1, "40 + 1n Guardian", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
            # (Line 61) trg.Table_Cos(playerID, 45, v.P_Distance[playerID]);
            trg.Table_Cos(playerID, 45, v.P_Distance[playerID])
            # (Line 62) trg.Table_Sin(playerID, 45, v.P_Distance[playerID]);
            trg.Table_Sin(playerID, 45, v.P_Distance[playerID])
            # (Line 64) trg.Shape_Square(playerID, 1, "40 + 1n Guardian", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID, 1, "40 + 1n Guardian", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
            # (Line 66) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
            # (Line 68) trg.Main_Wait(50);
            DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
            trg.Main_Wait(50)
            # (Line 69) v.P_CountMain[playerID] += 1;
            _ARRW(v.P_CountMain, playerID).__iadd__(1)
            # (Line 70) }
            # (Line 71) else if (v.P_CountMain[playerID] == 6)
        if EUDElseIf()(v.P_CountMain[playerID] == 6):
            # (Line 72) {
            # (Line 73) v.P_Distance[playerID] = 50;
            _ARRW(v.P_Distance, playerID) << (50)
            # (Line 74) trg.Table_Cos(playerID, 0, v.P_Distance[playerID]);
            trg.Table_Cos(playerID, 0, v.P_Distance[playerID])
            # (Line 75) trg.Table_Sin(playerID, 0, v.P_Distance[playerID]);
            trg.Table_Sin(playerID, 0, v.P_Distance[playerID])
            # (Line 77) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID, 1, "40 + 1n Mojo", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
            # (Line 79) trg.Table_Cos(playerID, 45, v.P_Distance[playerID]);
            trg.Table_Cos(playerID, 45, v.P_Distance[playerID])
            # (Line 80) trg.Table_Sin(playerID, 45, v.P_Distance[playerID]);
            trg.Table_Sin(playerID, 45, v.P_Distance[playerID])
            # (Line 82) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID, 1, "40 + 1n Mojo", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
            # (Line 84) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
            # (Line 85) Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
            # (Line 87) trg.Main_Wait(160);
            DoActions(Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
            trg.Main_Wait(160)
            # (Line 88) v.P_CountMain[playerID] += 1;
            _ARRW(v.P_CountMain, playerID).__iadd__(1)
            # (Line 89) }
            # (Line 90) else if (v.P_CountMain[playerID] == 7)
        if EUDElseIf()(v.P_CountMain[playerID] == 7):
            # (Line 91) {
            # (Line 92) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
            # (Line 94) trg.Main_Wait(80);
            DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
            trg.Main_Wait(80)
            # (Line 95) v.P_CountMain[playerID] += 1;
            _ARRW(v.P_CountMain, playerID).__iadd__(1)
            # (Line 96) }
            # (Line 97) else if (v.P_CountMain[playerID] == 8)
        if EUDElseIf()(v.P_CountMain[playerID] == 8):
            # (Line 98) {
            # (Line 99) trg.SkillEnd();
            trg.SkillEnd()
            # (Line 100) }
            # (Line 101) }
        EUDEndIf()
        # (Line 102) }
    EUDEndIf()
