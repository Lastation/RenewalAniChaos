## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _RELIMP(path, mod_name):
    import inspect, pathlib, importlib.util
    p = pathlib.Path(inspect.getabsfile(inspect.currentframe())).parent
    for s in path.split("."):
        if s == "":  p = p.parent
        else:  p = p / s
    try:
        spec = importlib.util.spec_from_file_location(mod_name, p / (mod_name + ".py"))
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
    except FileNotFoundError:
        loader = EPSLoader(mod_name, str(p / (mod_name + ".eps")))
        spec = importlib.util.spec_from_loader(mod_name, loader)
        module = loader.create_module(spec)
        loader.exec_module(module)
    return module

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 4) import func.sound as s;
from func import sound as s
# (Line 6) function main(playerID)
# (Line 7) {
@EUDFunc
def f_main(playerID):
    # (Line 8) trg.Debuff_Stop();
    trg.Debuff_Stop()
    # (Line 9) trg.Debuff_BanReturn();
    trg.Debuff_BanReturn()
    # (Line 10) MoveLocation("24.Nanami_Bozo", v.P_UnitID[playerID], playerID, "Anywhere");
    # (Line 12) if (v.P_WaitMain[playerID] == 0)
    DoActions(MoveLocation("24.Nanami_Bozo", v.P_UnitID[playerID], playerID, "Anywhere"))
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 13) {
        # (Line 14) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 15) {
            # (Line 16) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 17) {
                # (Line 18) if (playerID < 3) SetSwitch("Passive - Nanami1", Set);
                if EUDIf()(playerID >= 3, neg=True):
                    # (Line 19) else SetSwitch("Passive - Nanami2", Set);
                    DoActions(SetSwitch("Passive - Nanami1", Set))
                if EUDElse()():
                    # (Line 21) trg.Shape_Edge(playerID, 1, "60 + 1n High Templar", 45, 5, 100);
                    DoActions(SetSwitch("Passive - Nanami2", Set))
                EUDEndIf()
                trg.Shape_Edge(playerID, 1, "60 + 1n High Templar", 45, 5, 100)
                # (Line 22) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
                # (Line 24) trg.Main_Wait(320);
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
                trg.Main_Wait(320)
                # (Line 26) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 27) }
                # (Line 28) else if (v.P_LoopMain[playerID] == 1)
            if EUDElseIf()(v.P_LoopMain[playerID] == 1):
                # (Line 29) {
                # (Line 30) trg.Shape_Edge(playerID, 1, "60 + 1n High Templar", 0, 5, 100);
                trg.Shape_Edge(playerID, 1, "60 + 1n High Templar", 0, 5, 100)
                # (Line 31) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
                # (Line 33) trg.Main_Wait(320);
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
                trg.Main_Wait(320)
                # (Line 35) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 36) }
                # (Line 37) else if (v.P_LoopMain[playerID] == 2)
            if EUDElseIf()(v.P_LoopMain[playerID] == 2):
                # (Line 38) {
                # (Line 39) trg.Shape_Edge(playerID, 1, "60 + 1n High Templar", 45, 5, 150);
                trg.Shape_Edge(playerID, 1, "60 + 1n High Templar", 45, 5, 150)
                # (Line 40) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
                # (Line 42) trg.Main_Wait(320);
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
                trg.Main_Wait(320)
                # (Line 44) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 45) }
                # (Line 46) else if (v.P_LoopMain[playerID] == 3)
            if EUDElseIf()(v.P_LoopMain[playerID] == 3):
                # (Line 47) {
                # (Line 48) trg.Shape_Edge(playerID, 1, "60 + 1n High Templar", 0, 5, 150);
                trg.Shape_Edge(playerID, 1, "60 + 1n High Templar", 0, 5, 150)
                # (Line 49) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
                # (Line 51) trg.Main_Wait(320);
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
                trg.Main_Wait(320)
                # (Line 53) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 54) }
                # (Line 55) else if (v.P_LoopMain[playerID] == 4)
            if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                # (Line 56) {
                # (Line 57) trg.Table_Sin(playerID, 22, 75);
                trg.Table_Sin(playerID, 22, 75)
                # (Line 58) trg.Table_Cos(playerID, 22, 75);
                trg.Table_Cos(playerID, 22, 75)
                # (Line 60) trg.Shape_Square(playerID, 1, "60 + 1n High Templar", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "60 + 1n High Templar", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 61) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 62) MoveUnit(All, "60 + 1n High Templar", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 63) Order("60 + 1n High Templar", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "60 + 1n High Templar", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 65) trg.Main_Wait(160);
                DoActions(Order("60 + 1n High Templar", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(160)
                # (Line 67) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 68) }
                # (Line 69) else if (v.P_LoopMain[playerID] == 5)
            if EUDElseIf()(v.P_LoopMain[playerID] == 5):
                # (Line 70) {
                # (Line 71) trg.Table_Sin(playerID, 67, 150);
                trg.Table_Sin(playerID, 67, 150)
                # (Line 72) trg.Table_Cos(playerID, 67, 150);
                trg.Table_Cos(playerID, 67, 150)
                # (Line 74) trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 75) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 76) MoveUnit(All, "60 + 1n Dragoon", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 77) Order("60 + 1n Dragoon", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "60 + 1n Dragoon", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 79) trg.Main_Wait(160);
                DoActions(Order("60 + 1n Dragoon", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(160)
                # (Line 81) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 82) }
                # (Line 83) else if (v.P_LoopMain[playerID] == 6)
            if EUDElseIf()(v.P_LoopMain[playerID] == 6):
                # (Line 84) {
                # (Line 85) trg.Shape_Edge(playerID, 1, "100 + 1n Dragoon", 45, 5, 150);
                trg.Shape_Edge(playerID, 1, "100 + 1n Dragoon", 45, 5, 150)
                # (Line 86) KillUnitAt(All, "100 + 1n Dragoon", "Anywhere", playerID);
                # (Line 88) trg.Table_Sin(playerID, 22, 225);
                DoActions(KillUnitAt(All, "100 + 1n Dragoon", "Anywhere", playerID))
                trg.Table_Sin(playerID, 22, 225)
                # (Line 89) trg.Table_Cos(playerID, 22, 225);
                trg.Table_Cos(playerID, 22, 225)
                # (Line 91) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "40 + 1n Mojo", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 92) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 93) Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 95) trg.Main_Wait(160);
                DoActions(Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(160)
                # (Line 97) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 98) }
                # (Line 99) else if (v.P_LoopMain[playerID] == 7)
            if EUDElseIf()(v.P_LoopMain[playerID] == 7):
                # (Line 100) {
                # (Line 101) trg.Shape_Edge(playerID, 1, "100 + 1n Dragoon", 0, 5, 150);
                trg.Shape_Edge(playerID, 1, "100 + 1n Dragoon", 0, 5, 150)
                # (Line 102) KillUnitAt(All, "100 + 1n Dragoon", "Anywhere", playerID);
                # (Line 104) trg.Table_Sin(playerID, 22, 275);
                DoActions(KillUnitAt(All, "100 + 1n Dragoon", "Anywhere", playerID))
                trg.Table_Sin(playerID, 22, 275)
                # (Line 105) trg.Table_Cos(playerID, 22, 275);
                trg.Table_Cos(playerID, 22, 275)
                # (Line 107) trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 108) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 109) Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 111) trg.Main_Wait(1120);
                DoActions(Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(1120)
                # (Line 113) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 114) }
                # (Line 115) else if (v.P_LoopMain[playerID] == 8)
            if EUDElseIf()(v.P_LoopMain[playerID] == 8):
                # (Line 116) {
                # (Line 117) trg.Main_Wait(80);
                trg.Main_Wait(80)
                # (Line 119) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 120) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 121) }
                # (Line 122) }
            EUDEndIf()
            # (Line 123) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 124) {
            # (Line 125) if (v.P_LoopMain[playerID] < 14)
            if EUDIf()(v.P_LoopMain[playerID] >= 14, neg=True):
                # (Line 126) {
                # (Line 127) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
                # (Line 129) if ((v.P_LoopMain[playerID] / 4) % 2 == 0)
                DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                if EUDIf()((v.P_LoopMain[playerID] // 4) % 2 == 0):
                    # (Line 130) {
                    # (Line 131) trg.Shape_Dot(playerID, 1, "40 + 1n Wraith", 160 - 40 * (v.P_LoopMain[playerID] % 4) , 40 * (v.P_LoopMain[playerID] % 4));
                    trg.Shape_Dot(playerID, 1, "40 + 1n Wraith", 160 - 40 * (v.P_LoopMain[playerID] % 4), 40 * (v.P_LoopMain[playerID] % 4))
                    # (Line 132) trg.Shape_Dot(playerID, 1, "40 + 1n Wraith", -160 + 40 * (v.P_LoopMain[playerID] % 4), -40 * (v.P_LoopMain[playerID] % 4));
                    trg.Shape_Dot(playerID, 1, "40 + 1n Wraith", -160 + 40 * (v.P_LoopMain[playerID] % 4), -40 * (v.P_LoopMain[playerID] % 4))
                    # (Line 133) }
                    # (Line 134) else if ((v.P_LoopMain[playerID] / 4) % 2 == 1)
                if EUDElseIf()((v.P_LoopMain[playerID] // 4) % 2 == 1):
                    # (Line 135) {
                    # (Line 136) trg.Shape_Dot(playerID, 1, "40 + 1n Wraith", -40 * (v.P_LoopMain[playerID] % 4), 160 - 40 * (v.P_LoopMain[playerID] % 4));
                    trg.Shape_Dot(playerID, 1, "40 + 1n Wraith", -40 * (v.P_LoopMain[playerID] % 4), 160 - 40 * (v.P_LoopMain[playerID] % 4))
                    # (Line 137) trg.Shape_Dot(playerID, 1, "40 + 1n Wraith", 40 * (v.P_LoopMain[playerID] % 4), -160 + 40 * (v.P_LoopMain[playerID] % 4));
                    trg.Shape_Dot(playerID, 1, "40 + 1n Wraith", 40 * (v.P_LoopMain[playerID] % 4), -160 + 40 * (v.P_LoopMain[playerID] % 4))
                    # (Line 138) }
                    # (Line 140) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                EUDEndIf()
                # (Line 141) Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 143) trg.Main_Wait(320);
                DoActions(Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(320)
                # (Line 145) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 146) }
                # (Line 147) else if (v.P_LoopMain[playerID] == 14)
            if EUDElseIf()(v.P_LoopMain[playerID] == 14):
                # (Line 148) {
                # (Line 149) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
                # (Line 151) s.CharacterVoice(5);
                DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                s.CharacterVoice(5)
                # (Line 153) trg.Main_Wait(80);
                trg.Main_Wait(80)
                # (Line 155) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 156) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 157) }
                # (Line 158) }
            EUDEndIf()
            # (Line 159) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 160) {
            # (Line 161) if (v.P_LoopMain[playerID] < 8)
            if EUDIf()(v.P_LoopMain[playerID] >= 8, neg=True):
                # (Line 162) {
                # (Line 163) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
                # (Line 165) if ((v.P_LoopMain[playerID] / 4) % 2 == 0)
                DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                if EUDIf()((v.P_LoopMain[playerID] // 4) % 2 == 0):
                    # (Line 166) {
                    # (Line 167) trg.Shape_Dot(playerID, 1, "40 + 1n Wraith", 160 - 40 * (v.P_LoopMain[playerID] % 4) , 40 * (v.P_LoopMain[playerID] % 4));
                    trg.Shape_Dot(playerID, 1, "40 + 1n Wraith", 160 - 40 * (v.P_LoopMain[playerID] % 4), 40 * (v.P_LoopMain[playerID] % 4))
                    # (Line 168) trg.Shape_Dot(playerID, 1, "40 + 1n Wraith", -160 + 40 * (v.P_LoopMain[playerID] % 4), -40 * (v.P_LoopMain[playerID] % 4));
                    trg.Shape_Dot(playerID, 1, "40 + 1n Wraith", -160 + 40 * (v.P_LoopMain[playerID] % 4), -40 * (v.P_LoopMain[playerID] % 4))
                    # (Line 169) }
                    # (Line 170) else if ((v.P_LoopMain[playerID] / 4) % 2 == 1)
                if EUDElseIf()((v.P_LoopMain[playerID] // 4) % 2 == 1):
                    # (Line 171) {
                    # (Line 172) trg.Shape_Dot(playerID, 1, "40 + 1n Wraith", -40 * (v.P_LoopMain[playerID] % 4), 160 - 40 * (v.P_LoopMain[playerID] % 4));
                    trg.Shape_Dot(playerID, 1, "40 + 1n Wraith", -40 * (v.P_LoopMain[playerID] % 4), 160 - 40 * (v.P_LoopMain[playerID] % 4))
                    # (Line 173) trg.Shape_Dot(playerID, 1, "40 + 1n Wraith", 40 * (v.P_LoopMain[playerID] % 4), -160 + 40 * (v.P_LoopMain[playerID] % 4));
                    trg.Shape_Dot(playerID, 1, "40 + 1n Wraith", 40 * (v.P_LoopMain[playerID] % 4), -160 + 40 * (v.P_LoopMain[playerID] % 4))
                    # (Line 174) }
                    # (Line 176) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                EUDEndIf()
                # (Line 177) Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 179) trg.Main_Wait(320);
                DoActions(Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(320)
                # (Line 181) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 182) }
                # (Line 183) else if (v.P_LoopMain[playerID] == 8)
            if EUDElseIf()(v.P_LoopMain[playerID] == 8):
                # (Line 184) {
                # (Line 185) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);
                # (Line 187) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 189) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 190) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 191) }
                # (Line 192) }
            EUDEndIf()
            # (Line 194) else if (Bring(playerID, AtLeast, 3, "Protoss Carrier", "[Skill]UseSkill")
        _t23 = EUDElseIf()
        # (Line 195) && v.P_CountMain[playerID] == 3)
        if _t23(EUDSCAnd()(Bring(playerID, AtLeast, 3, "Protoss Carrier", "[Skill]UseSkill"))(v.P_CountMain[playerID] == 3)()):
            # (Line 196) {
            # (Line 197) s.CharacterVoice(6);
            s.CharacterVoice(6)
            # (Line 198) v.P_SkillDelay[playerID] = 0;
            _ARRW(v.P_SkillDelay, playerID) << (0)
            # (Line 199) v.P_CountMain[playerID] = 0;
            _ARRW(v.P_CountMain, playerID) << (0)
            # (Line 200) v.P_LoopMain[playerID] = 0;
            _ARRW(v.P_LoopMain, playerID) << (0)
            # (Line 201) v.P_Step[playerID] = 240;
            _ARRW(v.P_Step, playerID) << (240)
            # (Line 204) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
            # (Line 205) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
            # (Line 206) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
            # (Line 207) KillUnitAt(All, "60 + 1n Dragoon", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
            # (Line 208) SetSwitch("Passive - Nanami1", Clear);
            DoActions(KillUnitAt(All, "60 + 1n Dragoon", "Anywhere", playerID))
            # (Line 209) SetSwitch("Passive - Nanami2", Clear);
            DoActions(SetSwitch("Passive - Nanami1", Clear))
            # (Line 211) KillUnitAt(3, "Protoss Carrier", "[Skill]UseSkill", playerID);
            DoActions(SetSwitch("Passive - Nanami2", Clear))
            # (Line 212) }
            DoActions(KillUnitAt(3, "Protoss Carrier", "[Skill]UseSkill", playerID))
            # (Line 214) else if (v.P_CountMain[playerID] == 3)
        if EUDElseIf()(v.P_CountMain[playerID] == 3):
            # (Line 215) {
            # (Line 216) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
            # (Line 217) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
            # (Line 218) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
            # (Line 219) KillUnitAt(All, "60 + 1n Dragoon", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
            # (Line 220) SetSwitch("Passive - Nanami1", Clear);
            DoActions(KillUnitAt(All, "60 + 1n Dragoon", "Anywhere", playerID))
            # (Line 221) SetSwitch("Passive - Nanami2", Clear);
            DoActions(SetSwitch("Passive - Nanami1", Clear))
            # (Line 223) trg.SkillEnd();
            DoActions(SetSwitch("Passive - Nanami2", Clear))
            trg.SkillEnd()
            # (Line 224) }
            # (Line 225) }
        EUDEndIf()
        # (Line 226) if (v.P_WaitSub1[playerID] == 0)
    EUDEndIf()
    if EUDIf()(v.P_WaitSub1[playerID] == 0):
        # (Line 227) {
        # (Line 228) if (v.P_CountMain[playerID] < 3)
        if EUDIf()(v.P_CountMain[playerID] >= 3, neg=True):
            # (Line 229) {
            # (Line 230) if (v.P_CountSub1[playerID] == 0)
            if EUDIf()(v.P_CountSub1[playerID] == 0):
                # (Line 231) {
                # (Line 232) trg.Shape_Square(playerID, 1, "60 + 1n High Templar", 75, 75);
                trg.Shape_Square(playerID, 1, "60 + 1n High Templar", 75, 75)
                # (Line 234) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
                # (Line 236) trg.Sub1_Wait(160);
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
                trg.Sub1_Wait(160)
                # (Line 238) v.P_CountSub1[playerID] += 1;
                _ARRW(v.P_CountSub1, playerID).__iadd__(1)
                # (Line 239) }
                # (Line 240) else if (v.P_CountSub1[playerID] == 1)
            if EUDElseIf()(v.P_CountSub1[playerID] == 1):
                # (Line 241) {
                # (Line 242) trg.Shape_Square(playerID, 1, "60 + 1n Archon", 150, 0);
                trg.Shape_Square(playerID, 1, "60 + 1n Archon", 150, 0)
                # (Line 244) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                # (Line 246) trg.Sub1_Wait(160);
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                trg.Sub1_Wait(160)
                # (Line 248) v.P_CountSub1[playerID] += 1;
                _ARRW(v.P_CountSub1, playerID).__iadd__(1)
                # (Line 249) }
                # (Line 250) else if (v.P_CountSub1[playerID] == 2)
            if EUDElseIf()(v.P_CountSub1[playerID] == 2):
                # (Line 251) {
                # (Line 252) trg.Shape_Square(playerID, 1, "Protoss Dark Archon", 150, 75);
                trg.Shape_Square(playerID, 1, "Protoss Dark Archon", 150, 75)
                # (Line 254) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 256) trg.Sub1_Wait(160);
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                trg.Sub1_Wait(160)
                # (Line 258) v.P_CountSub1[playerID] += 1;
                _ARRW(v.P_CountSub1, playerID).__iadd__(1)
                # (Line 259) }
                # (Line 260) else if (v.P_CountSub1[playerID] == 3)
            if EUDElseIf()(v.P_CountSub1[playerID] == 3):
                # (Line 261) {
                # (Line 262) trg.Shape_Square(playerID, 1, "60 + 1n Archon", 150, 150);
                trg.Shape_Square(playerID, 1, "60 + 1n Archon", 150, 150)
                # (Line 264) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                # (Line 266) trg.Sub1_Wait(160);
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                trg.Sub1_Wait(160)
                # (Line 268) v.P_CountSub1[playerID] += 1;
                _ARRW(v.P_CountSub1, playerID).__iadd__(1)
                # (Line 269) }
                # (Line 270) else if (v.P_CountSub1[playerID] == 4)
            if EUDElseIf()(v.P_CountSub1[playerID] == 4):
                # (Line 271) {
                # (Line 272) trg.Shape_Square(playerID, 1, "Protoss Dark Archon", 75, 150);
                trg.Shape_Square(playerID, 1, "Protoss Dark Archon", 75, 150)
                # (Line 274) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                # (Line 276) trg.Sub1_Wait(160);
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                trg.Sub1_Wait(160)
                # (Line 278) v.P_CountSub1[playerID] = 0;
                _ARRW(v.P_CountSub1, playerID) << (0)
                # (Line 279) }
                # (Line 280) }
            EUDEndIf()
            # (Line 281) }
        EUDEndIf()
        # (Line 282) if (v.P_WaitSub2[playerID] == 0)
    EUDEndIf()
    if EUDIf()(v.P_WaitSub2[playerID] == 0):
        # (Line 283) {
        # (Line 284) if (v.P_CountMain[playerID] < 2 && v.P_CountMain[playerID] > 0)
        if EUDIf()(EUDSCAnd()(v.P_CountMain[playerID] >= 2, neg=True)(v.P_CountMain[playerID] <= 0, neg=True)()):
            # (Line 285) {
            # (Line 286) if (v.P_CountSub2[playerID] == 8) v.P_CountSub2[playerID] = 0;
            if EUDIf()(v.P_CountSub2[playerID] == 8):
                _ARRW(v.P_CountSub2, playerID) << (0)
                # (Line 287) if (v.P_CountSub2[playerID] < 4)
            EUDEndIf()
            if EUDIf()(v.P_CountSub2[playerID] >= 4, neg=True):
                # (Line 288) {
                # (Line 289) trg.Shape_Dot(playerID, 1, " Unit. Schnee", 160 - 40 * v.P_CountSub2[playerID], 40 * v.P_CountSub2[playerID]);
                trg.Shape_Dot(playerID, 1, " Unit. Schnee", 160 - 40 * v.P_CountSub2[playerID], 40 * v.P_CountSub2[playerID])
                # (Line 290) trg.Shape_Dot(playerID, 1, " Unit. Schnee", -160 + 40 * v.P_CountSub2[playerID], -40 * v.P_CountSub2[playerID]);
                trg.Shape_Dot(playerID, 1, " Unit. Schnee", -160 + 40 * v.P_CountSub2[playerID], -40 * v.P_CountSub2[playerID])
                # (Line 291) trg.Shape_Dot(playerID, 1, "40 + 1n Zealot", -40 * v.P_CountSub2[playerID], 160 - 40 * v.P_CountSub2[playerID]);
                trg.Shape_Dot(playerID, 1, "40 + 1n Zealot", -40 * v.P_CountSub2[playerID], 160 - 40 * v.P_CountSub2[playerID])
                # (Line 292) trg.Shape_Dot(playerID, 1, "40 + 1n Zealot", 40 * v.P_CountSub2[playerID], -160 + 40 * v.P_CountSub2[playerID]);
                trg.Shape_Dot(playerID, 1, "40 + 1n Zealot", 40 * v.P_CountSub2[playerID], -160 + 40 * v.P_CountSub2[playerID])
                # (Line 294) KillUnitAt(All, " Unit. Schnee", "Anywhere", playerID);
                # (Line 295) KillUnitAt(All, "40 + 1n Zealot", "Anywhere", playerID);
                DoActions(KillUnitAt(All, " Unit. Schnee", "Anywhere", playerID))
                # (Line 297) trg.Sub2_Wait(320);
                DoActions(KillUnitAt(All, "40 + 1n Zealot", "Anywhere", playerID))
                trg.Sub2_Wait(320)
                # (Line 299) v.P_CountSub2[playerID] += 1;
                _ARRW(v.P_CountSub2, playerID).__iadd__(1)
                # (Line 300) }
                # (Line 301) else if (v.P_CountSub2[playerID] < 8)
            if EUDElseIf()(v.P_CountSub2[playerID] >= 8, neg=True):
                # (Line 302) {
                # (Line 303) trg.Shape_Dot(playerID, 1, " Unit. Schnee", -40 * (v.P_CountSub2[playerID] - 4), 160 - 40 * (v.P_CountSub2[playerID] - 4));
                trg.Shape_Dot(playerID, 1, " Unit. Schnee", -40 * (v.P_CountSub2[playerID] - 4), 160 - 40 * (v.P_CountSub2[playerID] - 4))
                # (Line 304) trg.Shape_Dot(playerID, 1, " Unit. Schnee", 40 * (v.P_CountSub2[playerID] - 4), -160 + 40 * (v.P_CountSub2[playerID] - 4));
                trg.Shape_Dot(playerID, 1, " Unit. Schnee", 40 * (v.P_CountSub2[playerID] - 4), -160 + 40 * (v.P_CountSub2[playerID] - 4))
                # (Line 305) trg.Shape_Dot(playerID, 1, "40 + 1n Zealot", 160 - 40 * (v.P_CountSub2[playerID] - 4), 40 * (v.P_CountSub2[playerID] - 4));
                trg.Shape_Dot(playerID, 1, "40 + 1n Zealot", 160 - 40 * (v.P_CountSub2[playerID] - 4), 40 * (v.P_CountSub2[playerID] - 4))
                # (Line 306) trg.Shape_Dot(playerID, 1, "40 + 1n Zealot", -160 + 40 * (v.P_CountSub2[playerID] - 4), -40 * (v.P_CountSub2[playerID] - 4));
                trg.Shape_Dot(playerID, 1, "40 + 1n Zealot", -160 + 40 * (v.P_CountSub2[playerID] - 4), -40 * (v.P_CountSub2[playerID] - 4))
                # (Line 308) KillUnitAt(All, " Unit. Schnee", "Anywhere", playerID);
                # (Line 309) KillUnitAt(All, "40 + 1n Zealot", "Anywhere", playerID);
                DoActions(KillUnitAt(All, " Unit. Schnee", "Anywhere", playerID))
                # (Line 311) trg.Sub2_Wait(320);
                DoActions(KillUnitAt(All, "40 + 1n Zealot", "Anywhere", playerID))
                trg.Sub2_Wait(320)
                # (Line 313) v.P_CountSub2[playerID] += 1;
                _ARRW(v.P_CountSub2, playerID).__iadd__(1)
                # (Line 314) }
                # (Line 315) }
            EUDEndIf()
            # (Line 316) else if (v.P_CountMain[playerID] < 3 && v.P_CountMain[playerID] > 1)
        if EUDElseIf()(EUDSCAnd()(v.P_CountMain[playerID] >= 3, neg=True)(v.P_CountMain[playerID] <= 1, neg=True)()):
            # (Line 317) {
            # (Line 318) if (v.P_CountSub2[playerID] == 8) v.P_CountSub2[playerID] = 0;
            if EUDIf()(v.P_CountSub2[playerID] == 8):
                _ARRW(v.P_CountSub2, playerID) << (0)
                # (Line 319) if (v.P_CountSub2[playerID] < 4)
            EUDEndIf()
            if EUDIf()(v.P_CountSub2[playerID] >= 4, neg=True):
                # (Line 320) {
                # (Line 321) trg.Shape_Dot(playerID, 1, " Unit. Hoffnung 25000", 160 - 40 * v.P_CountSub2[playerID], 40 * v.P_CountSub2[playerID]);
                trg.Shape_Dot(playerID, 1, " Unit. Hoffnung 25000", 160 - 40 * v.P_CountSub2[playerID], 40 * v.P_CountSub2[playerID])
                # (Line 322) trg.Shape_Dot(playerID, 1, " Unit. Hoffnung 25000", -160 + 40 * v.P_CountSub2[playerID], -40 * v.P_CountSub2[playerID]);
                trg.Shape_Dot(playerID, 1, " Unit. Hoffnung 25000", -160 + 40 * v.P_CountSub2[playerID], -40 * v.P_CountSub2[playerID])
                # (Line 323) trg.Shape_Dot(playerID, 1, "100 + 1n Dragoon", -40 * v.P_CountSub2[playerID], 160 - 40 * v.P_CountSub2[playerID]);
                trg.Shape_Dot(playerID, 1, "100 + 1n Dragoon", -40 * v.P_CountSub2[playerID], 160 - 40 * v.P_CountSub2[playerID])
                # (Line 324) trg.Shape_Dot(playerID, 1, "100 + 1n Dragoon", 40 * v.P_CountSub2[playerID], -160 + 40 * v.P_CountSub2[playerID]);
                trg.Shape_Dot(playerID, 1, "100 + 1n Dragoon", 40 * v.P_CountSub2[playerID], -160 + 40 * v.P_CountSub2[playerID])
                # (Line 326) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
                # (Line 327) KillUnitAt(All, "100 + 1n Dragoon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
                # (Line 329) trg.Sub2_Wait(320);
                DoActions(KillUnitAt(All, "100 + 1n Dragoon", "Anywhere", playerID))
                trg.Sub2_Wait(320)
                # (Line 331) v.P_CountSub2[playerID] += 1;
                _ARRW(v.P_CountSub2, playerID).__iadd__(1)
                # (Line 332) }
                # (Line 333) else if (v.P_CountSub2[playerID] < 8)
            if EUDElseIf()(v.P_CountSub2[playerID] >= 8, neg=True):
                # (Line 334) {
                # (Line 335) trg.Shape_Dot(playerID, 1, " Unit. Hoffnung 25000", -40 * (v.P_CountSub2[playerID] - 4), 160 - 40 * (v.P_CountSub2[playerID] - 4));
                trg.Shape_Dot(playerID, 1, " Unit. Hoffnung 25000", -40 * (v.P_CountSub2[playerID] - 4), 160 - 40 * (v.P_CountSub2[playerID] - 4))
                # (Line 336) trg.Shape_Dot(playerID, 1, " Unit. Hoffnung 25000", 40 * (v.P_CountSub2[playerID] - 4), -160 + 40 * (v.P_CountSub2[playerID] - 4));
                trg.Shape_Dot(playerID, 1, " Unit. Hoffnung 25000", 40 * (v.P_CountSub2[playerID] - 4), -160 + 40 * (v.P_CountSub2[playerID] - 4))
                # (Line 337) trg.Shape_Dot(playerID, 1, "100 + 1n Dragoon", 160 - 40 * (v.P_CountSub2[playerID] - 4), 40 * (v.P_CountSub2[playerID] - 4));
                trg.Shape_Dot(playerID, 1, "100 + 1n Dragoon", 160 - 40 * (v.P_CountSub2[playerID] - 4), 40 * (v.P_CountSub2[playerID] - 4))
                # (Line 338) trg.Shape_Dot(playerID, 1, "100 + 1n Dragoon", -160 + 40 * (v.P_CountSub2[playerID] - 4), -40 * (v.P_CountSub2[playerID] - 4));
                trg.Shape_Dot(playerID, 1, "100 + 1n Dragoon", -160 + 40 * (v.P_CountSub2[playerID] - 4), -40 * (v.P_CountSub2[playerID] - 4))
                # (Line 340) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
                # (Line 341) KillUnitAt(All, "100 + 1n Dragoon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
                # (Line 343) trg.Sub2_Wait(320);
                DoActions(KillUnitAt(All, "100 + 1n Dragoon", "Anywhere", playerID))
                trg.Sub2_Wait(320)
                # (Line 345) v.P_CountSub2[playerID] += 1;
                _ARRW(v.P_CountSub2, playerID).__iadd__(1)
                # (Line 346) }
                # (Line 347) }
            EUDEndIf()
            # (Line 350) }
        EUDEndIf()
        # (Line 351) }
    EUDEndIf()
