## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import variable as v;
import variable as v
# (Line 2) import func.trig as trg;
from func import trig as trg
# (Line 4) const P_player		= PVariable();
P_player = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 5) const P_observer 	= PVariable();
P_observer = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 7) function Text(num);
# (Line 9) function player(playerID)
# (Line 10) {
@EUDFunc
def f_player(playerID):
    # (Line 11) Text(P_player[playerID]);
    Text(P_player[playerID])
    # (Line 12) P_player[playerID] = 0;
    _ARRW(P_player, playerID) << (0)
    # (Line 13) }
    # (Line 15) function observer(playerID)

# (Line 16) {
@EUDFunc
def f_observer(playerID):
    # (Line 17) Text(P_observer[playerID - 128]);
    Text(P_observer[playerID - 128])
    # (Line 18) P_observer[playerID - 128] = 0;
    _ARRW(P_observer, playerID - 128) << (0)
    # (Line 19) }
    # (Line 21) function main(playerID)

# (Line 22) {
@EUDFunc
def f_main(playerID):
    # (Line 23) if (playerID < 6) 	{ player(playerID); 	}
    if EUDIf()(playerID >= 6, neg=True):
        f_player(playerID)
        # (Line 24) else  			{ observer(playerID); }
    if EUDElse()():
        f_observer(playerID)
        # (Line 25) }
    EUDEndIf()
    # (Line 27) function Text(num)

# (Line 28) {
@EUDFunc
def Text(num):
    # (Line 29) switch (num)
    EUDSwitch(num)
    # (Line 30) {
    # (Line 31) case 1:
    _t1 = EUDSwitchCase()
    # (Line 32) PlayWAV("Nanami_01.ogg");
    if _t1(1):
        # (Line 33) v.stb.print("\x13\x1BNanami Chiaki\n");
        DoActions(PlayWAV("Nanami_01.ogg"))
        v.stb.print("\x13\x1BNanami Chiaki\n")
        # (Line 34) v.stb.print("\x13\x04아, 떠올랐다! ...일 지도 몰라\x04\n");
        v.stb.print("\x13\x04아, 떠올랐다! ...일 지도 몰라\x04\n")
        # (Line 35) break;
        EUDBreak()
        # (Line 36) case 2:
    _t2 = EUDSwitchCase()
    # (Line 37) PlayWAV("Nanami_02.ogg");
    if _t2(2):
        # (Line 38) v.stb.print("\x13\x1BNanami Chiaki\n");
        DoActions(PlayWAV("Nanami_02.ogg"))
        v.stb.print("\x13\x1BNanami Chiaki\n")
        # (Line 39) v.stb.print("\x13\x04너희들에겐 그런 걸 뛰어넘을 수 있는 어마어마한 필살기가 있잖아\x04\n");
        v.stb.print("\x13\x04너희들에겐 그런 걸 뛰어넘을 수 있는 어마어마한 필살기가 있잖아\x04\n")
        # (Line 40) break;
        EUDBreak()
        # (Line 41) case 3:
    _t3 = EUDSwitchCase()
    # (Line 42) PlayWAV("Nanami_03.ogg");
    if _t3(3):
        # (Line 43) v.stb.print("\x13\x1ANanami Chiaki\n");
        DoActions(PlayWAV("Nanami_03.ogg"))
        v.stb.print("\x13\x1ANanami Chiaki\n")
        # (Line 44) v.stb.print("\x13\x04바로, 하면 어떻게든 된다 같은 거 말이야\x04\n");
        v.stb.print("\x13\x04바로, 하면 어떻게든 된다 같은 거 말이야\x04\n")
        # (Line 45) break;
        EUDBreak()
        # (Line 46) case 4:
    _t4 = EUDSwitchCase()
    # (Line 47) PlayWAV("Nanami_04.ogg");
    if _t4(4):
        # (Line 48) v.stb.print("\x13\x1ANanami Chiaki\n");
        DoActions(PlayWAV("Nanami_04.ogg"))
        v.stb.print("\x13\x1ANanami Chiaki\n")
        # (Line 49) v.stb.print("\x13\x04그것이 어떤 미래라도 해도, 너희들이 계속 나아가는 한 나는 사라지지 않아\x04\n");
        v.stb.print("\x13\x04그것이 어떤 미래라도 해도, 너희들이 계속 나아가는 한 나는 사라지지 않아\x04\n")
        # (Line 50) break;
        EUDBreak()
        # (Line 51) case 5:
    _t5 = EUDSwitchCase()
    # (Line 52) v.stb.print("\x13\x1ANanami Chiaki\n");
    if _t5(5):
        v.stb.print("\x13\x1ANanami Chiaki\n")
        # (Line 53) v.stb.print("\x13\x04이곳에서의 일들도... 무의미했던 게 아니야\x04\n");
        v.stb.print("\x13\x04이곳에서의 일들도... 무의미했던 게 아니야\x04\n")
        # (Line 54) break;
        EUDBreak()
        # (Line 55) case 6:
    _t6 = EUDSwitchCase()
    # (Line 56) PlayWAV("Nanami_05.ogg");
    if _t6(6):
        # (Line 57) v.stb.print("\x13\x1ANanami Chiaki\n");
        DoActions(PlayWAV("Nanami_05.ogg"))
        v.stb.print("\x13\x1ANanami Chiaki\n")
        # (Line 58) v.stb.print("\x13\x04희망도 절망도 짊어진 너희들이라면, 분명 미래도 만들 수 있을 거야\x04\n");
        v.stb.print("\x13\x04희망도 절망도 짊어진 너희들이라면, 분명 미래도 만들 수 있을 거야\x04\n")
        # (Line 59) break;
        EUDBreak()
        # (Line 60) case 7:
    _t7 = EUDSwitchCase()
    # (Line 61) v.stb.print("\x13\x1ANanami Chiaki\n");
    if _t7(7):
        v.stb.print("\x13\x1ANanami Chiaki\n")
        # (Line 62) v.stb.print("\x13\x04편한 기적 같은 것도 한다면 어떻게든 될 거야\x04\n");
        v.stb.print("\x13\x04편한 기적 같은 것도 한다면 어떻게든 될 거야\x04\n")
        # (Line 63) break;
        EUDBreak()
        # (Line 64) case 8:
    _t8 = EUDSwitchCase()
    # (Line 65) PlayWAV("Nanami_06.ogg");
    if _t8(8):
        # (Line 66) v.stb.print("\x13\x1ANanami Chiaki\n");
        DoActions(PlayWAV("Nanami_06.ogg"))
        v.stb.print("\x13\x1ANanami Chiaki\n")
        # (Line 67) v.stb.print("\x13\x04그러니까, 어중간하게 머뭇거리지 말고, 모든 걸 버릴 각오로 진심을 담아서 해 줘!\x04\n");
        v.stb.print("\x13\x04그러니까, 어중간하게 머뭇거리지 말고, 모든 걸 버릴 각오로 진심을 담아서 해 줘!\x04\n")
        # (Line 68) break;
        EUDBreak()
        # (Line 69) case 9:
    _t9 = EUDSwitchCase()
    # (Line 70) v.stb.print("\x13\x1ANanami Chiaki\n");
    if _t9(9):
        v.stb.print("\x13\x1ANanami Chiaki\n")
        # (Line 71) v.stb.print("\x13\x04나도... 응원할테니까 말이야...\x04\n");
        v.stb.print("\x13\x04나도... 응원할테니까 말이야...\x04\n")
        # (Line 72) break;
        EUDBreak()
        # (Line 73) case 10:
    _t10 = EUDSwitchCase()
    # (Line 74) PlayWAV("Nanami_Unique.ogg");
    if _t10(10):
        # (Line 75) v.stb.print("\x13\x1ANanami Chiaki\n");
        DoActions(PlayWAV("Nanami_Unique.ogg"))
        v.stb.print("\x13\x1ANanami Chiaki\n")
        # (Line 76) v.stb.print("\x13\x04나 혼자선 무리니까... 모두 힘을 합쳐서 생각해보자\x04\n");
        v.stb.print("\x13\x04나 혼자선 무리니까... 모두 힘을 합쳐서 생각해보자\x04\n")
        # (Line 77) v.stb.print("\x13\x04지금까지도.. 그렇게 극복해왔으니까\x04\n");
        v.stb.print("\x13\x04지금까지도.. 그렇게 극복해왔으니까\x04\n")
        # (Line 78) break;
        EUDBreak()
        # (Line 79) case 11:
    _t11 = EUDSwitchCase()
    # (Line 80) PlayWAV("Nanami_Ult01.ogg");
    if _t11(11):
        # (Line 81) v.stb.print("\x13\x1ANanami Chiaki\n");
        DoActions(PlayWAV("Nanami_Ult01.ogg"))
        v.stb.print("\x13\x1ANanami Chiaki\n")
        # (Line 82) v.stb.print("\x13\x04나야 말로... 고마워\x04\n");
        v.stb.print("\x13\x04나야 말로... 고마워\x04\n")
        # (Line 83) break;
        EUDBreak()
        # (Line 84) case 12:
    _t12 = EUDSwitchCase()
    # (Line 85) v.stb.print("\x13\x1ANanami Chiaki\n");
    if _t12(12):
        v.stb.print("\x13\x1ANanami Chiaki\n")
        # (Line 86) v.stb.print("\x13\x04모두를... 잊지 않을게\x04\n");
        v.stb.print("\x13\x04모두를... 잊지 않을게\x04\n")
        # (Line 87) break;
        EUDBreak()
        # (Line 88) case 13:
    _t13 = EUDSwitchCase()
    # (Line 89) v.stb.print("\x13\x1ANanami Chiaki\n");
    if _t13(13):
        v.stb.print("\x13\x1ANanami Chiaki\n")
        # (Line 90) v.stb.print("\x13\x04계속 계속... 잊지 않을게\x04\n");
        v.stb.print("\x13\x04계속 계속... 잊지 않을게\x04\n")
        # (Line 91) break;
        EUDBreak()
        # (Line 92) case 14:
    _t14 = EUDSwitchCase()
    # (Line 93) v.stb.print("\x13\x1ANanami Chiaki\n");
    if _t14(14):
        v.stb.print("\x13\x1ANanami Chiaki\n")
        # (Line 94) v.stb.print("\x13\x04이 앞으로도... 어딘가에서 모두를 응원하고 있을게\x04\n");
        v.stb.print("\x13\x04이 앞으로도... 어딘가에서 모두를 응원하고 있을게\x04\n")
        # (Line 95) break;
        EUDBreak()
        # (Line 96) case 15:
    _t15 = EUDSwitchCase()
    # (Line 97) v.stb.print("\x13\x1ANanami Chiaki\n");
    if _t15(15):
        v.stb.print("\x13\x1ANanami Chiaki\n")
        # (Line 98) v.stb.print("\x13\x04그야... 우린 계속 동료니까\x04\n");
        v.stb.print("\x13\x04그야... 우린 계속 동료니까\x04\n")
        # (Line 99) break;
        EUDBreak()
        # (Line 100) case 16:
    _t16 = EUDSwitchCase()
    # (Line 101) PlayWAV("Nanami_Ult02.ogg");
    if _t16(16):
        # (Line 102) v.stb.print("\x13\x1ANanami Chiaki\n");
        DoActions(PlayWAV("Nanami_Ult02.ogg"))
        v.stb.print("\x13\x1ANanami Chiaki\n")
        # (Line 103) v.stb.print("\x13\x04어이! 언제까지 머뭇거리고 있을 거야! 가슴 펼 수 있는 자신이 되고 싶었던 거 아니야?\x04\n");
        v.stb.print("\x13\x04어이! 언제까지 머뭇거리고 있을 거야! 가슴 펼 수 있는 자신이 되고 싶었던 거 아니야?\x04\n")
        # (Line 104) v.stb.print("\x13\x04그래서, 키보가미네 학원을 동경했던거 아니야?\x04\n");
        v.stb.print("\x13\x04그래서, 키보가미네 학원을 동경했던거 아니야?\x04\n")
        # (Line 105) break;
        EUDBreak()
        # (Line 106) }
    # (Line 107) }
    EUDEndSwitch()
