## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 5) import character.group4.nanami.common.skill1 as O;
from character.group4.nanami.common import skill1 as O
# (Line 6) import character.group4.nanami.common.skill2 as S;
from character.group4.nanami.common import skill2 as S
# (Line 7) import character.group4.nanami.common.skill3 as C;
from character.group4.nanami.common import skill3 as C
# (Line 8) import character.group4.nanami.common.skill4 as A;
from character.group4.nanami.common import skill4 as A
# (Line 10) import character.group4.nanami.combo.combo1 as SSS;
from character.group4.nanami.combo import combo1 as SSS
# (Line 11) import character.group4.nanami.combo.combo2 as ACC;
from character.group4.nanami.combo import combo2 as ACC
# (Line 12) import character.group4.nanami.combo.combo3 as ACCCA;
from character.group4.nanami.combo import combo3 as ACCCA
# (Line 13) import character.group4.nanami.combo.combo4 as CCC;
from character.group4.nanami.combo import combo4 as CCC
# (Line 14) import character.group4.nanami.combo.combo5 as CCCAA;
from character.group4.nanami.combo import combo5 as CCCAA
# (Line 15) import character.group4.nanami.combo.combo6 as CCCAAAA;
from character.group4.nanami.combo import combo6 as CCCAAAA
# (Line 17) import character.group4.nanami.ultimate.ultimate1 as CCCAAAAO;
from character.group4.nanami.ultimate import ultimate1 as CCCAAAAO
# (Line 18) import character.group4.nanami.ultimate.ultimate2 as AAA;
from character.group4.nanami.ultimate import ultimate2 as AAA
# (Line 20) import character.group4.nanami.text as text;
from character.group4.nanami import text as text
# (Line 21) import character.group4.nanami.commend as commend;
from character.group4.nanami import commend as commend
# (Line 23) function SkillList(playerID);
# (Line 25) function main(playerID)
# (Line 26) {
@EUDFunc
def f_main(playerID):
    # (Line 27) v.P_HeroID[playerID] = 24;
    _ARRW(v.P_HeroID, playerID) << (24)
    # (Line 28) v.P_LocationID[playerID] = 185;
    _ARRW(v.P_LocationID, playerID) << (185)
    # (Line 29) v.P_UnitID[playerID] = 64;
    _ARRW(v.P_UnitID, playerID) << (64)
    # (Line 31) v.P_Ultimate1[playerID] = 650;
    _ARRW(v.P_Ultimate1, playerID) << (650)
    # (Line 32) v.P_Ultimate2[playerID] = 450;
    _ARRW(v.P_Ultimate2, playerID) << (450)
    # (Line 34) SkillList(playerID);
    SkillList(playerID)
    # (Line 35) commend.main(playerID);
    commend.f_main(playerID)
    # (Line 37) if (v.P_SkillDelay[playerID] == 0)
    if EUDIf()(v.P_SkillDelay[playerID] == 0):
        # (Line 38) {
        # (Line 39) switch(v.P_Step[playerID])
        EUDSwitch(v.P_Step[playerID])
        # (Line 40) {
        # (Line 41) case 1:
        _t2 = EUDSwitchCase()
        # (Line 42) O.main(playerID);
        if _t2(1):
            O.f_main(playerID)
            # (Line 43) break;
            EUDBreak()
            # (Line 44) case 100:
        _t3 = EUDSwitchCase()
        # (Line 45) S.main(playerID);
        if _t3(100):
            S.f_main(playerID)
            # (Line 46) break;
            EUDBreak()
            # (Line 47) case 200:
        _t4 = EUDSwitchCase()
        # (Line 48) C.main(playerID);
        if _t4(200):
            C.f_main(playerID)
            # (Line 49) break;
            EUDBreak()
            # (Line 50) case 300:
        _t5 = EUDSwitchCase()
        # (Line 51) A.main(playerID);
        if _t5(300):
            A.f_main(playerID)
            # (Line 52) break;
            EUDBreak()
            # (Line 53) case 110:
        _t6 = EUDSwitchCase()
        # (Line 54) SSS.main(playerID);
        if _t6(110):
            SSS.f_main(playerID)
            # (Line 55) break;
            EUDBreak()
            # (Line 56) case 210:
        _t7 = EUDSwitchCase()
        # (Line 57) ACC.main(playerID);
        if _t7(210):
            ACC.f_main(playerID)
            # (Line 58) break;
            EUDBreak()
            # (Line 59) case 220:
        _t8 = EUDSwitchCase()
        # (Line 60) ACCCA.main(playerID);
        if _t8(220):
            ACCCA.f_main(playerID)
            # (Line 61) break;
            EUDBreak()
            # (Line 62) case 230:
        _t9 = EUDSwitchCase()
        # (Line 63) CCC.main(playerID);
        if _t9(230):
            CCC.f_main(playerID)
            # (Line 64) break;
            EUDBreak()
            # (Line 65) case 240:
        _t10 = EUDSwitchCase()
        # (Line 66) CCCAA.main(playerID);
        if _t10(240):
            CCCAA.f_main(playerID)
            # (Line 67) break;
            EUDBreak()
            # (Line 68) case 250:
        _t11 = EUDSwitchCase()
        # (Line 69) CCCAAAA.main(playerID);
        if _t11(250):
            CCCAAAA.f_main(playerID)
            # (Line 70) break;
            EUDBreak()
            # (Line 71) case 260:
        _t12 = EUDSwitchCase()
        # (Line 72) CCCAAAAO.main(playerID);
        if _t12(260):
            CCCAAAAO.f_main(playerID)
            # (Line 73) break;
            EUDBreak()
            # (Line 74) case 310:
        _t13 = EUDSwitchCase()
        # (Line 75) AAA.main(playerID);
        if _t13(310):
            AAA.f_main(playerID)
            # (Line 76) break;
            EUDBreak()
            # (Line 77) }
        # (Line 78) }
        EUDEndSwitch()
        # (Line 79) }
    EUDEndIf()
    # (Line 81) function SkillList(playerID)

# (Line 82) {
@EUDFunc
def SkillList(playerID):
    # (Line 83) if(Memory(0x00596A44, Exactly, 256)) 	// Insert key Pressed
    if EUDIf()(Memory(0x00596A44, Exactly, 256)):
        # (Line 84) {
        # (Line 85) v.stb.printAt(0, "\n");
        v.stb.printAt(0, "\n")
        # (Line 86) v.stb.printAt(1, "\x1F　＃\x1B- 나나미 치아키　\x04[ 단간론파 ]");
        v.stb.printAt(1, "\x1F　＃\x1B- 나나미 치아키　\x04[ 단간론파 ]")
        # (Line 87) v.stb.printAt(2, "　　\x1FA\x04ction List");
        v.stb.printAt(2, "　　\x1FA\x04ction List")
        # (Line 88) v.stb.printAt(3, "　　　\x17Passive \x04초고교급 게이머 \x19[ 아군 마나 회복 증가 +5 ]");
        v.stb.printAt(3, "　　　\x17Passive \x04초고교급 게이머 \x19[ 아군 마나 회복 증가 +5 ]")
        # (Line 89) v.stb.printAt(4, "　　　\x18O \x04모두의 힘 \x19[ 1분 간 아군 공 방 증가 +5 ] \x053분");
        v.stb.printAt(4, "　　　\x18O \x04모두의 힘 \x19[ 1분 간 아군 공 방 증가 +5 ] \x053분")
        # (Line 90) v.stb.printAt(5, "　　　\x04\x1FSSS \x04발상 \x19[ 만능 ]");
        v.stb.printAt(5, "　　　\x04\x1FSSS \x04발상 \x19[ 만능 ]")
        # (Line 91) v.stb.printAt(6, "　　　\x04\x1FACC+ CA \x04필살기 \x19[ 만능 / 자리고정 ]");
        v.stb.printAt(6, "　　　\x04\x1FACC+ CA \x04필살기 \x19[ 만능 / 자리고정 ]")
        # (Line 92) v.stb.printAt(7, "　　　\x04\x1FCCC + CCC + AA \x04응원 \x19[ 공성 / CCC + CCC - 자리고정 / 15 x 15 아군 공 방 증가 +5 ] \x1F[1]");
        v.stb.printAt(7, "　　　\x04\x1FCCC + CCC + AA \x04응원 \x19[ 공성 / CCC + CCC - 자리고정 / 15 x 15 아군 공 방 증가 +5 ] \x1F[1]")
        # (Line 93) v.stb.printAt(8, "\n");
        v.stb.printAt(8, "\n")
        # (Line 94) v.stb.printAt(9, "　　　\x1F[1] + \x08O \x04클래스메이트 \x19[ 공성 / 자리고정 ] \x05", v.P_Ultimate1[playerID]);
        v.stb.printAt(9, "　　　\x1F[1] + \x08O \x04클래스메이트 \x19[ 공성 / 자리고정 ] \x05", v.P_Ultimate1[playerID])
        # (Line 95) v.stb.printAt(10, "　　　\x08AAA \x04격려 \x19[ 서포트 / 아군 궁게이지 +250 ] \x05", v.P_Ultimate2[playerID]);
        v.stb.printAt(10, "　　　\x08AAA \x04격려 \x19[ 서포트 / 아군 궁게이지 +250 ] \x05", v.P_Ultimate2[playerID])
        # (Line 96) PlayWAV("sound\\Bullet\\LaserHit.wav");
        # (Line 97) }
        DoActions(PlayWAV("sound\\Bullet\\LaserHit.wav"))
        # (Line 98) }
    EUDEndIf()
