import PluginVariables as msqcvar;
import variable as v;
import func.trig as trg;
import func.sound as s;

function main(playerID)
{
   MoveUnit(All, "50 + 1n Battlecruiser", playerID, "Anywhere", "[Skill]HoldPosition");
   trg.Buff_ShieldFix(20);

   if (v.P_CountMain[playerID] < 2)
   {
      SetAllianceStatus(P7, Ally);
      SetAllianceStatus(P8, Ally);
   }

   if (v.P_WaitMain[playerID] == 0)
   {
      if (v.P_CountMain[playerID] == 0)
      {
         if (v.P_LoopMain[playerID] < 12)
         {    
            SetSwitch("ComputerAlliy", Set);

            SetDeaths(playerID, SetTo, 1, " `ShieldRecharge");

            KillUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID);

            trg.Table_Sin(playerID, (30 * v.P_LoopMain[playerID]), 160);
            trg.Table_Cos(playerID, (30 * v.P_LoopMain[playerID]), 160); 

            trg.Shape_Square(playerID, 1, "60 + 3n Siege", 120 + v.P_AngleCos[playerID], 120 + v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID, 16, "80 + 1n Vulture", 120 + v.P_AngleCos[playerID], 120 + v.P_AngleSin[playerID]);
            GiveUnits(All, "60 + 3n Siege", playerID, "Anywhere", P9);

            MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
            MoveUnit(All, "80 + 1n Vulture", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
            Order("80 + 1n Vulture", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);

            trg.Main_Wait(80);

            v.P_LoopMain[playerID] += 1;
         }
         else if (v.P_LoopMain[playerID] == 12)
         {       
            KillUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID);

            trg.Main_Wait(640);

            v.P_CountMain[playerID] += 1;
            v.P_LoopMain[playerID] = 0;
         }
      }
      else if (v.P_CountMain[playerID] == 1)
      {
         if (v.P_LoopMain[playerID] < 12)
         {    
            KillUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID);

            trg.Table_Sin(playerID, (30 * v.P_LoopMain[playerID]), 160);
            trg.Table_Cos(playerID, (30 * v.P_LoopMain[playerID]), 160); 

            trg.Shape_Square(playerID, 1, "60 + 3n Siege", 160 + v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID, 16, "80 + 1n Vulture", 160 + v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            GiveUnits(All, "60 + 3n Siege", playerID, "Anywhere", P9);

            MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
            MoveUnit(All, "80 + 1n Vulture", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
            Order("80 + 1n Vulture", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);

            trg.Main_Wait(80);

            v.P_LoopMain[playerID] += 1;
         }
         else if (v.P_LoopMain[playerID] == 12)
         {       
            KillUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID);

            trg.Main_Wait(560);

            v.P_LoopMain[playerID] += 1;
         }
         else if (v.P_LoopMain[playerID] == 13)
         {       
            s.CharacterVoice(11);

            trg.Main_Wait(80);

            v.P_CountMain[playerID] += 1;
            v.P_LoopMain[playerID] = 0;
         }

      }
      else if (v.P_CountMain[playerID] == 2)
      {
         if (v.P_LoopMain[playerID] < 12)
         {    
            SetSwitch("ComputerAlliy", Clear);

            if (playerID < 3)
            {
               SetAllianceStatus(P8, Enemy);
            }
            else
            {
               SetAllianceStatus(P7, Enemy);
            }

            KillUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID);

            trg.Table_Sin(playerID, (30 * v.P_LoopMain[playerID]), 160);
            trg.Table_Cos(playerID, (30 * v.P_LoopMain[playerID]), 160); 

            trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", 120 + v.P_AngleCos[playerID], 120 + v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID, 8, "80 + 1n Vulture", 120 + v.P_AngleCos[playerID], 120 + v.P_AngleSin[playerID]);

            MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
            MoveUnit(All, "80 + 1n Vulture", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
            Order("80 + 1n Vulture", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);

            trg.Main_Wait(80);

            v.P_LoopMain[playerID] += 1;
         }
         else if (v.P_LoopMain[playerID] == 12)
         {       
            KillUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID);

            trg.Main_Wait(1760);

            v.P_LoopMain[playerID] += 1;
         }
         else if (v.P_LoopMain[playerID] == 13)
         {       
            s.CharacterVoice(12);

            trg.Main_Wait(80);

            v.P_CountMain[playerID] += 1;
            v.P_LoopMain[playerID] = 0;
         }
      }
      else if (v.P_CountMain[playerID] == 3)
      {
         if (v.P_LoopMain[playerID] < 12)
         {    
            KillUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID);

            trg.Table_Sin(playerID, (30 * v.P_LoopMain[playerID]), 160);
            trg.Table_Cos(playerID, (30 * v.P_LoopMain[playerID]), 160); 

            trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", 160 + v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID, 8, "80 + 1n Vulture", 160 + v.P_AngleCos[playerID], v.P_AngleSin[playerID]);

            MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
            MoveUnit(All, "80 + 1n Vulture", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
            Order("80 + 1n Vulture", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
            Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);

            trg.Main_Wait(80);

            v.P_LoopMain[playerID] += 1;
         }
         else if (v.P_LoopMain[playerID] == 12)
         {       
            KillUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID);

            trg.Main_Wait(560);

            v.P_LoopMain[playerID] += 1;
         }
         else if (v.P_LoopMain[playerID] == 13)
         {       
            trg.Main_Wait(1440);

            v.P_CountMain[playerID] += 1;
            v.P_LoopMain[playerID] = 0;
         }

      }
      else if (v.P_CountMain[playerID] == 4)
      {
         if (Bring(playerID, AtLeast, 2, "Protoss Arbiter", "[Skill]UseSkill")
         && v.P_UltimateGauge[playerID] >= v.P_Ultimate2[playerID])
         {
            if (Switch("UiltimateSwitch", Cleared))
            {
               SetSwitch("UiltimateSwitch", Set);
               CreateUnit(1, " Item. Flag", "[Uiltimate]Flag", CurrentPlayer);
               s.CharacterVoice(13);
               v.P_SkillDelay[playerID] = 0;
               v.P_CountMain[playerID] = 0;
               v.P_LoopMain[playerID] = 0;
               v.P_Step[playerID] = 330;
               SetDeaths(playerID, Subtract, v.P_Ultimate2[playerID], " `UltimateCoolTime");
               KillUnitAt(2, "Protoss Arbiter", "[Skill]UseSkill", playerID);
            }
            else
            {
               SetResources(CurrentPlayer, Add, 600, Gas);
               KillUnitAt(2, "Protoss Arbiter", "[Skill]UseSkill", playerID);
               SetDeaths(CurrentPlayer, SetTo, 999, " `SYSTEMTEXT");
               KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
               KillUnitAt(All, "60 + 3n Siege", "Anywhere", P9);
               
               trg.SkillEnd();
            }
         }
         else 
         {
            
            KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
            KillUnitAt(All, "60 + 3n Siege", "Anywhere", P9);
            trg.SkillEnd();
         }



      }
   }
}