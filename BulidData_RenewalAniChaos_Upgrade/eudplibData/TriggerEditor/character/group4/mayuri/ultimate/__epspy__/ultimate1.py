## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 4) import func.sound as s;
from func import sound as s
# (Line 6) function main(playerID)
# (Line 7) {
@EUDFunc
def f_main(playerID):
    # (Line 8) MoveUnit(All, "50 + 1n Battlecruiser", playerID, "Anywhere", "[Skill]HoldPosition");
    # (Line 9) trg.Buff_ShieldFix(20);
    DoActions(MoveUnit(All, "50 + 1n Battlecruiser", playerID, "Anywhere", "[Skill]HoldPosition"))
    trg.Buff_ShieldFix(20)
    # (Line 11) if (v.P_CountMain[playerID] < 2)
    if EUDIf()(v.P_CountMain[playerID] >= 2, neg=True):
        # (Line 12) {
        # (Line 13) SetAllianceStatus(P7, Ally);
        # (Line 14) SetAllianceStatus(P8, Ally);
        DoActions(SetAllianceStatus(P7, Ally))
        # (Line 15) }
        DoActions(SetAllianceStatus(P8, Ally))
        # (Line 17) if (v.P_WaitMain[playerID] == 0)
    EUDEndIf()
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 18) {
        # (Line 19) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 20) {
            # (Line 21) if (v.P_LoopMain[playerID] < 12)
            if EUDIf()(v.P_LoopMain[playerID] >= 12, neg=True):
                # (Line 22) {
                # (Line 23) SetSwitch("ComputerAlliy", Set);
                # (Line 25) SetDeaths(playerID, SetTo, 1, " `ShieldRecharge");
                DoActions(SetSwitch("ComputerAlliy", Set))
                # (Line 27) KillUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID);
                DoActions(SetDeaths(playerID, SetTo, 1, " `ShieldRecharge"))
                # (Line 29) trg.Table_Sin(playerID, (30 * v.P_LoopMain[playerID]), 160);
                DoActions(KillUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID))
                trg.Table_Sin(playerID, (30 * v.P_LoopMain[playerID]), 160)
                # (Line 30) trg.Table_Cos(playerID, (30 * v.P_LoopMain[playerID]), 160);
                trg.Table_Cos(playerID, (30 * v.P_LoopMain[playerID]), 160)
                # (Line 32) trg.Shape_Square(playerID, 1, "60 + 3n Siege", 120 + v.P_AngleCos[playerID], 120 + v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "60 + 3n Siege", 120 + v.P_AngleCos[playerID], 120 + v.P_AngleSin[playerID])
                # (Line 33) trg.Shape_Square(playerID, 16, "80 + 1n Vulture", 120 + v.P_AngleCos[playerID], 120 + v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 16, "80 + 1n Vulture", 120 + v.P_AngleCos[playerID], 120 + v.P_AngleSin[playerID])
                # (Line 34) GiveUnits(All, "60 + 3n Siege", playerID, "Anywhere", P9);
                # (Line 36) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(GiveUnits(All, "60 + 3n Siege", playerID, "Anywhere", P9))
                # (Line 37) MoveUnit(All, "80 + 1n Vulture", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 38) Order("80 + 1n Vulture", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "80 + 1n Vulture", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 40) trg.Main_Wait(80);
                DoActions(Order("80 + 1n Vulture", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(80)
                # (Line 42) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 43) }
                # (Line 44) else if (v.P_LoopMain[playerID] == 12)
            if EUDElseIf()(v.P_LoopMain[playerID] == 12):
                # (Line 45) {
                # (Line 46) KillUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID);
                # (Line 48) trg.Main_Wait(640);
                DoActions(KillUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID))
                trg.Main_Wait(640)
                # (Line 50) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 51) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 52) }
                # (Line 53) }
            EUDEndIf()
            # (Line 54) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 55) {
            # (Line 56) if (v.P_LoopMain[playerID] < 12)
            if EUDIf()(v.P_LoopMain[playerID] >= 12, neg=True):
                # (Line 57) {
                # (Line 58) KillUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID);
                # (Line 60) trg.Table_Sin(playerID, (30 * v.P_LoopMain[playerID]), 160);
                DoActions(KillUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID))
                trg.Table_Sin(playerID, (30 * v.P_LoopMain[playerID]), 160)
                # (Line 61) trg.Table_Cos(playerID, (30 * v.P_LoopMain[playerID]), 160);
                trg.Table_Cos(playerID, (30 * v.P_LoopMain[playerID]), 160)
                # (Line 63) trg.Shape_Square(playerID, 1, "60 + 3n Siege", 160 + v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "60 + 3n Siege", 160 + v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 64) trg.Shape_Square(playerID, 16, "80 + 1n Vulture", 160 + v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 16, "80 + 1n Vulture", 160 + v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 65) GiveUnits(All, "60 + 3n Siege", playerID, "Anywhere", P9);
                # (Line 67) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(GiveUnits(All, "60 + 3n Siege", playerID, "Anywhere", P9))
                # (Line 68) MoveUnit(All, "80 + 1n Vulture", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 69) Order("80 + 1n Vulture", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "80 + 1n Vulture", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 71) trg.Main_Wait(80);
                DoActions(Order("80 + 1n Vulture", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(80)
                # (Line 73) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 74) }
                # (Line 75) else if (v.P_LoopMain[playerID] == 12)
            if EUDElseIf()(v.P_LoopMain[playerID] == 12):
                # (Line 76) {
                # (Line 77) KillUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID);
                # (Line 79) trg.Main_Wait(560);
                DoActions(KillUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID))
                trg.Main_Wait(560)
                # (Line 81) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 82) }
                # (Line 83) else if (v.P_LoopMain[playerID] == 13)
            if EUDElseIf()(v.P_LoopMain[playerID] == 13):
                # (Line 84) {
                # (Line 85) s.CharacterVoice(11);
                s.CharacterVoice(11)
                # (Line 87) trg.Main_Wait(80);
                trg.Main_Wait(80)
                # (Line 89) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 90) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 91) }
                # (Line 93) }
            EUDEndIf()
            # (Line 94) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 95) {
            # (Line 96) if (v.P_LoopMain[playerID] < 12)
            if EUDIf()(v.P_LoopMain[playerID] >= 12, neg=True):
                # (Line 97) {
                # (Line 98) SetSwitch("ComputerAlliy", Clear);
                # (Line 100) if (playerID < 3)
                DoActions(SetSwitch("ComputerAlliy", Clear))
                if EUDIf()(playerID >= 3, neg=True):
                    # (Line 101) {
                    # (Line 102) SetAllianceStatus(P8, Enemy);
                    # (Line 103) }
                    DoActions(SetAllianceStatus(P8, Enemy))
                    # (Line 104) else
                    # (Line 105) {
                if EUDElse()():
                    # (Line 106) SetAllianceStatus(P7, Enemy);
                    # (Line 107) }
                    DoActions(SetAllianceStatus(P7, Enemy))
                    # (Line 109) KillUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID);
                EUDEndIf()
                # (Line 111) trg.Table_Sin(playerID, (30 * v.P_LoopMain[playerID]), 160);
                DoActions(KillUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID))
                trg.Table_Sin(playerID, (30 * v.P_LoopMain[playerID]), 160)
                # (Line 112) trg.Table_Cos(playerID, (30 * v.P_LoopMain[playerID]), 160);
                trg.Table_Cos(playerID, (30 * v.P_LoopMain[playerID]), 160)
                # (Line 114) trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", 120 + v.P_AngleCos[playerID], 120 + v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", 120 + v.P_AngleCos[playerID], 120 + v.P_AngleSin[playerID])
                # (Line 115) trg.Shape_Square(playerID, 8, "80 + 1n Vulture", 120 + v.P_AngleCos[playerID], 120 + v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 8, "80 + 1n Vulture", 120 + v.P_AngleCos[playerID], 120 + v.P_AngleSin[playerID])
                # (Line 117) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 118) MoveUnit(All, "80 + 1n Vulture", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 119) Order("80 + 1n Vulture", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "80 + 1n Vulture", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 120) Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(Order("80 + 1n Vulture", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 122) trg.Main_Wait(80);
                DoActions(Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(80)
                # (Line 124) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 125) }
                # (Line 126) else if (v.P_LoopMain[playerID] == 12)
            if EUDElseIf()(v.P_LoopMain[playerID] == 12):
                # (Line 127) {
                # (Line 128) KillUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID);
                # (Line 130) trg.Main_Wait(1760);
                DoActions(KillUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID))
                trg.Main_Wait(1760)
                # (Line 132) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 133) }
                # (Line 134) else if (v.P_LoopMain[playerID] == 13)
            if EUDElseIf()(v.P_LoopMain[playerID] == 13):
                # (Line 135) {
                # (Line 136) s.CharacterVoice(12);
                s.CharacterVoice(12)
                # (Line 138) trg.Main_Wait(80);
                trg.Main_Wait(80)
                # (Line 140) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 141) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 142) }
                # (Line 143) }
            EUDEndIf()
            # (Line 144) else if (v.P_CountMain[playerID] == 3)
        if EUDElseIf()(v.P_CountMain[playerID] == 3):
            # (Line 145) {
            # (Line 146) if (v.P_LoopMain[playerID] < 12)
            if EUDIf()(v.P_LoopMain[playerID] >= 12, neg=True):
                # (Line 147) {
                # (Line 148) KillUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID);
                # (Line 150) trg.Table_Sin(playerID, (30 * v.P_LoopMain[playerID]), 160);
                DoActions(KillUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID))
                trg.Table_Sin(playerID, (30 * v.P_LoopMain[playerID]), 160)
                # (Line 151) trg.Table_Cos(playerID, (30 * v.P_LoopMain[playerID]), 160);
                trg.Table_Cos(playerID, (30 * v.P_LoopMain[playerID]), 160)
                # (Line 153) trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", 160 + v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", 160 + v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 154) trg.Shape_Square(playerID, 8, "80 + 1n Vulture", 160 + v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
                trg.Shape_Square(playerID, 8, "80 + 1n Vulture", 160 + v.P_AngleCos[playerID], v.P_AngleSin[playerID])
                # (Line 156) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 157) MoveUnit(All, "80 + 1n Vulture", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 158) Order("80 + 1n Vulture", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "80 + 1n Vulture", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 159) Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(Order("80 + 1n Vulture", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 161) trg.Main_Wait(80);
                DoActions(Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(80)
                # (Line 163) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 164) }
                # (Line 165) else if (v.P_LoopMain[playerID] == 12)
            if EUDElseIf()(v.P_LoopMain[playerID] == 12):
                # (Line 166) {
                # (Line 167) KillUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID);
                # (Line 169) trg.Main_Wait(560);
                DoActions(KillUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID))
                trg.Main_Wait(560)
                # (Line 171) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 172) }
                # (Line 173) else if (v.P_LoopMain[playerID] == 13)
            if EUDElseIf()(v.P_LoopMain[playerID] == 13):
                # (Line 174) {
                # (Line 175) trg.Main_Wait(1440);
                trg.Main_Wait(1440)
                # (Line 177) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 178) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 179) }
                # (Line 181) }
            EUDEndIf()
            # (Line 182) else if (v.P_CountMain[playerID] == 4)
        if EUDElseIf()(v.P_CountMain[playerID] == 4):
            # (Line 183) {
            # (Line 184) if (Bring(playerID, AtLeast, 2, "Protoss Arbiter", "[Skill]UseSkill")
            _t20 = EUDIf()
            # (Line 185) && v.P_UltimateGauge[playerID] >= v.P_Ultimate2[playerID])
            if _t20(EUDSCAnd()(Bring(playerID, AtLeast, 2, "Protoss Arbiter", "[Skill]UseSkill"))(v.P_UltimateGauge[playerID] >= v.P_Ultimate2[playerID])()):
                # (Line 186) {
                # (Line 187) if (Switch("UiltimateSwitch", Cleared))
                if EUDIf()(Switch("UiltimateSwitch", Cleared)):
                    # (Line 188) {
                    # (Line 189) SetSwitch("UiltimateSwitch", Set);
                    # (Line 190) CreateUnit(1, " Item. Flag", "[Uiltimate]Flag", CurrentPlayer);
                    DoActions(SetSwitch("UiltimateSwitch", Set))
                    # (Line 191) s.CharacterVoice(13);
                    DoActions(CreateUnit(1, " Item. Flag", "[Uiltimate]Flag", CurrentPlayer))
                    s.CharacterVoice(13)
                    # (Line 192) v.P_SkillDelay[playerID] = 0;
                    _ARRW(v.P_SkillDelay, playerID) << (0)
                    # (Line 193) v.P_CountMain[playerID] = 0;
                    _ARRW(v.P_CountMain, playerID) << (0)
                    # (Line 194) v.P_LoopMain[playerID] = 0;
                    _ARRW(v.P_LoopMain, playerID) << (0)
                    # (Line 195) v.P_Step[playerID] = 330;
                    _ARRW(v.P_Step, playerID) << (330)
                    # (Line 196) SetDeaths(playerID, Subtract, v.P_Ultimate2[playerID], " `UltimateCoolTime");
                    # (Line 197) KillUnitAt(2, "Protoss Arbiter", "[Skill]UseSkill", playerID);
                    DoActions(SetDeaths(playerID, Subtract, v.P_Ultimate2[playerID], " `UltimateCoolTime"))
                    # (Line 198) }
                    DoActions(KillUnitAt(2, "Protoss Arbiter", "[Skill]UseSkill", playerID))
                    # (Line 199) else
                    # (Line 200) {
                if EUDElse()():
                    # (Line 201) SetResources(CurrentPlayer, Add, 600, Gas);
                    # (Line 202) KillUnitAt(2, "Protoss Arbiter", "[Skill]UseSkill", playerID);
                    DoActions(SetResources(CurrentPlayer, Add, 600, Gas))
                    # (Line 203) SetDeaths(CurrentPlayer, SetTo, 999, " `SYSTEMTEXT");
                    DoActions(KillUnitAt(2, "Protoss Arbiter", "[Skill]UseSkill", playerID))
                    # (Line 204) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                    DoActions(SetDeaths(CurrentPlayer, SetTo, 999, " `SYSTEMTEXT"))
                    # (Line 205) KillUnitAt(All, "60 + 3n Siege", "Anywhere", P9);
                    DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                    # (Line 207) trg.SkillEnd();
                    DoActions(KillUnitAt(All, "60 + 3n Siege", "Anywhere", P9))
                    trg.SkillEnd()
                    # (Line 208) }
                    # (Line 209) }
                EUDEndIf()
                # (Line 210) else
                # (Line 211) {
            if EUDElse()():
                # (Line 213) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 214) KillUnitAt(All, "60 + 3n Siege", "Anywhere", P9);
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                # (Line 215) trg.SkillEnd();
                DoActions(KillUnitAt(All, "60 + 3n Siege", "Anywhere", P9))
                trg.SkillEnd()
                # (Line 216) }
                # (Line 220) }
            EUDEndIf()
            # (Line 221) }
        EUDEndIf()
        # (Line 222) }
    EUDEndIf()
