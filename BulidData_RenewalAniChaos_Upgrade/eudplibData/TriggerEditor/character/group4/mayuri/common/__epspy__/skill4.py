## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import variable as v;
import variable as v
# (Line 2) import func.trig as trg;
from func import trig as trg
# (Line 4) function Shape(playerID : TrgPlayer, x, y);
# (Line 6) function main(playerID)
# (Line 7) {
@EUDFunc
def f_main(playerID):
    # (Line 8) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 9) {
        # (Line 10) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 11) {
            # (Line 12) if (v.P_LoopMain[playerID] == 0) Shape(playerID, 50, 50);
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                Shape(playerID, 50, 50)
                # (Line 13) else if (v.P_LoopMain[playerID] == 1) Shape(playerID, 0, 50);
            if EUDElseIf()(v.P_LoopMain[playerID] == 1):
                Shape(playerID, 0, 50)
                # (Line 14) else if (v.P_LoopMain[playerID] == 2) Shape(playerID, -50, 50);
            if EUDElseIf()(v.P_LoopMain[playerID] == 2):
                Shape(playerID, -50, 50)
                # (Line 15) else if (v.P_LoopMain[playerID] == 3) Shape(playerID, -50, 0);
            if EUDElseIf()(v.P_LoopMain[playerID] == 3):
                Shape(playerID, -50, 0)
                # (Line 18) trg.Main_Wait(160);
            EUDEndIf()
            trg.Main_Wait(160)
            # (Line 20) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 22) if (v.P_LoopMain[playerID] == 4)
            if EUDIf()(v.P_LoopMain[playerID] == 4):
                # (Line 23) {
                # (Line 24) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 25) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 26) }
                # (Line 27) }
            EUDEndIf()
            # (Line 28) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 29) {
            # (Line 30) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 31) {
                # (Line 32) KillUnitAt(All, " Creep. Dunkelheit", "Anywhere", playerID);
                # (Line 34) trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 0, 5, 100);
                DoActions(KillUnitAt(All, " Creep. Dunkelheit", "Anywhere", playerID))
                trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 0, 5, 100)
                # (Line 35) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                # (Line 37) trg.Main_Wait(160);
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                trg.Main_Wait(160)
                # (Line 38) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 39) }
                # (Line 40) else if (v.P_LoopMain[playerID] == 1)
            if EUDElseIf()(v.P_LoopMain[playerID] == 1):
                # (Line 41) {
                # (Line 42) trg.Shape_Edge(playerID, 1, "60 + 1n Danimoth", 0, 5, 100);
                trg.Shape_Edge(playerID, 1, "60 + 1n Danimoth", 0, 5, 100)
                # (Line 43) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                # (Line 44) trg.Shape_Edge(playerID, 1, "40 + 1n Goliath", 0, 3, 100);
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                trg.Shape_Edge(playerID, 1, "40 + 1n Goliath", 0, 3, 100)
                # (Line 46) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 47) MoveUnit(All, "40 + 1n Goliath", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 48) Order("40 + 1n Goliath", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "40 + 1n Goliath", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 50) trg.Main_Wait(160);
                DoActions(Order("40 + 1n Goliath", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(160)
                # (Line 51) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 52) }
                # (Line 53) else if (v.P_LoopMain[playerID] == 2)
            if EUDElseIf()(v.P_LoopMain[playerID] == 2):
                # (Line 54) {
                # (Line 55) KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID);
                # (Line 57) trg.Shape_Edge(playerID, 1, "Kakaru (Twilight)", 0, 5, 100);
                DoActions(KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID))
                trg.Shape_Edge(playerID, 1, "Kakaru (Twilight)", 0, 5, 100)
                # (Line 58) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                # (Line 60) trg.Main_Wait(480);
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                trg.Main_Wait(480)
                # (Line 61) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 62) }
                # (Line 63) else if (v.P_LoopMain[playerID] == 3)
            if EUDElseIf()(v.P_LoopMain[playerID] == 3):
                # (Line 64) {
                # (Line 65) trg.Shape_Edge(playerID, 1, "60 + 1n Danimoth", 45, 5, 100);
                trg.Shape_Edge(playerID, 1, "60 + 1n Danimoth", 45, 5, 100)
                # (Line 66) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                # (Line 67) trg.Shape_Edge(playerID, 1, "40 + 1n Goliath", 45, 5, 100);
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                trg.Shape_Edge(playerID, 1, "40 + 1n Goliath", 45, 5, 100)
                # (Line 69) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 70) MoveUnit(All, "40 + 1n Goliath", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 71) Order("40 + 1n Goliath", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "40 + 1n Goliath", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 73) trg.Main_Wait(160);
                DoActions(Order("40 + 1n Goliath", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(160)
                # (Line 74) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 75) }
                # (Line 76) else if (v.P_LoopMain[playerID] == 4)
            if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                # (Line 77) {
                # (Line 78) KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID);
                # (Line 80) trg.Shape_Edge(playerID, 1, "40 + 1n Gantrithor", 45, 7, 150);
                DoActions(KillUnitAt(All, "40 + 1n Goliath", "Anywhere", playerID))
                trg.Shape_Edge(playerID, 1, "40 + 1n Gantrithor", 45, 7, 150)
                # (Line 81) trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 45, 7, 150);
                trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 45, 7, 150)
                # (Line 82) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID);
                # (Line 83) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID))
                # (Line 85) trg.Shape_Edge(playerID, 1, "Kakaru (Twilight)", 45, 5, 100);
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                trg.Shape_Edge(playerID, 1, "Kakaru (Twilight)", 45, 5, 100)
                # (Line 86) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                # (Line 88) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 90) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 91) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 92) }
                # (Line 93) }
            EUDEndIf()
            # (Line 94) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 95) {
            # (Line 96) KillUnitAt(All, "40 + 1n Ghost", "Anywhere", playerID);
            # (Line 97) trg.SkillEnd();
            DoActions(KillUnitAt(All, "40 + 1n Ghost", "Anywhere", playerID))
            trg.SkillEnd()
            # (Line 98) }
            # (Line 99) }
        EUDEndIf()
        # (Line 100) }
    EUDEndIf()
    # (Line 102) function Shape(playerID : TrgPlayer, x, y)

# (Line 103) {
@EUDTypedFunc([TrgPlayer, None, None])
def Shape(playerID, x, y):
    # (Line 104) KillUnitAt(All, " Creep. Dunkelheit", "Anywhere", playerID);
    # (Line 105) trg.Shape_Dot(playerID, 1, "Protoss Dark Templar", x, y);
    DoActions(KillUnitAt(All, " Creep. Dunkelheit", "Anywhere", playerID))
    trg.Shape_Dot(playerID, 1, "Protoss Dark Templar", x, y)
    # (Line 106) trg.Shape_Dot(playerID, 1, "Protoss Dark Templar", -x, -y);
    trg.Shape_Dot(playerID, 1, "Protoss Dark Templar", -x, -y)
    # (Line 107) trg.Shape_Dot(playerID, 1, "40 + 1n Mojo", x, y);
    trg.Shape_Dot(playerID, 1, "40 + 1n Mojo", x, y)
    # (Line 108) trg.Shape_Dot(playerID, 1, "40 + 1n Mojo", -x, -y);
    trg.Shape_Dot(playerID, 1, "40 + 1n Mojo", -x, -y)
    # (Line 109) trg.Shape_Dot(playerID, 1, "Kakaru (Twilight)", -y, x);
    trg.Shape_Dot(playerID, 1, "Kakaru (Twilight)", -y, x)
    # (Line 110) trg.Shape_Dot(playerID, 1, "Kakaru (Twilight)", y, -x);
    trg.Shape_Dot(playerID, 1, "Kakaru (Twilight)", y, -x)
    # (Line 111) trg.Shape_Dot(playerID, 1, " Creep. Dunkelheit", -y, x);
    trg.Shape_Dot(playerID, 1, " Creep. Dunkelheit", -y, x)
    # (Line 112) trg.Shape_Dot(playerID, 1, " Creep. Dunkelheit", y, -x);
    trg.Shape_Dot(playerID, 1, " Creep. Dunkelheit", y, -x)
    # (Line 113) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
    # (Line 114) KillUnitAt(All, "Protoss Dark Templar", "Anywhere", playerID);
    DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
    # (Line 115) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
    DoActions(KillUnitAt(All, "Protoss Dark Templar", "Anywhere", playerID))
    # (Line 116) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
    DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
    # (Line 117) MoveUnit(All, " Creep. Dunkelheit", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
    # (Line 118) Order(" Creep. Dunkelheit", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
    DoActions(MoveUnit(All, " Creep. Dunkelheit", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
    # (Line 119) }
    DoActions(Order(" Creep. Dunkelheit", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
