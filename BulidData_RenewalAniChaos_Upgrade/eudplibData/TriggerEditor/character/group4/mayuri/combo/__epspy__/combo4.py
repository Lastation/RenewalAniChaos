## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 5) function main(playerID)
# (Line 6) {
@EUDFunc
def f_main(playerID):
    # (Line 7) trg.Debuff_Stop();
    trg.Debuff_Stop()
    # (Line 8) trg.Buff_ShieldFix(1);
    trg.Buff_ShieldFix(1)
    # (Line 10) MoveUnit(All, "40 + 1n Marine", playerID, "Anywhere", "[Skill]HoldPosition");
    # (Line 11) MoveUnit(All, "40 + 1n Ghost", playerID, "Anywhere", "[Skill]HoldPosition");
    DoActions(MoveUnit(All, "40 + 1n Marine", playerID, "Anywhere", "[Skill]HoldPosition"))
    # (Line 13) if (v.P_WaitMain[playerID] == 0)
    DoActions(MoveUnit(All, "40 + 1n Ghost", playerID, "Anywhere", "[Skill]HoldPosition"))
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 14) {
        # (Line 15) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 16) {
            # (Line 17) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 18) {
                # (Line 19) SetDeaths(playerID, SetTo, 1, " `ShieldRecharge");
                # (Line 20) trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", 50, 0);
                DoActions(SetDeaths(playerID, SetTo, 1, " `ShieldRecharge"))
                trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", 50, 0)
                # (Line 21) trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", 100, 0);
                trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", 100, 0)
                # (Line 23) KillUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID);
                # (Line 25) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 27) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 28) }
                # (Line 29) else if (v.P_LoopMain[playerID] == 1)
            if EUDElseIf()(v.P_LoopMain[playerID] == 1):
                # (Line 30) {
                # (Line 31) trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", 50, 50);
                trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", 50, 50)
                # (Line 32) trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", 100, 100);
                trg.Shape_Square(playerID, 1, "40 + 1n Mutalisk", 100, 100)
                # (Line 34) KillUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID);
                # (Line 36) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "40 + 1n Mutalisk", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 38) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 39) }
                # (Line 40) else if (v.P_LoopMain[playerID] == 2)
            if EUDElseIf()(v.P_LoopMain[playerID] == 2):
                # (Line 41) {
                # (Line 42) trg.Shape_Edge(playerID, 1, "40 + 1n Guardian", 0, 5, 100);
                trg.Shape_Edge(playerID, 1, "40 + 1n Guardian", 0, 5, 100)
                # (Line 44) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                # (Line 46) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 48) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 49) }
                # (Line 50) else if (v.P_LoopMain[playerID] == 3)
            if EUDElseIf()(v.P_LoopMain[playerID] == 3):
                # (Line 51) {
                # (Line 52) trg.Shape_Edge(playerID, 1, "Protoss Dark Archon", 0, 7, 150);
                trg.Shape_Edge(playerID, 1, "Protoss Dark Archon", 0, 7, 150)
                # (Line 54) trg.Shape_Square(playerID, 1, "40 + 1n Guardian", 200, 125);
                trg.Shape_Square(playerID, 1, "40 + 1n Guardian", 200, 125)
                # (Line 55) trg.Shape_Square(playerID, 1, "40 + 1n Guardian", 125, 200);
                trg.Shape_Square(playerID, 1, "40 + 1n Guardian", 125, 200)
                # (Line 56) trg.Shape_Square(playerID, 1, "40 + 1n Guardian", 200, 275);
                trg.Shape_Square(playerID, 1, "40 + 1n Guardian", 200, 275)
                # (Line 57) trg.Shape_Square(playerID, 1, "40 + 1n Guardian", 275, 200);
                trg.Shape_Square(playerID, 1, "40 + 1n Guardian", 275, 200)
                # (Line 59) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                # (Line 61) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                # (Line 63) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 65) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 66) }
                # (Line 67) else if (v.P_LoopMain[playerID] == 4)
            if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                # (Line 68) {
                # (Line 69) trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", 200, 125);
                trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", 200, 125)
                # (Line 70) trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", 125, 200);
                trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", 125, 200)
                # (Line 71) trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", 200, 275);
                trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", 200, 275)
                # (Line 72) trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", 275, 200);
                trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", 275, 200)
                # (Line 73) trg.Shape_Square(playerID, 1, "50 + 1n Tank", 200, 125);
                trg.Shape_Square(playerID, 1, "50 + 1n Tank", 200, 125)
                # (Line 74) trg.Shape_Square(playerID, 1, "50 + 1n Tank", 125, 200);
                trg.Shape_Square(playerID, 1, "50 + 1n Tank", 125, 200)
                # (Line 75) trg.Shape_Square(playerID, 1, "50 + 1n Tank", 200, 275);
                trg.Shape_Square(playerID, 1, "50 + 1n Tank", 200, 275)
                # (Line 76) trg.Shape_Square(playerID, 1, "50 + 1n Tank", 275, 200);
                trg.Shape_Square(playerID, 1, "50 + 1n Tank", 275, 200)
                # (Line 77) trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", 150, 0);
                trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", 150, 0)
                # (Line 78) trg.Shape_Square(playerID, 1, "50 + 1n Tank", 150, 0);
                trg.Shape_Square(playerID, 1, "50 + 1n Tank", 150, 0)
                # (Line 80) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 81) Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 83) KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID);
                DoActions(Order("50 + 1n Battlecruiser", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 84) KillUnitAt(All, "40 + 1n Ghost", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "50 + 1n Tank", "Anywhere", playerID))
                # (Line 86) trg.Main_Wait(960);
                DoActions(KillUnitAt(All, "40 + 1n Ghost", "Anywhere", playerID))
                trg.Main_Wait(960)
                # (Line 88) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 89) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 90) }
                # (Line 91) }
            EUDEndIf()
            # (Line 92) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 93) {
            # (Line 94) if (v.P_LoopMain[playerID] < 16)
            if EUDIf()(v.P_LoopMain[playerID] >= 16, neg=True):
                # (Line 95) {
                # (Line 96) KillUnitAt(All, " Creep. Dunkelheit", "Anywhere", playerID);
                # (Line 98) if (v.P_LoopMain[playerID] % 3 == 0)
                DoActions(KillUnitAt(All, " Creep. Dunkelheit", "Anywhere", playerID))
                if EUDIf()(v.P_LoopMain[playerID] % 3 == 0):
                    # (Line 99) {
                    # (Line 100) trg.Shape_Edge(playerID, 1, "60 + 1n High Templar", 0, 7, 150);
                    trg.Shape_Edge(playerID, 1, "60 + 1n High Templar", 0, 7, 150)
                    # (Line 101) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
                    # (Line 103) trg.Shape_Edge(playerID, 1, "Target", 0, 5, 100);
                    DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
                    trg.Shape_Edge(playerID, 1, "Target", 0, 5, 100)
                    # (Line 104) KillUnitAt(All, "Target", "Anywhere", playerID);
                    # (Line 105) }
                    DoActions(KillUnitAt(All, "Target", "Anywhere", playerID))
                    # (Line 107) MoveLocation(v.P_LocationID[playerID], "40 + 1n Marine", playerID, "Anywhere");
                EUDEndIf()
                # (Line 108) RemoveUnitAt(1, "40 + 1n Marine", "Anywhere", playerID);
                DoActions(MoveLocation(v.P_LocationID[playerID], "40 + 1n Marine", playerID, "Anywhere"))
                # (Line 110) CreateUnit(2, " Creep. Dunkelheit", "[Skill]Unit_Wait_1", playerID);
                DoActions(RemoveUnitAt(1, "40 + 1n Marine", "Anywhere", playerID))
                # (Line 111) CreateUnit(6, "80 + 1n Vulture", "[Skill]Unit_Wait_1", playerID);
                DoActions(CreateUnit(2, " Creep. Dunkelheit", "[Skill]Unit_Wait_1", playerID))
                # (Line 112) SetInvincibility(Enable, "80 + 1n Vulture", playerID, "[Skill]Unit_Wait_ALL");
                DoActions(CreateUnit(6, "80 + 1n Vulture", "[Skill]Unit_Wait_1", playerID))
                # (Line 113) SetInvincibility(Enable, " Creep. Dunkelheit", playerID, "[Skill]Unit_Wait_ALL");
                DoActions(SetInvincibility(Enable, "80 + 1n Vulture", playerID, "[Skill]Unit_Wait_ALL"))
                # (Line 114) MoveUnit(2, " Creep. Dunkelheit", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(SetInvincibility(Enable, " Creep. Dunkelheit", playerID, "[Skill]Unit_Wait_ALL"))
                # (Line 115) MoveUnit(6, "80 + 1n Vulture", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveUnit(2, " Creep. Dunkelheit", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 116) KillUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID);
                DoActions(MoveUnit(6, "80 + 1n Vulture", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 118) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID))
                # (Line 119) MoveUnit(All, " Creep. Dunkelheit", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 120) Order(" Creep. Dunkelheit", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, " Creep. Dunkelheit", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 122) trg.Main_Wait(80);
                DoActions(Order(" Creep. Dunkelheit", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                trg.Main_Wait(80)
                # (Line 123) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 124) }
                # (Line 125) else if (v.P_LoopMain[playerID] == 16)
            if EUDElseIf()(v.P_LoopMain[playerID] == 16):
                # (Line 126) {
                # (Line 127) KillUnitAt(All, " Creep. Dunkelheit", "Anywhere", playerID);
                # (Line 128) KillUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID);
                DoActions(KillUnitAt(All, " Creep. Dunkelheit", "Anywhere", playerID))
                # (Line 129) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "80 + 1n Vulture", "Anywhere", playerID))
                # (Line 131) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 133) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 134) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 135) }
                # (Line 136) }
            EUDEndIf()
            # (Line 137) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 138) {
            # (Line 140) KillUnitAt(All, "40 + 1n Ghost", "Anywhere", playerID);
            # (Line 141) trg.SkillEnd();
            DoActions(KillUnitAt(All, "40 + 1n Ghost", "Anywhere", playerID))
            trg.SkillEnd()
            # (Line 142) }
            # (Line 143) }
        EUDEndIf()
        # (Line 144) }
    EUDEndIf()
