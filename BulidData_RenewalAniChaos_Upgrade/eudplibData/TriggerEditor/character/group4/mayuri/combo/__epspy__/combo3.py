## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import variable as v;
import variable as v
# (Line 2) import func.trig as trg;
from func import trig as trg
# (Line 3) import func.sound as s;
from func import sound as s
# (Line 6) function main(playerID)
# (Line 7) {
@EUDFunc
def f_main(playerID):
    # (Line 8) trg.Debuff_Stop();
    trg.Debuff_Stop()
    # (Line 9) trg.Buff_ShieldFix(1);
    trg.Buff_ShieldFix(1)
    # (Line 10) MoveUnit(All, "40 + 1n Marine", playerID, "Anywhere", "[Skill]HoldPosition");
    # (Line 11) MoveUnit(All, "40 + 1n Ghost", playerID, "Anywhere", "[Skill]HoldPosition");
    DoActions(MoveUnit(All, "40 + 1n Marine", playerID, "Anywhere", "[Skill]HoldPosition"))
    # (Line 13) if (v.P_WaitMain[playerID] == 0)
    DoActions(MoveUnit(All, "40 + 1n Ghost", playerID, "Anywhere", "[Skill]HoldPosition"))
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 14) {
        # (Line 15) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 16) {
            # (Line 17) if (v.P_LoopMain[playerID] < 4)
            if EUDIf()(v.P_LoopMain[playerID] >= 4, neg=True):
                # (Line 18) {
                # (Line 19) SetDeaths(playerID, SetTo, 1, " `ShieldRecharge");
                # (Line 20) trg.Shape_Square(playerID, 1, "Zerg Devourer", 50 * v.P_LoopMain[playerID] + 50, 0);
                DoActions(SetDeaths(playerID, SetTo, 1, " `ShieldRecharge"))
                trg.Shape_Square(playerID, 1, "Zerg Devourer", 50 * v.P_LoopMain[playerID] + 50, 0)
                # (Line 21) KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID);
                # (Line 23) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 25) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 26) }
                # (Line 27) else if (v.P_LoopMain[playerID] < 12)
            if EUDElseIf()(v.P_LoopMain[playerID] >= 12, neg=True):
                # (Line 28) {
                # (Line 29) trg.Shape_Square(playerID, 1, "Zerg Devourer", 200 - 25 * (v.P_LoopMain[playerID] - 4), 25 * (v.P_LoopMain[playerID] - 4));
                trg.Shape_Square(playerID, 1, "Zerg Devourer", 200 - 25 * (v.P_LoopMain[playerID] - 4), 25 * (v.P_LoopMain[playerID] - 4))
                # (Line 30) KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID);
                # (Line 32) if (v.P_LoopMain[playerID] % 2 == 0)
                DoActions(KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID))
                if EUDIf()(v.P_LoopMain[playerID] % 2 == 0):
                    # (Line 33) {
                    # (Line 34) trg.Shape_Square(playerID, 1, "40 + 1n Marine", 200 - 25 * (v.P_LoopMain[playerID] - 4), 25 * (v.P_LoopMain[playerID] - 4));
                    trg.Shape_Square(playerID, 1, "40 + 1n Marine", 200 - 25 * (v.P_LoopMain[playerID] - 4), 25 * (v.P_LoopMain[playerID] - 4))
                    # (Line 35) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                    # (Line 36) MoveUnit(All, "40 + 1n Marine", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                    # (Line 37) Order("40 + 1n Marine", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                    DoActions(MoveUnit(All, "40 + 1n Marine", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                    # (Line 38) }
                    DoActions(Order("40 + 1n Marine", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                    # (Line 40) trg.Main_Wait(80);
                EUDEndIf()
                trg.Main_Wait(80)
                # (Line 42) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 44) }
                # (Line 45) else if (v.P_LoopMain[playerID] < 16)
            if EUDElseIf()(v.P_LoopMain[playerID] >= 16, neg=True):
                # (Line 46) {
                # (Line 47) trg.Shape_Square(playerID, 1, "Zerg Devourer", 0, 200 - 50 * (v.P_LoopMain[playerID] - 12));
                trg.Shape_Square(playerID, 1, "Zerg Devourer", 0, 200 - 50 * (v.P_LoopMain[playerID] - 12))
                # (Line 48) KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID);
                # (Line 50) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 52) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 53) }
                # (Line 54) else if (v.P_LoopMain[playerID] == 16)
            if EUDElseIf()(v.P_LoopMain[playerID] == 16):
                # (Line 55) {
                # (Line 56) trg.Main_Wait(1080);
                trg.Main_Wait(1080)
                # (Line 58) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 59) }
                # (Line 60) else if (v.P_LoopMain[playerID] == 17)
            if EUDElseIf()(v.P_LoopMain[playerID] == 17):
                # (Line 61) {
                # (Line 62) s.CharacterVoice(6);
                s.CharacterVoice(6)
                # (Line 64) trg.Main_Wait(80);
                trg.Main_Wait(80)
                # (Line 66) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 67) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 68) }
                # (Line 70) }
            EUDEndIf()
            # (Line 71) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 72) {
            # (Line 73) if (v.P_LoopMain[playerID] < 4)
            if EUDIf()(v.P_LoopMain[playerID] >= 4, neg=True):
                # (Line 74) {
                # (Line 75) trg.Shape_Square(playerID, 1, "Zerg Devourer", 50 * v.P_LoopMain[playerID] + 50, 0);
                trg.Shape_Square(playerID, 1, "Zerg Devourer", 50 * v.P_LoopMain[playerID] + 50, 0)
                # (Line 76) KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID);
                # (Line 78) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 80) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 81) }
                # (Line 82) else if (v.P_LoopMain[playerID] < 12)
            if EUDElseIf()(v.P_LoopMain[playerID] >= 12, neg=True):
                # (Line 83) {
                # (Line 84) trg.Shape_Square(playerID, 1, "Zerg Devourer", 200 - 25 * (v.P_LoopMain[playerID] - 4), 25 * (v.P_LoopMain[playerID] - 4));
                trg.Shape_Square(playerID, 1, "Zerg Devourer", 200 - 25 * (v.P_LoopMain[playerID] - 4), 25 * (v.P_LoopMain[playerID] - 4))
                # (Line 85) KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID);
                # (Line 87) if (v.P_LoopMain[playerID] % 2 == 1)
                DoActions(KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID))
                if EUDIf()(v.P_LoopMain[playerID] % 2 == 1):
                    # (Line 88) {
                    # (Line 89) trg.Shape_Square(playerID, 1, "40 + 1n Ghost", 200 - 25 * (v.P_LoopMain[playerID] - 4), 25 * (v.P_LoopMain[playerID] - 4));
                    trg.Shape_Square(playerID, 1, "40 + 1n Ghost", 200 - 25 * (v.P_LoopMain[playerID] - 4), 25 * (v.P_LoopMain[playerID] - 4))
                    # (Line 90) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                    # (Line 91) MoveUnit(All, "40 + 1n Ghost", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                    # (Line 92) Order("40 + 1n Ghost", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                    DoActions(MoveUnit(All, "40 + 1n Ghost", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                    # (Line 93) }
                    DoActions(Order("40 + 1n Ghost", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                    # (Line 95) trg.Main_Wait(80);
                EUDEndIf()
                trg.Main_Wait(80)
                # (Line 97) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 99) }
                # (Line 100) else if (v.P_LoopMain[playerID] < 16)
            if EUDElseIf()(v.P_LoopMain[playerID] >= 16, neg=True):
                # (Line 101) {
                # (Line 102) trg.Shape_Square(playerID, 1, "Zerg Devourer", 0, 200 - 50 * (v.P_LoopMain[playerID] - 12));
                trg.Shape_Square(playerID, 1, "Zerg Devourer", 0, 200 - 50 * (v.P_LoopMain[playerID] - 12))
                # (Line 103) KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID);
                # (Line 105) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 107) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 108) }
                # (Line 109) else if (v.P_LoopMain[playerID] == 16)
            if EUDElseIf()(v.P_LoopMain[playerID] == 16):
                # (Line 110) {
                # (Line 111) trg.Main_Wait(1080);
                trg.Main_Wait(1080)
                # (Line 113) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 114) }
                # (Line 115) else if (v.P_LoopMain[playerID] == 17)
            if EUDElseIf()(v.P_LoopMain[playerID] == 17):
                # (Line 116) {
                # (Line 117) trg.Main_Wait(80);
                trg.Main_Wait(80)
                # (Line 119) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 120) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 121) }
                # (Line 122) }
            EUDEndIf()
            # (Line 123) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 124) {
            # (Line 125) if (Bring(playerID, AtLeast, 1, "Protoss Scout", "[Skill]UseSkill")
            _t17 = EUDIf()
            # (Line 126) && Bring(playerID, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill")
            # (Line 127) && v.P_Step[playerID] == 210)
            if _t17(EUDSCAnd()(Bring(playerID, AtLeast, 1, "Protoss Scout", "[Skill]UseSkill"))(Bring(playerID, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill"))(v.P_Step[playerID] == 210)()):
                # (Line 128) {
                # (Line 129) s.CharacterVoice(7);
                s.CharacterVoice(7)
                # (Line 130) v.P_SkillDelay[playerID] = 0;
                _ARRW(v.P_SkillDelay, playerID) << (0)
                # (Line 131) v.P_CountMain[playerID] = 0;
                _ARRW(v.P_CountMain, playerID) << (0)
                # (Line 132) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 133) v.P_Step[playerID] = 220;
                _ARRW(v.P_Step, playerID) << (220)
                # (Line 134) KillUnitAt(1, "Protoss Arbiter", "[Skill]UseSkill", playerID);
                # (Line 135) KillUnitAt(1, "Protoss Scout", "[Skill]UseSkill", playerID);
                DoActions(KillUnitAt(1, "Protoss Arbiter", "[Skill]UseSkill", playerID))
                # (Line 136) }
                DoActions(KillUnitAt(1, "Protoss Scout", "[Skill]UseSkill", playerID))
                # (Line 137) else
                # (Line 138) {
            if EUDElse()():
                # (Line 139) KillUnitAt(All, "40 + 1n Ghost", "Anywhere", playerID);
                # (Line 140) KillUnitAt(All, "40 + 1n Marine", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Ghost", "Anywhere", playerID))
                # (Line 144) trg.SkillEnd();
                DoActions(KillUnitAt(All, "40 + 1n Marine", "Anywhere", playerID))
                trg.SkillEnd()
                # (Line 145) }
                # (Line 149) }
            EUDEndIf()
            # (Line 150) }
        EUDEndIf()
        # (Line 151) if (v.P_WaitSub1[playerID] == 0)
    EUDEndIf()
    if EUDIf()(v.P_WaitSub1[playerID] == 0):
        # (Line 152) {
        # (Line 153) if ((v.P_CountMain[playerID] == 1) && (v.P_LoopMain[playerID] < 16))
        if EUDIf()(EUDSCAnd()((v.P_CountMain[playerID] == 1))((EUDNot(v.P_LoopMain[playerID] >= 16)))()):
            # (Line 154) {
            # (Line 155) if (v.P_CountSub1[playerID] > 3) v.P_CountSub1[playerID] = 0;
            if EUDIf()(v.P_CountSub1[playerID] <= 3, neg=True):
                _ARRW(v.P_CountSub1, playerID) << (0)
                # (Line 157) trg.Table_Sin(playerID, (45 * v.P_CountSub1[playerID] + 22), 50 * v.P_CountSub1[playerID] + 50);
            EUDEndIf()
            trg.Table_Sin(playerID, (45 * v.P_CountSub1[playerID] + 22), 50 * v.P_CountSub1[playerID] + 50)
            # (Line 158) trg.Table_Cos(playerID, (45 * v.P_CountSub1[playerID] + 22), 50 * v.P_CountSub1[playerID] + 50);
            trg.Table_Cos(playerID, (45 * v.P_CountSub1[playerID] + 22), 50 * v.P_CountSub1[playerID] + 50)
            # (Line 160) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
            # (Line 162) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
            # (Line 164) trg.Sub1_Wait(160);
            DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
            trg.Sub1_Wait(160)
            # (Line 166) v.P_CountSub1[playerID] += 1;
            _ARRW(v.P_CountSub1, playerID).__iadd__(1)
            # (Line 167) }
            # (Line 168) }
        EUDEndIf()
        # (Line 169) if (v.P_WaitSub2[playerID] == 0)
    EUDEndIf()
    if EUDIf()(v.P_WaitSub2[playerID] == 0):
        # (Line 170) {
        # (Line 171) if ((v.P_CountMain[playerID] < 2) && (v.P_LoopMain[playerID] < 16))
        if EUDIf()(EUDSCAnd()((EUDNot(v.P_CountMain[playerID] >= 2)))((EUDNot(v.P_LoopMain[playerID] >= 16)))()):
            # (Line 172) {
            # (Line 173) if (v.P_CountSub2[playerID] > 8) v.P_CountSub2[playerID] = 0;
            if EUDIf()(v.P_CountSub2[playerID] <= 8, neg=True):
                _ARRW(v.P_CountSub2, playerID) << (0)
                # (Line 175) trg.Shape_Square(playerID, 1, "40 + 1n Zealot", 240 - 30 * v.P_CountSub2[playerID], 30 * v.P_CountSub2[playerID]);
            EUDEndIf()
            trg.Shape_Square(playerID, 1, "40 + 1n Zealot", 240 - 30 * v.P_CountSub2[playerID], 30 * v.P_CountSub2[playerID])
            # (Line 176) trg.Shape_Square(playerID, 1, "Protoss Dark Templar", 160 - 20 * v.P_CountSub2[playerID], 20 * v.P_CountSub2[playerID]);
            trg.Shape_Square(playerID, 1, "Protoss Dark Templar", 160 - 20 * v.P_CountSub2[playerID], 20 * v.P_CountSub2[playerID])
            # (Line 178) KillUnitAt(All, "40 + 1n Zealot", "Anywhere", playerID);
            # (Line 179) KillUnitAt(All, "Protoss Dark Templar", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Zealot", "Anywhere", playerID))
            # (Line 181) trg.Sub2_Wait(80);
            DoActions(KillUnitAt(All, "Protoss Dark Templar", "Anywhere", playerID))
            trg.Sub2_Wait(80)
            # (Line 183) v.P_CountSub2[playerID] += 1;
            _ARRW(v.P_CountSub2, playerID).__iadd__(1)
            # (Line 184) }
            # (Line 185) }
        EUDEndIf()
        # (Line 187) }
    EUDEndIf()
