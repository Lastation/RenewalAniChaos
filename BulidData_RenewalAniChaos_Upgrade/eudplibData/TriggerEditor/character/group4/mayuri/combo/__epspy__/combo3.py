## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 4) import func.sound as s;
from func import sound as s
# (Line 7) function main(playerID)
# (Line 8) {
@EUDFunc
def f_main(playerID):
    # (Line 9) trg.Debuff_Stop();
    trg.Debuff_Stop()
    # (Line 10) trg.Buff_ShieldFix(1);
    trg.Buff_ShieldFix(1)
    # (Line 11) MoveUnit(All, "40 + 1n Marine", playerID, "Anywhere", "[Skill]HoldPosition");
    # (Line 12) MoveUnit(All, "40 + 1n Ghost", playerID, "Anywhere", "[Skill]HoldPosition");
    DoActions(MoveUnit(All, "40 + 1n Marine", playerID, "Anywhere", "[Skill]HoldPosition"))
    # (Line 14) if (v.P_WaitMain[playerID] == 0)
    DoActions(MoveUnit(All, "40 + 1n Ghost", playerID, "Anywhere", "[Skill]HoldPosition"))
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 15) {
        # (Line 16) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 17) {
            # (Line 18) if (v.P_LoopMain[playerID] < 4)
            if EUDIf()(v.P_LoopMain[playerID] >= 4, neg=True):
                # (Line 19) {
                # (Line 20) SetDeaths(playerID, SetTo, 1, " `ShieldRecharge");
                # (Line 21) trg.Shape_Square(playerID, 1, "Zerg Devourer", 50 * v.P_LoopMain[playerID] + 50, 0);
                DoActions(SetDeaths(playerID, SetTo, 1, " `ShieldRecharge"))
                trg.Shape_Square(playerID, 1, "Zerg Devourer", 50 * v.P_LoopMain[playerID] + 50, 0)
                # (Line 22) KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID);
                # (Line 24) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 26) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 27) }
                # (Line 28) else if (v.P_LoopMain[playerID] < 12)
            if EUDElseIf()(v.P_LoopMain[playerID] >= 12, neg=True):
                # (Line 29) {
                # (Line 30) trg.Shape_Square(playerID, 1, "Zerg Devourer", 200 - 25 * (v.P_LoopMain[playerID] - 4), 25 * (v.P_LoopMain[playerID] - 4));
                trg.Shape_Square(playerID, 1, "Zerg Devourer", 200 - 25 * (v.P_LoopMain[playerID] - 4), 25 * (v.P_LoopMain[playerID] - 4))
                # (Line 31) KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID);
                # (Line 33) if (v.P_LoopMain[playerID] % 2 == 0)
                DoActions(KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID))
                if EUDIf()(v.P_LoopMain[playerID] % 2 == 0):
                    # (Line 34) {
                    # (Line 35) trg.Shape_Square(playerID, 1, "40 + 1n Marine", 200 - 25 * (v.P_LoopMain[playerID] - 4), 25 * (v.P_LoopMain[playerID] - 4));
                    trg.Shape_Square(playerID, 1, "40 + 1n Marine", 200 - 25 * (v.P_LoopMain[playerID] - 4), 25 * (v.P_LoopMain[playerID] - 4))
                    # (Line 36) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                    # (Line 37) MoveUnit(All, "40 + 1n Marine", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                    # (Line 38) Order("40 + 1n Marine", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                    DoActions(MoveUnit(All, "40 + 1n Marine", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                    # (Line 39) }
                    DoActions(Order("40 + 1n Marine", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                    # (Line 41) trg.Main_Wait(80);
                EUDEndIf()
                trg.Main_Wait(80)
                # (Line 43) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 45) }
                # (Line 46) else if (v.P_LoopMain[playerID] < 16)
            if EUDElseIf()(v.P_LoopMain[playerID] >= 16, neg=True):
                # (Line 47) {
                # (Line 48) trg.Shape_Square(playerID, 1, "Zerg Devourer", 0, 200 - 50 * (v.P_LoopMain[playerID] - 12));
                trg.Shape_Square(playerID, 1, "Zerg Devourer", 0, 200 - 50 * (v.P_LoopMain[playerID] - 12))
                # (Line 49) KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID);
                # (Line 51) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 53) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 54) }
                # (Line 55) else if (v.P_LoopMain[playerID] == 16)
            if EUDElseIf()(v.P_LoopMain[playerID] == 16):
                # (Line 56) {
                # (Line 57) trg.Main_Wait(1080);
                trg.Main_Wait(1080)
                # (Line 59) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 60) }
                # (Line 61) else if (v.P_LoopMain[playerID] == 17)
            if EUDElseIf()(v.P_LoopMain[playerID] == 17):
                # (Line 62) {
                # (Line 63) s.CharacterVoice(6);
                s.CharacterVoice(6)
                # (Line 65) trg.Main_Wait(80);
                trg.Main_Wait(80)
                # (Line 67) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 68) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 69) }
                # (Line 71) }
            EUDEndIf()
            # (Line 72) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 73) {
            # (Line 74) if (v.P_LoopMain[playerID] < 4)
            if EUDIf()(v.P_LoopMain[playerID] >= 4, neg=True):
                # (Line 75) {
                # (Line 76) trg.Shape_Square(playerID, 1, "Zerg Devourer", 50 * v.P_LoopMain[playerID] + 50, 0);
                trg.Shape_Square(playerID, 1, "Zerg Devourer", 50 * v.P_LoopMain[playerID] + 50, 0)
                # (Line 77) KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID);
                # (Line 79) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 81) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 82) }
                # (Line 83) else if (v.P_LoopMain[playerID] < 12)
            if EUDElseIf()(v.P_LoopMain[playerID] >= 12, neg=True):
                # (Line 84) {
                # (Line 85) trg.Shape_Square(playerID, 1, "Zerg Devourer", 200 - 25 * (v.P_LoopMain[playerID] - 4), 25 * (v.P_LoopMain[playerID] - 4));
                trg.Shape_Square(playerID, 1, "Zerg Devourer", 200 - 25 * (v.P_LoopMain[playerID] - 4), 25 * (v.P_LoopMain[playerID] - 4))
                # (Line 86) KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID);
                # (Line 88) if (v.P_LoopMain[playerID] % 2 == 1)
                DoActions(KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID))
                if EUDIf()(v.P_LoopMain[playerID] % 2 == 1):
                    # (Line 89) {
                    # (Line 90) trg.Shape_Square(playerID, 1, "40 + 1n Ghost", 200 - 25 * (v.P_LoopMain[playerID] - 4), 25 * (v.P_LoopMain[playerID] - 4));
                    trg.Shape_Square(playerID, 1, "40 + 1n Ghost", 200 - 25 * (v.P_LoopMain[playerID] - 4), 25 * (v.P_LoopMain[playerID] - 4))
                    # (Line 91) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                    # (Line 92) MoveUnit(All, "40 + 1n Ghost", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                    DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                    # (Line 93) Order("40 + 1n Ghost", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                    DoActions(MoveUnit(All, "40 + 1n Ghost", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                    # (Line 94) }
                    DoActions(Order("40 + 1n Ghost", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                    # (Line 96) trg.Main_Wait(80);
                EUDEndIf()
                trg.Main_Wait(80)
                # (Line 98) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 100) }
                # (Line 101) else if (v.P_LoopMain[playerID] < 16)
            if EUDElseIf()(v.P_LoopMain[playerID] >= 16, neg=True):
                # (Line 102) {
                # (Line 103) trg.Shape_Square(playerID, 1, "Zerg Devourer", 0, 200 - 50 * (v.P_LoopMain[playerID] - 12));
                trg.Shape_Square(playerID, 1, "Zerg Devourer", 0, 200 - 50 * (v.P_LoopMain[playerID] - 12))
                # (Line 104) KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID);
                # (Line 106) trg.Main_Wait(80);
                DoActions(KillUnitAt(All, "Zerg Devourer", "Anywhere", playerID))
                trg.Main_Wait(80)
                # (Line 108) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 109) }
                # (Line 110) else if (v.P_LoopMain[playerID] == 16)
            if EUDElseIf()(v.P_LoopMain[playerID] == 16):
                # (Line 111) {
                # (Line 112) trg.Main_Wait(1080);
                trg.Main_Wait(1080)
                # (Line 114) v.P_LoopMain[playerID] += 1;
                _ARRW(v.P_LoopMain, playerID).__iadd__(1)
                # (Line 115) }
                # (Line 116) else if (v.P_LoopMain[playerID] == 17)
            if EUDElseIf()(v.P_LoopMain[playerID] == 17):
                # (Line 117) {
                # (Line 118) trg.Main_Wait(80);
                trg.Main_Wait(80)
                # (Line 120) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 121) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 122) }
                # (Line 123) }
            EUDEndIf()
            # (Line 124) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 125) {
            # (Line 126) if (Bring(playerID, AtLeast, 1, "Protoss Scout", "[Skill]UseSkill")
            _t17 = EUDIf()
            # (Line 127) && Bring(playerID, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill")
            # (Line 128) && v.P_Step[playerID] == 210)
            if _t17(EUDSCAnd()(Bring(playerID, AtLeast, 1, "Protoss Scout", "[Skill]UseSkill"))(Bring(playerID, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill"))(v.P_Step[playerID] == 210)()):
                # (Line 129) {
                # (Line 130) s.CharacterVoice(7);
                s.CharacterVoice(7)
                # (Line 131) v.P_SkillDelay[playerID] = 0;
                _ARRW(v.P_SkillDelay, playerID) << (0)
                # (Line 132) v.P_CountMain[playerID] = 0;
                _ARRW(v.P_CountMain, playerID) << (0)
                # (Line 133) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 134) v.P_Step[playerID] = 220;
                _ARRW(v.P_Step, playerID) << (220)
                # (Line 135) KillUnitAt(1, "Protoss Arbiter", "[Skill]UseSkill", playerID);
                # (Line 136) KillUnitAt(1, "Protoss Scout", "[Skill]UseSkill", playerID);
                DoActions(KillUnitAt(1, "Protoss Arbiter", "[Skill]UseSkill", playerID))
                # (Line 137) }
                DoActions(KillUnitAt(1, "Protoss Scout", "[Skill]UseSkill", playerID))
                # (Line 138) else
                # (Line 139) {
            if EUDElse()():
                # (Line 140) KillUnitAt(All, "40 + 1n Ghost", "Anywhere", playerID);
                # (Line 141) KillUnitAt(All, "40 + 1n Marine", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Ghost", "Anywhere", playerID))
                # (Line 145) trg.SkillEnd();
                DoActions(KillUnitAt(All, "40 + 1n Marine", "Anywhere", playerID))
                trg.SkillEnd()
                # (Line 146) }
                # (Line 150) }
            EUDEndIf()
            # (Line 151) }
        EUDEndIf()
        # (Line 152) if (v.P_WaitSub1[playerID] == 0)
    EUDEndIf()
    if EUDIf()(v.P_WaitSub1[playerID] == 0):
        # (Line 153) {
        # (Line 154) if ((v.P_CountMain[playerID] == 1) && (v.P_LoopMain[playerID] < 16))
        if EUDIf()(EUDSCAnd()((v.P_CountMain[playerID] == 1))((EUDNot(v.P_LoopMain[playerID] >= 16)))()):
            # (Line 155) {
            # (Line 156) if (v.P_CountSub1[playerID] > 3) v.P_CountSub1[playerID] = 0;
            if EUDIf()(v.P_CountSub1[playerID] <= 3, neg=True):
                _ARRW(v.P_CountSub1, playerID) << (0)
                # (Line 158) trg.Table_Sin(playerID, (45 * v.P_CountSub1[playerID] + 22), 50 * v.P_CountSub1[playerID] + 50);
            EUDEndIf()
            trg.Table_Sin(playerID, (45 * v.P_CountSub1[playerID] + 22), 50 * v.P_CountSub1[playerID] + 50)
            # (Line 159) trg.Table_Cos(playerID, (45 * v.P_CountSub1[playerID] + 22), 50 * v.P_CountSub1[playerID] + 50);
            trg.Table_Cos(playerID, (45 * v.P_CountSub1[playerID] + 22), 50 * v.P_CountSub1[playerID] + 50)
            # (Line 161) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID])
            # (Line 163) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
            # (Line 165) trg.Sub1_Wait(160);
            DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
            trg.Sub1_Wait(160)
            # (Line 167) v.P_CountSub1[playerID] += 1;
            _ARRW(v.P_CountSub1, playerID).__iadd__(1)
            # (Line 168) }
            # (Line 169) }
        EUDEndIf()
        # (Line 170) if (v.P_WaitSub2[playerID] == 0)
    EUDEndIf()
    if EUDIf()(v.P_WaitSub2[playerID] == 0):
        # (Line 171) {
        # (Line 172) if ((v.P_CountMain[playerID] < 2) && (v.P_LoopMain[playerID] < 16))
        if EUDIf()(EUDSCAnd()((EUDNot(v.P_CountMain[playerID] >= 2)))((EUDNot(v.P_LoopMain[playerID] >= 16)))()):
            # (Line 173) {
            # (Line 174) if (v.P_CountSub2[playerID] > 8) v.P_CountSub2[playerID] = 0;
            if EUDIf()(v.P_CountSub2[playerID] <= 8, neg=True):
                _ARRW(v.P_CountSub2, playerID) << (0)
                # (Line 176) trg.Shape_Square(playerID, 1, "40 + 1n Zealot", 240 - 30 * v.P_CountSub2[playerID], 30 * v.P_CountSub2[playerID]);
            EUDEndIf()
            trg.Shape_Square(playerID, 1, "40 + 1n Zealot", 240 - 30 * v.P_CountSub2[playerID], 30 * v.P_CountSub2[playerID])
            # (Line 177) trg.Shape_Square(playerID, 1, "Protoss Dark Templar", 160 - 20 * v.P_CountSub2[playerID], 20 * v.P_CountSub2[playerID]);
            trg.Shape_Square(playerID, 1, "Protoss Dark Templar", 160 - 20 * v.P_CountSub2[playerID], 20 * v.P_CountSub2[playerID])
            # (Line 179) KillUnitAt(All, "40 + 1n Zealot", "Anywhere", playerID);
            # (Line 180) KillUnitAt(All, "Protoss Dark Templar", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "40 + 1n Zealot", "Anywhere", playerID))
            # (Line 182) trg.Sub2_Wait(80);
            DoActions(KillUnitAt(All, "Protoss Dark Templar", "Anywhere", playerID))
            trg.Sub2_Wait(80)
            # (Line 184) v.P_CountSub2[playerID] += 1;
            _ARRW(v.P_CountSub2, playerID).__iadd__(1)
            # (Line 185) }
            # (Line 186) }
        EUDEndIf()
        # (Line 188) }
    EUDEndIf()
