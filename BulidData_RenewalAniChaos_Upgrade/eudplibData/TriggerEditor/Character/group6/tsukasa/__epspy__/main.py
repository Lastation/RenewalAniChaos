## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import variable as v;
import variable as v
# (Line 2) import func.trig as trg;
from func import trig as trg
# (Line 4) import character.group6.tsukasa.common.skill1 as O;
from character.group6.tsukasa.common import skill1 as O
# (Line 5) import character.group6.tsukasa.common.skill2 as S;
from character.group6.tsukasa.common import skill2 as S
# (Line 6) import character.group6.tsukasa.common.skill3 as C;
from character.group6.tsukasa.common import skill3 as C
# (Line 7) import character.group6.tsukasa.common.skill4 as A;
from character.group6.tsukasa.common import skill4 as A
# (Line 9) import character.group6.tsukasa.combo.combo1 as SSS;
from character.group6.tsukasa.combo import combo1 as SSS
# (Line 10) import character.group6.tsukasa.combo.combo2 as CCC;
from character.group6.tsukasa.combo import combo2 as CCC
# (Line 11) import character.group6.tsukasa.combo.combo3 as CCCA;
from character.group6.tsukasa.combo import combo3 as CCCA
# (Line 12) import character.group6.tsukasa.combo.combo4 as CCA;
from character.group6.tsukasa.combo import combo4 as CCA
# (Line 13) import character.group6.tsukasa.combo.combo5 as CCAAA;
from character.group6.tsukasa.combo import combo5 as CCAAA
# (Line 14) import character.group6.tsukasa.combo.combo6 as CCAAACC;
from character.group6.tsukasa.combo import combo6 as CCAAACC
# (Line 16) import character.group6.tsukasa.ultimate.ultimate1 as CCAAACCAA;
from character.group6.tsukasa.ultimate import ultimate1 as CCAAACCAA
# (Line 17) import character.group6.tsukasa.ultimate.ultimate2 as AAAA;
from character.group6.tsukasa.ultimate import ultimate2 as AAAA
# (Line 19) import character.group6.tsukasa.text as text;
from character.group6.tsukasa import text as text
# (Line 20) import character.group6.tsukasa.commend as commend;
from character.group6.tsukasa import commend as commend
# (Line 22) var loop  = 0;
loop = EUDCreateVariables(1)
_IGVA([loop], lambda: [0])
# (Line 24) function SkillList(playerID)
# (Line 25) {
@EUDFunc
def SkillList(playerID):
    # (Line 26) if(Memory(0x00596A44, Exactly, 256)) 	// Insert key Pressed
    if EUDIf()(Memory(0x00596A44, Exactly, 256)):
        # (Line 27) {
        # (Line 28) v.stb.printAt(0, "\n");
        v.stb.printAt(0, "\n")
        # (Line 29) v.stb.printAt(1, "\x1F　＃\x1B- 유자키 츠카사　\x04[ 어쨋든 귀여워 ]");
        v.stb.printAt(1, "\x1F　＃\x1B- 유자키 츠카사　\x04[ 어쨋든 귀여워 ]")
        # (Line 30) v.stb.printAt(2, "　　\x1FA\x04ction List");
        v.stb.printAt(2, "　　\x1FA\x04ction List")
        # (Line 31) v.stb.printAt(3, "　　　\x18O \x04불사 \x19[ 2초 간 피 고정 / 스킬 중 사용 가능 ] \x054분");
        v.stb.printAt(3, "　　　\x18O \x04불사 \x19[ 2초 간 피 고정 / 스킬 중 사용 가능 ] \x054분")
        # (Line 32) v.stb.printAt(4, "　　　\x04\x1FSSS\x04 귀여워 \x19[ 공성 ]");
        v.stb.printAt(4, "　　　\x04\x1FSSS\x04 귀여워 \x19[ 공성 ]")
        # (Line 33) v.stb.printAt(5, "　　　\x04\x1FCCC + A\x04 추억 \x19[ 공성 / 순간딜 / 자리고정 ]");
        v.stb.printAt(5, "　　　\x04\x1FCCC + A\x04 추억 \x19[ 공성 / 순간딜 / 자리고정 ]")
        # (Line 34) v.stb.printAt(6, "　　　\x04\x1FCAS + CC + CC \x04첫 경험 \x19[ 공성 / 지속딜 / 자리고정 ] \x1F[1]");
        v.stb.printAt(6, "　　　\x04\x1FCAS + CC + CC \x04첫 경험 \x19[ 공성 / 지속딜 / 자리고정 ] \x1F[1]")
        # (Line 35) v.stb.printAt(7, "\n");
        v.stb.printAt(7, "\n")
        # (Line 36) v.stb.printAt(8, "　　　\x1F[1]\x08 + AA \x04인생의 동반자 \x19[ 공성 / 선딜 5.5초 ] \x05", v.P_Ultimate1[playerID]);
        v.stb.printAt(8, "　　　\x1F[1]\x08 + AA \x04인생의 동반자 \x19[ 공성 / 선딜 5.5초 ] \x05", v.P_Ultimate1[playerID])
        # (Line 37) v.stb.printAt(9, "　　　\x08AAAA \x04인생의 동반자 \x19[ 공성 / 선딜 5.5초 ] \x05", v.P_Ultimate2[playerID]);
        v.stb.printAt(9, "　　　\x08AAAA \x04인생의 동반자 \x19[ 공성 / 선딜 5.5초 ] \x05", v.P_Ultimate2[playerID])
        # (Line 38) v.stb.printAt(10, "\n");
        v.stb.printAt(10, "\n")
        # (Line 39) PlayWAV("sound\\Bullet\\LaserHit.wav");
        # (Line 40) }
        DoActions(PlayWAV("sound\\Bullet\\LaserHit.wav"))
        # (Line 41) }
    EUDEndIf()
    # (Line 43) function main(playerID)

# (Line 44) {
@EUDFunc
def f_main(playerID):
    # (Line 45) v.P_HeroID[playerID] = 34;
    _ARRW(v.P_HeroID, playerID) << (34)
    # (Line 46) v.P_LocationID[playerID] = 203;
    _ARRW(v.P_LocationID, playerID) << (203)
    # (Line 47) v.P_UnitID[playerID] = 53;
    _ARRW(v.P_UnitID, playerID) << (53)
    # (Line 49) v.P_Ultimate1[playerID] = 700;
    _ARRW(v.P_Ultimate1, playerID) << (700)
    # (Line 50) v.P_Ultimate2[playerID] = 650;
    _ARRW(v.P_Ultimate2, playerID) << (650)
    # (Line 52) SkillList(playerID);
    SkillList(playerID)
    # (Line 53) commend.main(playerID);
    commend.f_main(playerID)
    # (Line 55) O.main(playerID);
    O.f_main(playerID)
    # (Line 57) if (v.P_SkillDelay[playerID] == 0)
    if EUDIf()(v.P_SkillDelay[playerID] == 0):
        # (Line 58) {
        # (Line 59) switch(v.P_Step[playerID])
        EUDSwitch(v.P_Step[playerID])
        # (Line 60) {
        # (Line 61) case 100:
        _t2 = EUDSwitchCase()
        # (Line 62) S.main(playerID);
        if _t2(100):
            S.f_main(playerID)
            # (Line 63) break;
            EUDBreak()
            # (Line 64) case 200:
        _t3 = EUDSwitchCase()
        # (Line 65) C.main(playerID);
        if _t3(200):
            C.f_main(playerID)
            # (Line 66) break;
            EUDBreak()
            # (Line 67) case 300:
        _t4 = EUDSwitchCase()
        # (Line 68) A.main(playerID);
        if _t4(300):
            A.f_main(playerID)
            # (Line 69) break;
            EUDBreak()
            # (Line 70) case 110:
        _t5 = EUDSwitchCase()
        # (Line 71) SSS.main(playerID);
        if _t5(110):
            SSS.f_main(playerID)
            # (Line 72) break;
            EUDBreak()
            # (Line 73) case 210:
        _t6 = EUDSwitchCase()
        # (Line 74) CCC.main(playerID);
        if _t6(210):
            CCC.f_main(playerID)
            # (Line 75) break;
            EUDBreak()
            # (Line 76) case 220:
        _t7 = EUDSwitchCase()
        # (Line 77) CCCA.main(playerID);
        if _t7(220):
            CCCA.f_main(playerID)
            # (Line 78) break;
            EUDBreak()
            # (Line 79) case 230:
        _t8 = EUDSwitchCase()
        # (Line 80) CCA.main(playerID);
        if _t8(230):
            CCA.f_main(playerID)
            # (Line 81) break;
            EUDBreak()
            # (Line 82) case 240:
        _t9 = EUDSwitchCase()
        # (Line 83) CCAAA.main(playerID);
        if _t9(240):
            CCAAA.f_main(playerID)
            # (Line 84) break;
            EUDBreak()
            # (Line 85) case 250:
        _t10 = EUDSwitchCase()
        # (Line 86) CCAAACC.main(playerID);
        if _t10(250):
            CCAAACC.f_main(playerID)
            # (Line 87) break;
            EUDBreak()
            # (Line 88) case 260:
        _t11 = EUDSwitchCase()
        # (Line 89) CCAAACCAA.main(playerID);
        if _t11(260):
            CCAAACCAA.f_main(playerID)
            # (Line 90) break;
            EUDBreak()
            # (Line 91) case 310:
        _t12 = EUDSwitchCase()
        # (Line 92) AAAA.main(playerID);
        if _t12(310):
            AAAA.f_main(playerID)
            # (Line 93) break;
            EUDBreak()
            # (Line 94) }
        # (Line 97) }
        EUDEndSwitch()
        # (Line 100) }
    EUDEndIf()
