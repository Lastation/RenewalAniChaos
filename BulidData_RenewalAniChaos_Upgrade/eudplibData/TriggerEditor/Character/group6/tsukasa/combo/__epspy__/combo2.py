## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 4) import func.trigepic as epic;
from func import trigepic as epic
# (Line 6) var x = 0;
x = EUDCreateVariables(1)
_IGVA([x], lambda: [0])
# (Line 7) var y = 0;
y = EUDCreateVariables(1)
_IGVA([y], lambda: [0])
# (Line 9) var d = 0;
d = EUDCreateVariables(1)
_IGVA([d], lambda: [0])
# (Line 10) var i = 0;
i = EUDCreateVariables(1)
_IGVA([i], lambda: [0])
# (Line 12) var t = 0;
t = EUDCreateVariables(1)
_IGVA([t], lambda: [0])
# (Line 14) function main(playerID)
# (Line 15) {
@EUDFunc
def f_main(playerID):
    # (Line 16) trg.Debuff_BanReturn();
    trg.Debuff_BanReturn()
    # (Line 17) trg.Debuff_Stop();
    trg.Debuff_Stop()
    # (Line 19) MoveUnit(All, "60 + 1n Dragoon", playerID, "Anywhere", "[Skill]HoldPosition");
    # (Line 20) MoveUnit(All, "60 + 1n High Templar", playerID, "Anywhere", "[Skill]HoldPosition");
    DoActions(MoveUnit(All, "60 + 1n Dragoon", playerID, "Anywhere", "[Skill]HoldPosition"))
    # (Line 22) if (v.P_WaitMain[playerID] == 0)
    DoActions(MoveUnit(All, "60 + 1n High Templar", playerID, "Anywhere", "[Skill]HoldPosition"))
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 23) {
        # (Line 24) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 25) {
            # (Line 26) d = 64 - 16 * v.P_LoopMain[playerID];
            d << (64 - 16 * v.P_LoopMain[playerID])
            # (Line 28) trg.Table_Sin(playerID, 30 *  v.P_LoopMain[playerID], d);
            trg.Table_Sin(playerID, 30 * v.P_LoopMain[playerID], d)
            # (Line 29) trg.Table_Cos(playerID, 30 *  v.P_LoopMain[playerID], d);
            trg.Table_Cos(playerID, 30 * v.P_LoopMain[playerID], d)
            # (Line 31) x = v.P_AngleCos[playerID];
            x << (v.P_AngleCos[playerID])
            # (Line 32) y = v.P_AngleSin[playerID];
            y << (v.P_AngleSin[playerID])
            # (Line 34) if (v.P_LoopMain[playerID] < 4)
            if EUDIf()(v.P_LoopMain[playerID] >= 4, neg=True):
                # (Line 35) {
                # (Line 36) trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", x, y);
                trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", x, y)
                # (Line 37) trg.Shape_Square(playerID, 6, "Protoss Dark Templar", x, y);
                trg.Shape_Square(playerID, 6, "Protoss Dark Templar", x, y)
                # (Line 39) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID);
                # (Line 40) KillUnitAt(All, "Protoss Dark Templar", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID))
                # (Line 41) }
                DoActions(KillUnitAt(All, "Protoss Dark Templar", "Anywhere", playerID))
                # (Line 43) trg.Main_Wait(80);
            EUDEndIf()
            trg.Main_Wait(80)
            # (Line 45) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 47) if (v.P_LoopMain[playerID] == 4)
            if EUDIf()(v.P_LoopMain[playerID] == 4):
                # (Line 48) {
                # (Line 49) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 50) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 51) }
                # (Line 52) }
            EUDEndIf()
            # (Line 53) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 54) {
            # (Line 55) d = 75 + 75 * v.P_LoopMain[playerID];
            d << (75 + 75 * v.P_LoopMain[playerID])
            # (Line 57) if (v.P_LoopMain[playerID] < 3)
            if EUDIf()(v.P_LoopMain[playerID] >= 3, neg=True):
                # (Line 58) {
                # (Line 59) for (i = 0; i < 3; i++) {
                i << (0)
                if EUDWhile()(i >= 3, neg=True):
                    def _t8():
                        i.__iadd__(1)
                    # (Line 60) trg.Table_Sin(playerID, 30 * i, d);
                    trg.Table_Sin(playerID, 30 * i, d)
                    # (Line 61) trg.Table_Cos(playerID, 30 * i, d);
                    trg.Table_Cos(playerID, 30 * i, d)
                    # (Line 63) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 64) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 66) trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", x, y);
                    trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", x, y)
                    # (Line 67) trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y);
                    trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y)
                    # (Line 68) }
                    # (Line 70) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID);
                    EUDSetContinuePoint()
                    _t8()
                EUDEndWhile()
                # (Line 71) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID))
                # (Line 72) }
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 73) if (v.P_LoopMain[playerID] == 3)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 3):
                # (Line 74) {
                # (Line 75) for (i = 0; i < 3; i++) {
                i << (0)
                if EUDWhile()(i >= 3, neg=True):
                    def _t11():
                        i.__iadd__(1)
                    # (Line 76) trg.Table_Sin(playerID, 30 * i, 200);
                    trg.Table_Sin(playerID, 30 * i, 200)
                    # (Line 77) trg.Table_Cos(playerID, 30 * i, 200);
                    trg.Table_Cos(playerID, 30 * i, 200)
                    # (Line 79) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 80) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 82) trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", x, y);
                    trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", x, y)
                    # (Line 83) }
                    # (Line 84) }
                    EUDSetContinuePoint()
                    _t11()
                EUDEndWhile()
                # (Line 86) trg.Main_Wait(160);
            EUDEndIf()
            trg.Main_Wait(160)
            # (Line 88) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 90) if (v.P_LoopMain[playerID] == 8)
            if EUDIf()(v.P_LoopMain[playerID] == 8):
                # (Line 91) {
                # (Line 92) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 93) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 94) }
                # (Line 95) }
            EUDEndIf()
            # (Line 96) else if (v.P_CountMain[playerID] == 2)
        if EUDElseIf()(v.P_CountMain[playerID] == 2):
            # (Line 97) {
            # (Line 98) t = 50;
            t << (50)
            # (Line 100) if (v.P_LoopMain[playerID] == 0) { x = 0; y = -1; }
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                x << (0)
                y << (-1)
                # (Line 101) else if (v.P_LoopMain[playerID] == 1) { x = 1; y = -2; }
            if EUDElseIf()(v.P_LoopMain[playerID] == 1):
                x << (1)
                y << (-2)
                # (Line 102) else if (v.P_LoopMain[playerID] == 2) { x = 2; y = -2; }
            if EUDElseIf()(v.P_LoopMain[playerID] == 2):
                x << (2)
                y << (-2)
                # (Line 103) else if (v.P_LoopMain[playerID] == 3) { x = 3; y = -1; }
            if EUDElseIf()(v.P_LoopMain[playerID] == 3):
                x << (3)
                y << (-1)
                # (Line 104) else if (v.P_LoopMain[playerID] == 4) { x = 3; y = 0; }
            if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                x << (3)
                y << (0)
                # (Line 105) else if (v.P_LoopMain[playerID] == 5) { x = 2; y = 1; }
            if EUDElseIf()(v.P_LoopMain[playerID] == 5):
                x << (2)
                y << (1)
                # (Line 106) else if (v.P_LoopMain[playerID] == 6) { x = 1; y = 2; }
            if EUDElseIf()(v.P_LoopMain[playerID] == 6):
                x << (1)
                y << (2)
                # (Line 107) else if (v.P_LoopMain[playerID] == 7) { x = 0; y = 3; }
            if EUDElseIf()(v.P_LoopMain[playerID] == 7):
                x << (0)
                y << (3)
                # (Line 109) if (v.P_LoopMain[playerID] < 8) {
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] >= 8, neg=True):
                # (Line 110) epic.Shape_Dot(playerID, 1, "60 + 1n Danimoth", t * x, t * y, 1);
                epic.Shape_Dot(playerID, 1, "60 + 1n Danimoth", t * x, t * y, 1)
                # (Line 111) trg.Shape_Dot(playerID, 1, "60 + 1n High Templar", t * x, t * y);
                trg.Shape_Dot(playerID, 1, "60 + 1n High Templar", t * x, t * y)
                # (Line 113) if (v.P_LoopMain[playerID] != 0 && v.P_LoopMain[playerID] != 7) {
                if EUDIf()(EUDSCAnd()(v.P_LoopMain[playerID] == 0, neg=True)(v.P_LoopMain[playerID] == 7, neg=True)()):
                    # (Line 114) epic.Shape_Dot(playerID, 1, "60 + 1n Danimoth", -t * x, t * y, 1);
                    epic.Shape_Dot(playerID, 1, "60 + 1n Danimoth", -t * x, t * y, 1)
                    # (Line 115) trg.Shape_Dot(playerID, 1, "60 + 1n High Templar", -t * x, t * y);
                    trg.Shape_Dot(playerID, 1, "60 + 1n High Templar", -t * x, t * y)
                    # (Line 116) }
                    # (Line 118) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                EUDEndIf()
                # (Line 119) MoveUnit(All, "60 + 1n High Templar", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 120) Order("60 + 1n High Templar", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "60 + 1n High Templar", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 122) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                DoActions(Order("60 + 1n High Templar", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 123) }
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                # (Line 125) trg.Main_Wait(160);
            EUDEndIf()
            trg.Main_Wait(160)
            # (Line 127) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 129) if (v.P_LoopMain[playerID] == 8)
            if EUDIf()(v.P_LoopMain[playerID] == 8):
                # (Line 130) {
                # (Line 131) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 132) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 133) }
                # (Line 134) }
            EUDEndIf()
            # (Line 135) else if (v.P_CountMain[playerID] == 3)
        if EUDElseIf()(v.P_CountMain[playerID] == 3):
            # (Line 136) {
            # (Line 137) t = 50;
            t << (50)
            # (Line 139) if (v.P_LoopMain[playerID] == 0) {
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 140) for (i = 0; i < 8; i++) {
                i << (0)
                if EUDWhile()(i >= 8, neg=True):
                    def _t28():
                        i.__iadd__(1)
                    # (Line 141) if (i == 0) { x = 0; y = -1; }
                    if EUDIf()(i == 0):
                        x << (0)
                        y << (-1)
                        # (Line 142) else if (i == 1) { x = 1; y = -2; }
                    if EUDElseIf()(i == 1):
                        x << (1)
                        y << (-2)
                        # (Line 143) else if (i == 2) { x = 2; y = -2; }
                    if EUDElseIf()(i == 2):
                        x << (2)
                        y << (-2)
                        # (Line 144) else if (i == 3) { x = 3; y = -1; }
                    if EUDElseIf()(i == 3):
                        x << (3)
                        y << (-1)
                        # (Line 145) else if (i == 4) { x = 3; y = 0; }
                    if EUDElseIf()(i == 4):
                        x << (3)
                        y << (0)
                        # (Line 146) else if (i == 5) { x = 2; y = 1; }
                    if EUDElseIf()(i == 5):
                        x << (2)
                        y << (1)
                        # (Line 147) else if (i == 6) { x = 1; y = 2; }
                    if EUDElseIf()(i == 6):
                        x << (1)
                        y << (2)
                        # (Line 148) else if (i == 7) { x = 0; y = 3; }
                    if EUDElseIf()(i == 7):
                        x << (0)
                        y << (3)
                        # (Line 150) if (i < 8) {
                    EUDEndIf()
                    if EUDIf()(i >= 8, neg=True):
                        # (Line 151) trg.Shape_Dot(playerID, 1, "40 + 1n Guardian", t * x, t * y);
                        trg.Shape_Dot(playerID, 1, "40 + 1n Guardian", t * x, t * y)
                        # (Line 152) trg.Shape_Dot(playerID, 1, "60 + 1n Archon", t * x, t * y);
                        trg.Shape_Dot(playerID, 1, "60 + 1n Archon", t * x, t * y)
                        # (Line 154) if (i != 0 && i != 7) {
                        if EUDIf()(EUDSCAnd()(i == 0, neg=True)(i == 7, neg=True)()):
                            # (Line 155) trg.Shape_Dot(playerID, 1, "40 + 1n Guardian", -t * x, t * y);
                            trg.Shape_Dot(playerID, 1, "40 + 1n Guardian", -t * x, t * y)
                            # (Line 156) trg.Shape_Dot(playerID, 1, "60 + 1n Archon", -t * x, t * y);
                            trg.Shape_Dot(playerID, 1, "60 + 1n Archon", -t * x, t * y)
                            # (Line 157) }
                            # (Line 158) }
                        EUDEndIf()
                        # (Line 159) }
                    EUDEndIf()
                    # (Line 161) KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID);
                    EUDSetContinuePoint()
                    _t28()
                EUDEndWhile()
                # (Line 162) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Guardian", "Anywhere", playerID))
                # (Line 163) }
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 164) else if (v.P_LoopMain[playerID] == 1) {
            if EUDElseIf()(v.P_LoopMain[playerID] == 1):
                # (Line 165) for (i = 0; i < 8; i++) {
                i << (0)
                if EUDWhile()(i >= 8, neg=True):
                    def _t41():
                        i.__iadd__(1)
                    # (Line 166) if (i == 0) { x = 0; y = -1; }
                    if EUDIf()(i == 0):
                        x << (0)
                        y << (-1)
                        # (Line 167) else if (i == 1) { x = 1; y = -2; }
                    if EUDElseIf()(i == 1):
                        x << (1)
                        y << (-2)
                        # (Line 168) else if (i == 2) { x = 2; y = -2; }
                    if EUDElseIf()(i == 2):
                        x << (2)
                        y << (-2)
                        # (Line 169) else if (i == 3) { x = 3; y = -1; }
                    if EUDElseIf()(i == 3):
                        x << (3)
                        y << (-1)
                        # (Line 170) else if (i == 4) { x = 3; y = 0; }
                    if EUDElseIf()(i == 4):
                        x << (3)
                        y << (0)
                        # (Line 171) else if (i == 5) { x = 2; y = 1; }
                    if EUDElseIf()(i == 5):
                        x << (2)
                        y << (1)
                        # (Line 172) else if (i == 6) { x = 1; y = 2; }
                    if EUDElseIf()(i == 6):
                        x << (1)
                        y << (2)
                        # (Line 173) else if (i == 7) { x = 0; y = 3; }
                    if EUDElseIf()(i == 7):
                        x << (0)
                        y << (3)
                        # (Line 175) if (i < 8) {
                    EUDEndIf()
                    if EUDIf()(i >= 8, neg=True):
                        # (Line 176) trg.Shape_Dot(playerID, 1, "Kakaru (Twilight)", t * x, t * y);
                        trg.Shape_Dot(playerID, 1, "Kakaru (Twilight)", t * x, t * y)
                        # (Line 177) trg.Shape_Dot(playerID, 1, " Unit. Hoffnung 25000", t * x, t * y);
                        trg.Shape_Dot(playerID, 1, " Unit. Hoffnung 25000", t * x, t * y)
                        # (Line 179) if (i != 0 && i != 7) {
                        if EUDIf()(EUDSCAnd()(i == 0, neg=True)(i == 7, neg=True)()):
                            # (Line 180) trg.Shape_Dot(playerID, 1, "Kakaru (Twilight)", -t * x, t * y);
                            trg.Shape_Dot(playerID, 1, "Kakaru (Twilight)", -t * x, t * y)
                            # (Line 181) trg.Shape_Dot(playerID, 1, " Unit. Hoffnung 25000", -t * x, t * y);
                            trg.Shape_Dot(playerID, 1, " Unit. Hoffnung 25000", -t * x, t * y)
                            # (Line 182) }
                            # (Line 183) }
                        EUDEndIf()
                        # (Line 184) }
                    EUDEndIf()
                    # (Line 186) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                    EUDSetContinuePoint()
                    _t41()
                EUDEndWhile()
                # (Line 187) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                # (Line 188) }
                DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
                # (Line 190) trg.Main_Wait(160);
            EUDEndIf()
            trg.Main_Wait(160)
            # (Line 192) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 194) if (v.P_LoopMain[playerID] == 12)
            if EUDIf()(v.P_LoopMain[playerID] == 12):
                # (Line 195) {
                # (Line 196) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 197) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 198) }
                # (Line 199) }
            EUDEndIf()
            # (Line 200) else if (v.P_CountMain[playerID] == 4)
        if EUDElseIf()(v.P_CountMain[playerID] == 4):
            # (Line 201) {
            # (Line 202) KillUnitAt(All, "60 + 1n Dragoon", "Anywhere", playerID);
            # (Line 203) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "60 + 1n Dragoon", "Anywhere", playerID))
            # (Line 205) trg.SkillEnd();
            DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
            trg.SkillEnd()
            # (Line 206) }
            # (Line 207) }
        EUDEndIf()
        # (Line 208) }
    EUDEndIf()
