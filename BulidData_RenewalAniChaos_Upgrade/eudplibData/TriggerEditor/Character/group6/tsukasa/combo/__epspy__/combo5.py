## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 4) import func.trigepic as epic;
from func import trigepic as epic
# (Line 5) import func.sound as s;
from func import sound as s
# (Line 7) var x = 0;
x = EUDCreateVariables(1)
_IGVA([x], lambda: [0])
# (Line 8) var y = 0;
y = EUDCreateVariables(1)
_IGVA([y], lambda: [0])
# (Line 10) var d = 0;
d = EUDCreateVariables(1)
_IGVA([d], lambda: [0])
# (Line 12) function main(playerID)
# (Line 13) {
@EUDFunc
def f_main(playerID):
    # (Line 14) MoveUnit(All, "60 + 1n Danimoth", playerID, "Anywhere", "[Skill]HoldPosition");
    # (Line 15) MoveUnit(All, "40 + 1n Mojo", playerID, "Anywhere", "[Skill]HoldPosition");
    DoActions(MoveUnit(All, "60 + 1n Danimoth", playerID, "Anywhere", "[Skill]HoldPosition"))
    # (Line 17) trg.Debuff_BanReturn();
    DoActions(MoveUnit(All, "40 + 1n Mojo", playerID, "Anywhere", "[Skill]HoldPosition"))
    trg.Debuff_BanReturn()
    # (Line 18) trg.Debuff_Stop();
    trg.Debuff_Stop()
    # (Line 20) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 21) {
        # (Line 22) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 23) {
            # (Line 24) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 25) {
                # (Line 26) trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 0, 3, 120);
                trg.Shape_Edge(playerID, 1, "60 + 1n Archon", 0, 3, 120)
                # (Line 27) trg.Shape_Edge(playerID, 1, "Kakaru (Twilight)", 0, 3, 120);
                trg.Shape_Edge(playerID, 1, "Kakaru (Twilight)", 0, 3, 120)
                # (Line 29) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                # (Line 30) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 31) }
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", playerID))
                # (Line 32) else if (v.P_LoopMain[playerID] == 1)
            if EUDElseIf()(v.P_LoopMain[playerID] == 1):
                # (Line 33) {
                # (Line 34) trg.Shape_Edge(playerID, 1, "60 + 1n Danimoth", 0, 3, 120);
                trg.Shape_Edge(playerID, 1, "60 + 1n Danimoth", 0, 3, 120)
                # (Line 35) trg.Shape_Edge(playerID, 1, "100 + 1n Dragoon", 0, 3, 120);
                trg.Shape_Edge(playerID, 1, "100 + 1n Dragoon", 0, 3, 120)
                # (Line 36) trg.Shape_Edge(playerID, 1, "60 + 1n Dragoon", 0, 3, 120);
                trg.Shape_Edge(playerID, 1, "60 + 1n Dragoon", 0, 3, 120)
                # (Line 38) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 39) Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 41) KillUnitAt(All, "100 + 1n Dragoon", "Anywhere", playerID);
                DoActions(Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 42) }
                DoActions(KillUnitAt(All, "100 + 1n Dragoon", "Anywhere", playerID))
                # (Line 43) else if (v.P_LoopMain[playerID] == 5)
            if EUDElseIf()(v.P_LoopMain[playerID] == 5):
                # (Line 44) {
                # (Line 45) trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", 160, 0);
                trg.Shape_Square(playerID, 1, "40 + 1n Gantrithor", 160, 0)
                # (Line 46) trg.Shape_Square(playerID, 1, "Protoss Dark Archon", 64, 0);
                trg.Shape_Square(playerID, 1, "Protoss Dark Archon", 64, 0)
                # (Line 47) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID);
                # (Line 48) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", playerID))
                # (Line 49) }
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", playerID))
                # (Line 50) else if (v.P_LoopMain[playerID] == 7)
            if EUDElseIf()(v.P_LoopMain[playerID] == 7):
                # (Line 51) {
                # (Line 52) trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", 160, 160);
                trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", 160, 160)
                # (Line 53) trg.Shape_Square(playerID, 1, "60 + 1n Archon", 160, 0);
                trg.Shape_Square(playerID, 1, "60 + 1n Archon", 160, 0)
                # (Line 54) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 55) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                # (Line 56) }
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 57) else if (v.P_LoopMain[playerID] == 9)
            if EUDElseIf()(v.P_LoopMain[playerID] == 9):
                # (Line 58) {
                # (Line 59) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 120, 120);
                trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 120, 120)
                # (Line 60) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 64, 0);
                trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 64, 0)
                # (Line 61) trg.Shape_Square(playerID, 1, "60 + 1n High Templar", 64, 0);
                trg.Shape_Square(playerID, 1, "60 + 1n High Templar", 64, 0)
                # (Line 62) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", 120, 120);
                trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", 120, 120)
                # (Line 63) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", 64, 0);
                trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", 64, 0)
                # (Line 65) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 66) Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 68) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 69) MoveUnit(All, "60 + 1n High Templar", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 70) Order("60 + 1n High Templar", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "60 + 1n High Templar", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 72) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(Order("60 + 1n High Templar", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 73) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 74) }
                DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
                # (Line 76) if (v.P_LoopMain[playerID] < 39)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] >= 39, neg=True):
                # (Line 77) {
                # (Line 78) d = 200;
                d << (200)
                # (Line 80) trg.Table_Sin(playerID, 15 * v.P_LoopMain[playerID], d);
                trg.Table_Sin(playerID, 15 * v.P_LoopMain[playerID], d)
                # (Line 81) trg.Table_Cos(playerID, 15 * v.P_LoopMain[playerID], d);
                trg.Table_Cos(playerID, 15 * v.P_LoopMain[playerID], d)
                # (Line 83) x = v.P_AngleCos[playerID];
                x << (v.P_AngleCos[playerID])
                # (Line 84) y = v.P_AngleSin[playerID];
                y << (v.P_AngleSin[playerID])
                # (Line 86) trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y);
                trg.Shape_Square(playerID, 1, "60 + 1n Archon", x, y)
                # (Line 87) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                # (Line 90) if (v.P_LoopMain[playerID] >= 17 && v.P_LoopMain[playerID] % 2 == 0)
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                if EUDIf()(EUDSCAnd()(v.P_LoopMain[playerID] >= 17)(v.P_LoopMain[playerID] % 2 == 0)()):
                    # (Line 91) {
                    # (Line 92) trg.Shape_Square(playerID, 1, "60 + 1n Siege", x, y);
                    trg.Shape_Square(playerID, 1, "60 + 1n Siege", x, y)
                    # (Line 93) }
                    # (Line 94) }
                EUDEndIf()
                # (Line 95) else if (v.P_LoopMain[playerID] < 69)
            if EUDElseIf()(v.P_LoopMain[playerID] >= 69, neg=True):
                # (Line 96) {
                # (Line 97) d = 100;
                d << (100)
                # (Line 99) trg.Table_Sin(playerID, 15 * v.P_LoopMain[playerID], d);
                trg.Table_Sin(playerID, 15 * v.P_LoopMain[playerID], d)
                # (Line 100) trg.Table_Cos(playerID, 15 * v.P_LoopMain[playerID], d);
                trg.Table_Cos(playerID, 15 * v.P_LoopMain[playerID], d)
                # (Line 102) x = v.P_AngleCos[playerID];
                x << (v.P_AngleCos[playerID])
                # (Line 103) y = v.P_AngleSin[playerID];
                y << (v.P_AngleSin[playerID])
                # (Line 105) trg.Shape_Square(playerID, 1, "Protoss Dark Templar", x, y);
                trg.Shape_Square(playerID, 1, "Protoss Dark Templar", x, y)
                # (Line 106) KillUnitAt(All, "Protoss Dark Templar", "Anywhere", playerID);
                # (Line 107) }
                DoActions(KillUnitAt(All, "Protoss Dark Templar", "Anywhere", playerID))
                # (Line 108) if (v.P_LoopMain[playerID] == 70)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 70):
                # (Line 109) {
                # (Line 110) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                # (Line 111) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                # (Line 112) KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
                # (Line 113) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID))
                # (Line 114) KillUnitAt(All, "60 + 1n Dragoon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
                # (Line 116) CreateUnit(16, "60 + 1n Siege", dwrand() % 8 + 33, playerID);
                DoActions(KillUnitAt(All, "60 + 1n Dragoon", "Anywhere", playerID))
                # (Line 117) SetInvincibility(Enable, "60 + 1n Siege", playerID, "Anywhere");
                DoActions(CreateUnit(16, "60 + 1n Siege", f_dwrand() % 8 + 33, playerID))
                # (Line 118) }
                DoActions(SetInvincibility(Enable, "60 + 1n Siege", playerID, "Anywhere"))
                # (Line 120) if (v.P_LoopMain[playerID] == 39)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] == 39):
                # (Line 121) {
                # (Line 122) s.CharacterVoice(6);
                s.CharacterVoice(6)
                # (Line 123) }
                # (Line 125) trg.Main_Wait(160);
            EUDEndIf()
            trg.Main_Wait(160)
            # (Line 127) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 129) if (v.P_LoopMain[playerID] == 75)
            if EUDIf()(v.P_LoopMain[playerID] == 75):
                # (Line 130) {
                # (Line 131) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 132) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 133) }
                # (Line 134) }
            EUDEndIf()
            # (Line 135) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 136) {
            # (Line 137) if (Bring(playerID, AtLeast, 3, "Protoss Carrier", "[Skill]UseSkill")
            _t15 = EUDIf()
            # (Line 138) && v.P_Step[playerID] == 240)
            if _t15(EUDSCAnd()(Bring(playerID, AtLeast, 3, "Protoss Carrier", "[Skill]UseSkill"))(v.P_Step[playerID] == 240)()):
                # (Line 139) {
                # (Line 140) s.CharacterVoice(7);
                s.CharacterVoice(7)
                # (Line 141) v.P_SkillDelay[playerID] = 0;
                _ARRW(v.P_SkillDelay, playerID) << (0)
                # (Line 142) v.P_CountMain[playerID] = 0;
                _ARRW(v.P_CountMain, playerID) << (0)
                # (Line 143) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 144) v.P_Step[playerID] = 250;
                _ARRW(v.P_Step, playerID) << (250)
                # (Line 145) KillUnitAt(3, "Protoss Carrier", "[Skill]UseSkill", playerID);
                # (Line 146) }
                DoActions(KillUnitAt(3, "Protoss Carrier", "[Skill]UseSkill", playerID))
                # (Line 147) else
                # (Line 148) {
            if EUDElse()():
                # (Line 149) KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID);
                # (Line 150) trg.SkillEnd();
                DoActions(KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID))
                trg.SkillEnd()
                # (Line 151) }
                # (Line 152) }
            EUDEndIf()
            # (Line 153) }
        EUDEndIf()
        # (Line 154) }
    EUDEndIf()
