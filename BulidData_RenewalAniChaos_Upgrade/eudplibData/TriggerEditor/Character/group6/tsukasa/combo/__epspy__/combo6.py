## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 4) import func.trigepic as epic;
from func import trigepic as epic
# (Line 6) var x = 0;
x = EUDCreateVariables(1)
_IGVA([x], lambda: [0])
# (Line 7) var y = 0;
y = EUDCreateVariables(1)
_IGVA([y], lambda: [0])
# (Line 9) var d = 0;
d = EUDCreateVariables(1)
_IGVA([d], lambda: [0])
# (Line 11) function Move_Square(playerID : TrgPlayer, count, unit : TrgUnit, pos_x, pos_y);
# (Line 13) function main(playerID)
# (Line 14) {
@EUDFunc
def f_main(playerID):
    # (Line 15) MoveUnit(All, "60 + 1n High Templar", playerID, "Anywhere", "[Skill]HoldPosition");
    # (Line 16) MoveUnit(All, "60 + 1n Dragoon", playerID, "Anywhere", "[Skill]HoldPosition");
    DoActions(MoveUnit(All, "60 + 1n High Templar", playerID, "Anywhere", "[Skill]HoldPosition"))
    # (Line 18) trg.Debuff_BanReturn();
    DoActions(MoveUnit(All, "60 + 1n Dragoon", playerID, "Anywhere", "[Skill]HoldPosition"))
    trg.Debuff_BanReturn()
    # (Line 19) trg.Debuff_Stop();
    trg.Debuff_Stop()
    # (Line 21) if (v.P_WaitMain[playerID] == 0)
    if EUDIf()(v.P_WaitMain[playerID] == 0):
        # (Line 22) {
        # (Line 23) if (v.P_CountMain[playerID] == 0)
        if EUDIf()(v.P_CountMain[playerID] == 0):
            # (Line 24) {
            # (Line 25) if (v.P_LoopMain[playerID] == 0)
            if EUDIf()(v.P_LoopMain[playerID] == 0):
                # (Line 26) {
                # (Line 27) trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", 32, 32);
                trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", 32, 32)
                # (Line 28) trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", 160, 0);
                trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", 160, 0)
                # (Line 29) trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", 224, 64);
                trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", 224, 64)
                # (Line 30) trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", 224, -64);
                trg.Shape_Square(playerID, 1, "60 + 1n Danimoth", 224, -64)
                # (Line 31) trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", 32, 32);
                trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", 32, 32)
                # (Line 32) trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", 160, 0);
                trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", 160, 0)
                # (Line 33) trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", 224, 64);
                trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", 224, 64)
                # (Line 34) trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", 224, -64);
                trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", 224, -64)
                # (Line 35) trg.Shape_Square(playerID, 1, "60 + 1n Archon", 64, 0);
                trg.Shape_Square(playerID, 1, "60 + 1n Archon", 64, 0)
                # (Line 36) trg.Shape_Square(playerID, 1, "60 + 1n Archon", 96, 96);
                trg.Shape_Square(playerID, 1, "60 + 1n Archon", 96, 96)
                # (Line 37) trg.Shape_Square(playerID, 1, "60 + 1n Archon", 160, 96);
                trg.Shape_Square(playerID, 1, "60 + 1n Archon", 160, 96)
                # (Line 38) trg.Shape_Square(playerID, 1, "60 + 1n Archon", 96, 160);
                trg.Shape_Square(playerID, 1, "60 + 1n Archon", 96, 160)
                # (Line 40) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 41) Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 43) KillUnitAt(All, "60 + 1n Dragoon", "Anywhere", playerID);
                DoActions(Order("60 + 1n Danimoth", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 44) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "60 + 1n Dragoon", "Anywhere", playerID))
                # (Line 46) }
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 47) else if (v.P_LoopMain[playerID] == 1)
            if EUDElseIf()(v.P_LoopMain[playerID] == 1):
                # (Line 48) {
                # (Line 49) trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", 64, 64);
                trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", 64, 64)
                # (Line 50) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 51) Move_Square(playerID, 1, "60 + 1n Siege", 64, 64);
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                Move_Square(playerID, 1, "60 + 1n Siege", 64, 64)
                # (Line 52) }
                # (Line 53) else if (v.P_LoopMain[playerID] == 2)
            if EUDElseIf()(v.P_LoopMain[playerID] == 2):
                # (Line 54) {
                # (Line 55) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                # (Line 57) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 64, 0);
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 64, 0)
                # (Line 58) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 96, 96);
                trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 96, 96)
                # (Line 59) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 160, 96);
                trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 160, 96)
                # (Line 60) trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 96, 160);
                trg.Shape_Square(playerID, 1, "40 + 1n Mojo", 96, 160)
                # (Line 61) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", 64, 0);
                trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", 64, 0)
                # (Line 62) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", 96, 96);
                trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", 96, 96)
                # (Line 63) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", 160, 96);
                trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", 160, 96)
                # (Line 64) trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", 96, 160);
                trg.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", 96, 160)
                # (Line 65) trg.Shape_Square(playerID, 1, "60 + 1n Archon", 32, 32);
                trg.Shape_Square(playerID, 1, "60 + 1n Archon", 32, 32)
                # (Line 66) trg.Shape_Square(playerID, 1, "60 + 1n Archon", 160, 0);
                trg.Shape_Square(playerID, 1, "60 + 1n Archon", 160, 0)
                # (Line 67) trg.Shape_Square(playerID, 1, "60 + 1n Archon", 224, 64);
                trg.Shape_Square(playerID, 1, "60 + 1n Archon", 224, 64)
                # (Line 68) trg.Shape_Square(playerID, 1, "60 + 1n Archon", 224, -64);
                trg.Shape_Square(playerID, 1, "60 + 1n Archon", 224, -64)
                # (Line 70) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                # (Line 71) Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 73) KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID);
                DoActions(Order("40 + 1n Mojo", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 74) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", playerID))
                # (Line 75) }
                DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID))
                # (Line 76) else if (v.P_LoopMain[playerID] == 3)
            if EUDElseIf()(v.P_LoopMain[playerID] == 3):
                # (Line 77) {
                # (Line 78) trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", 256, 0);
                trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", 256, 0)
                # (Line 79) trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", 224, 64);
                trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", 224, 64)
                # (Line 80) trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", 224, -64);
                trg.Shape_Square(playerID, 1, "50 + 1n Battlecruiser", 224, -64)
                # (Line 81) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID);
                # (Line 82) Move_Square(playerID, 1, "60 + 1n Siege", 256, 0);
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", playerID))
                Move_Square(playerID, 1, "60 + 1n Siege", 256, 0)
                # (Line 83) Move_Square(playerID, 1, "60 + 1n Siege", 224, 64);
                Move_Square(playerID, 1, "60 + 1n Siege", 224, 64)
                # (Line 84) Move_Square(playerID, 1, "60 + 1n Siege", 224, -64);
                Move_Square(playerID, 1, "60 + 1n Siege", 224, -64)
                # (Line 85) }
                # (Line 86) else if (v.P_LoopMain[playerID] == 4)
            if EUDElseIf()(v.P_LoopMain[playerID] == 4):
                # (Line 87) {
                # (Line 88) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID);
                # (Line 89) }
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", playerID))
                # (Line 90) else if (v.P_LoopMain[playerID] == 11)
            if EUDElseIf()(v.P_LoopMain[playerID] == 11):
                # (Line 91) {
                # (Line 92) epic.Shape_Square(playerID, 1, "60 + 1n Danimoth", 96, 0, 1);
                epic.Shape_Square(playerID, 1, "60 + 1n Danimoth", 96, 0, 1)
                # (Line 93) trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", 96, 0);
                trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", 96, 0)
                # (Line 94) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                # (Line 95) }
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                # (Line 96) else if (v.P_LoopMain[playerID] == 12)
            if EUDElseIf()(v.P_LoopMain[playerID] == 12):
                # (Line 97) {
                # (Line 98) epic.Shape_Square(playerID, 1, "60 + 1n Danimoth", 64, 128, 1);
                epic.Shape_Square(playerID, 1, "60 + 1n Danimoth", 64, 128, 1)
                # (Line 99) trg.Shape_Square(playerID, 1, "60 + 1n High Templar", 64, 128);
                trg.Shape_Square(playerID, 1, "60 + 1n High Templar", 64, 128)
                # (Line 100) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                # (Line 102) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                # (Line 103) MoveUnit(All, "60 + 1n High Templar", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 104) Order("60 + 1n High Templar", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "60 + 1n High Templar", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 105) }
                DoActions(Order("60 + 1n High Templar", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 106) else if (v.P_LoopMain[playerID] == 13)
            if EUDElseIf()(v.P_LoopMain[playerID] == 13):
                # (Line 107) {
                # (Line 108) epic.Shape_Square(playerID, 1, "60 + 1n Danimoth", 128, 64, 1);
                epic.Shape_Square(playerID, 1, "60 + 1n Danimoth", 128, 64, 1)
                # (Line 109) trg.Shape_Square(playerID, 1, "60 + 1n High Templar", 128, 64);
                trg.Shape_Square(playerID, 1, "60 + 1n High Templar", 128, 64)
                # (Line 110) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                # (Line 112) MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                # (Line 113) MoveUnit(All, "60 + 1n High Templar", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
                DoActions(MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere"))
                # (Line 114) Order("60 + 1n High Templar", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);
                DoActions(MoveUnit(All, "60 + 1n High Templar", playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
                # (Line 115) }
                DoActions(Order("60 + 1n High Templar", playerID, "Anywhere", Attack, v.P_LocationID[playerID]))
                # (Line 116) else if (v.P_LoopMain[playerID] == 14)
            if EUDElseIf()(v.P_LoopMain[playerID] == 14):
                # (Line 117) {
                # (Line 118) epic.Shape_Square(playerID, 1, "60 + 1n Danimoth", 160, 0, 1);
                epic.Shape_Square(playerID, 1, "60 + 1n Danimoth", 160, 0, 1)
                # (Line 119) trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", 160, 0);
                trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", 160, 0)
                # (Line 120) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                # (Line 121) }
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                # (Line 122) else if (v.P_LoopMain[playerID] == 15)
            if EUDElseIf()(v.P_LoopMain[playerID] == 15):
                # (Line 123) {
                # (Line 124) epic.Shape_Square(playerID, 1, "60 + 1n Danimoth", 160, 96, 1);
                epic.Shape_Square(playerID, 1, "60 + 1n Danimoth", 160, 96, 1)
                # (Line 125) trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", 160, 96);
                trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", 160, 96)
                # (Line 126) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                # (Line 127) }
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                # (Line 128) else if (v.P_LoopMain[playerID] == 16)
            if EUDElseIf()(v.P_LoopMain[playerID] == 16):
                # (Line 129) {
                # (Line 130) epic.Shape_Square(playerID, 1, "60 + 1n Danimoth", 96, 160, 1);
                epic.Shape_Square(playerID, 1, "60 + 1n Danimoth", 96, 160, 1)
                # (Line 131) trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", 96, 160);
                trg.Shape_Square(playerID, 1, "60 + 1n Dragoon", 96, 160)
                # (Line 132) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID);
                # (Line 133) }
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", playerID))
                # (Line 135) if (v.P_LoopMain[playerID] > 14)
            EUDEndIf()
            if EUDIf()(v.P_LoopMain[playerID] <= 14, neg=True):
                # (Line 136) {
                # (Line 137) if (v.P_LoopMain[playerID] % 2 == 0)
                if EUDIf()(v.P_LoopMain[playerID] % 2 == 0):
                    # (Line 138) {
                    # (Line 139) d = 100;
                    d << (100)
                    # (Line 141) trg.Table_Sin(playerID, 30 * v.P_LoopMain[playerID], d);
                    trg.Table_Sin(playerID, 30 * v.P_LoopMain[playerID], d)
                    # (Line 142) trg.Table_Cos(playerID, 30 * v.P_LoopMain[playerID], d);
                    trg.Table_Cos(playerID, 30 * v.P_LoopMain[playerID], d)
                    # (Line 144) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 145) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 147) trg.Shape_Square(playerID, 1, "Protoss Dark Templar", x, y);
                    trg.Shape_Square(playerID, 1, "Protoss Dark Templar", x, y)
                    # (Line 148) KillUnitAt(All, "Protoss Dark Templar", "Anywhere", playerID);
                    # (Line 149) }
                    DoActions(KillUnitAt(All, "Protoss Dark Templar", "Anywhere", playerID))
                    # (Line 150) else
                    # (Line 151) {
                if EUDElse()():
                    # (Line 152) d = 200;
                    d << (200)
                    # (Line 154) trg.Table_Sin(playerID, 30 * v.P_LoopMain[playerID], d);
                    trg.Table_Sin(playerID, 30 * v.P_LoopMain[playerID], d)
                    # (Line 155) trg.Table_Cos(playerID, 30 * v.P_LoopMain[playerID], d);
                    trg.Table_Cos(playerID, 30 * v.P_LoopMain[playerID], d)
                    # (Line 157) x = v.P_AngleCos[playerID];
                    x << (v.P_AngleCos[playerID])
                    # (Line 158) y = v.P_AngleSin[playerID];
                    y << (v.P_AngleSin[playerID])
                    # (Line 160) trg.Shape_Square(playerID, 1, " Unit. Schnee", x, y);
                    trg.Shape_Square(playerID, 1, " Unit. Schnee", x, y)
                    # (Line 161) KillUnitAt(All, " Unit. Schnee", "Anywhere", playerID);
                    # (Line 162) }
                    DoActions(KillUnitAt(All, " Unit. Schnee", "Anywhere", playerID))
                    # (Line 163) }
                EUDEndIf()
                # (Line 165) trg.Main_Wait(160);
            EUDEndIf()
            trg.Main_Wait(160)
            # (Line 167) v.P_LoopMain[playerID] += 1;
            _ARRW(v.P_LoopMain, playerID).__iadd__(1)
            # (Line 169) if (v.P_LoopMain[playerID] == 35)
            if EUDIf()(v.P_LoopMain[playerID] == 35):
                # (Line 170) {
                # (Line 171) v.P_CountMain[playerID] += 1;
                _ARRW(v.P_CountMain, playerID).__iadd__(1)
                # (Line 172) v.P_LoopMain[playerID] = 0;
                _ARRW(v.P_LoopMain, playerID) << (0)
                # (Line 173) }
                # (Line 174) }
            EUDEndIf()
            # (Line 175) else if (v.P_CountMain[playerID] == 1)
        if EUDElseIf()(v.P_CountMain[playerID] == 1):
            # (Line 176) {
            # (Line 177) KillUnitAt(All, "60 + 1n Dragoon", "Anywhere", playerID);
            # (Line 178) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "60 + 1n Dragoon", "Anywhere", playerID))
            # (Line 179) KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID);
            DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", playerID))
            # (Line 181) trg.SkillEnd();
            DoActions(KillUnitAt(All, "60 + 1n Siege", "Anywhere", playerID))
            trg.SkillEnd()
            # (Line 182) }
            # (Line 183) }
        EUDEndIf()
        # (Line 184) }
    EUDEndIf()
    # (Line 186) function Move_Square(playerID : TrgPlayer, count, unit : TrgUnit, pos_x, pos_y)

# (Line 187) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def Move_Square(playerID, count, unit, pos_x, pos_y):
    # (Line 188) if (pos_x == 0 && pos_y == 0)
    if EUDIf()(EUDSCAnd()(pos_x == 0)(pos_y == 0)()):
        # (Line 189) {
        # (Line 190) trg.Shape_Dot(playerID, count, unit, pos_x, pos_y);
        trg.Shape_Dot(playerID, count, unit, pos_x, pos_y)
        # (Line 191) }
        # (Line 192) else
        # (Line 193) {
    if EUDElse()():
        # (Line 194) trg.MoveLoc(v.P_UnitID[playerID], playerID, pos_x, pos_y);
        trg.MoveLoc(v.P_UnitID[playerID], playerID, pos_x, pos_y)
        # (Line 195) MoveUnit(count, unit, playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
        # (Line 196) trg.MoveLoc(v.P_UnitID[playerID], playerID, -pos_y, pos_x);
        DoActions(MoveUnit(count, unit, playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
        trg.MoveLoc(v.P_UnitID[playerID], playerID, -pos_y, pos_x)
        # (Line 197) MoveUnit(count, unit, playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
        # (Line 198) trg.MoveLoc(v.P_UnitID[playerID], playerID, -pos_x, -pos_y);
        DoActions(MoveUnit(count, unit, playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
        trg.MoveLoc(v.P_UnitID[playerID], playerID, -pos_x, -pos_y)
        # (Line 199) MoveUnit(count, unit, playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
        # (Line 200) trg.MoveLoc(v.P_UnitID[playerID], playerID, pos_y, -pos_x);
        DoActions(MoveUnit(count, unit, playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
        trg.MoveLoc(v.P_UnitID[playerID], playerID, pos_y, -pos_x)
        # (Line 201) MoveUnit(count, unit, playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
        # (Line 202) }
        DoActions(MoveUnit(count, unit, playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]))
        # (Line 203) }
    EUDEndIf()
