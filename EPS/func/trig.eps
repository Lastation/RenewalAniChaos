import PluginVariables as msqcvar;
import variable as v;

/***
 * @Type
 * F
 * @Summary.ko-KR
 * 캐릭터에게 리콜이펙트를 줄때 사용합니다.
***/
function Effect_Recall()
{
	var playerID = getcurpl();
	MoveLocation(v.P_HoldLocation[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
	
	if (Switch(53 + playerID, Cleared))
	{ SetSwitch(53 + playerID, Set); }
}

/***
 * @Type
 * F
 * @Summary.ko-KR
 * 캐릭터의 쉴드의 양을 설정할 때 사용합니다.
 * [amount]은 캐릭터의 쉴드의 양을 정할 때 사용합니다.
 * @param.amount.ko-KR
 * [amount] : 실드의 양 입니다. 0 ~ 100의 정수를 입력해주세요.
***/
function Buff_ShieldFix(amount : TrgCount)
{
	var playerID = getcurpl();
	v.P_Shield[playerID] = amount;
	ModifyUnitShields(1, v.P_UnitID[playerID], playerID, "Anywhere", amount);
}

/***
 * @Type
 * F
 * @Summary.ko-KR
 * 캐릭터의 이동속도를 저하 시킬때 사용합니다.
***/
function Debuff_Slow()
{
	var playerID = getcurpl();
	MoveLocation(v.P_HoldLocation[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
	CreateUnit(1, "Zerg Devourer", "[Skill]Unit_Wait_8", playerID);
	SetInvincibility(Enable, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL");
	MoveUnit(1, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL", v.P_HoldLocation[playerID]);
	RemoveUnitAt(1, "Zerg Devourer", "Anywhere", playerID);
}

/***
 * @Type
 * F
 * @Summary.ko-KR
 * 캐릭터의 이동속도를 저하 시킬때 사용합니다.
***/
function Debuff_SlowPlayer(playerID : TrgPlayer)
{
	MoveLocation(v.P_HoldLocation[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
	CreateUnit(1, "Zerg Devourer", "[Skill]Unit_Wait_8", playerID);
	SetInvincibility(Enable, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL");
	MoveUnit(1, "Zerg Devourer", playerID, "[Skill]Unit_Wait_ALL", v.P_HoldLocation[playerID]);
	RemoveUnitAt(1, "Zerg Devourer", "Anywhere", playerID);
}

/***
 * @Type
 * F
 * @Summary.ko-KR
 * 캐릭터를 못움직이게 할 때 사용합니다.
***/
function Debuff_Stop()
{
	var playerID = getcurpl();
	Debuff_Slow();
	Order(v.P_UnitID[playerID], playerID, "Anywhere", Move, v.P_HoldLocation[playerID]);
}

/***
 * @Type
 * F
 * @Summary.ko-KR
 * 캐릭터를 못움직이게 할 때 사용합니다.
***/
function Debuff_StopPlayer(playerID : TrgPlayer)
{
	Debuff_SlowPlayer(playerID);
	Order(v.P_UnitID[playerID], playerID, "Anywhere", Move, v.P_HoldLocation[playerID]);
}

/***
 * @Type
 * F
 * @Summary.ko-KR
 * 캐릭터를 귀환 못하게 할 때 사용합니다.
***/
function Debuff_BanReturn()
{
	KillUnit("Protoss Observer", getcurpl());
}

/***
 * @Type
 * F
 * @Summary.ko-KR
 * 캐릭터를 귀환 못하게 할 때 사용합니다.
***/
function Debuff_BanReturnPlayer(playerID : TrgPlayer)
{
	KillUnit("Protoss Observer", playerID);
}

/***
 * @Type
 * F
 * @Summary.ko-KR
 * 동맹상태를 설정할때 사용합니다.
 * [state]는 동맹 상태를 설정할때 사용합니다.
 * @param.state.ko-KR
 * [state] 0 - 컴퓨터와 적대
 * [state] 1 - 컴퓨터와 동맹
***/
function ComputerAlly(state : TrgCount)
{
	var playerID = getcurpl();
	
	if (state == 0)
	{ 
		if (playerID < 3) 	SetAllianceStatus(P8, Enemy);
		else 			SetAllianceStatus(P7, Enemy);
	}
	else if 	(state == 1)	{ SetAllianceStatus(P7, Ally); SetAllianceStatus(P8, Ally); }
}

/***
 * @Type
 * F
 * @Summary.ko-KR
 * 스킬의 대기시간을 줄때 사용합니다.
 * [wait]은 ms기준입니다. 1000ms = 1sec 입니다.
 * @param.wait.ko-KR
 * [wait] : 기다릴 시간입니다. 1000당 1초를 기다립니다.
***/
function Main_Wait(wait : TrgCount)
{
	v.P_WaitMain[getcurpl()] = wait / 83 + 1;
}

/***
 * @Type
 * F
 * @Summary.ko-KR
 * 스킬의 대기시간을 줄때 사용합니다. 2개이상 곂치는 이펙트를 줄때 사용합니다.
 * [wait]은 ms기준입니다. 1000ms = 1sec 입니다.
 * @param.wait.ko-KR
 * [wait] : 기다릴 시간입니다. 1000당 1초를 기다립니다.
***/
function Sub1_Wait(wait : TrgCount)
{
	v.P_WaitSub1[getcurpl()] = wait / 83 + 1;
}

/***
 * @Type
 * F
 * @Summary.ko-KR
 * 스킬의 대기시간을 줄때 사용합니다. 3개이상 곂치는 이펙트를 줄때 사용합니다.
 * [wait]은 ms기준입니다. 1000ms = 1sec 입니다.
 * @param.wait.ko-KR
 * [wait] : 기다릴 시간입니다. 1000당 1초를 기다립니다.
***/
function Sub2_Wait(wait : TrgCount)
{
	v.P_WaitSub2[getcurpl()] = wait / 83 + 1;
}

/***
 * @Type
 * F
 * @Summary.ko-KR
 * 스킬이 끝났을때 사용합니다.
***/
function SkillEnd()
{
	var playerID = getcurpl();
	
	v.P_CountMain[playerID] = 999;
	
	if (v.P_Ally[playerID] == 1)
	{
	       SetSwitch("ComputerAlliy", Clear);
	       if (playerID < 3) 			{ SetAllianceStatus(P8, Enemy); }
		else if (playerID >= 3)	{ SetAllianceStatus(P7, Enemy); }
		v.P_Ally[playerID] = 0;
	}
}

/***
 * @Type
 * F
 * @Summary.ko-KR
 * 스킬의 대기시간을 적용할때 사용합니다. [사용X]
***/
function Main_WaitLoop()
{
	var playerID = getcurpl();
	
	// Main Wait Time
	if 		(v.P_WaitMain[playerID] >= 1) { v.P_WaitMain[playerID] -= 1; }
	// Sub Wait Time
	if 		(v.P_WaitSub1[playerID] >= 1) { v.P_WaitSub1[playerID] -= 1; }
	if 		(v.P_WaitSub2[playerID] >= 1) { v.P_WaitSub2[playerID] -= 1; }
	
	// End Wait Time
	if 		(v.P_SkillDelay[playerID] >= 2) 
	{ v.P_SkillDelay[playerID] -= 1; }
	else if 	(v.P_SkillDelay[playerID] == 1)
	{
		if (Switch(53 + playerID, Set))
		{ SetSwitch(53 + playerID, Clear); }
		
		v.P_SkillDelay[playerID] = 0;
		v.P_Step[playerID] = 0; 
		v.P_Shield[playerID] = 0;
		ModifyUnitShields(1, v.P_UnitID[playerID], playerID, "Anywhere", 0);
	}
	
	if (v.P_WaitMain[playerID] == 0)
	{
		if 		(v.P_CountMain[playerID] == 999) 	{ Main_Wait(500); v.P_CountMain[playerID] = 1000; }
		else if 	(v.P_CountMain[playerID] == 1000) 	{ v.P_CountMain[playerID] = 0; v.P_LoopMain[playerID] = 0; v.P_SkillDelay[playerID] = 12; }
	}
}

/***
 * @Type
 * F
 * @Summary.ko-KR
 * X좌표를 거리에서 각도만큼 이동시킨 위치를 구할때 사용합니다.
 * [distance]에 [degree]를 곱하여 X좌표의 거리를 구합니다.
 * @param.playerID.ko-KR
 * [playerID] : 호출할 플레이어의 아이디입니다.
 * @param.degree.ko-KR
 * [degree] : 각도의 크기입니다.
 * @param.distance.ko-KR
 * [distance] : 각도로부터 곱할 거리입니다.
***/
function Table_Cos(playerID : TrgPlayer, degree, distance)
{
	degree = degree % 360;
	v.P_AngleCos[playerID] = v.P_Table_Cos[degree];
	
	if (v.P_AngleCos[playerID] > 2147483648)
	{
		v.P_AngleCos[playerID] = -v.P_AngleCos[playerID];
		v.P_AngleCos[playerID] = (v.P_AngleCos[playerID] * distance) / 100;
		v.P_AngleCos[playerID] = -v.P_AngleCos[playerID];
	}
	else
	{ v.P_AngleCos[playerID] = (v.P_AngleCos[playerID] * distance) / 100; }
}

/***
 * @Type
 * F
 * @Summary.ko-KR
 * Y좌표를 거리에서 각도만큼 이동시킨 위치를 구할때 사용합니다.
 * [distance]에 [degree]를 곱하여 Y좌표의 거리를 구합니다.
 * @param.playerID.ko-KR
 * [playerID] : 호출할 플레이어의 아이디입니다.
 * @param.degree.ko-KR
 * [degree] : 각도의 크기입니다.
 * @param.distance.ko-KR
 * [distance] : 각도로부터 곱할 거리입니다.
***/
function Table_Sin(playerID : TrgPlayer, degree, distance)
{
	degree = degree % 360;
	v.P_AngleSin[playerID] = v.P_Table_Sin[degree];
	
	if (v.P_AngleSin[playerID] > 2147483648)
	{
		v.P_AngleSin[playerID] = -v.P_AngleSin[playerID];
		v.P_AngleSin[playerID] = (v.P_AngleSin[playerID] * distance) / 100;
		v.P_AngleSin[playerID] = -v.P_AngleSin[playerID];
	}
	else
	{ v.P_AngleSin[playerID] = (v.P_AngleSin[playerID] * distance) / 100; }
}

/***
 * @Type
 * F
 * @Summary.ko-KR
 * 로케이션을 이동시킬때 사용합니다. [사용 X]
 * [playerID]의 [unit]를 기준으로 [pos_x], [pos_y] 만큼 캐릭터 로케이션을 이동합니다.
 * @param.unit.ko-KR
 * [unit] : 기준이 될 유닛을 정합니다.
 * @param.playerID.ko-KR
 * [playerID] : 유닛의 소유자를 정합니다.
 * @param.pos_x.ko-KR
 * [pos_x] : 이동할 X좌표의 크기입니다.
 * @param.pos_y.ko-KR
 * [pos_y] : 이동할 Y좌표의 크기입니다.
***/
function MoveLoc(unit : TrgUnit, playerID : TrgPlayer, pos_x, pos_y)
{
	MoveLocation(v.P_LocationID[playerID], unit, playerID, "Anywhere");
	addloc(v.P_LocationID[playerID], pos_x, pos_y);
}

/***
 * @Type
 * F
 * @Summary.ko-KR
 * 유닛을 생성할때 사용합니다. [사용 X]
 * [playerID]의 [unit]을 캐릭터 로케이션에 [count]만큼 생성합니다.
 * @param.playerID.ko-KR
 * [playerID] : 유닛의 소유자를 정합니다.
 * @param.count.ko-KR
 * [count] : 생성될 유닛의 갯수를 정합니다.
 * @param.unit.ko-KR
 * [unit] : 생성될 유닛을 정합니다.
***/
function SkillUnit(playerID : TrgPlayer, count, unit : TrgUnit)
{
	CreateUnit(count, unit, dwrand() % 8 + 33, playerID);
	SetInvincibility(Enable, unit, playerID, "Anywhere");
	MoveUnit(count, unit, playerID, "[Skill]Unit_Wait_ALL", v.P_LocationID[playerID]);
}

/***
 * @Type
 * F
 * @Summary.ko-KR
 * 점을 그릴때 사용합니다.
 * [playerID]의 캐릭터를 기준으로 [pos_x], [pos_y] 만큼 로케이션을 이동한후 해당위치에 [unit]을 [count]만큼 생성합니다.
 * @param.playerID.ko-KR
 * [playerID] : 유닛의 소유자를 정합니다.
 * @param.count.ko-KR
 * [count] : 생성될 유닛의 갯수를 정합니다.
 * @param.unit.ko-KR
 * [unit] : 생성될 유닛을 정합니다.
 * @param.pos_x.ko-KR
 * [pos_x] : 이동할 X좌표의 크기입니다.
 * @param.pos_y.ko-KR
 * [pos_y] : 이동할 Y좌표의 크기입니다.
***/
function Shape_Dot(playerID : TrgPlayer, count, unit : TrgUnit, pos_x, pos_y)
{
	MoveLoc(v.P_UnitID[playerID], playerID, pos_x, pos_y);
	SkillUnit(playerID, count, unit);
}

/***
 * @Type
 * F
 * @Summary.ko-KR
 * 두점을 그릴때 사용합니다.
 * [playerID]의 캐릭터를 기준으로 [pos_x], [pos_y] 만큼 로케이션을 이동한후 해당위치에 [unit]을 [count]만큼 생성합니다.
 * ex) pos_x = 5, pos_y = 3 일때, [5, 3], [-3, -5]가 그려집니다.
 * @param.playerID.ko-KR
 * [playerID] : 유닛의 소유자를 정합니다.
 * @param.count.ko-KR
 * [count] : 생성될 유닛의 갯수를 정합니다.
 * @param.unit.ko-KR
 * [unit] : 생성될 유닛을 정합니다.
 * @param.pos_x.ko-KR
 * [pos_x] : 이동할 X좌표의 크기입니다.
 * @param.pos_y.ko-KR
 * [pos_y] : 이동할 Y좌표의 크기입니다.
***/
function Shape_Double(playerID : TrgPlayer, count, unit : TrgUnit, pos_x, pos_y)
{
	Shape_Dot(playerID, count, unit, pos_x, pos_y);
	Shape_Dot(playerID, count, unit, -pos_x, -pos_y);
}

/***
 * @Type
 * F
 * @Summary.ko-KR
 * 사각형을 그릴때 사용합니다. 각 꼭지점에 유닛이 생성됩니다.
 * [playerID]의 캐릭터를 기준으로 [pos_x], [pos_y] 만큼 로케이션을 이동한후 해당위치에 [unit]을 [count]만큼 생성합니다.
 * 사각형으로 출력됩니다. 
 * ex) pos_x = 5, pos_y = 3 일때, [5, 3], [-3, 5], [-5, -3], [3, -5]
 * @param.playerID.ko-KR
 * [playerID] : 유닛의 소유자를 정합니다.
 * @param.count.ko-KR
 * [count] : 생성될 유닛의 갯수를 정합니다.
 * @param.unit.ko-KR
 * [unit] : 생성될 유닛을 정합니다.
 * @param.pos_x.ko-KR
 * [pos_x] : 이동할 X좌표의 크기입니다.
 * @param.pos_y.ko-KR
 * [pos_y] : 이동할 Y좌표의 크기입니다.
***/
function Shape_Square(playerID : TrgPlayer, count, unit : TrgUnit, pos_x, pos_y)
{
	if (pos_x == 0 && pos_y == 0)
	{
		Shape_Dot(playerID, count, unit, pos_x, pos_y);
	}
	else
	{
		MoveLoc(v.P_UnitID[playerID], playerID, pos_x, pos_y);
		SkillUnit(playerID, count, unit);
		MoveLoc(v.P_UnitID[playerID], playerID, -pos_y, pos_x);
		SkillUnit(playerID, count, unit);
		MoveLoc(v.P_UnitID[playerID], playerID, -pos_x, -pos_y);
		SkillUnit(playerID, count, unit);
		MoveLoc(v.P_UnitID[playerID], playerID, pos_y, -pos_x);
		SkillUnit(playerID, count, unit);
	}
}

/***
 * @Type
 * F
 * @Summary.ko-KR
 * 정사각형을 그릴때 사용합니다. 꽉찬 사각형이 그려집니다.
 * [playerID]의 캐릭터를 기준으로 [size]크기 만큼의 정사각형에 [unit]을 [interval]마다 [count]개 생성합니다.
 * ex) size = 3, count = 2 일때, 3 x 3 크기의 정사각형이 생성되며 총 (3 x 3) x 2 [(size x size) x count] 개의 유닛이 생성됩니다.
 * @param.playerID.ko-KR
 * [playerID] : 유닛의 소유자를 정합니다.
 * @param.count.ko-KR
 * [count] : 생성될 유닛의 갯수를 정합니다.
 * @param.unit.ko-KR
 * [unit] : 생성될 유닛을 정합니다.
 * @param.size.ko-KR
 * [size] : 사각형의 크기입니다.
 * @param.interval.ko-KR
 * [interval] : 사각형안의 유닛마다의 거리입니다.
***/
function Shape_NxNSquare(playerID : TrgPlayer, count, unit : TrgUnit, size, interval)
{
	var loop = (size * size) / 4;
	var space = interval / 2;
	var dis_x, dis_y;
	
	if (size == 1)
	{ 
		Shape_Dot(playerID, count, unit, 0, 0);
	}
	else if (size > 1)
	{
		foreach(idx : EUDLoopRange(loop))
		{
			if (size % 2 == 0)
			{
				dis_x = idx % (size / 2) + 1;
				dis_y = idx / (size / 2) + 1;
				if (dis_x == 1)
				{ Shape_Square(playerID, count, unit, space, dis_y * interval - space); }
				else if (dis_y == 1)
				{ Shape_Square(playerID, count, unit, dis_x * interval - space, space); }
				else 
				{ Shape_Square(playerID, count, unit, dis_x * interval - space, dis_y * interval - space); }
			}
			else if (size % 2 == 1)
			{
				dis_x = idx % (size / 2);
				dis_y = idx / (size / 2);
				
				if (idx == 0)
				{ Shape_Dot(playerID, count, unit, 0, 0); }
				else if (dis_y == 0)
				{ Shape_Square(playerID, count, unit, dis_x * interval, 0); }
				else
				{ Shape_Square(playerID, count, unit, dis_x * interval + interval, dis_y * interval); }
				
				if (idx == loop - 1)
				{ Shape_Square(playerID, count, unit, (size / 2) * interval, 0); }
			}
		}
	}
}

/***
 * @Type
 * F
 * @Summary.ko-KR
 * 직선을 그릴때 사용합니다.
 * [playerID]의 캐릭터를 기준으로 [size]크기 만큼의 직선을 [degree]만큼 기울이며 [unit]을 [interval]마다 [degree] x [distance]만큼 이동하여 [count]개 생성합니다.
 * ex) size = 3, count = 2 일때, 3 크기의 직선이 생성되며 총 3 x 2 [size x count] 개의 유닛이 생성됩니다.
 * @param.playerID.ko-KR
 * [playerID] : 유닛의 소유자를 정합니다.
 * @param.count.ko-KR
 * [count] : 생성될 유닛의 갯수를 정합니다.
 * @param.unit.ko-KR
 * [unit] : 생성될 유닛을 정합니다.
 * @param.degree.ko-KR
 * [degree] : 직선의 기울기입니다.
 * @param.size.ko-KR
 * [size] : 직선의 크기입니다.
 * @param.interval.ko-KR
 * [interval] : 직선의 유닛마다의 거리입니다.
 * @param.distance.ko-KR
 * [distance] : 기울기 만큼 떨어진 위치를 정합니다. 캐릭터 위에 직선을 그릴 시 0 입니다.
***/
function Shape_Line(playerID : TrgPlayer, count, unit : TrgUnit, degree, size, interval, distance)
{
	Table_Sin(playerID, degree + 90, distance);
	Table_Cos(playerID, degree + 90, distance);
	
	var initial_x = v.P_AngleCos[playerID];
	var initial_y = v.P_AngleSin[playerID];
	
	if (size % 2 == 0)
	{ Table_Sin(playerID, degree, interval * (size / 2) - interval / 2); Table_Cos(playerID, degree, interval * (size / 2) - interval / 2); }
	else
	{ Table_Sin(playerID, degree, interval * (size / 2)); Table_Cos(playerID, degree, interval * (size / 2)); }
	
	initial_x = initial_x + v.P_AngleCos[playerID];
	initial_y = initial_y + v.P_AngleSin[playerID];
	
	Table_Sin(playerID, degree, interval);
	Table_Cos(playerID, degree, interval);
	
	if (size == 1)
	{ Shape_Dot(playerID, count, unit, 0, 0); }
	else if (size > 1)
	{ foreach(idx : EUDLoopRange(size)) { Shape_Dot(playerID, count, unit, initial_x - idx * v.P_AngleCos[playerID], initial_y - idx * v.P_AngleSin[playerID]); } }
}

/***
 * @Type
 * F
 * @Summary.ko-KR
 * 십자를 그릴때 사용합니다.
 * [playerID]의 캐릭터를 기준으로 [size]크기 만큼의 십자를 [degree]만큼 기울이며 [unit]을 [interval]마다 [degree] x [distance]만큼 이동하여 [count]개 생성합니다.
 * ex) size = 3, count = 2 일때, 3 크기의 십자가 생성되며 총 3 x 2 x 2 [size x 2 x count] 개의 유닛이 생성됩니다.
 * @param.playerID.ko-KR
 * [playerID] : 유닛의 소유자를 정합니다.
 * @param.count.ko-KR
 * [count] : 생성될 유닛의 갯수를 정합니다.
 * @param.unit.ko-KR
 * [unit] : 생성될 유닛을 정합니다.
 * @param.degree.ko-KR
 * [degree] : 십자의 기울기입니다.
 * @param.size.ko-KR
 * [size] : 십자의 크기입니다.
 * @param.interval.ko-KR
 * [interval] : 십자의 유닛마다의 거리입니다.
***/
function Shape_Cross(playerID : TrgPlayer, count, unit : TrgUnit, degree, size, interval)
{
	var distance = interval / 2;

	Table_Sin(playerID, degree, distance);
	Table_Cos(playerID, degree, distance);
	
	var gradient_x = v.P_AngleCos[playerID] / 2;
	var gradient_y = v.P_AngleSin[playerID] / 2;
	
	var angle_x, angle_y;
	
	Table_Sin(playerID, degree, interval);
	Table_Cos(playerID, degree, interval);
	
	if (size == 1)
	{
		Shape_Dot(playerID, count, unit, 0, 0);
	}
	else if (size > 1)
	{
		foreach(idx : EUDLoopRange(size))
		{
			angle_x = v.P_AngleCos[playerID] * idx;
			angle_y = v.P_AngleSin[playerID] * idx;
			
			if (idx == 0)
			{ Shape_Dot(playerID, count, unit, 0, 0); }
			else
			{ Shape_Square(playerID, count, unit, angle_x, angle_y); }
		}
	}
}

/***
 * @Type
 * F
 * @Summary.ko-KR
 * 외곽선만 가진 정사각형을 그릴떄 사용합니다. 기본적으로 45도 기울어져 있습니다.
 * [playerID]의 캐릭터를 기준으로 [size]크기 만큼의 정사각형을 [degree]만큼 기울이며 [unit]을 [interval]만큼 이동하여 [count]개 생성합니다.
 * ex) size = 3, count = 2 일때, 3 크기의 정사각형이 생성되며 총 3 x 4 x 2 - 4 [size x 4 x count - 4] 개의 유닛이 생성됩니다.
 * @param.playerID.ko-KR
 * [playerID] : 유닛의 소유자를 정합니다.
 * @param.count.ko-KR
 * [count] : 생성될 유닛의 갯수를 정합니다.
 * @param.unit.ko-KR
 * [unit] : 생성될 유닛을 정합니다.
 * @param.degree.ko-KR
 * [degree] : 정사각형의 기울기입니다.
 * @param.size.ko-KR
 * [size] : 한변당 유닛의 갯수입니다.
 * @param.interval.ko-KR
 * [interval] : 정사각형의 크기입니다.
***/
function Shape_Edge(playerID : TrgPlayer, count, unit : TrgUnit, degree, size, interval)
{
	Table_Sin(playerID, degree, interval * 14 / 10);
	Table_Cos(playerID, degree, interval * 14 / 10);
	
	var x_o = v.P_AngleCos[playerID];
	var y_o = v.P_AngleSin[playerID];

	var distance = (interval * 2) / (size - 1);

	Table_Sin(playerID, degree + 45, distance);
	Table_Cos(playerID, degree + 45, distance);

	var distance_x = v.P_AngleCos[playerID];
	var distance_y = v.P_AngleSin[playerID];
   
	if (size == 1)
	{ Shape_Dot(playerID, 1, unit, 0, 0); }
	else if (size > 1)
	{ foreach(idx : EUDLoopRange(size - 1)) { Shape_Square(playerID, 1, unit, x_o - (distance_x * idx), y_o - (distance_y * idx)); } }
}


function Shape_Circle(playerID : TrgPlayer, count, unit : TrgUnit, degree, n, radius)
{
	if (n == 1) {
		Shape_Dot(playerID, 1, unit, 0, 0); 
	} else {
		foreach(idx : EUDLoopRange(n)) {
			Table_Sin(playerID, degree + 360 / n * idx, radius);
			Table_Cos(playerID, degree + 360 / n * idx, radius);
			
			Shape_Dot(playerID, count, unit, v.P_AngleCos[playerID], v.P_AngleSin[playerID]); 
		}
	}
}

function ResizeLocation(playerID : TrgPlayer, x, y)
{
      var location = EPD(0x58DC4C) + v.P_LocationID[playerID] * 5;
      var bozo_location = EPD(0x58DC4C) + v.P_HoldLocation[playerID] * 5;

      var unit = 32;
      
      x = x * unit / 2 - unit;
      y = y * unit / 2 - unit;

      dwwrite_epd(location + 0, dwread_epd(bozo_location + 0) - x <= 0 ? 0 : dwread_epd(bozo_location + 0) - x);
      dwwrite_epd(location + 2, dwread_epd(bozo_location + 2) + x >= 8192 ? 8192 : dwread_epd(bozo_location + 2) + x);
      dwwrite_epd(location + 1, dwread_epd(bozo_location + 1) - y <= 0 ? 0 : dwread_epd(bozo_location + 1) - y);
      dwwrite_epd(location + 3, dwread_epd(bozo_location + 3) + y >= 6146 ? 6146 : dwread_epd(bozo_location + 3) + y);
}

/***
 * @Type
 * F
 * @Summary.ko-KR
 * size 내의 적의 스킬 유닛을 파괴합니다.
 * @param.playerID.ko-KR
 * [playerID] : 사용자를 정합니다.
 * @param.size.ko-KR
 * [size] : 파괴 크기입니다.
 * @param.isDestroyOnUltimate.ko-KR
 * [isDestroyOnUltimate] : 테러궁 사용 중에도 파괴하는지입니다.
 * 0 - 테러궁 사용 중에는 파괴하지 않습니다.
 * 1 - 테러궁 사용 중에도 파괴합니다.
***/
function KillEnemySkillUnit(playerID : TrgPlayer, size, isDestroyOnUltimate)
{
	ResizeLocation(playerID, size, size);
	MoveLoc(v.P_UnitID[playerID], playerID, 0, 0);
      if (isDestroyOnUltimate == 1)
      {
            KillUnitAt(All, "80 + 1n Goliath", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "80 + 1n Vulture", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "80 + 1n Marine", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "80 + 1n Tom Kazansky", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "80 + 1n Tank", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "80 + 1n Mutalisk", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "80 + 1n Guardian", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "80 + 1n Artanis", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "80 + 1n Ghost", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "100 + 1n Hyperion", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "100 + 1n Dragoon", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "120 + 1n Archon", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "130 + 1n Norad", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "130 + 1n Arbiter", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "40 + 1n Marine", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "40 + 1n Ghost", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "80 + 1n Vulture", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "40 + 1n Goliath", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "40 + 1n Wraith", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "40 + 1n Firebat", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "40 + 1n Zergling", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, " Creep. Licht", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "40 + 1n Drone", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "40 + 1n Mutalisk", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "40 + 1n Guardian", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "60 + 1n High Templar", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "40 + 3n Zeratul", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "40 + 1n Mojo", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "40 + 1n Gantrithor", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "40 + 1n Lurker", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "50 + 1n Tank", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "50 + 1n Battlecruiser", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "60 + 3n Siege", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "60 + 1n Siege", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "60 + 1n Hydralisk", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "60 + 1n Dragoon", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "60 + 1n High Templar", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "60 + 1n Archon", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "60 + 1n Danimoth", v.P_LocationID[playerID], Foes);
            KillUnitAt(All, "60 + 3n Ghost", v.P_LocationID[playerID], Foes);
      }
      else
      {
            if (Switch("UiltimateSwitch", Cleared)) 
            {
                  KillUnitAt(All, "80 + 1n Goliath", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "80 + 1n Vulture", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "80 + 1n Marine", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "80 + 1n Tom Kazansky", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "80 + 1n Tank", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "80 + 1n Mutalisk", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "80 + 1n Guardian", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "80 + 1n Artanis", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "80 + 1n Ghost", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "100 + 1n Hyperion", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "100 + 1n Dragoon", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "120 + 1n Archon", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "130 + 1n Norad", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "130 + 1n Arbiter", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "40 + 1n Marine", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "40 + 1n Ghost", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "80 + 1n Vulture", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "40 + 1n Goliath", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "40 + 1n Wraith", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "40 + 1n Firebat", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "40 + 1n Zergling", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, " Creep. Licht", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "40 + 1n Drone", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "40 + 1n Mutalisk", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "40 + 1n Guardian", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "60 + 1n High Templar", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "40 + 3n Zeratul", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "40 + 1n Mojo", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "40 + 1n Gantrithor", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "40 + 1n Lurker", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "50 + 1n Tank", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "50 + 1n Battlecruiser", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "60 + 3n Siege", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "60 + 1n Siege", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "60 + 1n Hydralisk", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "60 + 1n Dragoon", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "60 + 1n High Templar", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "60 + 1n Archon", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "60 + 1n Danimoth", v.P_LocationID[playerID], Foes);
                  KillUnitAt(All, "60 + 3n Ghost", v.P_LocationID[playerID], Foes);
            }
      }
}

function Bullet_Setting(playerID : TrgPlayer, targetPlayer : TrgPlayer, targetUnit : TrgUnit, speed) 
{
      	var location = EPD(0x58DC4C) + v.P_LocationID[playerID] * 5;
      
      //타겟 위치 설정
	MoveLocation(v.P_LocationID[playerID], targetUnit, targetPlayer, "Anywhere");

	v.B_TargetPos_X[playerID] = (dwread_epd(location + 0) + dwread_epd(location + 2)) / 2;
	v.B_TargetPos_Y[playerID] = (dwread_epd(location + 1) + dwread_epd(location + 3)) / 2;
	
	//탄알 속도 설정
	v.B_Speed[playerID] = speed;
	
	//탄알 현재 위치 캐싱
	MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
	
	v.B_BulletPos_X[playerID] = (dwread_epd(location + 0) + dwread_epd(location + 2)) / 2;
	v.B_BulletPos_Y[playerID] = (dwread_epd(location + 1) + dwread_epd(location + 3)) / 2;
	
	//단위 벡터 계산
	var degree = atan2(v.B_TargetPos_Y[playerID] - v.B_BulletPos_Y[playerID], v.B_TargetPos_X[playerID] - v.B_BulletPos_X[playerID]);
	
	Table_Cos(playerID, degree, 50);
	Table_Sin(playerID, degree, 50);
	
	v.B_Delta_X[playerID] = v.P_AngleCos[playerID];
	v.B_Delta_Y[playerID] = v.P_AngleSin[playerID];
	
	//초기화
	v.B_IsHit[playerID] = 0;
}

//타겟 설정 시점과 발사 시점이 다를 경우 사용 (초기 발사 위치 설정)
function Bullet_OnFire(playerID : TrgPlayer) 
{
      	var location = EPD(0x58DC4C) + v.P_LocationID[playerID] * 5;
	
	//탄알 현재 위치 캐싱
	MoveLocation(v.P_LocationID[playerID], v.P_UnitID[playerID], playerID, "Anywhere");
	
	v.B_BulletPos_X[playerID] = (dwread_epd(location + 0) + dwread_epd(location + 2)) / 2;
	v.B_BulletPos_Y[playerID] = (dwread_epd(location + 1) + dwread_epd(location + 3)) / 2;
	
	//단위 벡터 계산
	var degree = atan2(v.B_TargetPos_Y[playerID] - v.B_BulletPos_Y[playerID], v.B_TargetPos_X[playerID] - v.B_BulletPos_X[playerID]);
	
	Table_Cos(playerID, degree, 50);
	Table_Sin(playerID, degree, 50);
	
	v.B_Delta_X[playerID] = v.P_AngleCos[playerID];
	v.B_Delta_Y[playerID] = v.P_AngleSin[playerID];
}


function Bullet_Fire(playerID : TrgPlayer, unit : TrgUnit)
{
	if (v.B_IsHit[playerID] == 0)
	{		
		//탄이 맞았는지 체크
		var dif_X = v.B_BulletPos_X[playerID] - v.B_TargetPos_X[playerID];
		var dif_Y = v.B_BulletPos_Y[playerID] - v.B_TargetPos_Y[playerID];
		
		var distance = sqrt(dif_X * dif_X + dif_Y * dif_Y);
		
		if (distance <= v.B_Speed[playerID] * 50)
		{
			v.B_IsHit[playerID] = 1;
		} 
		else
		{
			//탄이 현재 있어야 하는 위치로 로케이션 이동
		     	dwwrite_epd(v.P_LocationID[playerID] + 0, v.B_BulletPos_X[playerID] - 32);
	      		dwwrite_epd(v.P_LocationID[playerID] + 2, v.B_BulletPos_X[playerID] + 32);
	      		dwwrite_epd(v.P_LocationID[playerID] + 1, v.B_BulletPos_Y[playerID] - 32);
	      		dwwrite_epd(v.P_LocationID[playerID] + 3, v.B_BulletPos_Y[playerID] + 32);
			
			//탄 궤적 그리기
			for (var i = 0; i < v.B_Speed[playerID]; i++) 
			{
				addloc(v.P_LocationID[playerID], v.B_Delta_X[playerID], v.B_Delta_Y[playerID]);
				SkillUnit(playerID, 1, unit);
			}
			KillUnitAt(All, unit, "Anywhere", playerID);
			
			//다음 틱 탄 위치 계산
			v.B_BulletPos_X[playerID] += v.B_Speed[playerID] * v.B_Delta_X[playerID];
			v.B_BulletPos_Y[playerID] += v.B_Speed[playerID] * v.B_Delta_Y[playerID];
		}
	}
}

function MoveLocToBulletTargetPos(playerID : TrgPlayer)
{
	//탄이 현재 있어야 하는 위치로 로케이션 이동
     	dwwrite_epd(v.P_LocationID[playerID] + 0, v.B_TargetPos_X[playerID] - 32);
	dwwrite_epd(v.P_LocationID[playerID] + 2, v.B_TargetPos_X[playerID] + 32);
	dwwrite_epd(v.P_LocationID[playerID] + 1, v.B_TargetPos_Y[playerID] - 32);
	dwwrite_epd(v.P_LocationID[playerID] + 3, v.B_TargetPos_Y[playerID] + 32);
}

