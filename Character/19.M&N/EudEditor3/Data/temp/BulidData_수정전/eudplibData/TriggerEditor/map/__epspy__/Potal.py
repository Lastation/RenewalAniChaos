## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) function CreatePotal()
# (Line 2) {
@EUDTracedFunc
def CreatePotal():
    # (Line 3) CreateUnit(1, "Terran Beacon", "Potal 01", P7);
    # (Line 4) CreateUnit(1, "Terran Beacon", "Potal 02", P7);
    EUDTraceLog(3)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 01", P7))
    # (Line 5) CreateUnit(1, "Terran Beacon", "Potal 03", P7);
    EUDTraceLog(4)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 02", P7))
    # (Line 6) CreateUnit(1, "Terran Beacon", "Potal 04", P7);
    EUDTraceLog(5)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 03", P7))
    # (Line 7) CreateUnit(1, "Terran Beacon", "Potal 05", P7);
    EUDTraceLog(6)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 04", P7))
    # (Line 8) CreateUnit(1, "Terran Beacon", "Potal 06", P7);
    EUDTraceLog(7)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 05", P7))
    # (Line 9) CreateUnit(1, "Terran Beacon", "Potal 07", P7);
    EUDTraceLog(8)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 06", P7))
    # (Line 10) CreateUnit(1, "Terran Beacon", "Potal 10", P7);
    EUDTraceLog(9)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 07", P7))
    # (Line 11) CreateUnit(1, "Terran Beacon", "Potal 12", P7);
    EUDTraceLog(10)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 10", P7))
    # (Line 12) CreateUnit(1, "Terran Beacon", "Potal 13", P7);
    EUDTraceLog(11)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 12", P7))
    # (Line 13) CreateUnit(1, "Terran Beacon", "Potal 14", P7);
    EUDTraceLog(12)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 13", P7))
    # (Line 14) CreateUnit(1, "Terran Beacon", "Potal 15", P7);
    EUDTraceLog(13)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 14", P7))
    # (Line 15) CreateUnit(1, "Terran Beacon", "Potal 16", P7);
    EUDTraceLog(14)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 15", P7))
    # (Line 16) CreateUnit(1, "Terran Beacon", "Potal 17", P7);
    EUDTraceLog(15)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 16", P7))
    # (Line 17) CreateUnit(1, "Terran Beacon", "Potal 18", P7);
    EUDTraceLog(16)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 17", P7))
    # (Line 18) CreateUnit(1, "Terran Beacon", "Potal 20", P7);
    EUDTraceLog(17)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 18", P7))
    # (Line 19) CreateUnit(1, "Terran Beacon", "Potal 21", P7);
    EUDTraceLog(18)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 20", P7))
    # (Line 20) CreateUnit(1, "Terran Beacon", "Potal 22", P7);
    EUDTraceLog(19)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 21", P7))
    # (Line 21) CreateUnit(1, "Terran Beacon", "Potal 23", P7);
    EUDTraceLog(20)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 22", P7))
    # (Line 22) CreateUnit(1, "Terran Beacon", "Potal 24", P7);
    EUDTraceLog(21)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 23", P7))
    # (Line 23) CreateUnit(1, "Terran Beacon", "Potal 25", P7);
    EUDTraceLog(22)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 24", P7))
    # (Line 24) CreateUnit(1, "Terran Beacon", "Potal 26", P7);
    EUDTraceLog(23)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 25", P7))
    # (Line 25) CreateUnit(1, "Terran Beacon", "Potal 27", P7);
    EUDTraceLog(24)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 26", P7))
    # (Line 26) CreateUnit(1, "Terran Beacon", "Potal 28", P7);
    EUDTraceLog(25)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 27", P7))
    # (Line 27) CreateUnit(1, "Terran Beacon", "Potal 29", P7);
    EUDTraceLog(26)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 28", P7))
    # (Line 28) CreateUnit(1, "Terran Beacon", "Potal 30", P7);
    EUDTraceLog(27)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 29", P7))
    # (Line 29) CreateUnit(1, "Terran Beacon", "Potal 31", P7);
    EUDTraceLog(28)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 30", P7))
    # (Line 30) CreateUnit(1, "Terran Beacon", "Potal 32", P7);
    EUDTraceLog(29)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 31", P7))
    # (Line 31) CreateUnit(1, "Terran Beacon", "Potal 33", P7);
    EUDTraceLog(30)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 32", P7))
    # (Line 32) CreateUnit(1, "Terran Beacon", "Potal 34", P7);
    EUDTraceLog(31)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 33", P7))
    # (Line 33) }
    EUDTraceLog(32)
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 34", P7))
