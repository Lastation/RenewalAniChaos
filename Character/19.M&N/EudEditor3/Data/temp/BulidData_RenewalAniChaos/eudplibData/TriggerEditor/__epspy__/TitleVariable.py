## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) const Enable_Title_Num  = PVariable();	// 사용 가능한 타이틀 번호
Enable_Title_Num = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 3) const Title_Max 			= PVariable();	// 타이틀 최대치
Title_Max = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 4) const View_Title_Now	= PVariable();	// 현재 타이틀 보는 위치
View_Title_Now = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 5) const View_Title 			= PVariable();	// 타이틀 Bool 닫고 키기
View_Title = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 6) const Select_Title		= PVariable();	// 선택한 타이틀
Select_Title = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 7) const View_Title_Num = 5;				// 한번에 보여줄 타이틀 갯수
View_Title_Num = _CGFW(lambda: [5], 1)[0]
# (Line 9) const Title_Name_Front 	= PVariable();	// 플레이어 앞 닉네임
Title_Name_Front = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 10) const Title_Name_End 	= PVariable();	// 플레이어 뒤 닉네임
Title_Name_End = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 12) const Total_Exp_Title =
# (Line 13) [Db("루키 "),
# (Line 14) Db("초보 "),
# (Line 15) Db("비상하는 "),
# (Line 16) Db("나아가는 "),
# (Line 17) Db("열정있는 "),
# (Line 18) Db("환상적인 "),
# (Line 19) Db("하다보니 "),
# (Line 20) Db("영광스런 "),
# (Line 21) Db("베테랑 "),
# (Line 22) Db("무언가 이상한 "),
# (Line 23) Db("새로운 경지의 "),
# (Line 24) Db("스트레칭하는 "),
# (Line 25) Db("명예 "),
# (Line 26) Db("잠들지 못하는 "),
# (Line 27) Db("정복자 "),
# (Line 28) Db("레전드 오브 "),
# (Line 29) Db("숨겨왔던 "),
# (Line 30) Db("신비로운 "),
# (Line 31) Db("이것이 "),
# (Line 32) Db("백전의 "),
# (Line 33) Db("Ranker ")];
Total_Exp_Title = _CGFW(lambda: [_ARR(FlattenList([Db("루키 "), Db("초보 "), Db("비상하는 "), Db("나아가는 "), Db("열정있는 "), Db("환상적인 "), Db("하다보니 "), Db("영광스런 "), Db("베테랑 "), Db("무언가 이상한 "), Db("새로운 경지의 "), Db("스트레칭하는 "), Db("명예 "), Db("잠들지 못하는 "), Db("정복자 "), Db("레전드 오브 "), Db("숨겨왔던 "), Db("신비로운 "), Db("이것이 "), Db("백전의 "), Db("Ranker ")]))], 1)[0]
# (Line 35) const Total_Exp_Need = [500,1000,2500,5000,7500,10000,20000,25000,30000,35000,40000,45000,50000,55000,60000,65000,70000,75000,80000,90000,100000];
Total_Exp_Need = _CGFW(lambda: [_ARR(FlattenList([500, 1000, 2500, 5000, 7500, 10000, 20000, 25000, 30000, 35000, 40000, 45000, 50000, 55000, 60000, 65000, 70000, 75000, 80000, 90000, 100000]))], 1)[0]
# (Line 37) const Total_Kill_Title =
# (Line 38) [Db("킬러 "),
# (Line 39) Db("사냥꾼 "),
# (Line 40) Db("슬레이어 "),
# (Line 41) Db("실력자 "),
# (Line 42) Db("파괴자 "),
# (Line 43) Db("복수자 "),
# (Line 44) Db("철저한 "),
# (Line 45) Db("호전적인 "),
# (Line 46) Db("777! "),
# (Line 47) Db("앨리트 "),
# (Line 48) Db("괴수 "),
# (Line 49) Db("환상적인 "),
# (Line 50) Db("섬멸하는 자 "),
# (Line 51) Db("패자 "),
# (Line 52) Db("해결사 "),
# (Line 53) Db("차단하는 자 "),
# (Line 54) Db("무질서한 "),
# (Line 55) Db("마왕 "),
# (Line 56) Db("해방자 "),
# (Line 57) Db("가드너 "),
# (Line 58) Db("Revenger ")];
Total_Kill_Title = _CGFW(lambda: [_ARR(FlattenList([Db("킬러 "), Db("사냥꾼 "), Db("슬레이어 "), Db("실력자 "), Db("파괴자 "), Db("복수자 "), Db("철저한 "), Db("호전적인 "), Db("777! "), Db("앨리트 "), Db("괴수 "), Db("환상적인 "), Db("섬멸하는 자 "), Db("패자 "), Db("해결사 "), Db("차단하는 자 "), Db("무질서한 "), Db("마왕 "), Db("해방자 "), Db("가드너 "), Db("Revenger ")]))], 1)[0]
# (Line 60) const Total_Kill_Need = [50,100,200,300,400,500,600,700,777,800,900,1000,2000,3000,4000,5000,6000,7000,8000,9000,10000];
Total_Kill_Need = _CGFW(lambda: [_ARR(FlattenList([50, 100, 200, 300, 400, 500, 600, 700, 777, 800, 900, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]))], 1)[0]
# (Line 62) const Total_CS_Title =
# (Line 63) [Db("이불 없는 "),
# (Line 64) Db("신문 덮은 "),
# (Line 65) Db("노숙자 "),
# (Line 66) Db("골라잡는 "),
# (Line 67) Db("클리너 "),
# (Line 68) Db("수전노 "),
# (Line 69) Db("의욕넘치는 "),
# (Line 70) Db("파괴범 "),
# (Line 71) Db("무시무시한 "),
# (Line 72) Db("탐내는 자 "),
# (Line 73) Db("체이서 "),
# (Line 74) Db("터트리는 자 "),
# (Line 75) Db("수집가 "),
# (Line 76) Db("연금술사 "),
# (Line 77) Db("탐욕적인 "),
# (Line 78) Db("역대급 "),
# (Line 79) Db("감각적인 "),
# (Line 80) Db("Desire "),
# (Line 81) Db("Madness "),
# (Line 82) Db("VIP "),
# (Line 83) Db("VVIP ")];
Total_CS_Title = _CGFW(lambda: [_ARR(FlattenList([Db("이불 없는 "), Db("신문 덮은 "), Db("노숙자 "), Db("골라잡는 "), Db("클리너 "), Db("수전노 "), Db("의욕넘치는 "), Db("파괴범 "), Db("무시무시한 "), Db("탐내는 자 "), Db("체이서 "), Db("터트리는 자 "), Db("수집가 "), Db("연금술사 "), Db("탐욕적인 "), Db("역대급 "), Db("감각적인 "), Db("Desire "), Db("Madness "), Db("VIP "), Db("VVIP ")]))], 1)[0]
# (Line 85) const Total_CS_Need = [2000,4000,6000,10000,20000,30000,40000,50000,60000,70000,80000,90000,100000,120000,140000,160000,180000,200000,300000,400000,500000];
Total_CS_Need = _CGFW(lambda: [_ARR(FlattenList([2000, 4000, 6000, 10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000, 120000, 140000, 160000, 180000, 200000, 300000, 400000, 500000]))], 1)[0]
