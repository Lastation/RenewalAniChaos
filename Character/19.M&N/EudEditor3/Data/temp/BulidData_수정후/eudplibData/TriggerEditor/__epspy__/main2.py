## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) const s = StringBuffer(1000);
s = _CGFW(lambda: [StringBuffer(1000)], 1)[0]
# (Line 2) const UnsawnTimber 	= PVariable();
UnsawnTimber = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 3) const Timber 		= PVariable();
Timber = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 4) const IronOre 		= PVariable();
IronOre = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 5) const keyC = PVariable();
keyC = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 6) const keyI = PVariable();
keyI = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 7) const keyZ = PVariable();
keyZ = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 8) const keyX = PVariable();
keyX = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 9) const Goblin = EUDArray(5);
Goblin = _CGFW(lambda: [EUDArray(5)], 1)[0]
# (Line 11) const num = PVariable();
num = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 12) const page = PVariable();
page = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 14) var spawnLocGoblin 		= 0;
spawnLocGoblin = EUDCreateVariables(1)
_IGVA([spawnLocGoblin], lambda: [0])
# (Line 15) var spawnLocBiter 		= 0;
spawnLocBiter = EUDCreateVariables(1)
_IGVA([spawnLocBiter], lambda: [0])
# (Line 16) var spawnLocOrc 		= 0;
spawnLocOrc = EUDCreateVariables(1)
_IGVA([spawnLocOrc], lambda: [0])
# (Line 17) var spawnLocLamia 		= 0;
spawnLocLamia = EUDCreateVariables(1)
_IGVA([spawnLocLamia], lambda: [0])
# (Line 18) var spawnLocFang 		= 0;
spawnLocFang = EUDCreateVariables(1)
_IGVA([spawnLocFang], lambda: [0])
# (Line 19) var spawnLocOger 		= 0;
spawnLocOger = EUDCreateVariables(1)
_IGVA([spawnLocOger], lambda: [0])
# (Line 20) var spawnLocSkeleton 	= 0;
spawnLocSkeleton = EUDCreateVariables(1)
_IGVA([spawnLocSkeleton], lambda: [0])
# (Line 21) var spawnLocLIch 		= 0;
spawnLocLIch = EUDCreateVariables(1)
_IGVA([spawnLocLIch], lambda: [0])
# (Line 23) const locGoblinX 	= EUDArray(10);
locGoblinX = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 24) const locGoblinY 	= EUDArray(10);
locGoblinY = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 25) const locBiterX 	= EUDArray(10);
locBiterX = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 26) const locBiterY 	= EUDArray(10);
locBiterY = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 27) const locLamiaX 	= EUDArray(10);
locLamiaX = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 28) const locLamiaY 	= EUDArray(10);
locLamiaY = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 29) const locOrcX 		= EUDArray(10);
locOrcX = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 30) const locOrcY 		= EUDArray(10);
locOrcY = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 31) const locFangX 		= EUDArray(10);
locFangX = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 32) const locFangY 		= EUDArray(10);
locFangY = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 33) const locOgerX 		= EUDArray(10);
locOgerX = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 34) const locOgerY 		= EUDArray(10);
locOgerY = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 35) const locSkeletonX 	= EUDArray(10);
locSkeletonX = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 36) const locSkeletonY 	= EUDArray(10);
locSkeletonY = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 37) const locLichX 		= EUDArray(10);
locLichX = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 38) const locLichY	 	= EUDArray(10);
locLichY = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 40) var temp = 0;
temp = EUDCreateVariables(1)
_IGVA([temp], lambda: [0])
# (Line 42) const nameInventory = EUDArray(24 * 6);
nameInventory = _CGFW(lambda: [EUDArray(24 * 6)], 1)[0]
# (Line 43) const amountInventory = EUDArray(24 * 6);
amountInventory = _CGFW(lambda: [EUDArray(24 * 6)], 1)[0]
# (Line 45) const userCharacter = PVariable();
userCharacter = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 46) const userLevel 	= PVariable();
userLevel = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 47) const userExp 		= PVariable();
userExp = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 48) const userJob		= PVariable();
userJob = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 49) const userGold 		= PVariable();
userGold = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 50) const userMaxHp		= PVariable();
userMaxHp = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 51) const userMaxMP		= PVariable();
userMaxMP = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 52) const userCurMP		= PVariable();
userCurMP = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 53) const userAtk		= PVariable();
userAtk = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 54) const userDef		= PVariable();
userDef = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 55) const userWeapon	= PVariable();
userWeapon = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 56) const userArmor 	= PVariable();
userArmor = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 57) const userUseHPptn	= PVariable();
userUseHPptn = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 58) const userUesMPptn	= PVariable();
userUesMPptn = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 59) const userError 	= PVariable();
userError = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 61) const isAlive 		= PVariable();
isAlive = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 63) const openedInven 	= PVariable();
openedInven = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 64) const openedSetting = PVariable();
openedSetting = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 65) const openedQuest 	= PVariable();
openedQuest = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 67) const MaxExp = [10, 20, 30, 40, 50, 60, 70, 80, 90];
MaxExp = _CGFW(lambda: [_ARR(FlattenList([10, 20, 30, 40, 50, 60, 70, 80, 90]))], 1)[0]
# (Line 69) const maxInventorySlot = 24;
maxInventorySlot = _CGFW(lambda: [24], 1)[0]
# (Line 71) object Item {
# (Line 72) var name;
class Item(EUDStruct):
    # (Line 73) var price;
    # (Line 74) var content;
    # (Line 75) var max;
    # (Line 76) };
    # (Line 78) const itemUnsawnTimber 	= Item();
    _fields_ = [
        'name',
        'price',
        'content',
        'max',
    ]

itemUnsawnTimber = _CGFW(lambda: [Item()], 1)[0]
# (Line 79) const itemTimber 		= Item();
itemTimber = _CGFW(lambda: [Item()], 1)[0]
# (Line 80) const itemIronOre 		= Item();
itemIronOre = _CGFW(lambda: [Item()], 1)[0]
# (Line 83) function NewCharacter()
# (Line 84) {
@EUDFunc
def NewCharacter():
    # (Line 85) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 87) userLevel[cp] = 1;
    _ARRW(userLevel, cp) << (1)
    # (Line 88) userMaxHp[cp] = 320;
    _ARRW(userMaxHp, cp) << (320)
    # (Line 89) userJob[cp] = 1;
    _ARRW(userJob, cp) << (1)
    # (Line 90) userCharacter[cp] = epdread_epd(EPD(0x628438));
    _ARRW(userCharacter, cp) << (f_epdread_epd(EPD(0x628438)))
    # (Line 92) switch(cp)
    EUDSwitch(cp)
    # (Line 93) {
    # (Line 94) case 0:
    _t1 = EUDSwitchCase()
    # (Line 95) dwwrite(0x65FD00 + 9808 + 0 * 4, userMaxHp[getcurpl()] * 256);
    if _t1(0):
        f_dwwrite(0x65FD00 + 9808 + 0 * 4, userMaxHp[f_getcurpl()] * 256)
        # (Line 96) CreateUnit(1, "Terran Marine", "Start", CurrentPlayer);
        # (Line 97) break;
        DoActions(CreateUnit(1, "Terran Marine", "Start", CurrentPlayer))
        EUDBreak()
        # (Line 98) case 1:
    _t2 = EUDSwitchCase()
    # (Line 99) CreateUnit(1, "Terran Ghost", "Start", CurrentPlayer);
    if _t2(1):
        # (Line 100) break;
        DoActions(CreateUnit(1, "Terran Ghost", "Start", CurrentPlayer))
        EUDBreak()
        # (Line 101) case 2:
    _t3 = EUDSwitchCase()
    # (Line 102) CreateUnit(1, "Sarah Kerrigan", "Start", CurrentPlayer);
    if _t3(2):
        # (Line 103) break;
        DoActions(CreateUnit(1, "Sarah Kerrigan", "Start", CurrentPlayer))
        EUDBreak()
        # (Line 104) }
    # (Line 106) s.print("\x04플레이어들의 유닛을 생성합니다.");
    EUDEndSwitch()
    s.print("\x04플레이어들의 유닛을 생성합니다.")
    # (Line 108) isAlive[cp] = 1;
    _ARRW(isAlive, cp) << (1)
    # (Line 109) }
    # (Line 111) function PrintGetItem(name, amount)

# (Line 112) {
@EUDFunc
def PrintGetItem(name, amount):
    # (Line 114) s.print("\x0E◈ \x17", ptr2s(name), " \x04+ ", amount);
    s.print("\x0E◈ \x17", ptr2s(name), " \x04+ ", amount)
    # (Line 115) }
    # (Line 117) function AddItem(percent, name, amount)

# (Line 118) {
@EUDFunc
def AddItem(percent, name, amount):
    # (Line 119) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 120) const m = maxInventorySlot;
    m = maxInventorySlot
    # (Line 122) for(var i = 0; i < m; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= m, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 123) {
        # (Line 124) if(strcmp(name, nameInventory[m * cp + i]) == 0)
        if EUDIf()(f_strcmp(name, nameInventory[m * cp + i]) == 0):
            # (Line 125) {
            # (Line 126) amountInventory[m * cp + i] += amount;
            _ARRW(amountInventory, m * cp + i).__iadd__(amount)
            # (Line 128) return;
            EUDReturn()
            # (Line 129) }
            # (Line 130) }
        EUDEndIf()
        # (Line 132) for(var i = 0; i < m; i++)
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= m, neg=True):
        def _t5():
            i.__iadd__(1)
        # (Line 133) {
        # (Line 134) if(amountInventory[m * cp + i] == 0)
        if EUDIf()(amountInventory[m * cp + i] == 0):
            # (Line 135) {
            # (Line 136) nameInventory[m * cp + i] = name;
            _ARRW(nameInventory, m * cp + i) << (name)
            # (Line 137) amountInventory[m * cp + i] = amount;
            _ARRW(amountInventory, m * cp + i) << (amount)
            # (Line 142) switch(name)
            EUDSwitch(name)
            # (Line 143) {
            # (Line 144) case itemUnsawnTimber.name:
            _t7 = EUDSwitchCase()
            # (Line 145) UnsawnTimber[cp] += amount;
            if _t7(itemUnsawnTimber.name):
                _ARRW(UnsawnTimber, cp).__iadd__(amount)
                # (Line 146) break;
                EUDBreak()
                # (Line 147) }
            # (Line 148) s.print(UnsawnTimber[cp]);
            EUDEndSwitch()
            s.print(UnsawnTimber[cp])
            # (Line 149) PrintGetItem(name, amount);
            PrintGetItem(name, amount)
            # (Line 150) return;
            EUDReturn()
            # (Line 151) }
            # (Line 152) else s.print("\x17◈ \x04인벤토리가 가득 찼습니다.");
        if EUDElse()():
            s.print("\x17◈ \x04인벤토리가 가득 찼습니다.")
            # (Line 153) }
        EUDEndIf()
        # (Line 154) }
        EUDSetContinuePoint()
        _t5()
    EUDEndWhile()
    # (Line 156) function KeyCheck()

# (Line 157) {
@EUDFunc
def KeyCheck():
    # (Line 158) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 159) const keyType = dwread_epd(11 * 12 + cp);
    keyType = f_dwread_epd(11 * 12 + cp)
    # (Line 160) return keyType;
    EUDReturn(keyType)
    # (Line 161) }
    # (Line 162) function KillCheck()

# (Line 163) {
@EUDFunc
def KillCheck():
    # (Line 164) if(Kills(CurrentPlayer, AtLeast, 1, "Zerg Drone"))
    if EUDIf()(Kills(CurrentPlayer, AtLeast, 1, "Zerg Drone")):
        # (Line 165) {
        # (Line 166) SetKills(CurrentPlayer, Subtract, 1, "Zerg Drone");
        # (Line 168) }
        DoActions(SetKills(CurrentPlayer, Subtract, 1, "Zerg Drone"))
        # (Line 169) if(Kills(CurrentPlayer, AtLeast, 1, "Zerg Broodling"))
    EUDEndIf()
    if EUDIf()(Kills(CurrentPlayer, AtLeast, 1, "Zerg Broodling")):
        # (Line 170) {
        # (Line 171) SetKills(CurrentPlayer, Subtract, 1, "Zerg Broodling");
        # (Line 173) }
        DoActions(SetKills(CurrentPlayer, Subtract, 1, "Zerg Broodling"))
        # (Line 174) if(Kills(CurrentPlayer, AtLeast, 1, "Zerg Zergling"))
    EUDEndIf()
    if EUDIf()(Kills(CurrentPlayer, AtLeast, 1, "Zerg Zergling")):
        # (Line 175) {
        # (Line 176) SetKills(CurrentPlayer, Subtract, 1, "Zerg Zergling");
        # (Line 178) }
        DoActions(SetKills(CurrentPlayer, Subtract, 1, "Zerg Zergling"))
        # (Line 179) if(Kills(CurrentPlayer, AtLeast, 1, "Zerg Hydralisk"))
    EUDEndIf()
    if EUDIf()(Kills(CurrentPlayer, AtLeast, 1, "Zerg Hydralisk")):
        # (Line 180) {
        # (Line 181) SetKills(CurrentPlayer, Subtract, 1, "Zerg Hydralisk");
        # (Line 183) }
        DoActions(SetKills(CurrentPlayer, Subtract, 1, "Zerg Hydralisk"))
        # (Line 184) if(Kills(CurrentPlayer, AtLeast, 1, "Zerg Defiler"))
    EUDEndIf()
    if EUDIf()(Kills(CurrentPlayer, AtLeast, 1, "Zerg Defiler")):
        # (Line 185) {
        # (Line 186) SetKills(CurrentPlayer, Subtract, 1, "Zerg Defiler");
        # (Line 188) }
        DoActions(SetKills(CurrentPlayer, Subtract, 1, "Zerg Defiler"))
        # (Line 189) if(Kills(CurrentPlayer, AtLeast, 1, "Devouring One (Zergling)"))
    EUDEndIf()
    if EUDIf()(Kills(CurrentPlayer, AtLeast, 1, "Devouring One (Zergling)")):
        # (Line 190) {
        # (Line 191) SetKills(CurrentPlayer, Subtract, 1, "Devouring One (Zergling)");
        # (Line 193) }
        DoActions(SetKills(CurrentPlayer, Subtract, 1, "Devouring One (Zergling)"))
        # (Line 194) if(Kills(CurrentPlayer, AtLeast, 1, "Protoss Zealot"))
    EUDEndIf()
    if EUDIf()(Kills(CurrentPlayer, AtLeast, 1, "Protoss Zealot")):
        # (Line 195) {
        # (Line 196) SetKills(CurrentPlayer, Subtract, 1, "Protoss Zealot");
        # (Line 198) }
        DoActions(SetKills(CurrentPlayer, Subtract, 1, "Protoss Zealot"))
        # (Line 199) }
    EUDEndIf()
    # (Line 202) function SetAlliance()

# (Line 203) {
@EUDFunc
def SetAlliance():
    # (Line 204) if(getcurpl() < 6)
    if EUDIf()(f_getcurpl() >= 6, neg=True):
        # (Line 205) {
        # (Line 206) SetAllianceStatus(P1, Ally);
        # (Line 207) SetAllianceStatus(P2, Ally);
        DoActions(SetAllianceStatus(P1, Ally))
        # (Line 208) SetAllianceStatus(P3, Ally);
        DoActions(SetAllianceStatus(P2, Ally))
        # (Line 209) SetAllianceStatus(P4, Ally);
        DoActions(SetAllianceStatus(P3, Ally))
        # (Line 210) SetAllianceStatus(P5, Ally);
        DoActions(SetAllianceStatus(P4, Ally))
        # (Line 211) SetAllianceStatus(P6, Ally);
        DoActions(SetAllianceStatus(P5, Ally))
        # (Line 212) SetAllianceStatus(P7, Ally);
        DoActions(SetAllianceStatus(P6, Ally))
        # (Line 213) }
        DoActions(SetAllianceStatus(P7, Ally))
        # (Line 214) if(getcurpl() == 6)
    EUDEndIf()
    if EUDIf()(f_getcurpl() == 6):
        # (Line 215) {
        # (Line 216) SetAllianceStatus(P1, Ally);
        # (Line 217) SetAllianceStatus(P2, Ally);
        DoActions(SetAllianceStatus(P1, Ally))
        # (Line 218) SetAllianceStatus(P3, Ally);
        DoActions(SetAllianceStatus(P2, Ally))
        # (Line 219) SetAllianceStatus(P4, Ally);
        DoActions(SetAllianceStatus(P3, Ally))
        # (Line 220) SetAllianceStatus(P5, Ally);
        DoActions(SetAllianceStatus(P4, Ally))
        # (Line 221) SetAllianceStatus(P6, Ally);
        DoActions(SetAllianceStatus(P5, Ally))
        # (Line 222) SetAllianceStatus(P8, Ally);
        DoActions(SetAllianceStatus(P6, Ally))
        # (Line 223) }
        DoActions(SetAllianceStatus(P8, Ally))
        # (Line 224) if(getcurpl() == 7)
    EUDEndIf()
    if EUDIf()(f_getcurpl() == 7):
        # (Line 225) {
        # (Line 226) SetAllianceStatus(P7, Ally);
        # (Line 227) }
        DoActions(SetAllianceStatus(P7, Ally))
        # (Line 228) }
    EUDEndIf()
    # (Line 230) function GoblinSpawn()

# (Line 231) {
@EUDFunc
def GoblinSpawn():
    # (Line 232) for(var i = 0; i < 5; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 5, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 233) {
        # (Line 234) if(Goblin[i] == 0)
        if EUDIf()(Goblin[i] == 0):
            # (Line 235) {
            # (Line 236) Goblin[i] = epdread_epd(EPD(0x628438));
            _ARRW(Goblin, i) << (f_epdread_epd(EPD(0x628438)))
            # (Line 237) CreateUnit(1, "Zerg Zergling", "Start", P1);
            # (Line 238) }
            DoActions(CreateUnit(1, "Zerg Zergling", "Start", P1))
            # (Line 240) if(bread_epd(Goblin[i] + 0x04D / 4,  0x04D % 4) == 0)
        EUDEndIf()
        if EUDIf()(f_bread_epd(Goblin[i] + 0x04D // 4, 0x04D % 4) == 0):
            # (Line 241) {
            # (Line 242) Goblin[i] = 0;
            _ARRW(Goblin, i) << (0)
            # (Line 243) }
            # (Line 244) }
        EUDEndIf()
        # (Line 245) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 246) function SetEtcItemInfo()

# (Line 247) {
@EUDFunc
def SetEtcItemInfo():
    # (Line 248) itemUnsawnTimber.name 		= Db("원목");
    _ATTW(itemUnsawnTimber, 'name') << (Db("원목"))
    # (Line 249) itemUnsawnTimber.price 		= 20;
    _ATTW(itemUnsawnTimber, 'price') << (20)
    # (Line 250) itemUnsawnTimber.content 	= Db("");
    _ATTW(itemUnsawnTimber, 'content') << (Db(""))
    # (Line 251) itemUnsawnTimber.max 		= 50;
    _ATTW(itemUnsawnTimber, 'max') << (50)
    # (Line 253) itemTimber.name 			= Db("목재");
    _ATTW(itemTimber, 'name') << (Db("목재"))
    # (Line 254) itemTimber.price 			= 20;
    _ATTW(itemTimber, 'price') << (20)
    # (Line 255) itemTimber.content 			= Db("");
    _ATTW(itemTimber, 'content') << (Db(""))
    # (Line 256) itemTimber.max				= 50;
    _ATTW(itemTimber, 'max') << (50)
    # (Line 258) itemIronOre.name 			= Db("철광석");
    _ATTW(itemIronOre, 'name') << (Db("철광석"))
    # (Line 259) itemIronOre.price 			= 20;
    _ATTW(itemIronOre, 'price') << (20)
    # (Line 260) itemIronOre.content 		= Db("");
    _ATTW(itemIronOre, 'content') << (Db(""))
    # (Line 261) itemIronOre.max				= 99;
    _ATTW(itemIronOre, 'max') << (99)
    # (Line 262) }
    # (Line 264) function CreatePotal()

# (Line 265) {
@EUDFunc
def CreatePotal():
    # (Line 266) CreateUnit(1, "Terran Beacon", "Potal 01", P7);
    # (Line 267) CreateUnit(1, "Terran Beacon", "Potal 02", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 01", P7))
    # (Line 268) CreateUnit(1, "Terran Beacon", "Potal 03", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 02", P7))
    # (Line 269) CreateUnit(1, "Terran Beacon", "Potal 04", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 03", P7))
    # (Line 270) CreateUnit(1, "Terran Beacon", "Potal 05", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 04", P7))
    # (Line 271) CreateUnit(1, "Terran Beacon", "Potal 06", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 05", P7))
    # (Line 272) CreateUnit(1, "Terran Beacon", "Potal 07", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 06", P7))
    # (Line 273) CreateUnit(1, "Terran Beacon", "Potal 10", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 07", P7))
    # (Line 274) CreateUnit(1, "Terran Beacon", "Potal 12", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 10", P7))
    # (Line 275) CreateUnit(1, "Terran Beacon", "Potal 13", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 12", P7))
    # (Line 276) CreateUnit(1, "Terran Beacon", "Potal 14", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 13", P7))
    # (Line 277) CreateUnit(1, "Terran Beacon", "Potal 15", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 14", P7))
    # (Line 278) CreateUnit(1, "Terran Beacon", "Potal 16", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 15", P7))
    # (Line 279) CreateUnit(1, "Terran Beacon", "Potal 17", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 16", P7))
    # (Line 280) CreateUnit(1, "Terran Beacon", "Potal 18", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 17", P7))
    # (Line 281) CreateUnit(1, "Terran Beacon", "Potal 20", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 18", P7))
    # (Line 282) CreateUnit(1, "Terran Beacon", "Potal 21", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 20", P7))
    # (Line 283) CreateUnit(1, "Terran Beacon", "Potal 22", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 21", P7))
    # (Line 284) CreateUnit(1, "Terran Beacon", "Potal 23", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 22", P7))
    # (Line 285) CreateUnit(1, "Terran Beacon", "Potal 24", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 23", P7))
    # (Line 286) CreateUnit(1, "Terran Beacon", "Potal 25", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 24", P7))
    # (Line 287) CreateUnit(1, "Terran Beacon", "Potal 26", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 25", P7))
    # (Line 288) CreateUnit(1, "Terran Beacon", "Potal 27", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 26", P7))
    # (Line 289) CreateUnit(1, "Terran Beacon", "Potal 28", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 27", P7))
    # (Line 290) CreateUnit(1, "Terran Beacon", "Potal 29", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 28", P7))
    # (Line 291) CreateUnit(1, "Terran Beacon", "Potal 30", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 29", P7))
    # (Line 292) CreateUnit(1, "Terran Beacon", "Potal 31", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 30", P7))
    # (Line 293) CreateUnit(1, "Terran Beacon", "Potal 32", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 31", P7))
    # (Line 294) CreateUnit(1, "Terran Beacon", "Potal 33", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 32", P7))
    # (Line 295) CreateUnit(1, "Terran Beacon", "Potal 34", P7);
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 33", P7))
    # (Line 296) }
    DoActions(CreateUnit(1, "Terran Beacon", "Potal 34", P7))
    # (Line 298) function SetHealth(Cunit, modify: TrgModifier, val)

# (Line 299) {
@EUDTypedFunc([None, TrgModifier, None])
def SetHealth(Cunit, modify, val):
    # (Line 300) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 301) SetMemoryEPD(userCharacter[cp] + 0x008 / 4, modify, val * 256);
    # (Line 303) if(MemoryEPD(userCharacter[cp] + 0x008 / 4, AtLeast, userMaxHp[cp] * 256))
    DoActions(SetMemoryEPD(userCharacter[cp] + 0x008 // 4, modify, val * 256))
    if EUDIf()(MemoryEPD(userCharacter[cp] + 0x008 // 4, AtLeast, userMaxHp[cp] * 256)):
        # (Line 304) {
        # (Line 305) SetMemoryEPD(userCharacter[cp] + 0x008 / 4, SetTo, userMaxHp[cp] * 256);
        # (Line 306) }
        DoActions(SetMemoryEPD(userCharacter[cp] + 0x008 // 4, SetTo, userMaxHp[cp] * 256))
        # (Line 307) }
    EUDEndIf()
    # (Line 309) function Heal()

# (Line 310) {
@EUDFunc
def Heal():
    # (Line 311) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 312) SetMemoryEPD(userCharacter[cp] + 0x008 / 4, SetTo, userMaxHp[cp] * 256);
    # (Line 313) }
    DoActions(SetMemoryEPD(userCharacter[cp] + 0x008 // 4, SetTo, userMaxHp[cp] * 256))
    # (Line 315) function LevelCheck()

# (Line 316) {
@EUDFunc
def LevelCheck():
    # (Line 317) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 318) if(userExp[cp] >= MaxExp[userLevel[cp] - 1] && userLevel[cp] < 100)
    if EUDIf()(EUDSCAnd()(userExp[cp] >= MaxExp[userLevel[cp] - 1])(userLevel[cp] >= 100, neg=True)()):
        # (Line 319) {
        # (Line 320) userExp[cp] -= MaxExp[userLevel[cp] - 1];
        _ARRW(userExp, cp).__isub__(MaxExp[userLevel[cp] - 1])
        # (Line 321) userLevel[cp] += 1;
        _ARRW(userLevel, cp).__iadd__(1)
        # (Line 322) }
        # (Line 323) }
    EUDEndIf()
    # (Line 325) function MobSpawnLocationCheck()

# (Line 326) {
@EUDFunc
def MobSpawnLocationCheck():
    # (Line 328) temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Zerg Drone", "Anywhere")'));
    temp << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "Zerg Drone", "Anywhere")')))
    # (Line 329) SetVariables(spawnLocGoblin, temp);
    SetVariables(spawnLocGoblin, temp)
    # (Line 331) temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Zerg Broodling", "Anywhere")'));
    temp << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "Zerg Broodling", "Anywhere")')))
    # (Line 332) SetVariables(spawnLocBiter, temp);
    SetVariables(spawnLocBiter, temp)
    # (Line 334) temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Zerg Zergling", "Anywhere")'));
    temp << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "Zerg Zergling", "Anywhere")')))
    # (Line 335) SetVariables(spawnLocOrc, temp);
    SetVariables(spawnLocOrc, temp)
    # (Line 337) temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Zerg Hydralisk", "Anywhere")'));
    temp << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "Zerg Hydralisk", "Anywhere")')))
    # (Line 338) SetVariables(spawnLocLamia, temp);
    SetVariables(spawnLocLamia, temp)
    # (Line 340) temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Zerg Defiler", "Anywhere")'));
    temp << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "Zerg Defiler", "Anywhere")')))
    # (Line 341) SetVariables(spawnLocFang, temp);
    SetVariables(spawnLocFang, temp)
    # (Line 343) temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Devouring One (Zergling)", "Anywhere")'));
    temp << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "Devouring One (Zergling)", "Anywhere")')))
    # (Line 344) SetVariables(spawnLocOger, temp);
    SetVariables(spawnLocOger, temp)
    # (Line 346) temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Protoss Zealot", "Anywhere")'));
    temp << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "Protoss Zealot", "Anywhere")')))
    # (Line 347) SetVariables(spawnLocSkeleton, temp);
    SetVariables(spawnLocSkeleton, temp)
    # (Line 349) temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Protoss High Templar", "Anywhere")'));
    temp << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "Protoss High Templar", "Anywhere")')))
    # (Line 350) SetVariables(spawnLocLIch, temp);
    SetVariables(spawnLocLIch, temp)
    # (Line 352) for(var i = 0; i < spawnLocGoblin; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= spawnLocGoblin, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 353) {
        # (Line 354) if(Bring(P7, Exactly, 0, "Zerg Drone", "Anywhere")) break;
        if EUDIf()(Bring(P7, Exactly, 0, "Zerg Drone", "Anywhere")):
            EUDBreak()
            # (Line 355) MoveLocation("CreateMonster", "Zerg Drone", P7, "Anywhere");
        EUDEndIf()
        # (Line 356) RemoveUnitAt(1, "Zerg Drone", "CreateMonster", P7);
        DoActions(MoveLocation("CreateMonster", "Zerg Drone", P7, "Anywhere"))
        # (Line 358) var left = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 0);
        DoActions(RemoveUnitAt(1, "Zerg Drone", "CreateMonster", P7))
        left = EUDVariable()
        left << (f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 0))
        # (Line 359) var up = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 1);
        up = EUDVariable()
        up << (f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 1))
        # (Line 360) var right = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 2);
        right = EUDVariable()
        right << (f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 2))
        # (Line 361) var down = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 3);
        down = EUDVariable()
        down << (f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 3))
        # (Line 363) locGoblinX[i] = (left + right) / 2;
        _ARRW(locGoblinX, i) << ((left + right) // 2)
        # (Line 364) locGoblinY[i] = (up + down) / 2;
        _ARRW(locGoblinY, i) << ((up + down) // 2)
        # (Line 365) }
        # (Line 367) for(var i = 0; i < spawnLocBiter; i++)
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= spawnLocBiter, neg=True):
        def _t5():
            i.__iadd__(1)
        # (Line 368) {
        # (Line 369) if(Bring(P7, Exactly, 0, "Zerg Broodling", "Anywhere")) break;
        if EUDIf()(Bring(P7, Exactly, 0, "Zerg Broodling", "Anywhere")):
            EUDBreak()
            # (Line 370) MoveLocation("CreateMonster", "Zerg Broodling", P7, "Anywhere");
        EUDEndIf()
        # (Line 371) RemoveUnitAt(1, "Zerg Broodling", "CreateMonster", P7);
        DoActions(MoveLocation("CreateMonster", "Zerg Broodling", P7, "Anywhere"))
        # (Line 373) const left = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 0);
        DoActions(RemoveUnitAt(1, "Zerg Broodling", "CreateMonster", P7))
        left = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 0)
        # (Line 374) const up = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 1);
        up = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 1)
        # (Line 375) const right = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 2);
        right = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 2)
        # (Line 376) const down = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 3);
        down = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 3)
        # (Line 378) locBiterX[i] = (left + right) / 2;
        _ARRW(locBiterX, i) << ((left + right) // 2)
        # (Line 379) locBiterY[i] = (up + down) / 2;
        _ARRW(locBiterY, i) << ((up + down) // 2)
        # (Line 380) }
        # (Line 382) for(var i = 0; i < spawnLocOrc; i++)
        EUDSetContinuePoint()
        _t5()
    EUDEndWhile()
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= spawnLocOrc, neg=True):
        def _t8():
            i.__iadd__(1)
        # (Line 383) {
        # (Line 384) if(Bring(P7, Exactly, 0, "Zerg Zergling", "Anywhere")) break;
        if EUDIf()(Bring(P7, Exactly, 0, "Zerg Zergling", "Anywhere")):
            EUDBreak()
            # (Line 385) MoveLocation("CreateMonster", "Zerg Zergling", P7, "Anywhere");
        EUDEndIf()
        # (Line 386) RemoveUnitAt(1, "Zerg Zergling", "CreateMonster", P7);
        DoActions(MoveLocation("CreateMonster", "Zerg Zergling", P7, "Anywhere"))
        # (Line 388) const left = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 0);
        DoActions(RemoveUnitAt(1, "Zerg Zergling", "CreateMonster", P7))
        left = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 0)
        # (Line 389) const up = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 1);
        up = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 1)
        # (Line 390) const right = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 2);
        right = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 2)
        # (Line 391) const down = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 3);
        down = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 3)
        # (Line 393) locOrcX[i] = (left + right) / 2;
        _ARRW(locOrcX, i) << ((left + right) // 2)
        # (Line 394) locOrcY[i] = (up + down) / 2;
        _ARRW(locOrcY, i) << ((up + down) // 2)
        # (Line 395) }
        # (Line 397) for(var i = 0; i < spawnLocLamia; i++)
        EUDSetContinuePoint()
        _t8()
    EUDEndWhile()
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= spawnLocLamia, neg=True):
        def _t11():
            i.__iadd__(1)
        # (Line 398) {
        # (Line 399) if(Bring(P7, Exactly, 0, "Zerg Hydralisk", "Anywhere")) break;
        if EUDIf()(Bring(P7, Exactly, 0, "Zerg Hydralisk", "Anywhere")):
            EUDBreak()
            # (Line 400) MoveLocation("CreateMonster", "Zerg Hydralisk", P7, "Anywhere");
        EUDEndIf()
        # (Line 401) RemoveUnitAt(1, "Zerg Hydralisk", "CreateMonster", P7);
        DoActions(MoveLocation("CreateMonster", "Zerg Hydralisk", P7, "Anywhere"))
        # (Line 403) const left = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 0);
        DoActions(RemoveUnitAt(1, "Zerg Hydralisk", "CreateMonster", P7))
        left = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 0)
        # (Line 404) const up = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 1);
        up = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 1)
        # (Line 405) const right = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 2);
        right = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 2)
        # (Line 406) const down = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 3);
        down = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 3)
        # (Line 408) locLamiaX[i] = (left + right) / 2;
        _ARRW(locLamiaX, i) << ((left + right) // 2)
        # (Line 409) locLamiaY[i] = (up + down) / 2;
        _ARRW(locLamiaY, i) << ((up + down) // 2)
        # (Line 410) }
        # (Line 412) for(var i = 0; i < spawnLocFang; i++)
        EUDSetContinuePoint()
        _t11()
    EUDEndWhile()
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= spawnLocFang, neg=True):
        def _t14():
            i.__iadd__(1)
        # (Line 413) {
        # (Line 414) if(Bring(P7, Exactly, 0, "Zerg Defiler", "Anywhere")) break;
        if EUDIf()(Bring(P7, Exactly, 0, "Zerg Defiler", "Anywhere")):
            EUDBreak()
            # (Line 415) MoveLocation("CreateMonster", "Zerg Defiler", P7, "Anywhere");
        EUDEndIf()
        # (Line 416) RemoveUnitAt(1, "Zerg Defiler", "CreateMonster", P7);
        DoActions(MoveLocation("CreateMonster", "Zerg Defiler", P7, "Anywhere"))
        # (Line 418) const left = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 0);
        DoActions(RemoveUnitAt(1, "Zerg Defiler", "CreateMonster", P7))
        left = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 0)
        # (Line 419) const up = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 1);
        up = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 1)
        # (Line 420) const right = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 2);
        right = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 2)
        # (Line 421) const down = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 3);
        down = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 3)
        # (Line 423) locFangX[i] = (left + right) / 2;
        _ARRW(locFangX, i) << ((left + right) // 2)
        # (Line 424) locFangY[i] = (up + down) / 2;
        _ARRW(locFangY, i) << ((up + down) // 2)
        # (Line 425) }
        # (Line 427) for(var i = 0; i < spawnLocOger; i++)
        EUDSetContinuePoint()
        _t14()
    EUDEndWhile()
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= spawnLocOger, neg=True):
        def _t17():
            i.__iadd__(1)
        # (Line 428) {
        # (Line 429) if(Bring(P7, Exactly, 0, "Devouring One (Zergling)", "Anywhere")) break;
        if EUDIf()(Bring(P7, Exactly, 0, "Devouring One (Zergling)", "Anywhere")):
            EUDBreak()
            # (Line 430) MoveLocation("CreateMonster", "Devouring One (Zergling)", P7, "Anywhere");
        EUDEndIf()
        # (Line 431) RemoveUnitAt(1, "Devouring One (Zergling)", "CreateMonster", P7);
        DoActions(MoveLocation("CreateMonster", "Devouring One (Zergling)", P7, "Anywhere"))
        # (Line 433) const left = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 0);
        DoActions(RemoveUnitAt(1, "Devouring One (Zergling)", "CreateMonster", P7))
        left = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 0)
        # (Line 434) const up = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 1);
        up = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 1)
        # (Line 435) const right = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 2);
        right = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 2)
        # (Line 436) const down = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 3);
        down = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 3)
        # (Line 438) locOgerX[i] = (left + right) / 2;
        _ARRW(locOgerX, i) << ((left + right) // 2)
        # (Line 439) locOgerY[i] = (up + down) / 2;
        _ARRW(locOgerY, i) << ((up + down) // 2)
        # (Line 440) }
        # (Line 442) for(var i = 0; i < spawnLocSkeleton; i++)
        EUDSetContinuePoint()
        _t17()
    EUDEndWhile()
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= spawnLocSkeleton, neg=True):
        def _t20():
            i.__iadd__(1)
        # (Line 443) {
        # (Line 444) if(Bring(P7, Exactly, 0, "Protoss Zealot", "Anywhere")) break;
        if EUDIf()(Bring(P7, Exactly, 0, "Protoss Zealot", "Anywhere")):
            EUDBreak()
            # (Line 445) MoveLocation("CreateMonster", "Protoss Zealot", P7, "Anywhere");
        EUDEndIf()
        # (Line 446) RemoveUnitAt(1, "Protoss Zealot", "CreateMonster", P7);
        DoActions(MoveLocation("CreateMonster", "Protoss Zealot", P7, "Anywhere"))
        # (Line 448) const left = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 0);
        DoActions(RemoveUnitAt(1, "Protoss Zealot", "CreateMonster", P7))
        left = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 0)
        # (Line 449) const up = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 1);
        up = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 1)
        # (Line 450) const right = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 2);
        right = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 2)
        # (Line 451) const down = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 3);
        down = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 3)
        # (Line 453) locSkeletonX[i] = (left + right) / 2;
        _ARRW(locSkeletonX, i) << ((left + right) // 2)
        # (Line 454) locSkeletonY[i] = (up + down) / 2;
        _ARRW(locSkeletonY, i) << ((up + down) // 2)
        # (Line 455) }
        # (Line 457) for(var i = 0; i < spawnLocLIch; i++)
        EUDSetContinuePoint()
        _t20()
    EUDEndWhile()
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= spawnLocLIch, neg=True):
        def _t23():
            i.__iadd__(1)
        # (Line 458) {
        # (Line 459) if(Bring(P7, Exactly, 0, "Protoss High Templar", "Anywhere")) break;
        if EUDIf()(Bring(P7, Exactly, 0, "Protoss High Templar", "Anywhere")):
            EUDBreak()
            # (Line 460) MoveLocation("CreateMonster", "Protoss High Templar", P7, "Anywhere");
        EUDEndIf()
        # (Line 461) RemoveUnitAt(1, "Protoss High Templar", "CreateMonster", P7);
        DoActions(MoveLocation("CreateMonster", "Protoss High Templar", P7, "Anywhere"))
        # (Line 463) const left = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 0);
        DoActions(RemoveUnitAt(1, "Protoss High Templar", "CreateMonster", P7))
        left = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 0)
        # (Line 464) const up = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 1);
        up = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 1)
        # (Line 465) const right = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 2);
        right = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 2)
        # (Line 466) const down = dwread_epd(EPD(0x58DC60) + $L("CreateMonster") * 5 + 3);
        down = f_dwread_epd(EPD(0x58DC60) + GetLocationIndex("CreateMonster") * 5 + 3)
        # (Line 468) locLichX[i] = (left + right) / 2;
        _ARRW(locLichX, i) << ((left + right) // 2)
        # (Line 469) locLichY[i] = (up + down) / 2;
        _ARRW(locLichY, i) << ((up + down) // 2)
        # (Line 470) }
        # (Line 471) }
        EUDSetContinuePoint()
        _t23()
    EUDEndWhile()
    # (Line 472) function ResetInventory()

# (Line 473) {
@EUDFunc
def ResetInventory():
    # (Line 474) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 475) for(var i = 0; i < 24; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 24, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 476) {
        # (Line 477) nameInventory[maxInventorySlot * getcurpl() + i] = Db("-");
        _ARRW(nameInventory, maxInventorySlot * f_getcurpl() + i) << (Db("-"))
        # (Line 478) amountInventory[maxInventorySlot * getcurpl() + i] = 0;
        _ARRW(amountInventory, maxInventorySlot * f_getcurpl() + i) << (0)
        # (Line 479) }
        # (Line 480) s.print("\x04인벤토리 초기화 완료");
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    s.print("\x04인벤토리 초기화 완료")
    # (Line 481) }
    # (Line 483) function OpenInventory()

# (Line 484) {
@EUDFunc
def OpenInventory():
    # (Line 485) openedInven[getcurpl()] = 1;
    _ARRW(openedInven, f_getcurpl()) << (1)
    # (Line 486) }
    # (Line 488) function ShowInventory()

# (Line 489) {
@EUDFunc
def ShowInventory():
    # (Line 490) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 492) if(openedInven[cp] == 1)
    if EUDIf()(openedInven[cp] == 1):
        # (Line 493) {
        # (Line 494) if(page[cp] == 1) num[cp] = 0;
        if EUDIf()(page[cp] == 1):
            _ARRW(num, cp) << (0)
            # (Line 495) else if(page[cp] == 2) num[cp] = 7;
        if EUDElseIf()(page[cp] == 2):
            _ARRW(num, cp) << (7)
            # (Line 496) else if(page[cp] == 3) num[cp] = 14;
        if EUDElseIf()(page[cp] == 3):
            _ARRW(num, cp) << (14)
            # (Line 497) else if(page[cp] == 4) num[cp] = 24;
        if EUDElseIf()(page[cp] == 4):
            _ARRW(num, cp) << (24)
            # (Line 499) if(Deaths(CurrentPlayer, Exactly, 2, "Terran Dropship") && page[cp] > 1) page[cp] -= 1;
        EUDEndIf()
        if EUDIf()(EUDSCAnd()(Deaths(CurrentPlayer, Exactly, 2, "Terran Dropship"))(page[cp] <= 1, neg=True)()):
            _ARRW(page, cp).__isub__(1)
            # (Line 500) else if(Deaths(CurrentPlayer, Exactly, 4, "Terran Dropship") && page[cp] < 4) page[cp] += 1;
        if EUDElseIf()(EUDSCAnd()(Deaths(CurrentPlayer, Exactly, 4, "Terran Dropship"))(page[cp] >= 4, neg=True)()):
            _ARRW(page, cp).__iadd__(1)
            # (Line 502) s.printAt(0, "  \x1cINVENTORY \x1d", page[cp], " page");
        EUDEndIf()
        s.printAt(0, "  \x1cINVENTORY \x1d", page[cp], " page")
        # (Line 503) if(amountInventory[24 * cp + num[cp]] != 0)
        if EUDIf()(amountInventory[24 * cp + num[cp]] == 0, neg=True):
            # (Line 504) s.printAt(1, "  \x0f[2]  \x04", ptr2s(nameInventory[24 * cp + num[cp]]), " \x04 ", amountInventory[24 * cp + num[cp]], "\x04개");
            s.printAt(1, "  \x0f[2]  \x04", ptr2s(nameInventory[24 * cp + num[cp]]), " \x04 ", amountInventory[24 * cp + num[cp]], "\x04개")
            # (Line 505) else s.printAt(1, "  \x0f[2]  \x05비어 있음");
        if EUDElse()():
            s.printAt(1, "  \x0f[2]  \x05비어 있음")
            # (Line 506) if(amountInventory[24 * cp + num[cp] + 1] != 0)
        EUDEndIf()
        if EUDIf()(amountInventory[24 * cp + num[cp] + 1] == 0, neg=True):
            # (Line 507) s.printAt(2, "  \x0f[3]  \x04", ptr2s(nameInventory[24 * cp + num[cp] + 1]), " \x04 ", amountInventory[24 * cp + num[cp] + 1], "\x04개");
            s.printAt(2, "  \x0f[3]  \x04", ptr2s(nameInventory[24 * cp + num[cp] + 1]), " \x04 ", amountInventory[24 * cp + num[cp] + 1], "\x04개")
            # (Line 508) else s.printAt(2, "  \x0f[3]  \x05비어 있음");
        if EUDElse()():
            s.printAt(2, "  \x0f[3]  \x05비어 있음")
            # (Line 509) if(amountInventory[24 * cp + num[cp] + 2] != 0)
        EUDEndIf()
        if EUDIf()(amountInventory[24 * cp + num[cp] + 2] == 0, neg=True):
            # (Line 510) s.printAt(3, "  \x0f[4]  \x04", ptr2s(nameInventory[24 * cp + num[cp] + 2]), " \x04 ", amountInventory[24 * cp + num[cp] + 2], "\x04개");
            s.printAt(3, "  \x0f[4]  \x04", ptr2s(nameInventory[24 * cp + num[cp] + 2]), " \x04 ", amountInventory[24 * cp + num[cp] + 2], "\x04개")
            # (Line 511) else s.printAt(3, "  \x0f[4]  \x05비어 있음");
        if EUDElse()():
            s.printAt(3, "  \x0f[4]  \x05비어 있음")
            # (Line 512) if(amountInventory[24 * cp + num[cp] + 3] != 0)
        EUDEndIf()
        if EUDIf()(amountInventory[24 * cp + num[cp] + 3] == 0, neg=True):
            # (Line 513) s.printAt(4, "  \x0f[5]  \x04", ptr2s(nameInventory[24 * cp + num[cp] + 3]), " \x04 ", amountInventory[24 * cp + num[cp] + 3], "\x04개");
            s.printAt(4, "  \x0f[5]  \x04", ptr2s(nameInventory[24 * cp + num[cp] + 3]), " \x04 ", amountInventory[24 * cp + num[cp] + 3], "\x04개")
            # (Line 514) else s.printAt(4, "  \x0f[5]  \x05비어 있음");
        if EUDElse()():
            s.printAt(4, "  \x0f[5]  \x05비어 있음")
            # (Line 515) if(amountInventory[24 * cp + num[cp] + 4] != 0)
        EUDEndIf()
        if EUDIf()(amountInventory[24 * cp + num[cp] + 4] == 0, neg=True):
            # (Line 516) s.printAt(5, "  \x0f[6]  \x04", ptr2s(nameInventory[24 * cp + num[cp] + 4]), " \x04 ", amountInventory[24 * cp + num[cp] + 4], "\x04개");
            s.printAt(5, "  \x0f[6]  \x04", ptr2s(nameInventory[24 * cp + num[cp] + 4]), " \x04 ", amountInventory[24 * cp + num[cp] + 4], "\x04개")
            # (Line 517) else s.printAt(5, "  \x0f[6]  \x05비어 있음");
        if EUDElse()():
            s.printAt(5, "  \x0f[6]  \x05비어 있음")
            # (Line 518) if(amountInventory[24 * cp + num[cp] + 5] != 0)
        EUDEndIf()
        if EUDIf()(amountInventory[24 * cp + num[cp] + 5] == 0, neg=True):
            # (Line 519) s.printAt(6, "  \x0f[7]  \x04", ptr2s(nameInventory[24 * cp + num[cp] + 5]), " \x04 ", amountInventory[24 * cp + num[cp] + 5], "\x04개");
            s.printAt(6, "  \x0f[7]  \x04", ptr2s(nameInventory[24 * cp + num[cp] + 5]), " \x04 ", amountInventory[24 * cp + num[cp] + 5], "\x04개")
            # (Line 520) else s.printAt(6, "  \x0f[7]  \x05비어 있음");
        if EUDElse()():
            s.printAt(6, "  \x0f[7]  \x05비어 있음")
            # (Line 521) }
        EUDEndIf()
        # (Line 522) }
    EUDEndIf()
    # (Line 524) function CloseInventory()

# (Line 525) {
@EUDFunc
def CloseInventory():
    # (Line 526) openedInven[getcurpl()] = 0;
    _ARRW(openedInven, f_getcurpl()) << (0)
    # (Line 527) s.print("\n\n\n\n\n\n\n\n");
    s.print("\n\n\n\n\n\n\n\n")
    # (Line 528) }
    # (Line 530) function onPluginStart()

# (Line 531) {
@EUDFunc
def onPluginStart():
    # (Line 534) ResetInventory();
    ResetInventory()
    # (Line 536) KillUnit("Zerg Scourge", P1);
    # (Line 538) MobSpawnLocationCheck();
    DoActions(KillUnit("Zerg Scourge", P1))
    MobSpawnLocationCheck()
    # (Line 540) CreatePotal();
    CreatePotal()
    # (Line 542) SetEtcItemInfo();
    SetEtcItemInfo()
    # (Line 544) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 549) NewCharacter();
    NewCharacter()
    # (Line 552) EUDEndPlayerLoop();
    EUDEndPlayerLoop()
    # (Line 553) }
    # (Line 555) function beforeTriggerExec()

# (Line 556) {
@EUDFunc
def beforeTriggerExec():
    # (Line 559) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 561) eprintln("레벨 : ", userLevel[getcurpl()], " 경험치 : ", userExp[getcurpl()], " / ", MaxExp[userLevel[getcurpl()]]);
    f_eprintln("레벨 : ", userLevel[f_getcurpl()], " 경험치 : ", userExp[f_getcurpl()], " / ", MaxExp[userLevel[f_getcurpl()]])
    # (Line 575) EUDEndPlayerLoop();
    EUDEndPlayerLoop()
    # (Line 577) SetMemory(0x5124F0, SetTo, 21);
    # (Line 578) }
    DoActions(SetMemory(0x5124F0, SetTo, 21))
