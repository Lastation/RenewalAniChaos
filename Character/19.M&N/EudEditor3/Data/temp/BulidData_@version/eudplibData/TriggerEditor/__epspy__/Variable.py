## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) const Track_Info = PVariable();
Track_Info = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 2) const Remain_Sec = PVariable();
Remain_Sec = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 3) const Remain_Div = PVariable();
Remain_Div = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 4) const Remain_Music = PVariable();
Remain_Music = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 5) const Music_Name = PVariable();
Music_Name = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 6) const Player_Name = PVariable();
Player_Name = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 7) const Track_Type = PVariable();
Track_Type = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 8) const Artist_Info = PVariable();
Artist_Info = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 10) const Track_Info_Name =
# (Line 11) [Db("Loading...."),
# (Line 12) Db("LIVE THE\x08@\x04TER \x1BPERFORMANCE"),
# (Line 13) Db("LIVE THE\x08@\x04TER \x1CHARMONY"),
# (Line 14) Db("MILLION LIVE! M\x08@\x04STER \x1FSPARKLE"),
# (Line 15) Db("\x19MILLION LIVE!"),
# (Line 16) Db("LIVE THE\x08@\x04TER \x17DREAMERS"),
# (Line 17) Db("THE\x08@\x04TER \x11ACTIVITIES"),
# (Line 18) Db("LIVE THE\x08@\x04TER \x07FORWARD"),
# (Line 19) Db("MILLION THE\x08@\x04TER \x0FGENERATION"),
# (Line 20) Db("THE\x08@\x04TER \x11BOOST!"),
# (Line 21) Db("MILLION THE\x08@\x04TER \x1FWAVE"),
# (Line 22) Db("THE\x08@\x04TER \x1BCHALLENGE"),
# (Line 23) Db("MILLION RADIO! \x10THEME SONG")];
Track_Info_Name = _CGFW(lambda: [_ARR(FlattenList([Db("Loading...."), Db("LIVE THE\x08@\x04TER \x1BPERFORMANCE"), Db("LIVE THE\x08@\x04TER \x1CHARMONY"), Db("MILLION LIVE! M\x08@\x04STER \x1FSPARKLE"), Db("\x19MILLION LIVE!"), Db("LIVE THE\x08@\x04TER \x17DREAMERS"), Db("THE\x08@\x04TER \x11ACTIVITIES"), Db("LIVE THE\x08@\x04TER \x07FORWARD"), Db("MILLION THE\x08@\x04TER \x0FGENERATION"), Db("THE\x08@\x04TER \x11BOOST!"), Db("MILLION THE\x08@\x04TER \x1FWAVE"), Db("THE\x08@\x04TER \x1BCHALLENGE"), Db("MILLION RADIO! \x10THEME SONG")]))], 1)[0]
# (Line 25) const Player_EXP = PVariable();
Player_EXP = _CGFW(lambda: [PVariable()], 1)[0]
