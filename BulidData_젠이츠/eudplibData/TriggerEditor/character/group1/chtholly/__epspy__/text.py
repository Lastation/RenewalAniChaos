## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 4) import func.sound as s;
from func import sound as s
# (Line 6) const P_player			= PVariable();
P_player = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 7) const P_observer 		= PVariable();
P_observer = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 9) const P_Next = PVariable();
P_Next = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 10) const P_Wait = PVariable();
P_Wait = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 12) function Text(num, playerID);
# (Line 14) function player(playerID)
# (Line 15) {
@EUDFunc
def f_player(playerID):
    # (Line 16) Text(P_player[playerID], playerID);
    Text(P_player[playerID], playerID)
    # (Line 17) P_player[playerID] = 0;
    _ARRW(P_player, playerID) << (0)
    # (Line 18) }
    # (Line 20) function observer(playerID)

# (Line 21) {
@EUDFunc
def f_observer(playerID):
    # (Line 22) Text(P_observer[playerID - 128], playerID);
    Text(P_observer[playerID - 128], playerID)
    # (Line 23) P_observer[playerID - 128] = 0;
    _ARRW(P_observer, playerID - 128) << (0)
    # (Line 24) }
    # (Line 26) function main(playerID)

# (Line 27) {
@EUDFunc
def f_main(playerID):
    # (Line 28) if (playerID < 6) 	{ player(playerID); 	}
    if EUDIf()(playerID >= 6, neg=True):
        f_player(playerID)
        # (Line 29) else  			{ observer(playerID); }
    if EUDElse()():
        f_observer(playerID)
        # (Line 31) if (playerID < 6)
    EUDEndIf()
    if EUDIf()(playerID >= 6, neg=True):
        # (Line 32) {
        # (Line 33) if (P_Wait[playerID] > 0)
        if EUDIf()(P_Wait[playerID] <= 0, neg=True):
            # (Line 34) { P_Wait[playerID] -= 1; }
            _ARRW(P_Wait, playerID).__isub__(1)
            # (Line 35) else if (P_Next[playerID] != 0)
        if EUDElseIf()(P_Next[playerID] == 0, neg=True):
            # (Line 36) {
            # (Line 37) P_player[playerID] 	= P_Next[playerID] + 1;
            _ARRW(P_player, playerID) << (P_Next[playerID] + 1)
            # (Line 38) P_observer[playerID] = P_Next[playerID] + 1;
            _ARRW(P_observer, playerID) << (P_Next[playerID] + 1)
            # (Line 39) P_Next[playerID] = 0;
            _ARRW(P_Next, playerID) << (0)
            # (Line 40) }
            # (Line 41) }
        EUDEndIf()
        # (Line 42) }
    EUDEndIf()
    # (Line 44) function TextDelay(playerID, wait)

# (Line 45) {
@EUDFunc
def TextDelay(playerID, wait):
    # (Line 46) if (playerID < 6)
    if EUDIf()(playerID >= 6, neg=True):
        # (Line 47) {
        # (Line 48) P_Next[playerID] = P_player[playerID];
        _ARRW(P_Next, playerID) << (P_player[playerID])
        # (Line 49) if (wait == 0)
        if EUDIf()(wait == 0):
            # (Line 50) { P_Next[playerID] = 0; }
            _ARRW(P_Next, playerID) << (0)
            # (Line 51) else
            # (Line 52) { P_Wait[playerID] = wait / 83 + 1; }
        if EUDElse()():
            _ARRW(P_Wait, playerID) << (wait // 83 + 1)
            # (Line 53) }
        EUDEndIf()
        # (Line 54) }
    EUDEndIf()
    # (Line 56) function Text(num, playerID)

# (Line 57) {
@EUDFunc
def Text(num, playerID):
    # (Line 58) switch(num)
    EUDSwitch(num)
    # (Line 59) {
    # (Line 60) case 1:
    _t1 = EUDSwitchCase()
    # (Line 61) PlayWAV("Zenitsu_Unique.ogg");
    if _t1(1):
        # (Line 62) v.stb.printAt(3, "\x13\x04Agatsuma \x1FZenitsu\n");
        DoActions(PlayWAV("Zenitsu_Unique.ogg"))
        v.stb.printAt(3, "\x13\x04Agatsuma \x1FZenitsu\n")
        # (Line 63) v.stb.printAt(5, "\x13\x04젠이츠 관철해내라!\n 울어도 돼!\n 도망쳐도 된다!\n 극한까지 벼려내어\n 그 누구보다도 강인한 칼날이 되거라!");
        v.stb.printAt(5, "\x13\x04젠이츠 관철해내라!\n 울어도 돼!\n 도망쳐도 된다!\n 극한까지 벼려내어\n 그 누구보다도 강인한 칼날이 되거라!")
        # (Line 64) TextDelay(playerID, 0);
        TextDelay(playerID, 0)
        # (Line 65) break;
        EUDBreak()
        # (Line 66) case 2:
    _t2 = EUDSwitchCase()
    # (Line 67) PlayWAV("Zenitsu_01.ogg");
    if _t2(2):
        # (Line 68) v.stb.print("\x13\x04Agatsuma \x1FZenitsu");
        DoActions(PlayWAV("Zenitsu_01.ogg"))
        v.stb.print("\x13\x04Agatsuma \x1FZenitsu")
        # (Line 69) v.stb.print("\x13\x046개나 있는데 나는 하나밖에 성공 못한다고... 그걸 어떻게 알어?");
        v.stb.print("\x13\x046개나 있는데 나는 하나밖에 성공 못한다고... 그걸 어떻게 알어?")
        # (Line 70) TextDelay(playerID, 0);
        TextDelay(playerID, 0)
        # (Line 71) break;
        EUDBreak()
        # (Line 72) case 3:
    _t3 = EUDSwitchCase()
    # (Line 73) PlayWAV("Zenitsu_02.ogg");
    if _t3(3):
        # (Line 74) v.stb.print("\x13\x04Agatsuma \x1FZenitsu");
        DoActions(PlayWAV("Zenitsu_02.ogg"))
        v.stb.print("\x13\x04Agatsuma \x1FZenitsu")
        # (Line 75) v.stb.print("\x13\x04한 번 실패하고 울거나, 도망을 칠 때면..");
        v.stb.print("\x13\x04한 번 실패하고 울거나, 도망을 칠 때면..")
        # (Line 76) TextDelay(playerID, 2300);
        TextDelay(playerID, 2300)
        # (Line 77) break;
        EUDBreak()
        # (Line 78) case 4:
    _t4 = EUDSwitchCase()
    # (Line 79) v.stb.print("\x13\x04Agatsuma \x1FZenitsu");
    if _t4(4):
        v.stb.print("\x13\x04Agatsuma \x1FZenitsu")
        # (Line 80) v.stb.print("\x13\x04몇번이든 끈덕지게 나를 꾸짖어줬어...");
        v.stb.print("\x13\x04몇번이든 끈덕지게 나를 꾸짖어줬어...")
        # (Line 81) TextDelay(playerID, 0);
        TextDelay(playerID, 0)
        # (Line 82) break;
        EUDBreak()
        # (Line 83) case 5:
    _t5 = EUDSwitchCase()
    # (Line 84) PlayWAV("Zenitsu_03.ogg");
    if _t5(5):
        # (Line 85) v.stb.print("\x13\x04Agatsuma \x1FZenitsu");
        DoActions(PlayWAV("Zenitsu_03.ogg"))
        v.stb.print("\x13\x04Agatsuma \x1FZenitsu")
        # (Line 86) v.stb.print("\x13\x04몇번이고, 몇번이고! 질질 끌고 돌아와서는..");
        v.stb.print("\x13\x04몇번이고, 몇번이고! 질질 끌고 돌아와서는..")
        # (Line 87) TextDelay(playerID, 4500);
        TextDelay(playerID, 4500)
        # (Line 88) break;
        EUDBreak()
        # (Line 89) case 6:
    _t6 = EUDSwitchCase()
    # (Line 90) v.stb.print("\x13\x04Agatsuma \x1FZenitsu");
    if _t6(6):
        v.stb.print("\x13\x04Agatsuma \x1FZenitsu")
        # (Line 91) v.stb.print("\x13\x04나를 포기하고 내치지는 않았어...!");
        v.stb.print("\x13\x04나를 포기하고 내치지는 않았어...!")
        # (Line 92) TextDelay(playerID, 0);
        TextDelay(playerID, 0)
        # (Line 93) break;
        EUDBreak()
        # (Line 94) case 7:
    _t7 = EUDSwitchCase()
    # (Line 95) PlayWAV("Zenitsu_04.ogg");
    if _t7(7):
        # (Line 96) v.stb.print("\x13\x04Agatsuma \x1FZenitsu");
        DoActions(PlayWAV("Zenitsu_04.ogg"))
        v.stb.print("\x13\x04Agatsuma \x1FZenitsu")
        # (Line 97) v.stb.print("\x13\x04할부지가 가르쳐주었던 것들은..");
        v.stb.print("\x13\x04할부지가 가르쳐주었던 것들은..")
        # (Line 98) TextDelay(playerID, 2000);
        TextDelay(playerID, 2000)
        # (Line 99) break;
        EUDBreak()
        # (Line 100) case 8:
    _t8 = EUDSwitchCase()
    # (Line 101) v.stb.print("\x13\x04Agatsuma \x1FZenitsu");
    if _t8(8):
        v.stb.print("\x13\x04Agatsuma \x1FZenitsu")
        # (Line 102) v.stb.print("\x13\x04내게 들여줬던 시간들은...");
        v.stb.print("\x13\x04내게 들여줬던 시간들은...")
        # (Line 103) TextDelay(playerID, 1500);
        TextDelay(playerID, 1500)
        # (Line 104) break;
        EUDBreak()
        # (Line 105) case 9:
    _t9 = EUDSwitchCase()
    # (Line 106) v.stb.print("\x13\x04Agatsuma \x1FZenitsu");
    if _t9(9):
        v.stb.print("\x13\x04Agatsuma \x1FZenitsu")
        # (Line 107) v.stb.print("\x13\x04잔뜩.. 사람들한테 도움이 되는 꿈..");
        v.stb.print("\x13\x04잔뜩.. 사람들한테 도움이 되는 꿈..")
        # (Line 108) TextDelay(playerID, 0);
        TextDelay(playerID, 0)
        # (Line 109) break;
        EUDBreak()
        # (Line 110) case 10:
    _t10 = EUDSwitchCase()
    # (Line 111) PlayWAV("Zenitsu_Ultimate01.ogg");
    if _t10(10):
        # (Line 112) v.stb.printAt(3, "\x13\x04Agatsuma \x1FZenitsu\n");
        DoActions(PlayWAV("Zenitsu_Ultimate01.ogg"))
        v.stb.printAt(3, "\x13\x04Agatsuma \x1FZenitsu\n")
        # (Line 113) v.stb.printAt(5, "\x13\x04번개의 호흡 제 1형.. 벽력일섬.. 6연!");
        v.stb.printAt(5, "\x13\x04번개의 호흡 제 1형.. 벽력일섬.. 6연!")
        # (Line 114) TextDelay(playerID, 0);
        TextDelay(playerID, 0)
        # (Line 115) break;
        EUDBreak()
        # (Line 116) case 11:
    _t11 = EUDSwitchCase()
    # (Line 117) PlayWAV("Zenitsu_Ultimate02.ogg");
    if _t11(11):
        # (Line 118) TextDelay(playerID, 0);
        DoActions(PlayWAV("Zenitsu_Ultimate02.ogg"))
        TextDelay(playerID, 0)
        # (Line 119) break;
        EUDBreak()
        # (Line 120) }
    # (Line 121) }
    EUDEndSwitch()
