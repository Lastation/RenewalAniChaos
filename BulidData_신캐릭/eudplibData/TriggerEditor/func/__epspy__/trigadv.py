## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import func.trig as trg;
from func import trig as trg
# (Line 24) function Shape_DotAt(playerID : TrgPlayer, baseunit : TrgUnit, count, unit : TrgUnit, pos_x, pos_y)
# (Line 25) {
@EUDTypedFunc([TrgPlayer, TrgUnit, None, TrgUnit, None, None])
def Shape_DotAt(playerID, baseunit, count, unit, pos_x, pos_y):
    # (Line 26) trg.MoveLoc(baseunit ,playerID, pos_x, pos_y);
    trg.MoveLoc(baseunit, playerID, pos_x, pos_y)
    # (Line 27) trg.SkillUnit(playerID, count, unit);
    trg.SkillUnit(playerID, count, unit)
    # (Line 28) }
    # (Line 50) function Shape_DoubleAt(playerID : TrgPlayer, baseunit : TrgUnit, count, unit : TrgUnit, pos_x, pos_y)

# (Line 51) {
@EUDTypedFunc([TrgPlayer, TrgUnit, None, TrgUnit, None, None])
def Shape_DoubleAt(playerID, baseunit, count, unit, pos_x, pos_y):
    # (Line 52) Shape_DotAt(playerID, baseunit, count, unit, pos_x, pos_y);
    Shape_DotAt(playerID, baseunit, count, unit, pos_x, pos_y)
    # (Line 53) Shape_DotAt(playerID, baseunit, count, unit, -pos_x, -pos_y);
    Shape_DotAt(playerID, baseunit, count, unit, -pos_x, -pos_y)
    # (Line 54) }
    # (Line 77) function Shape_SquareAt(playerID : TrgPlayer, baseunit : TrgUnit, count, unit : TrgUnit, pos_x, pos_y)

# (Line 78) {
@EUDTypedFunc([TrgPlayer, TrgUnit, None, TrgUnit, None, None])
def Shape_SquareAt(playerID, baseunit, count, unit, pos_x, pos_y):
    # (Line 79) trg.MoveLoc(baseunit, playerID, pos_x, pos_y);
    trg.MoveLoc(baseunit, playerID, pos_x, pos_y)
    # (Line 80) trg.SkillUnit(playerID, count, unit);
    trg.SkillUnit(playerID, count, unit)
    # (Line 81) trg.MoveLoc(baseunit, playerID, -pos_y, pos_x);
    trg.MoveLoc(baseunit, playerID, -pos_y, pos_x)
    # (Line 82) trg.SkillUnit(playerID, count, unit);
    trg.SkillUnit(playerID, count, unit)
    # (Line 83) trg.MoveLoc(baseunit, playerID, -pos_x, -pos_y);
    trg.MoveLoc(baseunit, playerID, -pos_x, -pos_y)
    # (Line 84) trg.SkillUnit(playerID, count, unit);
    trg.SkillUnit(playerID, count, unit)
    # (Line 85) trg.MoveLoc(baseunit, playerID, pos_y, -pos_x);
    trg.MoveLoc(baseunit, playerID, pos_y, -pos_x)
    # (Line 86) trg.SkillUnit(playerID, count, unit);
    trg.SkillUnit(playerID, count, unit)
    # (Line 87) }
    # (Line 109) function Shape_NxNSquareAt(playerID : TrgPlayer, baseunit : TrgUnit, count, unit : TrgUnit, size, interval)

# (Line 110) {
@EUDTypedFunc([TrgPlayer, TrgUnit, None, TrgUnit, None, None])
def Shape_NxNSquareAt(playerID, baseunit, count, unit, size, interval):
    # (Line 111) var loop = (size * size) / 4;
    loop = EUDVariable()
    loop << ((size * size) // 4)
    # (Line 112) var space = interval / 2;
    space = EUDVariable()
    space << (interval // 2)
    # (Line 113) var dis_x, dis_y;
    dis_x, dis_y = EUDCreateVariables(2)
    # (Line 115) if (size == 1)
    if EUDIf()(size == 1):
        # (Line 116) {
        # (Line 117) Shape_DotAt(playerID, baseunit, count, unit, 0, 0);
        Shape_DotAt(playerID, baseunit, count, unit, 0, 0)
        # (Line 118) }
        # (Line 119) else if (size > 1)
    if EUDElseIf()(size <= 1, neg=True):
        # (Line 120) {
        # (Line 121) foreach(idx : EUDLoopRange(loop))
        for idx in EUDLoopRange(loop):
            # (Line 122) {
            # (Line 123) if (size % 2 == 0)
            if EUDIf()(size % 2 == 0):
                # (Line 124) {
                # (Line 125) dis_x = idx % (size / 2) + 1;
                dis_x << (idx % (size // 2) + 1)
                # (Line 126) dis_y = idx / (size / 2) + 1;
                dis_y << (idx // (size // 2) + 1)
                # (Line 127) if (dis_x == 1)
                if EUDIf()(dis_x == 1):
                    # (Line 128) { Shape_SquareAt(playerID, baseunit, count, unit, space, dis_y * interval - space); }
                    Shape_SquareAt(playerID, baseunit, count, unit, space, dis_y * interval - space)
                    # (Line 129) else if (dis_y == 1)
                if EUDElseIf()(dis_y == 1):
                    # (Line 130) { Shape_SquareAt(playerID, baseunit, count, unit, dis_x * interval - space, space); }
                    Shape_SquareAt(playerID, baseunit, count, unit, dis_x * interval - space, space)
                    # (Line 131) else
                    # (Line 132) { Shape_SquareAt(playerID, baseunit, count, unit, dis_x * interval - space, dis_y * interval - space); }
                if EUDElse()():
                    Shape_SquareAt(playerID, baseunit, count, unit, dis_x * interval - space, dis_y * interval - space)
                    # (Line 133) }
                EUDEndIf()
                # (Line 134) else if (size % 2 == 1)
            if EUDElseIf()(size % 2 == 1):
                # (Line 135) {
                # (Line 136) dis_x = idx % (size / 2);
                dis_x << (idx % (size // 2))
                # (Line 137) dis_y = idx / (size / 2);
                dis_y << (idx // (size // 2))
                # (Line 139) if (idx == 0)
                if EUDIf()(idx == 0):
                    # (Line 140) { Shape_DotAt(playerID, baseunit, count, unit, 0, 0); }
                    Shape_DotAt(playerID, baseunit, count, unit, 0, 0)
                    # (Line 141) else if (dis_y == 0)
                if EUDElseIf()(dis_y == 0):
                    # (Line 142) { Shape_SquareAt(playerID, baseunit, count, unit, dis_x * interval, 0); }
                    Shape_SquareAt(playerID, baseunit, count, unit, dis_x * interval, 0)
                    # (Line 143) else
                    # (Line 144) { Shape_SquareAt(playerID, baseunit, count, unit, dis_x * interval + interval, dis_y * interval); }
                if EUDElse()():
                    Shape_SquareAt(playerID, baseunit, count, unit, dis_x * interval + interval, dis_y * interval)
                    # (Line 146) if (idx == loop - 1)
                EUDEndIf()
                if EUDIf()(idx == loop - 1):
                    # (Line 147) { Shape_SquareAt(playerID, baseunit, count, unit, (size / 2) * interval, 0); }
                    Shape_SquareAt(playerID, baseunit, count, unit, (size // 2) * interval, 0)
                    # (Line 148) }
                EUDEndIf()
                # (Line 149) }
            EUDEndIf()
            # (Line 150) }

        # (Line 151) }
    EUDEndIf()
    # (Line 177) function Shape_LineAt(playerID : TrgPlayer, count, baseunit : TrgUnit, unit : TrgUnit, degree, size, interval, distance)

# (Line 178) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, TrgUnit, None, None, None, None])
def Shape_LineAt(playerID, count, baseunit, unit, degree, size, interval, distance):
    # (Line 179) trg.Table_Sin(playerID, degree + 90, distance);
    trg.Table_Sin(playerID, degree + 90, distance)
    # (Line 180) trg.Table_Cos(playerID, degree + 90, distance);
    trg.Table_Cos(playerID, degree + 90, distance)
    # (Line 182) var initial_x = v.P_AngleCos[playerID];
    initial_x = EUDVariable()
    initial_x << (v.P_AngleCos[playerID])
    # (Line 183) var initial_y = v.P_AngleSin[playerID];
    initial_y = EUDVariable()
    initial_y << (v.P_AngleSin[playerID])
    # (Line 185) if (size % 2 == 0)
    if EUDIf()(size % 2 == 0):
        # (Line 186) { trg.Table_Sin(playerID, degree, interval * (size / 2) - interval / 2); trg.Table_Cos(playerID, degree, interval * (size / 2) - interval / 2); }
        trg.Table_Sin(playerID, degree, interval * (size // 2) - interval // 2)
        trg.Table_Cos(playerID, degree, interval * (size // 2) - interval // 2)
        # (Line 187) else
        # (Line 188) { trg.Table_Sin(playerID, degree, interval * (size / 2)); trg.Table_Cos(playerID, degree, interval * (size / 2)); }
    if EUDElse()():
        trg.Table_Sin(playerID, degree, interval * (size // 2))
        trg.Table_Cos(playerID, degree, interval * (size // 2))
        # (Line 190) initial_x = initial_x + v.P_AngleCos[playerID];
    EUDEndIf()
    initial_x << (initial_x + v.P_AngleCos[playerID])
    # (Line 191) initial_y = initial_y + v.P_AngleSin[playerID];
    initial_y << (initial_y + v.P_AngleSin[playerID])
    # (Line 193) trg.Table_Sin(playerID, degree, interval);
    trg.Table_Sin(playerID, degree, interval)
    # (Line 194) trg.Table_Cos(playerID, degree, interval);
    trg.Table_Cos(playerID, degree, interval)
    # (Line 196) if (size == 1)
    if EUDIf()(size == 1):
        # (Line 197) { Shape_DotAt(playerID, baseunit, count, unit, 0, 0); }
        Shape_DotAt(playerID, baseunit, count, unit, 0, 0)
        # (Line 198) else if (size > 1)
    if EUDElseIf()(size <= 1, neg=True):
        # (Line 199) { foreach(idx : EUDLoopRange(size)) { Shape_DotAt(playerID, baseunit, count, unit, initial_x - idx * v.P_AngleCos[playerID], initial_y - idx * v.P_AngleSin[playerID]); } }
        for idx in EUDLoopRange(size):
            Shape_DotAt(playerID, baseunit, count, unit, initial_x - idx * v.P_AngleCos[playerID], initial_y - idx * v.P_AngleSin[playerID])

        # (Line 200) }
    EUDEndIf()
    # (Line 224) function Shape_CrossAt(playerID : TrgPlayer, count, baseunit : TrgUnit, unit : TrgUnit, degree, size, interval)

# (Line 225) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, TrgUnit, None, None, None])
def Shape_CrossAt(playerID, count, baseunit, unit, degree, size, interval):
    # (Line 226) var distance = interval / 2;
    distance = EUDVariable()
    distance << (interval // 2)
    # (Line 228) trg.Table_Sin(playerID, degree, distance);
    trg.Table_Sin(playerID, degree, distance)
    # (Line 229) trg.Table_Cos(playerID, degree, distance);
    trg.Table_Cos(playerID, degree, distance)
    # (Line 231) var gradient_x = v.P_AngleCos[playerID] / 2;
    gradient_x = EUDVariable()
    gradient_x << (v.P_AngleCos[playerID] // 2)
    # (Line 232) var gradient_y = v.P_AngleSin[playerID] / 2;
    gradient_y = EUDVariable()
    gradient_y << (v.P_AngleSin[playerID] // 2)
    # (Line 234) var angle_x, angle_y;
    angle_x, angle_y = EUDCreateVariables(2)
    # (Line 236) trg.Table_Sin(playerID, degree, interval);
    trg.Table_Sin(playerID, degree, interval)
    # (Line 237) trg.Table_Cos(playerID, degree, interval);
    trg.Table_Cos(playerID, degree, interval)
    # (Line 239) if (size == 1)
    if EUDIf()(size == 1):
        # (Line 240) {
        # (Line 241) Shape_DotAt(playerID, baseunit, count, unit, 0, 0);
        Shape_DotAt(playerID, baseunit, count, unit, 0, 0)
        # (Line 242) }
        # (Line 243) else if (size > 1)
    if EUDElseIf()(size <= 1, neg=True):
        # (Line 244) {
        # (Line 245) foreach(idx : EUDLoopRange(size))
        for idx in EUDLoopRange(size):
            # (Line 246) {
            # (Line 247) angle_x = v.P_AngleCos[playerID] * idx;
            angle_x << (v.P_AngleCos[playerID] * idx)
            # (Line 248) angle_y = v.P_AngleSin[playerID] * idx;
            angle_y << (v.P_AngleSin[playerID] * idx)
            # (Line 250) if (size % 2 == 0 && idx != size / 2)
            if EUDIf()(EUDSCAnd()(size % 2 == 0)(idx == size // 2, neg=True)()):
                # (Line 251) { Shape_SquareAt(playerID, baseunit, count, unit, angle_x + gradient_x, angle_y + gradient_y); }
                Shape_SquareAt(playerID, baseunit, count, unit, angle_x + gradient_x, angle_y + gradient_y)
                # (Line 252) else if (size % 2 == 1)
            if EUDElseIf()(size % 2 == 1):
                # (Line 253) {
                # (Line 254) if (idx == 0)
                if EUDIf()(idx == 0):
                    # (Line 255) { Shape_DotAt(playerID, baseunit, count, unit, 0, 0); }
                    Shape_DotAt(playerID, baseunit, count, unit, 0, 0)
                    # (Line 256) else
                    # (Line 257) { Shape_SquareAt(playerID, baseunit, count, unit, angle_x, angle_y); }
                if EUDElse()():
                    Shape_SquareAt(playerID, baseunit, count, unit, angle_x, angle_y)
                    # (Line 258) }
                EUDEndIf()
                # (Line 259) }
            EUDEndIf()
            # (Line 260) }

        # (Line 261) }
    EUDEndIf()
    # (Line 285) function Shape_EdgeAt(playerID : TrgPlayer, count, baseunit : TrgUnit, unit : TrgUnit, degree, size, interval)

# (Line 286) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, TrgUnit, None, None, None])
def Shape_EdgeAt(playerID, count, baseunit, unit, degree, size, interval):
    # (Line 287) trg.Table_Sin(playerID, degree, interval * 14 / 10);
    trg.Table_Sin(playerID, degree, interval * 14 // 10)
    # (Line 288) trg.Table_Cos(playerID, degree, interval * 14 / 10);
    trg.Table_Cos(playerID, degree, interval * 14 // 10)
    # (Line 290) var x_o = v.P_AngleCos[playerID];
    x_o = EUDVariable()
    x_o << (v.P_AngleCos[playerID])
    # (Line 291) var y_o = v.P_AngleSin[playerID];
    y_o = EUDVariable()
    y_o << (v.P_AngleSin[playerID])
    # (Line 293) var distance = (interval * 2) / (size - 1);
    distance = EUDVariable()
    distance << ((interval * 2) // (size - 1))
    # (Line 295) trg.Table_Sin(playerID, degree + 45, distance);
    trg.Table_Sin(playerID, degree + 45, distance)
    # (Line 296) trg.Table_Cos(playerID, degree + 45, distance);
    trg.Table_Cos(playerID, degree + 45, distance)
    # (Line 298) var distance_x = v.P_AngleCos[playerID];
    distance_x = EUDVariable()
    distance_x << (v.P_AngleCos[playerID])
    # (Line 299) var distance_y = v.P_AngleSin[playerID];
    distance_y = EUDVariable()
    distance_y << (v.P_AngleSin[playerID])
    # (Line 301) if (size == 1)
    if EUDIf()(size == 1):
        # (Line 302) { Shape_DotAt(playerID, baseunit, 1, unit, 0, 0); }
        Shape_DotAt(playerID, baseunit, 1, unit, 0, 0)
        # (Line 303) else if (size > 1)
    if EUDElseIf()(size <= 1, neg=True):
        # (Line 304) { foreach(idx : EUDLoopRange(size - 1)) { Shape_SquareAt(playerID, baseunit, 1, unit, x_o - (distance_x * idx), y_o - (distance_y * idx)); } }
        for idx in EUDLoopRange(size - 1):
            Shape_SquareAt(playerID, baseunit, 1, unit, x_o - (distance_x * idx), y_o - (distance_y * idx))

        # (Line 305) }
    EUDEndIf()
