## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import variable as v;
import variable as v
# (Line 3) import character.group1.rusaruka.text as rusaruka;
from character.group1.rusaruka import text as rusaruka
# (Line 4) import character.group1.chtholly.text as chtholly;
from character.group1.chtholly import text as chtholly
# (Line 5) import character.group1.maihime.text as maihime;
from character.group1.maihime import text as maihime
# (Line 7) function CharacterVoice(count : TrgCount)
# (Line 8) {
@EUDTypedFunc([TrgCount])
def CharacterVoice(count):
    # (Line 9) var playerID = getcurpl();
    playerID = EUDVariable()
    playerID << (f_getcurpl())
    # (Line 11) foreach(idx : EUDLoopRange(6))
    for idx in EUDLoopRange(6):
        # (Line 12) {
        # (Line 13) if 		(v.P_HeroID[playerID] == 1)	{ rusaruka.	P_player[idx] = count; rusaruka.	P_observer[idx] = count; }
        if EUDIf()(v.P_HeroID[playerID] == 1):
            _ARRW(rusaruka.P_player, idx) << (count)
            _ARRW(rusaruka.P_observer, idx) << (count)
            # (Line 14) else if 	(v.P_HeroID[playerID] == 2)	{ chtholly.	P_player[idx] = count; chtholly.	P_observer[idx] = count; 	}
        if EUDElseIf()(v.P_HeroID[playerID] == 2):
            _ARRW(chtholly.P_player, idx) << (count)
            _ARRW(chtholly.P_observer, idx) << (count)
            # (Line 15) else if 	(v.P_HeroID[playerID] == 3)	{ maihime.	P_player[idx] = count; maihime.	P_observer[idx] = count; 	}
        if EUDElseIf()(v.P_HeroID[playerID] == 3):
            _ARRW(maihime.P_player, idx) << (count)
            _ARRW(maihime.P_observer, idx) << (count)
            # (Line 16) }
        EUDEndIf()
        # (Line 17) }

    # (Line 19) function main(playerID)

# (Line 20) {
@EUDFunc
def f_main(playerID):
    # (Line 21) rusaruka.main(playerID);
    rusaruka.f_main(playerID)
    # (Line 22) chtholly.main(playerID);
    chtholly.f_main(playerID)
    # (Line 23) maihime.main(playerID);
    maihime.f_main(playerID)
    # (Line 24) }
