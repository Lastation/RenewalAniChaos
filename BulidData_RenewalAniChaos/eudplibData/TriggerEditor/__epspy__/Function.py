## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import py_math;
import math
# (Line 3) import Variable as v;
import Variable as v
# (Line 5) const step		= PVariable();			// SkillStep
step = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 6) const count 		= PVariable();			// SkillCount
count = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 7) const loop 		= PVariable();			// SkillLoop
loop = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 8) const delay		= PVariable();			// wait(value)
delay = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 9) const wait		= PVariable();			// SkillWait
wait = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 11) const INSERT_KEY = PVariable();
INSERT_KEY = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 13) const loopB 		= PVariable();			// SkillLoop2
loopB = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 14) const loopC 	= PVariable();			// SkillLoop3
loopC = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 15) const delayB	= PVariable();			// wait(value)2
delayB = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 16) const delayC	= PVariable();			// wait(value)3
delayC = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 18) const location 	= PVariable();			// 로케이션 번호
location = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 19) const heroID 	= PVariable();			// 영웅 유닛 번호
heroID = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 21) const UltimateA	= PVariable();			// 궁극기 1번 소모량
UltimateA = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 22) const UltimateB	= PVariable();			// 궁극기 2번 소모량
UltimateB = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 23) const UltimateC	= PVariable();			// 궁극기 3번 소모량
UltimateC = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 25) const UniqueA	= PVariable();			// 유니크 1번 쿨타임
UniqueA = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 27) const distance	= PVariable();			// 거리 관련 변수
distance = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 28) const SinAngle 	= PVariable();			// Sin 변수
SinAngle = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 29) const CosAngle 	= PVariable();			// Cos 변수
CosAngle = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 31) const stb		= StringBuffer();
stb = _CGFW(lambda: [StringBuffer()], 1)[0]
# (Line 33) const HoldLocation = [97, 119, 122, 126, 134, 143, 0, 0];
HoldLocation = _CGFW(lambda: [_ARR(FlattenList([97, 119, 122, 126, 134, 143, 0, 0]))], 1)[0]
# (Line 35) const CosTableArray = EUDArray(py_eval("[int(round(100*math.cos(math.radians(t)))) for t in range(361)]"));
CosTableArray = _CGFW(lambda: [EUDArray(eval("[int(round(100*math.cos(math.radians(t)))) for t in range(361)]"))], 1)[0]
# (Line 36) const SinTableArray 	= EUDArray(py_eval("[int(round(100*math.sin(math.radians(t)))) for t in range(361)]"));
SinTableArray = _CGFW(lambda: [EUDArray(eval("[int(round(100*math.sin(math.radians(t)))) for t in range(361)]"))], 1)[0]
# (Line 38) const Rusaruka_Voice 	= PVariable();	// 1
Rusaruka_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 39) const Chtholly_Voice 	= PVariable();	// 2
Chtholly_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 40) const Kiana_Voice 		= PVariable();	// 17
Kiana_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 41) const Yuuna_Voice 		= PVariable();	// 22
Yuuna_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 42) const Mayuri_Voice 		= PVariable();	// 23
Mayuri_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 43) const Nanami_Voice 		= PVariable();	// 24
Nanami_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 44) const Milim_Voice 		= PVariable();	// 25
Milim_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 45) const Yume_Voice 		= PVariable();	// 26
Yume_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 46) const Magane_Voice 	= PVariable();	// 27
Magane_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 47) const Oda_Voice 		= PVariable();	// 28
Oda_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 48) const Ekidona_Voice 	= PVariable();	// 29
Ekidona_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 49) const Niwa_Voice 		= PVariable();	// 30
Niwa_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 50) const Park_Voice 		= PVariable();	// 31
Park_Voice = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 52) const p_burrowed 		= UnitProperty(burrowed = true);
p_burrowed = _CGFW(lambda: [UnitProperty(burrowed=True)], 1)[0]
# (Line 53) const p_hallucinated 	= UnitProperty(hallucinated = true);
p_hallucinated = _CGFW(lambda: [UnitProperty(hallucinated=True)], 1)[0]
# (Line 55) const ally				= PVariable();
ally = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 57) function Table_Sin(cp, degree, distance);
# (Line 58) function Table_Cos(cp, degree, distance);
# (Line 60) function Voice_Routine(cp, num)
# (Line 61) {
@EUDFunc
def Voice_Routine(cp, num):
    # (Line 62) switch(v.Hero_Num[cp])
    EUDSwitch(v.Hero_Num[cp])
    # (Line 63) {
    # (Line 64) case 1:
    _t1 = EUDSwitchCase()
    # (Line 65) Rusaruka_Voice[0] = num;
    if _t1(1):
        _ARRW(Rusaruka_Voice, 0) << (num)
        # (Line 66) Rusaruka_Voice[1] = num;
        _ARRW(Rusaruka_Voice, 1) << (num)
        # (Line 67) Rusaruka_Voice[2] = num;
        _ARRW(Rusaruka_Voice, 2) << (num)
        # (Line 68) Rusaruka_Voice[3] = num;
        _ARRW(Rusaruka_Voice, 3) << (num)
        # (Line 69) Rusaruka_Voice[4] = num;
        _ARRW(Rusaruka_Voice, 4) << (num)
        # (Line 70) Rusaruka_Voice[5] = num;
        _ARRW(Rusaruka_Voice, 5) << (num)
        # (Line 71) break;
        EUDBreak()
        # (Line 72) case 2:
    _t2 = EUDSwitchCase()
    # (Line 73) Chtholly_Voice[0] = num;
    if _t2(2):
        _ARRW(Chtholly_Voice, 0) << (num)
        # (Line 74) Chtholly_Voice[1] = num;
        _ARRW(Chtholly_Voice, 1) << (num)
        # (Line 75) Chtholly_Voice[2] = num;
        _ARRW(Chtholly_Voice, 2) << (num)
        # (Line 76) Chtholly_Voice[3] = num;
        _ARRW(Chtholly_Voice, 3) << (num)
        # (Line 77) Chtholly_Voice[4] = num;
        _ARRW(Chtholly_Voice, 4) << (num)
        # (Line 78) Chtholly_Voice[5] = num;
        _ARRW(Chtholly_Voice, 5) << (num)
        # (Line 79) break;
        EUDBreak()
        # (Line 80) case 17:
    _t3 = EUDSwitchCase()
    # (Line 81) Kiana_Voice[0] = num;
    if _t3(17):
        _ARRW(Kiana_Voice, 0) << (num)
        # (Line 82) Kiana_Voice[1] = num;
        _ARRW(Kiana_Voice, 1) << (num)
        # (Line 83) Kiana_Voice[2] = num;
        _ARRW(Kiana_Voice, 2) << (num)
        # (Line 84) Kiana_Voice[3] = num;
        _ARRW(Kiana_Voice, 3) << (num)
        # (Line 85) Kiana_Voice[4] = num;
        _ARRW(Kiana_Voice, 4) << (num)
        # (Line 86) Kiana_Voice[5] = num;
        _ARRW(Kiana_Voice, 5) << (num)
        # (Line 87) break;
        EUDBreak()
        # (Line 88) case 22:
    _t4 = EUDSwitchCase()
    # (Line 89) Yuuna_Voice[0] = num;
    if _t4(22):
        _ARRW(Yuuna_Voice, 0) << (num)
        # (Line 90) Yuuna_Voice[1] = num;
        _ARRW(Yuuna_Voice, 1) << (num)
        # (Line 91) Yuuna_Voice[2] = num;
        _ARRW(Yuuna_Voice, 2) << (num)
        # (Line 92) Yuuna_Voice[3] = num;
        _ARRW(Yuuna_Voice, 3) << (num)
        # (Line 93) Yuuna_Voice[4] = num;
        _ARRW(Yuuna_Voice, 4) << (num)
        # (Line 94) Yuuna_Voice[5] = num;
        _ARRW(Yuuna_Voice, 5) << (num)
        # (Line 95) break;
        EUDBreak()
        # (Line 96) case 23:
    _t5 = EUDSwitchCase()
    # (Line 97) Mayuri_Voice[0] = num;
    if _t5(23):
        _ARRW(Mayuri_Voice, 0) << (num)
        # (Line 98) Mayuri_Voice[1] = num;
        _ARRW(Mayuri_Voice, 1) << (num)
        # (Line 99) Mayuri_Voice[2] = num;
        _ARRW(Mayuri_Voice, 2) << (num)
        # (Line 100) Mayuri_Voice[3] = num;
        _ARRW(Mayuri_Voice, 3) << (num)
        # (Line 101) Mayuri_Voice[4] = num;
        _ARRW(Mayuri_Voice, 4) << (num)
        # (Line 102) Mayuri_Voice[5] = num;
        _ARRW(Mayuri_Voice, 5) << (num)
        # (Line 103) break;
        EUDBreak()
        # (Line 104) case 24:
    _t6 = EUDSwitchCase()
    # (Line 105) Nanami_Voice[0] = num;
    if _t6(24):
        _ARRW(Nanami_Voice, 0) << (num)
        # (Line 106) Nanami_Voice[1] = num;
        _ARRW(Nanami_Voice, 1) << (num)
        # (Line 107) Nanami_Voice[2] = num;
        _ARRW(Nanami_Voice, 2) << (num)
        # (Line 108) Nanami_Voice[3] = num;
        _ARRW(Nanami_Voice, 3) << (num)
        # (Line 109) Nanami_Voice[4] = num;
        _ARRW(Nanami_Voice, 4) << (num)
        # (Line 110) Nanami_Voice[5] = num;
        _ARRW(Nanami_Voice, 5) << (num)
        # (Line 111) break;
        EUDBreak()
        # (Line 112) case 25:
    _t7 = EUDSwitchCase()
    # (Line 113) Milim_Voice[0] = num;
    if _t7(25):
        _ARRW(Milim_Voice, 0) << (num)
        # (Line 114) Milim_Voice[1] = num;
        _ARRW(Milim_Voice, 1) << (num)
        # (Line 115) Milim_Voice[2] = num;
        _ARRW(Milim_Voice, 2) << (num)
        # (Line 116) Milim_Voice[3] = num;
        _ARRW(Milim_Voice, 3) << (num)
        # (Line 117) Milim_Voice[4] = num;
        _ARRW(Milim_Voice, 4) << (num)
        # (Line 118) Milim_Voice[5] = num;
        _ARRW(Milim_Voice, 5) << (num)
        # (Line 119) break;
        EUDBreak()
        # (Line 120) case 26:
    _t8 = EUDSwitchCase()
    # (Line 121) Yume_Voice[0] = num;
    if _t8(26):
        _ARRW(Yume_Voice, 0) << (num)
        # (Line 122) Yume_Voice[1] = num;
        _ARRW(Yume_Voice, 1) << (num)
        # (Line 123) Yume_Voice[2] = num;
        _ARRW(Yume_Voice, 2) << (num)
        # (Line 124) Yume_Voice[3] = num;
        _ARRW(Yume_Voice, 3) << (num)
        # (Line 125) Yume_Voice[4] = num;
        _ARRW(Yume_Voice, 4) << (num)
        # (Line 126) Yume_Voice[5] = num;
        _ARRW(Yume_Voice, 5) << (num)
        # (Line 127) break;
        EUDBreak()
        # (Line 128) case 27:
    _t9 = EUDSwitchCase()
    # (Line 129) Magane_Voice[0] = num;
    if _t9(27):
        _ARRW(Magane_Voice, 0) << (num)
        # (Line 130) Magane_Voice[1] = num;
        _ARRW(Magane_Voice, 1) << (num)
        # (Line 131) Magane_Voice[2] = num;
        _ARRW(Magane_Voice, 2) << (num)
        # (Line 132) Magane_Voice[3] = num;
        _ARRW(Magane_Voice, 3) << (num)
        # (Line 133) Magane_Voice[4] = num;
        _ARRW(Magane_Voice, 4) << (num)
        # (Line 134) Magane_Voice[5] = num;
        _ARRW(Magane_Voice, 5) << (num)
        # (Line 135) break;
        EUDBreak()
        # (Line 136) case 28:
    _t10 = EUDSwitchCase()
    # (Line 137) Oda_Voice[0] = num;
    if _t10(28):
        _ARRW(Oda_Voice, 0) << (num)
        # (Line 138) Oda_Voice[1] = num;
        _ARRW(Oda_Voice, 1) << (num)
        # (Line 139) Oda_Voice[2] = num;
        _ARRW(Oda_Voice, 2) << (num)
        # (Line 140) Oda_Voice[3] = num;
        _ARRW(Oda_Voice, 3) << (num)
        # (Line 141) Oda_Voice[4] = num;
        _ARRW(Oda_Voice, 4) << (num)
        # (Line 142) Oda_Voice[5] = num;
        _ARRW(Oda_Voice, 5) << (num)
        # (Line 143) break;
        EUDBreak()
        # (Line 144) case 29:
    _t11 = EUDSwitchCase()
    # (Line 145) Ekidona_Voice[0] = num;
    if _t11(29):
        _ARRW(Ekidona_Voice, 0) << (num)
        # (Line 146) Ekidona_Voice[1] = num;
        _ARRW(Ekidona_Voice, 1) << (num)
        # (Line 147) Ekidona_Voice[2] = num;
        _ARRW(Ekidona_Voice, 2) << (num)
        # (Line 148) Ekidona_Voice[3] = num;
        _ARRW(Ekidona_Voice, 3) << (num)
        # (Line 149) Ekidona_Voice[4] = num;
        _ARRW(Ekidona_Voice, 4) << (num)
        # (Line 150) Ekidona_Voice[5] = num;
        _ARRW(Ekidona_Voice, 5) << (num)
        # (Line 151) break;
        EUDBreak()
        # (Line 152) case 30:
    _t12 = EUDSwitchCase()
    # (Line 153) Niwa_Voice[0] = num;
    if _t12(30):
        _ARRW(Niwa_Voice, 0) << (num)
        # (Line 154) Niwa_Voice[1] = num;
        _ARRW(Niwa_Voice, 1) << (num)
        # (Line 155) Niwa_Voice[2] = num;
        _ARRW(Niwa_Voice, 2) << (num)
        # (Line 156) Niwa_Voice[3] = num;
        _ARRW(Niwa_Voice, 3) << (num)
        # (Line 157) Niwa_Voice[4] = num;
        _ARRW(Niwa_Voice, 4) << (num)
        # (Line 158) Niwa_Voice[5] = num;
        _ARRW(Niwa_Voice, 5) << (num)
        # (Line 159) break;
        EUDBreak()
        # (Line 160) case 31:
    _t13 = EUDSwitchCase()
    # (Line 161) Park_Voice[0] = num;
    if _t13(31):
        _ARRW(Park_Voice, 0) << (num)
        # (Line 162) Park_Voice[1] = num;
        _ARRW(Park_Voice, 1) << (num)
        # (Line 163) Park_Voice[2] = num;
        _ARRW(Park_Voice, 2) << (num)
        # (Line 164) Park_Voice[3] = num;
        _ARRW(Park_Voice, 3) << (num)
        # (Line 165) Park_Voice[4] = num;
        _ARRW(Park_Voice, 4) << (num)
        # (Line 166) Park_Voice[5] = num;
        _ARRW(Park_Voice, 5) << (num)
        # (Line 167) break;
        EUDBreak()
        # (Line 169) }
    # (Line 170) }
    EUDEndSwitch()
    # (Line 172) function SetHeroID(cp)

# (Line 173) {
@EUDFunc
def SetHeroID(cp):
    # (Line 174) switch(v.Hero_Num[cp])
    EUDSwitch(v.Hero_Num[cp])
    # (Line 175) {
    # (Line 176) case 3:
    _t1 = EUDSwitchCase()
    # (Line 177) heroID[cp] = 74;
    if _t1(3):
        _ARRW(heroID, cp) << (74)
        # (Line 178) break;
        EUDBreak()
        # (Line 179) case 4:
    _t2 = EUDSwitchCase()
    # (Line 180) heroID[cp] = 74;
    if _t2(4):
        _ARRW(heroID, cp) << (74)
        # (Line 181) break;
        EUDBreak()
        # (Line 182) case 5:
    _t3 = EUDSwitchCase()
    # (Line 183) heroID[cp] = 74;
    if _t3(5):
        _ARRW(heroID, cp) << (74)
        # (Line 184) break;
        EUDBreak()
        # (Line 185) case 6:
    _t4 = EUDSwitchCase()
    # (Line 186) heroID[cp] = 16;
    if _t4(6):
        _ARRW(heroID, cp) << (16)
        # (Line 187) break;
        EUDBreak()
        # (Line 188) case 7:
    _t5 = EUDSwitchCase()
    # (Line 189) heroID[cp] = 77;
    if _t5(7):
        _ARRW(heroID, cp) << (77)
        # (Line 190) break;
        EUDBreak()
        # (Line 191) case 8:
    _t6 = EUDSwitchCase()
    # (Line 192) heroID[cp] = 51;
    if _t6(8):
        _ARRW(heroID, cp) << (51)
        # (Line 193) break;
        EUDBreak()
        # (Line 194) case 9:
    _t7 = EUDSwitchCase()
    # (Line 195) heroID[cp] = 51;
    if _t7(9):
        _ARRW(heroID, cp) << (51)
        # (Line 196) break;
        EUDBreak()
        # (Line 197) case 10:
    _t8 = EUDSwitchCase()
    # (Line 198) heroID[cp] = 77;
    if _t8(10):
        _ARRW(heroID, cp) << (77)
        # (Line 199) break;
        EUDBreak()
        # (Line 200) case 11:
    _t9 = EUDSwitchCase()
    # (Line 201) heroID[cp] = 16;
    if _t9(11):
        _ARRW(heroID, cp) << (16)
        # (Line 202) break;
        EUDBreak()
        # (Line 203) case 12:
    _t10 = EUDSwitchCase()
    # (Line 204) heroID[cp] = 54;
    if _t10(12):
        _ARRW(heroID, cp) << (54)
        # (Line 205) break;
        EUDBreak()
        # (Line 206) case 13:
    _t11 = EUDSwitchCase()
    # (Line 207) heroID[cp] = 16;
    if _t11(13):
        _ARRW(heroID, cp) << (16)
        # (Line 208) break;
        EUDBreak()
        # (Line 209) case 14:
    _t12 = EUDSwitchCase()
    # (Line 210) heroID[cp] = 99;
    if _t12(14):
        _ARRW(heroID, cp) << (99)
        # (Line 211) break;
        EUDBreak()
        # (Line 212) case 15:
    _t13 = EUDSwitchCase()
    # (Line 213) heroID[cp] = 54;
    if _t13(15):
        _ARRW(heroID, cp) << (54)
        # (Line 214) break;
        EUDBreak()
        # (Line 215) case 16:
    _t14 = EUDSwitchCase()
    # (Line 216) heroID[cp] = 16;
    if _t14(16):
        _ARRW(heroID, cp) << (16)
        # (Line 217) break;
        EUDBreak()
        # (Line 218) case 17:
    _t15 = EUDSwitchCase()
    # (Line 219) heroID[cp] = 77;
    if _t15(17):
        _ARRW(heroID, cp) << (77)
        # (Line 220) break;
        EUDBreak()
        # (Line 221) case 18:
    _t16 = EUDSwitchCase()
    # (Line 222) heroID[cp] = 99;
    if _t16(18):
        _ARRW(heroID, cp) << (99)
        # (Line 223) break;
        EUDBreak()
        # (Line 224) case 19:
    _t17 = EUDSwitchCase()
    # (Line 225) heroID[cp] = 51;
    if _t17(19):
        _ARRW(heroID, cp) << (51)
        # (Line 226) break;
        EUDBreak()
        # (Line 227) case 20:
    _t18 = EUDSwitchCase()
    # (Line 228) heroID[cp] = 99;
    if _t18(20):
        _ARRW(heroID, cp) << (99)
        # (Line 229) break;
        EUDBreak()
        # (Line 230) case 21:
    _t19 = EUDSwitchCase()
    # (Line 231) heroID[cp] = 64;
    if _t19(21):
        _ARRW(heroID, cp) << (64)
        # (Line 232) break;
        EUDBreak()
        # (Line 233) }
    # (Line 234) }
    EUDEndSwitch()
    # (Line 236) function ShieldFix(cp : TrgPlayer, amount)

# (Line 237) {
@EUDTypedFunc([TrgPlayer, None])
def ShieldFix(cp, amount):
    # (Line 238) SetDeaths(cp, SetTo, 1, " `ShieldRecharge");
    # (Line 239) v.Shield[cp] = amount;
    DoActions(SetDeaths(cp, SetTo, 1, " `ShieldRecharge"))
    _ARRW(v.Shield, cp) << (amount)
    # (Line 240) }
    # (Line 242) function ComputerAlly(cp : TrgPlayer)

# (Line 243) {
@EUDTypedFunc([TrgPlayer])
def ComputerAlly(cp):
    # (Line 244) ally[cp] = 1;
    _ARRW(ally, cp) << (1)
    # (Line 245) SetSwitch("ComputerAlliy", Set);
    # (Line 246) SetAllianceStatus(P7, Ally);
    DoActions(SetSwitch("ComputerAlliy", Set))
    # (Line 247) SetAllianceStatus(P8, Ally);
    DoActions(SetAllianceStatus(P7, Ally))
    # (Line 248) }
    DoActions(SetAllianceStatus(P8, Ally))
    # (Line 250) function MoveLoc(Unit : TrgUnit, cp : TrgPlayer, x, y)

# (Line 251) {
@EUDTypedFunc([TrgUnit, TrgPlayer, None, None])
def MoveLoc(Unit, cp, x, y):
    # (Line 252) MoveLocation(location[cp], Unit, cp, "Anywhere");
    # (Line 253) addloc(location[cp], x, y);
    DoActions(MoveLocation(location[cp], Unit, cp, "Anywhere"))
    f_addloc(location[cp], x, y)
    # (Line 254) }
    # (Line 256) function SkillUnitWithProperty(cp : TrgPlayer, count, Unit : TrgUnit, property)

# (Line 257) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None])
def SkillUnitWithProperty(cp, count_1, Unit, property):
    # (Line 258) switch (property)
    EUDSwitch(property)
    # (Line 259) {
    # (Line 260) case 0:
    _t1 = EUDSwitchCase()
    # (Line 261) CreateUnitWithProperties(count, Unit, dwrand() % 8 + 33, cp, UnitProperty(burrowed = true));
    if _t1(0):
        # (Line 262) break;
        DoActions(CreateUnitWithProperties(count_1, Unit, f_dwrand() % 8 + 33, cp, UnitProperty(burrowed=True)))
        EUDBreak()
        # (Line 263) case 1:
    _t2 = EUDSwitchCase()
    # (Line 264) CreateUnitWithProperties(count, Unit, dwrand() % 8 + 33, cp, UnitProperty(hallucinated = true));
    if _t2(1):
        # (Line 265) break;
        DoActions(CreateUnitWithProperties(count_1, Unit, f_dwrand() % 8 + 33, cp, UnitProperty(hallucinated=True)))
        EUDBreak()
        # (Line 266) case 2:
    _t3 = EUDSwitchCase()
    # (Line 267) CreateUnitWithProperties(count, Unit, dwrand() % 8 + 33, cp, UnitProperty(hallucinated = true, burrowed = true));
    if _t3(2):
        # (Line 268) break;
        DoActions(CreateUnitWithProperties(count_1, Unit, f_dwrand() % 8 + 33, cp, UnitProperty(hallucinated=True, burrowed=True)))
        EUDBreak()
        # (Line 270) }
    # (Line 272) SetInvincibility(Enable, Unit, cp, "[Skill]Unit_Wait_ALL");
    EUDEndSwitch()
    # (Line 273) MoveUnit(count, Unit, cp, "[Skill]Unit_Wait_ALL", location[cp]);
    DoActions(SetInvincibility(Enable, Unit, cp, "[Skill]Unit_Wait_ALL"))
    # (Line 274) }
    DoActions(MoveUnit(count_1, Unit, cp, "[Skill]Unit_Wait_ALL", location[cp]))
    # (Line 276) function SkillUnit(cp : TrgPlayer, count, Unit : TrgUnit)

# (Line 277) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit])
def SkillUnit(cp, count_1, Unit):
    # (Line 278) CreateUnit(count, Unit, dwrand() % 8 + 33, cp);
    # (Line 279) SetInvincibility(Enable, Unit, cp, "[Skill]Unit_Wait_ALL");
    DoActions(CreateUnit(count_1, Unit, f_dwrand() % 8 + 33, cp))
    # (Line 280) MoveUnit(count, Unit, cp, "[Skill]Unit_Wait_ALL", location[cp]);
    DoActions(SetInvincibility(Enable, Unit, cp, "[Skill]Unit_Wait_ALL"))
    # (Line 281) }
    DoActions(MoveUnit(count_1, Unit, cp, "[Skill]Unit_Wait_ALL", location[cp]))
    # (Line 283) function BanReturn(cp)

# (Line 284) {
@EUDFunc
def BanReturn(cp):
    # (Line 285) KillUnit("Protoss Observer", cp);
    # (Line 286) }
    DoActions(KillUnit("Protoss Observer", cp))
    # (Line 288) function Slow(cp)

# (Line 289) {
@EUDFunc
def Slow(cp):
    # (Line 290) MoveLocation(HoldLocation[cp], heroID[cp], cp, "Anywhere");
    # (Line 291) CreateUnit(1, "Zerg Devourer", "[Skill]Unit_Wait_8", cp);
    DoActions(MoveLocation(HoldLocation[cp], heroID[cp], cp, "Anywhere"))
    # (Line 292) SetInvincibility(Enable, "Zerg Devourer", cp, "[Skill]Unit_Wait_ALL");
    DoActions(CreateUnit(1, "Zerg Devourer", "[Skill]Unit_Wait_8", cp))
    # (Line 293) MoveUnit(1, "Zerg Devourer", cp, "[Skill]Unit_Wait_ALL", HoldLocation[cp]);
    DoActions(SetInvincibility(Enable, "Zerg Devourer", cp, "[Skill]Unit_Wait_ALL"))
    # (Line 294) RemoveUnitAt(1, "Zerg Devourer", "Anywhere", cp);
    DoActions(MoveUnit(1, "Zerg Devourer", cp, "[Skill]Unit_Wait_ALL", HoldLocation[cp]))
    # (Line 295) }
    DoActions(RemoveUnitAt(1, "Zerg Devourer", "Anywhere", cp))
    # (Line 297) function HoldPosition(cp)

# (Line 298) {
@EUDFunc
def HoldPosition(cp):
    # (Line 299) Slow(cp);
    Slow(cp)
    # (Line 300) MoveLocation(HoldLocation[cp], heroID[cp], cp, "Anywhere");
    # (Line 301) Order(heroID[cp], cp, "Anywhere", Move, HoldLocation[cp]);
    DoActions(MoveLocation(HoldLocation[cp], heroID[cp], cp, "Anywhere"))
    # (Line 302) }
    DoActions(Order(heroID[cp], cp, "Anywhere", Move, HoldLocation[cp]))
    # (Line 304) function DotShapeWithProperty(cp : TrgPlayer, count, Unit : TrgUnit, x, y, property)

# (Line 305) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None])
def DotShapeWithProperty(cp, count_1, Unit, x, y, property):
    # (Line 306) MoveLoc(heroID[cp], cp, x, y);
    MoveLoc(heroID[cp], cp, x, y)
    # (Line 307) SkillUnitWithProperty(cp, count, Unit, property);
    SkillUnitWithProperty(cp, count_1, Unit, property)
    # (Line 308) }
    # (Line 310) function DotShape(cp : TrgPlayer, count, Unit : TrgUnit, x, y)

# (Line 311) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def DotShape(cp, count_1, Unit, x, y):
    # (Line 312) MoveLoc(heroID[cp], cp, x, y);
    MoveLoc(heroID[cp], cp, x, y)
    # (Line 313) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 314) }
    # (Line 316) function SkillWait(cp, count)

# (Line 317) {
@EUDFunc
def SkillWait(cp, count_1):
    # (Line 318) delay[cp] = count/83 + 1;
    _ARRW(delay, cp) << (count_1 // 83 + 1)
    # (Line 319) }
    # (Line 321) function SkillWaitB(cp, count)

# (Line 322) {
@EUDFunc
def SkillWaitB(cp, count_1):
    # (Line 323) delayB[cp] = count/83 + 1;
    _ARRW(delayB, cp) << (count_1 // 83 + 1)
    # (Line 324) }
    # (Line 326) function SkillWaitC(cp, count)

# (Line 327) {
@EUDFunc
def SkillWaitC(cp, count_1):
    # (Line 328) delayC[cp] = count/83 + 1;
    _ARRW(delayC, cp) << (count_1 // 83 + 1)
    # (Line 329) }
    # (Line 331) function SkillEnd(cp)

# (Line 332) {
@EUDFunc
def SkillEnd(cp):
    # (Line 333) count[cp] = 999;
    _ARRW(count, cp) << (999)
    # (Line 335) v.Shield[cp] = 0;
    _ARRW(v.Shield, cp) << (0)
    # (Line 336) SetDeaths(cp, SetTo, 0, " `ShieldRecharge");
    # (Line 338) if (ally[cp] == 1)
    DoActions(SetDeaths(cp, SetTo, 0, " `ShieldRecharge"))
    if EUDIf()(ally[cp] == 1):
        # (Line 339) {
        # (Line 340) SetSwitch("ComputerAlliy", Clear);
        # (Line 341) if (cp < 3)
        DoActions(SetSwitch("ComputerAlliy", Clear))
        if EUDIf()(cp >= 3, neg=True):
            # (Line 342) {
            # (Line 343) SetAllianceStatus(P8, Enemy);
            # (Line 344) }
            DoActions(SetAllianceStatus(P8, Enemy))
            # (Line 345) else if (cp >= 3)
        if EUDElseIf()(cp >= 3):
            # (Line 346) {
            # (Line 347) SetAllianceStatus(P7, Enemy);
            # (Line 348) }
            DoActions(SetAllianceStatus(P7, Enemy))
            # (Line 349) ally[cp] = 0;
        EUDEndIf()
        _ARRW(ally, cp) << (0)
        # (Line 350) }
        # (Line 351) }
    EUDEndIf()
    # (Line 353) function DoubleShapeWithProperty(cp : TrgPlayer, count, Unit : TrgUnit, x, y, property)

# (Line 354) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None])
def DoubleShapeWithProperty(cp, count_1, Unit, x, y, property):
    # (Line 355) MoveLoc(heroID[cp], cp, x, y);
    MoveLoc(heroID[cp], cp, x, y)
    # (Line 356) SkillUnitWithProperty(cp, count, Unit, property);
    SkillUnitWithProperty(cp, count_1, Unit, property)
    # (Line 357) MoveLoc(heroID[cp], cp, -x, -y);
    MoveLoc(heroID[cp], cp, -x, -y)
    # (Line 358) SkillUnitWithProperty(cp, count, Unit, property);
    SkillUnitWithProperty(cp, count_1, Unit, property)
    # (Line 359) }
    # (Line 361) function DoubleShape(cp : TrgPlayer, count, Unit : TrgUnit, x, y)

# (Line 362) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None])
def DoubleShape(cp, count_1, Unit, x, y):
    # (Line 363) MoveLoc(heroID[cp], cp, x, y);
    MoveLoc(heroID[cp], cp, x, y)
    # (Line 364) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 365) MoveLoc(heroID[cp], cp, -x, -y);
    MoveLoc(heroID[cp], cp, -x, -y)
    # (Line 366) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 367) }
    # (Line 369) function SquareShapeWithProperty(cp : TrgPlayer, count, Unit : TrgUnit, x, y, property)

# (Line 370) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None])
def SquareShapeWithProperty(cp, count_1, Unit, x, y, property):
    # (Line 371) MoveLoc(heroID[cp], cp, x, y);
    MoveLoc(heroID[cp], cp, x, y)
    # (Line 372) SkillUnitWithProperty(cp, count, Unit, property);
    SkillUnitWithProperty(cp, count_1, Unit, property)
    # (Line 373) MoveLoc(heroID[cp], cp, -y, x);
    MoveLoc(heroID[cp], cp, -y, x)
    # (Line 374) SkillUnitWithProperty(cp, count, Unit, property);
    SkillUnitWithProperty(cp, count_1, Unit, property)
    # (Line 375) MoveLoc(heroID[cp], cp, -x, -y);
    MoveLoc(heroID[cp], cp, -x, -y)
    # (Line 376) SkillUnitWithProperty(cp, count, Unit, property);
    SkillUnitWithProperty(cp, count_1, Unit, property)
    # (Line 377) MoveLoc(heroID[cp], cp, y, -x);
    MoveLoc(heroID[cp], cp, y, -x)
    # (Line 378) SkillUnitWithProperty(cp, count, Unit, property);
    SkillUnitWithProperty(cp, count_1, Unit, property)
    # (Line 379) }
    # (Line 381) function SquareShapeAtWithProperty(cp : TrgPlayer, count, Unit : TrgUnit, x, y, distanceX, distanceY, property)

# (Line 382) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None, None])
def SquareShapeAtWithProperty(cp, count_1, Unit, x, y, distanceX, distanceY, property):
    # (Line 383) MoveLoc(heroID[cp], cp, x + distanceX, y + distanceY);
    MoveLoc(heroID[cp], cp, x + distanceX, y + distanceY)
    # (Line 384) SkillUnitWithProperty(cp, count, Unit, property);
    SkillUnitWithProperty(cp, count_1, Unit, property)
    # (Line 385) MoveLoc(heroID[cp], cp, -y + distanceX, x + distanceY);
    MoveLoc(heroID[cp], cp, -y + distanceX, x + distanceY)
    # (Line 386) SkillUnitWithProperty(cp, count, Unit, property);
    SkillUnitWithProperty(cp, count_1, Unit, property)
    # (Line 387) MoveLoc(heroID[cp], cp, -x + distanceX, -y + distanceY);
    MoveLoc(heroID[cp], cp, -x + distanceX, -y + distanceY)
    # (Line 388) SkillUnitWithProperty(cp, count, Unit, property);
    SkillUnitWithProperty(cp, count_1, Unit, property)
    # (Line 389) MoveLoc(heroID[cp], cp, y + distanceX, -x + distanceY);
    MoveLoc(heroID[cp], cp, y + distanceX, -x + distanceY)
    # (Line 390) SkillUnitWithProperty(cp, count, Unit, property);
    SkillUnitWithProperty(cp, count_1, Unit, property)
    # (Line 391) }
    # (Line 394) function SquareShapeAt(cp : TrgPlayer, count, Unit : TrgUnit, x, y, distanceX, distanceY)

# (Line 395) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None])
def SquareShapeAt(cp, count_1, Unit, x, y, distanceX, distanceY):
    # (Line 396) MoveLoc(heroID[cp], cp, x + distanceX, y + distanceY);
    MoveLoc(heroID[cp], cp, x + distanceX, y + distanceY)
    # (Line 397) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 398) MoveLoc(heroID[cp], cp, -y + distanceX, x + distanceY);
    MoveLoc(heroID[cp], cp, -y + distanceX, x + distanceY)
    # (Line 399) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 400) MoveLoc(heroID[cp], cp, -x + distanceX, -y + distanceY);
    MoveLoc(heroID[cp], cp, -x + distanceX, -y + distanceY)
    # (Line 401) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 402) MoveLoc(heroID[cp], cp, y + distanceX, -x + distanceY);
    MoveLoc(heroID[cp], cp, y + distanceX, -x + distanceY)
    # (Line 403) SkillUnit(cp, count, Unit);
    SkillUnit(cp, count_1, Unit)
    # (Line 404) }
    # (Line 406) function NxNSquareShapeWithProperty(cp : TrgPlayer, count, Unit : TrgUnit, n, interval, property)

# (Line 407) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None])
def NxNSquareShapeWithProperty(cp, count_1, Unit, n, interval, property):
    # (Line 408) var i = 0;
    i = EUDVariable()
    i << (0)
    # (Line 409) var destX, destY;
    destX, destY = EUDCreateVariables(2)
    # (Line 410) var distance = interval / 2;
    distance_1 = EUDVariable()
    distance_1 << (interval // 2)
    # (Line 411) var size = n * n;
    size = EUDVariable()
    size << (n * n)
    # (Line 413) for (; i < size / 4; i++)
    if EUDWhile()(i >= size // 4, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 414) {
        # (Line 415) if (n == 1)
        if EUDIf()(n == 1):
            # (Line 416) {
            # (Line 417) MoveLoc(heroID[cp] ,cp, 0, 0);
            MoveLoc(heroID[cp], cp, 0, 0)
            # (Line 418) SkillUnitWithProperty(cp, count, Unit, property);
            SkillUnitWithProperty(cp, count_1, Unit, property)
            # (Line 419) }
            # (Line 420) else if (n % 2 == 0)
        if EUDElseIf()(n % 2 == 0):
            # (Line 421) {
            # (Line 422) destX = i % (n / 2) + 1;
            destX << (i % (n // 2) + 1)
            # (Line 423) destY = i / (n / 2) + 1;
            destY << (i // (n // 2) + 1)
            # (Line 424) if (destX == 1)
            if EUDIf()(destX == 1):
                # (Line 425) {
                # (Line 426) SquareShapeWithProperty(cp, count, Unit, distance, destY * interval - distance, property);
                SquareShapeWithProperty(cp, count_1, Unit, distance_1, destY * interval - distance_1, property)
                # (Line 427) }
                # (Line 428) else if (destY == 1)
            if EUDElseIf()(destY == 1):
                # (Line 429) {
                # (Line 430) SquareShapeWithProperty(cp, count, Unit, destX * interval - distance, distance, property);
                SquareShapeWithProperty(cp, count_1, Unit, destX * interval - distance_1, distance_1, property)
                # (Line 431) }
                # (Line 432) else
                # (Line 433) {
            if EUDElse()():
                # (Line 434) SquareShapeWithProperty(cp, count, Unit, destX * interval - distance, destY * interval - distance, property);
                SquareShapeWithProperty(cp, count_1, Unit, destX * interval - distance_1, destY * interval - distance_1, property)
                # (Line 435) }
                # (Line 436) }
            EUDEndIf()
            # (Line 437) else if (n % 2 == 1)
        if EUDElseIf()(n % 2 == 1):
            # (Line 438) {
            # (Line 439) destX = i % (n / 2);
            destX << (i % (n // 2))
            # (Line 440) destY = i / (n / 2);
            destY << (i // (n // 2))
            # (Line 442) if (i == 0)
            if EUDIf()(i == 0):
                # (Line 443) {
                # (Line 444) MoveLoc(heroID[cp] ,cp, 0, 0);
                MoveLoc(heroID[cp], cp, 0, 0)
                # (Line 445) SkillUnitWithProperty(cp, count, Unit, property);
                SkillUnitWithProperty(cp, count_1, Unit, property)
                # (Line 446) }
                # (Line 447) else if (destY == 0)
            if EUDElseIf()(destY == 0):
                # (Line 448) {
                # (Line 449) SquareShapeWithProperty(cp, count, Unit, destX * interval, 0, property);
                SquareShapeWithProperty(cp, count_1, Unit, destX * interval, 0, property)
                # (Line 450) }
                # (Line 451) else
                # (Line 452) {
            if EUDElse()():
                # (Line 453) SquareShapeWithProperty(cp, count, Unit, destX * interval + interval, destY * interval, property);
                SquareShapeWithProperty(cp, count_1, Unit, destX * interval + interval, destY * interval, property)
                # (Line 454) }
                # (Line 456) if (i == size / 4 - 1)
            EUDEndIf()
            if EUDIf()(i == size // 4 - 1):
                # (Line 457) {
                # (Line 458) SquareShapeWithProperty(cp, count, Unit, (n / 2) * interval, 0, property);
                SquareShapeWithProperty(cp, count_1, Unit, (n // 2) * interval, 0, property)
                # (Line 459) }
                # (Line 460) }
            EUDEndIf()
            # (Line 461) }
        EUDEndIf()
        # (Line 462) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 464) function NxNSquareShapeAt(cp : TrgPlayer, count, Unit : TrgUnit, n, interval, distanceX, distanceY)

# (Line 465) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None])
def NxNSquareShapeAt(cp, count_1, Unit, n, interval, distanceX, distanceY):
    # (Line 466) var i = 0;
    i = EUDVariable()
    i << (0)
    # (Line 467) var destX, destY;
    destX, destY = EUDCreateVariables(2)
    # (Line 468) var distance = interval / 2;
    distance_1 = EUDVariable()
    distance_1 << (interval // 2)
    # (Line 469) var size = n * n;
    size = EUDVariable()
    size << (n * n)
    # (Line 471) for (; i < size / 4; i++)
    if EUDWhile()(i >= size // 4, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 472) {
        # (Line 473) if (n == 1)
        if EUDIf()(n == 1):
            # (Line 474) {
            # (Line 475) MoveLoc(heroID[cp] ,cp, distanceX, distanceY);
            MoveLoc(heroID[cp], cp, distanceX, distanceY)
            # (Line 476) SkillUnit(cp, count, Unit);
            SkillUnit(cp, count_1, Unit)
            # (Line 477) }
            # (Line 478) else if (n % 2 == 0)
        if EUDElseIf()(n % 2 == 0):
            # (Line 479) {
            # (Line 480) destX = i % (n / 2) + 1;
            destX << (i % (n // 2) + 1)
            # (Line 481) destY = i / (n / 2) + 1;
            destY << (i // (n // 2) + 1)
            # (Line 483) if (destX == 1)
            if EUDIf()(destX == 1):
                # (Line 484) {
                # (Line 485) SquareShapeAt(cp, count, Unit, distance, destY * interval - distance, distanceX, distanceY);
                SquareShapeAt(cp, count_1, Unit, distance_1, destY * interval - distance_1, distanceX, distanceY)
                # (Line 486) }
                # (Line 487) else if (destY == 1)
            if EUDElseIf()(destY == 1):
                # (Line 488) {
                # (Line 489) SquareShapeAt(cp, count, Unit, destX * interval - distance, distance, distanceX, distanceY);
                SquareShapeAt(cp, count_1, Unit, destX * interval - distance_1, distance_1, distanceX, distanceY)
                # (Line 490) }
                # (Line 491) else
                # (Line 492) {
            if EUDElse()():
                # (Line 493) SquareShapeAt(cp, count, Unit, destX * interval - distance, destY * interval - distance, distanceX, distanceY);
                SquareShapeAt(cp, count_1, Unit, destX * interval - distance_1, destY * interval - distance_1, distanceX, distanceY)
                # (Line 494) }
                # (Line 495) }
            EUDEndIf()
            # (Line 496) else if (n % 2 == 1)
        if EUDElseIf()(n % 2 == 1):
            # (Line 497) {
            # (Line 498) destX = i % (n / 2);
            destX << (i % (n // 2))
            # (Line 499) destY = i / (n / 2);
            destY << (i // (n // 2))
            # (Line 501) if (i == 0)
            if EUDIf()(i == 0):
                # (Line 502) {
                # (Line 503) MoveLoc(heroID[cp] ,cp, distanceX, distanceY);
                MoveLoc(heroID[cp], cp, distanceX, distanceY)
                # (Line 504) SkillUnit(cp, count, Unit);
                SkillUnit(cp, count_1, Unit)
                # (Line 505) }
                # (Line 506) else if (destY == 0)
            if EUDElseIf()(destY == 0):
                # (Line 507) {
                # (Line 508) SquareShapeAt(cp, count, Unit, destX * interval, 0, distanceX, distanceY);
                SquareShapeAt(cp, count_1, Unit, destX * interval, 0, distanceX, distanceY)
                # (Line 509) }
                # (Line 510) else
                # (Line 511) {
            if EUDElse()():
                # (Line 512) SquareShapeAt(cp, count, Unit, destX * interval + interval, destY * interval, distanceX, distanceY);
                SquareShapeAt(cp, count_1, Unit, destX * interval + interval, destY * interval, distanceX, distanceY)
                # (Line 513) }
                # (Line 515) if (i == size / 4 - 1)
            EUDEndIf()
            if EUDIf()(i == size // 4 - 1):
                # (Line 516) {
                # (Line 517) SquareShapeAt(cp, count, Unit, (n / 2) * interval, 0, distanceX, distanceY);
                SquareShapeAt(cp, count_1, Unit, (n // 2) * interval, 0, distanceX, distanceY)
                # (Line 518) }
                # (Line 519) }
            EUDEndIf()
            # (Line 520) }
        EUDEndIf()
        # (Line 521) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 523) function LineShapeAt(cp : TrgPlayer, count, Unit : TrgUnit, degree, n, interval, distanceX, distanceY)

# (Line 524) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None, None])
def LineShapeAt(cp, count_1, Unit, degree, n, interval, distanceX, distanceY):
    # (Line 525) var i = 0;
    i = EUDVariable()
    i << (0)
    # (Line 526) var distance = interval / 2;
    distance_1 = EUDVariable()
    distance_1 << (interval // 2)
    # (Line 528) Table_Sin(cp, degree, distance);
    Table_Sin(cp, degree, distance_1)
    # (Line 529) Table_Cos(cp, degree, distance);
    Table_Cos(cp, degree, distance_1)
    # (Line 531) var gradientX = CosAngle[cp];
    gradientX = EUDVariable()
    gradientX << (CosAngle[cp])
    # (Line 532) var gradientY = SinAngle[cp] ;
    gradientY = EUDVariable()
    gradientY << (SinAngle[cp])
    # (Line 534) var Angle_X, Angle_Y;
    Angle_X, Angle_Y = EUDCreateVariables(2)
    # (Line 536) Table_Sin(cp, degree, interval);
    Table_Sin(cp, degree, interval)
    # (Line 537) Table_Cos(cp, degree, interval);
    Table_Cos(cp, degree, interval)
    # (Line 539) for (; i <= n / 2; i++)
    if EUDWhile()(i <= n // 2):
        def _t2():
            i.__iadd__(1)
        # (Line 540) {
        # (Line 541) Angle_X = CosAngle[cp] * i;
        Angle_X << (CosAngle[cp] * i)
        # (Line 542) Angle_Y = SinAngle[cp] * i;
        Angle_Y << (SinAngle[cp] * i)
        # (Line 544) if (n % 2 == 0 && i != n / 2)
        if EUDIf()(EUDSCAnd()(n % 2 == 0)(i == n // 2, neg=True)()):
            # (Line 545) {
            # (Line 546) MoveLoc(heroID[cp], cp, -Angle_X - gradientX + distanceX, Angle_Y + gradientY + distanceY);
            MoveLoc(heroID[cp], cp, -Angle_X - gradientX + distanceX, Angle_Y + gradientY + distanceY)
            # (Line 547) SkillUnit(cp, count, Unit);
            SkillUnit(cp, count_1, Unit)
            # (Line 548) MoveLoc(heroID[cp], cp, Angle_X + gradientX + distanceX, -Angle_Y - gradientY + distanceY);
            MoveLoc(heroID[cp], cp, Angle_X + gradientX + distanceX, -Angle_Y - gradientY + distanceY)
            # (Line 549) SkillUnit(cp, count, Unit);
            SkillUnit(cp, count_1, Unit)
            # (Line 550) }
            # (Line 551) else if (n % 2 == 1)
        if EUDElseIf()(n % 2 == 1):
            # (Line 552) {
            # (Line 553) if (i == 0)
            if EUDIf()(i == 0):
                # (Line 554) {
                # (Line 555) MoveLoc(heroID[cp], cp, distanceX, distanceY);
                MoveLoc(heroID[cp], cp, distanceX, distanceY)
                # (Line 556) SkillUnit(cp, count, Unit);
                SkillUnit(cp, count_1, Unit)
                # (Line 557) }
                # (Line 558) else
                # (Line 559) {
            if EUDElse()():
                # (Line 560) MoveLoc(heroID[cp], cp, -Angle_X + distanceX, Angle_Y + distanceY);
                MoveLoc(heroID[cp], cp, -Angle_X + distanceX, Angle_Y + distanceY)
                # (Line 561) SkillUnit(cp, count, Unit);
                SkillUnit(cp, count_1, Unit)
                # (Line 562) MoveLoc(heroID[cp], cp, Angle_X + distanceX, -Angle_Y + distanceY);
                MoveLoc(heroID[cp], cp, Angle_X + distanceX, -Angle_Y + distanceY)
                # (Line 563) SkillUnit(cp, count, Unit);
                SkillUnit(cp, count_1, Unit)
                # (Line 564) }
                # (Line 566) }
            EUDEndIf()
            # (Line 567) }
        EUDEndIf()
        # (Line 569) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 571) function EdgeShapeWithProperty(cp : TrgPlayer, count, Unit : TrgUnit, degree, n, interval, property)

# (Line 572) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None])
def EdgeShapeWithProperty(cp, count_1, Unit, degree, n, interval, property):
    # (Line 573) var i = 0;
    i = EUDVariable()
    i << (0)
    # (Line 575) Table_Sin(cp, degree, interval * 14 / 10);
    Table_Sin(cp, degree, interval * 14 // 10)
    # (Line 576) Table_Cos(cp, degree, interval * 14 / 10);
    Table_Cos(cp, degree, interval * 14 // 10)
    # (Line 578) var x_o = CosAngle[cp];
    x_o = EUDVariable()
    x_o << (CosAngle[cp])
    # (Line 579) var y_o = SinAngle[cp];
    y_o = EUDVariable()
    y_o << (SinAngle[cp])
    # (Line 581) var distance = (interval * 2) / (n - 1);
    distance_1 = EUDVariable()
    distance_1 << ((interval * 2) // (n - 1))
    # (Line 583) Table_Sin(cp, degree + 45, distance);
    Table_Sin(cp, degree + 45, distance_1)
    # (Line 584) Table_Cos(cp, degree + 45, distance);
    Table_Cos(cp, degree + 45, distance_1)
    # (Line 586) var distance_x = CosAngle[cp];
    distance_x = EUDVariable()
    distance_x << (CosAngle[cp])
    # (Line 587) var distance_y = SinAngle[cp];
    distance_y = EUDVariable()
    distance_y << (SinAngle[cp])
    # (Line 589) if (n == 1)
    if EUDIf()(n == 1):
        # (Line 590) {
        # (Line 591) DotShapeWithProperty(cp, 1, Unit, 0, 0, property);
        DotShapeWithProperty(cp, 1, Unit, 0, 0, property)
        # (Line 592) }
        # (Line 593) else if (n > 1)
    if EUDElseIf()(n <= 1, neg=True):
        # (Line 594) {
        # (Line 595) for (; i < n - 1; i++)
        if EUDWhile()(i >= n - 1, neg=True):
            def _t4():
                i.__iadd__(1)
            # (Line 596) {
            # (Line 597) SquareShapeWithProperty(cp, 1, Unit, x_o - (distance_x * i), y_o - (distance_y * i), property);
            SquareShapeWithProperty(cp, 1, Unit, x_o - (distance_x * i), y_o - (distance_y * i), property)
            # (Line 598) }
            # (Line 599) }
            EUDSetContinuePoint()
            _t4()
        EUDEndWhile()
        # (Line 600) }
    EUDEndIf()
    # (Line 602) function EdgeShapeAtWithProperty(cp : TrgPlayer, count, Unit : TrgUnit, degree, n, interval, x, y, property)

# (Line 603) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None, None, None])
def EdgeShapeAtWithProperty(cp, count_1, Unit, degree, n, interval, x, y, property):
    # (Line 604) var i = 0;
    i = EUDVariable()
    i << (0)
    # (Line 606) Table_Sin(cp, degree, interval * 14 / 10);
    Table_Sin(cp, degree, interval * 14 // 10)
    # (Line 607) Table_Cos(cp, degree, interval * 14 / 10);
    Table_Cos(cp, degree, interval * 14 // 10)
    # (Line 609) var x_o = CosAngle[cp];
    x_o = EUDVariable()
    x_o << (CosAngle[cp])
    # (Line 610) var y_o = SinAngle[cp];
    y_o = EUDVariable()
    y_o << (SinAngle[cp])
    # (Line 612) var distance = (interval * 2) / (n - 1);
    distance_1 = EUDVariable()
    distance_1 << ((interval * 2) // (n - 1))
    # (Line 614) Table_Sin(cp, degree + 45, distance);
    Table_Sin(cp, degree + 45, distance_1)
    # (Line 615) Table_Cos(cp, degree + 45, distance);
    Table_Cos(cp, degree + 45, distance_1)
    # (Line 617) var distance_x = CosAngle[cp];
    distance_x = EUDVariable()
    distance_x << (CosAngle[cp])
    # (Line 618) var distance_y = SinAngle[cp];
    distance_y = EUDVariable()
    distance_y << (SinAngle[cp])
    # (Line 620) if (n == 1)
    if EUDIf()(n == 1):
        # (Line 621) {
        # (Line 622) DotShapeWithProperty(cp, 1, Unit, x, y, property);
        DotShapeWithProperty(cp, 1, Unit, x, y, property)
        # (Line 623) }
        # (Line 624) else if (n > 1)
    if EUDElseIf()(n <= 1, neg=True):
        # (Line 625) {
        # (Line 626) for (; i < n - 1; i++)
        if EUDWhile()(i >= n - 1, neg=True):
            def _t4():
                i.__iadd__(1)
            # (Line 627) {
            # (Line 628) SquareShapeAtWithProperty(cp, 1, Unit, x_o - (distance_x * i), y_o - (distance_y * i), x, y, property);
            SquareShapeAtWithProperty(cp, 1, Unit, x_o - (distance_x * i), y_o - (distance_y * i), x, y, property)
            # (Line 629) }
            # (Line 630) }
            EUDSetContinuePoint()
            _t4()
        EUDEndWhile()
        # (Line 631) }
    EUDEndIf()
    # (Line 633) function EdgeShapeAt(cp : TrgPlayer, count, Unit : TrgUnit, degree, n, interval, x, y)

# (Line 634) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None, None])
def EdgeShapeAt(cp, count_1, Unit, degree, n, interval, x, y):
    # (Line 635) var i = 0;
    i = EUDVariable()
    i << (0)
    # (Line 637) Table_Sin(cp, degree, interval * 14 / 10);
    Table_Sin(cp, degree, interval * 14 // 10)
    # (Line 638) Table_Cos(cp, degree, interval * 14 / 10);
    Table_Cos(cp, degree, interval * 14 // 10)
    # (Line 640) var x_o = CosAngle[cp];
    x_o = EUDVariable()
    x_o << (CosAngle[cp])
    # (Line 641) var y_o = SinAngle[cp];
    y_o = EUDVariable()
    y_o << (SinAngle[cp])
    # (Line 643) var distance = (interval * 2) / (n - 1);
    distance_1 = EUDVariable()
    distance_1 << ((interval * 2) // (n - 1))
    # (Line 645) Table_Sin(cp, degree + 45, distance);
    Table_Sin(cp, degree + 45, distance_1)
    # (Line 646) Table_Cos(cp, degree + 45, distance);
    Table_Cos(cp, degree + 45, distance_1)
    # (Line 648) var distance_x = CosAngle[cp];
    distance_x = EUDVariable()
    distance_x << (CosAngle[cp])
    # (Line 649) var distance_y = SinAngle[cp];
    distance_y = EUDVariable()
    distance_y << (SinAngle[cp])
    # (Line 651) if (n == 1)
    if EUDIf()(n == 1):
        # (Line 652) {
        # (Line 653) DotShape(cp, 1, Unit, x, y);
        DotShape(cp, 1, Unit, x, y)
        # (Line 654) }
        # (Line 655) else if (n > 1)
    if EUDElseIf()(n <= 1, neg=True):
        # (Line 656) {
        # (Line 657) for (; i < n - 1; i++)
        if EUDWhile()(i >= n - 1, neg=True):
            def _t4():
                i.__iadd__(1)
            # (Line 658) {
            # (Line 659) SquareShapeAt(cp, 1, Unit, x_o - (distance_x * i), y_o - (distance_y * i), x, y);
            SquareShapeAt(cp, 1, Unit, x_o - (distance_x * i), y_o - (distance_y * i), x, y)
            # (Line 660) }
            # (Line 661) }
            EUDSetContinuePoint()
            _t4()
        EUDEndWhile()
        # (Line 662) }
    EUDEndIf()
