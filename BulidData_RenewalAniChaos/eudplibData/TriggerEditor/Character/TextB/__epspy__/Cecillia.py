## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Variable as v;
import Variable as v
# (Line 2) import Function as f;
import Function as f
# (Line 4) function NormalText(cp)
# (Line 5) {
@EUDFunc
def NormalText(cp):
    # (Line 6) switch (v.Sound_Text2[cp])
    EUDSwitch(v.Sound_Text2[cp])
    # (Line 7) {
    # (Line 8) case 1000:
    _t1 = EUDSwitchCase()
    # (Line 9) PlayWAV("Cecillia_01.ogg");
    if _t1(1000):
        # (Line 10) f.stb.print("\n\x13\x17Cecillia\n\x13\x04「　간다, \x17파동각!　\x04」\n");
        DoActions(PlayWAV("Cecillia_01.ogg"))
        f.stb.print("\n\x13\x17Cecillia\n\x13\x04「　간다, \x17파동각!　\x04」\n")
        # (Line 11) v.Sound_Text2[cp] = 0;
        _ARRW(v.Sound_Text2, cp) << (0)
        # (Line 12) break;
        EUDBreak()
        # (Line 13) case 1010:
    _t2 = EUDSwitchCase()
    # (Line 14) PlayWAV("Cecillia_02.ogg");
    if _t2(1010):
        # (Line 15) f.stb.print("\n\x13\x17Cecillia\n\x13\x04「　받아라! \x17천추각!　\x04」\n");
        DoActions(PlayWAV("Cecillia_02.ogg"))
        f.stb.print("\n\x13\x17Cecillia\n\x13\x04「　받아라! \x17천추각!　\x04」\n")
        # (Line 16) v.Sound_Text2[cp] = 0;
        _ARRW(v.Sound_Text2, cp) << (0)
        # (Line 17) break;
        EUDBreak()
        # (Line 18) case 1020:
    _t3 = EUDSwitchCase()
    # (Line 19) PlayWAV("Cecillia_03.ogg");
    if _t3(1020):
        # (Line 20) f.stb.print("\n\x13\x17Cecillia\n\x13\x04「　부셔져라, \x06폭렬각!!!　\x04」\n");
        DoActions(PlayWAV("Cecillia_03.ogg"))
        f.stb.print("\n\x13\x17Cecillia\n\x13\x04「　부셔져라, \x06폭렬각!!!　\x04」\n")
        # (Line 21) v.Sound_Text2[cp] = 0;
        _ARRW(v.Sound_Text2, cp) << (0)
        # (Line 22) break;
        EUDBreak()
        # (Line 23) }
    # (Line 24) }
    EUDEndSwitch()
    # (Line 26) function UiltimateText(cp)

# (Line 27) {
@EUDFunc
def UiltimateText(cp):
    # (Line 28) switch (v.Sound_Text_Uilti[cp])
    EUDSwitch(v.Sound_Text_Uilti[cp])
    # (Line 29) {
    # (Line 30) case 7000:
    _t1 = EUDSwitchCase()
    # (Line 31) PlayWAV("Cecillia_Uiltimate.ogg");
    if _t1(7000):
        # (Line 32) f.stb.printAt(3,"\x13\x17Cecillia\n\n\x13\x04「　하아앗.. \x06필살 유성각!　\x04」");
        DoActions(PlayWAV("Cecillia_Uiltimate.ogg"))
        f.stb.printAt(3, "\x13\x17Cecillia\n\n\x13\x04「　하아앗.. \x06필살 유성각!　\x04」")
        # (Line 33) v.Sound_Text_Uilti[cp] = 0;
        _ARRW(v.Sound_Text_Uilti, cp) << (0)
        # (Line 34) break;
        EUDBreak()
        # (Line 35) }
    # (Line 36) }
    EUDEndSwitch()
    # (Line 38) function UniqueText(cp)

# (Line 39) {
@EUDFunc
def UniqueText(cp):
    # (Line 40) switch (v.Sound_Text_Uniq[cp])
    EUDSwitch(v.Sound_Text_Uniq[cp])
    # (Line 41) {
    # (Line 42) case 7000:
    _t1 = EUDSwitchCase()
    # (Line 43) PlayWAV("Cecillia_Unique.ogg");
    if _t1(7000):
        # (Line 44) f.stb.printAt(3,"\x13\x17Cecillia\n\x13\x04「　괴로워도 포기하면 거기서 끝이라고? 용기란 포기하지 않는 걸 말하는거라고　\x04」");
        DoActions(PlayWAV("Cecillia_Unique.ogg"))
        f.stb.printAt(3, "\x13\x17Cecillia\n\x13\x04「　괴로워도 포기하면 거기서 끝이라고? 용기란 포기하지 않는 걸 말하는거라고　\x04」")
        # (Line 45) v.Sound_Text_Uniq[cp] = 0;
        _ARRW(v.Sound_Text_Uniq, cp) << (0)
        # (Line 46) break;
        EUDBreak()
        # (Line 47) }
    # (Line 48) }
    EUDEndSwitch()
