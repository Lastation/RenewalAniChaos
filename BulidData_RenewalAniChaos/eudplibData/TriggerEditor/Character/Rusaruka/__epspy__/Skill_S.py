## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Function as f;
import Function as f
# (Line 3) function Shape(cp, Unit : TrgUnit, x, y);
# (Line 5) function main(cp)
# (Line 6) {
@EUDFunc
def f_main(cp):
    # (Line 7) if (f.delay[cp] == 0)
    if EUDIf()(f.delay[cp] == 0):
        # (Line 8) {
        # (Line 9) if (f.count[cp] == 0 || f.count[cp] == 4)
        if EUDIf()(EUDSCOr()(f.count[cp] == 0)(f.count[cp] == 4)()):
            # (Line 10) {
            # (Line 11) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp);
            # (Line 12) Shape(cp, "40 + 1n Mojo", 0, 48);
            DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp))
            Shape(cp, "40 + 1n Mojo", 0, 48)
            # (Line 13) }
            # (Line 14) else if (f.count[cp] == 1 || f.count[cp] == 5)
        if EUDElseIf()(EUDSCOr()(f.count[cp] == 1)(f.count[cp] == 5)()):
            # (Line 15) {
            # (Line 16) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp);
            # (Line 17) Shape(cp, "40 + 1n Wraith", 42, 24);
            DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp))
            Shape(cp, "40 + 1n Wraith", 42, 24)
            # (Line 18) }
            # (Line 19) else if (f.count[cp] == 2 || f.count[cp] == 6)
        if EUDElseIf()(EUDSCOr()(f.count[cp] == 2)(f.count[cp] == 6)()):
            # (Line 20) {
            # (Line 21) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", cp);
            # (Line 22) Shape(cp, "40 + 1n Mutalisk", 24, 42);
            DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", cp))
            Shape(cp, "40 + 1n Mutalisk", 24, 42)
            # (Line 23) }
            # (Line 24) else if (f.count[cp] == 3 || f.count[cp] == 7)
        if EUDElseIf()(EUDSCOr()(f.count[cp] == 3)(f.count[cp] == 7)()):
            # (Line 25) {
            # (Line 26) KillUnitAt(All, "40 + 1n Mutalisk", "Anywhere", cp);
            # (Line 27) Shape(cp, "40 + 1n Mojo", 48, 0);
            DoActions(KillUnitAt(All, "40 + 1n Mutalisk", "Anywhere", cp))
            Shape(cp, "40 + 1n Mojo", 48, 0)
            # (Line 28) }
            # (Line 29) else if (f.count[cp] == 8)
        if EUDElseIf()(f.count[cp] == 8):
            # (Line 30) {
            # (Line 31) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp);
            # (Line 32) f.SkillEnd(cp);
            DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp))
            f.SkillEnd(cp)
            # (Line 33) }
            # (Line 34) }
        EUDEndIf()
        # (Line 35) }
    EUDEndIf()
    # (Line 37) function Shape(cp, Unit : TrgUnit, x, y)

# (Line 38) {
@EUDTypedFunc([None, TrgUnit, None, None])
def Shape(cp, Unit, x, y):
    # (Line 39) f.MoveLoc(f.heroID[cp], cp, x, y);
    f.MoveLoc(f.heroID[cp], cp, x, y)
    # (Line 40) f.SkillUnit(cp, 1, Unit);
    f.SkillUnit(cp, 1, Unit)
    # (Line 41) f.SkillUnit(cp, 1, "Protoss Dark Templar");
    f.SkillUnit(cp, 1, "Protoss Dark Templar")
    # (Line 42) f.MoveLoc(f.heroID[cp], cp, -y, x);
    f.MoveLoc(f.heroID[cp], cp, -y, x)
    # (Line 43) f.SkillUnit(cp, 1, "Protoss Dark Templar");
    f.SkillUnit(cp, 1, "Protoss Dark Templar")
    # (Line 44) f.MoveLoc(f.heroID[cp], cp, -x, -y);
    f.MoveLoc(f.heroID[cp], cp, -x, -y)
    # (Line 45) f.SkillUnit(cp, 1, Unit);
    f.SkillUnit(cp, 1, Unit)
    # (Line 46) f.SkillUnit(cp, 1, "Protoss Dark Templar");
    f.SkillUnit(cp, 1, "Protoss Dark Templar")
    # (Line 47) f.MoveLoc(f.heroID[cp], cp, y, -x);
    f.MoveLoc(f.heroID[cp], cp, y, -x)
    # (Line 48) f.SkillUnit(cp, 1, "Protoss Dark Templar");
    f.SkillUnit(cp, 1, "Protoss Dark Templar")
    # (Line 49) KillUnitAt(All, "Protoss Dark Templar", "Anywhere", cp);
    # (Line 50) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
    DoActions(KillUnitAt(All, "Protoss Dark Templar", "Anywhere", cp))
    # (Line 51) Order(Unit, cp, "Anywhere", Attack, f.location[cp]);
    DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
    # (Line 52) f.SkillWait(cp, 50);
    DoActions(Order(Unit, cp, "Anywhere", Attack, f.location[cp]))
    f.SkillWait(cp, 50)
    # (Line 53) f.count[cp] += 1;
    _ARRW(f.count, cp).__iadd__(1)
    # (Line 54) }
