## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import Function as f;
import Function as f
# (Line 4) import Character.Niwa.Skill_O as O;
from Character.Niwa import Skill_O as O
# (Line 5) import Character.Niwa.Skill_S as S;
from Character.Niwa import Skill_S as S
# (Line 6) import Character.Niwa.Skill_C as C;
from Character.Niwa import Skill_C as C
# (Line 7) import Character.Niwa.Skill_A as A;
from Character.Niwa import Skill_A as A
# (Line 9) import Character.Niwa.Skill_SSS as SSS;
from Character.Niwa import Skill_SSS as SSS
# (Line 10) import Character.Niwa.Skill_CCC as CCC;
from Character.Niwa import Skill_CCC as CCC
# (Line 11) import Character.Niwa.Skill_CCCAA as CCCAA;
from Character.Niwa import Skill_CCCAA as CCCAA
# (Line 12) import Character.Niwa.Skill_CCAA as CCAA;
from Character.Niwa import Skill_CCAA as CCAA
# (Line 13) import Character.Niwa.Skill_AACS as AACS;
from Character.Niwa import Skill_AACS as AACS
# (Line 14) import Character.Niwa.Skill_AACSAA as AACSAA;
from Character.Niwa import Skill_AACSAA as AACSAA
# (Line 15) import Character.Niwa.Text as text;
from Character.Niwa import Text as text
# (Line 16) import Character.Niwa.Commend as commend;
from Character.Niwa import Commend as commend
# (Line 18) function SkillList(cp);
# (Line 20) function main(cp)
# (Line 21) {
@EUDFunc
def f_main(cp):
    # (Line 22) f.location[cp] = 197;
    _ARRW(f.location, cp) << (197)
    # (Line 23) f.heroID[cp] = 53;
    _ARRW(f.heroID, cp) << (53)
    # (Line 25) f.UltimateA[cp] = 550;
    _ARRW(f.UltimateA, cp) << (550)
    # (Line 26) f.UltimateB[cp] = 200;
    _ARRW(f.UltimateB, cp) << (200)
    # (Line 27) SkillList(cp);
    SkillList(cp)
    # (Line 28) commend.main(cp);
    commend.f_main(cp)
    # (Line 30) if (f.wait[cp] == 0)
    if EUDIf()(f.wait[cp] == 0):
        # (Line 31) {
        # (Line 32) switch(f.step[cp])
        EUDSwitch(f.step[cp])
        # (Line 33) {
        # (Line 34) case 1:
        _t2 = EUDSwitchCase()
        # (Line 35) O.main(cp);
        if _t2(1):
            O.f_main(cp)
            # (Line 36) break;
            EUDBreak()
            # (Line 37) case 100:
        _t3 = EUDSwitchCase()
        # (Line 38) S.main(cp);
        if _t3(100):
            S.f_main(cp)
            # (Line 39) break;
            EUDBreak()
            # (Line 40) case 200:
        _t4 = EUDSwitchCase()
        # (Line 41) C.main(cp);
        if _t4(200):
            C.f_main(cp)
            # (Line 42) break;
            EUDBreak()
            # (Line 43) case 300:
        _t5 = EUDSwitchCase()
        # (Line 44) A.main(cp);
        if _t5(300):
            A.f_main(cp)
            # (Line 45) break;
            EUDBreak()
            # (Line 46) case 110:
        _t6 = EUDSwitchCase()
        # (Line 47) SSS.main(cp);
        if _t6(110):
            SSS.f_main(cp)
            # (Line 48) break;
            EUDBreak()
            # (Line 49) case 210:
        _t7 = EUDSwitchCase()
        # (Line 50) CCAA.main(cp);
        if _t7(210):
            CCAA.f_main(cp)
            # (Line 51) break;
            EUDBreak()
            # (Line 52) case 220:
        _t8 = EUDSwitchCase()
        # (Line 53) CCC.main(cp);
        if _t8(220):
            CCC.f_main(cp)
            # (Line 54) break;
            EUDBreak()
            # (Line 55) case 230:
        _t9 = EUDSwitchCase()
        # (Line 56) CCCAA.main(cp);
        if _t9(230):
            CCCAA.f_main(cp)
            # (Line 57) break;
            EUDBreak()
            # (Line 58) case 310:
        _t10 = EUDSwitchCase()
        # (Line 59) AACS.main(cp);
        if _t10(310):
            AACS.f_main(cp)
            # (Line 60) break;
            EUDBreak()
            # (Line 61) case 320:
        _t11 = EUDSwitchCase()
        # (Line 62) AACSAA.main(cp);
        if _t11(320):
            AACSAA.f_main(cp)
            # (Line 63) break;
            EUDBreak()
            # (Line 65) }
        # (Line 66) }
        EUDEndSwitch()
        # (Line 70) }
    EUDEndIf()
    # (Line 73) function SkillVoice(cp)

# (Line 74) {
@EUDFunc
def SkillVoice(cp):
    # (Line 75) if (f.Niwa_Voice[cp] != 0) { text.main(cp); }
    if EUDIf()(f.Niwa_Voice[cp] == 0, neg=True):
        text.f_main(cp)
        # (Line 76) }
    EUDEndIf()
    # (Line 78) function SkillList(cp)

# (Line 79) {
@EUDFunc
def SkillList(cp):
    # (Line 80) if(Memory(0x00596A44, Exactly, 256)) 	// Insert key Pressed
    if EUDIf()(Memory(0x00596A44, Exactly, 256)):
        # (Line 81) {
        # (Line 82) f.stb.printAt(0, "\n");
        f.stb.printAt(0, "\n")
        # (Line 83) f.stb.printAt(1, "\x1F　＃\x1B- 니와 료카　\x04[ 십이대전 ]");
        f.stb.printAt(1, "\x1F　＃\x1B- 니와 료카　\x04[ 십이대전 ]")
        # (Line 84) f.stb.printAt(2, "　　\x1FA\x04ction List");
        f.stb.printAt(2, "　　\x1FA\x04ction List")
        # (Line 85) f.stb.printAt(3, "　　　\x18O \x04유[酉]의 전사 \x19[ 20초 간 공격력 10 증가 ] \x052분");
        f.stb.printAt(3, "　　　\x18O \x04유[酉]의 전사 \x19[ 20초 간 공격력 10 증가 ] \x052분")
        # (Line 86) f.stb.printAt(4, "　　　\x04\x1FSSS \x04우노메타카노메 \x19[ 공성 ]");
        f.stb.printAt(4, "　　　\x04\x1FSSS \x04우노메타카노메 \x19[ 공성 ]")
        # (Line 87) f.stb.printAt(5, "　　　\x04\x1FCCA + AA \x04이중 스파이 \x19[ 공성 / 자리고정 ]");
        f.stb.printAt(5, "　　　\x04\x1FCCA + AA \x04이중 스파이 \x19[ 공성 / 자리고정 ]")
        # (Line 88) f.stb.printAt(6, "　　　\x04\x1FCCCC \x04십이대전 \x19[ 공성 / 자리고정 ]");
        f.stb.printAt(6, "　　　\x04\x1FCCCC \x04십이대전 \x19[ 공성 / 자리고정 ]")
        # (Line 89) f.stb.printAt(7, "\n");
        f.stb.printAt(7, "\n")
        # (Line 90) f.stb.printAt(8, "　　　\x08AAA + AA \x04조장 \x19[ 공성 / AAA - 플레이어 동맹 /  AA - 자리고정 ] \x05", f.UltimateA[cp], " + ", f.UltimateB[cp]);
        f.stb.printAt(8, "　　　\x08AAA + AA \x04조장 \x19[ 공성 / AAA - 플레이어 동맹 /  AA - 자리고정 ] \x05", f.UltimateA[cp], " + ", f.UltimateB[cp])
        # (Line 91) f.stb.printAt(9, "\n");
        f.stb.printAt(9, "\n")
        # (Line 92) PlayWAV("sound\\Bullet\\LaserHit.wav");
        # (Line 93) }
        DoActions(PlayWAV("sound\\Bullet\\LaserHit.wav"))
        # (Line 94) }
    EUDEndIf()
