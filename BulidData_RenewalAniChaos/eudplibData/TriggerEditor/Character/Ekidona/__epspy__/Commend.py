## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Function as f;
import Function as f
# (Line 3) function main(cp)
# (Line 4) {
@EUDFunc
def f_main(cp):
    # (Line 5) if (f.wait[cp] == 0 && f.step[cp] == 0)
    if EUDIf()(EUDSCAnd()(f.wait[cp] == 0)(f.step[cp] == 0)()):
        # (Line 6) {
        # (Line 7) if (Bring(cp, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill")
        _t2 = EUDIf()
        # (Line 8) && Deaths(CurrentPlayer, AtLeast, 1, " `O Skill Condition")
        # (Line 9) && Deaths(CurrentPlayer, Exactly, 0, " `UniqueCoolTime")
        # (Line 10) )
        if _t2(EUDSCAnd()(Bring(cp, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill"))(Deaths(CurrentPlayer, AtLeast, 1, " `O Skill Condition"))(Deaths(CurrentPlayer, Exactly, 0, " `UniqueCoolTime"))()):
            # (Line 11) {
            # (Line 12) f.Voice_Routine(cp, 23);
            f.Voice_Routine(cp, 23)
            # (Line 13) f.step[cp] = 1;
            _ARRW(f.step, cp) << (1)
            # (Line 14) KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", cp);
            # (Line 15) }
            DoActions(KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", cp))
            # (Line 16) else if (Bring(cp, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill"))
        if EUDElseIf()(Bring(cp, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill")):
            # (Line 17) {
            # (Line 18) SetResources(CurrentPlayer, Add, 60, Gas);
            # (Line 19) KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", cp);
            DoActions(SetResources(CurrentPlayer, Add, 60, Gas))
            # (Line 20) }
            DoActions(KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", cp))
            # (Line 21) else if (Bring(cp, AtLeast, 1, "Protoss Carrier", "[Skill]UseSkill"))
        if EUDElseIf()(Bring(cp, AtLeast, 1, "Protoss Carrier", "[Skill]UseSkill")):
            # (Line 22) {
            # (Line 23) f.step[cp] = 200;
            _ARRW(f.step, cp) << (200)
            # (Line 24) KillUnitAt(1, "Protoss Carrier", "[Skill]UseSkill", cp);
            # (Line 25) }
            DoActions(KillUnitAt(1, "Protoss Carrier", "[Skill]UseSkill", cp))
            # (Line 26) else if (Bring(cp, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill"))
        if EUDElseIf()(Bring(cp, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill")):
            # (Line 27) {
            # (Line 28) f.step[cp] = 300;
            _ARRW(f.step, cp) << (300)
            # (Line 29) KillUnitAt(1, "Protoss Arbiter", "[Skill]UseSkill", cp);
            # (Line 30) }
            DoActions(KillUnitAt(1, "Protoss Arbiter", "[Skill]UseSkill", cp))
            # (Line 32) else if (Bring(cp, AtLeast, 1, "Protoss Scout", "[Skill]UseSkill"))
        if EUDElseIf()(Bring(cp, AtLeast, 1, "Protoss Scout", "[Skill]UseSkill")):
            # (Line 33) {
            # (Line 34) f.step[cp] = 100;
            _ARRW(f.step, cp) << (100)
            # (Line 35) KillUnitAt(1, "Protoss Scout", "[Skill]UseSkill", cp);
            # (Line 36) }
            DoActions(KillUnitAt(1, "Protoss Scout", "[Skill]UseSkill", cp))
            # (Line 38) }
        EUDEndIf()
        # (Line 41) if (f.wait[cp] >= 2 && f.count[cp] == 0)
    EUDEndIf()
    if EUDIf()(EUDSCAnd()(f.wait[cp] >= 2)(f.count[cp] == 0)()):
        # (Line 42) {
        # (Line 43) if (Bring(cp, AtLeast, 2, "Protoss Scout", "[Skill]UseSkill") && f.step[cp] == 100)
        if EUDIf()(EUDSCAnd()(Bring(cp, AtLeast, 2, "Protoss Scout", "[Skill]UseSkill"))(f.step[cp] == 100)()):
            # (Line 44) {
            # (Line 45) f.Voice_Routine(cp, 1);
            f.Voice_Routine(cp, 1)
            # (Line 46) f.wait[cp] = 0;
            _ARRW(f.wait, cp) << (0)
            # (Line 47) f.count[cp] = 0;
            _ARRW(f.count, cp) << (0)
            # (Line 48) f.loop[cp] = 0;
            _ARRW(f.loop, cp) << (0)
            # (Line 49) f.step[cp] = 110;
            _ARRW(f.step, cp) << (110)
            # (Line 50) KillUnitAt(2, "Protoss Scout", "[Skill]UseSkill", cp);
            # (Line 51) }
            DoActions(KillUnitAt(2, "Protoss Scout", "[Skill]UseSkill", cp))
            # (Line 52) else if (Bring(cp, AtLeast, 1, "Protoss Carrier", "[Skill]UseSkill")
        _t9 = EUDElseIf()
        # (Line 53) && Bring(cp, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill") && f.step[cp] == 200)
        if _t9(EUDSCAnd()(Bring(cp, AtLeast, 1, "Protoss Carrier", "[Skill]UseSkill"))(Bring(cp, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill"))(f.step[cp] == 200)()):
            # (Line 54) {
            # (Line 55) f.Voice_Routine(cp, 15);
            f.Voice_Routine(cp, 15)
            # (Line 56) f.wait[cp] = 0;
            _ARRW(f.wait, cp) << (0)
            # (Line 57) f.count[cp] = 0;
            _ARRW(f.count, cp) << (0)
            # (Line 58) f.loop[cp] = 0;
            _ARRW(f.loop, cp) << (0)
            # (Line 59) f.step[cp] = 210;
            _ARRW(f.step, cp) << (210)
            # (Line 60) KillUnitAt(1, "Protoss Carrier", "[Skill]UseSkill", cp);
            # (Line 61) KillUnitAt(1, "Protoss Arbiter", "[Skill]UseSkill", cp);
            DoActions(KillUnitAt(1, "Protoss Carrier", "[Skill]UseSkill", cp))
            # (Line 62) }
            DoActions(KillUnitAt(1, "Protoss Arbiter", "[Skill]UseSkill", cp))
            # (Line 63) else if (Bring(cp, AtLeast, 2, "Protoss Arbiter", "[Skill]UseSkill")
        _t10 = EUDElseIf()
        # (Line 64) && Bring(cp, AtLeast, 1, "Protoss Carrier", "[Skill]UseSkill")
        # (Line 65) && f.step[cp] == 210)
        if _t10(EUDSCAnd()(Bring(cp, AtLeast, 2, "Protoss Arbiter", "[Skill]UseSkill"))(Bring(cp, AtLeast, 1, "Protoss Carrier", "[Skill]UseSkill"))(f.step[cp] == 210)()):
            # (Line 66) {
            # (Line 67) f.Voice_Routine(cp, 16);
            f.Voice_Routine(cp, 16)
            # (Line 68) f.wait[cp] = 0;
            _ARRW(f.wait, cp) << (0)
            # (Line 69) f.count[cp] = 0;
            _ARRW(f.count, cp) << (0)
            # (Line 70) f.loop[cp] = 0;
            _ARRW(f.loop, cp) << (0)
            # (Line 71) f.step[cp] = 220;
            _ARRW(f.step, cp) << (220)
            # (Line 72) KillUnitAt(2, "Protoss Arbiter", "[Skill]UseSkill", cp);
            # (Line 73) KillUnitAt(1, "Protoss Carrier", "[Skill]UseSkill", cp);
            DoActions(KillUnitAt(2, "Protoss Arbiter", "[Skill]UseSkill", cp))
            # (Line 74) }
            DoActions(KillUnitAt(1, "Protoss Carrier", "[Skill]UseSkill", cp))
            # (Line 75) else if (Bring(cp, AtLeast, 2, "Protoss Carrier", "[Skill]UseSkill")
        _t11 = EUDElseIf()
        # (Line 76) && f.step[cp] == 200)
        if _t11(EUDSCAnd()(Bring(cp, AtLeast, 2, "Protoss Carrier", "[Skill]UseSkill"))(f.step[cp] == 200)()):
            # (Line 77) {
            # (Line 78) f.Voice_Routine(cp, 21);
            f.Voice_Routine(cp, 21)
            # (Line 79) f.wait[cp] = 0;
            _ARRW(f.wait, cp) << (0)
            # (Line 80) f.count[cp] = 0;
            _ARRW(f.count, cp) << (0)
            # (Line 81) f.loop[cp] = 0;
            _ARRW(f.loop, cp) << (0)
            # (Line 82) f.step[cp] = 230;
            _ARRW(f.step, cp) << (230)
            # (Line 83) KillUnitAt(2, "Protoss Carrier", "[Skill]UseSkill", cp);
            # (Line 84) }
            DoActions(KillUnitAt(2, "Protoss Carrier", "[Skill]UseSkill", cp))
            # (Line 85) else if (Bring(cp, AtLeast, 1, "Protoss Carrier", "[Skill]UseSkill")
        _t12 = EUDElseIf()
        # (Line 86) && f.step[cp] == 230)
        if _t12(EUDSCAnd()(Bring(cp, AtLeast, 1, "Protoss Carrier", "[Skill]UseSkill"))(f.step[cp] == 230)()):
            # (Line 87) {
            # (Line 88) f.Voice_Routine(cp, 22);
            f.Voice_Routine(cp, 22)
            # (Line 89) f.wait[cp] = 0;
            _ARRW(f.wait, cp) << (0)
            # (Line 90) f.count[cp] = 0;
            _ARRW(f.count, cp) << (0)
            # (Line 91) f.loop[cp] = 0;
            _ARRW(f.loop, cp) << (0)
            # (Line 92) f.step[cp] = 240;
            _ARRW(f.step, cp) << (240)
            # (Line 93) KillUnitAt(1, "Protoss Carrier", "[Skill]UseSkill", cp);
            # (Line 94) }
            DoActions(KillUnitAt(1, "Protoss Carrier", "[Skill]UseSkill", cp))
            # (Line 97) else if (Bring(cp, AtLeast, 4, "Protoss Arbiter", "[Skill]UseSkill")
        _t13 = EUDElseIf()
        # (Line 98) && f.step[cp] == 300
        # (Line 99) && Deaths(cp, AtLeast, f.UltimateA[cp], " `UltimateCoolTime"))
        if _t13(EUDSCAnd()(Bring(cp, AtLeast, 4, "Protoss Arbiter", "[Skill]UseSkill"))(f.step[cp] == 300)(Deaths(cp, AtLeast, f.UltimateA[cp], " `UltimateCoolTime"))()):
            # (Line 100) {
            # (Line 101) if (Switch("UiltimateSwitch", Cleared))
            if EUDIf()(Switch("UiltimateSwitch", Cleared)):
                # (Line 102) {
                # (Line 103) f.Voice_Routine(cp, 2);
                f.Voice_Routine(cp, 2)
                # (Line 104) SetSwitch("UiltimateSwitch", Set);
                # (Line 105) CreateUnit(1, " Item. Flag", "[Uiltimate]Flag", CurrentPlayer);
                DoActions(SetSwitch("UiltimateSwitch", Set))
                # (Line 106) f.wait[cp] = 0;
                DoActions(CreateUnit(1, " Item. Flag", "[Uiltimate]Flag", CurrentPlayer))
                _ARRW(f.wait, cp) << (0)
                # (Line 107) f.count[cp] = 0;
                _ARRW(f.count, cp) << (0)
                # (Line 108) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 109) f.step[cp] = 310;
                _ARRW(f.step, cp) << (310)
                # (Line 110) SetDeaths(cp, Subtract, f.UltimateA[cp], " `UltimateCoolTime");
                # (Line 111) KillUnitAt(4, "Protoss Arbiter", "[Skill]UseSkill", cp);
                DoActions(SetDeaths(cp, Subtract, f.UltimateA[cp], " `UltimateCoolTime"))
                # (Line 112) }
                DoActions(KillUnitAt(4, "Protoss Arbiter", "[Skill]UseSkill", cp))
                # (Line 113) else
                # (Line 114) {
            if EUDElse()():
                # (Line 115) SetResources(CurrentPlayer, Add, 1200, Gas);
                # (Line 116) KillUnitAt(4, "Protoss Arbiter", "[Skill]UseSkill", cp);
                DoActions(SetResources(CurrentPlayer, Add, 1200, Gas))
                # (Line 117) SetDeaths(CurrentPlayer, SetTo, 999, " `SYSTEMTEXT");
                DoActions(KillUnitAt(4, "Protoss Arbiter", "[Skill]UseSkill", cp))
                # (Line 118) }
                DoActions(SetDeaths(CurrentPlayer, SetTo, 999, " `SYSTEMTEXT"))
                # (Line 119) }
            EUDEndIf()
            # (Line 121) }
        EUDEndIf()
        # (Line 122) }
    EUDEndIf()
