## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Function as f;
import Function as f
# (Line 2) import Character.Ekidona.Main as ekidonaMain;
from Character.Ekidona import Main as ekidonaMain
# (Line 4) var status = 0;
status = EUDCreateVariables(1)
_IGVA([status], lambda: [0])
# (Line 6) function contract(cp)
# (Line 7) {
@EUDFunc
def f_contract(cp):
    # (Line 8) if (Deaths(dwread_epd(204 * 12 + cp), AtLeast, 132, (210))
    _t1 = EUDIf()
    # (Line 9) && Deaths(dwread_epd(204 * 12 + cp), AtMost, 800, (210))
    # (Line 10) && Deaths(cp, Exactly, 0, " `UniqueCoolTime"))
    if _t1(EUDSCAnd()(Deaths(f_dwread_epd(204 * 12 + cp), AtLeast, 132, (210)))(Deaths(f_dwread_epd(204 * 12 + cp), AtMost, 800, (210)))(Deaths(cp, Exactly, 0, " `UniqueCoolTime"))()):
        # (Line 11) {
        # (Line 12) SetDeaths(dwread_epd(204 * 12 + cp), Subtract, 120, (210));
        # (Line 13) SetDeaths(cp, SetTo, 3600, " `UniqueCoolTime");
        DoActions(SetDeaths(f_dwread_epd(204 * 12 + cp), Subtract, 120, (210)))
        # (Line 14) }
        DoActions(SetDeaths(cp, SetTo, 3600, " `UniqueCoolTime"))
        # (Line 15) }
    EUDEndIf()
    # (Line 17) function main(cp)

# (Line 18) {
@EUDFunc
def f_main(cp):
    # (Line 19) if (f.delay[cp] == 0)
    if EUDIf()(f.delay[cp] == 0):
        # (Line 20) {
        # (Line 21) if (f.count[cp] == 0)
        if EUDIf()(f.count[cp] == 0):
            # (Line 22) {
            # (Line 23) if (f.loop[cp] == 0)
            if EUDIf()(f.loop[cp] == 0):
                # (Line 24) {
                # (Line 25) status = 0;
                status << (0)
                # (Line 26) SetSwitch("Recall - Ekidona", Set);
                # (Line 27) }
                DoActions(SetSwitch("Recall - Ekidona", Set))
                # (Line 29) f.SkillWait(cp, 80);
            EUDEndIf()
            f.SkillWait(cp, 80)
            # (Line 31) f.loop[cp] += 1;
            _ARRW(f.loop, cp).__iadd__(1)
            # (Line 33) if (f.loop[cp] == 101)
            if EUDIf()(f.loop[cp] == 101):
                # (Line 34) {
                # (Line 35) f.Voice_Routine(cp, 24);
                f.Voice_Routine(cp, 24)
                # (Line 37) f.count[cp] += 1;
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 38) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 39) }
                # (Line 40) }
            EUDEndIf()
            # (Line 41) else if (f.count[cp] == 1)
        if EUDElseIf()(f.count[cp] == 1):
            # (Line 42) {
            # (Line 43) f.SkillWait(cp, 80);
            f.SkillWait(cp, 80)
            # (Line 45) f.loop[cp] += 1;
            _ARRW(f.loop, cp).__iadd__(1)
            # (Line 47) if (f.loop[cp] == 78)
            if EUDIf()(f.loop[cp] == 78):
                # (Line 48) {
                # (Line 49) f.Voice_Routine(cp, 25);
                f.Voice_Routine(cp, 25)
                # (Line 51) f.count[cp] += 1;
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 52) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 53) }
                # (Line 54) }
            EUDEndIf()
            # (Line 55) else if (f.count[cp] == 2)
        if EUDElseIf()(f.count[cp] == 2):
            # (Line 56) {
            # (Line 57) f.SkillWait(cp, 80);
            f.SkillWait(cp, 80)
            # (Line 59) f.loop[cp] += 1;
            _ARRW(f.loop, cp).__iadd__(1)
            # (Line 61) if (f.loop[cp] == 63)
            if EUDIf()(f.loop[cp] == 63):
                # (Line 62) {
                # (Line 63) f.Voice_Routine(cp, 26);
                f.Voice_Routine(cp, 26)
                # (Line 65) f.count[cp] += 1;
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 66) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 67) }
                # (Line 68) }
            EUDEndIf()
            # (Line 69) else if (f.count[cp] == 3)
        if EUDElseIf()(f.count[cp] == 3):
            # (Line 70) {
            # (Line 71) if (status == 0)
            if EUDIf()(status == 0):
                # (Line 72) {
                # (Line 74) }
                # (Line 75) else if (status == 1)
                pass
            if EUDElseIf()(status == 1):
                # (Line 76) {
                # (Line 77) SetSwitch("Unique - Ekidona", Set);
                # (Line 78) }
                DoActions(SetSwitch("Unique - Ekidona", Set))
                # (Line 79) SetSwitch("Recall - Ekidona", Clear);
            EUDEndIf()
            # (Line 80) SetDeaths(cp, SetTo, 360, " `UniqueCoolTime");
            DoActions(SetSwitch("Recall - Ekidona", Clear))
            # (Line 82) f.SkillEnd(cp);
            DoActions(SetDeaths(cp, SetTo, 360, " `UniqueCoolTime"))
            f.SkillEnd(cp)
            # (Line 83) }
            # (Line 85) }
        EUDEndIf()
        # (Line 87) if (status == 0)
    EUDEndIf()
    if EUDIf()(status == 0):
        # (Line 88) {
        # (Line 89) if (cp < 3)
        if EUDIf()(cp >= 3, neg=True):
            # (Line 90) {
            # (Line 91) f.stb.printAt(4, "\x13\x19계약\x04을 걸 플레이어를 선택해주십시오\x04");
            f.stb.printAt(4, "\x13\x19계약\x04을 걸 플레이어를 선택해주십시오\x04")
            # (Line 92) f.stb.printAt(5, "\x13\x04S : \x08P1\x04");
            f.stb.printAt(5, "\x13\x04S : \x08P1\x04")
            # (Line 93) f.stb.printAt(6, "\x13\x04C : \x0EP2\x04");
            f.stb.printAt(6, "\x13\x04C : \x0EP2\x04")
            # (Line 94) f.stb.printAt(7, "\x13\x04A : \x0FP3\x04");
            f.stb.printAt(7, "\x13\x04A : \x0FP3\x04")
            # (Line 96) if (Bring(cp, AtLeast, 1, "Protoss Scout", "[Skill]UseSkill"))
            if EUDIf()(Bring(cp, AtLeast, 1, "Protoss Scout", "[Skill]UseSkill")):
                # (Line 97) {
                # (Line 98) f.stb.print("\x13\x08P1 \x04지정\n");
                f.stb.print("\x13\x08P1 \x04지정\n")
                # (Line 100) SetDeaths(cp, SetTo, 0, " `UniqueSkill");
                # (Line 101) status = 1;
                DoActions(SetDeaths(cp, SetTo, 0, " `UniqueSkill"))
                status << (1)
                # (Line 102) }
                # (Line 103) else if (Bring(cp, AtLeast, 1, "Protoss Carrier", "[Skill]UseSkill"))
            if EUDElseIf()(Bring(cp, AtLeast, 1, "Protoss Carrier", "[Skill]UseSkill")):
                # (Line 104) {
                # (Line 105) f.stb.print("\x13\x0EP2 \x04지정\n");
                f.stb.print("\x13\x0EP2 \x04지정\n")
                # (Line 107) SetDeaths(cp, SetTo, 1, " `UniqueSkill");
                # (Line 108) status = 1;
                DoActions(SetDeaths(cp, SetTo, 1, " `UniqueSkill"))
                status << (1)
                # (Line 109) }
                # (Line 110) else if (Bring(cp, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill"))
            if EUDElseIf()(Bring(cp, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill")):
                # (Line 111) {
                # (Line 112) f.stb.print("\x13\x0FP3 \x04지정\n");
                f.stb.print("\x13\x0FP3 \x04지정\n")
                # (Line 114) SetDeaths(cp, SetTo, 2, " `UniqueSkill");
                # (Line 115) status = 1;
                DoActions(SetDeaths(cp, SetTo, 2, " `UniqueSkill"))
                status << (1)
                # (Line 116) }
                # (Line 117) }
            EUDEndIf()
            # (Line 118) else if (cp >= 3 && cp < 6)
        if EUDElseIf()(EUDSCAnd()(cp >= 3)(cp >= 6, neg=True)()):
            # (Line 119) {
            # (Line 120) f.stb.printAt(4, "\x13\x19계약\x04을 걸 플레이어를 선택해주십시오\x04");
            f.stb.printAt(4, "\x13\x19계약\x04을 걸 플레이어를 선택해주십시오\x04")
            # (Line 121) f.stb.printAt(5, "\x13\x04S : \x10P4\x04");
            f.stb.printAt(5, "\x13\x04S : \x10P4\x04")
            # (Line 122) f.stb.printAt(6, "\x13\x04C : \x11P5\x04");
            f.stb.printAt(6, "\x13\x04C : \x11P5\x04")
            # (Line 123) f.stb.printAt(7, "\x13\x04A : \x15P6\x04");
            f.stb.printAt(7, "\x13\x04A : \x15P6\x04")
            # (Line 125) if (Bring(cp, AtLeast, 1, "Protoss Scout", "[Skill]UseSkill"))
            if EUDIf()(Bring(cp, AtLeast, 1, "Protoss Scout", "[Skill]UseSkill")):
                # (Line 126) {
                # (Line 127) f.stb.print("\x13\x10P4 \x04지정\n");
                f.stb.print("\x13\x10P4 \x04지정\n")
                # (Line 129) SetDeaths(cp, SetTo, 3, " `UniqueSkill");
                # (Line 130) status = 1;
                DoActions(SetDeaths(cp, SetTo, 3, " `UniqueSkill"))
                status << (1)
                # (Line 131) }
                # (Line 132) else if (Bring(cp, AtLeast, 1, "Protoss Carrier", "[Skill]UseSkill"))
            if EUDElseIf()(Bring(cp, AtLeast, 1, "Protoss Carrier", "[Skill]UseSkill")):
                # (Line 133) {
                # (Line 134) f.stb.print("\x13\x11P5 \x04지정\n");
                f.stb.print("\x13\x11P5 \x04지정\n")
                # (Line 136) SetDeaths(cp, SetTo, 4, " `UniqueSkill");
                # (Line 137) status = 1;
                DoActions(SetDeaths(cp, SetTo, 4, " `UniqueSkill"))
                status << (1)
                # (Line 138) }
                # (Line 139) else if (Bring(cp, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill"))
            if EUDElseIf()(Bring(cp, AtLeast, 1, "Protoss Arbiter", "[Skill]UseSkill")):
                # (Line 140) {
                # (Line 141) f.stb.print("\x13\x15P6 \x04지정\n");
                f.stb.print("\x13\x15P6 \x04지정\n")
                # (Line 143) SetDeaths(cp, SetTo, 5, " `UniqueSkill");
                # (Line 144) status = 1;
                DoActions(SetDeaths(cp, SetTo, 5, " `UniqueSkill"))
                status << (1)
                # (Line 145) }
                # (Line 146) }
            EUDEndIf()
            # (Line 149) }
        EUDEndIf()
        # (Line 151) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
    EUDEndIf()
    # (Line 152) }
    DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
