## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Function as f;
import Function as f
# (Line 3) function NxNSquareShapeAt(cp : TrgPlayer, count, Unit : TrgUnit, n, interval, x, y);
# (Line 4) function NxNSquareShapeAtDouble(cp : TrgPlayer, count, Unit : TrgUnit, n, interval, x, y);
# (Line 6) var x = 0;
x = EUDCreateVariables(1)
_IGVA([x], lambda: [0])
# (Line 7) var y = 0;
y = EUDCreateVariables(1)
_IGVA([y], lambda: [0])
# (Line 9) function main(cp)
# (Line 10) {
@EUDFunc
def f_main(cp):
    # (Line 11) f.BanReturn(cp);
    f.BanReturn(cp)
    # (Line 12) f.HoldPosition(cp);
    f.HoldPosition(cp)
    # (Line 14) MoveUnit(All, "40 + 1n Gantrithor", cp, "Anywhere", "[Skill]HoldPosition");
    # (Line 15) MoveUnit(All, "50 + 1n Tank", cp, "Anywhere", "[Skill]HoldPosition");
    DoActions(MoveUnit(All, "40 + 1n Gantrithor", cp, "Anywhere", "[Skill]HoldPosition"))
    # (Line 16) MoveUnit(All, "60 + 1n Dragoon", cp, "Anywhere", "[Skill]HoldPosition");
    DoActions(MoveUnit(All, "50 + 1n Tank", cp, "Anywhere", "[Skill]HoldPosition"))
    # (Line 18) if (f.delay[cp] == 0)
    DoActions(MoveUnit(All, "60 + 1n Dragoon", cp, "Anywhere", "[Skill]HoldPosition"))
    if EUDIf()(f.delay[cp] == 0):
        # (Line 19) {
        # (Line 20) if (f.count[cp] == 0)      //0.00
        if EUDIf()(f.count[cp] == 0):
            # (Line 21) {
            # (Line 22) RemoveUnitAt(All, "40 + 1n Mojo", "Anywhere", cp);
            # (Line 24) if (f.loop[cp] % 2 == 0 && f.loop[cp] < 64)
            DoActions(RemoveUnitAt(All, "40 + 1n Mojo", "Anywhere", cp))
            if EUDIf()(EUDSCAnd()(f.loop[cp] % 2 == 0)(f.loop[cp] >= 64, neg=True)()):
                # (Line 25) {
                # (Line 26) RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp);
                # (Line 28) f.Table_Sin(cp, 45 * (f.loop[cp] / 2), 64);
                DoActions(RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp))
                f.Table_Sin(cp, 45 * (f.loop[cp] // 2), 64)
                # (Line 29) f.Table_Cos(cp, 45 * (f.loop[cp] / 2), 64);
                f.Table_Cos(cp, 45 * (f.loop[cp] // 2), 64)
                # (Line 31) x = f.CosAngle[cp];
                x << (f.CosAngle[cp])
                # (Line 32) y = f.SinAngle[cp];
                y << (f.SinAngle[cp])
                # (Line 34) f.DoubleShape(cp, 1, "60 + 1n Danimoth", x, y);
                f.DoubleShape(cp, 1, "60 + 1n Danimoth", x, y)
                # (Line 35) f.DoubleShape(cp, 1, "Protoss Dark Archon", x, y);
                f.DoubleShape(cp, 1, "Protoss Dark Archon", x, y)
                # (Line 36) f.DotShape(cp, 1, "40 + 1n Mojo", 0, 0);
                f.DotShape(cp, 1, "40 + 1n Mojo", 0, 0)
                # (Line 38) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", cp);
                # (Line 40) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", cp))
                # (Line 41) Order("60 + 1n Danimoth", cp, "Anywhere", Attack, f.location[cp]);
                DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
                # (Line 43) }
                DoActions(Order("60 + 1n Danimoth", cp, "Anywhere", Attack, f.location[cp]))
                # (Line 45) if (f.loop[cp] >= 8 && f.loop[cp] < 14)    //0.64 - 1.12
            EUDEndIf()
            if EUDIf()(EUDSCAnd()(f.loop[cp] >= 8)(f.loop[cp] >= 14, neg=True)()):
                # (Line 46) {
                # (Line 47) var i = f.loop[cp] - 8;
                i = EUDVariable()
                i << (f.loop[cp] - 8)
                # (Line 49) if (i < 4)
                if EUDIf()(i >= 4, neg=True):
                    # (Line 50) {
                    # (Line 51) f.Table_Sin(cp, 0, 50 + 50 * i);
                    f.Table_Sin(cp, 0, 50 + 50 * i)
                    # (Line 52) f.Table_Cos(cp, 0, 50 + 50 * i);
                    f.Table_Cos(cp, 0, 50 + 50 * i)
                    # (Line 54) x = f.CosAngle[cp];
                    x << (f.CosAngle[cp])
                    # (Line 55) y = f.SinAngle[cp];
                    y << (f.SinAngle[cp])
                    # (Line 57) f.SquareShape(cp, 1, "40 + 1n Mojo", x, y);
                    f.SquareShape(cp, 1, "40 + 1n Mojo", x, y)
                    # (Line 58) f.SquareShape(cp, 1, "60 + 1n Archon", x, y);
                    f.SquareShape(cp, 1, "60 + 1n Archon", x, y)
                    # (Line 60) KillUnitAt(All,  "60 + 1n Archon", "Anywhere", cp);
                    # (Line 62) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
                    DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", cp))
                    # (Line 64) }
                    DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
                    # (Line 66) if (i == 4)
                EUDEndIf()
                if EUDIf()(i == 4):
                    # (Line 67) {
                    # (Line 68) f.Table_Sin(cp, 0, 200);
                    f.Table_Sin(cp, 0, 200)
                    # (Line 69) f.Table_Cos(cp, 0, 200);
                    f.Table_Cos(cp, 0, 200)
                    # (Line 71) x = f.CosAngle[cp];
                    x << (f.CosAngle[cp])
                    # (Line 72) y = f.SinAngle[cp];
                    y << (f.SinAngle[cp])
                    # (Line 74) f.SquareShape(cp, 1, "40 + 1n Gantrithor", x, y);
                    f.SquareShape(cp, 1, "40 + 1n Gantrithor", x, y)
                    # (Line 75) f.SquareShape(cp, 1, "60 + 1n Siege", x, y);
                    f.SquareShape(cp, 1, "60 + 1n Siege", x, y)
                    # (Line 77) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", cp);
                    # (Line 78) }
                    DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", cp))
                    # (Line 79) }
                EUDEndIf()
                # (Line 80) if (f.loop[cp] >= 14 && f.loop[cp] < 20)   //1.12 - 1.60
            EUDEndIf()
            if EUDIf()(EUDSCAnd()(f.loop[cp] >= 14)(f.loop[cp] >= 20, neg=True)()):
                # (Line 81) {
                # (Line 82) var i = f.loop[cp] - 14;
                i = EUDVariable()
                i << (f.loop[cp] - 14)
                # (Line 84) if (i < 4)
                if EUDIf()(i >= 4, neg=True):
                    # (Line 85) {
                    # (Line 86) f.Table_Sin(cp, 45, 50 + 50 * i);
                    f.Table_Sin(cp, 45, 50 + 50 * i)
                    # (Line 87) f.Table_Cos(cp, 45, 50 + 50 * i);
                    f.Table_Cos(cp, 45, 50 + 50 * i)
                    # (Line 89) x = f.CosAngle[cp];
                    x << (f.CosAngle[cp])
                    # (Line 90) y = f.SinAngle[cp];
                    y << (f.SinAngle[cp])
                    # (Line 92) f.SquareShape(cp, 1, "40 + 1n Mojo", x, y);
                    f.SquareShape(cp, 1, "40 + 1n Mojo", x, y)
                    # (Line 93) f.SquareShape(cp, 1, "60 + 1n Archon", x, y);
                    f.SquareShape(cp, 1, "60 + 1n Archon", x, y)
                    # (Line 95) KillUnitAt(All,  "60 + 1n Archon", "Anywhere", cp);
                    # (Line 97) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
                    DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", cp))
                    # (Line 99) }
                    DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
                    # (Line 101) if (i == 4)
                EUDEndIf()
                if EUDIf()(i == 4):
                    # (Line 102) {
                    # (Line 103) f.Table_Sin(cp, 45, 200);
                    f.Table_Sin(cp, 45, 200)
                    # (Line 104) f.Table_Cos(cp, 45, 200);
                    f.Table_Cos(cp, 45, 200)
                    # (Line 106) x = f.CosAngle[cp];
                    x << (f.CosAngle[cp])
                    # (Line 107) y = f.SinAngle[cp];
                    y << (f.SinAngle[cp])
                    # (Line 109) f.SquareShape(cp, 1, "40 + 1n Gantrithor", x, y);
                    f.SquareShape(cp, 1, "40 + 1n Gantrithor", x, y)
                    # (Line 110) f.SquareShape(cp, 1, "60 + 1n Siege", x, y);
                    f.SquareShape(cp, 1, "60 + 1n Siege", x, y)
                    # (Line 112) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", cp);
                    # (Line 113) }
                    DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", cp))
                    # (Line 114) }
                EUDEndIf()
                # (Line 116) if (f.loop[cp] >= 30 && f.loop[cp] < 64)    //1.92
            EUDEndIf()
            if EUDIf()(EUDSCAnd()(f.loop[cp] >= 30)(f.loop[cp] >= 64, neg=True)()):
                # (Line 117) {
                # (Line 118) var i = f.loop[cp] - 30;
                i = EUDVariable()
                i << (f.loop[cp] - 30)
                # (Line 120) if (i == 0)
                if EUDIf()(i == 0):
                    # (Line 121) {
                    # (Line 122) f.Table_Sin(cp, 22, 100);
                    f.Table_Sin(cp, 22, 100)
                    # (Line 123) f.Table_Cos(cp, 22, 100);
                    f.Table_Cos(cp, 22, 100)
                    # (Line 125) x = f.CosAngle[cp];
                    x << (f.CosAngle[cp])
                    # (Line 126) y = f.SinAngle[cp];
                    y << (f.SinAngle[cp])
                    # (Line 127) }
                    # (Line 128) if (i == 6)
                EUDEndIf()
                if EUDIf()(i == 6):
                    # (Line 129) {
                    # (Line 130) f.Table_Sin(cp, 67, 150);
                    f.Table_Sin(cp, 67, 150)
                    # (Line 131) f.Table_Cos(cp, 67, 150);
                    f.Table_Cos(cp, 67, 150)
                    # (Line 133) x = f.CosAngle[cp];
                    x << (f.CosAngle[cp])
                    # (Line 134) y = f.SinAngle[cp];
                    y << (f.SinAngle[cp])
                    # (Line 135) }
                    # (Line 136) if (i == 12)
                EUDEndIf()
                if EUDIf()(i == 12):
                    # (Line 137) {
                    # (Line 138) f.Table_Sin(cp, 67, 100);
                    f.Table_Sin(cp, 67, 100)
                    # (Line 139) f.Table_Cos(cp, 67, 100);
                    f.Table_Cos(cp, 67, 100)
                    # (Line 141) x = f.CosAngle[cp];
                    x << (f.CosAngle[cp])
                    # (Line 142) y = f.SinAngle[cp];
                    y << (f.SinAngle[cp])
                    # (Line 143) }
                    # (Line 144) if (i == 18)
                EUDEndIf()
                if EUDIf()(i == 18):
                    # (Line 145) {
                    # (Line 146) f.Table_Sin(cp, 22, 150);
                    f.Table_Sin(cp, 22, 150)
                    # (Line 147) f.Table_Cos(cp, 22, 150);
                    f.Table_Cos(cp, 22, 150)
                    # (Line 149) x = f.CosAngle[cp];
                    x << (f.CosAngle[cp])
                    # (Line 150) y = f.SinAngle[cp];
                    y << (f.SinAngle[cp])
                    # (Line 151) }
                    # (Line 152) if (i == 24)
                EUDEndIf()
                if EUDIf()(i == 24):
                    # (Line 153) {
                    # (Line 154) f.Table_Sin(cp, 22, 100);
                    f.Table_Sin(cp, 22, 100)
                    # (Line 155) f.Table_Cos(cp, 22, 100);
                    f.Table_Cos(cp, 22, 100)
                    # (Line 157) x = f.CosAngle[cp];
                    x << (f.CosAngle[cp])
                    # (Line 158) y = f.SinAngle[cp];
                    y << (f.SinAngle[cp])
                    # (Line 159) }
                    # (Line 160) if (i == 30)
                EUDEndIf()
                if EUDIf()(i == 30):
                    # (Line 161) {
                    # (Line 162) f.Table_Sin(cp, 67, 150);
                    f.Table_Sin(cp, 67, 150)
                    # (Line 163) f.Table_Cos(cp, 67, 150);
                    f.Table_Cos(cp, 67, 150)
                    # (Line 165) x = f.CosAngle[cp];
                    x << (f.CosAngle[cp])
                    # (Line 166) y = f.SinAngle[cp];
                    y << (f.SinAngle[cp])
                    # (Line 167) }
                    # (Line 169) if (i % 6 == 0)
                EUDEndIf()
                if EUDIf()(i % 6 == 0):
                    # (Line 170) {
                    # (Line 171) KillUnitAt(All, "50 + 1n Tank", "Anywhere", cp);
                    # (Line 173) f.SquareShape(cp, 1, "50 + 1n Tank", x, y);
                    DoActions(KillUnitAt(All, "50 + 1n Tank", "Anywhere", cp))
                    f.SquareShape(cp, 1, "50 + 1n Tank", x, y)
                    # (Line 174) f.SquareShape(cp, 1, "60 + 1n Danimoth", x, y);
                    f.SquareShape(cp, 1, "60 + 1n Danimoth", x, y)
                    # (Line 176) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp);
                    # (Line 178) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
                    DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp))
                    # (Line 179) MoveUnit(All, "50 + 1n Tank", cp, "[Skill]Unit_Wait_ALL", f.location[cp]);
                    DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
                    # (Line 180) Order("50 + 1n Tank", cp, "Anywhere", Attack, f.location[cp]);
                    DoActions(MoveUnit(All, "50 + 1n Tank", cp, "[Skill]Unit_Wait_ALL", f.location[cp]))
                    # (Line 182) }
                    DoActions(Order("50 + 1n Tank", cp, "Anywhere", Attack, f.location[cp]))
                    # (Line 183) }
                EUDEndIf()
                # (Line 184) if (f.loop[cp] == 64)      //5.12
            EUDEndIf()
            if EUDIf()(f.loop[cp] == 64):
                # (Line 185) {
                # (Line 186) KillUnitAt(All, "50 + 1n Tank", "Anywhere", cp);
                # (Line 187) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", cp);
                DoActions(KillUnitAt(All, "50 + 1n Tank", "Anywhere", cp))
                # (Line 188) KillUnitAt(All, "60 + 1n Dragoon", "Anywhere", cp);
                DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", cp))
                # (Line 189) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp);
                DoActions(KillUnitAt(All, "60 + 1n Dragoon", "Anywhere", cp))
                # (Line 190) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp);
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp))
                # (Line 191) f.Voice_Routine(cp, 17);
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp))
                f.Voice_Routine(cp, 17)
                # (Line 192) }
                # (Line 194) f.SkillWait(cp, 80);
            EUDEndIf()
            f.SkillWait(cp, 80)
            # (Line 196) f.loop[cp] += 1;
            _ARRW(f.loop, cp).__iadd__(1)
            # (Line 198) if (f.loop[cp] == 72)
            if EUDIf()(f.loop[cp] == 72):
                # (Line 199) {
                # (Line 200) f.count[cp] += 1;
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 201) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 202) }
                # (Line 203) }
            EUDEndIf()
            # (Line 204) else if (f.count[cp] == 1)    //5.80
        if EUDElseIf()(f.count[cp] == 1):
            # (Line 205) {
            # (Line 206) if (f.loop[cp] == 0)
            if EUDIf()(f.loop[cp] == 0):
                # (Line 207) {
                # (Line 208) NxNSquareShapeAt(cp, 1, "60 + 1n Danimoth", 2, 75, 100, 0);
                NxNSquareShapeAt(cp, 1, "60 + 1n Danimoth", 2, 75, 100, 0)
                # (Line 209) NxNSquareShapeAt(cp, 1, "60 + 1n High Templar", 2, 75, 100, 0);
                NxNSquareShapeAt(cp, 1, "60 + 1n High Templar", 2, 75, 100, 0)
                # (Line 211) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", cp);
                # (Line 213) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", cp))
                # (Line 214) Order("60 + 1n Danimoth", cp, "Anywhere", Attack, f.location[cp]);
                DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
                # (Line 215) }
                DoActions(Order("60 + 1n Danimoth", cp, "Anywhere", Attack, f.location[cp]))
                # (Line 217) if (f.loop[cp] == 4)    //6.12
            EUDEndIf()
            if EUDIf()(f.loop[cp] == 4):
                # (Line 218) {
                # (Line 219) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp);
                # (Line 221) NxNSquareShapeAt(cp, 1, "60 + 1n Danimoth", 2, 75, 100, 100);
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp))
                NxNSquareShapeAt(cp, 1, "60 + 1n Danimoth", 2, 75, 100, 100)
                # (Line 222) NxNSquareShapeAt(cp, 1, "60 + 1n High Templar", 2, 75, 100, 100);
                NxNSquareShapeAt(cp, 1, "60 + 1n High Templar", 2, 75, 100, 100)
                # (Line 224) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", cp);
                # (Line 226) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", cp))
                # (Line 227) Order("60 + 1n Danimoth", cp, "Anywhere", Attack, f.location[cp]);
                DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
                # (Line 228) }
                DoActions(Order("60 + 1n Danimoth", cp, "Anywhere", Attack, f.location[cp]))
                # (Line 230) if (f.loop[cp] == 8)    //6.44
            EUDEndIf()
            if EUDIf()(f.loop[cp] == 8):
                # (Line 231) {
                # (Line 232) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp);
                # (Line 233) }
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp))
                # (Line 235) f.SkillWait(cp, 80);
            EUDEndIf()
            f.SkillWait(cp, 80)
            # (Line 237) f.loop[cp] += 1;
            _ARRW(f.loop, cp).__iadd__(1)
            # (Line 239) if (f.loop[cp] == 12)
            if EUDIf()(f.loop[cp] == 12):
                # (Line 240) {
                # (Line 241) f.count[cp] += 1;
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 242) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 243) }
                # (Line 244) }
            EUDEndIf()
            # (Line 245) else if (f.count[cp] == 2)    //6.80
        if EUDElseIf()(f.count[cp] == 2):
            # (Line 246) {
            # (Line 247) if (f.loop[cp] < 4)
            if EUDIf()(f.loop[cp] >= 4, neg=True):
                # (Line 248) {
                # (Line 249) RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp);
                # (Line 251) f.SquareShape(cp, 1, "60 + 1n Danimoth", 50 - 50 * f.loop[cp], 100);
                DoActions(RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp))
                f.SquareShape(cp, 1, "60 + 1n Danimoth", 50 - 50 * f.loop[cp], 100)
                # (Line 252) f.SquareShape(cp, 1, "Protoss Dark Archon", 50 - 50 * f.loop[cp], 100);
                f.SquareShape(cp, 1, "Protoss Dark Archon", 50 - 50 * f.loop[cp], 100)
                # (Line 254) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", cp);
                # (Line 256) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", cp))
                # (Line 257) Order("60 + 1n Danimoth", cp, "Anywhere", Attack, f.location[cp]);
                DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
                # (Line 258) }
                DoActions(Order("60 + 1n Danimoth", cp, "Anywhere", Attack, f.location[cp]))
                # (Line 259) if (f.loop[cp] == 4)
            EUDEndIf()
            if EUDIf()(f.loop[cp] == 4):
                # (Line 260) {
                # (Line 261) RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp);
                # (Line 263) f.NxNSquareShape(cp, 1, "60 + 1n Danimoth", 5, 75);
                DoActions(RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp))
                f.NxNSquareShape(cp, 1, "60 + 1n Danimoth", 5, 75)
                # (Line 264) f.NxNSquareShape(cp, 1, "60 + 1n High Templar", 5, 75);
                f.NxNSquareShape(cp, 1, "60 + 1n High Templar", 5, 75)
                # (Line 266) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", cp);
                # (Line 268) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", cp))
                # (Line 269) Order("60 + 1n Danimoth", cp, "Anywhere", Attack, f.location[cp]);
                DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
                # (Line 270) }
                DoActions(Order("60 + 1n Danimoth", cp, "Anywhere", Attack, f.location[cp]))
                # (Line 271) if (f.loop[cp] == 8)
            EUDEndIf()
            if EUDIf()(f.loop[cp] == 8):
                # (Line 272) {
                # (Line 273) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp);
                # (Line 275) f.NxNSquareShape(cp, 1, "60 + 1n Danimoth", 3, 75);
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp))
                f.NxNSquareShape(cp, 1, "60 + 1n Danimoth", 3, 75)
                # (Line 276) f.NxNSquareShape(cp, 1, "60 + 1n High Templar", 3, 75);
                f.NxNSquareShape(cp, 1, "60 + 1n High Templar", 3, 75)
                # (Line 278) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", cp);
                # (Line 280) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", cp))
                # (Line 281) Order("60 + 1n Danimoth", cp, "Anywhere", Attack, f.location[cp]);
                DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
                # (Line 282) }
                DoActions(Order("60 + 1n Danimoth", cp, "Anywhere", Attack, f.location[cp]))
                # (Line 283) if (f.loop[cp] == 12)
            EUDEndIf()
            if EUDIf()(f.loop[cp] == 12):
                # (Line 284) {
                # (Line 285) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp);
                # (Line 286) }
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp))
                # (Line 288) f.SkillWait(cp, 80);
            EUDEndIf()
            f.SkillWait(cp, 80)
            # (Line 290) f.loop[cp] += 1;
            _ARRW(f.loop, cp).__iadd__(1)
            # (Line 292) if (f.loop[cp] == 16)
            if EUDIf()(f.loop[cp] == 16):
                # (Line 293) {
                # (Line 294) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp);
                # (Line 295) f.Voice_Routine(cp, 18);
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp))
                f.Voice_Routine(cp, 18)
                # (Line 297) f.count[cp] += 1;
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 298) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 299) }
                # (Line 300) }
            EUDEndIf()
            # (Line 301) else if (f.count[cp] == 3) //8.10
        if EUDElseIf()(f.count[cp] == 3):
            # (Line 302) {
            # (Line 303) if (f.loop[cp] == 0)
            if EUDIf()(f.loop[cp] == 0):
                # (Line 304) {
                # (Line 305) for (var k = 0; k < 8; k++)
                k = EUDVariable()
                k << (0)
                if EUDWhile()(k >= 8, neg=True):
                    def _t34():
                        k.__iadd__(1)
                    # (Line 306) {
                    # (Line 307) CreateUnit(4, "60 + 1n Siege", k + 33, cp);
                    # (Line 308) SetInvincibility(Enable, "60 + 1n Siege", cp, "[Skill]Unit_Wait_ALL");
                    DoActions(CreateUnit(4, "60 + 1n Siege", k + 33, cp))
                    # (Line 309) }
                    DoActions(SetInvincibility(Enable, "60 + 1n Siege", cp, "[Skill]Unit_Wait_ALL"))
                    # (Line 310) }
                    EUDSetContinuePoint()
                    _t34()
                EUDEndWhile()
                # (Line 312) var i = f.loop[cp] % 4;
            EUDEndIf()
            i = EUDVariable()
            i << (f.loop[cp] % 4)
            # (Line 314) if (f.loop[cp] % 8 == 0)
            if EUDIf()(f.loop[cp] % 8 == 0):
                # (Line 315) {
                # (Line 316) KillUnitAt(All, "Protoss Reaver", "Anywhere", cp);
                # (Line 317) }
                DoActions(KillUnitAt(All, "Protoss Reaver", "Anywhere", cp))
                # (Line 319) var r = ((f.loop[cp] / 4) % 2) * 45 + 22;
            EUDEndIf()
            r = EUDVariable()
            r << (((f.loop[cp] // 4) % 2) * 45 + 22)
            # (Line 321) if (i % 2 == 0)
            if EUDIf()(i % 2 == 0):
                # (Line 322) {
                # (Line 323) f.Table_Sin(cp, r, 50 + 50 * i);
                f.Table_Sin(cp, r, 50 + 50 * i)
                # (Line 324) f.Table_Cos(cp, r, 50 + 50 * i);
                f.Table_Cos(cp, r, 50 + 50 * i)
                # (Line 326) x = f.CosAngle[cp];
                x << (f.CosAngle[cp])
                # (Line 327) y = f.SinAngle[cp];
                y << (f.SinAngle[cp])
                # (Line 328) }
                # (Line 329) if (i % 2 == 1)
            EUDEndIf()
            if EUDIf()(i % 2 == 1):
                # (Line 330) {
                # (Line 331) f.Table_Sin(cp, r + 22, 50 + 50 * i);
                f.Table_Sin(cp, r + 22, 50 + 50 * i)
                # (Line 332) f.Table_Cos(cp, r + 22, 50 + 50 * i);
                f.Table_Cos(cp, r + 22, 50 + 50 * i)
                # (Line 334) x = f.CosAngle[cp];
                x << (f.CosAngle[cp])
                # (Line 335) y = f.SinAngle[cp];
                y << (f.SinAngle[cp])
                # (Line 336) }
                # (Line 338) RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp);
            EUDEndIf()
            # (Line 340) f.SquareShape(cp, 1, "Protoss Reaver", x, y);
            DoActions(RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp))
            f.SquareShape(cp, 1, "Protoss Reaver", x, y)
            # (Line 341) f.SquareShape(cp, 1, "60 + 1n Danimoth", x, y);
            f.SquareShape(cp, 1, "60 + 1n Danimoth", x, y)
            # (Line 342) f.SquareShape(cp, 1, "Protoss Dark Archon", x, y);
            f.SquareShape(cp, 1, "Protoss Dark Archon", x, y)
            # (Line 344) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", cp);
            # (Line 346) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
            DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", cp))
            # (Line 347) MoveUnit(All, "Protoss Reaver", cp, "[Skill]Unit_Wait_ALL", f.location[cp]);
            DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
            # (Line 349) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
            DoActions(MoveUnit(All, "Protoss Reaver", cp, "[Skill]Unit_Wait_ALL", f.location[cp]))
            # (Line 350) Order("60 + 1n Danimoth", cp, "Anywhere", Attack, f.location[cp]);
            DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
            # (Line 352) f.SkillWait(cp, 80);
            DoActions(Order("60 + 1n Danimoth", cp, "Anywhere", Attack, f.location[cp]))
            f.SkillWait(cp, 80)
            # (Line 354) f.loop[cp] += 1;
            _ARRW(f.loop, cp).__iadd__(1)
            # (Line 356) if (f.loop[cp] == 20)
            if EUDIf()(f.loop[cp] == 20):
                # (Line 357) {
                # (Line 358) KillUnitAt(All, "Protoss Reaver", "Anywhere", cp);
                # (Line 359) RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp);
                DoActions(KillUnitAt(All, "Protoss Reaver", "Anywhere", cp))
                # (Line 361) f.Voice_Routine(cp, 19);
                DoActions(RemoveUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp))
                f.Voice_Routine(cp, 19)
                # (Line 363) f.count[cp] += 1;
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 364) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 365) }
                # (Line 366) }
            EUDEndIf()
            # (Line 367) else if (f.count[cp] == 4) //9.90
        if EUDElseIf()(f.count[cp] == 4):
            # (Line 368) {
            # (Line 369) if (f.loop[cp] == 0)
            if EUDIf()(f.loop[cp] == 0):
                # (Line 370) {
                # (Line 371) f.NxNSquareShapeWithProperty(cp, 1, "50 + 1n Battlecruiser", 3, 75, 1);
                f.NxNSquareShapeWithProperty(cp, 1, "50 + 1n Battlecruiser", 3, 75, 1)
                # (Line 373) Order("50 + 1n Battlecruiser", cp, "Anywhere", Attack, "Anywhere");
                # (Line 374) }
                DoActions(Order("50 + 1n Battlecruiser", cp, "Anywhere", Attack, "Anywhere"))
                # (Line 375) if (f.loop[cp] == 4)
            EUDEndIf()
            if EUDIf()(f.loop[cp] == 4):
                # (Line 376) {
                # (Line 377) RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp);
                # (Line 379) f.NxNSquareShape(cp, 1, "Kakaru (Twilight)", 3, 75);
                DoActions(RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp))
                f.NxNSquareShape(cp, 1, "Kakaru (Twilight)", 3, 75)
                # (Line 380) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", cp);
                # (Line 381) }
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", cp))
                # (Line 382) if (f.loop[cp] == 6)
            EUDEndIf()
            if EUDIf()(f.loop[cp] == 6):
                # (Line 383) {
                # (Line 384) f.NxNSquareShapeWithProperty(cp, 1, "50 + 1n Battlecruiser", 3, 75, 1);
                f.NxNSquareShapeWithProperty(cp, 1, "50 + 1n Battlecruiser", 3, 75, 1)
                # (Line 386) Order("50 + 1n Battlecruiser", cp, "Anywhere", Attack, "Anywhere");
                # (Line 387) }
                DoActions(Order("50 + 1n Battlecruiser", cp, "Anywhere", Attack, "Anywhere"))
                # (Line 389) f.SkillWait(cp, 80);
            EUDEndIf()
            f.SkillWait(cp, 80)
            # (Line 391) f.loop[cp] += 1;
            _ARRW(f.loop, cp).__iadd__(1)
            # (Line 393) if (f.loop[cp] == 10)
            if EUDIf()(f.loop[cp] == 10):
                # (Line 394) {
                # (Line 395) RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp);
                # (Line 397) f.NxNSquareShape(cp, 1, "Kakaru (Twilight)", 3, 75);
                DoActions(RemoveUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp))
                f.NxNSquareShape(cp, 1, "Kakaru (Twilight)", 3, 75)
                # (Line 398) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", cp);
                # (Line 400) f.Voice_Routine(cp, 20);
                DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", cp))
                f.Voice_Routine(cp, 20)
                # (Line 402) f.count[cp] += 1;
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 403) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 404) }
                # (Line 405) }
            EUDEndIf()
            # (Line 406) else if (f.count[cp] == 5) //10.70
        if EUDElseIf()(f.count[cp] == 5):
            # (Line 407) {
            # (Line 408) if (f.loop[cp] < 8)
            if EUDIf()(f.loop[cp] >= 8, neg=True):
                # (Line 409) {
                # (Line 410) if (f.loop[cp] % 2 == 0)
                if EUDIf()(f.loop[cp] % 2 == 0):
                    # (Line 411) {
                    # (Line 412) f.Table_Sin(cp, (dwrand() % 36 * 10), 100 + dwrand() % 100);
                    f.Table_Sin(cp, (f_dwrand() % 36 * 10), 100 + f_dwrand() % 100)
                    # (Line 413) f.Table_Cos(cp, (dwrand() % 36 * 10), 100 + dwrand() % 100);
                    f.Table_Cos(cp, (f_dwrand() % 36 * 10), 100 + f_dwrand() % 100)
                    # (Line 415) x = f.CosAngle[cp];
                    x << (f.CosAngle[cp])
                    # (Line 416) y = f.SinAngle[cp];
                    y << (f.SinAngle[cp])
                    # (Line 418) NxNSquareShapeAtDouble(cp, 1, "40 + 1n Gantrithor", 3, 50, x, y);
                    NxNSquareShapeAtDouble(cp, 1, "40 + 1n Gantrithor", 3, 50, x, y)
                    # (Line 419) NxNSquareShapeAtDouble(cp, 1, "50 + 1n Tank", 2, 75, x, y);
                    NxNSquareShapeAtDouble(cp, 1, "50 + 1n Tank", 2, 75, x, y)
                    # (Line 421) for (var i = 0; i < 8; i++)
                    i = EUDVariable()
                    i << (0)
                    if EUDWhile()(i >= 8, neg=True):
                        def _t48():
                            i.__iadd__(1)
                        # (Line 422) {
                        # (Line 423) f.MoveLoc("50 + 1n Tank", cp, 0, 0);
                        f.MoveLoc("50 + 1n Tank", cp, 0, 0)
                        # (Line 424) RemoveUnitAt(1, "50 + 1n Tank", "Anywhere", cp);
                        # (Line 425) MoveUnit(1, "60 + 1n Siege", cp, "[Skill]Unit_Wait_ALL", f.location[cp]);
                        DoActions(RemoveUnitAt(1, "50 + 1n Tank", "Anywhere", cp))
                        # (Line 426) }
                        DoActions(MoveUnit(1, "60 + 1n Siege", cp, "[Skill]Unit_Wait_ALL", f.location[cp]))
                        # (Line 427) }
                        EUDSetContinuePoint()
                        _t48()
                    EUDEndWhile()
                    # (Line 429) if (f.loop[cp] % 2 == 1)
                EUDEndIf()
                if EUDIf()(f.loop[cp] % 2 == 1):
                    # (Line 430) {
                    # (Line 431) f.Table_Sin(cp, (dwrand() % 36 * 10), 100 + dwrand() % 100);
                    f.Table_Sin(cp, (f_dwrand() % 36 * 10), 100 + f_dwrand() % 100)
                    # (Line 432) f.Table_Cos(cp, (dwrand() % 36 * 10), 100 + dwrand() % 100);
                    f.Table_Cos(cp, (f_dwrand() % 36 * 10), 100 + f_dwrand() % 100)
                    # (Line 434) x = f.CosAngle[cp];
                    x << (f.CosAngle[cp])
                    # (Line 435) y = f.SinAngle[cp];
                    y << (f.SinAngle[cp])
                    # (Line 437) NxNSquareShapeAtDouble(cp, 1, "50 + 1n Battlecruiser", 3, 50, x, y);
                    NxNSquareShapeAtDouble(cp, 1, "50 + 1n Battlecruiser", 3, 50, x, y)
                    # (Line 438) NxNSquareShapeAtDouble(cp, 1, "Protoss Reaver", 2, 75, x, y);
                    NxNSquareShapeAtDouble(cp, 1, "Protoss Reaver", 2, 75, x, y)
                    # (Line 440) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", cp);
                    # (Line 441) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp);
                    DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", cp))
                    # (Line 443) ModifyUnitHangarCount(1, All, "Protoss Reaver", CurrentPlayer, "Anywhere");
                    DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp))
                    # (Line 445) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
                    DoActions(ModifyUnitHangarCount(1, All, "Protoss Reaver", CurrentPlayer, "Anywhere"))
                    # (Line 446) MoveUnit(All, "Protoss Reaver", cp, "[Skill]Unit_Wait_ALL", f.location[cp]);
                    DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
                    # (Line 447) }
                    DoActions(MoveUnit(All, "Protoss Reaver", cp, "[Skill]Unit_Wait_ALL", f.location[cp]))
                    # (Line 448) }
                EUDEndIf()
                # (Line 450) f.SkillWait(cp, 80);
            EUDEndIf()
            f.SkillWait(cp, 80)
            # (Line 452) f.loop[cp] += 1;
            _ARRW(f.loop, cp).__iadd__(1)
            # (Line 454) if (f.loop[cp] == 18)
            if EUDIf()(f.loop[cp] == 18):
                # (Line 455) {
                # (Line 456) f.count[cp] += 1;
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 457) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 458) }
                # (Line 459) }
            EUDEndIf()
            # (Line 460) else if (f.count[cp] == 6)    //9.90
        if EUDElseIf()(f.count[cp] == 6):
            # (Line 461) {
            # (Line 462) KillUnitAt(All, "Protoss Reaver", "Anywhere", cp);
            # (Line 463) KillUnitAt(All, "60 + 1n Siege", "Anywhere", cp);
            DoActions(KillUnitAt(All, "Protoss Reaver", "Anywhere", cp))
            # (Line 465) f.SkillEnd(cp);
            DoActions(KillUnitAt(All, "60 + 1n Siege", "Anywhere", cp))
            f.SkillEnd(cp)
            # (Line 466) }
            # (Line 467) }
        EUDEndIf()
        # (Line 468) }
    EUDEndIf()
    # (Line 470) function NxNSquareShapeAt(cp : TrgPlayer, count, Unit : TrgUnit, n, interval, x, y)

# (Line 471) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None])
def NxNSquareShapeAt(cp, count, Unit, n, interval, x_1, y_1):
    # (Line 472) f.NxNSquareShapeAt(cp, count, Unit, n, interval, x, y);
    f.NxNSquareShapeAt(cp, count, Unit, n, interval, x_1, y_1)
    # (Line 473) f.NxNSquareShapeAt(cp, count, Unit, n, interval, -x, -y);
    f.NxNSquareShapeAt(cp, count, Unit, n, interval, -x_1, -y_1)
    # (Line 474) f.NxNSquareShapeAt(cp, count, Unit, n, interval, -y, x);
    f.NxNSquareShapeAt(cp, count, Unit, n, interval, -y_1, x_1)
    # (Line 475) f.NxNSquareShapeAt(cp, count, Unit, n, interval, y, -x);
    f.NxNSquareShapeAt(cp, count, Unit, n, interval, y_1, -x_1)
    # (Line 476) }
    # (Line 478) function NxNSquareShapeAtDouble(cp : TrgPlayer, count, Unit : TrgUnit, n, interval, x, y)

# (Line 479) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None, None, None, None])
def NxNSquareShapeAtDouble(cp, count, Unit, n, interval, x_1, y_1):
    # (Line 480) f.NxNSquareShapeAt(cp, count, Unit, n, interval, x, y);
    f.NxNSquareShapeAt(cp, count, Unit, n, interval, x_1, y_1)
    # (Line 481) f.NxNSquareShapeAt(cp, count, Unit, n, interval, -x, -y);
    f.NxNSquareShapeAt(cp, count, Unit, n, interval, -x_1, -y_1)
    # (Line 482) }
