## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Function as f;
import Function as f
# (Line 3) function Shape(cp : TrgPlayer, count, Unit : TrgUnit);
# (Line 4) function ShapeWithProperty(cp : TrgPlayer, count, Unit : TrgUnit, property);
# (Line 7) function main(cp)
# (Line 8) {
@EUDFunc
def f_main(cp):
    # (Line 9) f.BanReturn(cp);
    f.BanReturn(cp)
    # (Line 10) f.HoldPosition(cp);
    f.HoldPosition(cp)
    # (Line 12) MoveUnit(All, "60 + 1n High Templar", cp, "Anywhere", "[Skill]HoldPosition");
    # (Line 14) if (f.delay[cp] == 0)
    DoActions(MoveUnit(All, "60 + 1n High Templar", cp, "Anywhere", "[Skill]HoldPosition"))
    if EUDIf()(f.delay[cp] == 0):
        # (Line 15) {
        # (Line 16) if (f.count[cp] == 0)
        if EUDIf()(f.count[cp] == 0):
            # (Line 17) {
            # (Line 18) if (f.loop[cp] == 0)
            if EUDIf()(f.loop[cp] == 0):
                # (Line 19) {
                # (Line 20) Shape(cp, 1, "60 + 1n High Templar");
                Shape(cp, 1, "60 + 1n High Templar")
                # (Line 21) Shape(cp, 1, "60 + 1n Archon");
                Shape(cp, 1, "60 + 1n Archon")
                # (Line 22) ShapeWithProperty(cp, 1, "40 + 1n Gantrithor", 1);
                ShapeWithProperty(cp, 1, "40 + 1n Gantrithor", 1)
                # (Line 24) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", cp);
                # (Line 25) KillUnitAt(All, "60 + 1n Archon", "Anywhere", cp);
                DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", cp))
                # (Line 27) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
                DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", cp))
                # (Line 28) MoveUnit(All, "60 + 1n High Templar", cp, "[Skill]Unit_Wait_ALL", f.location[cp]);
                DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
                # (Line 29) Order("60 + 1n High Templar", cp, "Anywhere", Attack, f.location[cp]);
                DoActions(MoveUnit(All, "60 + 1n High Templar", cp, "[Skill]Unit_Wait_ALL", f.location[cp]))
                # (Line 30) }
                DoActions(Order("60 + 1n High Templar", cp, "Anywhere", Attack, f.location[cp]))
                # (Line 32) if (f.loop[cp] == 2)
            EUDEndIf()
            if EUDIf()(f.loop[cp] == 2):
                # (Line 33) {
                # (Line 34) KillUnitAt(All, "60 + 1n High Templar", "Anywhere", cp);
                # (Line 36) Shape(cp, 1, "40 + 1n Mojo");
                DoActions(KillUnitAt(All, "60 + 1n High Templar", "Anywhere", cp))
                Shape(cp, 1, "40 + 1n Mojo")
                # (Line 38) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
                # (Line 39) Order("40 + 1n Mojo", cp, "Anywhere", Attack, f.location[cp]);
                DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
                # (Line 40) }
                DoActions(Order("40 + 1n Mojo", cp, "Anywhere", Attack, f.location[cp]))
                # (Line 42) if (f.loop[cp] == 4)
            EUDEndIf()
            if EUDIf()(f.loop[cp] == 4):
                # (Line 43) {
                # (Line 44) RemoveUnitAt(All, "40 + 1n Mojo", "Anywhere", cp);
                # (Line 46) Shape(cp, 1, "60 + 1n Danimoth");
                DoActions(RemoveUnitAt(All, "40 + 1n Mojo", "Anywhere", cp))
                Shape(cp, 1, "60 + 1n Danimoth")
                # (Line 47) ShapeWithProperty(cp, 1, "40 + 1n Lurker", 0);
                ShapeWithProperty(cp, 1, "40 + 1n Lurker", 0)
                # (Line 49) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
                # (Line 50) MoveUnit(All, "40 + 1n Lurker", cp, "[Skill]Unit_Wait_ALL", f.location[cp]);
                DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
                # (Line 51) Order("60 + 1n Danimoth", cp, "Anywhere", Attack, f.location[cp]);
                DoActions(MoveUnit(All, "40 + 1n Lurker", cp, "[Skill]Unit_Wait_ALL", f.location[cp]))
                # (Line 52) }
                DoActions(Order("60 + 1n Danimoth", cp, "Anywhere", Attack, f.location[cp]))
                # (Line 54) if (f.loop[cp] == 8)
            EUDEndIf()
            if EUDIf()(f.loop[cp] == 8):
                # (Line 55) {
                # (Line 56) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp);
                # (Line 57) }
                DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp))
                # (Line 59) f.SkillWait(cp, 80);
            EUDEndIf()
            f.SkillWait(cp, 80)
            # (Line 61) f.loop[cp] += 1;
            _ARRW(f.loop, cp).__iadd__(1)
            # (Line 63) if (f.loop[cp] == 14)
            if EUDIf()(f.loop[cp] == 14):
                # (Line 64) {
                # (Line 65) f.count[cp] += 1;
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 66) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 67) }
                # (Line 68) }
            EUDEndIf()
            # (Line 69) else if (f.count[cp] == 1)
        if EUDElseIf()(f.count[cp] == 1):
            # (Line 70) {
            # (Line 71) f.MoveLoc("40 + 1n Lurker", cp, 0, 0);
            f.MoveLoc("40 + 1n Lurker", cp, 0, 0)
            # (Line 72) RemoveUnitAt(1, "40 + 1n Lurker", "Anywhere", cp);
            # (Line 73) f.SkillUnit(cp, 1, "60 + 1n Archon");
            DoActions(RemoveUnitAt(1, "40 + 1n Lurker", "Anywhere", cp))
            f.SkillUnit(cp, 1, "60 + 1n Archon")
            # (Line 74) f.SkillUnitWithProperty(cp, 1, "60 + 1n Danimoth", 1);
            f.SkillUnitWithProperty(cp, 1, "60 + 1n Danimoth", 1)
            # (Line 76) KillUnitAt(All, "60 + 1n Archon", "Anywhere", cp);
            # (Line 77) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp);
            DoActions(KillUnitAt(All, "60 + 1n Archon", "Anywhere", cp))
            # (Line 79) f.SkillWait(cp, 80);
            DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp))
            f.SkillWait(cp, 80)
            # (Line 81) f.loop[cp] += 1;
            _ARRW(f.loop, cp).__iadd__(1)
            # (Line 83) if (f.loop[cp] == 16)
            if EUDIf()(f.loop[cp] == 16):
                # (Line 84) {
                # (Line 85) f.count[cp] += 1;
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 86) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 87) }
                # (Line 88) }
            EUDEndIf()
            # (Line 89) else if (f.count[cp] == 2)
        if EUDElseIf()(f.count[cp] == 2):
            # (Line 90) {
            # (Line 91) f.SkillEnd(cp);
            f.SkillEnd(cp)
            # (Line 92) }
            # (Line 93) }
        EUDEndIf()
        # (Line 94) }
    EUDEndIf()
    # (Line 96) function Shape(cp : TrgPlayer, count, Unit : TrgUnit)

# (Line 97) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit])
def Shape(cp, count, Unit):
    # (Line 98) f.SquareShape(cp, count, Unit, 50, 0);
    f.SquareShape(cp, count, Unit, 50, 0)
    # (Line 99) f.SquareShape(cp, count, Unit, 100, 100);
    f.SquareShape(cp, count, Unit, 100, 100)
    # (Line 100) f.SquareShape(cp, count, Unit, 150, 0);
    f.SquareShape(cp, count, Unit, 150, 0)
    # (Line 101) f.SquareShape(cp, count, Unit, 50, 50);
    f.SquareShape(cp, count, Unit, 50, 50)
    # (Line 102) }
    # (Line 104) function ShapeWithProperty(cp : TrgPlayer, count, Unit : TrgUnit, property)

# (Line 105) {
@EUDTypedFunc([TrgPlayer, None, TrgUnit, None])
def ShapeWithProperty(cp, count, Unit, property):
    # (Line 106) f.SquareShapeWithProperty(cp, count, Unit, 50, 0, property);
    f.SquareShapeWithProperty(cp, count, Unit, 50, 0, property)
    # (Line 107) f.SquareShapeWithProperty(cp, count, Unit, 100, 100, property);
    f.SquareShapeWithProperty(cp, count, Unit, 100, 100, property)
    # (Line 108) f.SquareShapeWithProperty(cp, count, Unit, 150, 0, property);
    f.SquareShapeWithProperty(cp, count, Unit, 150, 0, property)
    # (Line 109) f.SquareShapeWithProperty(cp, count, Unit, 50, 50, property);
    f.SquareShapeWithProperty(cp, count, Unit, 50, 50, property)
    # (Line 110) }
