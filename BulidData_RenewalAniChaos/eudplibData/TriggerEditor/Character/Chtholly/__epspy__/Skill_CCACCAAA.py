## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Function as f;
import Function as f
# (Line 3) function main(cp)
# (Line 4) {
@EUDFunc
def f_main(cp):
    # (Line 5) f.BanReturn(cp);
    f.BanReturn(cp)
    # (Line 6) if (f.count[cp] < 7)
    if EUDIf()(f.count[cp] >= 7, neg=True):
        # (Line 7) {
        # (Line 8) f.HoldPosition(cp);
        f.HoldPosition(cp)
        # (Line 9) }
        # (Line 11) if (f.delay[cp] == 0)
    EUDEndIf()
    if EUDIf()(f.delay[cp] == 0):
        # (Line 12) {
        # (Line 13) if (f.count[cp] == 0 && f.loop[cp] <= 23)
        if EUDIf()(EUDSCAnd()(f.count[cp] == 0)(f.loop[cp] <= 23)()):
            # (Line 14) {
            # (Line 15) f.Table_Cos(cp, 15 * f.loop[cp], 160);
            f.Table_Cos(cp, 15 * f.loop[cp], 160)
            # (Line 16) f.Table_Sin(cp, 15 * f.loop[cp], 160);
            f.Table_Sin(cp, 15 * f.loop[cp], 160)
            # (Line 17) f.SquareShape(cp, 1, "40 + 1n Gantrithor", f.CosAngle[cp], f.SinAngle[cp]);
            f.SquareShape(cp, 1, "40 + 1n Gantrithor", f.CosAngle[cp], f.SinAngle[cp])
            # (Line 18) f.SquareShape(cp, 8, "Protoss Dark Templar", f.CosAngle[cp], f.SinAngle[cp]);
            f.SquareShape(cp, 8, "Protoss Dark Templar", f.CosAngle[cp], f.SinAngle[cp])
            # (Line 19) KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", cp);
            # (Line 20) KillUnitAt(All, "Protoss Dark Templar", "Anywhere", cp);
            DoActions(KillUnitAt(All, "40 + 1n Gantrithor", "Anywhere", cp))
            # (Line 21) f.SkillWait(cp, 0);
            DoActions(KillUnitAt(All, "Protoss Dark Templar", "Anywhere", cp))
            f.SkillWait(cp, 0)
            # (Line 22) f.loop[cp] += 1;
            _ARRW(f.loop, cp).__iadd__(1)
            # (Line 23) }
            # (Line 24) else if (f.count[cp] == 0 && f.loop[cp] == 24)
        if EUDElseIf()(EUDSCAnd()(f.count[cp] == 0)(f.loop[cp] == 24)()):
            # (Line 25) {
            # (Line 26) f.SkillWait(cp, 0);
            f.SkillWait(cp, 0)
            # (Line 27) f.count[cp] += 1;
            _ARRW(f.count, cp).__iadd__(1)
            # (Line 28) f.loop[cp] = 0;
            _ARRW(f.loop, cp) << (0)
            # (Line 29) }
            # (Line 30) else if (f.count[cp] == 1)
        if EUDElseIf()(f.count[cp] == 1):
            # (Line 31) {
            # (Line 32) f.SquareShape(cp, 1, "60 + 1n Siege", 192, 192);
            f.SquareShape(cp, 1, "60 + 1n Siege", 192, 192)
            # (Line 33) f.SquareShape(cp, 1, "60 + 1n Siege", 128, 192);
            f.SquareShape(cp, 1, "60 + 1n Siege", 128, 192)
            # (Line 34) f.SquareShape(cp, 1, "60 + 1n Siege", 192, 128);
            f.SquareShape(cp, 1, "60 + 1n Siege", 192, 128)
            # (Line 35) f.SquareShape(cp, 1, "60 + 1n Siege", 128, 128);
            f.SquareShape(cp, 1, "60 + 1n Siege", 128, 128)
            # (Line 36) f.SquareShape(cp, 1, "40 + 1n Mojo", 192, 192);
            f.SquareShape(cp, 1, "40 + 1n Mojo", 192, 192)
            # (Line 37) f.SquareShape(cp, 1, "40 + 1n Mojo", 128, 192);
            f.SquareShape(cp, 1, "40 + 1n Mojo", 128, 192)
            # (Line 38) f.SquareShape(cp, 1, "40 + 1n Mojo", 192, 128);
            f.SquareShape(cp, 1, "40 + 1n Mojo", 192, 128)
            # (Line 39) f.SquareShape(cp, 1, "40 + 1n Mojo", 128, 128);
            f.SquareShape(cp, 1, "40 + 1n Mojo", 128, 128)
            # (Line 40) f.SquareShape(cp, 1, "40 + 1n Mojo", 192, 64);
            f.SquareShape(cp, 1, "40 + 1n Mojo", 192, 64)
            # (Line 41) f.SquareShape(cp, 1, "40 + 1n Mojo", 64, 192);
            f.SquareShape(cp, 1, "40 + 1n Mojo", 64, 192)
            # (Line 42) f.SquareShape(cp, 1, "40 + 1n Mojo", 128, 64);
            f.SquareShape(cp, 1, "40 + 1n Mojo", 128, 64)
            # (Line 43) f.SquareShape(cp, 1, "40 + 1n Mojo", 64, 128);
            f.SquareShape(cp, 1, "40 + 1n Mojo", 64, 128)
            # (Line 44) f.count[cp] += 1;
            _ARRW(f.count, cp).__iadd__(1)
            # (Line 45) }
            # (Line 46) else if (f.count[cp] == 2)
        if EUDElseIf()(f.count[cp] == 2):
            # (Line 47) {
            # (Line 48) f.SquareShape(cp, 1, "40 + 1n Marine", 128, 32);
            f.SquareShape(cp, 1, "40 + 1n Marine", 128, 32)
            # (Line 49) f.SquareShape(cp, 1, "40 + 1n Marine", 32, 128);
            f.SquareShape(cp, 1, "40 + 1n Marine", 32, 128)
            # (Line 50) f.SquareShape(cp, 1, "40 + 1n Marine", 128, 64);
            f.SquareShape(cp, 1, "40 + 1n Marine", 128, 64)
            # (Line 51) f.SquareShape(cp, 1, "40 + 1n Marine", 64, 128);
            f.SquareShape(cp, 1, "40 + 1n Marine", 64, 128)
            # (Line 52) f.SquareShape(cp, 1, "60 + 1n Danimoth", 96, 96);
            f.SquareShape(cp, 1, "60 + 1n Danimoth", 96, 96)
            # (Line 53) f.SquareShape(cp, 1, "60 + 1n Danimoth", 160, 96);
            f.SquareShape(cp, 1, "60 + 1n Danimoth", 160, 96)
            # (Line 54) f.SquareShape(cp, 1, "60 + 1n Danimoth", 96, 160);
            f.SquareShape(cp, 1, "60 + 1n Danimoth", 96, 160)
            # (Line 55) f.SquareShape(cp, 1, "60 + 1n Danimoth", 160, 160);
            f.SquareShape(cp, 1, "60 + 1n Danimoth", 160, 160)
            # (Line 56) f.SquareShape(cp, 1, "40 + 1n Firebat", 64, 64);
            f.SquareShape(cp, 1, "40 + 1n Firebat", 64, 64)
            # (Line 57) f.SquareShape(cp, 1, "40 + 1n Firebat", 64, 0);
            f.SquareShape(cp, 1, "40 + 1n Firebat", 64, 0)
            # (Line 58) f.MoveLoc(f.heroID[cp], cp, 0, 0);
            f.MoveLoc(f.heroID[cp], cp, 0, 0)
            # (Line 59) Order("40 + 1n Marine", cp, "Anywhere", Attack, f.location[cp]);
            # (Line 60) Order("40 + 1n Firebat", cp, "Anywhere", Attack, f.location[cp]);
            DoActions(Order("40 + 1n Marine", cp, "Anywhere", Attack, f.location[cp]))
            # (Line 61) Order("40 + 1n Mojo", cp, "Anywhere", Attack, f.location[cp]);
            DoActions(Order("40 + 1n Firebat", cp, "Anywhere", Attack, f.location[cp]))
            # (Line 62) Order("60 + 1n Danimoth", cp, "Anywhere", Attack, f.location[cp]);
            DoActions(Order("40 + 1n Mojo", cp, "Anywhere", Attack, f.location[cp]))
            # (Line 63) f.SkillWait(cp, 0);
            DoActions(Order("60 + 1n Danimoth", cp, "Anywhere", Attack, f.location[cp]))
            f.SkillWait(cp, 0)
            # (Line 64) f.Voice_Routine(cp, 6);
            f.Voice_Routine(cp, 6)
            # (Line 65) f.count[cp] += 1;
            _ARRW(f.count, cp).__iadd__(1)
            # (Line 66) }
            # (Line 67) else if (f.count[cp] == 3 && f.loop[cp] <= 24)
        if EUDElseIf()(EUDSCAnd()(f.count[cp] == 3)(f.loop[cp] <= 24)()):
            # (Line 68) {
            # (Line 69) f.Table_Cos(cp, 15 * f.loop[cp], 224);
            f.Table_Cos(cp, 15 * f.loop[cp], 224)
            # (Line 70) f.Table_Sin(cp, 15 * f.loop[cp], 224);
            f.Table_Sin(cp, 15 * f.loop[cp], 224)
            # (Line 71) f.SquareShape(cp, 1, "50 + 1n Battlecruiser", f.CosAngle[cp], f.SinAngle[cp]);
            f.SquareShape(cp, 1, "50 + 1n Battlecruiser", f.CosAngle[cp], f.SinAngle[cp])
            # (Line 72) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp);
            # (Line 73) f.SkillWait(cp, 0);
            DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp))
            f.SkillWait(cp, 0)
            # (Line 74) f.loop[cp] += 1;
            _ARRW(f.loop, cp).__iadd__(1)
            # (Line 75) }
            # (Line 76) else if (f.count[cp] == 3 && f.loop[cp] == 25)
        if EUDElseIf()(EUDSCAnd()(f.count[cp] == 3)(f.loop[cp] == 25)()):
            # (Line 77) {
            # (Line 78) f.SkillWait(cp, 500);
            f.SkillWait(cp, 500)
            # (Line 79) f.count[cp] += 1;
            _ARRW(f.count, cp).__iadd__(1)
            # (Line 80) f.loop[cp] = 0;
            _ARRW(f.loop, cp) << (0)
            # (Line 81) }
            # (Line 82) else if (f.count[cp] == 4)
        if EUDElseIf()(f.count[cp] == 4):
            # (Line 83) {
            # (Line 84) KillUnitAt(All, "40 + 1n Marine", "Anywhere", cp);
            # (Line 85) KillUnitAt(All, "40 + 1n Firebat", "Anywhere", cp);
            DoActions(KillUnitAt(All, "40 + 1n Marine", "Anywhere", cp))
            # (Line 86) f.SkillWait(cp, 2000);
            DoActions(KillUnitAt(All, "40 + 1n Firebat", "Anywhere", cp))
            f.SkillWait(cp, 2000)
            # (Line 87) f.count[cp] += 1;
            _ARRW(f.count, cp).__iadd__(1)
            # (Line 88) }
            # (Line 89) else if (f.count[cp] == 5)
        if EUDElseIf()(f.count[cp] == 5):
            # (Line 90) {
            # (Line 91) f.Voice_Routine(cp, 7);
            f.Voice_Routine(cp, 7)
            # (Line 92) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp);
            # (Line 93) f.SkillWait(cp, 5000);
            DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp))
            f.SkillWait(cp, 5000)
            # (Line 94) f.count[cp] += 1;
            _ARRW(f.count, cp).__iadd__(1)
            # (Line 95) }
            # (Line 96) else if (f.count[cp] == 6)
        if EUDElseIf()(f.count[cp] == 6):
            # (Line 97) {
            # (Line 98) f.Voice_Routine(cp, 8);
            f.Voice_Routine(cp, 8)
            # (Line 99) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp);
            # (Line 100) f.SkillWait(cp, 2500);
            DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp))
            f.SkillWait(cp, 2500)
            # (Line 101) f.count[cp] += 1;
            _ARRW(f.count, cp).__iadd__(1)
            # (Line 102) }
            # (Line 103) else if (f.count[cp] == 7)
        if EUDElseIf()(f.count[cp] == 7):
            # (Line 104) {
            # (Line 105) f.Voice_Routine(cp, 8);
            f.Voice_Routine(cp, 8)
            # (Line 106) KillUnitAt(All, "60 + 1n Siege", "Anywhere", cp);
            # (Line 107) f.SkillWait(cp, 0);
            DoActions(KillUnitAt(All, "60 + 1n Siege", "Anywhere", cp))
            f.SkillWait(cp, 0)
            # (Line 108) f.count[cp] += 1;
            _ARRW(f.count, cp).__iadd__(1)
            # (Line 109) }
            # (Line 110) else if (f.count[cp] == 8
        _t13 = EUDElseIf()
        # (Line 111) && Bring(cp, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill")
        # (Line 112) && Deaths(cp, AtLeast, f.UltimateA[cp], " `UltimateCoolTime"))
        if _t13(EUDSCAnd()(f.count[cp] == 8)(Bring(cp, AtLeast, 1, "Protoss Corsair", "[Skill]UseSkill"))(Deaths(cp, AtLeast, f.UltimateA[cp], " `UltimateCoolTime"))()):
            # (Line 113) {
            # (Line 114) if (Switch("UiltimateSwitch", Cleared))
            if EUDIf()(Switch("UiltimateSwitch", Cleared)):
                # (Line 115) {
                # (Line 116) f.Voice_Routine(cp, 11);
                f.Voice_Routine(cp, 11)
                # (Line 117) SetSwitch("UiltimateSwitch", Set);
                # (Line 118) f.step[cp] = 240;
                DoActions(SetSwitch("UiltimateSwitch", Set))
                _ARRW(f.step, cp) << (240)
                # (Line 119) f.count[cp] = 0;
                _ARRW(f.count, cp) << (0)
                # (Line 120) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 121) SetDeaths(cp, Subtract, f.UltimateA[cp], " `UltimateCoolTime");
                # (Line 122) KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", cp);
                DoActions(SetDeaths(cp, Subtract, f.UltimateA[cp], " `UltimateCoolTime"))
                # (Line 123) SetSwitch("Recall - Chtholly", Set);
                DoActions(KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", cp))
                # (Line 124) }
                DoActions(SetSwitch("Recall - Chtholly", Set))
                # (Line 125) else
                # (Line 126) {
            if EUDElse()():
                # (Line 127) SetResources(CurrentPlayer, Add, 60, Gas);
                # (Line 128) KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", cp);
                DoActions(SetResources(CurrentPlayer, Add, 60, Gas))
                # (Line 129) SetDeaths(CurrentPlayer, SetTo, 999, " `SYSTEMTEXT");
                DoActions(KillUnitAt(1, "Protoss Corsair", "[Skill]UseSkill", cp))
                # (Line 130) f.SkillEnd(cp);
                DoActions(SetDeaths(CurrentPlayer, SetTo, 999, " `SYSTEMTEXT"))
                f.SkillEnd(cp)
                # (Line 131) }
                # (Line 132) }
            EUDEndIf()
            # (Line 133) else if (f.count[cp] == 8)
        if EUDElseIf()(f.count[cp] == 8):
            # (Line 134) {
            # (Line 135) f.SkillEnd(cp);
            f.SkillEnd(cp)
            # (Line 136) }
            # (Line 137) }
        EUDEndIf()
        # (Line 138) }
    EUDEndIf()
