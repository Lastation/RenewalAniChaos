## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import Function as f;
import Function as f
# (Line 5) import Character.Chtholly.Skill_S as S;
from Character.Chtholly import Skill_S as S
# (Line 6) import Character.Chtholly.Skill_C as C;
from Character.Chtholly import Skill_C as C
# (Line 7) import Character.Chtholly.Skill_A as A;
from Character.Chtholly import Skill_A as A
# (Line 9) import Character.Chtholly.Skill_SSS as SSS;
from Character.Chtholly import Skill_SSS as SSS
# (Line 10) import Character.Chtholly.Skill_CCA as CCA;
from Character.Chtholly import Skill_CCA as CCA
# (Line 11) import Character.Chtholly.Skill_CCACC as CCACC;
from Character.Chtholly import Skill_CCACC as CCACC
# (Line 12) import Character.Chtholly.Skill_CCACCAAA as CCACCAAA;
from Character.Chtholly import Skill_CCACCAAA as CCACCAAA
# (Line 13) import Character.Chtholly.Skill_Uiltimate as Uiltimate;
from Character.Chtholly import Skill_Uiltimate as Uiltimate
# (Line 15) import Character.Chtholly.Text as text;
from Character.Chtholly import Text as text
# (Line 16) import Character.Chtholly.Commend as commend;
from Character.Chtholly import Commend as commend
# (Line 18) function SkillList(cp);
# (Line 20) function main(cp)
# (Line 21) {
@EUDFunc
def f_main(cp):
    # (Line 22) f.location[cp] = 117;
    _ARRW(f.location, cp) << (117)
    # (Line 23) f.heroID[cp] = 77;
    _ARRW(f.heroID, cp) << (77)
    # (Line 25) f.UltimateA[cp] = 700;
    _ARRW(f.UltimateA, cp) << (700)
    # (Line 26) f.UltimateB[cp] = 700;
    _ARRW(f.UltimateB, cp) << (700)
    # (Line 29) commend.main(cp);
    commend.f_main(cp)
    # (Line 30) SkillList(cp);
    SkillList(cp)
    # (Line 32) if (f.wait[cp] == 0)
    if EUDIf()(f.wait[cp] == 0):
        # (Line 33) {
        # (Line 34) switch(f.step[cp])
        EUDSwitch(f.step[cp])
        # (Line 35) {
        # (Line 36) case 1:
        _t2 = EUDSwitchCase()
        # (Line 38) break;
        if _t2(1):
            EUDBreak()
            # (Line 39) case 100:
        _t3 = EUDSwitchCase()
        # (Line 40) S.main(cp);
        if _t3(100):
            S.f_main(cp)
            # (Line 41) break;
            EUDBreak()
            # (Line 42) case 110:
        _t4 = EUDSwitchCase()
        # (Line 43) SSS.main(cp);
        if _t4(110):
            SSS.f_main(cp)
            # (Line 44) break;
            EUDBreak()
            # (Line 45) case 200:
        _t5 = EUDSwitchCase()
        # (Line 46) C.main(cp);
        if _t5(200):
            C.f_main(cp)
            # (Line 47) break;
            EUDBreak()
            # (Line 48) case 210:
        _t6 = EUDSwitchCase()
        # (Line 49) CCA.main(cp);
        if _t6(210):
            CCA.f_main(cp)
            # (Line 50) break;
            EUDBreak()
            # (Line 51) case 220:
        _t7 = EUDSwitchCase()
        # (Line 52) CCACC.main(cp);
        if _t7(220):
            CCACC.f_main(cp)
            # (Line 53) break;
            EUDBreak()
            # (Line 54) case 230:
        _t8 = EUDSwitchCase()
        # (Line 55) CCACCAAA.main(cp);
        if _t8(230):
            CCACCAAA.f_main(cp)
            # (Line 56) break;
            EUDBreak()
            # (Line 57) case 240:
        _t9 = EUDSwitchCase()
        # (Line 58) Uiltimate.main(cp);
        if _t9(240):
            Uiltimate.f_main(cp)
            # (Line 59) break;
            EUDBreak()
            # (Line 60) case 300:
        _t10 = EUDSwitchCase()
        # (Line 61) A.main(cp);
        if _t10(300):
            A.f_main(cp)
            # (Line 62) break;
            EUDBreak()
            # (Line 63) }
        # (Line 64) }
        EUDEndSwitch()
        # (Line 66) }
    EUDEndIf()
    # (Line 69) function SkillVoice(cp)

# (Line 70) {
@EUDFunc
def SkillVoice(cp):
    # (Line 71) if (f.Chtholly_Voice[cp] != 0) { text.main(cp); }
    if EUDIf()(f.Chtholly_Voice[cp] == 0, neg=True):
        text.f_main(cp)
        # (Line 72) }
    EUDEndIf()
    # (Line 74) function SkillList(cp)

# (Line 75) {
@EUDFunc
def SkillList(cp):
    # (Line 76) if(Memory(0x00596A44, Exactly, 256)) 	// Insert key Pressed
    if EUDIf()(Memory(0x00596A44, Exactly, 256)):
        # (Line 77) {
        # (Line 78) f.stb.printAt(0, "\n");
        f.stb.printAt(0, "\n")
        # (Line 79) f.stb.printAt(1, "\x1F　＃\x04- 크톨리 \x1B노타 세니오리스　\x04[ 종말에 뭐 하세요? 바쁘세요? 구해 주실 수 있나요? ]");
        f.stb.printAt(1, "\x1F　＃\x04- 크톨리 \x1B노타 세니오리스　\x04[ 종말에 뭐 하세요? 바쁘세요? 구해 주실 수 있나요? ]")
        # (Line 80) f.stb.printAt(2, "　　\x1FA\x04ction List\r\n　　　\x07O \x19 전투속행 ON/OFF [ 침식 도중 사망시 5초간 전투 속행 ] \x05개인쿨 4분");
        f.stb.printAt(2, "　　\x1FA\x04ction List\r\n　　　\x07O \x19 전투속행 ON/OFF [ 침식 도중 사망시 5초간 전투 속행 ] \x05개인쿨 4분")
        # (Line 81) f.stb.printAt(3, "　　　\x1FSSS \x04어쩔수 없지;; \x19[ 공성 ]");
        f.stb.printAt(3, "　　　\x1FSSS \x04어쩔수 없지;; \x19[ 공성 ]")
        # (Line 82) f.stb.printAt(4, "　　　\x1FCCA + CC + AAA \x04침식 \x19[ 공성 / AAA - 자리고정 / 귀환봉인 ] \x1F[1]");
        f.stb.printAt(4, "　　　\x1FCCA + CC + AAA \x04침식 \x19[ 공성 / AAA - 자리고정 / 귀환봉인 ] \x1F[1]")
        # (Line 83) f.stb.printAt(5, "\n");
        f.stb.printAt(5, "\n")
        # (Line 84) f.stb.printAt(6, "　　　\x1F[1] + \x08O \x04세상에서 가장 행복한 여자 \x19[ 공성 / 선딜 4.5초 / 장판형 / 쉴드 10고정 ] \x05", f.UltimateA[cp]);
        f.stb.printAt(6, "　　　\x1F[1] + \x08O \x04세상에서 가장 행복한 여자 \x19[ 공성 / 선딜 4.5초 / 장판형 / 쉴드 10고정 ] \x05", f.UltimateA[cp])
        # (Line 85) f.stb.printAt(7, "　　　\x08AAAA \x04세상에서 가장 행복한 여자 \x19[ 공성 / 선딜 4.5초 / 장판형 / 쉴드 10고정 ] \x05", f.UltimateB[cp]);
        f.stb.printAt(7, "　　　\x08AAAA \x04세상에서 가장 행복한 여자 \x19[ 공성 / 선딜 4.5초 / 장판형 / 쉴드 10고정 ] \x05", f.UltimateB[cp])
        # (Line 86) f.stb.printAt(8, "　　　\x04 * \x19AAAA\x04사용시 \x19O\x04 사용시보다 데미지가 많이 약해집니다.");
        f.stb.printAt(8, "　　　\x04 * \x19AAAA\x04사용시 \x19O\x04 사용시보다 데미지가 많이 약해집니다.")
        # (Line 87) f.stb.printAt(9, "\n");
        f.stb.printAt(9, "\n")
        # (Line 88) PlayWAV("sound\\Bullet\\LaserHit.wav");
        # (Line 89) }
        DoActions(PlayWAV("sound\\Bullet\\LaserHit.wav"))
        # (Line 90) }
    EUDEndIf()
