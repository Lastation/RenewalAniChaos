## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import Function as f;
import Function as f
# (Line 4) function Shape(cp, UnitA : TrgUnit, UnitB : TrgUnit, x, y);
# (Line 6) function main(cp)
# (Line 7) {
@EUDFunc
def f_main(cp):
    # (Line 8) if (f.delay[cp] == 0)
    if EUDIf()(f.delay[cp] == 0):
        # (Line 9) {
        # (Line 10) if (f.count[cp] == 0)
        if EUDIf()(f.count[cp] == 0):
            # (Line 11) {
            # (Line 12) f.DotShape(cp, 1, "60 + 1n Danimoth", 0, 0);
            f.DotShape(cp, 1, "60 + 1n Danimoth", 0, 0)
            # (Line 13) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp);
            # (Line 14) f.SkillWait(cp, 0);
            DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp))
            f.SkillWait(cp, 0)
            # (Line 15) f.count[cp] += 1;
            _ARRW(f.count, cp).__iadd__(1)
            # (Line 16) }
            # (Line 17) else if (f.count[cp] == 1)
        if EUDElseIf()(f.count[cp] == 1):
            # (Line 18) {
            # (Line 19) f.NxNSquareShape(cp, 1, "60 + 1n Danimoth", 3, 64);
            f.NxNSquareShape(cp, 1, "60 + 1n Danimoth", 3, 64)
            # (Line 20) KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp);
            # (Line 21) f.SkillWait(cp, 0);
            DoActions(KillUnitAt(All, "60 + 1n Danimoth", "Anywhere", cp))
            f.SkillWait(cp, 0)
            # (Line 22) f.count[cp] += 1;
            _ARRW(f.count, cp).__iadd__(1)
            # (Line 23) }
            # (Line 24) else if (f.count[cp] == 2)
        if EUDElseIf()(f.count[cp] == 2):
            # (Line 25) {
            # (Line 26) if (f.loop[cp] == 0)
            if EUDIf()(f.loop[cp] == 0):
                # (Line 27) {
                # (Line 28) f.SquareShape(cp, 1, "50 + 1n Tank", 128, 64);
                f.SquareShape(cp, 1, "50 + 1n Tank", 128, 64)
                # (Line 29) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
                # (Line 30) Order("50 + 1n Tank", cp, "Anywhere", Attack, f.location[cp]);
                DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
                # (Line 31) f.SkillWait(cp, 0);
                DoActions(Order("50 + 1n Tank", cp, "Anywhere", Attack, f.location[cp]))
                f.SkillWait(cp, 0)
                # (Line 32) f.loop[cp] += 1;
                _ARRW(f.loop, cp).__iadd__(1)
                # (Line 33) }
                # (Line 34) else if (f.loop[cp] == 1)
            if EUDElseIf()(f.loop[cp] == 1):
                # (Line 35) {
                # (Line 36) f.SquareShape(cp, 1, "50 + 1n Tank", 64, 128);
                f.SquareShape(cp, 1, "50 + 1n Tank", 64, 128)
                # (Line 37) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
                # (Line 38) Order("50 + 1n Tank", cp, "Anywhere", Attack, f.location[cp]);
                DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
                # (Line 39) f.SkillWait(cp, 0);
                DoActions(Order("50 + 1n Tank", cp, "Anywhere", Attack, f.location[cp]))
                f.SkillWait(cp, 0)
                # (Line 40) f.loop[cp] += 1;
                _ARRW(f.loop, cp).__iadd__(1)
                # (Line 41) }
                # (Line 42) else if (f.loop[cp] == 2)
            if EUDElseIf()(f.loop[cp] == 2):
                # (Line 43) {
                # (Line 44) f.SquareShape(cp, 1, "40 + 1n Goliath", 64, 64);
                f.SquareShape(cp, 1, "40 + 1n Goliath", 64, 64)
                # (Line 45) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
                # (Line 46) Order("40 + 1n Goliath", cp, "Anywhere", Attack, f.location[cp]);
                DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
                # (Line 47) f.SkillWait(cp, 1000);
                DoActions(Order("40 + 1n Goliath", cp, "Anywhere", Attack, f.location[cp]))
                f.SkillWait(cp, 1000)
                # (Line 48) f.loop[cp] += 1;
                _ARRW(f.loop, cp).__iadd__(1)
                # (Line 49) }
                # (Line 50) else if (f.loop[cp] == 3)
            if EUDElseIf()(f.loop[cp] == 3):
                # (Line 51) {
                # (Line 52) f.count[cp] += 1;
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 53) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 54) }
                # (Line 55) }
            EUDEndIf()
            # (Line 56) else if (f.count[cp] == 3)
        if EUDElseIf()(f.count[cp] == 3):
            # (Line 57) {
            # (Line 58) if (f.loop[cp] == 0)
            if EUDIf()(f.loop[cp] == 0):
                # (Line 59) {
                # (Line 60) Shape(cp, "40 + 1n Mojo", "Protoss Dark Archon", 96, 32);
                Shape(cp, "40 + 1n Mojo", "Protoss Dark Archon", 96, 32)
                # (Line 61) f.SkillWait(cp, 50);
                f.SkillWait(cp, 50)
                # (Line 62) f.loop[cp] += 1;
                _ARRW(f.loop, cp).__iadd__(1)
                # (Line 63) }
                # (Line 64) else if (f.loop[cp] == 1)
            if EUDElseIf()(f.loop[cp] == 1):
                # (Line 65) {
                # (Line 66) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp);
                # (Line 67) Shape(cp, "40 + 1n Mojo", "Protoss Dark Archon", 32, 32);
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp))
                Shape(cp, "40 + 1n Mojo", "Protoss Dark Archon", 32, 32)
                # (Line 68) f.SkillWait(cp, 50);
                f.SkillWait(cp, 50)
                # (Line 69) f.loop[cp] += 1;
                _ARRW(f.loop, cp).__iadd__(1)
                # (Line 70) }
                # (Line 71) else if (f.loop[cp] == 2)
            if EUDElseIf()(f.loop[cp] == 2):
                # (Line 72) {
                # (Line 73) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp);
                # (Line 74) Shape(cp, "40 + 1n Mojo", "Protoss Dark Archon", -32, 32);
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp))
                Shape(cp, "40 + 1n Mojo", "Protoss Dark Archon", -32, 32)
                # (Line 75) f.SkillWait(cp, 50);
                f.SkillWait(cp, 50)
                # (Line 76) f.loop[cp] += 1;
                _ARRW(f.loop, cp).__iadd__(1)
                # (Line 77) }
                # (Line 78) else if (f.loop[cp] == 3)
            if EUDElseIf()(f.loop[cp] == 3):
                # (Line 79) {
                # (Line 80) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp);
                # (Line 81) Shape(cp, "40 + 1n Mojo", "Protoss Dark Archon", -96, 32);
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp))
                Shape(cp, "40 + 1n Mojo", "Protoss Dark Archon", -96, 32)
                # (Line 82) f.SkillWait(cp, 50);
                f.SkillWait(cp, 50)
                # (Line 83) f.loop[cp] += 1;
                _ARRW(f.loop, cp).__iadd__(1)
                # (Line 84) }
                # (Line 85) else if (f.loop[cp] == 4)
            if EUDElseIf()(f.loop[cp] == 4):
                # (Line 86) {
                # (Line 87) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp);
                # (Line 88) KillUnitAt(All, "50 + 1n Tank", "Anywhere", cp);
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp))
                # (Line 89) KillUnitAt(All, "40 + 1n Goliath", "Anywhere", cp);
                DoActions(KillUnitAt(All, "50 + 1n Tank", "Anywhere", cp))
                # (Line 90) f.SkillEnd(cp);
                DoActions(KillUnitAt(All, "40 + 1n Goliath", "Anywhere", cp))
                f.SkillEnd(cp)
                # (Line 91) }
                # (Line 92) }
            EUDEndIf()
            # (Line 93) }
        EUDEndIf()
        # (Line 95) if (f.delayB[cp] == 0)
    EUDEndIf()
    if EUDIf()(f.delayB[cp] == 0):
        # (Line 96) {
        # (Line 97) if (f.count[cp] == 2)
        if EUDIf()(f.count[cp] == 2):
            # (Line 98) {
            # (Line 99) if (f.loopB[cp] == 0)
            if EUDIf()(f.loopB[cp] == 0):
                # (Line 100) {
                # (Line 101) f.Table_Cos(cp, 45, 128);
                f.Table_Cos(cp, 45, 128)
                # (Line 102) f.Table_Sin(cp, 45, 128);
                f.Table_Sin(cp, 45, 128)
                # (Line 104) f.SquareShape(cp, 1, "40 + 1n Mojo", 128, 128);
                f.SquareShape(cp, 1, "40 + 1n Mojo", 128, 128)
                # (Line 105) f.SquareShape(cp, 1, "40 + 1n Wraith", f.CosAngle[cp] + f.SinAngle[cp], -f.SinAngle[cp] + f.CosAngle[cp]);
                f.SquareShape(cp, 1, "40 + 1n Wraith", f.CosAngle[cp] + f.SinAngle[cp], -f.SinAngle[cp] + f.CosAngle[cp])
                # (Line 106) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp);
                # (Line 107) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", cp);
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp))
                # (Line 108) f.SkillWaitB(cp, 0);
                DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", cp))
                f.SkillWaitB(cp, 0)
                # (Line 109) f.loopB[cp] += 1;
                _ARRW(f.loopB, cp).__iadd__(1)
                # (Line 110) }
                # (Line 111) else if (f.loopB[cp] == 1)
            if EUDElseIf()(f.loopB[cp] == 1):
                # (Line 112) {
                # (Line 113) f.Table_Cos(cp, 45, 128);
                f.Table_Cos(cp, 45, 128)
                # (Line 114) f.Table_Sin(cp, 45, 64);
                f.Table_Sin(cp, 45, 64)
                # (Line 116) f.SquareShape(cp, 1, "40 + 1n Mojo", 128, 64);
                f.SquareShape(cp, 1, "40 + 1n Mojo", 128, 64)
                # (Line 117) f.SquareShape(cp, 1, "40 + 1n Wraith", f.CosAngle[cp] + f.SinAngle[cp], -f.SinAngle[cp] + f.CosAngle[cp]);
                f.SquareShape(cp, 1, "40 + 1n Wraith", f.CosAngle[cp] + f.SinAngle[cp], -f.SinAngle[cp] + f.CosAngle[cp])
                # (Line 118) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp);
                # (Line 119) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", cp);
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp))
                # (Line 120) f.SkillWaitB(cp, 0);
                DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", cp))
                f.SkillWaitB(cp, 0)
                # (Line 121) f.loopB[cp] += 1;
                _ARRW(f.loopB, cp).__iadd__(1)
                # (Line 122) }
                # (Line 123) else if (f.loopB[cp] == 2)
            if EUDElseIf()(f.loopB[cp] == 2):
                # (Line 124) {
                # (Line 125) f.Table_Cos(cp, 45, 128);
                f.Table_Cos(cp, 45, 128)
                # (Line 126) f.Table_Sin(cp, 45, 0);
                f.Table_Sin(cp, 45, 0)
                # (Line 128) f.SquareShape(cp, 1, "40 + 1n Mojo", 128, 0);
                f.SquareShape(cp, 1, "40 + 1n Mojo", 128, 0)
                # (Line 129) f.SquareShape(cp, 1, "40 + 1n Wraith", f.CosAngle[cp] + f.SinAngle[cp], -f.SinAngle[cp] + f.CosAngle[cp]);
                f.SquareShape(cp, 1, "40 + 1n Wraith", f.CosAngle[cp] + f.SinAngle[cp], -f.SinAngle[cp] + f.CosAngle[cp])
                # (Line 130) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp);
                # (Line 131) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", cp);
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp))
                # (Line 132) f.SkillWaitB(cp, 0);
                DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", cp))
                f.SkillWaitB(cp, 0)
                # (Line 133) f.loopB[cp] += 1;
                _ARRW(f.loopB, cp).__iadd__(1)
                # (Line 134) }
                # (Line 135) else if (f.loopB[cp] == 3)
            if EUDElseIf()(f.loopB[cp] == 3):
                # (Line 136) {
                # (Line 137) f.Table_Cos(cp, 45, 64);
                f.Table_Cos(cp, 45, 64)
                # (Line 138) f.Table_Sin(cp, 45, 128);
                f.Table_Sin(cp, 45, 128)
                # (Line 140) f.SquareShape(cp, 1, "40 + 1n Mojo", 128, -64);
                f.SquareShape(cp, 1, "40 + 1n Mojo", 128, -64)
                # (Line 141) f.SquareShape(cp, 1, "40 + 1n Wraith", f.CosAngle[cp] + f.SinAngle[cp], -f.SinAngle[cp] + f.CosAngle[cp]);
                f.SquareShape(cp, 1, "40 + 1n Wraith", f.CosAngle[cp] + f.SinAngle[cp], -f.SinAngle[cp] + f.CosAngle[cp])
                # (Line 142) KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp);
                # (Line 143) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", cp);
                DoActions(KillUnitAt(All, "40 + 1n Mojo", "Anywhere", cp))
                # (Line 144) f.SkillWaitB(cp, 0);
                DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", cp))
                f.SkillWaitB(cp, 0)
                # (Line 145) f.loopB[cp] = 0;
                _ARRW(f.loopB, cp) << (0)
                # (Line 146) }
                # (Line 147) }
            EUDEndIf()
            # (Line 148) }
        EUDEndIf()
        # (Line 149) }
    EUDEndIf()
    # (Line 151) function Shape(cp, UnitA : TrgUnit, UnitB : TrgUnit, x, y)

# (Line 152) {
@EUDTypedFunc([None, TrgUnit, TrgUnit, None, None])
def Shape(cp, UnitA, UnitB, x, y):
    # (Line 153) f.MoveLoc(f.heroID[cp], cp, x, y);
    f.MoveLoc(f.heroID[cp], cp, x, y)
    # (Line 154) f.SkillUnit(cp, 1, UnitA);
    f.SkillUnit(cp, 1, UnitA)
    # (Line 155) f.SkillUnit(cp, 1, UnitB);
    f.SkillUnit(cp, 1, UnitB)
    # (Line 156) f.MoveLoc(f.heroID[cp], cp, -x, -y);
    f.MoveLoc(f.heroID[cp], cp, -x, -y)
    # (Line 157) f.SkillUnit(cp, 1, UnitA);
    f.SkillUnit(cp, 1, UnitA)
    # (Line 158) f.SkillUnit(cp, 1, UnitB);
    f.SkillUnit(cp, 1, UnitB)
    # (Line 159) KillUnitAt(All, UnitB, "Anywhere", cp);
    # (Line 160) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
    DoActions(KillUnitAt(All, UnitB, "Anywhere", cp))
    # (Line 161) Order(UnitA, cp, "Anywhere", Attack, f.location[cp]);
    DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
    # (Line 162) }
    DoActions(Order(UnitA, cp, "Anywhere", Attack, f.location[cp]))
