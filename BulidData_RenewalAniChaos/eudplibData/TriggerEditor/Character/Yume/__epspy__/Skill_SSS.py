## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import Function as f;
import Function as f
# (Line 4) function main(cp)
# (Line 5) {
@EUDFunc
def f_main(cp):
    # (Line 6) if (f.delay[cp] == 0)
    if EUDIf()(f.delay[cp] == 0):
        # (Line 7) {
        # (Line 8) if (f.count[cp] == 0)
        if EUDIf()(f.count[cp] == 0):
            # (Line 9) {
            # (Line 10) if (f.loop[cp] < 4)
            if EUDIf()(f.loop[cp] >= 4, neg=True):
                # (Line 11) {
                # (Line 12) f.Table_Sin(cp, 22 + 45 * f.loop[cp], 50 + 50 * f.loop[cp]);
                f.Table_Sin(cp, 22 + 45 * f.loop[cp], 50 + 50 * f.loop[cp])
                # (Line 13) f.Table_Cos(cp, 22 + 45 * f.loop[cp], 50 + 50 * f.loop[cp]);
                f.Table_Cos(cp, 22 + 45 * f.loop[cp], 50 + 50 * f.loop[cp])
                # (Line 15) f.SquareShape(cp, 1, " Unit. Hoffnung 25000", f.CosAngle[cp], f.SinAngle[cp]);
                f.SquareShape(cp, 1, " Unit. Hoffnung 25000", f.CosAngle[cp], f.SinAngle[cp])
                # (Line 17) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", cp);
                # (Line 19) f.SkillWait(cp, 160);
                DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", cp))
                f.SkillWait(cp, 160)
                # (Line 21) f.loop[cp] += 1;
                _ARRW(f.loop, cp).__iadd__(1)
                # (Line 22) }
                # (Line 23) else if (f.loop[cp] == 4)
            if EUDElseIf()(f.loop[cp] == 4):
                # (Line 24) {
                # (Line 25) f.SkillWait(cp, 80);
                f.SkillWait(cp, 80)
                # (Line 27) f.count[cp] += 1;
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 28) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 29) }
                # (Line 30) }
            EUDEndIf()
            # (Line 31) else if (f.count[cp] == 1)
        if EUDElseIf()(f.count[cp] == 1):
            # (Line 32) {
            # (Line 33) if (f.loop[cp] < 4)
            if EUDIf()(f.loop[cp] >= 4, neg=True):
                # (Line 34) {
                # (Line 35) f.Table_Sin(cp, 22 + 45 * f.loop[cp], 50 + 50 * f.loop[cp]);
                f.Table_Sin(cp, 22 + 45 * f.loop[cp], 50 + 50 * f.loop[cp])
                # (Line 36) f.Table_Cos(cp, 22 + 45 * f.loop[cp], 50 + 50 * f.loop[cp]);
                f.Table_Cos(cp, 22 + 45 * f.loop[cp], 50 + 50 * f.loop[cp])
                # (Line 38) f.SquareShape(cp, 1, " Unit. Hoffnung 25000", f.CosAngle[cp], f.SinAngle[cp]);
                f.SquareShape(cp, 1, " Unit. Hoffnung 25000", f.CosAngle[cp], f.SinAngle[cp])
                # (Line 40) if (f.loop[cp] % 2 == 1)
                if EUDIf()(f.loop[cp] % 2 == 1):
                    # (Line 41) {
                    # (Line 42) f.SquareShape(cp, 1, "50 + 1n Battlecruiser", f.CosAngle[cp], f.SinAngle[cp]);
                    f.SquareShape(cp, 1, "50 + 1n Battlecruiser", f.CosAngle[cp], f.SinAngle[cp])
                    # (Line 44) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
                    # (Line 45) Order("50 + 1n Battlecruiser", cp, "Anywhere", Attack, f.location[cp]);
                    DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
                    # (Line 46) }
                    DoActions(Order("50 + 1n Battlecruiser", cp, "Anywhere", Attack, f.location[cp]))
                    # (Line 47) else if (f.loop[cp] % 2 == 0)
                if EUDElseIf()(f.loop[cp] % 2 == 0):
                    # (Line 48) {
                    # (Line 49) f.SquareShape(cp, 1, "Kakaru (Twilight)", f.CosAngle[cp], f.SinAngle[cp]);
                    f.SquareShape(cp, 1, "Kakaru (Twilight)", f.CosAngle[cp], f.SinAngle[cp])
                    # (Line 50) KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", cp);
                    # (Line 51) }
                    DoActions(KillUnitAt(All, "Kakaru (Twilight)", "Anywhere", cp))
                    # (Line 53) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", cp);
                EUDEndIf()
                # (Line 55) f.SkillWait(cp, 160);
                DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", cp))
                f.SkillWait(cp, 160)
                # (Line 57) f.loop[cp] += 1;
                _ARRW(f.loop, cp).__iadd__(1)
                # (Line 58) }
                # (Line 59) else if (f.loop[cp] == 4)
            if EUDElseIf()(f.loop[cp] == 4):
                # (Line 60) {
                # (Line 61) f.SkillWait(cp, 560);
                f.SkillWait(cp, 560)
                # (Line 63) f.count[cp] += 1;
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 64) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 65) }
                # (Line 66) }
            EUDEndIf()
            # (Line 67) else if (f.count[cp] == 2)
        if EUDElseIf()(f.count[cp] == 2):
            # (Line 68) {
            # (Line 69) if (f.loop[cp] < 4)
            if EUDIf()(f.loop[cp] >= 4, neg=True):
                # (Line 70) {
                # (Line 71) KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp);
                # (Line 73) f.Table_Sin(cp, 22 + 22 * (f.loop[cp] % 4), 150);
                DoActions(KillUnitAt(All, "50 + 1n Battlecruiser", "Anywhere", cp))
                f.Table_Sin(cp, 22 + 22 * (f.loop[cp] % 4), 150)
                # (Line 74) f.Table_Cos(cp, 22 + 22 * (f.loop[cp] % 4), 150);
                f.Table_Cos(cp, 22 + 22 * (f.loop[cp] % 4), 150)
                # (Line 76) f.SquareShape(cp, 1, "80 + 1n Tank", f.CosAngle[cp], f.SinAngle[cp]);
                f.SquareShape(cp, 1, "80 + 1n Tank", f.CosAngle[cp], f.SinAngle[cp])
                # (Line 77) KillUnitAt(All, "80 + 1n Tank", "Anywhere", cp);
                # (Line 79) f.SkillWait(cp, 80);
                DoActions(KillUnitAt(All, "80 + 1n Tank", "Anywhere", cp))
                f.SkillWait(cp, 80)
                # (Line 81) f.loop[cp] += 1;
                _ARRW(f.loop, cp).__iadd__(1)
                # (Line 82) }
                # (Line 83) else if (f.loop[cp] < 8)
            if EUDElseIf()(f.loop[cp] >= 8, neg=True):
                # (Line 84) {
                # (Line 86) f.Table_Sin(cp, 22 + 22 * (f.loop[cp] % 4), 150);
                f.Table_Sin(cp, 22 + 22 * (f.loop[cp] % 4), 150)
                # (Line 87) f.Table_Cos(cp, 22 + 22 * (f.loop[cp] % 4), 150);
                f.Table_Cos(cp, 22 + 22 * (f.loop[cp] % 4), 150)
                # (Line 89) f.SquareShape(cp, 1, "40 + 1n Wraith", f.CosAngle[cp], f.SinAngle[cp]);
                f.SquareShape(cp, 1, "40 + 1n Wraith", f.CosAngle[cp], f.SinAngle[cp])
                # (Line 90) f.SquareShape(cp, 1, " Unit. Hoffnung 25000", f.CosAngle[cp], f.SinAngle[cp]);
                f.SquareShape(cp, 1, " Unit. Hoffnung 25000", f.CosAngle[cp], f.SinAngle[cp])
                # (Line 91) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", cp);
                # (Line 92) KillUnitAt(All, "40 + 1n Wraith", "Anywhere", cp);
                DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", cp))
                # (Line 94) f.SkillWait(cp, 80);
                DoActions(KillUnitAt(All, "40 + 1n Wraith", "Anywhere", cp))
                f.SkillWait(cp, 80)
                # (Line 96) f.loop[cp] += 1;
                _ARRW(f.loop, cp).__iadd__(1)
                # (Line 97) }
                # (Line 98) else if (f.loop[cp] == 8)
            if EUDElseIf()(f.loop[cp] == 8):
                # (Line 99) {
                # (Line 100) f.SkillWait(cp, 240);
                f.SkillWait(cp, 240)
                # (Line 102) f.count[cp] += 1;
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 103) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 104) }
                # (Line 105) }
            EUDEndIf()
            # (Line 106) else if (f.count[cp] == 3)
        if EUDElseIf()(f.count[cp] == 3):
            # (Line 107) {
            # (Line 108) if (f.loop[cp] < 6)
            if EUDIf()(f.loop[cp] >= 6, neg=True):
                # (Line 109) {
                # (Line 110) RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", cp);
                # (Line 112) f.Table_Sin(cp, 22 + 45 * (f.loop[cp] % 2), 75);
                DoActions(RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", cp))
                f.Table_Sin(cp, 22 + 45 * (f.loop[cp] % 2), 75)
                # (Line 113) f.Table_Cos(cp, 22 + 45 * (f.loop[cp] % 2), 75);
                f.Table_Cos(cp, 22 + 45 * (f.loop[cp] % 2), 75)
                # (Line 115) f.SquareShape(cp, 1, "40 + 1n Wraith", f.CosAngle[cp], f.SinAngle[cp]);
                f.SquareShape(cp, 1, "40 + 1n Wraith", f.CosAngle[cp], f.SinAngle[cp])
                # (Line 116) MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere");
                # (Line 117) Order("40 + 1n Wraith", cp, "Anywhere", Attack, f.location[cp]);
                DoActions(MoveLocation(f.location[cp], f.heroID[cp], cp, "Anywhere"))
                # (Line 119) f.SquareShape(cp, 1, " Unit. Hoffnung 25000", f.CosAngle[cp], f.SinAngle[cp]);
                DoActions(Order("40 + 1n Wraith", cp, "Anywhere", Attack, f.location[cp]))
                f.SquareShape(cp, 1, " Unit. Hoffnung 25000", f.CosAngle[cp], f.SinAngle[cp])
                # (Line 120) f.SquareShape(cp, 4, "40 + 1n Zealot", f.CosAngle[cp], f.SinAngle[cp]);
                f.SquareShape(cp, 4, "40 + 1n Zealot", f.CosAngle[cp], f.SinAngle[cp])
                # (Line 122) f.Table_Sin(cp, 67 + 45 * (f.loop[cp] % 2), 75);
                f.Table_Sin(cp, 67 + 45 * (f.loop[cp] % 2), 75)
                # (Line 123) f.Table_Cos(cp, 67 + 45 * (f.loop[cp] % 2), 75);
                f.Table_Cos(cp, 67 + 45 * (f.loop[cp] % 2), 75)
                # (Line 125) f.SquareShape(cp, 1, "Protoss Dark Archon", f.CosAngle[cp], f.SinAngle[cp]);
                f.SquareShape(cp, 1, "Protoss Dark Archon", f.CosAngle[cp], f.SinAngle[cp])
                # (Line 127) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", cp);
                # (Line 128) KillUnitAt(All, "40 + 1n Zealot", "Anywhere", cp);
                DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", cp))
                # (Line 129) KillUnitAt(All, "Protoss Dark Archon", "Anywhere", cp);
                DoActions(KillUnitAt(All, "40 + 1n Zealot", "Anywhere", cp))
                # (Line 131) f.SkillWait(cp, 160);
                DoActions(KillUnitAt(All, "Protoss Dark Archon", "Anywhere", cp))
                f.SkillWait(cp, 160)
                # (Line 133) f.loop[cp] += 1;
                _ARRW(f.loop, cp).__iadd__(1)
                # (Line 134) }
                # (Line 135) else if (f.loop[cp] < 10)
            if EUDElseIf()(f.loop[cp] >= 10, neg=True):
                # (Line 136) {
                # (Line 137) RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", cp);
                # (Line 139) f.Table_Sin(cp, 22 + 22 * (f.loop[cp] % 4), 150);
                DoActions(RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", cp))
                f.Table_Sin(cp, 22 + 22 * (f.loop[cp] % 4), 150)
                # (Line 140) f.Table_Cos(cp, 22 + 22 * (f.loop[cp] % 4), 150);
                f.Table_Cos(cp, 22 + 22 * (f.loop[cp] % 4), 150)
                # (Line 142) f.SquareShape(cp, 1, " Unit. Hoffnung 25000", f.CosAngle[cp], f.SinAngle[cp]);
                f.SquareShape(cp, 1, " Unit. Hoffnung 25000", f.CosAngle[cp], f.SinAngle[cp])
                # (Line 143) f.SquareShape(cp, 7, "40 + 1n Zealot", f.CosAngle[cp], f.SinAngle[cp]);
                f.SquareShape(cp, 7, "40 + 1n Zealot", f.CosAngle[cp], f.SinAngle[cp])
                # (Line 144) KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", cp);
                # (Line 145) KillUnitAt(All, "40 + 1n Zealot", "Anywhere", cp);
                DoActions(KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", cp))
                # (Line 147) f.SkillWait(cp, 80);
                DoActions(KillUnitAt(All, "40 + 1n Zealot", "Anywhere", cp))
                f.SkillWait(cp, 80)
                # (Line 149) f.loop[cp] += 1;
                _ARRW(f.loop, cp).__iadd__(1)
                # (Line 150) }
                # (Line 151) else if (f.loop[cp] == 10)
            if EUDElseIf()(f.loop[cp] == 10):
                # (Line 152) {
                # (Line 153) f.SkillWait(cp, 80);
                f.SkillWait(cp, 80)
                # (Line 155) f.count[cp] += 1;
                _ARRW(f.count, cp).__iadd__(1)
                # (Line 156) f.loop[cp] = 0;
                _ARRW(f.loop, cp) << (0)
                # (Line 157) }
                # (Line 158) }
            EUDEndIf()
            # (Line 159) else if (f.count[cp] == 4)
        if EUDElseIf()(f.count[cp] == 4):
            # (Line 160) {
            # (Line 161) f.SkillEnd(cp);
            f.SkillEnd(cp)
            # (Line 162) }
            # (Line 163) }
        EUDEndIf()
        # (Line 164) }
    EUDEndIf()
