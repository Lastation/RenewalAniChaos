import PluginVariables as msqcvar;
import func.shape as s;

function main(playerID)
{
   if (v.P_Delay[playerID] == 0)
   {
      if (v.P_CountMain[playerID] == 0)
      {
         if (v.P_LoopMain[playerID] < 6)
         {
            s.SkillWait(80);

            if (Bring(playerID, AtLeast, 2, "Protoss Arbiter", "[Skill]UseSkill") 
            && Deaths(playerID, AtLeast, s.UltimateA[playerID], " `UltimateCoolTime"))
            {
               s.Voice_Routine(playerID, 5);
               s.wait[playerID] = 0;
               v.P_CountMain[playerID] = 0;
               v.P_LoopMain[playerID] = 0;
               s.step[playerID] = 310;
               SetDeaths(playerID, Subtract, s.UltimateA[playerID], " `UltimateCoolTime");
               KillUnitAt(2, "Protoss Arbiter", "[Skill]UseSkill", playerID);
            }
            else {
               v.P_LoopMain[playerID] += 1;
            }

         }
         else if (v.P_LoopMain[playerID] == 6)
         {                        
            s.SkillWait(80);

            v.P_CountMain[playerID] += 1;
            v.P_LoopMain[playerID] = 0;
         }

      }


      else if (v.P_CountMain[playerID] == 1)
      {
         if (v.P_LoopMain[playerID] < 4)
         {          
            RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);

            s.Shape_Square(playerID, 1, "40 + 1n Wraith", 50 + 25 * v.P_LoopMain[playerID], 0);
            s.Shape_Square(playerID, 1, "40 + 1n Zealot", 50 + 25 * v.P_LoopMain[playerID], 0);

            KillUnitAt(All, "40 + 1n Zealot", "Anywhere", playerID);

            MoveLocation(v.P_LocationID[playerID], v.P_CharacterID[playerID], playerID, "Anywhere");
            Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);

            s.SkillWait(80);

            v.P_LoopMain[playerID] += 1;
         }
         else if (v.P_LoopMain[playerID] < 12)
         {                        
            s.Table_Sin(playerID, 22 + 22 * (v.P_LoopMain[playerID] % 4), 200 - 25 * (v.P_LoopMain[playerID] - 4));
            s.Table_Cos(playerID, 22 + 22 * (v.P_LoopMain[playerID] % 4), 200 - 25 * (v.P_LoopMain[playerID] - 4));

            s.Shape_Square(playerID, 1, "40 + 1n Wraith", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            s.Shape_Square(playerID, 1, " Unit. Hoffnung 25000", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            KillUnitAt(All, " Unit. Hoffnung 25000", "Anywhere", playerID);
            KillUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);

            s.SkillWait(80);

            v.P_LoopMain[playerID] += 1;
         }
         else if (v.P_LoopMain[playerID] == 12)
         {                        
            s.SkillWait(80);

            v.P_CountMain[playerID] += 1;
            v.P_LoopMain[playerID] = 0;
         }

      }
      else if (v.P_CountMain[playerID] == 2)
      {
         if (v.P_LoopMain[playerID] < 4)
         {       
            RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);

            s.Table_Sin(playerID, 22 + 45 * (v.P_LoopMain[playerID] % 4), 75);
            s.Table_Cos(playerID, 22 + 45 * (v.P_LoopMain[playerID] % 4), 75);

            s.Shape_Square(playerID, 1, "40 + 1n Wraith", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            s.Shape_Square(playerID, 4, "40 + 1n Zealot", v.P_AngleCos[playerID], v.P_AngleSin[playerID]);
            KillUnitAt(All, "40 + 1n Zealot", "Anywhere", playerID);

            MoveLocation(v.P_LocationID[playerID], v.P_CharacterID[playerID], playerID, "Anywhere");
            Order("40 + 1n Wraith", playerID, "Anywhere", Attack, v.P_LocationID[playerID]);

            s.SkillWait(160);

            v.P_LoopMain[playerID] += 1;
         }
         else if (v.P_LoopMain[playerID] == 4)
         {         
            RemoveUnitAt(All, "40 + 1n Wraith", "Anywhere", playerID);

            s.SkillWait(80);

            v.P_CountMain[playerID] += 1;
            v.P_LoopMain[playerID] = 0;

         }
      }
      else if (v.P_CountMain[playerID] == 3)
      {
         s.SkillEnd();
      }
   }
}